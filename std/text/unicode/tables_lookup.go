package unicode

func Category(c string) *RangeTable {
	switch c {
	case "C":
		return C
	case "Cc":
		return Cc
	case "Cf":
		return Cf
	case "Co":
		return Co
	case "Cs":
		return Cs
	case "L":
		return L
	case "Ll":
		return Ll
	case "Lm":
		return Lm
	case "Lo":
		return Lo
	case "Lt":
		return Lt
	case "Lu":
		return Lu
	case "M":
		return M
	case "Mc":
		return Mc
	case "Me":
		return Me
	case "Mn":
		return Mn
	case "N":
		return N
	case "Nd":
		return Nd
	case "Nl":
		return Nl
	case "No":
		return No
	case "P":
		return P
	case "Pc":
		return Pc
	case "Pd":
		return Pd
	case "Pe":
		return Pe
	case "Pf":
		return Pf
	case "Pi":
		return Pi
	case "Po":
		return Po
	case "Ps":
		return Ps
	case "S":
		return S
	case "Sc":
		return Sc
	case "Sk":
		return Sk
	case "Sm":
		return Sm
	case "So":
		return So
	case "Z":
		return Z
	case "Zl":
		return Zl
	case "Zp":
		return Zp
	case "Zs":
		return Zs
	default:
		return nil
	}
}

// Script maps a script name to a Unicode script table.
func Script(s string) *RangeTable {
	switch s {
	case "Adlam":
		return Adlam
	case "Ahom":
		return Ahom
	case "Anatolian_Hieroglyphs":
		return Anatolian_Hieroglyphs
	case "Arabic":
		return Arabic
	case "Armenian":
		return Armenian
	case "Avestan":
		return Avestan
	case "Balinese":
		return Balinese
	case "Bamum":
		return Bamum
	case "Bassa_Vah":
		return Bassa_Vah
	case "Batak":
		return Batak
	case "Bengali":
		return Bengali
	case "Bhaiksuki":
		return Bhaiksuki
	case "Bopomofo":
		return Bopomofo
	case "Brahmi":
		return Brahmi
	case "Braille":
		return Braille
	case "Buginese":
		return Buginese
	case "Buhid":
		return Buhid
	case "Canadian_Aboriginal":
		return Canadian_Aboriginal
	case "Carian":
		return Carian
	case "Caucasian_Albanian":
		return Caucasian_Albanian
	case "Chakma":
		return Chakma
	case "Cham":
		return Cham
	case "Cherokee":
		return Cherokee
	case "Chorasmian":
		return Chorasmian
	case "Common":
		return Common
	case "Coptic":
		return Coptic
	case "Cuneiform":
		return Cuneiform
	case "Cypriot":
		return Cypriot
	case "Cypro_Minoan":
		return Cypro_Minoan
	case "Cyrillic":
		return Cyrillic
	case "Deseret":
		return Deseret
	case "Devanagari":
		return Devanagari
	case "Dives_Akuru":
		return Dives_Akuru
	case "Dogra":
		return Dogra
	case "Duployan":
		return Duployan
	case "Egyptian_Hieroglyphs":
		return Egyptian_Hieroglyphs
	case "Elbasan":
		return Elbasan
	case "Elymaic":
		return Elymaic
	case "Ethiopic":
		return Ethiopic
	case "Georgian":
		return Georgian
	case "Glagolitic":
		return Glagolitic
	case "Gothic":
		return Gothic
	case "Grantha":
		return Grantha
	case "Greek":
		return Greek
	case "Gujarati":
		return Gujarati
	case "Gunjala_Gondi":
		return Gunjala_Gondi
	case "Gurmukhi":
		return Gurmukhi
	case "Han":
		return Han
	case "Hangul":
		return Hangul
	case "Hanifi_Rohingya":
		return Hanifi_Rohingya
	case "Hanunoo":
		return Hanunoo
	case "Hatran":
		return Hatran
	case "Hebrew":
		return Hebrew
	case "Hiragana":
		return Hiragana
	case "Imperial_Aramaic":
		return Imperial_Aramaic
	case "Inherited":
		return Inherited
	case "Inscriptional_Pahlavi":
		return Inscriptional_Pahlavi
	case "Inscriptional_Parthian":
		return Inscriptional_Parthian
	case "Javanese":
		return Javanese
	case "Kaithi":
		return Kaithi
	case "Kannada":
		return Kannada
	case "Katakana":
		return Katakana
	case "Kawi":
		return Kawi
	case "Kayah_Li":
		return Kayah_Li
	case "Kharoshthi":
		return Kharoshthi
	case "Khitan_Small_Script":
		return Khitan_Small_Script
	case "Khmer":
		return Khmer
	case "Khojki":
		return Khojki
	case "Khudawadi":
		return Khudawadi
	case "Lao":
		return Lao
	case "Latin":
		return Latin
	case "Lepcha":
		return Lepcha
	case "Limbu":
		return Limbu
	case "Linear_A":
		return Linear_A
	case "Linear_B":
		return Linear_B
	case "Lisu":
		return Lisu
	case "Lycian":
		return Lycian
	case "Lydian":
		return Lydian
	case "Mahajani":
		return Mahajani
	case "Makasar":
		return Makasar
	case "Malayalam":
		return Malayalam
	case "Mandaic":
		return Mandaic
	case "Manichaean":
		return Manichaean
	case "Marchen":
		return Marchen
	case "Masaram_Gondi":
		return Masaram_Gondi
	case "Medefaidrin":
		return Medefaidrin
	case "Meetei_Mayek":
		return Meetei_Mayek
	case "Mende_Kikakui":
		return Mende_Kikakui
	case "Meroitic_Cursive":
		return Meroitic_Cursive
	case "Meroitic_Hieroglyphs":
		return Meroitic_Hieroglyphs
	case "Miao":
		return Miao
	case "Modi":
		return Modi
	case "Mongolian":
		return Mongolian
	case "Mro":
		return Mro
	case "Multani":
		return Multani
	case "Myanmar":
		return Myanmar
	case "Nabataean":
		return Nabataean
	case "Nag_Mundari":
		return Nag_Mundari
	case "Nandinagari":
		return Nandinagari
	case "New_Tai_Lue":
		return New_Tai_Lue
	case "Newa":
		return Newa
	case "Nko":
		return Nko
	case "Nushu":
		return Nushu
	case "Nyiakeng_Puachue_Hmong":
		return Nyiakeng_Puachue_Hmong
	case "Ogham":
		return Ogham
	case "Ol_Chiki":
		return Ol_Chiki
	case "Old_Hungarian":
		return Old_Hungarian
	case "Old_Italic":
		return Old_Italic
	case "Old_North_Arabian":
		return Old_North_Arabian
	case "Old_Permic":
		return Old_Permic
	case "Old_Persian":
		return Old_Persian
	case "Old_Sogdian":
		return Old_Sogdian
	case "Old_South_Arabian":
		return Old_South_Arabian
	case "Old_Turkic":
		return Old_Turkic
	case "Old_Uyghur":
		return Old_Uyghur
	case "Oriya":
		return Oriya
	case "Osage":
		return Osage
	case "Osmanya":
		return Osmanya
	case "Pahawh_Hmong":
		return Pahawh_Hmong
	case "Palmyrene":
		return Palmyrene
	case "Pau_Cin_Hau":
		return Pau_Cin_Hau
	case "Phags_Pa":
		return Phags_Pa
	case "Phoenician":
		return Phoenician
	case "Psalter_Pahlavi":
		return Psalter_Pahlavi
	case "Rejang":
		return Rejang
	case "Runic":
		return Runic
	case "Samaritan":
		return Samaritan
	case "Saurashtra":
		return Saurashtra
	case "Sharada":
		return Sharada
	case "Shavian":
		return Shavian
	case "Siddham":
		return Siddham
	case "SignWriting":
		return SignWriting
	case "Sinhala":
		return Sinhala
	case "Sogdian":
		return Sogdian
	case "Sora_Sompeng":
		return Sora_Sompeng
	case "Soyombo":
		return Soyombo
	case "Sundanese":
		return Sundanese
	case "Syloti_Nagri":
		return Syloti_Nagri
	case "Syriac":
		return Syriac
	case "Tagalog":
		return Tagalog
	case "Tagbanwa":
		return Tagbanwa
	case "Tai_Le":
		return Tai_Le
	case "Tai_Tham":
		return Tai_Tham
	case "Tai_Viet":
		return Tai_Viet
	case "Takri":
		return Takri
	case "Tamil":
		return Tamil
	case "Tangsa":
		return Tangsa
	case "Tangut":
		return Tangut
	case "Telugu":
		return Telugu
	case "Thaana":
		return Thaana
	case "Thai":
		return Thai
	case "Tibetan":
		return Tibetan
	case "Tifinagh":
		return Tifinagh
	case "Tirhuta":
		return Tirhuta
	case "Toto":
		return Toto
	case "Ugaritic":
		return Ugaritic
	case "Vai":
		return Vai
	case "Vithkuqi":
		return Vithkuqi
	case "Wancho":
		return Wancho
	case "Warang_Citi":
		return Warang_Citi
	case "Yezidi":
		return Yezidi
	case "Yi":
		return Yi
	case "Zanabazar_Square":
		return Zanabazar_Square
	default:
		return nil
	}
}

// FoldCategory maps a category name to a table of
// code points outside the category that are equivalent under
// simple case folding to code points inside the category.
// If there is no entry for a category name, there are no such points.
func FoldCategory(c string) *RangeTable {
	switch c {
	case "L":
		return foldL
	case "Ll":
		return foldLl
	case "Lt":
		return foldLt
	case "Lu":
		return foldLu
	case "M":
		return foldM
	case "Mn":
		return foldMn
	default:
		return nil
	}
}

// FoldScript maps a script name to a table of
// code points outside the script that are equivalent under
// simple case folding to code points inside the script.
// If there is no entry for a script name, there are no such points.
func FoldScript(s string) *RangeTable {
	switch s {
	case "Common":
		return foldCommon
	case "Greek":
		return foldGreek
	case "Inherited":
		return foldInherited
	default:
		return nil
	}
}

// Property maps a property name to a Unicode property table.
func Property(s string) *RangeTable {
	switch s {
	case "ASCII_Hex_Digit":
		return ASCII_Hex_Digit
	case "Bidi_Control":
		return Bidi_Control
	case "Dash":
		return Dash
	case "Deprecated":
		return Deprecated
	case "Diacritic":
		return Diacritic
	case "Extender":
		return Extender
	case "Hex_Digit":
		return Hex_Digit
	case "Hyphen":
		return Hyphen
	case "IDS_Binary_Operator":
		return IDS_Binary_Operator
	case "IDS_Trinary_Operator":
		return IDS_Trinary_Operator
	case "Ideographic":
		return Ideographic
	case "Join_Control":
		return Join_Control
	case "Logical_Order_Exception":
		return Logical_Order_Exception
	case "Noncharacter_Code_Point":
		return Noncharacter_Code_Point
	case "Other_Alphabetic":
		return Other_Alphabetic
	case "Other_Default_Ignorable_Code_Point":
		return Other_Default_Ignorable_Code_Point
	case "Other_Grapheme_Extend":
		return Other_Grapheme_Extend
	case "Other_ID_Continue":
		return Other_ID_Continue
	case "Other_ID_Start":
		return Other_ID_Start
	case "Other_Lowercase":
		return Other_Lowercase
	case "Other_Math":
		return Other_Math
	case "Other_Uppercase":
		return Other_Uppercase
	case "Pattern_Syntax":
		return Pattern_Syntax
	case "Pattern_White_Space":
		return Pattern_White_Space
	case "Prepended_Concatenation_Mark":
		return Prepended_Concatenation_Mark
	case "Quotation_Mark":
		return Quotation_Mark
	case "Radical":
		return Radical
	case "Regional_Indicator":
		return Regional_Indicator
	case "Sentence_Terminal":
		return Sentence_Terminal
	case "STerm":
		return Sentence_Terminal
	case "Soft_Dotted":
		return Soft_Dotted
	case "Terminal_Punctuation":
		return Terminal_Punctuation
	case "Unified_Ideograph":
		return Unified_Ideograph
	case "Variation_Selector":
		return Variation_Selector
	case "White_Space":
		return White_Space
	default:
		return nil
	}
}
