import { importModule, Application, heap, Pointer } from "@ffi";

importModule("plat/js/webext/networkingprivate", (A: Application) => {
  const WEBEXT = typeof globalThis.browser === "undefined" ? globalThis.chrome : globalThis.browser;

  return {
    "store_APNProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 28, false);
        A.store.Ref(ptr + 0, undefined);
        A.store.Ref(ptr + 4, undefined);
        A.store.Ref(ptr + 8, undefined);
        A.store.Ref(ptr + 12, undefined);
        A.store.Ref(ptr + 16, undefined);
        A.store.Ref(ptr + 20, undefined);
        A.store.Ref(ptr + 24, undefined);
      } else {
        A.store.Bool(ptr + 28, true);
        A.store.Ref(ptr + 0, x["AccessPointName"]);
        A.store.Ref(ptr + 4, x["Authentication"]);
        A.store.Ref(ptr + 8, x["Language"]);
        A.store.Ref(ptr + 12, x["LocalizedName"]);
        A.store.Ref(ptr + 16, x["Name"]);
        A.store.Ref(ptr + 20, x["Password"]);
        A.store.Ref(ptr + 24, x["Username"]);
      }
    },
    "load_APNProperties": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      x["AccessPointName"] = A.load.Ref(ptr + 0, undefined);
      x["Authentication"] = A.load.Ref(ptr + 4, undefined);
      x["Language"] = A.load.Ref(ptr + 8, undefined);
      x["LocalizedName"] = A.load.Ref(ptr + 12, undefined);
      x["Name"] = A.load.Ref(ptr + 16, undefined);
      x["Password"] = A.load.Ref(ptr + 20, undefined);
      x["Username"] = A.load.Ref(ptr + 24, undefined);
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },
    "constof_ActivationStateType": (ref: heap.Ref<string>): number => {
      const idx = ["Activated", "Activating", "NotActivated", "PartiallyActivated"].indexOf(A.H.get(ref));
      return idx < 0 ? 0 : idx + 1;
    },
    "constof_CaptivePortalStatus": (ref: heap.Ref<string>): number => {
      const idx = ["Unknown", "Offline", "Online", "Portal", "ProxyAuthRequired"].indexOf(A.H.get(ref));
      return idx < 0 ? 0 : idx + 1;
    },

    "store_FoundNetworkProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 20, false);
        A.store.Ref(ptr + 0, undefined);
        A.store.Ref(ptr + 4, undefined);
        A.store.Ref(ptr + 8, undefined);
        A.store.Ref(ptr + 12, undefined);
        A.store.Ref(ptr + 16, undefined);
      } else {
        A.store.Bool(ptr + 20, true);
        A.store.Ref(ptr + 0, x["Status"]);
        A.store.Ref(ptr + 4, x["NetworkId"]);
        A.store.Ref(ptr + 8, x["Technology"]);
        A.store.Ref(ptr + 12, x["ShortName"]);
        A.store.Ref(ptr + 16, x["LongName"]);
      }
    },
    "load_FoundNetworkProperties": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      x["Status"] = A.load.Ref(ptr + 0, undefined);
      x["NetworkId"] = A.load.Ref(ptr + 4, undefined);
      x["Technology"] = A.load.Ref(ptr + 8, undefined);
      x["ShortName"] = A.load.Ref(ptr + 12, undefined);
      x["LongName"] = A.load.Ref(ptr + 16, undefined);
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_CellularProviderProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 12, false);
        A.store.Ref(ptr + 0, undefined);
        A.store.Ref(ptr + 4, undefined);
        A.store.Ref(ptr + 8, undefined);
      } else {
        A.store.Bool(ptr + 12, true);
        A.store.Ref(ptr + 0, x["Name"]);
        A.store.Ref(ptr + 4, x["Code"]);
        A.store.Ref(ptr + 8, x["Country"]);
      }
    },
    "load_CellularProviderProperties": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      x["Name"] = A.load.Ref(ptr + 0, undefined);
      x["Code"] = A.load.Ref(ptr + 4, undefined);
      x["Country"] = A.load.Ref(ptr + 8, undefined);
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_PaymentPortal": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 12, false);
        A.store.Ref(ptr + 0, undefined);
        A.store.Ref(ptr + 4, undefined);
        A.store.Ref(ptr + 8, undefined);
      } else {
        A.store.Bool(ptr + 12, true);
        A.store.Ref(ptr + 0, x["Method"]);
        A.store.Ref(ptr + 4, x["PostData"]);
        A.store.Ref(ptr + 8, x["Url"]);
      }
    },
    "load_PaymentPortal": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      x["Method"] = A.load.Ref(ptr + 0, undefined);
      x["PostData"] = A.load.Ref(ptr + 4, undefined);
      x["Url"] = A.load.Ref(ptr + 8, undefined);
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_SIMLockStatus": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 14, false);
        A.store.Ref(ptr + 0, undefined);
        A.store.Bool(ptr + 12, false);
        A.store.Bool(ptr + 4, false);
        A.store.Bool(ptr + 13, false);
        A.store.Int32(ptr + 8, 0);
      } else {
        A.store.Bool(ptr + 14, true);
        A.store.Ref(ptr + 0, x["LockType"]);
        A.store.Bool(ptr + 12, "LockEnabled" in x ? true : false);
        A.store.Bool(ptr + 4, x["LockEnabled"] ? true : false);
        A.store.Bool(ptr + 13, "RetriesLeft" in x ? true : false);
        A.store.Int32(ptr + 8, x["RetriesLeft"] === undefined ? 0 : (x["RetriesLeft"] as number));
      }
    },
    "load_SIMLockStatus": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      x["LockType"] = A.load.Ref(ptr + 0, undefined);
      if (A.load.Bool(ptr + 12)) {
        x["LockEnabled"] = A.load.Bool(ptr + 4);
      } else {
        delete x["LockEnabled"];
      }
      if (A.load.Bool(ptr + 13)) {
        x["RetriesLeft"] = A.load.Int32(ptr + 8);
      } else {
        delete x["RetriesLeft"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_CellularProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 219, false);
        A.store.Bool(ptr + 213, false);
        A.store.Bool(ptr + 0, false);

        A.store.Bool(ptr + 4 + 28, false);
        A.store.Ref(ptr + 4 + 0, undefined);
        A.store.Ref(ptr + 4 + 4, undefined);
        A.store.Ref(ptr + 4 + 8, undefined);
        A.store.Ref(ptr + 4 + 12, undefined);
        A.store.Ref(ptr + 4 + 16, undefined);
        A.store.Ref(ptr + 4 + 20, undefined);
        A.store.Ref(ptr + 4 + 24, undefined);
        A.store.Ref(ptr + 36, undefined);
        A.store.Ref(ptr + 40, undefined);
        A.store.Enum(ptr + 44, -1);
        A.store.Bool(ptr + 214, false);
        A.store.Bool(ptr + 48, false);
        A.store.Ref(ptr + 52, undefined);
        A.store.Ref(ptr + 56, undefined);
        A.store.Ref(ptr + 60, undefined);
        A.store.Ref(ptr + 64, undefined);
        A.store.Ref(ptr + 68, undefined);

        A.store.Bool(ptr + 72 + 12, false);
        A.store.Ref(ptr + 72 + 0, undefined);
        A.store.Ref(ptr + 72 + 4, undefined);
        A.store.Ref(ptr + 72 + 8, undefined);
        A.store.Ref(ptr + 88, undefined);
        A.store.Ref(ptr + 92, undefined);

        A.store.Bool(ptr + 96 + 28, false);
        A.store.Ref(ptr + 96 + 0, undefined);
        A.store.Ref(ptr + 96 + 4, undefined);
        A.store.Ref(ptr + 96 + 8, undefined);
        A.store.Ref(ptr + 96 + 12, undefined);
        A.store.Ref(ptr + 96 + 16, undefined);
        A.store.Ref(ptr + 96 + 20, undefined);
        A.store.Ref(ptr + 96 + 24, undefined);
        A.store.Ref(ptr + 128, undefined);
        A.store.Ref(ptr + 132, undefined);
        A.store.Ref(ptr + 136, undefined);
        A.store.Ref(ptr + 140, undefined);
        A.store.Ref(ptr + 144, undefined);
        A.store.Ref(ptr + 148, undefined);

        A.store.Bool(ptr + 152 + 12, false);
        A.store.Ref(ptr + 152 + 0, undefined);
        A.store.Ref(ptr + 152 + 4, undefined);
        A.store.Ref(ptr + 152 + 8, undefined);
        A.store.Ref(ptr + 168, undefined);
        A.store.Bool(ptr + 215, false);
        A.store.Bool(ptr + 172, false);

        A.store.Bool(ptr + 176 + 12, false);
        A.store.Ref(ptr + 176 + 0, undefined);
        A.store.Ref(ptr + 176 + 4, undefined);
        A.store.Ref(ptr + 176 + 8, undefined);

        A.store.Bool(ptr + 192 + 14, false);
        A.store.Ref(ptr + 192 + 0, undefined);
        A.store.Bool(ptr + 192 + 12, false);
        A.store.Bool(ptr + 192 + 4, false);
        A.store.Bool(ptr + 192 + 13, false);
        A.store.Int32(ptr + 192 + 8, 0);
        A.store.Bool(ptr + 216, false);
        A.store.Bool(ptr + 207, false);
        A.store.Bool(ptr + 217, false);
        A.store.Int32(ptr + 208, 0);
        A.store.Bool(ptr + 218, false);
        A.store.Bool(ptr + 212, false);
      } else {
        A.store.Bool(ptr + 219, true);
        A.store.Bool(ptr + 213, "AutoConnect" in x ? true : false);
        A.store.Bool(ptr + 0, x["AutoConnect"] ? true : false);

        if (typeof x["APN"] === "undefined") {
          A.store.Bool(ptr + 4 + 28, false);
          A.store.Ref(ptr + 4 + 0, undefined);
          A.store.Ref(ptr + 4 + 4, undefined);
          A.store.Ref(ptr + 4 + 8, undefined);
          A.store.Ref(ptr + 4 + 12, undefined);
          A.store.Ref(ptr + 4 + 16, undefined);
          A.store.Ref(ptr + 4 + 20, undefined);
          A.store.Ref(ptr + 4 + 24, undefined);
        } else {
          A.store.Bool(ptr + 4 + 28, true);
          A.store.Ref(ptr + 4 + 0, x["APN"]["AccessPointName"]);
          A.store.Ref(ptr + 4 + 4, x["APN"]["Authentication"]);
          A.store.Ref(ptr + 4 + 8, x["APN"]["Language"]);
          A.store.Ref(ptr + 4 + 12, x["APN"]["LocalizedName"]);
          A.store.Ref(ptr + 4 + 16, x["APN"]["Name"]);
          A.store.Ref(ptr + 4 + 20, x["APN"]["Password"]);
          A.store.Ref(ptr + 4 + 24, x["APN"]["Username"]);
        }
        A.store.Ref(ptr + 36, x["APNList"]);
        A.store.Ref(ptr + 40, x["ActivationType"]);
        A.store.Enum(
          ptr + 44,
          ["Activated", "Activating", "NotActivated", "PartiallyActivated"].indexOf(x["ActivationState"] as string)
        );
        A.store.Bool(ptr + 214, "AllowRoaming" in x ? true : false);
        A.store.Bool(ptr + 48, x["AllowRoaming"] ? true : false);
        A.store.Ref(ptr + 52, x["ESN"]);
        A.store.Ref(ptr + 56, x["Family"]);
        A.store.Ref(ptr + 60, x["FirmwareRevision"]);
        A.store.Ref(ptr + 64, x["FoundNetworks"]);
        A.store.Ref(ptr + 68, x["HardwareRevision"]);

        if (typeof x["HomeProvider"] === "undefined") {
          A.store.Bool(ptr + 72 + 12, false);
          A.store.Ref(ptr + 72 + 0, undefined);
          A.store.Ref(ptr + 72 + 4, undefined);
          A.store.Ref(ptr + 72 + 8, undefined);
        } else {
          A.store.Bool(ptr + 72 + 12, true);
          A.store.Ref(ptr + 72 + 0, x["HomeProvider"]["Name"]);
          A.store.Ref(ptr + 72 + 4, x["HomeProvider"]["Code"]);
          A.store.Ref(ptr + 72 + 8, x["HomeProvider"]["Country"]);
        }
        A.store.Ref(ptr + 88, x["ICCID"]);
        A.store.Ref(ptr + 92, x["IMEI"]);

        if (typeof x["LastGoodAPN"] === "undefined") {
          A.store.Bool(ptr + 96 + 28, false);
          A.store.Ref(ptr + 96 + 0, undefined);
          A.store.Ref(ptr + 96 + 4, undefined);
          A.store.Ref(ptr + 96 + 8, undefined);
          A.store.Ref(ptr + 96 + 12, undefined);
          A.store.Ref(ptr + 96 + 16, undefined);
          A.store.Ref(ptr + 96 + 20, undefined);
          A.store.Ref(ptr + 96 + 24, undefined);
        } else {
          A.store.Bool(ptr + 96 + 28, true);
          A.store.Ref(ptr + 96 + 0, x["LastGoodAPN"]["AccessPointName"]);
          A.store.Ref(ptr + 96 + 4, x["LastGoodAPN"]["Authentication"]);
          A.store.Ref(ptr + 96 + 8, x["LastGoodAPN"]["Language"]);
          A.store.Ref(ptr + 96 + 12, x["LastGoodAPN"]["LocalizedName"]);
          A.store.Ref(ptr + 96 + 16, x["LastGoodAPN"]["Name"]);
          A.store.Ref(ptr + 96 + 20, x["LastGoodAPN"]["Password"]);
          A.store.Ref(ptr + 96 + 24, x["LastGoodAPN"]["Username"]);
        }
        A.store.Ref(ptr + 128, x["Manufacturer"]);
        A.store.Ref(ptr + 132, x["MDN"]);
        A.store.Ref(ptr + 136, x["MEID"]);
        A.store.Ref(ptr + 140, x["MIN"]);
        A.store.Ref(ptr + 144, x["ModelID"]);
        A.store.Ref(ptr + 148, x["NetworkTechnology"]);

        if (typeof x["PaymentPortal"] === "undefined") {
          A.store.Bool(ptr + 152 + 12, false);
          A.store.Ref(ptr + 152 + 0, undefined);
          A.store.Ref(ptr + 152 + 4, undefined);
          A.store.Ref(ptr + 152 + 8, undefined);
        } else {
          A.store.Bool(ptr + 152 + 12, true);
          A.store.Ref(ptr + 152 + 0, x["PaymentPortal"]["Method"]);
          A.store.Ref(ptr + 152 + 4, x["PaymentPortal"]["PostData"]);
          A.store.Ref(ptr + 152 + 8, x["PaymentPortal"]["Url"]);
        }
        A.store.Ref(ptr + 168, x["RoamingState"]);
        A.store.Bool(ptr + 215, "Scanning" in x ? true : false);
        A.store.Bool(ptr + 172, x["Scanning"] ? true : false);

        if (typeof x["ServingOperator"] === "undefined") {
          A.store.Bool(ptr + 176 + 12, false);
          A.store.Ref(ptr + 176 + 0, undefined);
          A.store.Ref(ptr + 176 + 4, undefined);
          A.store.Ref(ptr + 176 + 8, undefined);
        } else {
          A.store.Bool(ptr + 176 + 12, true);
          A.store.Ref(ptr + 176 + 0, x["ServingOperator"]["Name"]);
          A.store.Ref(ptr + 176 + 4, x["ServingOperator"]["Code"]);
          A.store.Ref(ptr + 176 + 8, x["ServingOperator"]["Country"]);
        }

        if (typeof x["SIMLockStatus"] === "undefined") {
          A.store.Bool(ptr + 192 + 14, false);
          A.store.Ref(ptr + 192 + 0, undefined);
          A.store.Bool(ptr + 192 + 12, false);
          A.store.Bool(ptr + 192 + 4, false);
          A.store.Bool(ptr + 192 + 13, false);
          A.store.Int32(ptr + 192 + 8, 0);
        } else {
          A.store.Bool(ptr + 192 + 14, true);
          A.store.Ref(ptr + 192 + 0, x["SIMLockStatus"]["LockType"]);
          A.store.Bool(ptr + 192 + 12, "LockEnabled" in x["SIMLockStatus"] ? true : false);
          A.store.Bool(ptr + 192 + 4, x["SIMLockStatus"]["LockEnabled"] ? true : false);
          A.store.Bool(ptr + 192 + 13, "RetriesLeft" in x["SIMLockStatus"] ? true : false);
          A.store.Int32(
            ptr + 192 + 8,
            x["SIMLockStatus"]["RetriesLeft"] === undefined ? 0 : (x["SIMLockStatus"]["RetriesLeft"] as number)
          );
        }
        A.store.Bool(ptr + 216, "SIMPresent" in x ? true : false);
        A.store.Bool(ptr + 207, x["SIMPresent"] ? true : false);
        A.store.Bool(ptr + 217, "SignalStrength" in x ? true : false);
        A.store.Int32(ptr + 208, x["SignalStrength"] === undefined ? 0 : (x["SignalStrength"] as number));
        A.store.Bool(ptr + 218, "SupportNetworkScan" in x ? true : false);
        A.store.Bool(ptr + 212, x["SupportNetworkScan"] ? true : false);
      }
    },
    "load_CellularProperties": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      if (A.load.Bool(ptr + 213)) {
        x["AutoConnect"] = A.load.Bool(ptr + 0);
      } else {
        delete x["AutoConnect"];
      }
      if (A.load.Bool(ptr + 4 + 28)) {
        x["APN"] = {};
        x["APN"]["AccessPointName"] = A.load.Ref(ptr + 4 + 0, undefined);
        x["APN"]["Authentication"] = A.load.Ref(ptr + 4 + 4, undefined);
        x["APN"]["Language"] = A.load.Ref(ptr + 4 + 8, undefined);
        x["APN"]["LocalizedName"] = A.load.Ref(ptr + 4 + 12, undefined);
        x["APN"]["Name"] = A.load.Ref(ptr + 4 + 16, undefined);
        x["APN"]["Password"] = A.load.Ref(ptr + 4 + 20, undefined);
        x["APN"]["Username"] = A.load.Ref(ptr + 4 + 24, undefined);
      } else {
        delete x["APN"];
      }
      x["APNList"] = A.load.Ref(ptr + 36, undefined);
      x["ActivationType"] = A.load.Ref(ptr + 40, undefined);
      x["ActivationState"] = A.load.Enum(ptr + 44, ["Activated", "Activating", "NotActivated", "PartiallyActivated"]);
      if (A.load.Bool(ptr + 214)) {
        x["AllowRoaming"] = A.load.Bool(ptr + 48);
      } else {
        delete x["AllowRoaming"];
      }
      x["ESN"] = A.load.Ref(ptr + 52, undefined);
      x["Family"] = A.load.Ref(ptr + 56, undefined);
      x["FirmwareRevision"] = A.load.Ref(ptr + 60, undefined);
      x["FoundNetworks"] = A.load.Ref(ptr + 64, undefined);
      x["HardwareRevision"] = A.load.Ref(ptr + 68, undefined);
      if (A.load.Bool(ptr + 72 + 12)) {
        x["HomeProvider"] = {};
        x["HomeProvider"]["Name"] = A.load.Ref(ptr + 72 + 0, undefined);
        x["HomeProvider"]["Code"] = A.load.Ref(ptr + 72 + 4, undefined);
        x["HomeProvider"]["Country"] = A.load.Ref(ptr + 72 + 8, undefined);
      } else {
        delete x["HomeProvider"];
      }
      x["ICCID"] = A.load.Ref(ptr + 88, undefined);
      x["IMEI"] = A.load.Ref(ptr + 92, undefined);
      if (A.load.Bool(ptr + 96 + 28)) {
        x["LastGoodAPN"] = {};
        x["LastGoodAPN"]["AccessPointName"] = A.load.Ref(ptr + 96 + 0, undefined);
        x["LastGoodAPN"]["Authentication"] = A.load.Ref(ptr + 96 + 4, undefined);
        x["LastGoodAPN"]["Language"] = A.load.Ref(ptr + 96 + 8, undefined);
        x["LastGoodAPN"]["LocalizedName"] = A.load.Ref(ptr + 96 + 12, undefined);
        x["LastGoodAPN"]["Name"] = A.load.Ref(ptr + 96 + 16, undefined);
        x["LastGoodAPN"]["Password"] = A.load.Ref(ptr + 96 + 20, undefined);
        x["LastGoodAPN"]["Username"] = A.load.Ref(ptr + 96 + 24, undefined);
      } else {
        delete x["LastGoodAPN"];
      }
      x["Manufacturer"] = A.load.Ref(ptr + 128, undefined);
      x["MDN"] = A.load.Ref(ptr + 132, undefined);
      x["MEID"] = A.load.Ref(ptr + 136, undefined);
      x["MIN"] = A.load.Ref(ptr + 140, undefined);
      x["ModelID"] = A.load.Ref(ptr + 144, undefined);
      x["NetworkTechnology"] = A.load.Ref(ptr + 148, undefined);
      if (A.load.Bool(ptr + 152 + 12)) {
        x["PaymentPortal"] = {};
        x["PaymentPortal"]["Method"] = A.load.Ref(ptr + 152 + 0, undefined);
        x["PaymentPortal"]["PostData"] = A.load.Ref(ptr + 152 + 4, undefined);
        x["PaymentPortal"]["Url"] = A.load.Ref(ptr + 152 + 8, undefined);
      } else {
        delete x["PaymentPortal"];
      }
      x["RoamingState"] = A.load.Ref(ptr + 168, undefined);
      if (A.load.Bool(ptr + 215)) {
        x["Scanning"] = A.load.Bool(ptr + 172);
      } else {
        delete x["Scanning"];
      }
      if (A.load.Bool(ptr + 176 + 12)) {
        x["ServingOperator"] = {};
        x["ServingOperator"]["Name"] = A.load.Ref(ptr + 176 + 0, undefined);
        x["ServingOperator"]["Code"] = A.load.Ref(ptr + 176 + 4, undefined);
        x["ServingOperator"]["Country"] = A.load.Ref(ptr + 176 + 8, undefined);
      } else {
        delete x["ServingOperator"];
      }
      if (A.load.Bool(ptr + 192 + 14)) {
        x["SIMLockStatus"] = {};
        x["SIMLockStatus"]["LockType"] = A.load.Ref(ptr + 192 + 0, undefined);
        if (A.load.Bool(ptr + 192 + 12)) {
          x["SIMLockStatus"]["LockEnabled"] = A.load.Bool(ptr + 192 + 4);
        } else {
          delete x["SIMLockStatus"]["LockEnabled"];
        }
        if (A.load.Bool(ptr + 192 + 13)) {
          x["SIMLockStatus"]["RetriesLeft"] = A.load.Int32(ptr + 192 + 8);
        } else {
          delete x["SIMLockStatus"]["RetriesLeft"];
        }
      } else {
        delete x["SIMLockStatus"];
      }
      if (A.load.Bool(ptr + 216)) {
        x["SIMPresent"] = A.load.Bool(ptr + 207);
      } else {
        delete x["SIMPresent"];
      }
      if (A.load.Bool(ptr + 217)) {
        x["SignalStrength"] = A.load.Int32(ptr + 208);
      } else {
        delete x["SignalStrength"];
      }
      if (A.load.Bool(ptr + 218)) {
        x["SupportNetworkScan"] = A.load.Bool(ptr + 212);
      } else {
        delete x["SupportNetworkScan"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_CellularSimState": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 13, false);
        A.store.Bool(ptr + 12, false);
        A.store.Bool(ptr + 0, false);
        A.store.Ref(ptr + 4, undefined);
        A.store.Ref(ptr + 8, undefined);
      } else {
        A.store.Bool(ptr + 13, true);
        A.store.Bool(ptr + 12, "requirePin" in x ? true : false);
        A.store.Bool(ptr + 0, x["requirePin"] ? true : false);
        A.store.Ref(ptr + 4, x["currentPin"]);
        A.store.Ref(ptr + 8, x["newPin"]);
      }
    },
    "load_CellularSimState": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      if (A.load.Bool(ptr + 12)) {
        x["requirePin"] = A.load.Bool(ptr + 0);
      } else {
        delete x["requirePin"];
      }
      x["currentPin"] = A.load.Ref(ptr + 4, undefined);
      x["newPin"] = A.load.Ref(ptr + 8, undefined);
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_CellularStateProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 31, false);
        A.store.Enum(ptr + 0, -1);
        A.store.Ref(ptr + 4, undefined);
        A.store.Ref(ptr + 8, undefined);
        A.store.Ref(ptr + 12, undefined);
        A.store.Ref(ptr + 16, undefined);
        A.store.Bool(ptr + 28, false);
        A.store.Bool(ptr + 20, false);
        A.store.Bool(ptr + 29, false);
        A.store.Bool(ptr + 21, false);
        A.store.Bool(ptr + 30, false);
        A.store.Int32(ptr + 24, 0);
      } else {
        A.store.Bool(ptr + 31, true);
        A.store.Enum(
          ptr + 0,
          ["Activated", "Activating", "NotActivated", "PartiallyActivated"].indexOf(x["ActivationState"] as string)
        );
        A.store.Ref(ptr + 4, x["EID"]);
        A.store.Ref(ptr + 8, x["ICCID"]);
        A.store.Ref(ptr + 12, x["NetworkTechnology"]);
        A.store.Ref(ptr + 16, x["RoamingState"]);
        A.store.Bool(ptr + 28, "Scanning" in x ? true : false);
        A.store.Bool(ptr + 20, x["Scanning"] ? true : false);
        A.store.Bool(ptr + 29, "SIMPresent" in x ? true : false);
        A.store.Bool(ptr + 21, x["SIMPresent"] ? true : false);
        A.store.Bool(ptr + 30, "SignalStrength" in x ? true : false);
        A.store.Int32(ptr + 24, x["SignalStrength"] === undefined ? 0 : (x["SignalStrength"] as number));
      }
    },
    "load_CellularStateProperties": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      x["ActivationState"] = A.load.Enum(ptr + 0, ["Activated", "Activating", "NotActivated", "PartiallyActivated"]);
      x["EID"] = A.load.Ref(ptr + 4, undefined);
      x["ICCID"] = A.load.Ref(ptr + 8, undefined);
      x["NetworkTechnology"] = A.load.Ref(ptr + 12, undefined);
      x["RoamingState"] = A.load.Ref(ptr + 16, undefined);
      if (A.load.Bool(ptr + 28)) {
        x["Scanning"] = A.load.Bool(ptr + 20);
      } else {
        delete x["Scanning"];
      }
      if (A.load.Bool(ptr + 29)) {
        x["SIMPresent"] = A.load.Bool(ptr + 21);
      } else {
        delete x["SIMPresent"];
      }
      if (A.load.Bool(ptr + 30)) {
        x["SignalStrength"] = A.load.Int32(ptr + 24);
      } else {
        delete x["SignalStrength"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_Certificate": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 24, false);
        A.store.Ref(ptr + 0, undefined);
        A.store.Ref(ptr + 4, undefined);
        A.store.Ref(ptr + 8, undefined);
        A.store.Ref(ptr + 12, undefined);
        A.store.Ref(ptr + 16, undefined);
        A.store.Bool(ptr + 22, false);
        A.store.Bool(ptr + 20, false);
        A.store.Bool(ptr + 23, false);
        A.store.Bool(ptr + 21, false);
      } else {
        A.store.Bool(ptr + 24, true);
        A.store.Ref(ptr + 0, x["hash"]);
        A.store.Ref(ptr + 4, x["issuedBy"]);
        A.store.Ref(ptr + 8, x["issuedTo"]);
        A.store.Ref(ptr + 12, x["pem"]);
        A.store.Ref(ptr + 16, x["PKCS11Id"]);
        A.store.Bool(ptr + 22, "hardwareBacked" in x ? true : false);
        A.store.Bool(ptr + 20, x["hardwareBacked"] ? true : false);
        A.store.Bool(ptr + 23, "deviceWide" in x ? true : false);
        A.store.Bool(ptr + 21, x["deviceWide"] ? true : false);
      }
    },
    "load_Certificate": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      x["hash"] = A.load.Ref(ptr + 0, undefined);
      x["issuedBy"] = A.load.Ref(ptr + 4, undefined);
      x["issuedTo"] = A.load.Ref(ptr + 8, undefined);
      x["pem"] = A.load.Ref(ptr + 12, undefined);
      x["PKCS11Id"] = A.load.Ref(ptr + 16, undefined);
      if (A.load.Bool(ptr + 22)) {
        x["hardwareBacked"] = A.load.Bool(ptr + 20);
      } else {
        delete x["hardwareBacked"];
      }
      if (A.load.Bool(ptr + 23)) {
        x["deviceWide"] = A.load.Bool(ptr + 21);
      } else {
        delete x["deviceWide"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_CertificateLists": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 8, false);
        A.store.Ref(ptr + 0, undefined);
        A.store.Ref(ptr + 4, undefined);
      } else {
        A.store.Bool(ptr + 8, true);
        A.store.Ref(ptr + 0, x["serverCaCertificates"]);
        A.store.Ref(ptr + 4, x["userCertificates"]);
      }
    },
    "load_CertificateLists": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      x["serverCaCertificates"] = A.load.Ref(ptr + 0, undefined);
      x["userCertificates"] = A.load.Ref(ptr + 4, undefined);
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_IssuerSubjectPattern": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 16, false);
        A.store.Ref(ptr + 0, undefined);
        A.store.Ref(ptr + 4, undefined);
        A.store.Ref(ptr + 8, undefined);
        A.store.Ref(ptr + 12, undefined);
      } else {
        A.store.Bool(ptr + 16, true);
        A.store.Ref(ptr + 0, x["CommonName"]);
        A.store.Ref(ptr + 4, x["Locality"]);
        A.store.Ref(ptr + 8, x["Organization"]);
        A.store.Ref(ptr + 12, x["OrganizationalUnit"]);
      }
    },
    "load_IssuerSubjectPattern": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      x["CommonName"] = A.load.Ref(ptr + 0, undefined);
      x["Locality"] = A.load.Ref(ptr + 4, undefined);
      x["Organization"] = A.load.Ref(ptr + 8, undefined);
      x["OrganizationalUnit"] = A.load.Ref(ptr + 12, undefined);
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_CertificatePattern": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 49, false);
        A.store.Ref(ptr + 0, undefined);

        A.store.Bool(ptr + 4 + 16, false);
        A.store.Ref(ptr + 4 + 0, undefined);
        A.store.Ref(ptr + 4 + 4, undefined);
        A.store.Ref(ptr + 4 + 8, undefined);
        A.store.Ref(ptr + 4 + 12, undefined);
        A.store.Ref(ptr + 24, undefined);
        A.store.Ref(ptr + 28, undefined);

        A.store.Bool(ptr + 32 + 16, false);
        A.store.Ref(ptr + 32 + 0, undefined);
        A.store.Ref(ptr + 32 + 4, undefined);
        A.store.Ref(ptr + 32 + 8, undefined);
        A.store.Ref(ptr + 32 + 12, undefined);
      } else {
        A.store.Bool(ptr + 49, true);
        A.store.Ref(ptr + 0, x["EnrollmentURI"]);

        if (typeof x["Issuer"] === "undefined") {
          A.store.Bool(ptr + 4 + 16, false);
          A.store.Ref(ptr + 4 + 0, undefined);
          A.store.Ref(ptr + 4 + 4, undefined);
          A.store.Ref(ptr + 4 + 8, undefined);
          A.store.Ref(ptr + 4 + 12, undefined);
        } else {
          A.store.Bool(ptr + 4 + 16, true);
          A.store.Ref(ptr + 4 + 0, x["Issuer"]["CommonName"]);
          A.store.Ref(ptr + 4 + 4, x["Issuer"]["Locality"]);
          A.store.Ref(ptr + 4 + 8, x["Issuer"]["Organization"]);
          A.store.Ref(ptr + 4 + 12, x["Issuer"]["OrganizationalUnit"]);
        }
        A.store.Ref(ptr + 24, x["IssuerCAPEMs"]);
        A.store.Ref(ptr + 28, x["IssuerCARef"]);

        if (typeof x["Subject"] === "undefined") {
          A.store.Bool(ptr + 32 + 16, false);
          A.store.Ref(ptr + 32 + 0, undefined);
          A.store.Ref(ptr + 32 + 4, undefined);
          A.store.Ref(ptr + 32 + 8, undefined);
          A.store.Ref(ptr + 32 + 12, undefined);
        } else {
          A.store.Bool(ptr + 32 + 16, true);
          A.store.Ref(ptr + 32 + 0, x["Subject"]["CommonName"]);
          A.store.Ref(ptr + 32 + 4, x["Subject"]["Locality"]);
          A.store.Ref(ptr + 32 + 8, x["Subject"]["Organization"]);
          A.store.Ref(ptr + 32 + 12, x["Subject"]["OrganizationalUnit"]);
        }
      }
    },
    "load_CertificatePattern": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      x["EnrollmentURI"] = A.load.Ref(ptr + 0, undefined);
      if (A.load.Bool(ptr + 4 + 16)) {
        x["Issuer"] = {};
        x["Issuer"]["CommonName"] = A.load.Ref(ptr + 4 + 0, undefined);
        x["Issuer"]["Locality"] = A.load.Ref(ptr + 4 + 4, undefined);
        x["Issuer"]["Organization"] = A.load.Ref(ptr + 4 + 8, undefined);
        x["Issuer"]["OrganizationalUnit"] = A.load.Ref(ptr + 4 + 12, undefined);
      } else {
        delete x["Issuer"];
      }
      x["IssuerCAPEMs"] = A.load.Ref(ptr + 24, undefined);
      x["IssuerCARef"] = A.load.Ref(ptr + 28, undefined);
      if (A.load.Bool(ptr + 32 + 16)) {
        x["Subject"] = {};
        x["Subject"]["CommonName"] = A.load.Ref(ptr + 32 + 0, undefined);
        x["Subject"]["Locality"] = A.load.Ref(ptr + 32 + 4, undefined);
        x["Subject"]["Organization"] = A.load.Ref(ptr + 32 + 8, undefined);
        x["Subject"]["OrganizationalUnit"] = A.load.Ref(ptr + 32 + 12, undefined);
      } else {
        delete x["Subject"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },
    "constof_ConnectionStateType": (ref: heap.Ref<string>): number => {
      const idx = ["Connected", "Connecting", "NotConnected"].indexOf(A.H.get(ref));
      return idx < 0 ? 0 : idx + 1;
    },
    "constof_DeviceStateType": (ref: heap.Ref<string>): number => {
      const idx = ["Uninitialized", "Disabled", "Enabling", "Enabled", "Prohibited"].indexOf(A.H.get(ref));
      return idx < 0 ? 0 : idx + 1;
    },
    "constof_NetworkType": (ref: heap.Ref<string>): number => {
      const idx = ["All", "Cellular", "Ethernet", "Tether", "VPN", "Wireless", "WiFi"].indexOf(A.H.get(ref));
      return idx < 0 ? 0 : idx + 1;
    },

    "store_DeviceStateProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 32, false);
        A.store.Bool(ptr + 29, false);
        A.store.Bool(ptr + 0, false);

        A.store.Bool(ptr + 4 + 14, false);
        A.store.Ref(ptr + 4 + 0, undefined);
        A.store.Bool(ptr + 4 + 12, false);
        A.store.Bool(ptr + 4 + 4, false);
        A.store.Bool(ptr + 4 + 13, false);
        A.store.Int32(ptr + 4 + 8, 0);
        A.store.Bool(ptr + 30, false);
        A.store.Bool(ptr + 19, false);
        A.store.Enum(ptr + 20, -1);
        A.store.Enum(ptr + 24, -1);
        A.store.Bool(ptr + 31, false);
        A.store.Bool(ptr + 28, false);
      } else {
        A.store.Bool(ptr + 32, true);
        A.store.Bool(ptr + 29, "Scanning" in x ? true : false);
        A.store.Bool(ptr + 0, x["Scanning"] ? true : false);

        if (typeof x["SIMLockStatus"] === "undefined") {
          A.store.Bool(ptr + 4 + 14, false);
          A.store.Ref(ptr + 4 + 0, undefined);
          A.store.Bool(ptr + 4 + 12, false);
          A.store.Bool(ptr + 4 + 4, false);
          A.store.Bool(ptr + 4 + 13, false);
          A.store.Int32(ptr + 4 + 8, 0);
        } else {
          A.store.Bool(ptr + 4 + 14, true);
          A.store.Ref(ptr + 4 + 0, x["SIMLockStatus"]["LockType"]);
          A.store.Bool(ptr + 4 + 12, "LockEnabled" in x["SIMLockStatus"] ? true : false);
          A.store.Bool(ptr + 4 + 4, x["SIMLockStatus"]["LockEnabled"] ? true : false);
          A.store.Bool(ptr + 4 + 13, "RetriesLeft" in x["SIMLockStatus"] ? true : false);
          A.store.Int32(
            ptr + 4 + 8,
            x["SIMLockStatus"]["RetriesLeft"] === undefined ? 0 : (x["SIMLockStatus"]["RetriesLeft"] as number)
          );
        }
        A.store.Bool(ptr + 30, "SIMPresent" in x ? true : false);
        A.store.Bool(ptr + 19, x["SIMPresent"] ? true : false);
        A.store.Enum(
          ptr + 20,
          ["Uninitialized", "Disabled", "Enabling", "Enabled", "Prohibited"].indexOf(x["State"] as string)
        );
        A.store.Enum(
          ptr + 24,
          ["All", "Cellular", "Ethernet", "Tether", "VPN", "Wireless", "WiFi"].indexOf(x["Type"] as string)
        );
        A.store.Bool(ptr + 31, "ManagedNetworkAvailable" in x ? true : false);
        A.store.Bool(ptr + 28, x["ManagedNetworkAvailable"] ? true : false);
      }
    },
    "load_DeviceStateProperties": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      if (A.load.Bool(ptr + 29)) {
        x["Scanning"] = A.load.Bool(ptr + 0);
      } else {
        delete x["Scanning"];
      }
      if (A.load.Bool(ptr + 4 + 14)) {
        x["SIMLockStatus"] = {};
        x["SIMLockStatus"]["LockType"] = A.load.Ref(ptr + 4 + 0, undefined);
        if (A.load.Bool(ptr + 4 + 12)) {
          x["SIMLockStatus"]["LockEnabled"] = A.load.Bool(ptr + 4 + 4);
        } else {
          delete x["SIMLockStatus"]["LockEnabled"];
        }
        if (A.load.Bool(ptr + 4 + 13)) {
          x["SIMLockStatus"]["RetriesLeft"] = A.load.Int32(ptr + 4 + 8);
        } else {
          delete x["SIMLockStatus"]["RetriesLeft"];
        }
      } else {
        delete x["SIMLockStatus"];
      }
      if (A.load.Bool(ptr + 30)) {
        x["SIMPresent"] = A.load.Bool(ptr + 19);
      } else {
        delete x["SIMPresent"];
      }
      x["State"] = A.load.Enum(ptr + 20, ["Uninitialized", "Disabled", "Enabling", "Enabled", "Prohibited"]);
      x["Type"] = A.load.Enum(ptr + 24, ["All", "Cellular", "Ethernet", "Tether", "VPN", "Wireless", "WiFi"]);
      if (A.load.Bool(ptr + 31)) {
        x["ManagedNetworkAvailable"] = A.load.Bool(ptr + 28);
      } else {
        delete x["ManagedNetworkAvailable"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_EAPProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 113, false);
        A.store.Ref(ptr + 0, undefined);

        A.store.Bool(ptr + 4 + 49, false);
        A.store.Ref(ptr + 4 + 0, undefined);

        A.store.Bool(ptr + 4 + 4 + 16, false);
        A.store.Ref(ptr + 4 + 4 + 0, undefined);
        A.store.Ref(ptr + 4 + 4 + 4, undefined);
        A.store.Ref(ptr + 4 + 4 + 8, undefined);
        A.store.Ref(ptr + 4 + 4 + 12, undefined);
        A.store.Ref(ptr + 4 + 24, undefined);
        A.store.Ref(ptr + 4 + 28, undefined);

        A.store.Bool(ptr + 4 + 32 + 16, false);
        A.store.Ref(ptr + 4 + 32 + 0, undefined);
        A.store.Ref(ptr + 4 + 32 + 4, undefined);
        A.store.Ref(ptr + 4 + 32 + 8, undefined);
        A.store.Ref(ptr + 4 + 32 + 12, undefined);
        A.store.Ref(ptr + 56, undefined);
        A.store.Ref(ptr + 60, undefined);
        A.store.Ref(ptr + 64, undefined);
        A.store.Ref(ptr + 68, undefined);
        A.store.Ref(ptr + 72, undefined);
        A.store.Ref(ptr + 76, undefined);
        A.store.Ref(ptr + 80, undefined);
        A.store.Ref(ptr + 84, undefined);
        A.store.Bool(ptr + 110, false);
        A.store.Bool(ptr + 88, false);
        A.store.Ref(ptr + 92, undefined);
        A.store.Ref(ptr + 96, undefined);
        A.store.Ref(ptr + 100, undefined);
        A.store.Ref(ptr + 104, undefined);
        A.store.Bool(ptr + 111, false);
        A.store.Bool(ptr + 108, false);
        A.store.Bool(ptr + 112, false);
        A.store.Bool(ptr + 109, false);
      } else {
        A.store.Bool(ptr + 113, true);
        A.store.Ref(ptr + 0, x["AnonymousIdentity"]);

        if (typeof x["ClientCertPattern"] === "undefined") {
          A.store.Bool(ptr + 4 + 49, false);
          A.store.Ref(ptr + 4 + 0, undefined);

          A.store.Bool(ptr + 4 + 4 + 16, false);
          A.store.Ref(ptr + 4 + 4 + 0, undefined);
          A.store.Ref(ptr + 4 + 4 + 4, undefined);
          A.store.Ref(ptr + 4 + 4 + 8, undefined);
          A.store.Ref(ptr + 4 + 4 + 12, undefined);
          A.store.Ref(ptr + 4 + 24, undefined);
          A.store.Ref(ptr + 4 + 28, undefined);

          A.store.Bool(ptr + 4 + 32 + 16, false);
          A.store.Ref(ptr + 4 + 32 + 0, undefined);
          A.store.Ref(ptr + 4 + 32 + 4, undefined);
          A.store.Ref(ptr + 4 + 32 + 8, undefined);
          A.store.Ref(ptr + 4 + 32 + 12, undefined);
        } else {
          A.store.Bool(ptr + 4 + 49, true);
          A.store.Ref(ptr + 4 + 0, x["ClientCertPattern"]["EnrollmentURI"]);

          if (typeof x["ClientCertPattern"]["Issuer"] === "undefined") {
            A.store.Bool(ptr + 4 + 4 + 16, false);
            A.store.Ref(ptr + 4 + 4 + 0, undefined);
            A.store.Ref(ptr + 4 + 4 + 4, undefined);
            A.store.Ref(ptr + 4 + 4 + 8, undefined);
            A.store.Ref(ptr + 4 + 4 + 12, undefined);
          } else {
            A.store.Bool(ptr + 4 + 4 + 16, true);
            A.store.Ref(ptr + 4 + 4 + 0, x["ClientCertPattern"]["Issuer"]["CommonName"]);
            A.store.Ref(ptr + 4 + 4 + 4, x["ClientCertPattern"]["Issuer"]["Locality"]);
            A.store.Ref(ptr + 4 + 4 + 8, x["ClientCertPattern"]["Issuer"]["Organization"]);
            A.store.Ref(ptr + 4 + 4 + 12, x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]);
          }
          A.store.Ref(ptr + 4 + 24, x["ClientCertPattern"]["IssuerCAPEMs"]);
          A.store.Ref(ptr + 4 + 28, x["ClientCertPattern"]["IssuerCARef"]);

          if (typeof x["ClientCertPattern"]["Subject"] === "undefined") {
            A.store.Bool(ptr + 4 + 32 + 16, false);
            A.store.Ref(ptr + 4 + 32 + 0, undefined);
            A.store.Ref(ptr + 4 + 32 + 4, undefined);
            A.store.Ref(ptr + 4 + 32 + 8, undefined);
            A.store.Ref(ptr + 4 + 32 + 12, undefined);
          } else {
            A.store.Bool(ptr + 4 + 32 + 16, true);
            A.store.Ref(ptr + 4 + 32 + 0, x["ClientCertPattern"]["Subject"]["CommonName"]);
            A.store.Ref(ptr + 4 + 32 + 4, x["ClientCertPattern"]["Subject"]["Locality"]);
            A.store.Ref(ptr + 4 + 32 + 8, x["ClientCertPattern"]["Subject"]["Organization"]);
            A.store.Ref(ptr + 4 + 32 + 12, x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]);
          }
        }
        A.store.Ref(ptr + 56, x["ClientCertPKCS11Id"]);
        A.store.Ref(ptr + 60, x["ClientCertProvisioningProfileId"]);
        A.store.Ref(ptr + 64, x["ClientCertRef"]);
        A.store.Ref(ptr + 68, x["ClientCertType"]);
        A.store.Ref(ptr + 72, x["Identity"]);
        A.store.Ref(ptr + 76, x["Inner"]);
        A.store.Ref(ptr + 80, x["Outer"]);
        A.store.Ref(ptr + 84, x["Password"]);
        A.store.Bool(ptr + 110, "SaveCredentials" in x ? true : false);
        A.store.Bool(ptr + 88, x["SaveCredentials"] ? true : false);
        A.store.Ref(ptr + 92, x["ServerCAPEMs"]);
        A.store.Ref(ptr + 96, x["ServerCARefs"]);
        A.store.Ref(ptr + 100, x["SubjectMatch"]);
        A.store.Ref(ptr + 104, x["TLSVersionMax"]);
        A.store.Bool(ptr + 111, "UseProactiveKeyCaching" in x ? true : false);
        A.store.Bool(ptr + 108, x["UseProactiveKeyCaching"] ? true : false);
        A.store.Bool(ptr + 112, "UseSystemCAs" in x ? true : false);
        A.store.Bool(ptr + 109, x["UseSystemCAs"] ? true : false);
      }
    },
    "load_EAPProperties": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      x["AnonymousIdentity"] = A.load.Ref(ptr + 0, undefined);
      if (A.load.Bool(ptr + 4 + 49)) {
        x["ClientCertPattern"] = {};
        x["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(ptr + 4 + 0, undefined);
        if (A.load.Bool(ptr + 4 + 4 + 16)) {
          x["ClientCertPattern"]["Issuer"] = {};
          x["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(ptr + 4 + 4 + 0, undefined);
          x["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(ptr + 4 + 4 + 4, undefined);
          x["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(ptr + 4 + 4 + 8, undefined);
          x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(ptr + 4 + 4 + 12, undefined);
        } else {
          delete x["ClientCertPattern"]["Issuer"];
        }
        x["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(ptr + 4 + 24, undefined);
        x["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(ptr + 4 + 28, undefined);
        if (A.load.Bool(ptr + 4 + 32 + 16)) {
          x["ClientCertPattern"]["Subject"] = {};
          x["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(ptr + 4 + 32 + 0, undefined);
          x["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(ptr + 4 + 32 + 4, undefined);
          x["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(ptr + 4 + 32 + 8, undefined);
          x["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(ptr + 4 + 32 + 12, undefined);
        } else {
          delete x["ClientCertPattern"]["Subject"];
        }
      } else {
        delete x["ClientCertPattern"];
      }
      x["ClientCertPKCS11Id"] = A.load.Ref(ptr + 56, undefined);
      x["ClientCertProvisioningProfileId"] = A.load.Ref(ptr + 60, undefined);
      x["ClientCertRef"] = A.load.Ref(ptr + 64, undefined);
      x["ClientCertType"] = A.load.Ref(ptr + 68, undefined);
      x["Identity"] = A.load.Ref(ptr + 72, undefined);
      x["Inner"] = A.load.Ref(ptr + 76, undefined);
      x["Outer"] = A.load.Ref(ptr + 80, undefined);
      x["Password"] = A.load.Ref(ptr + 84, undefined);
      if (A.load.Bool(ptr + 110)) {
        x["SaveCredentials"] = A.load.Bool(ptr + 88);
      } else {
        delete x["SaveCredentials"];
      }
      x["ServerCAPEMs"] = A.load.Ref(ptr + 92, undefined);
      x["ServerCARefs"] = A.load.Ref(ptr + 96, undefined);
      x["SubjectMatch"] = A.load.Ref(ptr + 100, undefined);
      x["TLSVersionMax"] = A.load.Ref(ptr + 104, undefined);
      if (A.load.Bool(ptr + 111)) {
        x["UseProactiveKeyCaching"] = A.load.Bool(ptr + 108);
      } else {
        delete x["UseProactiveKeyCaching"];
      }
      if (A.load.Bool(ptr + 112)) {
        x["UseSystemCAs"] = A.load.Bool(ptr + 109);
      } else {
        delete x["UseSystemCAs"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_EAPStateProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 4, false);
        A.store.Ref(ptr + 0, undefined);
      } else {
        A.store.Bool(ptr + 4, true);
        A.store.Ref(ptr + 0, x["Outer"]);
      }
    },
    "load_EAPStateProperties": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      x["Outer"] = A.load.Ref(ptr + 0, undefined);
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_EthernetProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 123, false);
        A.store.Bool(ptr + 122, false);
        A.store.Bool(ptr + 0, false);
        A.store.Ref(ptr + 4, undefined);

        A.store.Bool(ptr + 8 + 113, false);
        A.store.Ref(ptr + 8 + 0, undefined);

        A.store.Bool(ptr + 8 + 4 + 49, false);
        A.store.Ref(ptr + 8 + 4 + 0, undefined);

        A.store.Bool(ptr + 8 + 4 + 4 + 16, false);
        A.store.Ref(ptr + 8 + 4 + 4 + 0, undefined);
        A.store.Ref(ptr + 8 + 4 + 4 + 4, undefined);
        A.store.Ref(ptr + 8 + 4 + 4 + 8, undefined);
        A.store.Ref(ptr + 8 + 4 + 4 + 12, undefined);
        A.store.Ref(ptr + 8 + 4 + 24, undefined);
        A.store.Ref(ptr + 8 + 4 + 28, undefined);

        A.store.Bool(ptr + 8 + 4 + 32 + 16, false);
        A.store.Ref(ptr + 8 + 4 + 32 + 0, undefined);
        A.store.Ref(ptr + 8 + 4 + 32 + 4, undefined);
        A.store.Ref(ptr + 8 + 4 + 32 + 8, undefined);
        A.store.Ref(ptr + 8 + 4 + 32 + 12, undefined);
        A.store.Ref(ptr + 8 + 56, undefined);
        A.store.Ref(ptr + 8 + 60, undefined);
        A.store.Ref(ptr + 8 + 64, undefined);
        A.store.Ref(ptr + 8 + 68, undefined);
        A.store.Ref(ptr + 8 + 72, undefined);
        A.store.Ref(ptr + 8 + 76, undefined);
        A.store.Ref(ptr + 8 + 80, undefined);
        A.store.Ref(ptr + 8 + 84, undefined);
        A.store.Bool(ptr + 8 + 110, false);
        A.store.Bool(ptr + 8 + 88, false);
        A.store.Ref(ptr + 8 + 92, undefined);
        A.store.Ref(ptr + 8 + 96, undefined);
        A.store.Ref(ptr + 8 + 100, undefined);
        A.store.Ref(ptr + 8 + 104, undefined);
        A.store.Bool(ptr + 8 + 111, false);
        A.store.Bool(ptr + 8 + 108, false);
        A.store.Bool(ptr + 8 + 112, false);
        A.store.Bool(ptr + 8 + 109, false);
      } else {
        A.store.Bool(ptr + 123, true);
        A.store.Bool(ptr + 122, "AutoConnect" in x ? true : false);
        A.store.Bool(ptr + 0, x["AutoConnect"] ? true : false);
        A.store.Ref(ptr + 4, x["Authentication"]);

        if (typeof x["EAP"] === "undefined") {
          A.store.Bool(ptr + 8 + 113, false);
          A.store.Ref(ptr + 8 + 0, undefined);

          A.store.Bool(ptr + 8 + 4 + 49, false);
          A.store.Ref(ptr + 8 + 4 + 0, undefined);

          A.store.Bool(ptr + 8 + 4 + 4 + 16, false);
          A.store.Ref(ptr + 8 + 4 + 4 + 0, undefined);
          A.store.Ref(ptr + 8 + 4 + 4 + 4, undefined);
          A.store.Ref(ptr + 8 + 4 + 4 + 8, undefined);
          A.store.Ref(ptr + 8 + 4 + 4 + 12, undefined);
          A.store.Ref(ptr + 8 + 4 + 24, undefined);
          A.store.Ref(ptr + 8 + 4 + 28, undefined);

          A.store.Bool(ptr + 8 + 4 + 32 + 16, false);
          A.store.Ref(ptr + 8 + 4 + 32 + 0, undefined);
          A.store.Ref(ptr + 8 + 4 + 32 + 4, undefined);
          A.store.Ref(ptr + 8 + 4 + 32 + 8, undefined);
          A.store.Ref(ptr + 8 + 4 + 32 + 12, undefined);
          A.store.Ref(ptr + 8 + 56, undefined);
          A.store.Ref(ptr + 8 + 60, undefined);
          A.store.Ref(ptr + 8 + 64, undefined);
          A.store.Ref(ptr + 8 + 68, undefined);
          A.store.Ref(ptr + 8 + 72, undefined);
          A.store.Ref(ptr + 8 + 76, undefined);
          A.store.Ref(ptr + 8 + 80, undefined);
          A.store.Ref(ptr + 8 + 84, undefined);
          A.store.Bool(ptr + 8 + 110, false);
          A.store.Bool(ptr + 8 + 88, false);
          A.store.Ref(ptr + 8 + 92, undefined);
          A.store.Ref(ptr + 8 + 96, undefined);
          A.store.Ref(ptr + 8 + 100, undefined);
          A.store.Ref(ptr + 8 + 104, undefined);
          A.store.Bool(ptr + 8 + 111, false);
          A.store.Bool(ptr + 8 + 108, false);
          A.store.Bool(ptr + 8 + 112, false);
          A.store.Bool(ptr + 8 + 109, false);
        } else {
          A.store.Bool(ptr + 8 + 113, true);
          A.store.Ref(ptr + 8 + 0, x["EAP"]["AnonymousIdentity"]);

          if (typeof x["EAP"]["ClientCertPattern"] === "undefined") {
            A.store.Bool(ptr + 8 + 4 + 49, false);
            A.store.Ref(ptr + 8 + 4 + 0, undefined);

            A.store.Bool(ptr + 8 + 4 + 4 + 16, false);
            A.store.Ref(ptr + 8 + 4 + 4 + 0, undefined);
            A.store.Ref(ptr + 8 + 4 + 4 + 4, undefined);
            A.store.Ref(ptr + 8 + 4 + 4 + 8, undefined);
            A.store.Ref(ptr + 8 + 4 + 4 + 12, undefined);
            A.store.Ref(ptr + 8 + 4 + 24, undefined);
            A.store.Ref(ptr + 8 + 4 + 28, undefined);

            A.store.Bool(ptr + 8 + 4 + 32 + 16, false);
            A.store.Ref(ptr + 8 + 4 + 32 + 0, undefined);
            A.store.Ref(ptr + 8 + 4 + 32 + 4, undefined);
            A.store.Ref(ptr + 8 + 4 + 32 + 8, undefined);
            A.store.Ref(ptr + 8 + 4 + 32 + 12, undefined);
          } else {
            A.store.Bool(ptr + 8 + 4 + 49, true);
            A.store.Ref(ptr + 8 + 4 + 0, x["EAP"]["ClientCertPattern"]["EnrollmentURI"]);

            if (typeof x["EAP"]["ClientCertPattern"]["Issuer"] === "undefined") {
              A.store.Bool(ptr + 8 + 4 + 4 + 16, false);
              A.store.Ref(ptr + 8 + 4 + 4 + 0, undefined);
              A.store.Ref(ptr + 8 + 4 + 4 + 4, undefined);
              A.store.Ref(ptr + 8 + 4 + 4 + 8, undefined);
              A.store.Ref(ptr + 8 + 4 + 4 + 12, undefined);
            } else {
              A.store.Bool(ptr + 8 + 4 + 4 + 16, true);
              A.store.Ref(ptr + 8 + 4 + 4 + 0, x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]);
              A.store.Ref(ptr + 8 + 4 + 4 + 4, x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]);
              A.store.Ref(ptr + 8 + 4 + 4 + 8, x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]);
              A.store.Ref(ptr + 8 + 4 + 4 + 12, x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]);
            }
            A.store.Ref(ptr + 8 + 4 + 24, x["EAP"]["ClientCertPattern"]["IssuerCAPEMs"]);
            A.store.Ref(ptr + 8 + 4 + 28, x["EAP"]["ClientCertPattern"]["IssuerCARef"]);

            if (typeof x["EAP"]["ClientCertPattern"]["Subject"] === "undefined") {
              A.store.Bool(ptr + 8 + 4 + 32 + 16, false);
              A.store.Ref(ptr + 8 + 4 + 32 + 0, undefined);
              A.store.Ref(ptr + 8 + 4 + 32 + 4, undefined);
              A.store.Ref(ptr + 8 + 4 + 32 + 8, undefined);
              A.store.Ref(ptr + 8 + 4 + 32 + 12, undefined);
            } else {
              A.store.Bool(ptr + 8 + 4 + 32 + 16, true);
              A.store.Ref(ptr + 8 + 4 + 32 + 0, x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]);
              A.store.Ref(ptr + 8 + 4 + 32 + 4, x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]);
              A.store.Ref(ptr + 8 + 4 + 32 + 8, x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]);
              A.store.Ref(ptr + 8 + 4 + 32 + 12, x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]);
            }
          }
          A.store.Ref(ptr + 8 + 56, x["EAP"]["ClientCertPKCS11Id"]);
          A.store.Ref(ptr + 8 + 60, x["EAP"]["ClientCertProvisioningProfileId"]);
          A.store.Ref(ptr + 8 + 64, x["EAP"]["ClientCertRef"]);
          A.store.Ref(ptr + 8 + 68, x["EAP"]["ClientCertType"]);
          A.store.Ref(ptr + 8 + 72, x["EAP"]["Identity"]);
          A.store.Ref(ptr + 8 + 76, x["EAP"]["Inner"]);
          A.store.Ref(ptr + 8 + 80, x["EAP"]["Outer"]);
          A.store.Ref(ptr + 8 + 84, x["EAP"]["Password"]);
          A.store.Bool(ptr + 8 + 110, "SaveCredentials" in x["EAP"] ? true : false);
          A.store.Bool(ptr + 8 + 88, x["EAP"]["SaveCredentials"] ? true : false);
          A.store.Ref(ptr + 8 + 92, x["EAP"]["ServerCAPEMs"]);
          A.store.Ref(ptr + 8 + 96, x["EAP"]["ServerCARefs"]);
          A.store.Ref(ptr + 8 + 100, x["EAP"]["SubjectMatch"]);
          A.store.Ref(ptr + 8 + 104, x["EAP"]["TLSVersionMax"]);
          A.store.Bool(ptr + 8 + 111, "UseProactiveKeyCaching" in x["EAP"] ? true : false);
          A.store.Bool(ptr + 8 + 108, x["EAP"]["UseProactiveKeyCaching"] ? true : false);
          A.store.Bool(ptr + 8 + 112, "UseSystemCAs" in x["EAP"] ? true : false);
          A.store.Bool(ptr + 8 + 109, x["EAP"]["UseSystemCAs"] ? true : false);
        }
      }
    },
    "load_EthernetProperties": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      if (A.load.Bool(ptr + 122)) {
        x["AutoConnect"] = A.load.Bool(ptr + 0);
      } else {
        delete x["AutoConnect"];
      }
      x["Authentication"] = A.load.Ref(ptr + 4, undefined);
      if (A.load.Bool(ptr + 8 + 113)) {
        x["EAP"] = {};
        x["EAP"]["AnonymousIdentity"] = A.load.Ref(ptr + 8 + 0, undefined);
        if (A.load.Bool(ptr + 8 + 4 + 49)) {
          x["EAP"]["ClientCertPattern"] = {};
          x["EAP"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(ptr + 8 + 4 + 0, undefined);
          if (A.load.Bool(ptr + 8 + 4 + 4 + 16)) {
            x["EAP"]["ClientCertPattern"]["Issuer"] = {};
            x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(ptr + 8 + 4 + 4 + 0, undefined);
            x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(ptr + 8 + 4 + 4 + 4, undefined);
            x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(ptr + 8 + 4 + 4 + 8, undefined);
            x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(ptr + 8 + 4 + 4 + 12, undefined);
          } else {
            delete x["EAP"]["ClientCertPattern"]["Issuer"];
          }
          x["EAP"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(ptr + 8 + 4 + 24, undefined);
          x["EAP"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(ptr + 8 + 4 + 28, undefined);
          if (A.load.Bool(ptr + 8 + 4 + 32 + 16)) {
            x["EAP"]["ClientCertPattern"]["Subject"] = {};
            x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(ptr + 8 + 4 + 32 + 0, undefined);
            x["EAP"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(ptr + 8 + 4 + 32 + 4, undefined);
            x["EAP"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(ptr + 8 + 4 + 32 + 8, undefined);
            x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(
              ptr + 8 + 4 + 32 + 12,
              undefined
            );
          } else {
            delete x["EAP"]["ClientCertPattern"]["Subject"];
          }
        } else {
          delete x["EAP"]["ClientCertPattern"];
        }
        x["EAP"]["ClientCertPKCS11Id"] = A.load.Ref(ptr + 8 + 56, undefined);
        x["EAP"]["ClientCertProvisioningProfileId"] = A.load.Ref(ptr + 8 + 60, undefined);
        x["EAP"]["ClientCertRef"] = A.load.Ref(ptr + 8 + 64, undefined);
        x["EAP"]["ClientCertType"] = A.load.Ref(ptr + 8 + 68, undefined);
        x["EAP"]["Identity"] = A.load.Ref(ptr + 8 + 72, undefined);
        x["EAP"]["Inner"] = A.load.Ref(ptr + 8 + 76, undefined);
        x["EAP"]["Outer"] = A.load.Ref(ptr + 8 + 80, undefined);
        x["EAP"]["Password"] = A.load.Ref(ptr + 8 + 84, undefined);
        if (A.load.Bool(ptr + 8 + 110)) {
          x["EAP"]["SaveCredentials"] = A.load.Bool(ptr + 8 + 88);
        } else {
          delete x["EAP"]["SaveCredentials"];
        }
        x["EAP"]["ServerCAPEMs"] = A.load.Ref(ptr + 8 + 92, undefined);
        x["EAP"]["ServerCARefs"] = A.load.Ref(ptr + 8 + 96, undefined);
        x["EAP"]["SubjectMatch"] = A.load.Ref(ptr + 8 + 100, undefined);
        x["EAP"]["TLSVersionMax"] = A.load.Ref(ptr + 8 + 104, undefined);
        if (A.load.Bool(ptr + 8 + 111)) {
          x["EAP"]["UseProactiveKeyCaching"] = A.load.Bool(ptr + 8 + 108);
        } else {
          delete x["EAP"]["UseProactiveKeyCaching"];
        }
        if (A.load.Bool(ptr + 8 + 112)) {
          x["EAP"]["UseSystemCAs"] = A.load.Bool(ptr + 8 + 109);
        } else {
          delete x["EAP"]["UseSystemCAs"];
        }
      } else {
        delete x["EAP"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_EthernetStateProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 4, false);
        A.store.Ref(ptr + 0, undefined);
      } else {
        A.store.Bool(ptr + 4, true);
        A.store.Ref(ptr + 0, x["Authentication"]);
      }
    },
    "load_EthernetStateProperties": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      x["Authentication"] = A.load.Ref(ptr + 0, undefined);
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_GlobalPolicy": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 11, false);
        A.store.Bool(ptr + 8, false);
        A.store.Bool(ptr + 0, false);
        A.store.Bool(ptr + 9, false);
        A.store.Bool(ptr + 1, false);
        A.store.Bool(ptr + 10, false);
        A.store.Bool(ptr + 2, false);
        A.store.Ref(ptr + 4, undefined);
      } else {
        A.store.Bool(ptr + 11, true);
        A.store.Bool(ptr + 8, "AllowOnlyPolicyNetworksToAutoconnect" in x ? true : false);
        A.store.Bool(ptr + 0, x["AllowOnlyPolicyNetworksToAutoconnect"] ? true : false);
        A.store.Bool(ptr + 9, "AllowOnlyPolicyNetworksToConnect" in x ? true : false);
        A.store.Bool(ptr + 1, x["AllowOnlyPolicyNetworksToConnect"] ? true : false);
        A.store.Bool(ptr + 10, "AllowOnlyPolicyNetworksToConnectIfAvailable" in x ? true : false);
        A.store.Bool(ptr + 2, x["AllowOnlyPolicyNetworksToConnectIfAvailable"] ? true : false);
        A.store.Ref(ptr + 4, x["BlockedHexSSIDs"]);
      }
    },
    "load_GlobalPolicy": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      if (A.load.Bool(ptr + 8)) {
        x["AllowOnlyPolicyNetworksToAutoconnect"] = A.load.Bool(ptr + 0);
      } else {
        delete x["AllowOnlyPolicyNetworksToAutoconnect"];
      }
      if (A.load.Bool(ptr + 9)) {
        x["AllowOnlyPolicyNetworksToConnect"] = A.load.Bool(ptr + 1);
      } else {
        delete x["AllowOnlyPolicyNetworksToConnect"];
      }
      if (A.load.Bool(ptr + 10)) {
        x["AllowOnlyPolicyNetworksToConnectIfAvailable"] = A.load.Bool(ptr + 2);
      } else {
        delete x["AllowOnlyPolicyNetworksToConnectIfAvailable"];
      }
      x["BlockedHexSSIDs"] = A.load.Ref(ptr + 4, undefined);
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_ManagedBoolean": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 21, false);
        A.store.Bool(ptr + 14, false);
        A.store.Bool(ptr + 0, false);
        A.store.Ref(ptr + 4, undefined);
        A.store.Bool(ptr + 15, false);
        A.store.Bool(ptr + 8, false);
        A.store.Bool(ptr + 16, false);
        A.store.Bool(ptr + 9, false);
        A.store.Bool(ptr + 17, false);
        A.store.Bool(ptr + 10, false);
        A.store.Bool(ptr + 18, false);
        A.store.Bool(ptr + 11, false);
        A.store.Bool(ptr + 19, false);
        A.store.Bool(ptr + 12, false);
        A.store.Bool(ptr + 20, false);
        A.store.Bool(ptr + 13, false);
      } else {
        A.store.Bool(ptr + 21, true);
        A.store.Bool(ptr + 14, "Active" in x ? true : false);
        A.store.Bool(ptr + 0, x["Active"] ? true : false);
        A.store.Ref(ptr + 4, x["Effective"]);
        A.store.Bool(ptr + 15, "UserPolicy" in x ? true : false);
        A.store.Bool(ptr + 8, x["UserPolicy"] ? true : false);
        A.store.Bool(ptr + 16, "DevicePolicy" in x ? true : false);
        A.store.Bool(ptr + 9, x["DevicePolicy"] ? true : false);
        A.store.Bool(ptr + 17, "UserSetting" in x ? true : false);
        A.store.Bool(ptr + 10, x["UserSetting"] ? true : false);
        A.store.Bool(ptr + 18, "SharedSetting" in x ? true : false);
        A.store.Bool(ptr + 11, x["SharedSetting"] ? true : false);
        A.store.Bool(ptr + 19, "UserEditable" in x ? true : false);
        A.store.Bool(ptr + 12, x["UserEditable"] ? true : false);
        A.store.Bool(ptr + 20, "DeviceEditable" in x ? true : false);
        A.store.Bool(ptr + 13, x["DeviceEditable"] ? true : false);
      }
    },
    "load_ManagedBoolean": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      if (A.load.Bool(ptr + 14)) {
        x["Active"] = A.load.Bool(ptr + 0);
      } else {
        delete x["Active"];
      }
      x["Effective"] = A.load.Ref(ptr + 4, undefined);
      if (A.load.Bool(ptr + 15)) {
        x["UserPolicy"] = A.load.Bool(ptr + 8);
      } else {
        delete x["UserPolicy"];
      }
      if (A.load.Bool(ptr + 16)) {
        x["DevicePolicy"] = A.load.Bool(ptr + 9);
      } else {
        delete x["DevicePolicy"];
      }
      if (A.load.Bool(ptr + 17)) {
        x["UserSetting"] = A.load.Bool(ptr + 10);
      } else {
        delete x["UserSetting"];
      }
      if (A.load.Bool(ptr + 18)) {
        x["SharedSetting"] = A.load.Bool(ptr + 11);
      } else {
        delete x["SharedSetting"];
      }
      if (A.load.Bool(ptr + 19)) {
        x["UserEditable"] = A.load.Bool(ptr + 12);
      } else {
        delete x["UserEditable"];
      }
      if (A.load.Bool(ptr + 20)) {
        x["DeviceEditable"] = A.load.Bool(ptr + 13);
      } else {
        delete x["DeviceEditable"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_ManagedDOMString": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 28, false);
        A.store.Ref(ptr + 0, undefined);
        A.store.Ref(ptr + 4, undefined);
        A.store.Ref(ptr + 8, undefined);
        A.store.Ref(ptr + 12, undefined);
        A.store.Ref(ptr + 16, undefined);
        A.store.Ref(ptr + 20, undefined);
        A.store.Bool(ptr + 26, false);
        A.store.Bool(ptr + 24, false);
        A.store.Bool(ptr + 27, false);
        A.store.Bool(ptr + 25, false);
      } else {
        A.store.Bool(ptr + 28, true);
        A.store.Ref(ptr + 0, x["Active"]);
        A.store.Ref(ptr + 4, x["Effective"]);
        A.store.Ref(ptr + 8, x["UserPolicy"]);
        A.store.Ref(ptr + 12, x["DevicePolicy"]);
        A.store.Ref(ptr + 16, x["UserSetting"]);
        A.store.Ref(ptr + 20, x["SharedSetting"]);
        A.store.Bool(ptr + 26, "UserEditable" in x ? true : false);
        A.store.Bool(ptr + 24, x["UserEditable"] ? true : false);
        A.store.Bool(ptr + 27, "DeviceEditable" in x ? true : false);
        A.store.Bool(ptr + 25, x["DeviceEditable"] ? true : false);
      }
    },
    "load_ManagedDOMString": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      x["Active"] = A.load.Ref(ptr + 0, undefined);
      x["Effective"] = A.load.Ref(ptr + 4, undefined);
      x["UserPolicy"] = A.load.Ref(ptr + 8, undefined);
      x["DevicePolicy"] = A.load.Ref(ptr + 12, undefined);
      x["UserSetting"] = A.load.Ref(ptr + 16, undefined);
      x["SharedSetting"] = A.load.Ref(ptr + 20, undefined);
      if (A.load.Bool(ptr + 26)) {
        x["UserEditable"] = A.load.Bool(ptr + 24);
      } else {
        delete x["UserEditable"];
      }
      if (A.load.Bool(ptr + 27)) {
        x["DeviceEditable"] = A.load.Bool(ptr + 25);
      } else {
        delete x["DeviceEditable"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_ManagedAPNProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 221, false);

        A.store.Bool(ptr + 0 + 28, false);
        A.store.Ref(ptr + 0 + 0, undefined);
        A.store.Ref(ptr + 0 + 4, undefined);
        A.store.Ref(ptr + 0 + 8, undefined);
        A.store.Ref(ptr + 0 + 12, undefined);
        A.store.Ref(ptr + 0 + 16, undefined);
        A.store.Ref(ptr + 0 + 20, undefined);
        A.store.Bool(ptr + 0 + 26, false);
        A.store.Bool(ptr + 0 + 24, false);
        A.store.Bool(ptr + 0 + 27, false);
        A.store.Bool(ptr + 0 + 25, false);

        A.store.Bool(ptr + 32 + 28, false);
        A.store.Ref(ptr + 32 + 0, undefined);
        A.store.Ref(ptr + 32 + 4, undefined);
        A.store.Ref(ptr + 32 + 8, undefined);
        A.store.Ref(ptr + 32 + 12, undefined);
        A.store.Ref(ptr + 32 + 16, undefined);
        A.store.Ref(ptr + 32 + 20, undefined);
        A.store.Bool(ptr + 32 + 26, false);
        A.store.Bool(ptr + 32 + 24, false);
        A.store.Bool(ptr + 32 + 27, false);
        A.store.Bool(ptr + 32 + 25, false);

        A.store.Bool(ptr + 64 + 28, false);
        A.store.Ref(ptr + 64 + 0, undefined);
        A.store.Ref(ptr + 64 + 4, undefined);
        A.store.Ref(ptr + 64 + 8, undefined);
        A.store.Ref(ptr + 64 + 12, undefined);
        A.store.Ref(ptr + 64 + 16, undefined);
        A.store.Ref(ptr + 64 + 20, undefined);
        A.store.Bool(ptr + 64 + 26, false);
        A.store.Bool(ptr + 64 + 24, false);
        A.store.Bool(ptr + 64 + 27, false);
        A.store.Bool(ptr + 64 + 25, false);

        A.store.Bool(ptr + 96 + 28, false);
        A.store.Ref(ptr + 96 + 0, undefined);
        A.store.Ref(ptr + 96 + 4, undefined);
        A.store.Ref(ptr + 96 + 8, undefined);
        A.store.Ref(ptr + 96 + 12, undefined);
        A.store.Ref(ptr + 96 + 16, undefined);
        A.store.Ref(ptr + 96 + 20, undefined);
        A.store.Bool(ptr + 96 + 26, false);
        A.store.Bool(ptr + 96 + 24, false);
        A.store.Bool(ptr + 96 + 27, false);
        A.store.Bool(ptr + 96 + 25, false);

        A.store.Bool(ptr + 128 + 28, false);
        A.store.Ref(ptr + 128 + 0, undefined);
        A.store.Ref(ptr + 128 + 4, undefined);
        A.store.Ref(ptr + 128 + 8, undefined);
        A.store.Ref(ptr + 128 + 12, undefined);
        A.store.Ref(ptr + 128 + 16, undefined);
        A.store.Ref(ptr + 128 + 20, undefined);
        A.store.Bool(ptr + 128 + 26, false);
        A.store.Bool(ptr + 128 + 24, false);
        A.store.Bool(ptr + 128 + 27, false);
        A.store.Bool(ptr + 128 + 25, false);

        A.store.Bool(ptr + 160 + 28, false);
        A.store.Ref(ptr + 160 + 0, undefined);
        A.store.Ref(ptr + 160 + 4, undefined);
        A.store.Ref(ptr + 160 + 8, undefined);
        A.store.Ref(ptr + 160 + 12, undefined);
        A.store.Ref(ptr + 160 + 16, undefined);
        A.store.Ref(ptr + 160 + 20, undefined);
        A.store.Bool(ptr + 160 + 26, false);
        A.store.Bool(ptr + 160 + 24, false);
        A.store.Bool(ptr + 160 + 27, false);
        A.store.Bool(ptr + 160 + 25, false);

        A.store.Bool(ptr + 192 + 28, false);
        A.store.Ref(ptr + 192 + 0, undefined);
        A.store.Ref(ptr + 192 + 4, undefined);
        A.store.Ref(ptr + 192 + 8, undefined);
        A.store.Ref(ptr + 192 + 12, undefined);
        A.store.Ref(ptr + 192 + 16, undefined);
        A.store.Ref(ptr + 192 + 20, undefined);
        A.store.Bool(ptr + 192 + 26, false);
        A.store.Bool(ptr + 192 + 24, false);
        A.store.Bool(ptr + 192 + 27, false);
        A.store.Bool(ptr + 192 + 25, false);
      } else {
        A.store.Bool(ptr + 221, true);

        if (typeof x["AccessPointName"] === "undefined") {
          A.store.Bool(ptr + 0 + 28, false);
          A.store.Ref(ptr + 0 + 0, undefined);
          A.store.Ref(ptr + 0 + 4, undefined);
          A.store.Ref(ptr + 0 + 8, undefined);
          A.store.Ref(ptr + 0 + 12, undefined);
          A.store.Ref(ptr + 0 + 16, undefined);
          A.store.Ref(ptr + 0 + 20, undefined);
          A.store.Bool(ptr + 0 + 26, false);
          A.store.Bool(ptr + 0 + 24, false);
          A.store.Bool(ptr + 0 + 27, false);
          A.store.Bool(ptr + 0 + 25, false);
        } else {
          A.store.Bool(ptr + 0 + 28, true);
          A.store.Ref(ptr + 0 + 0, x["AccessPointName"]["Active"]);
          A.store.Ref(ptr + 0 + 4, x["AccessPointName"]["Effective"]);
          A.store.Ref(ptr + 0 + 8, x["AccessPointName"]["UserPolicy"]);
          A.store.Ref(ptr + 0 + 12, x["AccessPointName"]["DevicePolicy"]);
          A.store.Ref(ptr + 0 + 16, x["AccessPointName"]["UserSetting"]);
          A.store.Ref(ptr + 0 + 20, x["AccessPointName"]["SharedSetting"]);
          A.store.Bool(ptr + 0 + 26, "UserEditable" in x["AccessPointName"] ? true : false);
          A.store.Bool(ptr + 0 + 24, x["AccessPointName"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 0 + 27, "DeviceEditable" in x["AccessPointName"] ? true : false);
          A.store.Bool(ptr + 0 + 25, x["AccessPointName"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["Authentication"] === "undefined") {
          A.store.Bool(ptr + 32 + 28, false);
          A.store.Ref(ptr + 32 + 0, undefined);
          A.store.Ref(ptr + 32 + 4, undefined);
          A.store.Ref(ptr + 32 + 8, undefined);
          A.store.Ref(ptr + 32 + 12, undefined);
          A.store.Ref(ptr + 32 + 16, undefined);
          A.store.Ref(ptr + 32 + 20, undefined);
          A.store.Bool(ptr + 32 + 26, false);
          A.store.Bool(ptr + 32 + 24, false);
          A.store.Bool(ptr + 32 + 27, false);
          A.store.Bool(ptr + 32 + 25, false);
        } else {
          A.store.Bool(ptr + 32 + 28, true);
          A.store.Ref(ptr + 32 + 0, x["Authentication"]["Active"]);
          A.store.Ref(ptr + 32 + 4, x["Authentication"]["Effective"]);
          A.store.Ref(ptr + 32 + 8, x["Authentication"]["UserPolicy"]);
          A.store.Ref(ptr + 32 + 12, x["Authentication"]["DevicePolicy"]);
          A.store.Ref(ptr + 32 + 16, x["Authentication"]["UserSetting"]);
          A.store.Ref(ptr + 32 + 20, x["Authentication"]["SharedSetting"]);
          A.store.Bool(ptr + 32 + 26, "UserEditable" in x["Authentication"] ? true : false);
          A.store.Bool(ptr + 32 + 24, x["Authentication"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 32 + 27, "DeviceEditable" in x["Authentication"] ? true : false);
          A.store.Bool(ptr + 32 + 25, x["Authentication"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["Language"] === "undefined") {
          A.store.Bool(ptr + 64 + 28, false);
          A.store.Ref(ptr + 64 + 0, undefined);
          A.store.Ref(ptr + 64 + 4, undefined);
          A.store.Ref(ptr + 64 + 8, undefined);
          A.store.Ref(ptr + 64 + 12, undefined);
          A.store.Ref(ptr + 64 + 16, undefined);
          A.store.Ref(ptr + 64 + 20, undefined);
          A.store.Bool(ptr + 64 + 26, false);
          A.store.Bool(ptr + 64 + 24, false);
          A.store.Bool(ptr + 64 + 27, false);
          A.store.Bool(ptr + 64 + 25, false);
        } else {
          A.store.Bool(ptr + 64 + 28, true);
          A.store.Ref(ptr + 64 + 0, x["Language"]["Active"]);
          A.store.Ref(ptr + 64 + 4, x["Language"]["Effective"]);
          A.store.Ref(ptr + 64 + 8, x["Language"]["UserPolicy"]);
          A.store.Ref(ptr + 64 + 12, x["Language"]["DevicePolicy"]);
          A.store.Ref(ptr + 64 + 16, x["Language"]["UserSetting"]);
          A.store.Ref(ptr + 64 + 20, x["Language"]["SharedSetting"]);
          A.store.Bool(ptr + 64 + 26, "UserEditable" in x["Language"] ? true : false);
          A.store.Bool(ptr + 64 + 24, x["Language"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 64 + 27, "DeviceEditable" in x["Language"] ? true : false);
          A.store.Bool(ptr + 64 + 25, x["Language"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["LocalizedName"] === "undefined") {
          A.store.Bool(ptr + 96 + 28, false);
          A.store.Ref(ptr + 96 + 0, undefined);
          A.store.Ref(ptr + 96 + 4, undefined);
          A.store.Ref(ptr + 96 + 8, undefined);
          A.store.Ref(ptr + 96 + 12, undefined);
          A.store.Ref(ptr + 96 + 16, undefined);
          A.store.Ref(ptr + 96 + 20, undefined);
          A.store.Bool(ptr + 96 + 26, false);
          A.store.Bool(ptr + 96 + 24, false);
          A.store.Bool(ptr + 96 + 27, false);
          A.store.Bool(ptr + 96 + 25, false);
        } else {
          A.store.Bool(ptr + 96 + 28, true);
          A.store.Ref(ptr + 96 + 0, x["LocalizedName"]["Active"]);
          A.store.Ref(ptr + 96 + 4, x["LocalizedName"]["Effective"]);
          A.store.Ref(ptr + 96 + 8, x["LocalizedName"]["UserPolicy"]);
          A.store.Ref(ptr + 96 + 12, x["LocalizedName"]["DevicePolicy"]);
          A.store.Ref(ptr + 96 + 16, x["LocalizedName"]["UserSetting"]);
          A.store.Ref(ptr + 96 + 20, x["LocalizedName"]["SharedSetting"]);
          A.store.Bool(ptr + 96 + 26, "UserEditable" in x["LocalizedName"] ? true : false);
          A.store.Bool(ptr + 96 + 24, x["LocalizedName"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 96 + 27, "DeviceEditable" in x["LocalizedName"] ? true : false);
          A.store.Bool(ptr + 96 + 25, x["LocalizedName"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["Name"] === "undefined") {
          A.store.Bool(ptr + 128 + 28, false);
          A.store.Ref(ptr + 128 + 0, undefined);
          A.store.Ref(ptr + 128 + 4, undefined);
          A.store.Ref(ptr + 128 + 8, undefined);
          A.store.Ref(ptr + 128 + 12, undefined);
          A.store.Ref(ptr + 128 + 16, undefined);
          A.store.Ref(ptr + 128 + 20, undefined);
          A.store.Bool(ptr + 128 + 26, false);
          A.store.Bool(ptr + 128 + 24, false);
          A.store.Bool(ptr + 128 + 27, false);
          A.store.Bool(ptr + 128 + 25, false);
        } else {
          A.store.Bool(ptr + 128 + 28, true);
          A.store.Ref(ptr + 128 + 0, x["Name"]["Active"]);
          A.store.Ref(ptr + 128 + 4, x["Name"]["Effective"]);
          A.store.Ref(ptr + 128 + 8, x["Name"]["UserPolicy"]);
          A.store.Ref(ptr + 128 + 12, x["Name"]["DevicePolicy"]);
          A.store.Ref(ptr + 128 + 16, x["Name"]["UserSetting"]);
          A.store.Ref(ptr + 128 + 20, x["Name"]["SharedSetting"]);
          A.store.Bool(ptr + 128 + 26, "UserEditable" in x["Name"] ? true : false);
          A.store.Bool(ptr + 128 + 24, x["Name"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 128 + 27, "DeviceEditable" in x["Name"] ? true : false);
          A.store.Bool(ptr + 128 + 25, x["Name"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["Password"] === "undefined") {
          A.store.Bool(ptr + 160 + 28, false);
          A.store.Ref(ptr + 160 + 0, undefined);
          A.store.Ref(ptr + 160 + 4, undefined);
          A.store.Ref(ptr + 160 + 8, undefined);
          A.store.Ref(ptr + 160 + 12, undefined);
          A.store.Ref(ptr + 160 + 16, undefined);
          A.store.Ref(ptr + 160 + 20, undefined);
          A.store.Bool(ptr + 160 + 26, false);
          A.store.Bool(ptr + 160 + 24, false);
          A.store.Bool(ptr + 160 + 27, false);
          A.store.Bool(ptr + 160 + 25, false);
        } else {
          A.store.Bool(ptr + 160 + 28, true);
          A.store.Ref(ptr + 160 + 0, x["Password"]["Active"]);
          A.store.Ref(ptr + 160 + 4, x["Password"]["Effective"]);
          A.store.Ref(ptr + 160 + 8, x["Password"]["UserPolicy"]);
          A.store.Ref(ptr + 160 + 12, x["Password"]["DevicePolicy"]);
          A.store.Ref(ptr + 160 + 16, x["Password"]["UserSetting"]);
          A.store.Ref(ptr + 160 + 20, x["Password"]["SharedSetting"]);
          A.store.Bool(ptr + 160 + 26, "UserEditable" in x["Password"] ? true : false);
          A.store.Bool(ptr + 160 + 24, x["Password"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 160 + 27, "DeviceEditable" in x["Password"] ? true : false);
          A.store.Bool(ptr + 160 + 25, x["Password"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["Username"] === "undefined") {
          A.store.Bool(ptr + 192 + 28, false);
          A.store.Ref(ptr + 192 + 0, undefined);
          A.store.Ref(ptr + 192 + 4, undefined);
          A.store.Ref(ptr + 192 + 8, undefined);
          A.store.Ref(ptr + 192 + 12, undefined);
          A.store.Ref(ptr + 192 + 16, undefined);
          A.store.Ref(ptr + 192 + 20, undefined);
          A.store.Bool(ptr + 192 + 26, false);
          A.store.Bool(ptr + 192 + 24, false);
          A.store.Bool(ptr + 192 + 27, false);
          A.store.Bool(ptr + 192 + 25, false);
        } else {
          A.store.Bool(ptr + 192 + 28, true);
          A.store.Ref(ptr + 192 + 0, x["Username"]["Active"]);
          A.store.Ref(ptr + 192 + 4, x["Username"]["Effective"]);
          A.store.Ref(ptr + 192 + 8, x["Username"]["UserPolicy"]);
          A.store.Ref(ptr + 192 + 12, x["Username"]["DevicePolicy"]);
          A.store.Ref(ptr + 192 + 16, x["Username"]["UserSetting"]);
          A.store.Ref(ptr + 192 + 20, x["Username"]["SharedSetting"]);
          A.store.Bool(ptr + 192 + 26, "UserEditable" in x["Username"] ? true : false);
          A.store.Bool(ptr + 192 + 24, x["Username"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 192 + 27, "DeviceEditable" in x["Username"] ? true : false);
          A.store.Bool(ptr + 192 + 25, x["Username"]["DeviceEditable"] ? true : false);
        }
      }
    },
    "load_ManagedAPNProperties": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      if (A.load.Bool(ptr + 0 + 28)) {
        x["AccessPointName"] = {};
        x["AccessPointName"]["Active"] = A.load.Ref(ptr + 0 + 0, undefined);
        x["AccessPointName"]["Effective"] = A.load.Ref(ptr + 0 + 4, undefined);
        x["AccessPointName"]["UserPolicy"] = A.load.Ref(ptr + 0 + 8, undefined);
        x["AccessPointName"]["DevicePolicy"] = A.load.Ref(ptr + 0 + 12, undefined);
        x["AccessPointName"]["UserSetting"] = A.load.Ref(ptr + 0 + 16, undefined);
        x["AccessPointName"]["SharedSetting"] = A.load.Ref(ptr + 0 + 20, undefined);
        if (A.load.Bool(ptr + 0 + 26)) {
          x["AccessPointName"]["UserEditable"] = A.load.Bool(ptr + 0 + 24);
        } else {
          delete x["AccessPointName"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 0 + 27)) {
          x["AccessPointName"]["DeviceEditable"] = A.load.Bool(ptr + 0 + 25);
        } else {
          delete x["AccessPointName"]["DeviceEditable"];
        }
      } else {
        delete x["AccessPointName"];
      }
      if (A.load.Bool(ptr + 32 + 28)) {
        x["Authentication"] = {};
        x["Authentication"]["Active"] = A.load.Ref(ptr + 32 + 0, undefined);
        x["Authentication"]["Effective"] = A.load.Ref(ptr + 32 + 4, undefined);
        x["Authentication"]["UserPolicy"] = A.load.Ref(ptr + 32 + 8, undefined);
        x["Authentication"]["DevicePolicy"] = A.load.Ref(ptr + 32 + 12, undefined);
        x["Authentication"]["UserSetting"] = A.load.Ref(ptr + 32 + 16, undefined);
        x["Authentication"]["SharedSetting"] = A.load.Ref(ptr + 32 + 20, undefined);
        if (A.load.Bool(ptr + 32 + 26)) {
          x["Authentication"]["UserEditable"] = A.load.Bool(ptr + 32 + 24);
        } else {
          delete x["Authentication"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 32 + 27)) {
          x["Authentication"]["DeviceEditable"] = A.load.Bool(ptr + 32 + 25);
        } else {
          delete x["Authentication"]["DeviceEditable"];
        }
      } else {
        delete x["Authentication"];
      }
      if (A.load.Bool(ptr + 64 + 28)) {
        x["Language"] = {};
        x["Language"]["Active"] = A.load.Ref(ptr + 64 + 0, undefined);
        x["Language"]["Effective"] = A.load.Ref(ptr + 64 + 4, undefined);
        x["Language"]["UserPolicy"] = A.load.Ref(ptr + 64 + 8, undefined);
        x["Language"]["DevicePolicy"] = A.load.Ref(ptr + 64 + 12, undefined);
        x["Language"]["UserSetting"] = A.load.Ref(ptr + 64 + 16, undefined);
        x["Language"]["SharedSetting"] = A.load.Ref(ptr + 64 + 20, undefined);
        if (A.load.Bool(ptr + 64 + 26)) {
          x["Language"]["UserEditable"] = A.load.Bool(ptr + 64 + 24);
        } else {
          delete x["Language"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 64 + 27)) {
          x["Language"]["DeviceEditable"] = A.load.Bool(ptr + 64 + 25);
        } else {
          delete x["Language"]["DeviceEditable"];
        }
      } else {
        delete x["Language"];
      }
      if (A.load.Bool(ptr + 96 + 28)) {
        x["LocalizedName"] = {};
        x["LocalizedName"]["Active"] = A.load.Ref(ptr + 96 + 0, undefined);
        x["LocalizedName"]["Effective"] = A.load.Ref(ptr + 96 + 4, undefined);
        x["LocalizedName"]["UserPolicy"] = A.load.Ref(ptr + 96 + 8, undefined);
        x["LocalizedName"]["DevicePolicy"] = A.load.Ref(ptr + 96 + 12, undefined);
        x["LocalizedName"]["UserSetting"] = A.load.Ref(ptr + 96 + 16, undefined);
        x["LocalizedName"]["SharedSetting"] = A.load.Ref(ptr + 96 + 20, undefined);
        if (A.load.Bool(ptr + 96 + 26)) {
          x["LocalizedName"]["UserEditable"] = A.load.Bool(ptr + 96 + 24);
        } else {
          delete x["LocalizedName"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 96 + 27)) {
          x["LocalizedName"]["DeviceEditable"] = A.load.Bool(ptr + 96 + 25);
        } else {
          delete x["LocalizedName"]["DeviceEditable"];
        }
      } else {
        delete x["LocalizedName"];
      }
      if (A.load.Bool(ptr + 128 + 28)) {
        x["Name"] = {};
        x["Name"]["Active"] = A.load.Ref(ptr + 128 + 0, undefined);
        x["Name"]["Effective"] = A.load.Ref(ptr + 128 + 4, undefined);
        x["Name"]["UserPolicy"] = A.load.Ref(ptr + 128 + 8, undefined);
        x["Name"]["DevicePolicy"] = A.load.Ref(ptr + 128 + 12, undefined);
        x["Name"]["UserSetting"] = A.load.Ref(ptr + 128 + 16, undefined);
        x["Name"]["SharedSetting"] = A.load.Ref(ptr + 128 + 20, undefined);
        if (A.load.Bool(ptr + 128 + 26)) {
          x["Name"]["UserEditable"] = A.load.Bool(ptr + 128 + 24);
        } else {
          delete x["Name"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 128 + 27)) {
          x["Name"]["DeviceEditable"] = A.load.Bool(ptr + 128 + 25);
        } else {
          delete x["Name"]["DeviceEditable"];
        }
      } else {
        delete x["Name"];
      }
      if (A.load.Bool(ptr + 160 + 28)) {
        x["Password"] = {};
        x["Password"]["Active"] = A.load.Ref(ptr + 160 + 0, undefined);
        x["Password"]["Effective"] = A.load.Ref(ptr + 160 + 4, undefined);
        x["Password"]["UserPolicy"] = A.load.Ref(ptr + 160 + 8, undefined);
        x["Password"]["DevicePolicy"] = A.load.Ref(ptr + 160 + 12, undefined);
        x["Password"]["UserSetting"] = A.load.Ref(ptr + 160 + 16, undefined);
        x["Password"]["SharedSetting"] = A.load.Ref(ptr + 160 + 20, undefined);
        if (A.load.Bool(ptr + 160 + 26)) {
          x["Password"]["UserEditable"] = A.load.Bool(ptr + 160 + 24);
        } else {
          delete x["Password"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 160 + 27)) {
          x["Password"]["DeviceEditable"] = A.load.Bool(ptr + 160 + 25);
        } else {
          delete x["Password"]["DeviceEditable"];
        }
      } else {
        delete x["Password"];
      }
      if (A.load.Bool(ptr + 192 + 28)) {
        x["Username"] = {};
        x["Username"]["Active"] = A.load.Ref(ptr + 192 + 0, undefined);
        x["Username"]["Effective"] = A.load.Ref(ptr + 192 + 4, undefined);
        x["Username"]["UserPolicy"] = A.load.Ref(ptr + 192 + 8, undefined);
        x["Username"]["DevicePolicy"] = A.load.Ref(ptr + 192 + 12, undefined);
        x["Username"]["UserSetting"] = A.load.Ref(ptr + 192 + 16, undefined);
        x["Username"]["SharedSetting"] = A.load.Ref(ptr + 192 + 20, undefined);
        if (A.load.Bool(ptr + 192 + 26)) {
          x["Username"]["UserEditable"] = A.load.Bool(ptr + 192 + 24);
        } else {
          delete x["Username"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 192 + 27)) {
          x["Username"]["DeviceEditable"] = A.load.Bool(ptr + 192 + 25);
        } else {
          delete x["Username"]["DeviceEditable"];
        }
      } else {
        delete x["Username"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_ManagedAPNList": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 28, false);
        A.store.Ref(ptr + 0, undefined);
        A.store.Ref(ptr + 4, undefined);
        A.store.Ref(ptr + 8, undefined);
        A.store.Ref(ptr + 12, undefined);
        A.store.Ref(ptr + 16, undefined);
        A.store.Ref(ptr + 20, undefined);
        A.store.Bool(ptr + 26, false);
        A.store.Bool(ptr + 24, false);
        A.store.Bool(ptr + 27, false);
        A.store.Bool(ptr + 25, false);
      } else {
        A.store.Bool(ptr + 28, true);
        A.store.Ref(ptr + 0, x["Active"]);
        A.store.Ref(ptr + 4, x["Effective"]);
        A.store.Ref(ptr + 8, x["UserPolicy"]);
        A.store.Ref(ptr + 12, x["DevicePolicy"]);
        A.store.Ref(ptr + 16, x["UserSetting"]);
        A.store.Ref(ptr + 20, x["SharedSetting"]);
        A.store.Bool(ptr + 26, "UserEditable" in x ? true : false);
        A.store.Bool(ptr + 24, x["UserEditable"] ? true : false);
        A.store.Bool(ptr + 27, "DeviceEditable" in x ? true : false);
        A.store.Bool(ptr + 25, x["DeviceEditable"] ? true : false);
      }
    },
    "load_ManagedAPNList": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      x["Active"] = A.load.Ref(ptr + 0, undefined);
      x["Effective"] = A.load.Ref(ptr + 4, undefined);
      x["UserPolicy"] = A.load.Ref(ptr + 8, undefined);
      x["DevicePolicy"] = A.load.Ref(ptr + 12, undefined);
      x["UserSetting"] = A.load.Ref(ptr + 16, undefined);
      x["SharedSetting"] = A.load.Ref(ptr + 20, undefined);
      if (A.load.Bool(ptr + 26)) {
        x["UserEditable"] = A.load.Bool(ptr + 24);
      } else {
        delete x["UserEditable"];
      }
      if (A.load.Bool(ptr + 27)) {
        x["DeviceEditable"] = A.load.Bool(ptr + 25);
      } else {
        delete x["DeviceEditable"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_ManagedCellularProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 458, false);

        A.store.Bool(ptr + 0 + 21, false);
        A.store.Bool(ptr + 0 + 14, false);
        A.store.Bool(ptr + 0 + 0, false);
        A.store.Ref(ptr + 0 + 4, undefined);
        A.store.Bool(ptr + 0 + 15, false);
        A.store.Bool(ptr + 0 + 8, false);
        A.store.Bool(ptr + 0 + 16, false);
        A.store.Bool(ptr + 0 + 9, false);
        A.store.Bool(ptr + 0 + 17, false);
        A.store.Bool(ptr + 0 + 10, false);
        A.store.Bool(ptr + 0 + 18, false);
        A.store.Bool(ptr + 0 + 11, false);
        A.store.Bool(ptr + 0 + 19, false);
        A.store.Bool(ptr + 0 + 12, false);
        A.store.Bool(ptr + 0 + 20, false);
        A.store.Bool(ptr + 0 + 13, false);

        A.store.Bool(ptr + 24 + 221, false);

        A.store.Bool(ptr + 24 + 0 + 28, false);
        A.store.Ref(ptr + 24 + 0 + 0, undefined);
        A.store.Ref(ptr + 24 + 0 + 4, undefined);
        A.store.Ref(ptr + 24 + 0 + 8, undefined);
        A.store.Ref(ptr + 24 + 0 + 12, undefined);
        A.store.Ref(ptr + 24 + 0 + 16, undefined);
        A.store.Ref(ptr + 24 + 0 + 20, undefined);
        A.store.Bool(ptr + 24 + 0 + 26, false);
        A.store.Bool(ptr + 24 + 0 + 24, false);
        A.store.Bool(ptr + 24 + 0 + 27, false);
        A.store.Bool(ptr + 24 + 0 + 25, false);

        A.store.Bool(ptr + 24 + 32 + 28, false);
        A.store.Ref(ptr + 24 + 32 + 0, undefined);
        A.store.Ref(ptr + 24 + 32 + 4, undefined);
        A.store.Ref(ptr + 24 + 32 + 8, undefined);
        A.store.Ref(ptr + 24 + 32 + 12, undefined);
        A.store.Ref(ptr + 24 + 32 + 16, undefined);
        A.store.Ref(ptr + 24 + 32 + 20, undefined);
        A.store.Bool(ptr + 24 + 32 + 26, false);
        A.store.Bool(ptr + 24 + 32 + 24, false);
        A.store.Bool(ptr + 24 + 32 + 27, false);
        A.store.Bool(ptr + 24 + 32 + 25, false);

        A.store.Bool(ptr + 24 + 64 + 28, false);
        A.store.Ref(ptr + 24 + 64 + 0, undefined);
        A.store.Ref(ptr + 24 + 64 + 4, undefined);
        A.store.Ref(ptr + 24 + 64 + 8, undefined);
        A.store.Ref(ptr + 24 + 64 + 12, undefined);
        A.store.Ref(ptr + 24 + 64 + 16, undefined);
        A.store.Ref(ptr + 24 + 64 + 20, undefined);
        A.store.Bool(ptr + 24 + 64 + 26, false);
        A.store.Bool(ptr + 24 + 64 + 24, false);
        A.store.Bool(ptr + 24 + 64 + 27, false);
        A.store.Bool(ptr + 24 + 64 + 25, false);

        A.store.Bool(ptr + 24 + 96 + 28, false);
        A.store.Ref(ptr + 24 + 96 + 0, undefined);
        A.store.Ref(ptr + 24 + 96 + 4, undefined);
        A.store.Ref(ptr + 24 + 96 + 8, undefined);
        A.store.Ref(ptr + 24 + 96 + 12, undefined);
        A.store.Ref(ptr + 24 + 96 + 16, undefined);
        A.store.Ref(ptr + 24 + 96 + 20, undefined);
        A.store.Bool(ptr + 24 + 96 + 26, false);
        A.store.Bool(ptr + 24 + 96 + 24, false);
        A.store.Bool(ptr + 24 + 96 + 27, false);
        A.store.Bool(ptr + 24 + 96 + 25, false);

        A.store.Bool(ptr + 24 + 128 + 28, false);
        A.store.Ref(ptr + 24 + 128 + 0, undefined);
        A.store.Ref(ptr + 24 + 128 + 4, undefined);
        A.store.Ref(ptr + 24 + 128 + 8, undefined);
        A.store.Ref(ptr + 24 + 128 + 12, undefined);
        A.store.Ref(ptr + 24 + 128 + 16, undefined);
        A.store.Ref(ptr + 24 + 128 + 20, undefined);
        A.store.Bool(ptr + 24 + 128 + 26, false);
        A.store.Bool(ptr + 24 + 128 + 24, false);
        A.store.Bool(ptr + 24 + 128 + 27, false);
        A.store.Bool(ptr + 24 + 128 + 25, false);

        A.store.Bool(ptr + 24 + 160 + 28, false);
        A.store.Ref(ptr + 24 + 160 + 0, undefined);
        A.store.Ref(ptr + 24 + 160 + 4, undefined);
        A.store.Ref(ptr + 24 + 160 + 8, undefined);
        A.store.Ref(ptr + 24 + 160 + 12, undefined);
        A.store.Ref(ptr + 24 + 160 + 16, undefined);
        A.store.Ref(ptr + 24 + 160 + 20, undefined);
        A.store.Bool(ptr + 24 + 160 + 26, false);
        A.store.Bool(ptr + 24 + 160 + 24, false);
        A.store.Bool(ptr + 24 + 160 + 27, false);
        A.store.Bool(ptr + 24 + 160 + 25, false);

        A.store.Bool(ptr + 24 + 192 + 28, false);
        A.store.Ref(ptr + 24 + 192 + 0, undefined);
        A.store.Ref(ptr + 24 + 192 + 4, undefined);
        A.store.Ref(ptr + 24 + 192 + 8, undefined);
        A.store.Ref(ptr + 24 + 192 + 12, undefined);
        A.store.Ref(ptr + 24 + 192 + 16, undefined);
        A.store.Ref(ptr + 24 + 192 + 20, undefined);
        A.store.Bool(ptr + 24 + 192 + 26, false);
        A.store.Bool(ptr + 24 + 192 + 24, false);
        A.store.Bool(ptr + 24 + 192 + 27, false);
        A.store.Bool(ptr + 24 + 192 + 25, false);

        A.store.Bool(ptr + 248 + 28, false);
        A.store.Ref(ptr + 248 + 0, undefined);
        A.store.Ref(ptr + 248 + 4, undefined);
        A.store.Ref(ptr + 248 + 8, undefined);
        A.store.Ref(ptr + 248 + 12, undefined);
        A.store.Ref(ptr + 248 + 16, undefined);
        A.store.Ref(ptr + 248 + 20, undefined);
        A.store.Bool(ptr + 248 + 26, false);
        A.store.Bool(ptr + 248 + 24, false);
        A.store.Bool(ptr + 248 + 27, false);
        A.store.Bool(ptr + 248 + 25, false);
        A.store.Ref(ptr + 280, undefined);
        A.store.Enum(ptr + 284, -1);
        A.store.Bool(ptr + 453, false);
        A.store.Bool(ptr + 288, false);
        A.store.Ref(ptr + 292, undefined);
        A.store.Ref(ptr + 296, undefined);
        A.store.Ref(ptr + 300, undefined);
        A.store.Ref(ptr + 304, undefined);
        A.store.Ref(ptr + 308, undefined);

        A.store.Bool(ptr + 312 + 12, false);
        A.store.Ref(ptr + 312 + 0, undefined);
        A.store.Ref(ptr + 312 + 4, undefined);
        A.store.Ref(ptr + 312 + 8, undefined);
        A.store.Ref(ptr + 328, undefined);
        A.store.Ref(ptr + 332, undefined);

        A.store.Bool(ptr + 336 + 28, false);
        A.store.Ref(ptr + 336 + 0, undefined);
        A.store.Ref(ptr + 336 + 4, undefined);
        A.store.Ref(ptr + 336 + 8, undefined);
        A.store.Ref(ptr + 336 + 12, undefined);
        A.store.Ref(ptr + 336 + 16, undefined);
        A.store.Ref(ptr + 336 + 20, undefined);
        A.store.Ref(ptr + 336 + 24, undefined);
        A.store.Ref(ptr + 368, undefined);
        A.store.Ref(ptr + 372, undefined);
        A.store.Ref(ptr + 376, undefined);
        A.store.Ref(ptr + 380, undefined);
        A.store.Ref(ptr + 384, undefined);
        A.store.Ref(ptr + 388, undefined);

        A.store.Bool(ptr + 392 + 12, false);
        A.store.Ref(ptr + 392 + 0, undefined);
        A.store.Ref(ptr + 392 + 4, undefined);
        A.store.Ref(ptr + 392 + 8, undefined);
        A.store.Ref(ptr + 408, undefined);
        A.store.Bool(ptr + 454, false);
        A.store.Bool(ptr + 412, false);

        A.store.Bool(ptr + 416 + 12, false);
        A.store.Ref(ptr + 416 + 0, undefined);
        A.store.Ref(ptr + 416 + 4, undefined);
        A.store.Ref(ptr + 416 + 8, undefined);

        A.store.Bool(ptr + 432 + 14, false);
        A.store.Ref(ptr + 432 + 0, undefined);
        A.store.Bool(ptr + 432 + 12, false);
        A.store.Bool(ptr + 432 + 4, false);
        A.store.Bool(ptr + 432 + 13, false);
        A.store.Int32(ptr + 432 + 8, 0);
        A.store.Bool(ptr + 455, false);
        A.store.Bool(ptr + 447, false);
        A.store.Bool(ptr + 456, false);
        A.store.Int32(ptr + 448, 0);
        A.store.Bool(ptr + 457, false);
        A.store.Bool(ptr + 452, false);
      } else {
        A.store.Bool(ptr + 458, true);

        if (typeof x["AutoConnect"] === "undefined") {
          A.store.Bool(ptr + 0 + 21, false);
          A.store.Bool(ptr + 0 + 14, false);
          A.store.Bool(ptr + 0 + 0, false);
          A.store.Ref(ptr + 0 + 4, undefined);
          A.store.Bool(ptr + 0 + 15, false);
          A.store.Bool(ptr + 0 + 8, false);
          A.store.Bool(ptr + 0 + 16, false);
          A.store.Bool(ptr + 0 + 9, false);
          A.store.Bool(ptr + 0 + 17, false);
          A.store.Bool(ptr + 0 + 10, false);
          A.store.Bool(ptr + 0 + 18, false);
          A.store.Bool(ptr + 0 + 11, false);
          A.store.Bool(ptr + 0 + 19, false);
          A.store.Bool(ptr + 0 + 12, false);
          A.store.Bool(ptr + 0 + 20, false);
          A.store.Bool(ptr + 0 + 13, false);
        } else {
          A.store.Bool(ptr + 0 + 21, true);
          A.store.Bool(ptr + 0 + 14, "Active" in x["AutoConnect"] ? true : false);
          A.store.Bool(ptr + 0 + 0, x["AutoConnect"]["Active"] ? true : false);
          A.store.Ref(ptr + 0 + 4, x["AutoConnect"]["Effective"]);
          A.store.Bool(ptr + 0 + 15, "UserPolicy" in x["AutoConnect"] ? true : false);
          A.store.Bool(ptr + 0 + 8, x["AutoConnect"]["UserPolicy"] ? true : false);
          A.store.Bool(ptr + 0 + 16, "DevicePolicy" in x["AutoConnect"] ? true : false);
          A.store.Bool(ptr + 0 + 9, x["AutoConnect"]["DevicePolicy"] ? true : false);
          A.store.Bool(ptr + 0 + 17, "UserSetting" in x["AutoConnect"] ? true : false);
          A.store.Bool(ptr + 0 + 10, x["AutoConnect"]["UserSetting"] ? true : false);
          A.store.Bool(ptr + 0 + 18, "SharedSetting" in x["AutoConnect"] ? true : false);
          A.store.Bool(ptr + 0 + 11, x["AutoConnect"]["SharedSetting"] ? true : false);
          A.store.Bool(ptr + 0 + 19, "UserEditable" in x["AutoConnect"] ? true : false);
          A.store.Bool(ptr + 0 + 12, x["AutoConnect"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 0 + 20, "DeviceEditable" in x["AutoConnect"] ? true : false);
          A.store.Bool(ptr + 0 + 13, x["AutoConnect"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["APN"] === "undefined") {
          A.store.Bool(ptr + 24 + 221, false);

          A.store.Bool(ptr + 24 + 0 + 28, false);
          A.store.Ref(ptr + 24 + 0 + 0, undefined);
          A.store.Ref(ptr + 24 + 0 + 4, undefined);
          A.store.Ref(ptr + 24 + 0 + 8, undefined);
          A.store.Ref(ptr + 24 + 0 + 12, undefined);
          A.store.Ref(ptr + 24 + 0 + 16, undefined);
          A.store.Ref(ptr + 24 + 0 + 20, undefined);
          A.store.Bool(ptr + 24 + 0 + 26, false);
          A.store.Bool(ptr + 24 + 0 + 24, false);
          A.store.Bool(ptr + 24 + 0 + 27, false);
          A.store.Bool(ptr + 24 + 0 + 25, false);

          A.store.Bool(ptr + 24 + 32 + 28, false);
          A.store.Ref(ptr + 24 + 32 + 0, undefined);
          A.store.Ref(ptr + 24 + 32 + 4, undefined);
          A.store.Ref(ptr + 24 + 32 + 8, undefined);
          A.store.Ref(ptr + 24 + 32 + 12, undefined);
          A.store.Ref(ptr + 24 + 32 + 16, undefined);
          A.store.Ref(ptr + 24 + 32 + 20, undefined);
          A.store.Bool(ptr + 24 + 32 + 26, false);
          A.store.Bool(ptr + 24 + 32 + 24, false);
          A.store.Bool(ptr + 24 + 32 + 27, false);
          A.store.Bool(ptr + 24 + 32 + 25, false);

          A.store.Bool(ptr + 24 + 64 + 28, false);
          A.store.Ref(ptr + 24 + 64 + 0, undefined);
          A.store.Ref(ptr + 24 + 64 + 4, undefined);
          A.store.Ref(ptr + 24 + 64 + 8, undefined);
          A.store.Ref(ptr + 24 + 64 + 12, undefined);
          A.store.Ref(ptr + 24 + 64 + 16, undefined);
          A.store.Ref(ptr + 24 + 64 + 20, undefined);
          A.store.Bool(ptr + 24 + 64 + 26, false);
          A.store.Bool(ptr + 24 + 64 + 24, false);
          A.store.Bool(ptr + 24 + 64 + 27, false);
          A.store.Bool(ptr + 24 + 64 + 25, false);

          A.store.Bool(ptr + 24 + 96 + 28, false);
          A.store.Ref(ptr + 24 + 96 + 0, undefined);
          A.store.Ref(ptr + 24 + 96 + 4, undefined);
          A.store.Ref(ptr + 24 + 96 + 8, undefined);
          A.store.Ref(ptr + 24 + 96 + 12, undefined);
          A.store.Ref(ptr + 24 + 96 + 16, undefined);
          A.store.Ref(ptr + 24 + 96 + 20, undefined);
          A.store.Bool(ptr + 24 + 96 + 26, false);
          A.store.Bool(ptr + 24 + 96 + 24, false);
          A.store.Bool(ptr + 24 + 96 + 27, false);
          A.store.Bool(ptr + 24 + 96 + 25, false);

          A.store.Bool(ptr + 24 + 128 + 28, false);
          A.store.Ref(ptr + 24 + 128 + 0, undefined);
          A.store.Ref(ptr + 24 + 128 + 4, undefined);
          A.store.Ref(ptr + 24 + 128 + 8, undefined);
          A.store.Ref(ptr + 24 + 128 + 12, undefined);
          A.store.Ref(ptr + 24 + 128 + 16, undefined);
          A.store.Ref(ptr + 24 + 128 + 20, undefined);
          A.store.Bool(ptr + 24 + 128 + 26, false);
          A.store.Bool(ptr + 24 + 128 + 24, false);
          A.store.Bool(ptr + 24 + 128 + 27, false);
          A.store.Bool(ptr + 24 + 128 + 25, false);

          A.store.Bool(ptr + 24 + 160 + 28, false);
          A.store.Ref(ptr + 24 + 160 + 0, undefined);
          A.store.Ref(ptr + 24 + 160 + 4, undefined);
          A.store.Ref(ptr + 24 + 160 + 8, undefined);
          A.store.Ref(ptr + 24 + 160 + 12, undefined);
          A.store.Ref(ptr + 24 + 160 + 16, undefined);
          A.store.Ref(ptr + 24 + 160 + 20, undefined);
          A.store.Bool(ptr + 24 + 160 + 26, false);
          A.store.Bool(ptr + 24 + 160 + 24, false);
          A.store.Bool(ptr + 24 + 160 + 27, false);
          A.store.Bool(ptr + 24 + 160 + 25, false);

          A.store.Bool(ptr + 24 + 192 + 28, false);
          A.store.Ref(ptr + 24 + 192 + 0, undefined);
          A.store.Ref(ptr + 24 + 192 + 4, undefined);
          A.store.Ref(ptr + 24 + 192 + 8, undefined);
          A.store.Ref(ptr + 24 + 192 + 12, undefined);
          A.store.Ref(ptr + 24 + 192 + 16, undefined);
          A.store.Ref(ptr + 24 + 192 + 20, undefined);
          A.store.Bool(ptr + 24 + 192 + 26, false);
          A.store.Bool(ptr + 24 + 192 + 24, false);
          A.store.Bool(ptr + 24 + 192 + 27, false);
          A.store.Bool(ptr + 24 + 192 + 25, false);
        } else {
          A.store.Bool(ptr + 24 + 221, true);

          if (typeof x["APN"]["AccessPointName"] === "undefined") {
            A.store.Bool(ptr + 24 + 0 + 28, false);
            A.store.Ref(ptr + 24 + 0 + 0, undefined);
            A.store.Ref(ptr + 24 + 0 + 4, undefined);
            A.store.Ref(ptr + 24 + 0 + 8, undefined);
            A.store.Ref(ptr + 24 + 0 + 12, undefined);
            A.store.Ref(ptr + 24 + 0 + 16, undefined);
            A.store.Ref(ptr + 24 + 0 + 20, undefined);
            A.store.Bool(ptr + 24 + 0 + 26, false);
            A.store.Bool(ptr + 24 + 0 + 24, false);
            A.store.Bool(ptr + 24 + 0 + 27, false);
            A.store.Bool(ptr + 24 + 0 + 25, false);
          } else {
            A.store.Bool(ptr + 24 + 0 + 28, true);
            A.store.Ref(ptr + 24 + 0 + 0, x["APN"]["AccessPointName"]["Active"]);
            A.store.Ref(ptr + 24 + 0 + 4, x["APN"]["AccessPointName"]["Effective"]);
            A.store.Ref(ptr + 24 + 0 + 8, x["APN"]["AccessPointName"]["UserPolicy"]);
            A.store.Ref(ptr + 24 + 0 + 12, x["APN"]["AccessPointName"]["DevicePolicy"]);
            A.store.Ref(ptr + 24 + 0 + 16, x["APN"]["AccessPointName"]["UserSetting"]);
            A.store.Ref(ptr + 24 + 0 + 20, x["APN"]["AccessPointName"]["SharedSetting"]);
            A.store.Bool(ptr + 24 + 0 + 26, "UserEditable" in x["APN"]["AccessPointName"] ? true : false);
            A.store.Bool(ptr + 24 + 0 + 24, x["APN"]["AccessPointName"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 24 + 0 + 27, "DeviceEditable" in x["APN"]["AccessPointName"] ? true : false);
            A.store.Bool(ptr + 24 + 0 + 25, x["APN"]["AccessPointName"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["APN"]["Authentication"] === "undefined") {
            A.store.Bool(ptr + 24 + 32 + 28, false);
            A.store.Ref(ptr + 24 + 32 + 0, undefined);
            A.store.Ref(ptr + 24 + 32 + 4, undefined);
            A.store.Ref(ptr + 24 + 32 + 8, undefined);
            A.store.Ref(ptr + 24 + 32 + 12, undefined);
            A.store.Ref(ptr + 24 + 32 + 16, undefined);
            A.store.Ref(ptr + 24 + 32 + 20, undefined);
            A.store.Bool(ptr + 24 + 32 + 26, false);
            A.store.Bool(ptr + 24 + 32 + 24, false);
            A.store.Bool(ptr + 24 + 32 + 27, false);
            A.store.Bool(ptr + 24 + 32 + 25, false);
          } else {
            A.store.Bool(ptr + 24 + 32 + 28, true);
            A.store.Ref(ptr + 24 + 32 + 0, x["APN"]["Authentication"]["Active"]);
            A.store.Ref(ptr + 24 + 32 + 4, x["APN"]["Authentication"]["Effective"]);
            A.store.Ref(ptr + 24 + 32 + 8, x["APN"]["Authentication"]["UserPolicy"]);
            A.store.Ref(ptr + 24 + 32 + 12, x["APN"]["Authentication"]["DevicePolicy"]);
            A.store.Ref(ptr + 24 + 32 + 16, x["APN"]["Authentication"]["UserSetting"]);
            A.store.Ref(ptr + 24 + 32 + 20, x["APN"]["Authentication"]["SharedSetting"]);
            A.store.Bool(ptr + 24 + 32 + 26, "UserEditable" in x["APN"]["Authentication"] ? true : false);
            A.store.Bool(ptr + 24 + 32 + 24, x["APN"]["Authentication"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 24 + 32 + 27, "DeviceEditable" in x["APN"]["Authentication"] ? true : false);
            A.store.Bool(ptr + 24 + 32 + 25, x["APN"]["Authentication"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["APN"]["Language"] === "undefined") {
            A.store.Bool(ptr + 24 + 64 + 28, false);
            A.store.Ref(ptr + 24 + 64 + 0, undefined);
            A.store.Ref(ptr + 24 + 64 + 4, undefined);
            A.store.Ref(ptr + 24 + 64 + 8, undefined);
            A.store.Ref(ptr + 24 + 64 + 12, undefined);
            A.store.Ref(ptr + 24 + 64 + 16, undefined);
            A.store.Ref(ptr + 24 + 64 + 20, undefined);
            A.store.Bool(ptr + 24 + 64 + 26, false);
            A.store.Bool(ptr + 24 + 64 + 24, false);
            A.store.Bool(ptr + 24 + 64 + 27, false);
            A.store.Bool(ptr + 24 + 64 + 25, false);
          } else {
            A.store.Bool(ptr + 24 + 64 + 28, true);
            A.store.Ref(ptr + 24 + 64 + 0, x["APN"]["Language"]["Active"]);
            A.store.Ref(ptr + 24 + 64 + 4, x["APN"]["Language"]["Effective"]);
            A.store.Ref(ptr + 24 + 64 + 8, x["APN"]["Language"]["UserPolicy"]);
            A.store.Ref(ptr + 24 + 64 + 12, x["APN"]["Language"]["DevicePolicy"]);
            A.store.Ref(ptr + 24 + 64 + 16, x["APN"]["Language"]["UserSetting"]);
            A.store.Ref(ptr + 24 + 64 + 20, x["APN"]["Language"]["SharedSetting"]);
            A.store.Bool(ptr + 24 + 64 + 26, "UserEditable" in x["APN"]["Language"] ? true : false);
            A.store.Bool(ptr + 24 + 64 + 24, x["APN"]["Language"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 24 + 64 + 27, "DeviceEditable" in x["APN"]["Language"] ? true : false);
            A.store.Bool(ptr + 24 + 64 + 25, x["APN"]["Language"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["APN"]["LocalizedName"] === "undefined") {
            A.store.Bool(ptr + 24 + 96 + 28, false);
            A.store.Ref(ptr + 24 + 96 + 0, undefined);
            A.store.Ref(ptr + 24 + 96 + 4, undefined);
            A.store.Ref(ptr + 24 + 96 + 8, undefined);
            A.store.Ref(ptr + 24 + 96 + 12, undefined);
            A.store.Ref(ptr + 24 + 96 + 16, undefined);
            A.store.Ref(ptr + 24 + 96 + 20, undefined);
            A.store.Bool(ptr + 24 + 96 + 26, false);
            A.store.Bool(ptr + 24 + 96 + 24, false);
            A.store.Bool(ptr + 24 + 96 + 27, false);
            A.store.Bool(ptr + 24 + 96 + 25, false);
          } else {
            A.store.Bool(ptr + 24 + 96 + 28, true);
            A.store.Ref(ptr + 24 + 96 + 0, x["APN"]["LocalizedName"]["Active"]);
            A.store.Ref(ptr + 24 + 96 + 4, x["APN"]["LocalizedName"]["Effective"]);
            A.store.Ref(ptr + 24 + 96 + 8, x["APN"]["LocalizedName"]["UserPolicy"]);
            A.store.Ref(ptr + 24 + 96 + 12, x["APN"]["LocalizedName"]["DevicePolicy"]);
            A.store.Ref(ptr + 24 + 96 + 16, x["APN"]["LocalizedName"]["UserSetting"]);
            A.store.Ref(ptr + 24 + 96 + 20, x["APN"]["LocalizedName"]["SharedSetting"]);
            A.store.Bool(ptr + 24 + 96 + 26, "UserEditable" in x["APN"]["LocalizedName"] ? true : false);
            A.store.Bool(ptr + 24 + 96 + 24, x["APN"]["LocalizedName"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 24 + 96 + 27, "DeviceEditable" in x["APN"]["LocalizedName"] ? true : false);
            A.store.Bool(ptr + 24 + 96 + 25, x["APN"]["LocalizedName"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["APN"]["Name"] === "undefined") {
            A.store.Bool(ptr + 24 + 128 + 28, false);
            A.store.Ref(ptr + 24 + 128 + 0, undefined);
            A.store.Ref(ptr + 24 + 128 + 4, undefined);
            A.store.Ref(ptr + 24 + 128 + 8, undefined);
            A.store.Ref(ptr + 24 + 128 + 12, undefined);
            A.store.Ref(ptr + 24 + 128 + 16, undefined);
            A.store.Ref(ptr + 24 + 128 + 20, undefined);
            A.store.Bool(ptr + 24 + 128 + 26, false);
            A.store.Bool(ptr + 24 + 128 + 24, false);
            A.store.Bool(ptr + 24 + 128 + 27, false);
            A.store.Bool(ptr + 24 + 128 + 25, false);
          } else {
            A.store.Bool(ptr + 24 + 128 + 28, true);
            A.store.Ref(ptr + 24 + 128 + 0, x["APN"]["Name"]["Active"]);
            A.store.Ref(ptr + 24 + 128 + 4, x["APN"]["Name"]["Effective"]);
            A.store.Ref(ptr + 24 + 128 + 8, x["APN"]["Name"]["UserPolicy"]);
            A.store.Ref(ptr + 24 + 128 + 12, x["APN"]["Name"]["DevicePolicy"]);
            A.store.Ref(ptr + 24 + 128 + 16, x["APN"]["Name"]["UserSetting"]);
            A.store.Ref(ptr + 24 + 128 + 20, x["APN"]["Name"]["SharedSetting"]);
            A.store.Bool(ptr + 24 + 128 + 26, "UserEditable" in x["APN"]["Name"] ? true : false);
            A.store.Bool(ptr + 24 + 128 + 24, x["APN"]["Name"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 24 + 128 + 27, "DeviceEditable" in x["APN"]["Name"] ? true : false);
            A.store.Bool(ptr + 24 + 128 + 25, x["APN"]["Name"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["APN"]["Password"] === "undefined") {
            A.store.Bool(ptr + 24 + 160 + 28, false);
            A.store.Ref(ptr + 24 + 160 + 0, undefined);
            A.store.Ref(ptr + 24 + 160 + 4, undefined);
            A.store.Ref(ptr + 24 + 160 + 8, undefined);
            A.store.Ref(ptr + 24 + 160 + 12, undefined);
            A.store.Ref(ptr + 24 + 160 + 16, undefined);
            A.store.Ref(ptr + 24 + 160 + 20, undefined);
            A.store.Bool(ptr + 24 + 160 + 26, false);
            A.store.Bool(ptr + 24 + 160 + 24, false);
            A.store.Bool(ptr + 24 + 160 + 27, false);
            A.store.Bool(ptr + 24 + 160 + 25, false);
          } else {
            A.store.Bool(ptr + 24 + 160 + 28, true);
            A.store.Ref(ptr + 24 + 160 + 0, x["APN"]["Password"]["Active"]);
            A.store.Ref(ptr + 24 + 160 + 4, x["APN"]["Password"]["Effective"]);
            A.store.Ref(ptr + 24 + 160 + 8, x["APN"]["Password"]["UserPolicy"]);
            A.store.Ref(ptr + 24 + 160 + 12, x["APN"]["Password"]["DevicePolicy"]);
            A.store.Ref(ptr + 24 + 160 + 16, x["APN"]["Password"]["UserSetting"]);
            A.store.Ref(ptr + 24 + 160 + 20, x["APN"]["Password"]["SharedSetting"]);
            A.store.Bool(ptr + 24 + 160 + 26, "UserEditable" in x["APN"]["Password"] ? true : false);
            A.store.Bool(ptr + 24 + 160 + 24, x["APN"]["Password"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 24 + 160 + 27, "DeviceEditable" in x["APN"]["Password"] ? true : false);
            A.store.Bool(ptr + 24 + 160 + 25, x["APN"]["Password"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["APN"]["Username"] === "undefined") {
            A.store.Bool(ptr + 24 + 192 + 28, false);
            A.store.Ref(ptr + 24 + 192 + 0, undefined);
            A.store.Ref(ptr + 24 + 192 + 4, undefined);
            A.store.Ref(ptr + 24 + 192 + 8, undefined);
            A.store.Ref(ptr + 24 + 192 + 12, undefined);
            A.store.Ref(ptr + 24 + 192 + 16, undefined);
            A.store.Ref(ptr + 24 + 192 + 20, undefined);
            A.store.Bool(ptr + 24 + 192 + 26, false);
            A.store.Bool(ptr + 24 + 192 + 24, false);
            A.store.Bool(ptr + 24 + 192 + 27, false);
            A.store.Bool(ptr + 24 + 192 + 25, false);
          } else {
            A.store.Bool(ptr + 24 + 192 + 28, true);
            A.store.Ref(ptr + 24 + 192 + 0, x["APN"]["Username"]["Active"]);
            A.store.Ref(ptr + 24 + 192 + 4, x["APN"]["Username"]["Effective"]);
            A.store.Ref(ptr + 24 + 192 + 8, x["APN"]["Username"]["UserPolicy"]);
            A.store.Ref(ptr + 24 + 192 + 12, x["APN"]["Username"]["DevicePolicy"]);
            A.store.Ref(ptr + 24 + 192 + 16, x["APN"]["Username"]["UserSetting"]);
            A.store.Ref(ptr + 24 + 192 + 20, x["APN"]["Username"]["SharedSetting"]);
            A.store.Bool(ptr + 24 + 192 + 26, "UserEditable" in x["APN"]["Username"] ? true : false);
            A.store.Bool(ptr + 24 + 192 + 24, x["APN"]["Username"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 24 + 192 + 27, "DeviceEditable" in x["APN"]["Username"] ? true : false);
            A.store.Bool(ptr + 24 + 192 + 25, x["APN"]["Username"]["DeviceEditable"] ? true : false);
          }
        }

        if (typeof x["APNList"] === "undefined") {
          A.store.Bool(ptr + 248 + 28, false);
          A.store.Ref(ptr + 248 + 0, undefined);
          A.store.Ref(ptr + 248 + 4, undefined);
          A.store.Ref(ptr + 248 + 8, undefined);
          A.store.Ref(ptr + 248 + 12, undefined);
          A.store.Ref(ptr + 248 + 16, undefined);
          A.store.Ref(ptr + 248 + 20, undefined);
          A.store.Bool(ptr + 248 + 26, false);
          A.store.Bool(ptr + 248 + 24, false);
          A.store.Bool(ptr + 248 + 27, false);
          A.store.Bool(ptr + 248 + 25, false);
        } else {
          A.store.Bool(ptr + 248 + 28, true);
          A.store.Ref(ptr + 248 + 0, x["APNList"]["Active"]);
          A.store.Ref(ptr + 248 + 4, x["APNList"]["Effective"]);
          A.store.Ref(ptr + 248 + 8, x["APNList"]["UserPolicy"]);
          A.store.Ref(ptr + 248 + 12, x["APNList"]["DevicePolicy"]);
          A.store.Ref(ptr + 248 + 16, x["APNList"]["UserSetting"]);
          A.store.Ref(ptr + 248 + 20, x["APNList"]["SharedSetting"]);
          A.store.Bool(ptr + 248 + 26, "UserEditable" in x["APNList"] ? true : false);
          A.store.Bool(ptr + 248 + 24, x["APNList"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 248 + 27, "DeviceEditable" in x["APNList"] ? true : false);
          A.store.Bool(ptr + 248 + 25, x["APNList"]["DeviceEditable"] ? true : false);
        }
        A.store.Ref(ptr + 280, x["ActivationType"]);
        A.store.Enum(
          ptr + 284,
          ["Activated", "Activating", "NotActivated", "PartiallyActivated"].indexOf(x["ActivationState"] as string)
        );
        A.store.Bool(ptr + 453, "AllowRoaming" in x ? true : false);
        A.store.Bool(ptr + 288, x["AllowRoaming"] ? true : false);
        A.store.Ref(ptr + 292, x["ESN"]);
        A.store.Ref(ptr + 296, x["Family"]);
        A.store.Ref(ptr + 300, x["FirmwareRevision"]);
        A.store.Ref(ptr + 304, x["FoundNetworks"]);
        A.store.Ref(ptr + 308, x["HardwareRevision"]);

        if (typeof x["HomeProvider"] === "undefined") {
          A.store.Bool(ptr + 312 + 12, false);
          A.store.Ref(ptr + 312 + 0, undefined);
          A.store.Ref(ptr + 312 + 4, undefined);
          A.store.Ref(ptr + 312 + 8, undefined);
        } else {
          A.store.Bool(ptr + 312 + 12, true);
          A.store.Ref(ptr + 312 + 0, x["HomeProvider"]["Name"]);
          A.store.Ref(ptr + 312 + 4, x["HomeProvider"]["Code"]);
          A.store.Ref(ptr + 312 + 8, x["HomeProvider"]["Country"]);
        }
        A.store.Ref(ptr + 328, x["ICCID"]);
        A.store.Ref(ptr + 332, x["IMEI"]);

        if (typeof x["LastGoodAPN"] === "undefined") {
          A.store.Bool(ptr + 336 + 28, false);
          A.store.Ref(ptr + 336 + 0, undefined);
          A.store.Ref(ptr + 336 + 4, undefined);
          A.store.Ref(ptr + 336 + 8, undefined);
          A.store.Ref(ptr + 336 + 12, undefined);
          A.store.Ref(ptr + 336 + 16, undefined);
          A.store.Ref(ptr + 336 + 20, undefined);
          A.store.Ref(ptr + 336 + 24, undefined);
        } else {
          A.store.Bool(ptr + 336 + 28, true);
          A.store.Ref(ptr + 336 + 0, x["LastGoodAPN"]["AccessPointName"]);
          A.store.Ref(ptr + 336 + 4, x["LastGoodAPN"]["Authentication"]);
          A.store.Ref(ptr + 336 + 8, x["LastGoodAPN"]["Language"]);
          A.store.Ref(ptr + 336 + 12, x["LastGoodAPN"]["LocalizedName"]);
          A.store.Ref(ptr + 336 + 16, x["LastGoodAPN"]["Name"]);
          A.store.Ref(ptr + 336 + 20, x["LastGoodAPN"]["Password"]);
          A.store.Ref(ptr + 336 + 24, x["LastGoodAPN"]["Username"]);
        }
        A.store.Ref(ptr + 368, x["Manufacturer"]);
        A.store.Ref(ptr + 372, x["MDN"]);
        A.store.Ref(ptr + 376, x["MEID"]);
        A.store.Ref(ptr + 380, x["MIN"]);
        A.store.Ref(ptr + 384, x["ModelID"]);
        A.store.Ref(ptr + 388, x["NetworkTechnology"]);

        if (typeof x["PaymentPortal"] === "undefined") {
          A.store.Bool(ptr + 392 + 12, false);
          A.store.Ref(ptr + 392 + 0, undefined);
          A.store.Ref(ptr + 392 + 4, undefined);
          A.store.Ref(ptr + 392 + 8, undefined);
        } else {
          A.store.Bool(ptr + 392 + 12, true);
          A.store.Ref(ptr + 392 + 0, x["PaymentPortal"]["Method"]);
          A.store.Ref(ptr + 392 + 4, x["PaymentPortal"]["PostData"]);
          A.store.Ref(ptr + 392 + 8, x["PaymentPortal"]["Url"]);
        }
        A.store.Ref(ptr + 408, x["RoamingState"]);
        A.store.Bool(ptr + 454, "Scanning" in x ? true : false);
        A.store.Bool(ptr + 412, x["Scanning"] ? true : false);

        if (typeof x["ServingOperator"] === "undefined") {
          A.store.Bool(ptr + 416 + 12, false);
          A.store.Ref(ptr + 416 + 0, undefined);
          A.store.Ref(ptr + 416 + 4, undefined);
          A.store.Ref(ptr + 416 + 8, undefined);
        } else {
          A.store.Bool(ptr + 416 + 12, true);
          A.store.Ref(ptr + 416 + 0, x["ServingOperator"]["Name"]);
          A.store.Ref(ptr + 416 + 4, x["ServingOperator"]["Code"]);
          A.store.Ref(ptr + 416 + 8, x["ServingOperator"]["Country"]);
        }

        if (typeof x["SIMLockStatus"] === "undefined") {
          A.store.Bool(ptr + 432 + 14, false);
          A.store.Ref(ptr + 432 + 0, undefined);
          A.store.Bool(ptr + 432 + 12, false);
          A.store.Bool(ptr + 432 + 4, false);
          A.store.Bool(ptr + 432 + 13, false);
          A.store.Int32(ptr + 432 + 8, 0);
        } else {
          A.store.Bool(ptr + 432 + 14, true);
          A.store.Ref(ptr + 432 + 0, x["SIMLockStatus"]["LockType"]);
          A.store.Bool(ptr + 432 + 12, "LockEnabled" in x["SIMLockStatus"] ? true : false);
          A.store.Bool(ptr + 432 + 4, x["SIMLockStatus"]["LockEnabled"] ? true : false);
          A.store.Bool(ptr + 432 + 13, "RetriesLeft" in x["SIMLockStatus"] ? true : false);
          A.store.Int32(
            ptr + 432 + 8,
            x["SIMLockStatus"]["RetriesLeft"] === undefined ? 0 : (x["SIMLockStatus"]["RetriesLeft"] as number)
          );
        }
        A.store.Bool(ptr + 455, "SIMPresent" in x ? true : false);
        A.store.Bool(ptr + 447, x["SIMPresent"] ? true : false);
        A.store.Bool(ptr + 456, "SignalStrength" in x ? true : false);
        A.store.Int32(ptr + 448, x["SignalStrength"] === undefined ? 0 : (x["SignalStrength"] as number));
        A.store.Bool(ptr + 457, "SupportNetworkScan" in x ? true : false);
        A.store.Bool(ptr + 452, x["SupportNetworkScan"] ? true : false);
      }
    },
    "load_ManagedCellularProperties": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      if (A.load.Bool(ptr + 0 + 21)) {
        x["AutoConnect"] = {};
        if (A.load.Bool(ptr + 0 + 14)) {
          x["AutoConnect"]["Active"] = A.load.Bool(ptr + 0 + 0);
        } else {
          delete x["AutoConnect"]["Active"];
        }
        x["AutoConnect"]["Effective"] = A.load.Ref(ptr + 0 + 4, undefined);
        if (A.load.Bool(ptr + 0 + 15)) {
          x["AutoConnect"]["UserPolicy"] = A.load.Bool(ptr + 0 + 8);
        } else {
          delete x["AutoConnect"]["UserPolicy"];
        }
        if (A.load.Bool(ptr + 0 + 16)) {
          x["AutoConnect"]["DevicePolicy"] = A.load.Bool(ptr + 0 + 9);
        } else {
          delete x["AutoConnect"]["DevicePolicy"];
        }
        if (A.load.Bool(ptr + 0 + 17)) {
          x["AutoConnect"]["UserSetting"] = A.load.Bool(ptr + 0 + 10);
        } else {
          delete x["AutoConnect"]["UserSetting"];
        }
        if (A.load.Bool(ptr + 0 + 18)) {
          x["AutoConnect"]["SharedSetting"] = A.load.Bool(ptr + 0 + 11);
        } else {
          delete x["AutoConnect"]["SharedSetting"];
        }
        if (A.load.Bool(ptr + 0 + 19)) {
          x["AutoConnect"]["UserEditable"] = A.load.Bool(ptr + 0 + 12);
        } else {
          delete x["AutoConnect"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 0 + 20)) {
          x["AutoConnect"]["DeviceEditable"] = A.load.Bool(ptr + 0 + 13);
        } else {
          delete x["AutoConnect"]["DeviceEditable"];
        }
      } else {
        delete x["AutoConnect"];
      }
      if (A.load.Bool(ptr + 24 + 221)) {
        x["APN"] = {};
        if (A.load.Bool(ptr + 24 + 0 + 28)) {
          x["APN"]["AccessPointName"] = {};
          x["APN"]["AccessPointName"]["Active"] = A.load.Ref(ptr + 24 + 0 + 0, undefined);
          x["APN"]["AccessPointName"]["Effective"] = A.load.Ref(ptr + 24 + 0 + 4, undefined);
          x["APN"]["AccessPointName"]["UserPolicy"] = A.load.Ref(ptr + 24 + 0 + 8, undefined);
          x["APN"]["AccessPointName"]["DevicePolicy"] = A.load.Ref(ptr + 24 + 0 + 12, undefined);
          x["APN"]["AccessPointName"]["UserSetting"] = A.load.Ref(ptr + 24 + 0 + 16, undefined);
          x["APN"]["AccessPointName"]["SharedSetting"] = A.load.Ref(ptr + 24 + 0 + 20, undefined);
          if (A.load.Bool(ptr + 24 + 0 + 26)) {
            x["APN"]["AccessPointName"]["UserEditable"] = A.load.Bool(ptr + 24 + 0 + 24);
          } else {
            delete x["APN"]["AccessPointName"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 24 + 0 + 27)) {
            x["APN"]["AccessPointName"]["DeviceEditable"] = A.load.Bool(ptr + 24 + 0 + 25);
          } else {
            delete x["APN"]["AccessPointName"]["DeviceEditable"];
          }
        } else {
          delete x["APN"]["AccessPointName"];
        }
        if (A.load.Bool(ptr + 24 + 32 + 28)) {
          x["APN"]["Authentication"] = {};
          x["APN"]["Authentication"]["Active"] = A.load.Ref(ptr + 24 + 32 + 0, undefined);
          x["APN"]["Authentication"]["Effective"] = A.load.Ref(ptr + 24 + 32 + 4, undefined);
          x["APN"]["Authentication"]["UserPolicy"] = A.load.Ref(ptr + 24 + 32 + 8, undefined);
          x["APN"]["Authentication"]["DevicePolicy"] = A.load.Ref(ptr + 24 + 32 + 12, undefined);
          x["APN"]["Authentication"]["UserSetting"] = A.load.Ref(ptr + 24 + 32 + 16, undefined);
          x["APN"]["Authentication"]["SharedSetting"] = A.load.Ref(ptr + 24 + 32 + 20, undefined);
          if (A.load.Bool(ptr + 24 + 32 + 26)) {
            x["APN"]["Authentication"]["UserEditable"] = A.load.Bool(ptr + 24 + 32 + 24);
          } else {
            delete x["APN"]["Authentication"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 24 + 32 + 27)) {
            x["APN"]["Authentication"]["DeviceEditable"] = A.load.Bool(ptr + 24 + 32 + 25);
          } else {
            delete x["APN"]["Authentication"]["DeviceEditable"];
          }
        } else {
          delete x["APN"]["Authentication"];
        }
        if (A.load.Bool(ptr + 24 + 64 + 28)) {
          x["APN"]["Language"] = {};
          x["APN"]["Language"]["Active"] = A.load.Ref(ptr + 24 + 64 + 0, undefined);
          x["APN"]["Language"]["Effective"] = A.load.Ref(ptr + 24 + 64 + 4, undefined);
          x["APN"]["Language"]["UserPolicy"] = A.load.Ref(ptr + 24 + 64 + 8, undefined);
          x["APN"]["Language"]["DevicePolicy"] = A.load.Ref(ptr + 24 + 64 + 12, undefined);
          x["APN"]["Language"]["UserSetting"] = A.load.Ref(ptr + 24 + 64 + 16, undefined);
          x["APN"]["Language"]["SharedSetting"] = A.load.Ref(ptr + 24 + 64 + 20, undefined);
          if (A.load.Bool(ptr + 24 + 64 + 26)) {
            x["APN"]["Language"]["UserEditable"] = A.load.Bool(ptr + 24 + 64 + 24);
          } else {
            delete x["APN"]["Language"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 24 + 64 + 27)) {
            x["APN"]["Language"]["DeviceEditable"] = A.load.Bool(ptr + 24 + 64 + 25);
          } else {
            delete x["APN"]["Language"]["DeviceEditable"];
          }
        } else {
          delete x["APN"]["Language"];
        }
        if (A.load.Bool(ptr + 24 + 96 + 28)) {
          x["APN"]["LocalizedName"] = {};
          x["APN"]["LocalizedName"]["Active"] = A.load.Ref(ptr + 24 + 96 + 0, undefined);
          x["APN"]["LocalizedName"]["Effective"] = A.load.Ref(ptr + 24 + 96 + 4, undefined);
          x["APN"]["LocalizedName"]["UserPolicy"] = A.load.Ref(ptr + 24 + 96 + 8, undefined);
          x["APN"]["LocalizedName"]["DevicePolicy"] = A.load.Ref(ptr + 24 + 96 + 12, undefined);
          x["APN"]["LocalizedName"]["UserSetting"] = A.load.Ref(ptr + 24 + 96 + 16, undefined);
          x["APN"]["LocalizedName"]["SharedSetting"] = A.load.Ref(ptr + 24 + 96 + 20, undefined);
          if (A.load.Bool(ptr + 24 + 96 + 26)) {
            x["APN"]["LocalizedName"]["UserEditable"] = A.load.Bool(ptr + 24 + 96 + 24);
          } else {
            delete x["APN"]["LocalizedName"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 24 + 96 + 27)) {
            x["APN"]["LocalizedName"]["DeviceEditable"] = A.load.Bool(ptr + 24 + 96 + 25);
          } else {
            delete x["APN"]["LocalizedName"]["DeviceEditable"];
          }
        } else {
          delete x["APN"]["LocalizedName"];
        }
        if (A.load.Bool(ptr + 24 + 128 + 28)) {
          x["APN"]["Name"] = {};
          x["APN"]["Name"]["Active"] = A.load.Ref(ptr + 24 + 128 + 0, undefined);
          x["APN"]["Name"]["Effective"] = A.load.Ref(ptr + 24 + 128 + 4, undefined);
          x["APN"]["Name"]["UserPolicy"] = A.load.Ref(ptr + 24 + 128 + 8, undefined);
          x["APN"]["Name"]["DevicePolicy"] = A.load.Ref(ptr + 24 + 128 + 12, undefined);
          x["APN"]["Name"]["UserSetting"] = A.load.Ref(ptr + 24 + 128 + 16, undefined);
          x["APN"]["Name"]["SharedSetting"] = A.load.Ref(ptr + 24 + 128 + 20, undefined);
          if (A.load.Bool(ptr + 24 + 128 + 26)) {
            x["APN"]["Name"]["UserEditable"] = A.load.Bool(ptr + 24 + 128 + 24);
          } else {
            delete x["APN"]["Name"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 24 + 128 + 27)) {
            x["APN"]["Name"]["DeviceEditable"] = A.load.Bool(ptr + 24 + 128 + 25);
          } else {
            delete x["APN"]["Name"]["DeviceEditable"];
          }
        } else {
          delete x["APN"]["Name"];
        }
        if (A.load.Bool(ptr + 24 + 160 + 28)) {
          x["APN"]["Password"] = {};
          x["APN"]["Password"]["Active"] = A.load.Ref(ptr + 24 + 160 + 0, undefined);
          x["APN"]["Password"]["Effective"] = A.load.Ref(ptr + 24 + 160 + 4, undefined);
          x["APN"]["Password"]["UserPolicy"] = A.load.Ref(ptr + 24 + 160 + 8, undefined);
          x["APN"]["Password"]["DevicePolicy"] = A.load.Ref(ptr + 24 + 160 + 12, undefined);
          x["APN"]["Password"]["UserSetting"] = A.load.Ref(ptr + 24 + 160 + 16, undefined);
          x["APN"]["Password"]["SharedSetting"] = A.load.Ref(ptr + 24 + 160 + 20, undefined);
          if (A.load.Bool(ptr + 24 + 160 + 26)) {
            x["APN"]["Password"]["UserEditable"] = A.load.Bool(ptr + 24 + 160 + 24);
          } else {
            delete x["APN"]["Password"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 24 + 160 + 27)) {
            x["APN"]["Password"]["DeviceEditable"] = A.load.Bool(ptr + 24 + 160 + 25);
          } else {
            delete x["APN"]["Password"]["DeviceEditable"];
          }
        } else {
          delete x["APN"]["Password"];
        }
        if (A.load.Bool(ptr + 24 + 192 + 28)) {
          x["APN"]["Username"] = {};
          x["APN"]["Username"]["Active"] = A.load.Ref(ptr + 24 + 192 + 0, undefined);
          x["APN"]["Username"]["Effective"] = A.load.Ref(ptr + 24 + 192 + 4, undefined);
          x["APN"]["Username"]["UserPolicy"] = A.load.Ref(ptr + 24 + 192 + 8, undefined);
          x["APN"]["Username"]["DevicePolicy"] = A.load.Ref(ptr + 24 + 192 + 12, undefined);
          x["APN"]["Username"]["UserSetting"] = A.load.Ref(ptr + 24 + 192 + 16, undefined);
          x["APN"]["Username"]["SharedSetting"] = A.load.Ref(ptr + 24 + 192 + 20, undefined);
          if (A.load.Bool(ptr + 24 + 192 + 26)) {
            x["APN"]["Username"]["UserEditable"] = A.load.Bool(ptr + 24 + 192 + 24);
          } else {
            delete x["APN"]["Username"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 24 + 192 + 27)) {
            x["APN"]["Username"]["DeviceEditable"] = A.load.Bool(ptr + 24 + 192 + 25);
          } else {
            delete x["APN"]["Username"]["DeviceEditable"];
          }
        } else {
          delete x["APN"]["Username"];
        }
      } else {
        delete x["APN"];
      }
      if (A.load.Bool(ptr + 248 + 28)) {
        x["APNList"] = {};
        x["APNList"]["Active"] = A.load.Ref(ptr + 248 + 0, undefined);
        x["APNList"]["Effective"] = A.load.Ref(ptr + 248 + 4, undefined);
        x["APNList"]["UserPolicy"] = A.load.Ref(ptr + 248 + 8, undefined);
        x["APNList"]["DevicePolicy"] = A.load.Ref(ptr + 248 + 12, undefined);
        x["APNList"]["UserSetting"] = A.load.Ref(ptr + 248 + 16, undefined);
        x["APNList"]["SharedSetting"] = A.load.Ref(ptr + 248 + 20, undefined);
        if (A.load.Bool(ptr + 248 + 26)) {
          x["APNList"]["UserEditable"] = A.load.Bool(ptr + 248 + 24);
        } else {
          delete x["APNList"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 248 + 27)) {
          x["APNList"]["DeviceEditable"] = A.load.Bool(ptr + 248 + 25);
        } else {
          delete x["APNList"]["DeviceEditable"];
        }
      } else {
        delete x["APNList"];
      }
      x["ActivationType"] = A.load.Ref(ptr + 280, undefined);
      x["ActivationState"] = A.load.Enum(ptr + 284, ["Activated", "Activating", "NotActivated", "PartiallyActivated"]);
      if (A.load.Bool(ptr + 453)) {
        x["AllowRoaming"] = A.load.Bool(ptr + 288);
      } else {
        delete x["AllowRoaming"];
      }
      x["ESN"] = A.load.Ref(ptr + 292, undefined);
      x["Family"] = A.load.Ref(ptr + 296, undefined);
      x["FirmwareRevision"] = A.load.Ref(ptr + 300, undefined);
      x["FoundNetworks"] = A.load.Ref(ptr + 304, undefined);
      x["HardwareRevision"] = A.load.Ref(ptr + 308, undefined);
      if (A.load.Bool(ptr + 312 + 12)) {
        x["HomeProvider"] = {};
        x["HomeProvider"]["Name"] = A.load.Ref(ptr + 312 + 0, undefined);
        x["HomeProvider"]["Code"] = A.load.Ref(ptr + 312 + 4, undefined);
        x["HomeProvider"]["Country"] = A.load.Ref(ptr + 312 + 8, undefined);
      } else {
        delete x["HomeProvider"];
      }
      x["ICCID"] = A.load.Ref(ptr + 328, undefined);
      x["IMEI"] = A.load.Ref(ptr + 332, undefined);
      if (A.load.Bool(ptr + 336 + 28)) {
        x["LastGoodAPN"] = {};
        x["LastGoodAPN"]["AccessPointName"] = A.load.Ref(ptr + 336 + 0, undefined);
        x["LastGoodAPN"]["Authentication"] = A.load.Ref(ptr + 336 + 4, undefined);
        x["LastGoodAPN"]["Language"] = A.load.Ref(ptr + 336 + 8, undefined);
        x["LastGoodAPN"]["LocalizedName"] = A.load.Ref(ptr + 336 + 12, undefined);
        x["LastGoodAPN"]["Name"] = A.load.Ref(ptr + 336 + 16, undefined);
        x["LastGoodAPN"]["Password"] = A.load.Ref(ptr + 336 + 20, undefined);
        x["LastGoodAPN"]["Username"] = A.load.Ref(ptr + 336 + 24, undefined);
      } else {
        delete x["LastGoodAPN"];
      }
      x["Manufacturer"] = A.load.Ref(ptr + 368, undefined);
      x["MDN"] = A.load.Ref(ptr + 372, undefined);
      x["MEID"] = A.load.Ref(ptr + 376, undefined);
      x["MIN"] = A.load.Ref(ptr + 380, undefined);
      x["ModelID"] = A.load.Ref(ptr + 384, undefined);
      x["NetworkTechnology"] = A.load.Ref(ptr + 388, undefined);
      if (A.load.Bool(ptr + 392 + 12)) {
        x["PaymentPortal"] = {};
        x["PaymentPortal"]["Method"] = A.load.Ref(ptr + 392 + 0, undefined);
        x["PaymentPortal"]["PostData"] = A.load.Ref(ptr + 392 + 4, undefined);
        x["PaymentPortal"]["Url"] = A.load.Ref(ptr + 392 + 8, undefined);
      } else {
        delete x["PaymentPortal"];
      }
      x["RoamingState"] = A.load.Ref(ptr + 408, undefined);
      if (A.load.Bool(ptr + 454)) {
        x["Scanning"] = A.load.Bool(ptr + 412);
      } else {
        delete x["Scanning"];
      }
      if (A.load.Bool(ptr + 416 + 12)) {
        x["ServingOperator"] = {};
        x["ServingOperator"]["Name"] = A.load.Ref(ptr + 416 + 0, undefined);
        x["ServingOperator"]["Code"] = A.load.Ref(ptr + 416 + 4, undefined);
        x["ServingOperator"]["Country"] = A.load.Ref(ptr + 416 + 8, undefined);
      } else {
        delete x["ServingOperator"];
      }
      if (A.load.Bool(ptr + 432 + 14)) {
        x["SIMLockStatus"] = {};
        x["SIMLockStatus"]["LockType"] = A.load.Ref(ptr + 432 + 0, undefined);
        if (A.load.Bool(ptr + 432 + 12)) {
          x["SIMLockStatus"]["LockEnabled"] = A.load.Bool(ptr + 432 + 4);
        } else {
          delete x["SIMLockStatus"]["LockEnabled"];
        }
        if (A.load.Bool(ptr + 432 + 13)) {
          x["SIMLockStatus"]["RetriesLeft"] = A.load.Int32(ptr + 432 + 8);
        } else {
          delete x["SIMLockStatus"]["RetriesLeft"];
        }
      } else {
        delete x["SIMLockStatus"];
      }
      if (A.load.Bool(ptr + 455)) {
        x["SIMPresent"] = A.load.Bool(ptr + 447);
      } else {
        delete x["SIMPresent"];
      }
      if (A.load.Bool(ptr + 456)) {
        x["SignalStrength"] = A.load.Int32(ptr + 448);
      } else {
        delete x["SignalStrength"];
      }
      if (A.load.Bool(ptr + 457)) {
        x["SupportNetworkScan"] = A.load.Bool(ptr + 452);
      } else {
        delete x["SupportNetworkScan"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_ManagedDOMStringList": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 28, false);
        A.store.Ref(ptr + 0, undefined);
        A.store.Ref(ptr + 4, undefined);
        A.store.Ref(ptr + 8, undefined);
        A.store.Ref(ptr + 12, undefined);
        A.store.Ref(ptr + 16, undefined);
        A.store.Ref(ptr + 20, undefined);
        A.store.Bool(ptr + 26, false);
        A.store.Bool(ptr + 24, false);
        A.store.Bool(ptr + 27, false);
        A.store.Bool(ptr + 25, false);
      } else {
        A.store.Bool(ptr + 28, true);
        A.store.Ref(ptr + 0, x["Active"]);
        A.store.Ref(ptr + 4, x["Effective"]);
        A.store.Ref(ptr + 8, x["UserPolicy"]);
        A.store.Ref(ptr + 12, x["DevicePolicy"]);
        A.store.Ref(ptr + 16, x["UserSetting"]);
        A.store.Ref(ptr + 20, x["SharedSetting"]);
        A.store.Bool(ptr + 26, "UserEditable" in x ? true : false);
        A.store.Bool(ptr + 24, x["UserEditable"] ? true : false);
        A.store.Bool(ptr + 27, "DeviceEditable" in x ? true : false);
        A.store.Bool(ptr + 25, x["DeviceEditable"] ? true : false);
      }
    },
    "load_ManagedDOMStringList": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      x["Active"] = A.load.Ref(ptr + 0, undefined);
      x["Effective"] = A.load.Ref(ptr + 4, undefined);
      x["UserPolicy"] = A.load.Ref(ptr + 8, undefined);
      x["DevicePolicy"] = A.load.Ref(ptr + 12, undefined);
      x["UserSetting"] = A.load.Ref(ptr + 16, undefined);
      x["SharedSetting"] = A.load.Ref(ptr + 20, undefined);
      if (A.load.Bool(ptr + 26)) {
        x["UserEditable"] = A.load.Bool(ptr + 24);
      } else {
        delete x["UserEditable"];
      }
      if (A.load.Bool(ptr + 27)) {
        x["DeviceEditable"] = A.load.Bool(ptr + 25);
      } else {
        delete x["DeviceEditable"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_ManagedIssuerSubjectPattern": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 125, false);

        A.store.Bool(ptr + 0 + 28, false);
        A.store.Ref(ptr + 0 + 0, undefined);
        A.store.Ref(ptr + 0 + 4, undefined);
        A.store.Ref(ptr + 0 + 8, undefined);
        A.store.Ref(ptr + 0 + 12, undefined);
        A.store.Ref(ptr + 0 + 16, undefined);
        A.store.Ref(ptr + 0 + 20, undefined);
        A.store.Bool(ptr + 0 + 26, false);
        A.store.Bool(ptr + 0 + 24, false);
        A.store.Bool(ptr + 0 + 27, false);
        A.store.Bool(ptr + 0 + 25, false);

        A.store.Bool(ptr + 32 + 28, false);
        A.store.Ref(ptr + 32 + 0, undefined);
        A.store.Ref(ptr + 32 + 4, undefined);
        A.store.Ref(ptr + 32 + 8, undefined);
        A.store.Ref(ptr + 32 + 12, undefined);
        A.store.Ref(ptr + 32 + 16, undefined);
        A.store.Ref(ptr + 32 + 20, undefined);
        A.store.Bool(ptr + 32 + 26, false);
        A.store.Bool(ptr + 32 + 24, false);
        A.store.Bool(ptr + 32 + 27, false);
        A.store.Bool(ptr + 32 + 25, false);

        A.store.Bool(ptr + 64 + 28, false);
        A.store.Ref(ptr + 64 + 0, undefined);
        A.store.Ref(ptr + 64 + 4, undefined);
        A.store.Ref(ptr + 64 + 8, undefined);
        A.store.Ref(ptr + 64 + 12, undefined);
        A.store.Ref(ptr + 64 + 16, undefined);
        A.store.Ref(ptr + 64 + 20, undefined);
        A.store.Bool(ptr + 64 + 26, false);
        A.store.Bool(ptr + 64 + 24, false);
        A.store.Bool(ptr + 64 + 27, false);
        A.store.Bool(ptr + 64 + 25, false);

        A.store.Bool(ptr + 96 + 28, false);
        A.store.Ref(ptr + 96 + 0, undefined);
        A.store.Ref(ptr + 96 + 4, undefined);
        A.store.Ref(ptr + 96 + 8, undefined);
        A.store.Ref(ptr + 96 + 12, undefined);
        A.store.Ref(ptr + 96 + 16, undefined);
        A.store.Ref(ptr + 96 + 20, undefined);
        A.store.Bool(ptr + 96 + 26, false);
        A.store.Bool(ptr + 96 + 24, false);
        A.store.Bool(ptr + 96 + 27, false);
        A.store.Bool(ptr + 96 + 25, false);
      } else {
        A.store.Bool(ptr + 125, true);

        if (typeof x["CommonName"] === "undefined") {
          A.store.Bool(ptr + 0 + 28, false);
          A.store.Ref(ptr + 0 + 0, undefined);
          A.store.Ref(ptr + 0 + 4, undefined);
          A.store.Ref(ptr + 0 + 8, undefined);
          A.store.Ref(ptr + 0 + 12, undefined);
          A.store.Ref(ptr + 0 + 16, undefined);
          A.store.Ref(ptr + 0 + 20, undefined);
          A.store.Bool(ptr + 0 + 26, false);
          A.store.Bool(ptr + 0 + 24, false);
          A.store.Bool(ptr + 0 + 27, false);
          A.store.Bool(ptr + 0 + 25, false);
        } else {
          A.store.Bool(ptr + 0 + 28, true);
          A.store.Ref(ptr + 0 + 0, x["CommonName"]["Active"]);
          A.store.Ref(ptr + 0 + 4, x["CommonName"]["Effective"]);
          A.store.Ref(ptr + 0 + 8, x["CommonName"]["UserPolicy"]);
          A.store.Ref(ptr + 0 + 12, x["CommonName"]["DevicePolicy"]);
          A.store.Ref(ptr + 0 + 16, x["CommonName"]["UserSetting"]);
          A.store.Ref(ptr + 0 + 20, x["CommonName"]["SharedSetting"]);
          A.store.Bool(ptr + 0 + 26, "UserEditable" in x["CommonName"] ? true : false);
          A.store.Bool(ptr + 0 + 24, x["CommonName"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 0 + 27, "DeviceEditable" in x["CommonName"] ? true : false);
          A.store.Bool(ptr + 0 + 25, x["CommonName"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["Locality"] === "undefined") {
          A.store.Bool(ptr + 32 + 28, false);
          A.store.Ref(ptr + 32 + 0, undefined);
          A.store.Ref(ptr + 32 + 4, undefined);
          A.store.Ref(ptr + 32 + 8, undefined);
          A.store.Ref(ptr + 32 + 12, undefined);
          A.store.Ref(ptr + 32 + 16, undefined);
          A.store.Ref(ptr + 32 + 20, undefined);
          A.store.Bool(ptr + 32 + 26, false);
          A.store.Bool(ptr + 32 + 24, false);
          A.store.Bool(ptr + 32 + 27, false);
          A.store.Bool(ptr + 32 + 25, false);
        } else {
          A.store.Bool(ptr + 32 + 28, true);
          A.store.Ref(ptr + 32 + 0, x["Locality"]["Active"]);
          A.store.Ref(ptr + 32 + 4, x["Locality"]["Effective"]);
          A.store.Ref(ptr + 32 + 8, x["Locality"]["UserPolicy"]);
          A.store.Ref(ptr + 32 + 12, x["Locality"]["DevicePolicy"]);
          A.store.Ref(ptr + 32 + 16, x["Locality"]["UserSetting"]);
          A.store.Ref(ptr + 32 + 20, x["Locality"]["SharedSetting"]);
          A.store.Bool(ptr + 32 + 26, "UserEditable" in x["Locality"] ? true : false);
          A.store.Bool(ptr + 32 + 24, x["Locality"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 32 + 27, "DeviceEditable" in x["Locality"] ? true : false);
          A.store.Bool(ptr + 32 + 25, x["Locality"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["Organization"] === "undefined") {
          A.store.Bool(ptr + 64 + 28, false);
          A.store.Ref(ptr + 64 + 0, undefined);
          A.store.Ref(ptr + 64 + 4, undefined);
          A.store.Ref(ptr + 64 + 8, undefined);
          A.store.Ref(ptr + 64 + 12, undefined);
          A.store.Ref(ptr + 64 + 16, undefined);
          A.store.Ref(ptr + 64 + 20, undefined);
          A.store.Bool(ptr + 64 + 26, false);
          A.store.Bool(ptr + 64 + 24, false);
          A.store.Bool(ptr + 64 + 27, false);
          A.store.Bool(ptr + 64 + 25, false);
        } else {
          A.store.Bool(ptr + 64 + 28, true);
          A.store.Ref(ptr + 64 + 0, x["Organization"]["Active"]);
          A.store.Ref(ptr + 64 + 4, x["Organization"]["Effective"]);
          A.store.Ref(ptr + 64 + 8, x["Organization"]["UserPolicy"]);
          A.store.Ref(ptr + 64 + 12, x["Organization"]["DevicePolicy"]);
          A.store.Ref(ptr + 64 + 16, x["Organization"]["UserSetting"]);
          A.store.Ref(ptr + 64 + 20, x["Organization"]["SharedSetting"]);
          A.store.Bool(ptr + 64 + 26, "UserEditable" in x["Organization"] ? true : false);
          A.store.Bool(ptr + 64 + 24, x["Organization"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 64 + 27, "DeviceEditable" in x["Organization"] ? true : false);
          A.store.Bool(ptr + 64 + 25, x["Organization"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["OrganizationalUnit"] === "undefined") {
          A.store.Bool(ptr + 96 + 28, false);
          A.store.Ref(ptr + 96 + 0, undefined);
          A.store.Ref(ptr + 96 + 4, undefined);
          A.store.Ref(ptr + 96 + 8, undefined);
          A.store.Ref(ptr + 96 + 12, undefined);
          A.store.Ref(ptr + 96 + 16, undefined);
          A.store.Ref(ptr + 96 + 20, undefined);
          A.store.Bool(ptr + 96 + 26, false);
          A.store.Bool(ptr + 96 + 24, false);
          A.store.Bool(ptr + 96 + 27, false);
          A.store.Bool(ptr + 96 + 25, false);
        } else {
          A.store.Bool(ptr + 96 + 28, true);
          A.store.Ref(ptr + 96 + 0, x["OrganizationalUnit"]["Active"]);
          A.store.Ref(ptr + 96 + 4, x["OrganizationalUnit"]["Effective"]);
          A.store.Ref(ptr + 96 + 8, x["OrganizationalUnit"]["UserPolicy"]);
          A.store.Ref(ptr + 96 + 12, x["OrganizationalUnit"]["DevicePolicy"]);
          A.store.Ref(ptr + 96 + 16, x["OrganizationalUnit"]["UserSetting"]);
          A.store.Ref(ptr + 96 + 20, x["OrganizationalUnit"]["SharedSetting"]);
          A.store.Bool(ptr + 96 + 26, "UserEditable" in x["OrganizationalUnit"] ? true : false);
          A.store.Bool(ptr + 96 + 24, x["OrganizationalUnit"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 96 + 27, "DeviceEditable" in x["OrganizationalUnit"] ? true : false);
          A.store.Bool(ptr + 96 + 25, x["OrganizationalUnit"]["DeviceEditable"] ? true : false);
        }
      }
    },
    "load_ManagedIssuerSubjectPattern": (
      ptr: Pointer,
      create: heap.Ref<boolean>,
      ref: heap.Ref<any>
    ): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      if (A.load.Bool(ptr + 0 + 28)) {
        x["CommonName"] = {};
        x["CommonName"]["Active"] = A.load.Ref(ptr + 0 + 0, undefined);
        x["CommonName"]["Effective"] = A.load.Ref(ptr + 0 + 4, undefined);
        x["CommonName"]["UserPolicy"] = A.load.Ref(ptr + 0 + 8, undefined);
        x["CommonName"]["DevicePolicy"] = A.load.Ref(ptr + 0 + 12, undefined);
        x["CommonName"]["UserSetting"] = A.load.Ref(ptr + 0 + 16, undefined);
        x["CommonName"]["SharedSetting"] = A.load.Ref(ptr + 0 + 20, undefined);
        if (A.load.Bool(ptr + 0 + 26)) {
          x["CommonName"]["UserEditable"] = A.load.Bool(ptr + 0 + 24);
        } else {
          delete x["CommonName"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 0 + 27)) {
          x["CommonName"]["DeviceEditable"] = A.load.Bool(ptr + 0 + 25);
        } else {
          delete x["CommonName"]["DeviceEditable"];
        }
      } else {
        delete x["CommonName"];
      }
      if (A.load.Bool(ptr + 32 + 28)) {
        x["Locality"] = {};
        x["Locality"]["Active"] = A.load.Ref(ptr + 32 + 0, undefined);
        x["Locality"]["Effective"] = A.load.Ref(ptr + 32 + 4, undefined);
        x["Locality"]["UserPolicy"] = A.load.Ref(ptr + 32 + 8, undefined);
        x["Locality"]["DevicePolicy"] = A.load.Ref(ptr + 32 + 12, undefined);
        x["Locality"]["UserSetting"] = A.load.Ref(ptr + 32 + 16, undefined);
        x["Locality"]["SharedSetting"] = A.load.Ref(ptr + 32 + 20, undefined);
        if (A.load.Bool(ptr + 32 + 26)) {
          x["Locality"]["UserEditable"] = A.load.Bool(ptr + 32 + 24);
        } else {
          delete x["Locality"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 32 + 27)) {
          x["Locality"]["DeviceEditable"] = A.load.Bool(ptr + 32 + 25);
        } else {
          delete x["Locality"]["DeviceEditable"];
        }
      } else {
        delete x["Locality"];
      }
      if (A.load.Bool(ptr + 64 + 28)) {
        x["Organization"] = {};
        x["Organization"]["Active"] = A.load.Ref(ptr + 64 + 0, undefined);
        x["Organization"]["Effective"] = A.load.Ref(ptr + 64 + 4, undefined);
        x["Organization"]["UserPolicy"] = A.load.Ref(ptr + 64 + 8, undefined);
        x["Organization"]["DevicePolicy"] = A.load.Ref(ptr + 64 + 12, undefined);
        x["Organization"]["UserSetting"] = A.load.Ref(ptr + 64 + 16, undefined);
        x["Organization"]["SharedSetting"] = A.load.Ref(ptr + 64 + 20, undefined);
        if (A.load.Bool(ptr + 64 + 26)) {
          x["Organization"]["UserEditable"] = A.load.Bool(ptr + 64 + 24);
        } else {
          delete x["Organization"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 64 + 27)) {
          x["Organization"]["DeviceEditable"] = A.load.Bool(ptr + 64 + 25);
        } else {
          delete x["Organization"]["DeviceEditable"];
        }
      } else {
        delete x["Organization"];
      }
      if (A.load.Bool(ptr + 96 + 28)) {
        x["OrganizationalUnit"] = {};
        x["OrganizationalUnit"]["Active"] = A.load.Ref(ptr + 96 + 0, undefined);
        x["OrganizationalUnit"]["Effective"] = A.load.Ref(ptr + 96 + 4, undefined);
        x["OrganizationalUnit"]["UserPolicy"] = A.load.Ref(ptr + 96 + 8, undefined);
        x["OrganizationalUnit"]["DevicePolicy"] = A.load.Ref(ptr + 96 + 12, undefined);
        x["OrganizationalUnit"]["UserSetting"] = A.load.Ref(ptr + 96 + 16, undefined);
        x["OrganizationalUnit"]["SharedSetting"] = A.load.Ref(ptr + 96 + 20, undefined);
        if (A.load.Bool(ptr + 96 + 26)) {
          x["OrganizationalUnit"]["UserEditable"] = A.load.Bool(ptr + 96 + 24);
        } else {
          delete x["OrganizationalUnit"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 96 + 27)) {
          x["OrganizationalUnit"]["DeviceEditable"] = A.load.Bool(ptr + 96 + 25);
        } else {
          delete x["OrganizationalUnit"]["DeviceEditable"];
        }
      } else {
        delete x["OrganizationalUnit"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_ManagedCertificatePattern": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 318, false);

        A.store.Bool(ptr + 0 + 28, false);
        A.store.Ref(ptr + 0 + 0, undefined);
        A.store.Ref(ptr + 0 + 4, undefined);
        A.store.Ref(ptr + 0 + 8, undefined);
        A.store.Ref(ptr + 0 + 12, undefined);
        A.store.Ref(ptr + 0 + 16, undefined);
        A.store.Ref(ptr + 0 + 20, undefined);
        A.store.Bool(ptr + 0 + 26, false);
        A.store.Bool(ptr + 0 + 24, false);
        A.store.Bool(ptr + 0 + 27, false);
        A.store.Bool(ptr + 0 + 25, false);

        A.store.Bool(ptr + 32 + 125, false);

        A.store.Bool(ptr + 32 + 0 + 28, false);
        A.store.Ref(ptr + 32 + 0 + 0, undefined);
        A.store.Ref(ptr + 32 + 0 + 4, undefined);
        A.store.Ref(ptr + 32 + 0 + 8, undefined);
        A.store.Ref(ptr + 32 + 0 + 12, undefined);
        A.store.Ref(ptr + 32 + 0 + 16, undefined);
        A.store.Ref(ptr + 32 + 0 + 20, undefined);
        A.store.Bool(ptr + 32 + 0 + 26, false);
        A.store.Bool(ptr + 32 + 0 + 24, false);
        A.store.Bool(ptr + 32 + 0 + 27, false);
        A.store.Bool(ptr + 32 + 0 + 25, false);

        A.store.Bool(ptr + 32 + 32 + 28, false);
        A.store.Ref(ptr + 32 + 32 + 0, undefined);
        A.store.Ref(ptr + 32 + 32 + 4, undefined);
        A.store.Ref(ptr + 32 + 32 + 8, undefined);
        A.store.Ref(ptr + 32 + 32 + 12, undefined);
        A.store.Ref(ptr + 32 + 32 + 16, undefined);
        A.store.Ref(ptr + 32 + 32 + 20, undefined);
        A.store.Bool(ptr + 32 + 32 + 26, false);
        A.store.Bool(ptr + 32 + 32 + 24, false);
        A.store.Bool(ptr + 32 + 32 + 27, false);
        A.store.Bool(ptr + 32 + 32 + 25, false);

        A.store.Bool(ptr + 32 + 64 + 28, false);
        A.store.Ref(ptr + 32 + 64 + 0, undefined);
        A.store.Ref(ptr + 32 + 64 + 4, undefined);
        A.store.Ref(ptr + 32 + 64 + 8, undefined);
        A.store.Ref(ptr + 32 + 64 + 12, undefined);
        A.store.Ref(ptr + 32 + 64 + 16, undefined);
        A.store.Ref(ptr + 32 + 64 + 20, undefined);
        A.store.Bool(ptr + 32 + 64 + 26, false);
        A.store.Bool(ptr + 32 + 64 + 24, false);
        A.store.Bool(ptr + 32 + 64 + 27, false);
        A.store.Bool(ptr + 32 + 64 + 25, false);

        A.store.Bool(ptr + 32 + 96 + 28, false);
        A.store.Ref(ptr + 32 + 96 + 0, undefined);
        A.store.Ref(ptr + 32 + 96 + 4, undefined);
        A.store.Ref(ptr + 32 + 96 + 8, undefined);
        A.store.Ref(ptr + 32 + 96 + 12, undefined);
        A.store.Ref(ptr + 32 + 96 + 16, undefined);
        A.store.Ref(ptr + 32 + 96 + 20, undefined);
        A.store.Bool(ptr + 32 + 96 + 26, false);
        A.store.Bool(ptr + 32 + 96 + 24, false);
        A.store.Bool(ptr + 32 + 96 + 27, false);
        A.store.Bool(ptr + 32 + 96 + 25, false);

        A.store.Bool(ptr + 160 + 28, false);
        A.store.Ref(ptr + 160 + 0, undefined);
        A.store.Ref(ptr + 160 + 4, undefined);
        A.store.Ref(ptr + 160 + 8, undefined);
        A.store.Ref(ptr + 160 + 12, undefined);
        A.store.Ref(ptr + 160 + 16, undefined);
        A.store.Ref(ptr + 160 + 20, undefined);
        A.store.Bool(ptr + 160 + 26, false);
        A.store.Bool(ptr + 160 + 24, false);
        A.store.Bool(ptr + 160 + 27, false);
        A.store.Bool(ptr + 160 + 25, false);

        A.store.Bool(ptr + 192 + 125, false);

        A.store.Bool(ptr + 192 + 0 + 28, false);
        A.store.Ref(ptr + 192 + 0 + 0, undefined);
        A.store.Ref(ptr + 192 + 0 + 4, undefined);
        A.store.Ref(ptr + 192 + 0 + 8, undefined);
        A.store.Ref(ptr + 192 + 0 + 12, undefined);
        A.store.Ref(ptr + 192 + 0 + 16, undefined);
        A.store.Ref(ptr + 192 + 0 + 20, undefined);
        A.store.Bool(ptr + 192 + 0 + 26, false);
        A.store.Bool(ptr + 192 + 0 + 24, false);
        A.store.Bool(ptr + 192 + 0 + 27, false);
        A.store.Bool(ptr + 192 + 0 + 25, false);

        A.store.Bool(ptr + 192 + 32 + 28, false);
        A.store.Ref(ptr + 192 + 32 + 0, undefined);
        A.store.Ref(ptr + 192 + 32 + 4, undefined);
        A.store.Ref(ptr + 192 + 32 + 8, undefined);
        A.store.Ref(ptr + 192 + 32 + 12, undefined);
        A.store.Ref(ptr + 192 + 32 + 16, undefined);
        A.store.Ref(ptr + 192 + 32 + 20, undefined);
        A.store.Bool(ptr + 192 + 32 + 26, false);
        A.store.Bool(ptr + 192 + 32 + 24, false);
        A.store.Bool(ptr + 192 + 32 + 27, false);
        A.store.Bool(ptr + 192 + 32 + 25, false);

        A.store.Bool(ptr + 192 + 64 + 28, false);
        A.store.Ref(ptr + 192 + 64 + 0, undefined);
        A.store.Ref(ptr + 192 + 64 + 4, undefined);
        A.store.Ref(ptr + 192 + 64 + 8, undefined);
        A.store.Ref(ptr + 192 + 64 + 12, undefined);
        A.store.Ref(ptr + 192 + 64 + 16, undefined);
        A.store.Ref(ptr + 192 + 64 + 20, undefined);
        A.store.Bool(ptr + 192 + 64 + 26, false);
        A.store.Bool(ptr + 192 + 64 + 24, false);
        A.store.Bool(ptr + 192 + 64 + 27, false);
        A.store.Bool(ptr + 192 + 64 + 25, false);

        A.store.Bool(ptr + 192 + 96 + 28, false);
        A.store.Ref(ptr + 192 + 96 + 0, undefined);
        A.store.Ref(ptr + 192 + 96 + 4, undefined);
        A.store.Ref(ptr + 192 + 96 + 8, undefined);
        A.store.Ref(ptr + 192 + 96 + 12, undefined);
        A.store.Ref(ptr + 192 + 96 + 16, undefined);
        A.store.Ref(ptr + 192 + 96 + 20, undefined);
        A.store.Bool(ptr + 192 + 96 + 26, false);
        A.store.Bool(ptr + 192 + 96 + 24, false);
        A.store.Bool(ptr + 192 + 96 + 27, false);
        A.store.Bool(ptr + 192 + 96 + 25, false);
      } else {
        A.store.Bool(ptr + 318, true);

        if (typeof x["EnrollmentURI"] === "undefined") {
          A.store.Bool(ptr + 0 + 28, false);
          A.store.Ref(ptr + 0 + 0, undefined);
          A.store.Ref(ptr + 0 + 4, undefined);
          A.store.Ref(ptr + 0 + 8, undefined);
          A.store.Ref(ptr + 0 + 12, undefined);
          A.store.Ref(ptr + 0 + 16, undefined);
          A.store.Ref(ptr + 0 + 20, undefined);
          A.store.Bool(ptr + 0 + 26, false);
          A.store.Bool(ptr + 0 + 24, false);
          A.store.Bool(ptr + 0 + 27, false);
          A.store.Bool(ptr + 0 + 25, false);
        } else {
          A.store.Bool(ptr + 0 + 28, true);
          A.store.Ref(ptr + 0 + 0, x["EnrollmentURI"]["Active"]);
          A.store.Ref(ptr + 0 + 4, x["EnrollmentURI"]["Effective"]);
          A.store.Ref(ptr + 0 + 8, x["EnrollmentURI"]["UserPolicy"]);
          A.store.Ref(ptr + 0 + 12, x["EnrollmentURI"]["DevicePolicy"]);
          A.store.Ref(ptr + 0 + 16, x["EnrollmentURI"]["UserSetting"]);
          A.store.Ref(ptr + 0 + 20, x["EnrollmentURI"]["SharedSetting"]);
          A.store.Bool(ptr + 0 + 26, "UserEditable" in x["EnrollmentURI"] ? true : false);
          A.store.Bool(ptr + 0 + 24, x["EnrollmentURI"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 0 + 27, "DeviceEditable" in x["EnrollmentURI"] ? true : false);
          A.store.Bool(ptr + 0 + 25, x["EnrollmentURI"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["Issuer"] === "undefined") {
          A.store.Bool(ptr + 32 + 125, false);

          A.store.Bool(ptr + 32 + 0 + 28, false);
          A.store.Ref(ptr + 32 + 0 + 0, undefined);
          A.store.Ref(ptr + 32 + 0 + 4, undefined);
          A.store.Ref(ptr + 32 + 0 + 8, undefined);
          A.store.Ref(ptr + 32 + 0 + 12, undefined);
          A.store.Ref(ptr + 32 + 0 + 16, undefined);
          A.store.Ref(ptr + 32 + 0 + 20, undefined);
          A.store.Bool(ptr + 32 + 0 + 26, false);
          A.store.Bool(ptr + 32 + 0 + 24, false);
          A.store.Bool(ptr + 32 + 0 + 27, false);
          A.store.Bool(ptr + 32 + 0 + 25, false);

          A.store.Bool(ptr + 32 + 32 + 28, false);
          A.store.Ref(ptr + 32 + 32 + 0, undefined);
          A.store.Ref(ptr + 32 + 32 + 4, undefined);
          A.store.Ref(ptr + 32 + 32 + 8, undefined);
          A.store.Ref(ptr + 32 + 32 + 12, undefined);
          A.store.Ref(ptr + 32 + 32 + 16, undefined);
          A.store.Ref(ptr + 32 + 32 + 20, undefined);
          A.store.Bool(ptr + 32 + 32 + 26, false);
          A.store.Bool(ptr + 32 + 32 + 24, false);
          A.store.Bool(ptr + 32 + 32 + 27, false);
          A.store.Bool(ptr + 32 + 32 + 25, false);

          A.store.Bool(ptr + 32 + 64 + 28, false);
          A.store.Ref(ptr + 32 + 64 + 0, undefined);
          A.store.Ref(ptr + 32 + 64 + 4, undefined);
          A.store.Ref(ptr + 32 + 64 + 8, undefined);
          A.store.Ref(ptr + 32 + 64 + 12, undefined);
          A.store.Ref(ptr + 32 + 64 + 16, undefined);
          A.store.Ref(ptr + 32 + 64 + 20, undefined);
          A.store.Bool(ptr + 32 + 64 + 26, false);
          A.store.Bool(ptr + 32 + 64 + 24, false);
          A.store.Bool(ptr + 32 + 64 + 27, false);
          A.store.Bool(ptr + 32 + 64 + 25, false);

          A.store.Bool(ptr + 32 + 96 + 28, false);
          A.store.Ref(ptr + 32 + 96 + 0, undefined);
          A.store.Ref(ptr + 32 + 96 + 4, undefined);
          A.store.Ref(ptr + 32 + 96 + 8, undefined);
          A.store.Ref(ptr + 32 + 96 + 12, undefined);
          A.store.Ref(ptr + 32 + 96 + 16, undefined);
          A.store.Ref(ptr + 32 + 96 + 20, undefined);
          A.store.Bool(ptr + 32 + 96 + 26, false);
          A.store.Bool(ptr + 32 + 96 + 24, false);
          A.store.Bool(ptr + 32 + 96 + 27, false);
          A.store.Bool(ptr + 32 + 96 + 25, false);
        } else {
          A.store.Bool(ptr + 32 + 125, true);

          if (typeof x["Issuer"]["CommonName"] === "undefined") {
            A.store.Bool(ptr + 32 + 0 + 28, false);
            A.store.Ref(ptr + 32 + 0 + 0, undefined);
            A.store.Ref(ptr + 32 + 0 + 4, undefined);
            A.store.Ref(ptr + 32 + 0 + 8, undefined);
            A.store.Ref(ptr + 32 + 0 + 12, undefined);
            A.store.Ref(ptr + 32 + 0 + 16, undefined);
            A.store.Ref(ptr + 32 + 0 + 20, undefined);
            A.store.Bool(ptr + 32 + 0 + 26, false);
            A.store.Bool(ptr + 32 + 0 + 24, false);
            A.store.Bool(ptr + 32 + 0 + 27, false);
            A.store.Bool(ptr + 32 + 0 + 25, false);
          } else {
            A.store.Bool(ptr + 32 + 0 + 28, true);
            A.store.Ref(ptr + 32 + 0 + 0, x["Issuer"]["CommonName"]["Active"]);
            A.store.Ref(ptr + 32 + 0 + 4, x["Issuer"]["CommonName"]["Effective"]);
            A.store.Ref(ptr + 32 + 0 + 8, x["Issuer"]["CommonName"]["UserPolicy"]);
            A.store.Ref(ptr + 32 + 0 + 12, x["Issuer"]["CommonName"]["DevicePolicy"]);
            A.store.Ref(ptr + 32 + 0 + 16, x["Issuer"]["CommonName"]["UserSetting"]);
            A.store.Ref(ptr + 32 + 0 + 20, x["Issuer"]["CommonName"]["SharedSetting"]);
            A.store.Bool(ptr + 32 + 0 + 26, "UserEditable" in x["Issuer"]["CommonName"] ? true : false);
            A.store.Bool(ptr + 32 + 0 + 24, x["Issuer"]["CommonName"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 32 + 0 + 27, "DeviceEditable" in x["Issuer"]["CommonName"] ? true : false);
            A.store.Bool(ptr + 32 + 0 + 25, x["Issuer"]["CommonName"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["Issuer"]["Locality"] === "undefined") {
            A.store.Bool(ptr + 32 + 32 + 28, false);
            A.store.Ref(ptr + 32 + 32 + 0, undefined);
            A.store.Ref(ptr + 32 + 32 + 4, undefined);
            A.store.Ref(ptr + 32 + 32 + 8, undefined);
            A.store.Ref(ptr + 32 + 32 + 12, undefined);
            A.store.Ref(ptr + 32 + 32 + 16, undefined);
            A.store.Ref(ptr + 32 + 32 + 20, undefined);
            A.store.Bool(ptr + 32 + 32 + 26, false);
            A.store.Bool(ptr + 32 + 32 + 24, false);
            A.store.Bool(ptr + 32 + 32 + 27, false);
            A.store.Bool(ptr + 32 + 32 + 25, false);
          } else {
            A.store.Bool(ptr + 32 + 32 + 28, true);
            A.store.Ref(ptr + 32 + 32 + 0, x["Issuer"]["Locality"]["Active"]);
            A.store.Ref(ptr + 32 + 32 + 4, x["Issuer"]["Locality"]["Effective"]);
            A.store.Ref(ptr + 32 + 32 + 8, x["Issuer"]["Locality"]["UserPolicy"]);
            A.store.Ref(ptr + 32 + 32 + 12, x["Issuer"]["Locality"]["DevicePolicy"]);
            A.store.Ref(ptr + 32 + 32 + 16, x["Issuer"]["Locality"]["UserSetting"]);
            A.store.Ref(ptr + 32 + 32 + 20, x["Issuer"]["Locality"]["SharedSetting"]);
            A.store.Bool(ptr + 32 + 32 + 26, "UserEditable" in x["Issuer"]["Locality"] ? true : false);
            A.store.Bool(ptr + 32 + 32 + 24, x["Issuer"]["Locality"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 32 + 32 + 27, "DeviceEditable" in x["Issuer"]["Locality"] ? true : false);
            A.store.Bool(ptr + 32 + 32 + 25, x["Issuer"]["Locality"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["Issuer"]["Organization"] === "undefined") {
            A.store.Bool(ptr + 32 + 64 + 28, false);
            A.store.Ref(ptr + 32 + 64 + 0, undefined);
            A.store.Ref(ptr + 32 + 64 + 4, undefined);
            A.store.Ref(ptr + 32 + 64 + 8, undefined);
            A.store.Ref(ptr + 32 + 64 + 12, undefined);
            A.store.Ref(ptr + 32 + 64 + 16, undefined);
            A.store.Ref(ptr + 32 + 64 + 20, undefined);
            A.store.Bool(ptr + 32 + 64 + 26, false);
            A.store.Bool(ptr + 32 + 64 + 24, false);
            A.store.Bool(ptr + 32 + 64 + 27, false);
            A.store.Bool(ptr + 32 + 64 + 25, false);
          } else {
            A.store.Bool(ptr + 32 + 64 + 28, true);
            A.store.Ref(ptr + 32 + 64 + 0, x["Issuer"]["Organization"]["Active"]);
            A.store.Ref(ptr + 32 + 64 + 4, x["Issuer"]["Organization"]["Effective"]);
            A.store.Ref(ptr + 32 + 64 + 8, x["Issuer"]["Organization"]["UserPolicy"]);
            A.store.Ref(ptr + 32 + 64 + 12, x["Issuer"]["Organization"]["DevicePolicy"]);
            A.store.Ref(ptr + 32 + 64 + 16, x["Issuer"]["Organization"]["UserSetting"]);
            A.store.Ref(ptr + 32 + 64 + 20, x["Issuer"]["Organization"]["SharedSetting"]);
            A.store.Bool(ptr + 32 + 64 + 26, "UserEditable" in x["Issuer"]["Organization"] ? true : false);
            A.store.Bool(ptr + 32 + 64 + 24, x["Issuer"]["Organization"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 32 + 64 + 27, "DeviceEditable" in x["Issuer"]["Organization"] ? true : false);
            A.store.Bool(ptr + 32 + 64 + 25, x["Issuer"]["Organization"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["Issuer"]["OrganizationalUnit"] === "undefined") {
            A.store.Bool(ptr + 32 + 96 + 28, false);
            A.store.Ref(ptr + 32 + 96 + 0, undefined);
            A.store.Ref(ptr + 32 + 96 + 4, undefined);
            A.store.Ref(ptr + 32 + 96 + 8, undefined);
            A.store.Ref(ptr + 32 + 96 + 12, undefined);
            A.store.Ref(ptr + 32 + 96 + 16, undefined);
            A.store.Ref(ptr + 32 + 96 + 20, undefined);
            A.store.Bool(ptr + 32 + 96 + 26, false);
            A.store.Bool(ptr + 32 + 96 + 24, false);
            A.store.Bool(ptr + 32 + 96 + 27, false);
            A.store.Bool(ptr + 32 + 96 + 25, false);
          } else {
            A.store.Bool(ptr + 32 + 96 + 28, true);
            A.store.Ref(ptr + 32 + 96 + 0, x["Issuer"]["OrganizationalUnit"]["Active"]);
            A.store.Ref(ptr + 32 + 96 + 4, x["Issuer"]["OrganizationalUnit"]["Effective"]);
            A.store.Ref(ptr + 32 + 96 + 8, x["Issuer"]["OrganizationalUnit"]["UserPolicy"]);
            A.store.Ref(ptr + 32 + 96 + 12, x["Issuer"]["OrganizationalUnit"]["DevicePolicy"]);
            A.store.Ref(ptr + 32 + 96 + 16, x["Issuer"]["OrganizationalUnit"]["UserSetting"]);
            A.store.Ref(ptr + 32 + 96 + 20, x["Issuer"]["OrganizationalUnit"]["SharedSetting"]);
            A.store.Bool(ptr + 32 + 96 + 26, "UserEditable" in x["Issuer"]["OrganizationalUnit"] ? true : false);
            A.store.Bool(ptr + 32 + 96 + 24, x["Issuer"]["OrganizationalUnit"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 32 + 96 + 27, "DeviceEditable" in x["Issuer"]["OrganizationalUnit"] ? true : false);
            A.store.Bool(ptr + 32 + 96 + 25, x["Issuer"]["OrganizationalUnit"]["DeviceEditable"] ? true : false);
          }
        }

        if (typeof x["IssuerCARef"] === "undefined") {
          A.store.Bool(ptr + 160 + 28, false);
          A.store.Ref(ptr + 160 + 0, undefined);
          A.store.Ref(ptr + 160 + 4, undefined);
          A.store.Ref(ptr + 160 + 8, undefined);
          A.store.Ref(ptr + 160 + 12, undefined);
          A.store.Ref(ptr + 160 + 16, undefined);
          A.store.Ref(ptr + 160 + 20, undefined);
          A.store.Bool(ptr + 160 + 26, false);
          A.store.Bool(ptr + 160 + 24, false);
          A.store.Bool(ptr + 160 + 27, false);
          A.store.Bool(ptr + 160 + 25, false);
        } else {
          A.store.Bool(ptr + 160 + 28, true);
          A.store.Ref(ptr + 160 + 0, x["IssuerCARef"]["Active"]);
          A.store.Ref(ptr + 160 + 4, x["IssuerCARef"]["Effective"]);
          A.store.Ref(ptr + 160 + 8, x["IssuerCARef"]["UserPolicy"]);
          A.store.Ref(ptr + 160 + 12, x["IssuerCARef"]["DevicePolicy"]);
          A.store.Ref(ptr + 160 + 16, x["IssuerCARef"]["UserSetting"]);
          A.store.Ref(ptr + 160 + 20, x["IssuerCARef"]["SharedSetting"]);
          A.store.Bool(ptr + 160 + 26, "UserEditable" in x["IssuerCARef"] ? true : false);
          A.store.Bool(ptr + 160 + 24, x["IssuerCARef"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 160 + 27, "DeviceEditable" in x["IssuerCARef"] ? true : false);
          A.store.Bool(ptr + 160 + 25, x["IssuerCARef"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["Subject"] === "undefined") {
          A.store.Bool(ptr + 192 + 125, false);

          A.store.Bool(ptr + 192 + 0 + 28, false);
          A.store.Ref(ptr + 192 + 0 + 0, undefined);
          A.store.Ref(ptr + 192 + 0 + 4, undefined);
          A.store.Ref(ptr + 192 + 0 + 8, undefined);
          A.store.Ref(ptr + 192 + 0 + 12, undefined);
          A.store.Ref(ptr + 192 + 0 + 16, undefined);
          A.store.Ref(ptr + 192 + 0 + 20, undefined);
          A.store.Bool(ptr + 192 + 0 + 26, false);
          A.store.Bool(ptr + 192 + 0 + 24, false);
          A.store.Bool(ptr + 192 + 0 + 27, false);
          A.store.Bool(ptr + 192 + 0 + 25, false);

          A.store.Bool(ptr + 192 + 32 + 28, false);
          A.store.Ref(ptr + 192 + 32 + 0, undefined);
          A.store.Ref(ptr + 192 + 32 + 4, undefined);
          A.store.Ref(ptr + 192 + 32 + 8, undefined);
          A.store.Ref(ptr + 192 + 32 + 12, undefined);
          A.store.Ref(ptr + 192 + 32 + 16, undefined);
          A.store.Ref(ptr + 192 + 32 + 20, undefined);
          A.store.Bool(ptr + 192 + 32 + 26, false);
          A.store.Bool(ptr + 192 + 32 + 24, false);
          A.store.Bool(ptr + 192 + 32 + 27, false);
          A.store.Bool(ptr + 192 + 32 + 25, false);

          A.store.Bool(ptr + 192 + 64 + 28, false);
          A.store.Ref(ptr + 192 + 64 + 0, undefined);
          A.store.Ref(ptr + 192 + 64 + 4, undefined);
          A.store.Ref(ptr + 192 + 64 + 8, undefined);
          A.store.Ref(ptr + 192 + 64 + 12, undefined);
          A.store.Ref(ptr + 192 + 64 + 16, undefined);
          A.store.Ref(ptr + 192 + 64 + 20, undefined);
          A.store.Bool(ptr + 192 + 64 + 26, false);
          A.store.Bool(ptr + 192 + 64 + 24, false);
          A.store.Bool(ptr + 192 + 64 + 27, false);
          A.store.Bool(ptr + 192 + 64 + 25, false);

          A.store.Bool(ptr + 192 + 96 + 28, false);
          A.store.Ref(ptr + 192 + 96 + 0, undefined);
          A.store.Ref(ptr + 192 + 96 + 4, undefined);
          A.store.Ref(ptr + 192 + 96 + 8, undefined);
          A.store.Ref(ptr + 192 + 96 + 12, undefined);
          A.store.Ref(ptr + 192 + 96 + 16, undefined);
          A.store.Ref(ptr + 192 + 96 + 20, undefined);
          A.store.Bool(ptr + 192 + 96 + 26, false);
          A.store.Bool(ptr + 192 + 96 + 24, false);
          A.store.Bool(ptr + 192 + 96 + 27, false);
          A.store.Bool(ptr + 192 + 96 + 25, false);
        } else {
          A.store.Bool(ptr + 192 + 125, true);

          if (typeof x["Subject"]["CommonName"] === "undefined") {
            A.store.Bool(ptr + 192 + 0 + 28, false);
            A.store.Ref(ptr + 192 + 0 + 0, undefined);
            A.store.Ref(ptr + 192 + 0 + 4, undefined);
            A.store.Ref(ptr + 192 + 0 + 8, undefined);
            A.store.Ref(ptr + 192 + 0 + 12, undefined);
            A.store.Ref(ptr + 192 + 0 + 16, undefined);
            A.store.Ref(ptr + 192 + 0 + 20, undefined);
            A.store.Bool(ptr + 192 + 0 + 26, false);
            A.store.Bool(ptr + 192 + 0 + 24, false);
            A.store.Bool(ptr + 192 + 0 + 27, false);
            A.store.Bool(ptr + 192 + 0 + 25, false);
          } else {
            A.store.Bool(ptr + 192 + 0 + 28, true);
            A.store.Ref(ptr + 192 + 0 + 0, x["Subject"]["CommonName"]["Active"]);
            A.store.Ref(ptr + 192 + 0 + 4, x["Subject"]["CommonName"]["Effective"]);
            A.store.Ref(ptr + 192 + 0 + 8, x["Subject"]["CommonName"]["UserPolicy"]);
            A.store.Ref(ptr + 192 + 0 + 12, x["Subject"]["CommonName"]["DevicePolicy"]);
            A.store.Ref(ptr + 192 + 0 + 16, x["Subject"]["CommonName"]["UserSetting"]);
            A.store.Ref(ptr + 192 + 0 + 20, x["Subject"]["CommonName"]["SharedSetting"]);
            A.store.Bool(ptr + 192 + 0 + 26, "UserEditable" in x["Subject"]["CommonName"] ? true : false);
            A.store.Bool(ptr + 192 + 0 + 24, x["Subject"]["CommonName"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 192 + 0 + 27, "DeviceEditable" in x["Subject"]["CommonName"] ? true : false);
            A.store.Bool(ptr + 192 + 0 + 25, x["Subject"]["CommonName"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["Subject"]["Locality"] === "undefined") {
            A.store.Bool(ptr + 192 + 32 + 28, false);
            A.store.Ref(ptr + 192 + 32 + 0, undefined);
            A.store.Ref(ptr + 192 + 32 + 4, undefined);
            A.store.Ref(ptr + 192 + 32 + 8, undefined);
            A.store.Ref(ptr + 192 + 32 + 12, undefined);
            A.store.Ref(ptr + 192 + 32 + 16, undefined);
            A.store.Ref(ptr + 192 + 32 + 20, undefined);
            A.store.Bool(ptr + 192 + 32 + 26, false);
            A.store.Bool(ptr + 192 + 32 + 24, false);
            A.store.Bool(ptr + 192 + 32 + 27, false);
            A.store.Bool(ptr + 192 + 32 + 25, false);
          } else {
            A.store.Bool(ptr + 192 + 32 + 28, true);
            A.store.Ref(ptr + 192 + 32 + 0, x["Subject"]["Locality"]["Active"]);
            A.store.Ref(ptr + 192 + 32 + 4, x["Subject"]["Locality"]["Effective"]);
            A.store.Ref(ptr + 192 + 32 + 8, x["Subject"]["Locality"]["UserPolicy"]);
            A.store.Ref(ptr + 192 + 32 + 12, x["Subject"]["Locality"]["DevicePolicy"]);
            A.store.Ref(ptr + 192 + 32 + 16, x["Subject"]["Locality"]["UserSetting"]);
            A.store.Ref(ptr + 192 + 32 + 20, x["Subject"]["Locality"]["SharedSetting"]);
            A.store.Bool(ptr + 192 + 32 + 26, "UserEditable" in x["Subject"]["Locality"] ? true : false);
            A.store.Bool(ptr + 192 + 32 + 24, x["Subject"]["Locality"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 192 + 32 + 27, "DeviceEditable" in x["Subject"]["Locality"] ? true : false);
            A.store.Bool(ptr + 192 + 32 + 25, x["Subject"]["Locality"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["Subject"]["Organization"] === "undefined") {
            A.store.Bool(ptr + 192 + 64 + 28, false);
            A.store.Ref(ptr + 192 + 64 + 0, undefined);
            A.store.Ref(ptr + 192 + 64 + 4, undefined);
            A.store.Ref(ptr + 192 + 64 + 8, undefined);
            A.store.Ref(ptr + 192 + 64 + 12, undefined);
            A.store.Ref(ptr + 192 + 64 + 16, undefined);
            A.store.Ref(ptr + 192 + 64 + 20, undefined);
            A.store.Bool(ptr + 192 + 64 + 26, false);
            A.store.Bool(ptr + 192 + 64 + 24, false);
            A.store.Bool(ptr + 192 + 64 + 27, false);
            A.store.Bool(ptr + 192 + 64 + 25, false);
          } else {
            A.store.Bool(ptr + 192 + 64 + 28, true);
            A.store.Ref(ptr + 192 + 64 + 0, x["Subject"]["Organization"]["Active"]);
            A.store.Ref(ptr + 192 + 64 + 4, x["Subject"]["Organization"]["Effective"]);
            A.store.Ref(ptr + 192 + 64 + 8, x["Subject"]["Organization"]["UserPolicy"]);
            A.store.Ref(ptr + 192 + 64 + 12, x["Subject"]["Organization"]["DevicePolicy"]);
            A.store.Ref(ptr + 192 + 64 + 16, x["Subject"]["Organization"]["UserSetting"]);
            A.store.Ref(ptr + 192 + 64 + 20, x["Subject"]["Organization"]["SharedSetting"]);
            A.store.Bool(ptr + 192 + 64 + 26, "UserEditable" in x["Subject"]["Organization"] ? true : false);
            A.store.Bool(ptr + 192 + 64 + 24, x["Subject"]["Organization"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 192 + 64 + 27, "DeviceEditable" in x["Subject"]["Organization"] ? true : false);
            A.store.Bool(ptr + 192 + 64 + 25, x["Subject"]["Organization"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["Subject"]["OrganizationalUnit"] === "undefined") {
            A.store.Bool(ptr + 192 + 96 + 28, false);
            A.store.Ref(ptr + 192 + 96 + 0, undefined);
            A.store.Ref(ptr + 192 + 96 + 4, undefined);
            A.store.Ref(ptr + 192 + 96 + 8, undefined);
            A.store.Ref(ptr + 192 + 96 + 12, undefined);
            A.store.Ref(ptr + 192 + 96 + 16, undefined);
            A.store.Ref(ptr + 192 + 96 + 20, undefined);
            A.store.Bool(ptr + 192 + 96 + 26, false);
            A.store.Bool(ptr + 192 + 96 + 24, false);
            A.store.Bool(ptr + 192 + 96 + 27, false);
            A.store.Bool(ptr + 192 + 96 + 25, false);
          } else {
            A.store.Bool(ptr + 192 + 96 + 28, true);
            A.store.Ref(ptr + 192 + 96 + 0, x["Subject"]["OrganizationalUnit"]["Active"]);
            A.store.Ref(ptr + 192 + 96 + 4, x["Subject"]["OrganizationalUnit"]["Effective"]);
            A.store.Ref(ptr + 192 + 96 + 8, x["Subject"]["OrganizationalUnit"]["UserPolicy"]);
            A.store.Ref(ptr + 192 + 96 + 12, x["Subject"]["OrganizationalUnit"]["DevicePolicy"]);
            A.store.Ref(ptr + 192 + 96 + 16, x["Subject"]["OrganizationalUnit"]["UserSetting"]);
            A.store.Ref(ptr + 192 + 96 + 20, x["Subject"]["OrganizationalUnit"]["SharedSetting"]);
            A.store.Bool(ptr + 192 + 96 + 26, "UserEditable" in x["Subject"]["OrganizationalUnit"] ? true : false);
            A.store.Bool(ptr + 192 + 96 + 24, x["Subject"]["OrganizationalUnit"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 192 + 96 + 27, "DeviceEditable" in x["Subject"]["OrganizationalUnit"] ? true : false);
            A.store.Bool(ptr + 192 + 96 + 25, x["Subject"]["OrganizationalUnit"]["DeviceEditable"] ? true : false);
          }
        }
      }
    },
    "load_ManagedCertificatePattern": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      if (A.load.Bool(ptr + 0 + 28)) {
        x["EnrollmentURI"] = {};
        x["EnrollmentURI"]["Active"] = A.load.Ref(ptr + 0 + 0, undefined);
        x["EnrollmentURI"]["Effective"] = A.load.Ref(ptr + 0 + 4, undefined);
        x["EnrollmentURI"]["UserPolicy"] = A.load.Ref(ptr + 0 + 8, undefined);
        x["EnrollmentURI"]["DevicePolicy"] = A.load.Ref(ptr + 0 + 12, undefined);
        x["EnrollmentURI"]["UserSetting"] = A.load.Ref(ptr + 0 + 16, undefined);
        x["EnrollmentURI"]["SharedSetting"] = A.load.Ref(ptr + 0 + 20, undefined);
        if (A.load.Bool(ptr + 0 + 26)) {
          x["EnrollmentURI"]["UserEditable"] = A.load.Bool(ptr + 0 + 24);
        } else {
          delete x["EnrollmentURI"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 0 + 27)) {
          x["EnrollmentURI"]["DeviceEditable"] = A.load.Bool(ptr + 0 + 25);
        } else {
          delete x["EnrollmentURI"]["DeviceEditable"];
        }
      } else {
        delete x["EnrollmentURI"];
      }
      if (A.load.Bool(ptr + 32 + 125)) {
        x["Issuer"] = {};
        if (A.load.Bool(ptr + 32 + 0 + 28)) {
          x["Issuer"]["CommonName"] = {};
          x["Issuer"]["CommonName"]["Active"] = A.load.Ref(ptr + 32 + 0 + 0, undefined);
          x["Issuer"]["CommonName"]["Effective"] = A.load.Ref(ptr + 32 + 0 + 4, undefined);
          x["Issuer"]["CommonName"]["UserPolicy"] = A.load.Ref(ptr + 32 + 0 + 8, undefined);
          x["Issuer"]["CommonName"]["DevicePolicy"] = A.load.Ref(ptr + 32 + 0 + 12, undefined);
          x["Issuer"]["CommonName"]["UserSetting"] = A.load.Ref(ptr + 32 + 0 + 16, undefined);
          x["Issuer"]["CommonName"]["SharedSetting"] = A.load.Ref(ptr + 32 + 0 + 20, undefined);
          if (A.load.Bool(ptr + 32 + 0 + 26)) {
            x["Issuer"]["CommonName"]["UserEditable"] = A.load.Bool(ptr + 32 + 0 + 24);
          } else {
            delete x["Issuer"]["CommonName"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 32 + 0 + 27)) {
            x["Issuer"]["CommonName"]["DeviceEditable"] = A.load.Bool(ptr + 32 + 0 + 25);
          } else {
            delete x["Issuer"]["CommonName"]["DeviceEditable"];
          }
        } else {
          delete x["Issuer"]["CommonName"];
        }
        if (A.load.Bool(ptr + 32 + 32 + 28)) {
          x["Issuer"]["Locality"] = {};
          x["Issuer"]["Locality"]["Active"] = A.load.Ref(ptr + 32 + 32 + 0, undefined);
          x["Issuer"]["Locality"]["Effective"] = A.load.Ref(ptr + 32 + 32 + 4, undefined);
          x["Issuer"]["Locality"]["UserPolicy"] = A.load.Ref(ptr + 32 + 32 + 8, undefined);
          x["Issuer"]["Locality"]["DevicePolicy"] = A.load.Ref(ptr + 32 + 32 + 12, undefined);
          x["Issuer"]["Locality"]["UserSetting"] = A.load.Ref(ptr + 32 + 32 + 16, undefined);
          x["Issuer"]["Locality"]["SharedSetting"] = A.load.Ref(ptr + 32 + 32 + 20, undefined);
          if (A.load.Bool(ptr + 32 + 32 + 26)) {
            x["Issuer"]["Locality"]["UserEditable"] = A.load.Bool(ptr + 32 + 32 + 24);
          } else {
            delete x["Issuer"]["Locality"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 32 + 32 + 27)) {
            x["Issuer"]["Locality"]["DeviceEditable"] = A.load.Bool(ptr + 32 + 32 + 25);
          } else {
            delete x["Issuer"]["Locality"]["DeviceEditable"];
          }
        } else {
          delete x["Issuer"]["Locality"];
        }
        if (A.load.Bool(ptr + 32 + 64 + 28)) {
          x["Issuer"]["Organization"] = {};
          x["Issuer"]["Organization"]["Active"] = A.load.Ref(ptr + 32 + 64 + 0, undefined);
          x["Issuer"]["Organization"]["Effective"] = A.load.Ref(ptr + 32 + 64 + 4, undefined);
          x["Issuer"]["Organization"]["UserPolicy"] = A.load.Ref(ptr + 32 + 64 + 8, undefined);
          x["Issuer"]["Organization"]["DevicePolicy"] = A.load.Ref(ptr + 32 + 64 + 12, undefined);
          x["Issuer"]["Organization"]["UserSetting"] = A.load.Ref(ptr + 32 + 64 + 16, undefined);
          x["Issuer"]["Organization"]["SharedSetting"] = A.load.Ref(ptr + 32 + 64 + 20, undefined);
          if (A.load.Bool(ptr + 32 + 64 + 26)) {
            x["Issuer"]["Organization"]["UserEditable"] = A.load.Bool(ptr + 32 + 64 + 24);
          } else {
            delete x["Issuer"]["Organization"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 32 + 64 + 27)) {
            x["Issuer"]["Organization"]["DeviceEditable"] = A.load.Bool(ptr + 32 + 64 + 25);
          } else {
            delete x["Issuer"]["Organization"]["DeviceEditable"];
          }
        } else {
          delete x["Issuer"]["Organization"];
        }
        if (A.load.Bool(ptr + 32 + 96 + 28)) {
          x["Issuer"]["OrganizationalUnit"] = {};
          x["Issuer"]["OrganizationalUnit"]["Active"] = A.load.Ref(ptr + 32 + 96 + 0, undefined);
          x["Issuer"]["OrganizationalUnit"]["Effective"] = A.load.Ref(ptr + 32 + 96 + 4, undefined);
          x["Issuer"]["OrganizationalUnit"]["UserPolicy"] = A.load.Ref(ptr + 32 + 96 + 8, undefined);
          x["Issuer"]["OrganizationalUnit"]["DevicePolicy"] = A.load.Ref(ptr + 32 + 96 + 12, undefined);
          x["Issuer"]["OrganizationalUnit"]["UserSetting"] = A.load.Ref(ptr + 32 + 96 + 16, undefined);
          x["Issuer"]["OrganizationalUnit"]["SharedSetting"] = A.load.Ref(ptr + 32 + 96 + 20, undefined);
          if (A.load.Bool(ptr + 32 + 96 + 26)) {
            x["Issuer"]["OrganizationalUnit"]["UserEditable"] = A.load.Bool(ptr + 32 + 96 + 24);
          } else {
            delete x["Issuer"]["OrganizationalUnit"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 32 + 96 + 27)) {
            x["Issuer"]["OrganizationalUnit"]["DeviceEditable"] = A.load.Bool(ptr + 32 + 96 + 25);
          } else {
            delete x["Issuer"]["OrganizationalUnit"]["DeviceEditable"];
          }
        } else {
          delete x["Issuer"]["OrganizationalUnit"];
        }
      } else {
        delete x["Issuer"];
      }
      if (A.load.Bool(ptr + 160 + 28)) {
        x["IssuerCARef"] = {};
        x["IssuerCARef"]["Active"] = A.load.Ref(ptr + 160 + 0, undefined);
        x["IssuerCARef"]["Effective"] = A.load.Ref(ptr + 160 + 4, undefined);
        x["IssuerCARef"]["UserPolicy"] = A.load.Ref(ptr + 160 + 8, undefined);
        x["IssuerCARef"]["DevicePolicy"] = A.load.Ref(ptr + 160 + 12, undefined);
        x["IssuerCARef"]["UserSetting"] = A.load.Ref(ptr + 160 + 16, undefined);
        x["IssuerCARef"]["SharedSetting"] = A.load.Ref(ptr + 160 + 20, undefined);
        if (A.load.Bool(ptr + 160 + 26)) {
          x["IssuerCARef"]["UserEditable"] = A.load.Bool(ptr + 160 + 24);
        } else {
          delete x["IssuerCARef"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 160 + 27)) {
          x["IssuerCARef"]["DeviceEditable"] = A.load.Bool(ptr + 160 + 25);
        } else {
          delete x["IssuerCARef"]["DeviceEditable"];
        }
      } else {
        delete x["IssuerCARef"];
      }
      if (A.load.Bool(ptr + 192 + 125)) {
        x["Subject"] = {};
        if (A.load.Bool(ptr + 192 + 0 + 28)) {
          x["Subject"]["CommonName"] = {};
          x["Subject"]["CommonName"]["Active"] = A.load.Ref(ptr + 192 + 0 + 0, undefined);
          x["Subject"]["CommonName"]["Effective"] = A.load.Ref(ptr + 192 + 0 + 4, undefined);
          x["Subject"]["CommonName"]["UserPolicy"] = A.load.Ref(ptr + 192 + 0 + 8, undefined);
          x["Subject"]["CommonName"]["DevicePolicy"] = A.load.Ref(ptr + 192 + 0 + 12, undefined);
          x["Subject"]["CommonName"]["UserSetting"] = A.load.Ref(ptr + 192 + 0 + 16, undefined);
          x["Subject"]["CommonName"]["SharedSetting"] = A.load.Ref(ptr + 192 + 0 + 20, undefined);
          if (A.load.Bool(ptr + 192 + 0 + 26)) {
            x["Subject"]["CommonName"]["UserEditable"] = A.load.Bool(ptr + 192 + 0 + 24);
          } else {
            delete x["Subject"]["CommonName"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 192 + 0 + 27)) {
            x["Subject"]["CommonName"]["DeviceEditable"] = A.load.Bool(ptr + 192 + 0 + 25);
          } else {
            delete x["Subject"]["CommonName"]["DeviceEditable"];
          }
        } else {
          delete x["Subject"]["CommonName"];
        }
        if (A.load.Bool(ptr + 192 + 32 + 28)) {
          x["Subject"]["Locality"] = {};
          x["Subject"]["Locality"]["Active"] = A.load.Ref(ptr + 192 + 32 + 0, undefined);
          x["Subject"]["Locality"]["Effective"] = A.load.Ref(ptr + 192 + 32 + 4, undefined);
          x["Subject"]["Locality"]["UserPolicy"] = A.load.Ref(ptr + 192 + 32 + 8, undefined);
          x["Subject"]["Locality"]["DevicePolicy"] = A.load.Ref(ptr + 192 + 32 + 12, undefined);
          x["Subject"]["Locality"]["UserSetting"] = A.load.Ref(ptr + 192 + 32 + 16, undefined);
          x["Subject"]["Locality"]["SharedSetting"] = A.load.Ref(ptr + 192 + 32 + 20, undefined);
          if (A.load.Bool(ptr + 192 + 32 + 26)) {
            x["Subject"]["Locality"]["UserEditable"] = A.load.Bool(ptr + 192 + 32 + 24);
          } else {
            delete x["Subject"]["Locality"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 192 + 32 + 27)) {
            x["Subject"]["Locality"]["DeviceEditable"] = A.load.Bool(ptr + 192 + 32 + 25);
          } else {
            delete x["Subject"]["Locality"]["DeviceEditable"];
          }
        } else {
          delete x["Subject"]["Locality"];
        }
        if (A.load.Bool(ptr + 192 + 64 + 28)) {
          x["Subject"]["Organization"] = {};
          x["Subject"]["Organization"]["Active"] = A.load.Ref(ptr + 192 + 64 + 0, undefined);
          x["Subject"]["Organization"]["Effective"] = A.load.Ref(ptr + 192 + 64 + 4, undefined);
          x["Subject"]["Organization"]["UserPolicy"] = A.load.Ref(ptr + 192 + 64 + 8, undefined);
          x["Subject"]["Organization"]["DevicePolicy"] = A.load.Ref(ptr + 192 + 64 + 12, undefined);
          x["Subject"]["Organization"]["UserSetting"] = A.load.Ref(ptr + 192 + 64 + 16, undefined);
          x["Subject"]["Organization"]["SharedSetting"] = A.load.Ref(ptr + 192 + 64 + 20, undefined);
          if (A.load.Bool(ptr + 192 + 64 + 26)) {
            x["Subject"]["Organization"]["UserEditable"] = A.load.Bool(ptr + 192 + 64 + 24);
          } else {
            delete x["Subject"]["Organization"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 192 + 64 + 27)) {
            x["Subject"]["Organization"]["DeviceEditable"] = A.load.Bool(ptr + 192 + 64 + 25);
          } else {
            delete x["Subject"]["Organization"]["DeviceEditable"];
          }
        } else {
          delete x["Subject"]["Organization"];
        }
        if (A.load.Bool(ptr + 192 + 96 + 28)) {
          x["Subject"]["OrganizationalUnit"] = {};
          x["Subject"]["OrganizationalUnit"]["Active"] = A.load.Ref(ptr + 192 + 96 + 0, undefined);
          x["Subject"]["OrganizationalUnit"]["Effective"] = A.load.Ref(ptr + 192 + 96 + 4, undefined);
          x["Subject"]["OrganizationalUnit"]["UserPolicy"] = A.load.Ref(ptr + 192 + 96 + 8, undefined);
          x["Subject"]["OrganizationalUnit"]["DevicePolicy"] = A.load.Ref(ptr + 192 + 96 + 12, undefined);
          x["Subject"]["OrganizationalUnit"]["UserSetting"] = A.load.Ref(ptr + 192 + 96 + 16, undefined);
          x["Subject"]["OrganizationalUnit"]["SharedSetting"] = A.load.Ref(ptr + 192 + 96 + 20, undefined);
          if (A.load.Bool(ptr + 192 + 96 + 26)) {
            x["Subject"]["OrganizationalUnit"]["UserEditable"] = A.load.Bool(ptr + 192 + 96 + 24);
          } else {
            delete x["Subject"]["OrganizationalUnit"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 192 + 96 + 27)) {
            x["Subject"]["OrganizationalUnit"]["DeviceEditable"] = A.load.Bool(ptr + 192 + 96 + 25);
          } else {
            delete x["Subject"]["OrganizationalUnit"]["DeviceEditable"];
          }
        } else {
          delete x["Subject"]["OrganizationalUnit"];
        }
      } else {
        delete x["Subject"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_ManagedEAPProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 806, false);

        A.store.Bool(ptr + 0 + 28, false);
        A.store.Ref(ptr + 0 + 0, undefined);
        A.store.Ref(ptr + 0 + 4, undefined);
        A.store.Ref(ptr + 0 + 8, undefined);
        A.store.Ref(ptr + 0 + 12, undefined);
        A.store.Ref(ptr + 0 + 16, undefined);
        A.store.Ref(ptr + 0 + 20, undefined);
        A.store.Bool(ptr + 0 + 26, false);
        A.store.Bool(ptr + 0 + 24, false);
        A.store.Bool(ptr + 0 + 27, false);
        A.store.Bool(ptr + 0 + 25, false);

        A.store.Bool(ptr + 32 + 318, false);

        A.store.Bool(ptr + 32 + 0 + 28, false);
        A.store.Ref(ptr + 32 + 0 + 0, undefined);
        A.store.Ref(ptr + 32 + 0 + 4, undefined);
        A.store.Ref(ptr + 32 + 0 + 8, undefined);
        A.store.Ref(ptr + 32 + 0 + 12, undefined);
        A.store.Ref(ptr + 32 + 0 + 16, undefined);
        A.store.Ref(ptr + 32 + 0 + 20, undefined);
        A.store.Bool(ptr + 32 + 0 + 26, false);
        A.store.Bool(ptr + 32 + 0 + 24, false);
        A.store.Bool(ptr + 32 + 0 + 27, false);
        A.store.Bool(ptr + 32 + 0 + 25, false);

        A.store.Bool(ptr + 32 + 32 + 125, false);

        A.store.Bool(ptr + 32 + 32 + 0 + 28, false);
        A.store.Ref(ptr + 32 + 32 + 0 + 0, undefined);
        A.store.Ref(ptr + 32 + 32 + 0 + 4, undefined);
        A.store.Ref(ptr + 32 + 32 + 0 + 8, undefined);
        A.store.Ref(ptr + 32 + 32 + 0 + 12, undefined);
        A.store.Ref(ptr + 32 + 32 + 0 + 16, undefined);
        A.store.Ref(ptr + 32 + 32 + 0 + 20, undefined);
        A.store.Bool(ptr + 32 + 32 + 0 + 26, false);
        A.store.Bool(ptr + 32 + 32 + 0 + 24, false);
        A.store.Bool(ptr + 32 + 32 + 0 + 27, false);
        A.store.Bool(ptr + 32 + 32 + 0 + 25, false);

        A.store.Bool(ptr + 32 + 32 + 32 + 28, false);
        A.store.Ref(ptr + 32 + 32 + 32 + 0, undefined);
        A.store.Ref(ptr + 32 + 32 + 32 + 4, undefined);
        A.store.Ref(ptr + 32 + 32 + 32 + 8, undefined);
        A.store.Ref(ptr + 32 + 32 + 32 + 12, undefined);
        A.store.Ref(ptr + 32 + 32 + 32 + 16, undefined);
        A.store.Ref(ptr + 32 + 32 + 32 + 20, undefined);
        A.store.Bool(ptr + 32 + 32 + 32 + 26, false);
        A.store.Bool(ptr + 32 + 32 + 32 + 24, false);
        A.store.Bool(ptr + 32 + 32 + 32 + 27, false);
        A.store.Bool(ptr + 32 + 32 + 32 + 25, false);

        A.store.Bool(ptr + 32 + 32 + 64 + 28, false);
        A.store.Ref(ptr + 32 + 32 + 64 + 0, undefined);
        A.store.Ref(ptr + 32 + 32 + 64 + 4, undefined);
        A.store.Ref(ptr + 32 + 32 + 64 + 8, undefined);
        A.store.Ref(ptr + 32 + 32 + 64 + 12, undefined);
        A.store.Ref(ptr + 32 + 32 + 64 + 16, undefined);
        A.store.Ref(ptr + 32 + 32 + 64 + 20, undefined);
        A.store.Bool(ptr + 32 + 32 + 64 + 26, false);
        A.store.Bool(ptr + 32 + 32 + 64 + 24, false);
        A.store.Bool(ptr + 32 + 32 + 64 + 27, false);
        A.store.Bool(ptr + 32 + 32 + 64 + 25, false);

        A.store.Bool(ptr + 32 + 32 + 96 + 28, false);
        A.store.Ref(ptr + 32 + 32 + 96 + 0, undefined);
        A.store.Ref(ptr + 32 + 32 + 96 + 4, undefined);
        A.store.Ref(ptr + 32 + 32 + 96 + 8, undefined);
        A.store.Ref(ptr + 32 + 32 + 96 + 12, undefined);
        A.store.Ref(ptr + 32 + 32 + 96 + 16, undefined);
        A.store.Ref(ptr + 32 + 32 + 96 + 20, undefined);
        A.store.Bool(ptr + 32 + 32 + 96 + 26, false);
        A.store.Bool(ptr + 32 + 32 + 96 + 24, false);
        A.store.Bool(ptr + 32 + 32 + 96 + 27, false);
        A.store.Bool(ptr + 32 + 32 + 96 + 25, false);

        A.store.Bool(ptr + 32 + 160 + 28, false);
        A.store.Ref(ptr + 32 + 160 + 0, undefined);
        A.store.Ref(ptr + 32 + 160 + 4, undefined);
        A.store.Ref(ptr + 32 + 160 + 8, undefined);
        A.store.Ref(ptr + 32 + 160 + 12, undefined);
        A.store.Ref(ptr + 32 + 160 + 16, undefined);
        A.store.Ref(ptr + 32 + 160 + 20, undefined);
        A.store.Bool(ptr + 32 + 160 + 26, false);
        A.store.Bool(ptr + 32 + 160 + 24, false);
        A.store.Bool(ptr + 32 + 160 + 27, false);
        A.store.Bool(ptr + 32 + 160 + 25, false);

        A.store.Bool(ptr + 32 + 192 + 125, false);

        A.store.Bool(ptr + 32 + 192 + 0 + 28, false);
        A.store.Ref(ptr + 32 + 192 + 0 + 0, undefined);
        A.store.Ref(ptr + 32 + 192 + 0 + 4, undefined);
        A.store.Ref(ptr + 32 + 192 + 0 + 8, undefined);
        A.store.Ref(ptr + 32 + 192 + 0 + 12, undefined);
        A.store.Ref(ptr + 32 + 192 + 0 + 16, undefined);
        A.store.Ref(ptr + 32 + 192 + 0 + 20, undefined);
        A.store.Bool(ptr + 32 + 192 + 0 + 26, false);
        A.store.Bool(ptr + 32 + 192 + 0 + 24, false);
        A.store.Bool(ptr + 32 + 192 + 0 + 27, false);
        A.store.Bool(ptr + 32 + 192 + 0 + 25, false);

        A.store.Bool(ptr + 32 + 192 + 32 + 28, false);
        A.store.Ref(ptr + 32 + 192 + 32 + 0, undefined);
        A.store.Ref(ptr + 32 + 192 + 32 + 4, undefined);
        A.store.Ref(ptr + 32 + 192 + 32 + 8, undefined);
        A.store.Ref(ptr + 32 + 192 + 32 + 12, undefined);
        A.store.Ref(ptr + 32 + 192 + 32 + 16, undefined);
        A.store.Ref(ptr + 32 + 192 + 32 + 20, undefined);
        A.store.Bool(ptr + 32 + 192 + 32 + 26, false);
        A.store.Bool(ptr + 32 + 192 + 32 + 24, false);
        A.store.Bool(ptr + 32 + 192 + 32 + 27, false);
        A.store.Bool(ptr + 32 + 192 + 32 + 25, false);

        A.store.Bool(ptr + 32 + 192 + 64 + 28, false);
        A.store.Ref(ptr + 32 + 192 + 64 + 0, undefined);
        A.store.Ref(ptr + 32 + 192 + 64 + 4, undefined);
        A.store.Ref(ptr + 32 + 192 + 64 + 8, undefined);
        A.store.Ref(ptr + 32 + 192 + 64 + 12, undefined);
        A.store.Ref(ptr + 32 + 192 + 64 + 16, undefined);
        A.store.Ref(ptr + 32 + 192 + 64 + 20, undefined);
        A.store.Bool(ptr + 32 + 192 + 64 + 26, false);
        A.store.Bool(ptr + 32 + 192 + 64 + 24, false);
        A.store.Bool(ptr + 32 + 192 + 64 + 27, false);
        A.store.Bool(ptr + 32 + 192 + 64 + 25, false);

        A.store.Bool(ptr + 32 + 192 + 96 + 28, false);
        A.store.Ref(ptr + 32 + 192 + 96 + 0, undefined);
        A.store.Ref(ptr + 32 + 192 + 96 + 4, undefined);
        A.store.Ref(ptr + 32 + 192 + 96 + 8, undefined);
        A.store.Ref(ptr + 32 + 192 + 96 + 12, undefined);
        A.store.Ref(ptr + 32 + 192 + 96 + 16, undefined);
        A.store.Ref(ptr + 32 + 192 + 96 + 20, undefined);
        A.store.Bool(ptr + 32 + 192 + 96 + 26, false);
        A.store.Bool(ptr + 32 + 192 + 96 + 24, false);
        A.store.Bool(ptr + 32 + 192 + 96 + 27, false);
        A.store.Bool(ptr + 32 + 192 + 96 + 25, false);

        A.store.Bool(ptr + 352 + 28, false);
        A.store.Ref(ptr + 352 + 0, undefined);
        A.store.Ref(ptr + 352 + 4, undefined);
        A.store.Ref(ptr + 352 + 8, undefined);
        A.store.Ref(ptr + 352 + 12, undefined);
        A.store.Ref(ptr + 352 + 16, undefined);
        A.store.Ref(ptr + 352 + 20, undefined);
        A.store.Bool(ptr + 352 + 26, false);
        A.store.Bool(ptr + 352 + 24, false);
        A.store.Bool(ptr + 352 + 27, false);
        A.store.Bool(ptr + 352 + 25, false);

        A.store.Bool(ptr + 384 + 28, false);
        A.store.Ref(ptr + 384 + 0, undefined);
        A.store.Ref(ptr + 384 + 4, undefined);
        A.store.Ref(ptr + 384 + 8, undefined);
        A.store.Ref(ptr + 384 + 12, undefined);
        A.store.Ref(ptr + 384 + 16, undefined);
        A.store.Ref(ptr + 384 + 20, undefined);
        A.store.Bool(ptr + 384 + 26, false);
        A.store.Bool(ptr + 384 + 24, false);
        A.store.Bool(ptr + 384 + 27, false);
        A.store.Bool(ptr + 384 + 25, false);

        A.store.Bool(ptr + 416 + 28, false);
        A.store.Ref(ptr + 416 + 0, undefined);
        A.store.Ref(ptr + 416 + 4, undefined);
        A.store.Ref(ptr + 416 + 8, undefined);
        A.store.Ref(ptr + 416 + 12, undefined);
        A.store.Ref(ptr + 416 + 16, undefined);
        A.store.Ref(ptr + 416 + 20, undefined);
        A.store.Bool(ptr + 416 + 26, false);
        A.store.Bool(ptr + 416 + 24, false);
        A.store.Bool(ptr + 416 + 27, false);
        A.store.Bool(ptr + 416 + 25, false);

        A.store.Bool(ptr + 448 + 28, false);
        A.store.Ref(ptr + 448 + 0, undefined);
        A.store.Ref(ptr + 448 + 4, undefined);
        A.store.Ref(ptr + 448 + 8, undefined);
        A.store.Ref(ptr + 448 + 12, undefined);
        A.store.Ref(ptr + 448 + 16, undefined);
        A.store.Ref(ptr + 448 + 20, undefined);
        A.store.Bool(ptr + 448 + 26, false);
        A.store.Bool(ptr + 448 + 24, false);
        A.store.Bool(ptr + 448 + 27, false);
        A.store.Bool(ptr + 448 + 25, false);

        A.store.Bool(ptr + 480 + 28, false);
        A.store.Ref(ptr + 480 + 0, undefined);
        A.store.Ref(ptr + 480 + 4, undefined);
        A.store.Ref(ptr + 480 + 8, undefined);
        A.store.Ref(ptr + 480 + 12, undefined);
        A.store.Ref(ptr + 480 + 16, undefined);
        A.store.Ref(ptr + 480 + 20, undefined);
        A.store.Bool(ptr + 480 + 26, false);
        A.store.Bool(ptr + 480 + 24, false);
        A.store.Bool(ptr + 480 + 27, false);
        A.store.Bool(ptr + 480 + 25, false);

        A.store.Bool(ptr + 512 + 28, false);
        A.store.Ref(ptr + 512 + 0, undefined);
        A.store.Ref(ptr + 512 + 4, undefined);
        A.store.Ref(ptr + 512 + 8, undefined);
        A.store.Ref(ptr + 512 + 12, undefined);
        A.store.Ref(ptr + 512 + 16, undefined);
        A.store.Ref(ptr + 512 + 20, undefined);
        A.store.Bool(ptr + 512 + 26, false);
        A.store.Bool(ptr + 512 + 24, false);
        A.store.Bool(ptr + 512 + 27, false);
        A.store.Bool(ptr + 512 + 25, false);

        A.store.Bool(ptr + 544 + 28, false);
        A.store.Ref(ptr + 544 + 0, undefined);
        A.store.Ref(ptr + 544 + 4, undefined);
        A.store.Ref(ptr + 544 + 8, undefined);
        A.store.Ref(ptr + 544 + 12, undefined);
        A.store.Ref(ptr + 544 + 16, undefined);
        A.store.Ref(ptr + 544 + 20, undefined);
        A.store.Bool(ptr + 544 + 26, false);
        A.store.Bool(ptr + 544 + 24, false);
        A.store.Bool(ptr + 544 + 27, false);
        A.store.Bool(ptr + 544 + 25, false);

        A.store.Bool(ptr + 576 + 28, false);
        A.store.Ref(ptr + 576 + 0, undefined);
        A.store.Ref(ptr + 576 + 4, undefined);
        A.store.Ref(ptr + 576 + 8, undefined);
        A.store.Ref(ptr + 576 + 12, undefined);
        A.store.Ref(ptr + 576 + 16, undefined);
        A.store.Ref(ptr + 576 + 20, undefined);
        A.store.Bool(ptr + 576 + 26, false);
        A.store.Bool(ptr + 576 + 24, false);
        A.store.Bool(ptr + 576 + 27, false);
        A.store.Bool(ptr + 576 + 25, false);

        A.store.Bool(ptr + 608 + 21, false);
        A.store.Bool(ptr + 608 + 14, false);
        A.store.Bool(ptr + 608 + 0, false);
        A.store.Ref(ptr + 608 + 4, undefined);
        A.store.Bool(ptr + 608 + 15, false);
        A.store.Bool(ptr + 608 + 8, false);
        A.store.Bool(ptr + 608 + 16, false);
        A.store.Bool(ptr + 608 + 9, false);
        A.store.Bool(ptr + 608 + 17, false);
        A.store.Bool(ptr + 608 + 10, false);
        A.store.Bool(ptr + 608 + 18, false);
        A.store.Bool(ptr + 608 + 11, false);
        A.store.Bool(ptr + 608 + 19, false);
        A.store.Bool(ptr + 608 + 12, false);
        A.store.Bool(ptr + 608 + 20, false);
        A.store.Bool(ptr + 608 + 13, false);

        A.store.Bool(ptr + 632 + 28, false);
        A.store.Ref(ptr + 632 + 0, undefined);
        A.store.Ref(ptr + 632 + 4, undefined);
        A.store.Ref(ptr + 632 + 8, undefined);
        A.store.Ref(ptr + 632 + 12, undefined);
        A.store.Ref(ptr + 632 + 16, undefined);
        A.store.Ref(ptr + 632 + 20, undefined);
        A.store.Bool(ptr + 632 + 26, false);
        A.store.Bool(ptr + 632 + 24, false);
        A.store.Bool(ptr + 632 + 27, false);
        A.store.Bool(ptr + 632 + 25, false);

        A.store.Bool(ptr + 664 + 28, false);
        A.store.Ref(ptr + 664 + 0, undefined);
        A.store.Ref(ptr + 664 + 4, undefined);
        A.store.Ref(ptr + 664 + 8, undefined);
        A.store.Ref(ptr + 664 + 12, undefined);
        A.store.Ref(ptr + 664 + 16, undefined);
        A.store.Ref(ptr + 664 + 20, undefined);
        A.store.Bool(ptr + 664 + 26, false);
        A.store.Bool(ptr + 664 + 24, false);
        A.store.Bool(ptr + 664 + 27, false);
        A.store.Bool(ptr + 664 + 25, false);

        A.store.Bool(ptr + 696 + 28, false);
        A.store.Ref(ptr + 696 + 0, undefined);
        A.store.Ref(ptr + 696 + 4, undefined);
        A.store.Ref(ptr + 696 + 8, undefined);
        A.store.Ref(ptr + 696 + 12, undefined);
        A.store.Ref(ptr + 696 + 16, undefined);
        A.store.Ref(ptr + 696 + 20, undefined);
        A.store.Bool(ptr + 696 + 26, false);
        A.store.Bool(ptr + 696 + 24, false);
        A.store.Bool(ptr + 696 + 27, false);
        A.store.Bool(ptr + 696 + 25, false);

        A.store.Bool(ptr + 728 + 28, false);
        A.store.Ref(ptr + 728 + 0, undefined);
        A.store.Ref(ptr + 728 + 4, undefined);
        A.store.Ref(ptr + 728 + 8, undefined);
        A.store.Ref(ptr + 728 + 12, undefined);
        A.store.Ref(ptr + 728 + 16, undefined);
        A.store.Ref(ptr + 728 + 20, undefined);
        A.store.Bool(ptr + 728 + 26, false);
        A.store.Bool(ptr + 728 + 24, false);
        A.store.Bool(ptr + 728 + 27, false);
        A.store.Bool(ptr + 728 + 25, false);

        A.store.Bool(ptr + 760 + 21, false);
        A.store.Bool(ptr + 760 + 14, false);
        A.store.Bool(ptr + 760 + 0, false);
        A.store.Ref(ptr + 760 + 4, undefined);
        A.store.Bool(ptr + 760 + 15, false);
        A.store.Bool(ptr + 760 + 8, false);
        A.store.Bool(ptr + 760 + 16, false);
        A.store.Bool(ptr + 760 + 9, false);
        A.store.Bool(ptr + 760 + 17, false);
        A.store.Bool(ptr + 760 + 10, false);
        A.store.Bool(ptr + 760 + 18, false);
        A.store.Bool(ptr + 760 + 11, false);
        A.store.Bool(ptr + 760 + 19, false);
        A.store.Bool(ptr + 760 + 12, false);
        A.store.Bool(ptr + 760 + 20, false);
        A.store.Bool(ptr + 760 + 13, false);

        A.store.Bool(ptr + 784 + 21, false);
        A.store.Bool(ptr + 784 + 14, false);
        A.store.Bool(ptr + 784 + 0, false);
        A.store.Ref(ptr + 784 + 4, undefined);
        A.store.Bool(ptr + 784 + 15, false);
        A.store.Bool(ptr + 784 + 8, false);
        A.store.Bool(ptr + 784 + 16, false);
        A.store.Bool(ptr + 784 + 9, false);
        A.store.Bool(ptr + 784 + 17, false);
        A.store.Bool(ptr + 784 + 10, false);
        A.store.Bool(ptr + 784 + 18, false);
        A.store.Bool(ptr + 784 + 11, false);
        A.store.Bool(ptr + 784 + 19, false);
        A.store.Bool(ptr + 784 + 12, false);
        A.store.Bool(ptr + 784 + 20, false);
        A.store.Bool(ptr + 784 + 13, false);
      } else {
        A.store.Bool(ptr + 806, true);

        if (typeof x["AnonymousIdentity"] === "undefined") {
          A.store.Bool(ptr + 0 + 28, false);
          A.store.Ref(ptr + 0 + 0, undefined);
          A.store.Ref(ptr + 0 + 4, undefined);
          A.store.Ref(ptr + 0 + 8, undefined);
          A.store.Ref(ptr + 0 + 12, undefined);
          A.store.Ref(ptr + 0 + 16, undefined);
          A.store.Ref(ptr + 0 + 20, undefined);
          A.store.Bool(ptr + 0 + 26, false);
          A.store.Bool(ptr + 0 + 24, false);
          A.store.Bool(ptr + 0 + 27, false);
          A.store.Bool(ptr + 0 + 25, false);
        } else {
          A.store.Bool(ptr + 0 + 28, true);
          A.store.Ref(ptr + 0 + 0, x["AnonymousIdentity"]["Active"]);
          A.store.Ref(ptr + 0 + 4, x["AnonymousIdentity"]["Effective"]);
          A.store.Ref(ptr + 0 + 8, x["AnonymousIdentity"]["UserPolicy"]);
          A.store.Ref(ptr + 0 + 12, x["AnonymousIdentity"]["DevicePolicy"]);
          A.store.Ref(ptr + 0 + 16, x["AnonymousIdentity"]["UserSetting"]);
          A.store.Ref(ptr + 0 + 20, x["AnonymousIdentity"]["SharedSetting"]);
          A.store.Bool(ptr + 0 + 26, "UserEditable" in x["AnonymousIdentity"] ? true : false);
          A.store.Bool(ptr + 0 + 24, x["AnonymousIdentity"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 0 + 27, "DeviceEditable" in x["AnonymousIdentity"] ? true : false);
          A.store.Bool(ptr + 0 + 25, x["AnonymousIdentity"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["ClientCertPattern"] === "undefined") {
          A.store.Bool(ptr + 32 + 318, false);

          A.store.Bool(ptr + 32 + 0 + 28, false);
          A.store.Ref(ptr + 32 + 0 + 0, undefined);
          A.store.Ref(ptr + 32 + 0 + 4, undefined);
          A.store.Ref(ptr + 32 + 0 + 8, undefined);
          A.store.Ref(ptr + 32 + 0 + 12, undefined);
          A.store.Ref(ptr + 32 + 0 + 16, undefined);
          A.store.Ref(ptr + 32 + 0 + 20, undefined);
          A.store.Bool(ptr + 32 + 0 + 26, false);
          A.store.Bool(ptr + 32 + 0 + 24, false);
          A.store.Bool(ptr + 32 + 0 + 27, false);
          A.store.Bool(ptr + 32 + 0 + 25, false);

          A.store.Bool(ptr + 32 + 32 + 125, false);

          A.store.Bool(ptr + 32 + 32 + 0 + 28, false);
          A.store.Ref(ptr + 32 + 32 + 0 + 0, undefined);
          A.store.Ref(ptr + 32 + 32 + 0 + 4, undefined);
          A.store.Ref(ptr + 32 + 32 + 0 + 8, undefined);
          A.store.Ref(ptr + 32 + 32 + 0 + 12, undefined);
          A.store.Ref(ptr + 32 + 32 + 0 + 16, undefined);
          A.store.Ref(ptr + 32 + 32 + 0 + 20, undefined);
          A.store.Bool(ptr + 32 + 32 + 0 + 26, false);
          A.store.Bool(ptr + 32 + 32 + 0 + 24, false);
          A.store.Bool(ptr + 32 + 32 + 0 + 27, false);
          A.store.Bool(ptr + 32 + 32 + 0 + 25, false);

          A.store.Bool(ptr + 32 + 32 + 32 + 28, false);
          A.store.Ref(ptr + 32 + 32 + 32 + 0, undefined);
          A.store.Ref(ptr + 32 + 32 + 32 + 4, undefined);
          A.store.Ref(ptr + 32 + 32 + 32 + 8, undefined);
          A.store.Ref(ptr + 32 + 32 + 32 + 12, undefined);
          A.store.Ref(ptr + 32 + 32 + 32 + 16, undefined);
          A.store.Ref(ptr + 32 + 32 + 32 + 20, undefined);
          A.store.Bool(ptr + 32 + 32 + 32 + 26, false);
          A.store.Bool(ptr + 32 + 32 + 32 + 24, false);
          A.store.Bool(ptr + 32 + 32 + 32 + 27, false);
          A.store.Bool(ptr + 32 + 32 + 32 + 25, false);

          A.store.Bool(ptr + 32 + 32 + 64 + 28, false);
          A.store.Ref(ptr + 32 + 32 + 64 + 0, undefined);
          A.store.Ref(ptr + 32 + 32 + 64 + 4, undefined);
          A.store.Ref(ptr + 32 + 32 + 64 + 8, undefined);
          A.store.Ref(ptr + 32 + 32 + 64 + 12, undefined);
          A.store.Ref(ptr + 32 + 32 + 64 + 16, undefined);
          A.store.Ref(ptr + 32 + 32 + 64 + 20, undefined);
          A.store.Bool(ptr + 32 + 32 + 64 + 26, false);
          A.store.Bool(ptr + 32 + 32 + 64 + 24, false);
          A.store.Bool(ptr + 32 + 32 + 64 + 27, false);
          A.store.Bool(ptr + 32 + 32 + 64 + 25, false);

          A.store.Bool(ptr + 32 + 32 + 96 + 28, false);
          A.store.Ref(ptr + 32 + 32 + 96 + 0, undefined);
          A.store.Ref(ptr + 32 + 32 + 96 + 4, undefined);
          A.store.Ref(ptr + 32 + 32 + 96 + 8, undefined);
          A.store.Ref(ptr + 32 + 32 + 96 + 12, undefined);
          A.store.Ref(ptr + 32 + 32 + 96 + 16, undefined);
          A.store.Ref(ptr + 32 + 32 + 96 + 20, undefined);
          A.store.Bool(ptr + 32 + 32 + 96 + 26, false);
          A.store.Bool(ptr + 32 + 32 + 96 + 24, false);
          A.store.Bool(ptr + 32 + 32 + 96 + 27, false);
          A.store.Bool(ptr + 32 + 32 + 96 + 25, false);

          A.store.Bool(ptr + 32 + 160 + 28, false);
          A.store.Ref(ptr + 32 + 160 + 0, undefined);
          A.store.Ref(ptr + 32 + 160 + 4, undefined);
          A.store.Ref(ptr + 32 + 160 + 8, undefined);
          A.store.Ref(ptr + 32 + 160 + 12, undefined);
          A.store.Ref(ptr + 32 + 160 + 16, undefined);
          A.store.Ref(ptr + 32 + 160 + 20, undefined);
          A.store.Bool(ptr + 32 + 160 + 26, false);
          A.store.Bool(ptr + 32 + 160 + 24, false);
          A.store.Bool(ptr + 32 + 160 + 27, false);
          A.store.Bool(ptr + 32 + 160 + 25, false);

          A.store.Bool(ptr + 32 + 192 + 125, false);

          A.store.Bool(ptr + 32 + 192 + 0 + 28, false);
          A.store.Ref(ptr + 32 + 192 + 0 + 0, undefined);
          A.store.Ref(ptr + 32 + 192 + 0 + 4, undefined);
          A.store.Ref(ptr + 32 + 192 + 0 + 8, undefined);
          A.store.Ref(ptr + 32 + 192 + 0 + 12, undefined);
          A.store.Ref(ptr + 32 + 192 + 0 + 16, undefined);
          A.store.Ref(ptr + 32 + 192 + 0 + 20, undefined);
          A.store.Bool(ptr + 32 + 192 + 0 + 26, false);
          A.store.Bool(ptr + 32 + 192 + 0 + 24, false);
          A.store.Bool(ptr + 32 + 192 + 0 + 27, false);
          A.store.Bool(ptr + 32 + 192 + 0 + 25, false);

          A.store.Bool(ptr + 32 + 192 + 32 + 28, false);
          A.store.Ref(ptr + 32 + 192 + 32 + 0, undefined);
          A.store.Ref(ptr + 32 + 192 + 32 + 4, undefined);
          A.store.Ref(ptr + 32 + 192 + 32 + 8, undefined);
          A.store.Ref(ptr + 32 + 192 + 32 + 12, undefined);
          A.store.Ref(ptr + 32 + 192 + 32 + 16, undefined);
          A.store.Ref(ptr + 32 + 192 + 32 + 20, undefined);
          A.store.Bool(ptr + 32 + 192 + 32 + 26, false);
          A.store.Bool(ptr + 32 + 192 + 32 + 24, false);
          A.store.Bool(ptr + 32 + 192 + 32 + 27, false);
          A.store.Bool(ptr + 32 + 192 + 32 + 25, false);

          A.store.Bool(ptr + 32 + 192 + 64 + 28, false);
          A.store.Ref(ptr + 32 + 192 + 64 + 0, undefined);
          A.store.Ref(ptr + 32 + 192 + 64 + 4, undefined);
          A.store.Ref(ptr + 32 + 192 + 64 + 8, undefined);
          A.store.Ref(ptr + 32 + 192 + 64 + 12, undefined);
          A.store.Ref(ptr + 32 + 192 + 64 + 16, undefined);
          A.store.Ref(ptr + 32 + 192 + 64 + 20, undefined);
          A.store.Bool(ptr + 32 + 192 + 64 + 26, false);
          A.store.Bool(ptr + 32 + 192 + 64 + 24, false);
          A.store.Bool(ptr + 32 + 192 + 64 + 27, false);
          A.store.Bool(ptr + 32 + 192 + 64 + 25, false);

          A.store.Bool(ptr + 32 + 192 + 96 + 28, false);
          A.store.Ref(ptr + 32 + 192 + 96 + 0, undefined);
          A.store.Ref(ptr + 32 + 192 + 96 + 4, undefined);
          A.store.Ref(ptr + 32 + 192 + 96 + 8, undefined);
          A.store.Ref(ptr + 32 + 192 + 96 + 12, undefined);
          A.store.Ref(ptr + 32 + 192 + 96 + 16, undefined);
          A.store.Ref(ptr + 32 + 192 + 96 + 20, undefined);
          A.store.Bool(ptr + 32 + 192 + 96 + 26, false);
          A.store.Bool(ptr + 32 + 192 + 96 + 24, false);
          A.store.Bool(ptr + 32 + 192 + 96 + 27, false);
          A.store.Bool(ptr + 32 + 192 + 96 + 25, false);
        } else {
          A.store.Bool(ptr + 32 + 318, true);

          if (typeof x["ClientCertPattern"]["EnrollmentURI"] === "undefined") {
            A.store.Bool(ptr + 32 + 0 + 28, false);
            A.store.Ref(ptr + 32 + 0 + 0, undefined);
            A.store.Ref(ptr + 32 + 0 + 4, undefined);
            A.store.Ref(ptr + 32 + 0 + 8, undefined);
            A.store.Ref(ptr + 32 + 0 + 12, undefined);
            A.store.Ref(ptr + 32 + 0 + 16, undefined);
            A.store.Ref(ptr + 32 + 0 + 20, undefined);
            A.store.Bool(ptr + 32 + 0 + 26, false);
            A.store.Bool(ptr + 32 + 0 + 24, false);
            A.store.Bool(ptr + 32 + 0 + 27, false);
            A.store.Bool(ptr + 32 + 0 + 25, false);
          } else {
            A.store.Bool(ptr + 32 + 0 + 28, true);
            A.store.Ref(ptr + 32 + 0 + 0, x["ClientCertPattern"]["EnrollmentURI"]["Active"]);
            A.store.Ref(ptr + 32 + 0 + 4, x["ClientCertPattern"]["EnrollmentURI"]["Effective"]);
            A.store.Ref(ptr + 32 + 0 + 8, x["ClientCertPattern"]["EnrollmentURI"]["UserPolicy"]);
            A.store.Ref(ptr + 32 + 0 + 12, x["ClientCertPattern"]["EnrollmentURI"]["DevicePolicy"]);
            A.store.Ref(ptr + 32 + 0 + 16, x["ClientCertPattern"]["EnrollmentURI"]["UserSetting"]);
            A.store.Ref(ptr + 32 + 0 + 20, x["ClientCertPattern"]["EnrollmentURI"]["SharedSetting"]);
            A.store.Bool(ptr + 32 + 0 + 26, "UserEditable" in x["ClientCertPattern"]["EnrollmentURI"] ? true : false);
            A.store.Bool(ptr + 32 + 0 + 24, x["ClientCertPattern"]["EnrollmentURI"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 32 + 0 + 27, "DeviceEditable" in x["ClientCertPattern"]["EnrollmentURI"] ? true : false);
            A.store.Bool(ptr + 32 + 0 + 25, x["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["ClientCertPattern"]["Issuer"] === "undefined") {
            A.store.Bool(ptr + 32 + 32 + 125, false);

            A.store.Bool(ptr + 32 + 32 + 0 + 28, false);
            A.store.Ref(ptr + 32 + 32 + 0 + 0, undefined);
            A.store.Ref(ptr + 32 + 32 + 0 + 4, undefined);
            A.store.Ref(ptr + 32 + 32 + 0 + 8, undefined);
            A.store.Ref(ptr + 32 + 32 + 0 + 12, undefined);
            A.store.Ref(ptr + 32 + 32 + 0 + 16, undefined);
            A.store.Ref(ptr + 32 + 32 + 0 + 20, undefined);
            A.store.Bool(ptr + 32 + 32 + 0 + 26, false);
            A.store.Bool(ptr + 32 + 32 + 0 + 24, false);
            A.store.Bool(ptr + 32 + 32 + 0 + 27, false);
            A.store.Bool(ptr + 32 + 32 + 0 + 25, false);

            A.store.Bool(ptr + 32 + 32 + 32 + 28, false);
            A.store.Ref(ptr + 32 + 32 + 32 + 0, undefined);
            A.store.Ref(ptr + 32 + 32 + 32 + 4, undefined);
            A.store.Ref(ptr + 32 + 32 + 32 + 8, undefined);
            A.store.Ref(ptr + 32 + 32 + 32 + 12, undefined);
            A.store.Ref(ptr + 32 + 32 + 32 + 16, undefined);
            A.store.Ref(ptr + 32 + 32 + 32 + 20, undefined);
            A.store.Bool(ptr + 32 + 32 + 32 + 26, false);
            A.store.Bool(ptr + 32 + 32 + 32 + 24, false);
            A.store.Bool(ptr + 32 + 32 + 32 + 27, false);
            A.store.Bool(ptr + 32 + 32 + 32 + 25, false);

            A.store.Bool(ptr + 32 + 32 + 64 + 28, false);
            A.store.Ref(ptr + 32 + 32 + 64 + 0, undefined);
            A.store.Ref(ptr + 32 + 32 + 64 + 4, undefined);
            A.store.Ref(ptr + 32 + 32 + 64 + 8, undefined);
            A.store.Ref(ptr + 32 + 32 + 64 + 12, undefined);
            A.store.Ref(ptr + 32 + 32 + 64 + 16, undefined);
            A.store.Ref(ptr + 32 + 32 + 64 + 20, undefined);
            A.store.Bool(ptr + 32 + 32 + 64 + 26, false);
            A.store.Bool(ptr + 32 + 32 + 64 + 24, false);
            A.store.Bool(ptr + 32 + 32 + 64 + 27, false);
            A.store.Bool(ptr + 32 + 32 + 64 + 25, false);

            A.store.Bool(ptr + 32 + 32 + 96 + 28, false);
            A.store.Ref(ptr + 32 + 32 + 96 + 0, undefined);
            A.store.Ref(ptr + 32 + 32 + 96 + 4, undefined);
            A.store.Ref(ptr + 32 + 32 + 96 + 8, undefined);
            A.store.Ref(ptr + 32 + 32 + 96 + 12, undefined);
            A.store.Ref(ptr + 32 + 32 + 96 + 16, undefined);
            A.store.Ref(ptr + 32 + 32 + 96 + 20, undefined);
            A.store.Bool(ptr + 32 + 32 + 96 + 26, false);
            A.store.Bool(ptr + 32 + 32 + 96 + 24, false);
            A.store.Bool(ptr + 32 + 32 + 96 + 27, false);
            A.store.Bool(ptr + 32 + 32 + 96 + 25, false);
          } else {
            A.store.Bool(ptr + 32 + 32 + 125, true);

            if (typeof x["ClientCertPattern"]["Issuer"]["CommonName"] === "undefined") {
              A.store.Bool(ptr + 32 + 32 + 0 + 28, false);
              A.store.Ref(ptr + 32 + 32 + 0 + 0, undefined);
              A.store.Ref(ptr + 32 + 32 + 0 + 4, undefined);
              A.store.Ref(ptr + 32 + 32 + 0 + 8, undefined);
              A.store.Ref(ptr + 32 + 32 + 0 + 12, undefined);
              A.store.Ref(ptr + 32 + 32 + 0 + 16, undefined);
              A.store.Ref(ptr + 32 + 32 + 0 + 20, undefined);
              A.store.Bool(ptr + 32 + 32 + 0 + 26, false);
              A.store.Bool(ptr + 32 + 32 + 0 + 24, false);
              A.store.Bool(ptr + 32 + 32 + 0 + 27, false);
              A.store.Bool(ptr + 32 + 32 + 0 + 25, false);
            } else {
              A.store.Bool(ptr + 32 + 32 + 0 + 28, true);
              A.store.Ref(ptr + 32 + 32 + 0 + 0, x["ClientCertPattern"]["Issuer"]["CommonName"]["Active"]);
              A.store.Ref(ptr + 32 + 32 + 0 + 4, x["ClientCertPattern"]["Issuer"]["CommonName"]["Effective"]);
              A.store.Ref(ptr + 32 + 32 + 0 + 8, x["ClientCertPattern"]["Issuer"]["CommonName"]["UserPolicy"]);
              A.store.Ref(ptr + 32 + 32 + 0 + 12, x["ClientCertPattern"]["Issuer"]["CommonName"]["DevicePolicy"]);
              A.store.Ref(ptr + 32 + 32 + 0 + 16, x["ClientCertPattern"]["Issuer"]["CommonName"]["UserSetting"]);
              A.store.Ref(ptr + 32 + 32 + 0 + 20, x["ClientCertPattern"]["Issuer"]["CommonName"]["SharedSetting"]);
              A.store.Bool(
                ptr + 32 + 32 + 0 + 26,
                "UserEditable" in x["ClientCertPattern"]["Issuer"]["CommonName"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 32 + 0 + 24,
                x["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 32 + 0 + 27,
                "DeviceEditable" in x["ClientCertPattern"]["Issuer"]["CommonName"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 32 + 0 + 25,
                x["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["ClientCertPattern"]["Issuer"]["Locality"] === "undefined") {
              A.store.Bool(ptr + 32 + 32 + 32 + 28, false);
              A.store.Ref(ptr + 32 + 32 + 32 + 0, undefined);
              A.store.Ref(ptr + 32 + 32 + 32 + 4, undefined);
              A.store.Ref(ptr + 32 + 32 + 32 + 8, undefined);
              A.store.Ref(ptr + 32 + 32 + 32 + 12, undefined);
              A.store.Ref(ptr + 32 + 32 + 32 + 16, undefined);
              A.store.Ref(ptr + 32 + 32 + 32 + 20, undefined);
              A.store.Bool(ptr + 32 + 32 + 32 + 26, false);
              A.store.Bool(ptr + 32 + 32 + 32 + 24, false);
              A.store.Bool(ptr + 32 + 32 + 32 + 27, false);
              A.store.Bool(ptr + 32 + 32 + 32 + 25, false);
            } else {
              A.store.Bool(ptr + 32 + 32 + 32 + 28, true);
              A.store.Ref(ptr + 32 + 32 + 32 + 0, x["ClientCertPattern"]["Issuer"]["Locality"]["Active"]);
              A.store.Ref(ptr + 32 + 32 + 32 + 4, x["ClientCertPattern"]["Issuer"]["Locality"]["Effective"]);
              A.store.Ref(ptr + 32 + 32 + 32 + 8, x["ClientCertPattern"]["Issuer"]["Locality"]["UserPolicy"]);
              A.store.Ref(ptr + 32 + 32 + 32 + 12, x["ClientCertPattern"]["Issuer"]["Locality"]["DevicePolicy"]);
              A.store.Ref(ptr + 32 + 32 + 32 + 16, x["ClientCertPattern"]["Issuer"]["Locality"]["UserSetting"]);
              A.store.Ref(ptr + 32 + 32 + 32 + 20, x["ClientCertPattern"]["Issuer"]["Locality"]["SharedSetting"]);
              A.store.Bool(
                ptr + 32 + 32 + 32 + 26,
                "UserEditable" in x["ClientCertPattern"]["Issuer"]["Locality"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 32 + 32 + 24,
                x["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 32 + 32 + 27,
                "DeviceEditable" in x["ClientCertPattern"]["Issuer"]["Locality"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 32 + 32 + 25,
                x["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["ClientCertPattern"]["Issuer"]["Organization"] === "undefined") {
              A.store.Bool(ptr + 32 + 32 + 64 + 28, false);
              A.store.Ref(ptr + 32 + 32 + 64 + 0, undefined);
              A.store.Ref(ptr + 32 + 32 + 64 + 4, undefined);
              A.store.Ref(ptr + 32 + 32 + 64 + 8, undefined);
              A.store.Ref(ptr + 32 + 32 + 64 + 12, undefined);
              A.store.Ref(ptr + 32 + 32 + 64 + 16, undefined);
              A.store.Ref(ptr + 32 + 32 + 64 + 20, undefined);
              A.store.Bool(ptr + 32 + 32 + 64 + 26, false);
              A.store.Bool(ptr + 32 + 32 + 64 + 24, false);
              A.store.Bool(ptr + 32 + 32 + 64 + 27, false);
              A.store.Bool(ptr + 32 + 32 + 64 + 25, false);
            } else {
              A.store.Bool(ptr + 32 + 32 + 64 + 28, true);
              A.store.Ref(ptr + 32 + 32 + 64 + 0, x["ClientCertPattern"]["Issuer"]["Organization"]["Active"]);
              A.store.Ref(ptr + 32 + 32 + 64 + 4, x["ClientCertPattern"]["Issuer"]["Organization"]["Effective"]);
              A.store.Ref(ptr + 32 + 32 + 64 + 8, x["ClientCertPattern"]["Issuer"]["Organization"]["UserPolicy"]);
              A.store.Ref(ptr + 32 + 32 + 64 + 12, x["ClientCertPattern"]["Issuer"]["Organization"]["DevicePolicy"]);
              A.store.Ref(ptr + 32 + 32 + 64 + 16, x["ClientCertPattern"]["Issuer"]["Organization"]["UserSetting"]);
              A.store.Ref(ptr + 32 + 32 + 64 + 20, x["ClientCertPattern"]["Issuer"]["Organization"]["SharedSetting"]);
              A.store.Bool(
                ptr + 32 + 32 + 64 + 26,
                "UserEditable" in x["ClientCertPattern"]["Issuer"]["Organization"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 32 + 64 + 24,
                x["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 32 + 64 + 27,
                "DeviceEditable" in x["ClientCertPattern"]["Issuer"]["Organization"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 32 + 64 + 25,
                x["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] === "undefined") {
              A.store.Bool(ptr + 32 + 32 + 96 + 28, false);
              A.store.Ref(ptr + 32 + 32 + 96 + 0, undefined);
              A.store.Ref(ptr + 32 + 32 + 96 + 4, undefined);
              A.store.Ref(ptr + 32 + 32 + 96 + 8, undefined);
              A.store.Ref(ptr + 32 + 32 + 96 + 12, undefined);
              A.store.Ref(ptr + 32 + 32 + 96 + 16, undefined);
              A.store.Ref(ptr + 32 + 32 + 96 + 20, undefined);
              A.store.Bool(ptr + 32 + 32 + 96 + 26, false);
              A.store.Bool(ptr + 32 + 32 + 96 + 24, false);
              A.store.Bool(ptr + 32 + 32 + 96 + 27, false);
              A.store.Bool(ptr + 32 + 32 + 96 + 25, false);
            } else {
              A.store.Bool(ptr + 32 + 32 + 96 + 28, true);
              A.store.Ref(ptr + 32 + 32 + 96 + 0, x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Active"]);
              A.store.Ref(ptr + 32 + 32 + 96 + 4, x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Effective"]);
              A.store.Ref(ptr + 32 + 32 + 96 + 8, x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserPolicy"]);
              A.store.Ref(
                ptr + 32 + 32 + 96 + 12,
                x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DevicePolicy"]
              );
              A.store.Ref(
                ptr + 32 + 32 + 96 + 16,
                x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserSetting"]
              );
              A.store.Ref(
                ptr + 32 + 32 + 96 + 20,
                x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["SharedSetting"]
              );
              A.store.Bool(
                ptr + 32 + 32 + 96 + 26,
                "UserEditable" in x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 32 + 96 + 24,
                x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 32 + 96 + 27,
                "DeviceEditable" in x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 32 + 96 + 25,
                x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"] ? true : false
              );
            }
          }

          if (typeof x["ClientCertPattern"]["IssuerCARef"] === "undefined") {
            A.store.Bool(ptr + 32 + 160 + 28, false);
            A.store.Ref(ptr + 32 + 160 + 0, undefined);
            A.store.Ref(ptr + 32 + 160 + 4, undefined);
            A.store.Ref(ptr + 32 + 160 + 8, undefined);
            A.store.Ref(ptr + 32 + 160 + 12, undefined);
            A.store.Ref(ptr + 32 + 160 + 16, undefined);
            A.store.Ref(ptr + 32 + 160 + 20, undefined);
            A.store.Bool(ptr + 32 + 160 + 26, false);
            A.store.Bool(ptr + 32 + 160 + 24, false);
            A.store.Bool(ptr + 32 + 160 + 27, false);
            A.store.Bool(ptr + 32 + 160 + 25, false);
          } else {
            A.store.Bool(ptr + 32 + 160 + 28, true);
            A.store.Ref(ptr + 32 + 160 + 0, x["ClientCertPattern"]["IssuerCARef"]["Active"]);
            A.store.Ref(ptr + 32 + 160 + 4, x["ClientCertPattern"]["IssuerCARef"]["Effective"]);
            A.store.Ref(ptr + 32 + 160 + 8, x["ClientCertPattern"]["IssuerCARef"]["UserPolicy"]);
            A.store.Ref(ptr + 32 + 160 + 12, x["ClientCertPattern"]["IssuerCARef"]["DevicePolicy"]);
            A.store.Ref(ptr + 32 + 160 + 16, x["ClientCertPattern"]["IssuerCARef"]["UserSetting"]);
            A.store.Ref(ptr + 32 + 160 + 20, x["ClientCertPattern"]["IssuerCARef"]["SharedSetting"]);
            A.store.Bool(ptr + 32 + 160 + 26, "UserEditable" in x["ClientCertPattern"]["IssuerCARef"] ? true : false);
            A.store.Bool(ptr + 32 + 160 + 24, x["ClientCertPattern"]["IssuerCARef"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 32 + 160 + 27, "DeviceEditable" in x["ClientCertPattern"]["IssuerCARef"] ? true : false);
            A.store.Bool(ptr + 32 + 160 + 25, x["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["ClientCertPattern"]["Subject"] === "undefined") {
            A.store.Bool(ptr + 32 + 192 + 125, false);

            A.store.Bool(ptr + 32 + 192 + 0 + 28, false);
            A.store.Ref(ptr + 32 + 192 + 0 + 0, undefined);
            A.store.Ref(ptr + 32 + 192 + 0 + 4, undefined);
            A.store.Ref(ptr + 32 + 192 + 0 + 8, undefined);
            A.store.Ref(ptr + 32 + 192 + 0 + 12, undefined);
            A.store.Ref(ptr + 32 + 192 + 0 + 16, undefined);
            A.store.Ref(ptr + 32 + 192 + 0 + 20, undefined);
            A.store.Bool(ptr + 32 + 192 + 0 + 26, false);
            A.store.Bool(ptr + 32 + 192 + 0 + 24, false);
            A.store.Bool(ptr + 32 + 192 + 0 + 27, false);
            A.store.Bool(ptr + 32 + 192 + 0 + 25, false);

            A.store.Bool(ptr + 32 + 192 + 32 + 28, false);
            A.store.Ref(ptr + 32 + 192 + 32 + 0, undefined);
            A.store.Ref(ptr + 32 + 192 + 32 + 4, undefined);
            A.store.Ref(ptr + 32 + 192 + 32 + 8, undefined);
            A.store.Ref(ptr + 32 + 192 + 32 + 12, undefined);
            A.store.Ref(ptr + 32 + 192 + 32 + 16, undefined);
            A.store.Ref(ptr + 32 + 192 + 32 + 20, undefined);
            A.store.Bool(ptr + 32 + 192 + 32 + 26, false);
            A.store.Bool(ptr + 32 + 192 + 32 + 24, false);
            A.store.Bool(ptr + 32 + 192 + 32 + 27, false);
            A.store.Bool(ptr + 32 + 192 + 32 + 25, false);

            A.store.Bool(ptr + 32 + 192 + 64 + 28, false);
            A.store.Ref(ptr + 32 + 192 + 64 + 0, undefined);
            A.store.Ref(ptr + 32 + 192 + 64 + 4, undefined);
            A.store.Ref(ptr + 32 + 192 + 64 + 8, undefined);
            A.store.Ref(ptr + 32 + 192 + 64 + 12, undefined);
            A.store.Ref(ptr + 32 + 192 + 64 + 16, undefined);
            A.store.Ref(ptr + 32 + 192 + 64 + 20, undefined);
            A.store.Bool(ptr + 32 + 192 + 64 + 26, false);
            A.store.Bool(ptr + 32 + 192 + 64 + 24, false);
            A.store.Bool(ptr + 32 + 192 + 64 + 27, false);
            A.store.Bool(ptr + 32 + 192 + 64 + 25, false);

            A.store.Bool(ptr + 32 + 192 + 96 + 28, false);
            A.store.Ref(ptr + 32 + 192 + 96 + 0, undefined);
            A.store.Ref(ptr + 32 + 192 + 96 + 4, undefined);
            A.store.Ref(ptr + 32 + 192 + 96 + 8, undefined);
            A.store.Ref(ptr + 32 + 192 + 96 + 12, undefined);
            A.store.Ref(ptr + 32 + 192 + 96 + 16, undefined);
            A.store.Ref(ptr + 32 + 192 + 96 + 20, undefined);
            A.store.Bool(ptr + 32 + 192 + 96 + 26, false);
            A.store.Bool(ptr + 32 + 192 + 96 + 24, false);
            A.store.Bool(ptr + 32 + 192 + 96 + 27, false);
            A.store.Bool(ptr + 32 + 192 + 96 + 25, false);
          } else {
            A.store.Bool(ptr + 32 + 192 + 125, true);

            if (typeof x["ClientCertPattern"]["Subject"]["CommonName"] === "undefined") {
              A.store.Bool(ptr + 32 + 192 + 0 + 28, false);
              A.store.Ref(ptr + 32 + 192 + 0 + 0, undefined);
              A.store.Ref(ptr + 32 + 192 + 0 + 4, undefined);
              A.store.Ref(ptr + 32 + 192 + 0 + 8, undefined);
              A.store.Ref(ptr + 32 + 192 + 0 + 12, undefined);
              A.store.Ref(ptr + 32 + 192 + 0 + 16, undefined);
              A.store.Ref(ptr + 32 + 192 + 0 + 20, undefined);
              A.store.Bool(ptr + 32 + 192 + 0 + 26, false);
              A.store.Bool(ptr + 32 + 192 + 0 + 24, false);
              A.store.Bool(ptr + 32 + 192 + 0 + 27, false);
              A.store.Bool(ptr + 32 + 192 + 0 + 25, false);
            } else {
              A.store.Bool(ptr + 32 + 192 + 0 + 28, true);
              A.store.Ref(ptr + 32 + 192 + 0 + 0, x["ClientCertPattern"]["Subject"]["CommonName"]["Active"]);
              A.store.Ref(ptr + 32 + 192 + 0 + 4, x["ClientCertPattern"]["Subject"]["CommonName"]["Effective"]);
              A.store.Ref(ptr + 32 + 192 + 0 + 8, x["ClientCertPattern"]["Subject"]["CommonName"]["UserPolicy"]);
              A.store.Ref(ptr + 32 + 192 + 0 + 12, x["ClientCertPattern"]["Subject"]["CommonName"]["DevicePolicy"]);
              A.store.Ref(ptr + 32 + 192 + 0 + 16, x["ClientCertPattern"]["Subject"]["CommonName"]["UserSetting"]);
              A.store.Ref(ptr + 32 + 192 + 0 + 20, x["ClientCertPattern"]["Subject"]["CommonName"]["SharedSetting"]);
              A.store.Bool(
                ptr + 32 + 192 + 0 + 26,
                "UserEditable" in x["ClientCertPattern"]["Subject"]["CommonName"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 192 + 0 + 24,
                x["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 192 + 0 + 27,
                "DeviceEditable" in x["ClientCertPattern"]["Subject"]["CommonName"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 192 + 0 + 25,
                x["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["ClientCertPattern"]["Subject"]["Locality"] === "undefined") {
              A.store.Bool(ptr + 32 + 192 + 32 + 28, false);
              A.store.Ref(ptr + 32 + 192 + 32 + 0, undefined);
              A.store.Ref(ptr + 32 + 192 + 32 + 4, undefined);
              A.store.Ref(ptr + 32 + 192 + 32 + 8, undefined);
              A.store.Ref(ptr + 32 + 192 + 32 + 12, undefined);
              A.store.Ref(ptr + 32 + 192 + 32 + 16, undefined);
              A.store.Ref(ptr + 32 + 192 + 32 + 20, undefined);
              A.store.Bool(ptr + 32 + 192 + 32 + 26, false);
              A.store.Bool(ptr + 32 + 192 + 32 + 24, false);
              A.store.Bool(ptr + 32 + 192 + 32 + 27, false);
              A.store.Bool(ptr + 32 + 192 + 32 + 25, false);
            } else {
              A.store.Bool(ptr + 32 + 192 + 32 + 28, true);
              A.store.Ref(ptr + 32 + 192 + 32 + 0, x["ClientCertPattern"]["Subject"]["Locality"]["Active"]);
              A.store.Ref(ptr + 32 + 192 + 32 + 4, x["ClientCertPattern"]["Subject"]["Locality"]["Effective"]);
              A.store.Ref(ptr + 32 + 192 + 32 + 8, x["ClientCertPattern"]["Subject"]["Locality"]["UserPolicy"]);
              A.store.Ref(ptr + 32 + 192 + 32 + 12, x["ClientCertPattern"]["Subject"]["Locality"]["DevicePolicy"]);
              A.store.Ref(ptr + 32 + 192 + 32 + 16, x["ClientCertPattern"]["Subject"]["Locality"]["UserSetting"]);
              A.store.Ref(ptr + 32 + 192 + 32 + 20, x["ClientCertPattern"]["Subject"]["Locality"]["SharedSetting"]);
              A.store.Bool(
                ptr + 32 + 192 + 32 + 26,
                "UserEditable" in x["ClientCertPattern"]["Subject"]["Locality"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 192 + 32 + 24,
                x["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 192 + 32 + 27,
                "DeviceEditable" in x["ClientCertPattern"]["Subject"]["Locality"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 192 + 32 + 25,
                x["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["ClientCertPattern"]["Subject"]["Organization"] === "undefined") {
              A.store.Bool(ptr + 32 + 192 + 64 + 28, false);
              A.store.Ref(ptr + 32 + 192 + 64 + 0, undefined);
              A.store.Ref(ptr + 32 + 192 + 64 + 4, undefined);
              A.store.Ref(ptr + 32 + 192 + 64 + 8, undefined);
              A.store.Ref(ptr + 32 + 192 + 64 + 12, undefined);
              A.store.Ref(ptr + 32 + 192 + 64 + 16, undefined);
              A.store.Ref(ptr + 32 + 192 + 64 + 20, undefined);
              A.store.Bool(ptr + 32 + 192 + 64 + 26, false);
              A.store.Bool(ptr + 32 + 192 + 64 + 24, false);
              A.store.Bool(ptr + 32 + 192 + 64 + 27, false);
              A.store.Bool(ptr + 32 + 192 + 64 + 25, false);
            } else {
              A.store.Bool(ptr + 32 + 192 + 64 + 28, true);
              A.store.Ref(ptr + 32 + 192 + 64 + 0, x["ClientCertPattern"]["Subject"]["Organization"]["Active"]);
              A.store.Ref(ptr + 32 + 192 + 64 + 4, x["ClientCertPattern"]["Subject"]["Organization"]["Effective"]);
              A.store.Ref(ptr + 32 + 192 + 64 + 8, x["ClientCertPattern"]["Subject"]["Organization"]["UserPolicy"]);
              A.store.Ref(ptr + 32 + 192 + 64 + 12, x["ClientCertPattern"]["Subject"]["Organization"]["DevicePolicy"]);
              A.store.Ref(ptr + 32 + 192 + 64 + 16, x["ClientCertPattern"]["Subject"]["Organization"]["UserSetting"]);
              A.store.Ref(ptr + 32 + 192 + 64 + 20, x["ClientCertPattern"]["Subject"]["Organization"]["SharedSetting"]);
              A.store.Bool(
                ptr + 32 + 192 + 64 + 26,
                "UserEditable" in x["ClientCertPattern"]["Subject"]["Organization"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 192 + 64 + 24,
                x["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 192 + 64 + 27,
                "DeviceEditable" in x["ClientCertPattern"]["Subject"]["Organization"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 192 + 64 + 25,
                x["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["ClientCertPattern"]["Subject"]["OrganizationalUnit"] === "undefined") {
              A.store.Bool(ptr + 32 + 192 + 96 + 28, false);
              A.store.Ref(ptr + 32 + 192 + 96 + 0, undefined);
              A.store.Ref(ptr + 32 + 192 + 96 + 4, undefined);
              A.store.Ref(ptr + 32 + 192 + 96 + 8, undefined);
              A.store.Ref(ptr + 32 + 192 + 96 + 12, undefined);
              A.store.Ref(ptr + 32 + 192 + 96 + 16, undefined);
              A.store.Ref(ptr + 32 + 192 + 96 + 20, undefined);
              A.store.Bool(ptr + 32 + 192 + 96 + 26, false);
              A.store.Bool(ptr + 32 + 192 + 96 + 24, false);
              A.store.Bool(ptr + 32 + 192 + 96 + 27, false);
              A.store.Bool(ptr + 32 + 192 + 96 + 25, false);
            } else {
              A.store.Bool(ptr + 32 + 192 + 96 + 28, true);
              A.store.Ref(ptr + 32 + 192 + 96 + 0, x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Active"]);
              A.store.Ref(
                ptr + 32 + 192 + 96 + 4,
                x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Effective"]
              );
              A.store.Ref(
                ptr + 32 + 192 + 96 + 8,
                x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserPolicy"]
              );
              A.store.Ref(
                ptr + 32 + 192 + 96 + 12,
                x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DevicePolicy"]
              );
              A.store.Ref(
                ptr + 32 + 192 + 96 + 16,
                x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserSetting"]
              );
              A.store.Ref(
                ptr + 32 + 192 + 96 + 20,
                x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["SharedSetting"]
              );
              A.store.Bool(
                ptr + 32 + 192 + 96 + 26,
                "UserEditable" in x["ClientCertPattern"]["Subject"]["OrganizationalUnit"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 192 + 96 + 24,
                x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 192 + 96 + 27,
                "DeviceEditable" in x["ClientCertPattern"]["Subject"]["OrganizationalUnit"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 192 + 96 + 25,
                x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"] ? true : false
              );
            }
          }
        }

        if (typeof x["ClientCertPKCS11Id"] === "undefined") {
          A.store.Bool(ptr + 352 + 28, false);
          A.store.Ref(ptr + 352 + 0, undefined);
          A.store.Ref(ptr + 352 + 4, undefined);
          A.store.Ref(ptr + 352 + 8, undefined);
          A.store.Ref(ptr + 352 + 12, undefined);
          A.store.Ref(ptr + 352 + 16, undefined);
          A.store.Ref(ptr + 352 + 20, undefined);
          A.store.Bool(ptr + 352 + 26, false);
          A.store.Bool(ptr + 352 + 24, false);
          A.store.Bool(ptr + 352 + 27, false);
          A.store.Bool(ptr + 352 + 25, false);
        } else {
          A.store.Bool(ptr + 352 + 28, true);
          A.store.Ref(ptr + 352 + 0, x["ClientCertPKCS11Id"]["Active"]);
          A.store.Ref(ptr + 352 + 4, x["ClientCertPKCS11Id"]["Effective"]);
          A.store.Ref(ptr + 352 + 8, x["ClientCertPKCS11Id"]["UserPolicy"]);
          A.store.Ref(ptr + 352 + 12, x["ClientCertPKCS11Id"]["DevicePolicy"]);
          A.store.Ref(ptr + 352 + 16, x["ClientCertPKCS11Id"]["UserSetting"]);
          A.store.Ref(ptr + 352 + 20, x["ClientCertPKCS11Id"]["SharedSetting"]);
          A.store.Bool(ptr + 352 + 26, "UserEditable" in x["ClientCertPKCS11Id"] ? true : false);
          A.store.Bool(ptr + 352 + 24, x["ClientCertPKCS11Id"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 352 + 27, "DeviceEditable" in x["ClientCertPKCS11Id"] ? true : false);
          A.store.Bool(ptr + 352 + 25, x["ClientCertPKCS11Id"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["ClientCertProvisioningProfileId"] === "undefined") {
          A.store.Bool(ptr + 384 + 28, false);
          A.store.Ref(ptr + 384 + 0, undefined);
          A.store.Ref(ptr + 384 + 4, undefined);
          A.store.Ref(ptr + 384 + 8, undefined);
          A.store.Ref(ptr + 384 + 12, undefined);
          A.store.Ref(ptr + 384 + 16, undefined);
          A.store.Ref(ptr + 384 + 20, undefined);
          A.store.Bool(ptr + 384 + 26, false);
          A.store.Bool(ptr + 384 + 24, false);
          A.store.Bool(ptr + 384 + 27, false);
          A.store.Bool(ptr + 384 + 25, false);
        } else {
          A.store.Bool(ptr + 384 + 28, true);
          A.store.Ref(ptr + 384 + 0, x["ClientCertProvisioningProfileId"]["Active"]);
          A.store.Ref(ptr + 384 + 4, x["ClientCertProvisioningProfileId"]["Effective"]);
          A.store.Ref(ptr + 384 + 8, x["ClientCertProvisioningProfileId"]["UserPolicy"]);
          A.store.Ref(ptr + 384 + 12, x["ClientCertProvisioningProfileId"]["DevicePolicy"]);
          A.store.Ref(ptr + 384 + 16, x["ClientCertProvisioningProfileId"]["UserSetting"]);
          A.store.Ref(ptr + 384 + 20, x["ClientCertProvisioningProfileId"]["SharedSetting"]);
          A.store.Bool(ptr + 384 + 26, "UserEditable" in x["ClientCertProvisioningProfileId"] ? true : false);
          A.store.Bool(ptr + 384 + 24, x["ClientCertProvisioningProfileId"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 384 + 27, "DeviceEditable" in x["ClientCertProvisioningProfileId"] ? true : false);
          A.store.Bool(ptr + 384 + 25, x["ClientCertProvisioningProfileId"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["ClientCertRef"] === "undefined") {
          A.store.Bool(ptr + 416 + 28, false);
          A.store.Ref(ptr + 416 + 0, undefined);
          A.store.Ref(ptr + 416 + 4, undefined);
          A.store.Ref(ptr + 416 + 8, undefined);
          A.store.Ref(ptr + 416 + 12, undefined);
          A.store.Ref(ptr + 416 + 16, undefined);
          A.store.Ref(ptr + 416 + 20, undefined);
          A.store.Bool(ptr + 416 + 26, false);
          A.store.Bool(ptr + 416 + 24, false);
          A.store.Bool(ptr + 416 + 27, false);
          A.store.Bool(ptr + 416 + 25, false);
        } else {
          A.store.Bool(ptr + 416 + 28, true);
          A.store.Ref(ptr + 416 + 0, x["ClientCertRef"]["Active"]);
          A.store.Ref(ptr + 416 + 4, x["ClientCertRef"]["Effective"]);
          A.store.Ref(ptr + 416 + 8, x["ClientCertRef"]["UserPolicy"]);
          A.store.Ref(ptr + 416 + 12, x["ClientCertRef"]["DevicePolicy"]);
          A.store.Ref(ptr + 416 + 16, x["ClientCertRef"]["UserSetting"]);
          A.store.Ref(ptr + 416 + 20, x["ClientCertRef"]["SharedSetting"]);
          A.store.Bool(ptr + 416 + 26, "UserEditable" in x["ClientCertRef"] ? true : false);
          A.store.Bool(ptr + 416 + 24, x["ClientCertRef"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 416 + 27, "DeviceEditable" in x["ClientCertRef"] ? true : false);
          A.store.Bool(ptr + 416 + 25, x["ClientCertRef"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["ClientCertType"] === "undefined") {
          A.store.Bool(ptr + 448 + 28, false);
          A.store.Ref(ptr + 448 + 0, undefined);
          A.store.Ref(ptr + 448 + 4, undefined);
          A.store.Ref(ptr + 448 + 8, undefined);
          A.store.Ref(ptr + 448 + 12, undefined);
          A.store.Ref(ptr + 448 + 16, undefined);
          A.store.Ref(ptr + 448 + 20, undefined);
          A.store.Bool(ptr + 448 + 26, false);
          A.store.Bool(ptr + 448 + 24, false);
          A.store.Bool(ptr + 448 + 27, false);
          A.store.Bool(ptr + 448 + 25, false);
        } else {
          A.store.Bool(ptr + 448 + 28, true);
          A.store.Ref(ptr + 448 + 0, x["ClientCertType"]["Active"]);
          A.store.Ref(ptr + 448 + 4, x["ClientCertType"]["Effective"]);
          A.store.Ref(ptr + 448 + 8, x["ClientCertType"]["UserPolicy"]);
          A.store.Ref(ptr + 448 + 12, x["ClientCertType"]["DevicePolicy"]);
          A.store.Ref(ptr + 448 + 16, x["ClientCertType"]["UserSetting"]);
          A.store.Ref(ptr + 448 + 20, x["ClientCertType"]["SharedSetting"]);
          A.store.Bool(ptr + 448 + 26, "UserEditable" in x["ClientCertType"] ? true : false);
          A.store.Bool(ptr + 448 + 24, x["ClientCertType"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 448 + 27, "DeviceEditable" in x["ClientCertType"] ? true : false);
          A.store.Bool(ptr + 448 + 25, x["ClientCertType"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["Identity"] === "undefined") {
          A.store.Bool(ptr + 480 + 28, false);
          A.store.Ref(ptr + 480 + 0, undefined);
          A.store.Ref(ptr + 480 + 4, undefined);
          A.store.Ref(ptr + 480 + 8, undefined);
          A.store.Ref(ptr + 480 + 12, undefined);
          A.store.Ref(ptr + 480 + 16, undefined);
          A.store.Ref(ptr + 480 + 20, undefined);
          A.store.Bool(ptr + 480 + 26, false);
          A.store.Bool(ptr + 480 + 24, false);
          A.store.Bool(ptr + 480 + 27, false);
          A.store.Bool(ptr + 480 + 25, false);
        } else {
          A.store.Bool(ptr + 480 + 28, true);
          A.store.Ref(ptr + 480 + 0, x["Identity"]["Active"]);
          A.store.Ref(ptr + 480 + 4, x["Identity"]["Effective"]);
          A.store.Ref(ptr + 480 + 8, x["Identity"]["UserPolicy"]);
          A.store.Ref(ptr + 480 + 12, x["Identity"]["DevicePolicy"]);
          A.store.Ref(ptr + 480 + 16, x["Identity"]["UserSetting"]);
          A.store.Ref(ptr + 480 + 20, x["Identity"]["SharedSetting"]);
          A.store.Bool(ptr + 480 + 26, "UserEditable" in x["Identity"] ? true : false);
          A.store.Bool(ptr + 480 + 24, x["Identity"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 480 + 27, "DeviceEditable" in x["Identity"] ? true : false);
          A.store.Bool(ptr + 480 + 25, x["Identity"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["Inner"] === "undefined") {
          A.store.Bool(ptr + 512 + 28, false);
          A.store.Ref(ptr + 512 + 0, undefined);
          A.store.Ref(ptr + 512 + 4, undefined);
          A.store.Ref(ptr + 512 + 8, undefined);
          A.store.Ref(ptr + 512 + 12, undefined);
          A.store.Ref(ptr + 512 + 16, undefined);
          A.store.Ref(ptr + 512 + 20, undefined);
          A.store.Bool(ptr + 512 + 26, false);
          A.store.Bool(ptr + 512 + 24, false);
          A.store.Bool(ptr + 512 + 27, false);
          A.store.Bool(ptr + 512 + 25, false);
        } else {
          A.store.Bool(ptr + 512 + 28, true);
          A.store.Ref(ptr + 512 + 0, x["Inner"]["Active"]);
          A.store.Ref(ptr + 512 + 4, x["Inner"]["Effective"]);
          A.store.Ref(ptr + 512 + 8, x["Inner"]["UserPolicy"]);
          A.store.Ref(ptr + 512 + 12, x["Inner"]["DevicePolicy"]);
          A.store.Ref(ptr + 512 + 16, x["Inner"]["UserSetting"]);
          A.store.Ref(ptr + 512 + 20, x["Inner"]["SharedSetting"]);
          A.store.Bool(ptr + 512 + 26, "UserEditable" in x["Inner"] ? true : false);
          A.store.Bool(ptr + 512 + 24, x["Inner"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 512 + 27, "DeviceEditable" in x["Inner"] ? true : false);
          A.store.Bool(ptr + 512 + 25, x["Inner"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["Outer"] === "undefined") {
          A.store.Bool(ptr + 544 + 28, false);
          A.store.Ref(ptr + 544 + 0, undefined);
          A.store.Ref(ptr + 544 + 4, undefined);
          A.store.Ref(ptr + 544 + 8, undefined);
          A.store.Ref(ptr + 544 + 12, undefined);
          A.store.Ref(ptr + 544 + 16, undefined);
          A.store.Ref(ptr + 544 + 20, undefined);
          A.store.Bool(ptr + 544 + 26, false);
          A.store.Bool(ptr + 544 + 24, false);
          A.store.Bool(ptr + 544 + 27, false);
          A.store.Bool(ptr + 544 + 25, false);
        } else {
          A.store.Bool(ptr + 544 + 28, true);
          A.store.Ref(ptr + 544 + 0, x["Outer"]["Active"]);
          A.store.Ref(ptr + 544 + 4, x["Outer"]["Effective"]);
          A.store.Ref(ptr + 544 + 8, x["Outer"]["UserPolicy"]);
          A.store.Ref(ptr + 544 + 12, x["Outer"]["DevicePolicy"]);
          A.store.Ref(ptr + 544 + 16, x["Outer"]["UserSetting"]);
          A.store.Ref(ptr + 544 + 20, x["Outer"]["SharedSetting"]);
          A.store.Bool(ptr + 544 + 26, "UserEditable" in x["Outer"] ? true : false);
          A.store.Bool(ptr + 544 + 24, x["Outer"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 544 + 27, "DeviceEditable" in x["Outer"] ? true : false);
          A.store.Bool(ptr + 544 + 25, x["Outer"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["Password"] === "undefined") {
          A.store.Bool(ptr + 576 + 28, false);
          A.store.Ref(ptr + 576 + 0, undefined);
          A.store.Ref(ptr + 576 + 4, undefined);
          A.store.Ref(ptr + 576 + 8, undefined);
          A.store.Ref(ptr + 576 + 12, undefined);
          A.store.Ref(ptr + 576 + 16, undefined);
          A.store.Ref(ptr + 576 + 20, undefined);
          A.store.Bool(ptr + 576 + 26, false);
          A.store.Bool(ptr + 576 + 24, false);
          A.store.Bool(ptr + 576 + 27, false);
          A.store.Bool(ptr + 576 + 25, false);
        } else {
          A.store.Bool(ptr + 576 + 28, true);
          A.store.Ref(ptr + 576 + 0, x["Password"]["Active"]);
          A.store.Ref(ptr + 576 + 4, x["Password"]["Effective"]);
          A.store.Ref(ptr + 576 + 8, x["Password"]["UserPolicy"]);
          A.store.Ref(ptr + 576 + 12, x["Password"]["DevicePolicy"]);
          A.store.Ref(ptr + 576 + 16, x["Password"]["UserSetting"]);
          A.store.Ref(ptr + 576 + 20, x["Password"]["SharedSetting"]);
          A.store.Bool(ptr + 576 + 26, "UserEditable" in x["Password"] ? true : false);
          A.store.Bool(ptr + 576 + 24, x["Password"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 576 + 27, "DeviceEditable" in x["Password"] ? true : false);
          A.store.Bool(ptr + 576 + 25, x["Password"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["SaveCredentials"] === "undefined") {
          A.store.Bool(ptr + 608 + 21, false);
          A.store.Bool(ptr + 608 + 14, false);
          A.store.Bool(ptr + 608 + 0, false);
          A.store.Ref(ptr + 608 + 4, undefined);
          A.store.Bool(ptr + 608 + 15, false);
          A.store.Bool(ptr + 608 + 8, false);
          A.store.Bool(ptr + 608 + 16, false);
          A.store.Bool(ptr + 608 + 9, false);
          A.store.Bool(ptr + 608 + 17, false);
          A.store.Bool(ptr + 608 + 10, false);
          A.store.Bool(ptr + 608 + 18, false);
          A.store.Bool(ptr + 608 + 11, false);
          A.store.Bool(ptr + 608 + 19, false);
          A.store.Bool(ptr + 608 + 12, false);
          A.store.Bool(ptr + 608 + 20, false);
          A.store.Bool(ptr + 608 + 13, false);
        } else {
          A.store.Bool(ptr + 608 + 21, true);
          A.store.Bool(ptr + 608 + 14, "Active" in x["SaveCredentials"] ? true : false);
          A.store.Bool(ptr + 608 + 0, x["SaveCredentials"]["Active"] ? true : false);
          A.store.Ref(ptr + 608 + 4, x["SaveCredentials"]["Effective"]);
          A.store.Bool(ptr + 608 + 15, "UserPolicy" in x["SaveCredentials"] ? true : false);
          A.store.Bool(ptr + 608 + 8, x["SaveCredentials"]["UserPolicy"] ? true : false);
          A.store.Bool(ptr + 608 + 16, "DevicePolicy" in x["SaveCredentials"] ? true : false);
          A.store.Bool(ptr + 608 + 9, x["SaveCredentials"]["DevicePolicy"] ? true : false);
          A.store.Bool(ptr + 608 + 17, "UserSetting" in x["SaveCredentials"] ? true : false);
          A.store.Bool(ptr + 608 + 10, x["SaveCredentials"]["UserSetting"] ? true : false);
          A.store.Bool(ptr + 608 + 18, "SharedSetting" in x["SaveCredentials"] ? true : false);
          A.store.Bool(ptr + 608 + 11, x["SaveCredentials"]["SharedSetting"] ? true : false);
          A.store.Bool(ptr + 608 + 19, "UserEditable" in x["SaveCredentials"] ? true : false);
          A.store.Bool(ptr + 608 + 12, x["SaveCredentials"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 608 + 20, "DeviceEditable" in x["SaveCredentials"] ? true : false);
          A.store.Bool(ptr + 608 + 13, x["SaveCredentials"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["ServerCAPEMs"] === "undefined") {
          A.store.Bool(ptr + 632 + 28, false);
          A.store.Ref(ptr + 632 + 0, undefined);
          A.store.Ref(ptr + 632 + 4, undefined);
          A.store.Ref(ptr + 632 + 8, undefined);
          A.store.Ref(ptr + 632 + 12, undefined);
          A.store.Ref(ptr + 632 + 16, undefined);
          A.store.Ref(ptr + 632 + 20, undefined);
          A.store.Bool(ptr + 632 + 26, false);
          A.store.Bool(ptr + 632 + 24, false);
          A.store.Bool(ptr + 632 + 27, false);
          A.store.Bool(ptr + 632 + 25, false);
        } else {
          A.store.Bool(ptr + 632 + 28, true);
          A.store.Ref(ptr + 632 + 0, x["ServerCAPEMs"]["Active"]);
          A.store.Ref(ptr + 632 + 4, x["ServerCAPEMs"]["Effective"]);
          A.store.Ref(ptr + 632 + 8, x["ServerCAPEMs"]["UserPolicy"]);
          A.store.Ref(ptr + 632 + 12, x["ServerCAPEMs"]["DevicePolicy"]);
          A.store.Ref(ptr + 632 + 16, x["ServerCAPEMs"]["UserSetting"]);
          A.store.Ref(ptr + 632 + 20, x["ServerCAPEMs"]["SharedSetting"]);
          A.store.Bool(ptr + 632 + 26, "UserEditable" in x["ServerCAPEMs"] ? true : false);
          A.store.Bool(ptr + 632 + 24, x["ServerCAPEMs"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 632 + 27, "DeviceEditable" in x["ServerCAPEMs"] ? true : false);
          A.store.Bool(ptr + 632 + 25, x["ServerCAPEMs"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["ServerCARefs"] === "undefined") {
          A.store.Bool(ptr + 664 + 28, false);
          A.store.Ref(ptr + 664 + 0, undefined);
          A.store.Ref(ptr + 664 + 4, undefined);
          A.store.Ref(ptr + 664 + 8, undefined);
          A.store.Ref(ptr + 664 + 12, undefined);
          A.store.Ref(ptr + 664 + 16, undefined);
          A.store.Ref(ptr + 664 + 20, undefined);
          A.store.Bool(ptr + 664 + 26, false);
          A.store.Bool(ptr + 664 + 24, false);
          A.store.Bool(ptr + 664 + 27, false);
          A.store.Bool(ptr + 664 + 25, false);
        } else {
          A.store.Bool(ptr + 664 + 28, true);
          A.store.Ref(ptr + 664 + 0, x["ServerCARefs"]["Active"]);
          A.store.Ref(ptr + 664 + 4, x["ServerCARefs"]["Effective"]);
          A.store.Ref(ptr + 664 + 8, x["ServerCARefs"]["UserPolicy"]);
          A.store.Ref(ptr + 664 + 12, x["ServerCARefs"]["DevicePolicy"]);
          A.store.Ref(ptr + 664 + 16, x["ServerCARefs"]["UserSetting"]);
          A.store.Ref(ptr + 664 + 20, x["ServerCARefs"]["SharedSetting"]);
          A.store.Bool(ptr + 664 + 26, "UserEditable" in x["ServerCARefs"] ? true : false);
          A.store.Bool(ptr + 664 + 24, x["ServerCARefs"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 664 + 27, "DeviceEditable" in x["ServerCARefs"] ? true : false);
          A.store.Bool(ptr + 664 + 25, x["ServerCARefs"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["SubjectMatch"] === "undefined") {
          A.store.Bool(ptr + 696 + 28, false);
          A.store.Ref(ptr + 696 + 0, undefined);
          A.store.Ref(ptr + 696 + 4, undefined);
          A.store.Ref(ptr + 696 + 8, undefined);
          A.store.Ref(ptr + 696 + 12, undefined);
          A.store.Ref(ptr + 696 + 16, undefined);
          A.store.Ref(ptr + 696 + 20, undefined);
          A.store.Bool(ptr + 696 + 26, false);
          A.store.Bool(ptr + 696 + 24, false);
          A.store.Bool(ptr + 696 + 27, false);
          A.store.Bool(ptr + 696 + 25, false);
        } else {
          A.store.Bool(ptr + 696 + 28, true);
          A.store.Ref(ptr + 696 + 0, x["SubjectMatch"]["Active"]);
          A.store.Ref(ptr + 696 + 4, x["SubjectMatch"]["Effective"]);
          A.store.Ref(ptr + 696 + 8, x["SubjectMatch"]["UserPolicy"]);
          A.store.Ref(ptr + 696 + 12, x["SubjectMatch"]["DevicePolicy"]);
          A.store.Ref(ptr + 696 + 16, x["SubjectMatch"]["UserSetting"]);
          A.store.Ref(ptr + 696 + 20, x["SubjectMatch"]["SharedSetting"]);
          A.store.Bool(ptr + 696 + 26, "UserEditable" in x["SubjectMatch"] ? true : false);
          A.store.Bool(ptr + 696 + 24, x["SubjectMatch"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 696 + 27, "DeviceEditable" in x["SubjectMatch"] ? true : false);
          A.store.Bool(ptr + 696 + 25, x["SubjectMatch"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["TLSVersionMax"] === "undefined") {
          A.store.Bool(ptr + 728 + 28, false);
          A.store.Ref(ptr + 728 + 0, undefined);
          A.store.Ref(ptr + 728 + 4, undefined);
          A.store.Ref(ptr + 728 + 8, undefined);
          A.store.Ref(ptr + 728 + 12, undefined);
          A.store.Ref(ptr + 728 + 16, undefined);
          A.store.Ref(ptr + 728 + 20, undefined);
          A.store.Bool(ptr + 728 + 26, false);
          A.store.Bool(ptr + 728 + 24, false);
          A.store.Bool(ptr + 728 + 27, false);
          A.store.Bool(ptr + 728 + 25, false);
        } else {
          A.store.Bool(ptr + 728 + 28, true);
          A.store.Ref(ptr + 728 + 0, x["TLSVersionMax"]["Active"]);
          A.store.Ref(ptr + 728 + 4, x["TLSVersionMax"]["Effective"]);
          A.store.Ref(ptr + 728 + 8, x["TLSVersionMax"]["UserPolicy"]);
          A.store.Ref(ptr + 728 + 12, x["TLSVersionMax"]["DevicePolicy"]);
          A.store.Ref(ptr + 728 + 16, x["TLSVersionMax"]["UserSetting"]);
          A.store.Ref(ptr + 728 + 20, x["TLSVersionMax"]["SharedSetting"]);
          A.store.Bool(ptr + 728 + 26, "UserEditable" in x["TLSVersionMax"] ? true : false);
          A.store.Bool(ptr + 728 + 24, x["TLSVersionMax"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 728 + 27, "DeviceEditable" in x["TLSVersionMax"] ? true : false);
          A.store.Bool(ptr + 728 + 25, x["TLSVersionMax"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["UseProactiveKeyCaching"] === "undefined") {
          A.store.Bool(ptr + 760 + 21, false);
          A.store.Bool(ptr + 760 + 14, false);
          A.store.Bool(ptr + 760 + 0, false);
          A.store.Ref(ptr + 760 + 4, undefined);
          A.store.Bool(ptr + 760 + 15, false);
          A.store.Bool(ptr + 760 + 8, false);
          A.store.Bool(ptr + 760 + 16, false);
          A.store.Bool(ptr + 760 + 9, false);
          A.store.Bool(ptr + 760 + 17, false);
          A.store.Bool(ptr + 760 + 10, false);
          A.store.Bool(ptr + 760 + 18, false);
          A.store.Bool(ptr + 760 + 11, false);
          A.store.Bool(ptr + 760 + 19, false);
          A.store.Bool(ptr + 760 + 12, false);
          A.store.Bool(ptr + 760 + 20, false);
          A.store.Bool(ptr + 760 + 13, false);
        } else {
          A.store.Bool(ptr + 760 + 21, true);
          A.store.Bool(ptr + 760 + 14, "Active" in x["UseProactiveKeyCaching"] ? true : false);
          A.store.Bool(ptr + 760 + 0, x["UseProactiveKeyCaching"]["Active"] ? true : false);
          A.store.Ref(ptr + 760 + 4, x["UseProactiveKeyCaching"]["Effective"]);
          A.store.Bool(ptr + 760 + 15, "UserPolicy" in x["UseProactiveKeyCaching"] ? true : false);
          A.store.Bool(ptr + 760 + 8, x["UseProactiveKeyCaching"]["UserPolicy"] ? true : false);
          A.store.Bool(ptr + 760 + 16, "DevicePolicy" in x["UseProactiveKeyCaching"] ? true : false);
          A.store.Bool(ptr + 760 + 9, x["UseProactiveKeyCaching"]["DevicePolicy"] ? true : false);
          A.store.Bool(ptr + 760 + 17, "UserSetting" in x["UseProactiveKeyCaching"] ? true : false);
          A.store.Bool(ptr + 760 + 10, x["UseProactiveKeyCaching"]["UserSetting"] ? true : false);
          A.store.Bool(ptr + 760 + 18, "SharedSetting" in x["UseProactiveKeyCaching"] ? true : false);
          A.store.Bool(ptr + 760 + 11, x["UseProactiveKeyCaching"]["SharedSetting"] ? true : false);
          A.store.Bool(ptr + 760 + 19, "UserEditable" in x["UseProactiveKeyCaching"] ? true : false);
          A.store.Bool(ptr + 760 + 12, x["UseProactiveKeyCaching"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 760 + 20, "DeviceEditable" in x["UseProactiveKeyCaching"] ? true : false);
          A.store.Bool(ptr + 760 + 13, x["UseProactiveKeyCaching"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["UseSystemCAs"] === "undefined") {
          A.store.Bool(ptr + 784 + 21, false);
          A.store.Bool(ptr + 784 + 14, false);
          A.store.Bool(ptr + 784 + 0, false);
          A.store.Ref(ptr + 784 + 4, undefined);
          A.store.Bool(ptr + 784 + 15, false);
          A.store.Bool(ptr + 784 + 8, false);
          A.store.Bool(ptr + 784 + 16, false);
          A.store.Bool(ptr + 784 + 9, false);
          A.store.Bool(ptr + 784 + 17, false);
          A.store.Bool(ptr + 784 + 10, false);
          A.store.Bool(ptr + 784 + 18, false);
          A.store.Bool(ptr + 784 + 11, false);
          A.store.Bool(ptr + 784 + 19, false);
          A.store.Bool(ptr + 784 + 12, false);
          A.store.Bool(ptr + 784 + 20, false);
          A.store.Bool(ptr + 784 + 13, false);
        } else {
          A.store.Bool(ptr + 784 + 21, true);
          A.store.Bool(ptr + 784 + 14, "Active" in x["UseSystemCAs"] ? true : false);
          A.store.Bool(ptr + 784 + 0, x["UseSystemCAs"]["Active"] ? true : false);
          A.store.Ref(ptr + 784 + 4, x["UseSystemCAs"]["Effective"]);
          A.store.Bool(ptr + 784 + 15, "UserPolicy" in x["UseSystemCAs"] ? true : false);
          A.store.Bool(ptr + 784 + 8, x["UseSystemCAs"]["UserPolicy"] ? true : false);
          A.store.Bool(ptr + 784 + 16, "DevicePolicy" in x["UseSystemCAs"] ? true : false);
          A.store.Bool(ptr + 784 + 9, x["UseSystemCAs"]["DevicePolicy"] ? true : false);
          A.store.Bool(ptr + 784 + 17, "UserSetting" in x["UseSystemCAs"] ? true : false);
          A.store.Bool(ptr + 784 + 10, x["UseSystemCAs"]["UserSetting"] ? true : false);
          A.store.Bool(ptr + 784 + 18, "SharedSetting" in x["UseSystemCAs"] ? true : false);
          A.store.Bool(ptr + 784 + 11, x["UseSystemCAs"]["SharedSetting"] ? true : false);
          A.store.Bool(ptr + 784 + 19, "UserEditable" in x["UseSystemCAs"] ? true : false);
          A.store.Bool(ptr + 784 + 12, x["UseSystemCAs"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 784 + 20, "DeviceEditable" in x["UseSystemCAs"] ? true : false);
          A.store.Bool(ptr + 784 + 13, x["UseSystemCAs"]["DeviceEditable"] ? true : false);
        }
      }
    },
    "load_ManagedEAPProperties": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      if (A.load.Bool(ptr + 0 + 28)) {
        x["AnonymousIdentity"] = {};
        x["AnonymousIdentity"]["Active"] = A.load.Ref(ptr + 0 + 0, undefined);
        x["AnonymousIdentity"]["Effective"] = A.load.Ref(ptr + 0 + 4, undefined);
        x["AnonymousIdentity"]["UserPolicy"] = A.load.Ref(ptr + 0 + 8, undefined);
        x["AnonymousIdentity"]["DevicePolicy"] = A.load.Ref(ptr + 0 + 12, undefined);
        x["AnonymousIdentity"]["UserSetting"] = A.load.Ref(ptr + 0 + 16, undefined);
        x["AnonymousIdentity"]["SharedSetting"] = A.load.Ref(ptr + 0 + 20, undefined);
        if (A.load.Bool(ptr + 0 + 26)) {
          x["AnonymousIdentity"]["UserEditable"] = A.load.Bool(ptr + 0 + 24);
        } else {
          delete x["AnonymousIdentity"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 0 + 27)) {
          x["AnonymousIdentity"]["DeviceEditable"] = A.load.Bool(ptr + 0 + 25);
        } else {
          delete x["AnonymousIdentity"]["DeviceEditable"];
        }
      } else {
        delete x["AnonymousIdentity"];
      }
      if (A.load.Bool(ptr + 32 + 318)) {
        x["ClientCertPattern"] = {};
        if (A.load.Bool(ptr + 32 + 0 + 28)) {
          x["ClientCertPattern"]["EnrollmentURI"] = {};
          x["ClientCertPattern"]["EnrollmentURI"]["Active"] = A.load.Ref(ptr + 32 + 0 + 0, undefined);
          x["ClientCertPattern"]["EnrollmentURI"]["Effective"] = A.load.Ref(ptr + 32 + 0 + 4, undefined);
          x["ClientCertPattern"]["EnrollmentURI"]["UserPolicy"] = A.load.Ref(ptr + 32 + 0 + 8, undefined);
          x["ClientCertPattern"]["EnrollmentURI"]["DevicePolicy"] = A.load.Ref(ptr + 32 + 0 + 12, undefined);
          x["ClientCertPattern"]["EnrollmentURI"]["UserSetting"] = A.load.Ref(ptr + 32 + 0 + 16, undefined);
          x["ClientCertPattern"]["EnrollmentURI"]["SharedSetting"] = A.load.Ref(ptr + 32 + 0 + 20, undefined);
          if (A.load.Bool(ptr + 32 + 0 + 26)) {
            x["ClientCertPattern"]["EnrollmentURI"]["UserEditable"] = A.load.Bool(ptr + 32 + 0 + 24);
          } else {
            delete x["ClientCertPattern"]["EnrollmentURI"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 32 + 0 + 27)) {
            x["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"] = A.load.Bool(ptr + 32 + 0 + 25);
          } else {
            delete x["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"];
          }
        } else {
          delete x["ClientCertPattern"]["EnrollmentURI"];
        }
        if (A.load.Bool(ptr + 32 + 32 + 125)) {
          x["ClientCertPattern"]["Issuer"] = {};
          if (A.load.Bool(ptr + 32 + 32 + 0 + 28)) {
            x["ClientCertPattern"]["Issuer"]["CommonName"] = {};
            x["ClientCertPattern"]["Issuer"]["CommonName"]["Active"] = A.load.Ref(ptr + 32 + 32 + 0 + 0, undefined);
            x["ClientCertPattern"]["Issuer"]["CommonName"]["Effective"] = A.load.Ref(ptr + 32 + 32 + 0 + 4, undefined);
            x["ClientCertPattern"]["Issuer"]["CommonName"]["UserPolicy"] = A.load.Ref(ptr + 32 + 32 + 0 + 8, undefined);
            x["ClientCertPattern"]["Issuer"]["CommonName"]["DevicePolicy"] = A.load.Ref(
              ptr + 32 + 32 + 0 + 12,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["CommonName"]["UserSetting"] = A.load.Ref(
              ptr + 32 + 32 + 0 + 16,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["CommonName"]["SharedSetting"] = A.load.Ref(
              ptr + 32 + 32 + 0 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 32 + 32 + 0 + 26)) {
              x["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"] = A.load.Bool(ptr + 32 + 32 + 0 + 24);
            } else {
              delete x["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 32 + 32 + 0 + 27)) {
              x["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"] = A.load.Bool(ptr + 32 + 32 + 0 + 25);
            } else {
              delete x["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"];
            }
          } else {
            delete x["ClientCertPattern"]["Issuer"]["CommonName"];
          }
          if (A.load.Bool(ptr + 32 + 32 + 32 + 28)) {
            x["ClientCertPattern"]["Issuer"]["Locality"] = {};
            x["ClientCertPattern"]["Issuer"]["Locality"]["Active"] = A.load.Ref(ptr + 32 + 32 + 32 + 0, undefined);
            x["ClientCertPattern"]["Issuer"]["Locality"]["Effective"] = A.load.Ref(ptr + 32 + 32 + 32 + 4, undefined);
            x["ClientCertPattern"]["Issuer"]["Locality"]["UserPolicy"] = A.load.Ref(ptr + 32 + 32 + 32 + 8, undefined);
            x["ClientCertPattern"]["Issuer"]["Locality"]["DevicePolicy"] = A.load.Ref(
              ptr + 32 + 32 + 32 + 12,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["Locality"]["UserSetting"] = A.load.Ref(
              ptr + 32 + 32 + 32 + 16,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["Locality"]["SharedSetting"] = A.load.Ref(
              ptr + 32 + 32 + 32 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 32 + 32 + 32 + 26)) {
              x["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"] = A.load.Bool(ptr + 32 + 32 + 32 + 24);
            } else {
              delete x["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 32 + 32 + 32 + 27)) {
              x["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"] = A.load.Bool(ptr + 32 + 32 + 32 + 25);
            } else {
              delete x["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"];
            }
          } else {
            delete x["ClientCertPattern"]["Issuer"]["Locality"];
          }
          if (A.load.Bool(ptr + 32 + 32 + 64 + 28)) {
            x["ClientCertPattern"]["Issuer"]["Organization"] = {};
            x["ClientCertPattern"]["Issuer"]["Organization"]["Active"] = A.load.Ref(ptr + 32 + 32 + 64 + 0, undefined);
            x["ClientCertPattern"]["Issuer"]["Organization"]["Effective"] = A.load.Ref(
              ptr + 32 + 32 + 64 + 4,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["Organization"]["UserPolicy"] = A.load.Ref(
              ptr + 32 + 32 + 64 + 8,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["Organization"]["DevicePolicy"] = A.load.Ref(
              ptr + 32 + 32 + 64 + 12,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["Organization"]["UserSetting"] = A.load.Ref(
              ptr + 32 + 32 + 64 + 16,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["Organization"]["SharedSetting"] = A.load.Ref(
              ptr + 32 + 32 + 64 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 32 + 32 + 64 + 26)) {
              x["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"] = A.load.Bool(ptr + 32 + 32 + 64 + 24);
            } else {
              delete x["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 32 + 32 + 64 + 27)) {
              x["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"] = A.load.Bool(ptr + 32 + 32 + 64 + 25);
            } else {
              delete x["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"];
            }
          } else {
            delete x["ClientCertPattern"]["Issuer"]["Organization"];
          }
          if (A.load.Bool(ptr + 32 + 32 + 96 + 28)) {
            x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = {};
            x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Active"] = A.load.Ref(
              ptr + 32 + 32 + 96 + 0,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Effective"] = A.load.Ref(
              ptr + 32 + 32 + 96 + 4,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserPolicy"] = A.load.Ref(
              ptr + 32 + 32 + 96 + 8,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DevicePolicy"] = A.load.Ref(
              ptr + 32 + 32 + 96 + 12,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserSetting"] = A.load.Ref(
              ptr + 32 + 32 + 96 + 16,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["SharedSetting"] = A.load.Ref(
              ptr + 32 + 32 + 96 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 32 + 32 + 96 + 26)) {
              x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"] = A.load.Bool(
                ptr + 32 + 32 + 96 + 24
              );
            } else {
              delete x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 32 + 32 + 96 + 27)) {
              x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"] = A.load.Bool(
                ptr + 32 + 32 + 96 + 25
              );
            } else {
              delete x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"];
            }
          } else {
            delete x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"];
          }
        } else {
          delete x["ClientCertPattern"]["Issuer"];
        }
        if (A.load.Bool(ptr + 32 + 160 + 28)) {
          x["ClientCertPattern"]["IssuerCARef"] = {};
          x["ClientCertPattern"]["IssuerCARef"]["Active"] = A.load.Ref(ptr + 32 + 160 + 0, undefined);
          x["ClientCertPattern"]["IssuerCARef"]["Effective"] = A.load.Ref(ptr + 32 + 160 + 4, undefined);
          x["ClientCertPattern"]["IssuerCARef"]["UserPolicy"] = A.load.Ref(ptr + 32 + 160 + 8, undefined);
          x["ClientCertPattern"]["IssuerCARef"]["DevicePolicy"] = A.load.Ref(ptr + 32 + 160 + 12, undefined);
          x["ClientCertPattern"]["IssuerCARef"]["UserSetting"] = A.load.Ref(ptr + 32 + 160 + 16, undefined);
          x["ClientCertPattern"]["IssuerCARef"]["SharedSetting"] = A.load.Ref(ptr + 32 + 160 + 20, undefined);
          if (A.load.Bool(ptr + 32 + 160 + 26)) {
            x["ClientCertPattern"]["IssuerCARef"]["UserEditable"] = A.load.Bool(ptr + 32 + 160 + 24);
          } else {
            delete x["ClientCertPattern"]["IssuerCARef"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 32 + 160 + 27)) {
            x["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"] = A.load.Bool(ptr + 32 + 160 + 25);
          } else {
            delete x["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"];
          }
        } else {
          delete x["ClientCertPattern"]["IssuerCARef"];
        }
        if (A.load.Bool(ptr + 32 + 192 + 125)) {
          x["ClientCertPattern"]["Subject"] = {};
          if (A.load.Bool(ptr + 32 + 192 + 0 + 28)) {
            x["ClientCertPattern"]["Subject"]["CommonName"] = {};
            x["ClientCertPattern"]["Subject"]["CommonName"]["Active"] = A.load.Ref(ptr + 32 + 192 + 0 + 0, undefined);
            x["ClientCertPattern"]["Subject"]["CommonName"]["Effective"] = A.load.Ref(
              ptr + 32 + 192 + 0 + 4,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["CommonName"]["UserPolicy"] = A.load.Ref(
              ptr + 32 + 192 + 0 + 8,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["CommonName"]["DevicePolicy"] = A.load.Ref(
              ptr + 32 + 192 + 0 + 12,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["CommonName"]["UserSetting"] = A.load.Ref(
              ptr + 32 + 192 + 0 + 16,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["CommonName"]["SharedSetting"] = A.load.Ref(
              ptr + 32 + 192 + 0 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 32 + 192 + 0 + 26)) {
              x["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"] = A.load.Bool(ptr + 32 + 192 + 0 + 24);
            } else {
              delete x["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 32 + 192 + 0 + 27)) {
              x["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"] = A.load.Bool(ptr + 32 + 192 + 0 + 25);
            } else {
              delete x["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"];
            }
          } else {
            delete x["ClientCertPattern"]["Subject"]["CommonName"];
          }
          if (A.load.Bool(ptr + 32 + 192 + 32 + 28)) {
            x["ClientCertPattern"]["Subject"]["Locality"] = {};
            x["ClientCertPattern"]["Subject"]["Locality"]["Active"] = A.load.Ref(ptr + 32 + 192 + 32 + 0, undefined);
            x["ClientCertPattern"]["Subject"]["Locality"]["Effective"] = A.load.Ref(ptr + 32 + 192 + 32 + 4, undefined);
            x["ClientCertPattern"]["Subject"]["Locality"]["UserPolicy"] = A.load.Ref(
              ptr + 32 + 192 + 32 + 8,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["Locality"]["DevicePolicy"] = A.load.Ref(
              ptr + 32 + 192 + 32 + 12,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["Locality"]["UserSetting"] = A.load.Ref(
              ptr + 32 + 192 + 32 + 16,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["Locality"]["SharedSetting"] = A.load.Ref(
              ptr + 32 + 192 + 32 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 32 + 192 + 32 + 26)) {
              x["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"] = A.load.Bool(ptr + 32 + 192 + 32 + 24);
            } else {
              delete x["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 32 + 192 + 32 + 27)) {
              x["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"] = A.load.Bool(ptr + 32 + 192 + 32 + 25);
            } else {
              delete x["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"];
            }
          } else {
            delete x["ClientCertPattern"]["Subject"]["Locality"];
          }
          if (A.load.Bool(ptr + 32 + 192 + 64 + 28)) {
            x["ClientCertPattern"]["Subject"]["Organization"] = {};
            x["ClientCertPattern"]["Subject"]["Organization"]["Active"] = A.load.Ref(
              ptr + 32 + 192 + 64 + 0,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["Organization"]["Effective"] = A.load.Ref(
              ptr + 32 + 192 + 64 + 4,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["Organization"]["UserPolicy"] = A.load.Ref(
              ptr + 32 + 192 + 64 + 8,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["Organization"]["DevicePolicy"] = A.load.Ref(
              ptr + 32 + 192 + 64 + 12,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["Organization"]["UserSetting"] = A.load.Ref(
              ptr + 32 + 192 + 64 + 16,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["Organization"]["SharedSetting"] = A.load.Ref(
              ptr + 32 + 192 + 64 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 32 + 192 + 64 + 26)) {
              x["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"] = A.load.Bool(ptr + 32 + 192 + 64 + 24);
            } else {
              delete x["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 32 + 192 + 64 + 27)) {
              x["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"] = A.load.Bool(
                ptr + 32 + 192 + 64 + 25
              );
            } else {
              delete x["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"];
            }
          } else {
            delete x["ClientCertPattern"]["Subject"]["Organization"];
          }
          if (A.load.Bool(ptr + 32 + 192 + 96 + 28)) {
            x["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = {};
            x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Active"] = A.load.Ref(
              ptr + 32 + 192 + 96 + 0,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Effective"] = A.load.Ref(
              ptr + 32 + 192 + 96 + 4,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserPolicy"] = A.load.Ref(
              ptr + 32 + 192 + 96 + 8,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DevicePolicy"] = A.load.Ref(
              ptr + 32 + 192 + 96 + 12,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserSetting"] = A.load.Ref(
              ptr + 32 + 192 + 96 + 16,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["SharedSetting"] = A.load.Ref(
              ptr + 32 + 192 + 96 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 32 + 192 + 96 + 26)) {
              x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"] = A.load.Bool(
                ptr + 32 + 192 + 96 + 24
              );
            } else {
              delete x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 32 + 192 + 96 + 27)) {
              x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"] = A.load.Bool(
                ptr + 32 + 192 + 96 + 25
              );
            } else {
              delete x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"];
            }
          } else {
            delete x["ClientCertPattern"]["Subject"]["OrganizationalUnit"];
          }
        } else {
          delete x["ClientCertPattern"]["Subject"];
        }
      } else {
        delete x["ClientCertPattern"];
      }
      if (A.load.Bool(ptr + 352 + 28)) {
        x["ClientCertPKCS11Id"] = {};
        x["ClientCertPKCS11Id"]["Active"] = A.load.Ref(ptr + 352 + 0, undefined);
        x["ClientCertPKCS11Id"]["Effective"] = A.load.Ref(ptr + 352 + 4, undefined);
        x["ClientCertPKCS11Id"]["UserPolicy"] = A.load.Ref(ptr + 352 + 8, undefined);
        x["ClientCertPKCS11Id"]["DevicePolicy"] = A.load.Ref(ptr + 352 + 12, undefined);
        x["ClientCertPKCS11Id"]["UserSetting"] = A.load.Ref(ptr + 352 + 16, undefined);
        x["ClientCertPKCS11Id"]["SharedSetting"] = A.load.Ref(ptr + 352 + 20, undefined);
        if (A.load.Bool(ptr + 352 + 26)) {
          x["ClientCertPKCS11Id"]["UserEditable"] = A.load.Bool(ptr + 352 + 24);
        } else {
          delete x["ClientCertPKCS11Id"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 352 + 27)) {
          x["ClientCertPKCS11Id"]["DeviceEditable"] = A.load.Bool(ptr + 352 + 25);
        } else {
          delete x["ClientCertPKCS11Id"]["DeviceEditable"];
        }
      } else {
        delete x["ClientCertPKCS11Id"];
      }
      if (A.load.Bool(ptr + 384 + 28)) {
        x["ClientCertProvisioningProfileId"] = {};
        x["ClientCertProvisioningProfileId"]["Active"] = A.load.Ref(ptr + 384 + 0, undefined);
        x["ClientCertProvisioningProfileId"]["Effective"] = A.load.Ref(ptr + 384 + 4, undefined);
        x["ClientCertProvisioningProfileId"]["UserPolicy"] = A.load.Ref(ptr + 384 + 8, undefined);
        x["ClientCertProvisioningProfileId"]["DevicePolicy"] = A.load.Ref(ptr + 384 + 12, undefined);
        x["ClientCertProvisioningProfileId"]["UserSetting"] = A.load.Ref(ptr + 384 + 16, undefined);
        x["ClientCertProvisioningProfileId"]["SharedSetting"] = A.load.Ref(ptr + 384 + 20, undefined);
        if (A.load.Bool(ptr + 384 + 26)) {
          x["ClientCertProvisioningProfileId"]["UserEditable"] = A.load.Bool(ptr + 384 + 24);
        } else {
          delete x["ClientCertProvisioningProfileId"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 384 + 27)) {
          x["ClientCertProvisioningProfileId"]["DeviceEditable"] = A.load.Bool(ptr + 384 + 25);
        } else {
          delete x["ClientCertProvisioningProfileId"]["DeviceEditable"];
        }
      } else {
        delete x["ClientCertProvisioningProfileId"];
      }
      if (A.load.Bool(ptr + 416 + 28)) {
        x["ClientCertRef"] = {};
        x["ClientCertRef"]["Active"] = A.load.Ref(ptr + 416 + 0, undefined);
        x["ClientCertRef"]["Effective"] = A.load.Ref(ptr + 416 + 4, undefined);
        x["ClientCertRef"]["UserPolicy"] = A.load.Ref(ptr + 416 + 8, undefined);
        x["ClientCertRef"]["DevicePolicy"] = A.load.Ref(ptr + 416 + 12, undefined);
        x["ClientCertRef"]["UserSetting"] = A.load.Ref(ptr + 416 + 16, undefined);
        x["ClientCertRef"]["SharedSetting"] = A.load.Ref(ptr + 416 + 20, undefined);
        if (A.load.Bool(ptr + 416 + 26)) {
          x["ClientCertRef"]["UserEditable"] = A.load.Bool(ptr + 416 + 24);
        } else {
          delete x["ClientCertRef"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 416 + 27)) {
          x["ClientCertRef"]["DeviceEditable"] = A.load.Bool(ptr + 416 + 25);
        } else {
          delete x["ClientCertRef"]["DeviceEditable"];
        }
      } else {
        delete x["ClientCertRef"];
      }
      if (A.load.Bool(ptr + 448 + 28)) {
        x["ClientCertType"] = {};
        x["ClientCertType"]["Active"] = A.load.Ref(ptr + 448 + 0, undefined);
        x["ClientCertType"]["Effective"] = A.load.Ref(ptr + 448 + 4, undefined);
        x["ClientCertType"]["UserPolicy"] = A.load.Ref(ptr + 448 + 8, undefined);
        x["ClientCertType"]["DevicePolicy"] = A.load.Ref(ptr + 448 + 12, undefined);
        x["ClientCertType"]["UserSetting"] = A.load.Ref(ptr + 448 + 16, undefined);
        x["ClientCertType"]["SharedSetting"] = A.load.Ref(ptr + 448 + 20, undefined);
        if (A.load.Bool(ptr + 448 + 26)) {
          x["ClientCertType"]["UserEditable"] = A.load.Bool(ptr + 448 + 24);
        } else {
          delete x["ClientCertType"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 448 + 27)) {
          x["ClientCertType"]["DeviceEditable"] = A.load.Bool(ptr + 448 + 25);
        } else {
          delete x["ClientCertType"]["DeviceEditable"];
        }
      } else {
        delete x["ClientCertType"];
      }
      if (A.load.Bool(ptr + 480 + 28)) {
        x["Identity"] = {};
        x["Identity"]["Active"] = A.load.Ref(ptr + 480 + 0, undefined);
        x["Identity"]["Effective"] = A.load.Ref(ptr + 480 + 4, undefined);
        x["Identity"]["UserPolicy"] = A.load.Ref(ptr + 480 + 8, undefined);
        x["Identity"]["DevicePolicy"] = A.load.Ref(ptr + 480 + 12, undefined);
        x["Identity"]["UserSetting"] = A.load.Ref(ptr + 480 + 16, undefined);
        x["Identity"]["SharedSetting"] = A.load.Ref(ptr + 480 + 20, undefined);
        if (A.load.Bool(ptr + 480 + 26)) {
          x["Identity"]["UserEditable"] = A.load.Bool(ptr + 480 + 24);
        } else {
          delete x["Identity"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 480 + 27)) {
          x["Identity"]["DeviceEditable"] = A.load.Bool(ptr + 480 + 25);
        } else {
          delete x["Identity"]["DeviceEditable"];
        }
      } else {
        delete x["Identity"];
      }
      if (A.load.Bool(ptr + 512 + 28)) {
        x["Inner"] = {};
        x["Inner"]["Active"] = A.load.Ref(ptr + 512 + 0, undefined);
        x["Inner"]["Effective"] = A.load.Ref(ptr + 512 + 4, undefined);
        x["Inner"]["UserPolicy"] = A.load.Ref(ptr + 512 + 8, undefined);
        x["Inner"]["DevicePolicy"] = A.load.Ref(ptr + 512 + 12, undefined);
        x["Inner"]["UserSetting"] = A.load.Ref(ptr + 512 + 16, undefined);
        x["Inner"]["SharedSetting"] = A.load.Ref(ptr + 512 + 20, undefined);
        if (A.load.Bool(ptr + 512 + 26)) {
          x["Inner"]["UserEditable"] = A.load.Bool(ptr + 512 + 24);
        } else {
          delete x["Inner"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 512 + 27)) {
          x["Inner"]["DeviceEditable"] = A.load.Bool(ptr + 512 + 25);
        } else {
          delete x["Inner"]["DeviceEditable"];
        }
      } else {
        delete x["Inner"];
      }
      if (A.load.Bool(ptr + 544 + 28)) {
        x["Outer"] = {};
        x["Outer"]["Active"] = A.load.Ref(ptr + 544 + 0, undefined);
        x["Outer"]["Effective"] = A.load.Ref(ptr + 544 + 4, undefined);
        x["Outer"]["UserPolicy"] = A.load.Ref(ptr + 544 + 8, undefined);
        x["Outer"]["DevicePolicy"] = A.load.Ref(ptr + 544 + 12, undefined);
        x["Outer"]["UserSetting"] = A.load.Ref(ptr + 544 + 16, undefined);
        x["Outer"]["SharedSetting"] = A.load.Ref(ptr + 544 + 20, undefined);
        if (A.load.Bool(ptr + 544 + 26)) {
          x["Outer"]["UserEditable"] = A.load.Bool(ptr + 544 + 24);
        } else {
          delete x["Outer"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 544 + 27)) {
          x["Outer"]["DeviceEditable"] = A.load.Bool(ptr + 544 + 25);
        } else {
          delete x["Outer"]["DeviceEditable"];
        }
      } else {
        delete x["Outer"];
      }
      if (A.load.Bool(ptr + 576 + 28)) {
        x["Password"] = {};
        x["Password"]["Active"] = A.load.Ref(ptr + 576 + 0, undefined);
        x["Password"]["Effective"] = A.load.Ref(ptr + 576 + 4, undefined);
        x["Password"]["UserPolicy"] = A.load.Ref(ptr + 576 + 8, undefined);
        x["Password"]["DevicePolicy"] = A.load.Ref(ptr + 576 + 12, undefined);
        x["Password"]["UserSetting"] = A.load.Ref(ptr + 576 + 16, undefined);
        x["Password"]["SharedSetting"] = A.load.Ref(ptr + 576 + 20, undefined);
        if (A.load.Bool(ptr + 576 + 26)) {
          x["Password"]["UserEditable"] = A.load.Bool(ptr + 576 + 24);
        } else {
          delete x["Password"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 576 + 27)) {
          x["Password"]["DeviceEditable"] = A.load.Bool(ptr + 576 + 25);
        } else {
          delete x["Password"]["DeviceEditable"];
        }
      } else {
        delete x["Password"];
      }
      if (A.load.Bool(ptr + 608 + 21)) {
        x["SaveCredentials"] = {};
        if (A.load.Bool(ptr + 608 + 14)) {
          x["SaveCredentials"]["Active"] = A.load.Bool(ptr + 608 + 0);
        } else {
          delete x["SaveCredentials"]["Active"];
        }
        x["SaveCredentials"]["Effective"] = A.load.Ref(ptr + 608 + 4, undefined);
        if (A.load.Bool(ptr + 608 + 15)) {
          x["SaveCredentials"]["UserPolicy"] = A.load.Bool(ptr + 608 + 8);
        } else {
          delete x["SaveCredentials"]["UserPolicy"];
        }
        if (A.load.Bool(ptr + 608 + 16)) {
          x["SaveCredentials"]["DevicePolicy"] = A.load.Bool(ptr + 608 + 9);
        } else {
          delete x["SaveCredentials"]["DevicePolicy"];
        }
        if (A.load.Bool(ptr + 608 + 17)) {
          x["SaveCredentials"]["UserSetting"] = A.load.Bool(ptr + 608 + 10);
        } else {
          delete x["SaveCredentials"]["UserSetting"];
        }
        if (A.load.Bool(ptr + 608 + 18)) {
          x["SaveCredentials"]["SharedSetting"] = A.load.Bool(ptr + 608 + 11);
        } else {
          delete x["SaveCredentials"]["SharedSetting"];
        }
        if (A.load.Bool(ptr + 608 + 19)) {
          x["SaveCredentials"]["UserEditable"] = A.load.Bool(ptr + 608 + 12);
        } else {
          delete x["SaveCredentials"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 608 + 20)) {
          x["SaveCredentials"]["DeviceEditable"] = A.load.Bool(ptr + 608 + 13);
        } else {
          delete x["SaveCredentials"]["DeviceEditable"];
        }
      } else {
        delete x["SaveCredentials"];
      }
      if (A.load.Bool(ptr + 632 + 28)) {
        x["ServerCAPEMs"] = {};
        x["ServerCAPEMs"]["Active"] = A.load.Ref(ptr + 632 + 0, undefined);
        x["ServerCAPEMs"]["Effective"] = A.load.Ref(ptr + 632 + 4, undefined);
        x["ServerCAPEMs"]["UserPolicy"] = A.load.Ref(ptr + 632 + 8, undefined);
        x["ServerCAPEMs"]["DevicePolicy"] = A.load.Ref(ptr + 632 + 12, undefined);
        x["ServerCAPEMs"]["UserSetting"] = A.load.Ref(ptr + 632 + 16, undefined);
        x["ServerCAPEMs"]["SharedSetting"] = A.load.Ref(ptr + 632 + 20, undefined);
        if (A.load.Bool(ptr + 632 + 26)) {
          x["ServerCAPEMs"]["UserEditable"] = A.load.Bool(ptr + 632 + 24);
        } else {
          delete x["ServerCAPEMs"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 632 + 27)) {
          x["ServerCAPEMs"]["DeviceEditable"] = A.load.Bool(ptr + 632 + 25);
        } else {
          delete x["ServerCAPEMs"]["DeviceEditable"];
        }
      } else {
        delete x["ServerCAPEMs"];
      }
      if (A.load.Bool(ptr + 664 + 28)) {
        x["ServerCARefs"] = {};
        x["ServerCARefs"]["Active"] = A.load.Ref(ptr + 664 + 0, undefined);
        x["ServerCARefs"]["Effective"] = A.load.Ref(ptr + 664 + 4, undefined);
        x["ServerCARefs"]["UserPolicy"] = A.load.Ref(ptr + 664 + 8, undefined);
        x["ServerCARefs"]["DevicePolicy"] = A.load.Ref(ptr + 664 + 12, undefined);
        x["ServerCARefs"]["UserSetting"] = A.load.Ref(ptr + 664 + 16, undefined);
        x["ServerCARefs"]["SharedSetting"] = A.load.Ref(ptr + 664 + 20, undefined);
        if (A.load.Bool(ptr + 664 + 26)) {
          x["ServerCARefs"]["UserEditable"] = A.load.Bool(ptr + 664 + 24);
        } else {
          delete x["ServerCARefs"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 664 + 27)) {
          x["ServerCARefs"]["DeviceEditable"] = A.load.Bool(ptr + 664 + 25);
        } else {
          delete x["ServerCARefs"]["DeviceEditable"];
        }
      } else {
        delete x["ServerCARefs"];
      }
      if (A.load.Bool(ptr + 696 + 28)) {
        x["SubjectMatch"] = {};
        x["SubjectMatch"]["Active"] = A.load.Ref(ptr + 696 + 0, undefined);
        x["SubjectMatch"]["Effective"] = A.load.Ref(ptr + 696 + 4, undefined);
        x["SubjectMatch"]["UserPolicy"] = A.load.Ref(ptr + 696 + 8, undefined);
        x["SubjectMatch"]["DevicePolicy"] = A.load.Ref(ptr + 696 + 12, undefined);
        x["SubjectMatch"]["UserSetting"] = A.load.Ref(ptr + 696 + 16, undefined);
        x["SubjectMatch"]["SharedSetting"] = A.load.Ref(ptr + 696 + 20, undefined);
        if (A.load.Bool(ptr + 696 + 26)) {
          x["SubjectMatch"]["UserEditable"] = A.load.Bool(ptr + 696 + 24);
        } else {
          delete x["SubjectMatch"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 696 + 27)) {
          x["SubjectMatch"]["DeviceEditable"] = A.load.Bool(ptr + 696 + 25);
        } else {
          delete x["SubjectMatch"]["DeviceEditable"];
        }
      } else {
        delete x["SubjectMatch"];
      }
      if (A.load.Bool(ptr + 728 + 28)) {
        x["TLSVersionMax"] = {};
        x["TLSVersionMax"]["Active"] = A.load.Ref(ptr + 728 + 0, undefined);
        x["TLSVersionMax"]["Effective"] = A.load.Ref(ptr + 728 + 4, undefined);
        x["TLSVersionMax"]["UserPolicy"] = A.load.Ref(ptr + 728 + 8, undefined);
        x["TLSVersionMax"]["DevicePolicy"] = A.load.Ref(ptr + 728 + 12, undefined);
        x["TLSVersionMax"]["UserSetting"] = A.load.Ref(ptr + 728 + 16, undefined);
        x["TLSVersionMax"]["SharedSetting"] = A.load.Ref(ptr + 728 + 20, undefined);
        if (A.load.Bool(ptr + 728 + 26)) {
          x["TLSVersionMax"]["UserEditable"] = A.load.Bool(ptr + 728 + 24);
        } else {
          delete x["TLSVersionMax"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 728 + 27)) {
          x["TLSVersionMax"]["DeviceEditable"] = A.load.Bool(ptr + 728 + 25);
        } else {
          delete x["TLSVersionMax"]["DeviceEditable"];
        }
      } else {
        delete x["TLSVersionMax"];
      }
      if (A.load.Bool(ptr + 760 + 21)) {
        x["UseProactiveKeyCaching"] = {};
        if (A.load.Bool(ptr + 760 + 14)) {
          x["UseProactiveKeyCaching"]["Active"] = A.load.Bool(ptr + 760 + 0);
        } else {
          delete x["UseProactiveKeyCaching"]["Active"];
        }
        x["UseProactiveKeyCaching"]["Effective"] = A.load.Ref(ptr + 760 + 4, undefined);
        if (A.load.Bool(ptr + 760 + 15)) {
          x["UseProactiveKeyCaching"]["UserPolicy"] = A.load.Bool(ptr + 760 + 8);
        } else {
          delete x["UseProactiveKeyCaching"]["UserPolicy"];
        }
        if (A.load.Bool(ptr + 760 + 16)) {
          x["UseProactiveKeyCaching"]["DevicePolicy"] = A.load.Bool(ptr + 760 + 9);
        } else {
          delete x["UseProactiveKeyCaching"]["DevicePolicy"];
        }
        if (A.load.Bool(ptr + 760 + 17)) {
          x["UseProactiveKeyCaching"]["UserSetting"] = A.load.Bool(ptr + 760 + 10);
        } else {
          delete x["UseProactiveKeyCaching"]["UserSetting"];
        }
        if (A.load.Bool(ptr + 760 + 18)) {
          x["UseProactiveKeyCaching"]["SharedSetting"] = A.load.Bool(ptr + 760 + 11);
        } else {
          delete x["UseProactiveKeyCaching"]["SharedSetting"];
        }
        if (A.load.Bool(ptr + 760 + 19)) {
          x["UseProactiveKeyCaching"]["UserEditable"] = A.load.Bool(ptr + 760 + 12);
        } else {
          delete x["UseProactiveKeyCaching"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 760 + 20)) {
          x["UseProactiveKeyCaching"]["DeviceEditable"] = A.load.Bool(ptr + 760 + 13);
        } else {
          delete x["UseProactiveKeyCaching"]["DeviceEditable"];
        }
      } else {
        delete x["UseProactiveKeyCaching"];
      }
      if (A.load.Bool(ptr + 784 + 21)) {
        x["UseSystemCAs"] = {};
        if (A.load.Bool(ptr + 784 + 14)) {
          x["UseSystemCAs"]["Active"] = A.load.Bool(ptr + 784 + 0);
        } else {
          delete x["UseSystemCAs"]["Active"];
        }
        x["UseSystemCAs"]["Effective"] = A.load.Ref(ptr + 784 + 4, undefined);
        if (A.load.Bool(ptr + 784 + 15)) {
          x["UseSystemCAs"]["UserPolicy"] = A.load.Bool(ptr + 784 + 8);
        } else {
          delete x["UseSystemCAs"]["UserPolicy"];
        }
        if (A.load.Bool(ptr + 784 + 16)) {
          x["UseSystemCAs"]["DevicePolicy"] = A.load.Bool(ptr + 784 + 9);
        } else {
          delete x["UseSystemCAs"]["DevicePolicy"];
        }
        if (A.load.Bool(ptr + 784 + 17)) {
          x["UseSystemCAs"]["UserSetting"] = A.load.Bool(ptr + 784 + 10);
        } else {
          delete x["UseSystemCAs"]["UserSetting"];
        }
        if (A.load.Bool(ptr + 784 + 18)) {
          x["UseSystemCAs"]["SharedSetting"] = A.load.Bool(ptr + 784 + 11);
        } else {
          delete x["UseSystemCAs"]["SharedSetting"];
        }
        if (A.load.Bool(ptr + 784 + 19)) {
          x["UseSystemCAs"]["UserEditable"] = A.load.Bool(ptr + 784 + 12);
        } else {
          delete x["UseSystemCAs"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 784 + 20)) {
          x["UseSystemCAs"]["DeviceEditable"] = A.load.Bool(ptr + 784 + 13);
        } else {
          delete x["UseSystemCAs"]["DeviceEditable"];
        }
      } else {
        delete x["UseSystemCAs"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_ManagedEthernetProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 863, false);

        A.store.Bool(ptr + 0 + 21, false);
        A.store.Bool(ptr + 0 + 14, false);
        A.store.Bool(ptr + 0 + 0, false);
        A.store.Ref(ptr + 0 + 4, undefined);
        A.store.Bool(ptr + 0 + 15, false);
        A.store.Bool(ptr + 0 + 8, false);
        A.store.Bool(ptr + 0 + 16, false);
        A.store.Bool(ptr + 0 + 9, false);
        A.store.Bool(ptr + 0 + 17, false);
        A.store.Bool(ptr + 0 + 10, false);
        A.store.Bool(ptr + 0 + 18, false);
        A.store.Bool(ptr + 0 + 11, false);
        A.store.Bool(ptr + 0 + 19, false);
        A.store.Bool(ptr + 0 + 12, false);
        A.store.Bool(ptr + 0 + 20, false);
        A.store.Bool(ptr + 0 + 13, false);

        A.store.Bool(ptr + 24 + 28, false);
        A.store.Ref(ptr + 24 + 0, undefined);
        A.store.Ref(ptr + 24 + 4, undefined);
        A.store.Ref(ptr + 24 + 8, undefined);
        A.store.Ref(ptr + 24 + 12, undefined);
        A.store.Ref(ptr + 24 + 16, undefined);
        A.store.Ref(ptr + 24 + 20, undefined);
        A.store.Bool(ptr + 24 + 26, false);
        A.store.Bool(ptr + 24 + 24, false);
        A.store.Bool(ptr + 24 + 27, false);
        A.store.Bool(ptr + 24 + 25, false);

        A.store.Bool(ptr + 56 + 806, false);

        A.store.Bool(ptr + 56 + 0 + 28, false);
        A.store.Ref(ptr + 56 + 0 + 0, undefined);
        A.store.Ref(ptr + 56 + 0 + 4, undefined);
        A.store.Ref(ptr + 56 + 0 + 8, undefined);
        A.store.Ref(ptr + 56 + 0 + 12, undefined);
        A.store.Ref(ptr + 56 + 0 + 16, undefined);
        A.store.Ref(ptr + 56 + 0 + 20, undefined);
        A.store.Bool(ptr + 56 + 0 + 26, false);
        A.store.Bool(ptr + 56 + 0 + 24, false);
        A.store.Bool(ptr + 56 + 0 + 27, false);
        A.store.Bool(ptr + 56 + 0 + 25, false);

        A.store.Bool(ptr + 56 + 32 + 318, false);

        A.store.Bool(ptr + 56 + 32 + 0 + 28, false);
        A.store.Ref(ptr + 56 + 32 + 0 + 0, undefined);
        A.store.Ref(ptr + 56 + 32 + 0 + 4, undefined);
        A.store.Ref(ptr + 56 + 32 + 0 + 8, undefined);
        A.store.Ref(ptr + 56 + 32 + 0 + 12, undefined);
        A.store.Ref(ptr + 56 + 32 + 0 + 16, undefined);
        A.store.Ref(ptr + 56 + 32 + 0 + 20, undefined);
        A.store.Bool(ptr + 56 + 32 + 0 + 26, false);
        A.store.Bool(ptr + 56 + 32 + 0 + 24, false);
        A.store.Bool(ptr + 56 + 32 + 0 + 27, false);
        A.store.Bool(ptr + 56 + 32 + 0 + 25, false);

        A.store.Bool(ptr + 56 + 32 + 32 + 125, false);

        A.store.Bool(ptr + 56 + 32 + 32 + 0 + 28, false);
        A.store.Ref(ptr + 56 + 32 + 32 + 0 + 0, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 0 + 4, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 0 + 8, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 0 + 12, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 0 + 16, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 0 + 20, undefined);
        A.store.Bool(ptr + 56 + 32 + 32 + 0 + 26, false);
        A.store.Bool(ptr + 56 + 32 + 32 + 0 + 24, false);
        A.store.Bool(ptr + 56 + 32 + 32 + 0 + 27, false);
        A.store.Bool(ptr + 56 + 32 + 32 + 0 + 25, false);

        A.store.Bool(ptr + 56 + 32 + 32 + 32 + 28, false);
        A.store.Ref(ptr + 56 + 32 + 32 + 32 + 0, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 32 + 4, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 32 + 8, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 32 + 12, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 32 + 16, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 32 + 20, undefined);
        A.store.Bool(ptr + 56 + 32 + 32 + 32 + 26, false);
        A.store.Bool(ptr + 56 + 32 + 32 + 32 + 24, false);
        A.store.Bool(ptr + 56 + 32 + 32 + 32 + 27, false);
        A.store.Bool(ptr + 56 + 32 + 32 + 32 + 25, false);

        A.store.Bool(ptr + 56 + 32 + 32 + 64 + 28, false);
        A.store.Ref(ptr + 56 + 32 + 32 + 64 + 0, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 64 + 4, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 64 + 8, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 64 + 12, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 64 + 16, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 64 + 20, undefined);
        A.store.Bool(ptr + 56 + 32 + 32 + 64 + 26, false);
        A.store.Bool(ptr + 56 + 32 + 32 + 64 + 24, false);
        A.store.Bool(ptr + 56 + 32 + 32 + 64 + 27, false);
        A.store.Bool(ptr + 56 + 32 + 32 + 64 + 25, false);

        A.store.Bool(ptr + 56 + 32 + 32 + 96 + 28, false);
        A.store.Ref(ptr + 56 + 32 + 32 + 96 + 0, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 96 + 4, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 96 + 8, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 96 + 12, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 96 + 16, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 96 + 20, undefined);
        A.store.Bool(ptr + 56 + 32 + 32 + 96 + 26, false);
        A.store.Bool(ptr + 56 + 32 + 32 + 96 + 24, false);
        A.store.Bool(ptr + 56 + 32 + 32 + 96 + 27, false);
        A.store.Bool(ptr + 56 + 32 + 32 + 96 + 25, false);

        A.store.Bool(ptr + 56 + 32 + 160 + 28, false);
        A.store.Ref(ptr + 56 + 32 + 160 + 0, undefined);
        A.store.Ref(ptr + 56 + 32 + 160 + 4, undefined);
        A.store.Ref(ptr + 56 + 32 + 160 + 8, undefined);
        A.store.Ref(ptr + 56 + 32 + 160 + 12, undefined);
        A.store.Ref(ptr + 56 + 32 + 160 + 16, undefined);
        A.store.Ref(ptr + 56 + 32 + 160 + 20, undefined);
        A.store.Bool(ptr + 56 + 32 + 160 + 26, false);
        A.store.Bool(ptr + 56 + 32 + 160 + 24, false);
        A.store.Bool(ptr + 56 + 32 + 160 + 27, false);
        A.store.Bool(ptr + 56 + 32 + 160 + 25, false);

        A.store.Bool(ptr + 56 + 32 + 192 + 125, false);

        A.store.Bool(ptr + 56 + 32 + 192 + 0 + 28, false);
        A.store.Ref(ptr + 56 + 32 + 192 + 0 + 0, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 0 + 4, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 0 + 8, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 0 + 12, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 0 + 16, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 0 + 20, undefined);
        A.store.Bool(ptr + 56 + 32 + 192 + 0 + 26, false);
        A.store.Bool(ptr + 56 + 32 + 192 + 0 + 24, false);
        A.store.Bool(ptr + 56 + 32 + 192 + 0 + 27, false);
        A.store.Bool(ptr + 56 + 32 + 192 + 0 + 25, false);

        A.store.Bool(ptr + 56 + 32 + 192 + 32 + 28, false);
        A.store.Ref(ptr + 56 + 32 + 192 + 32 + 0, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 32 + 4, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 32 + 8, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 32 + 12, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 32 + 16, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 32 + 20, undefined);
        A.store.Bool(ptr + 56 + 32 + 192 + 32 + 26, false);
        A.store.Bool(ptr + 56 + 32 + 192 + 32 + 24, false);
        A.store.Bool(ptr + 56 + 32 + 192 + 32 + 27, false);
        A.store.Bool(ptr + 56 + 32 + 192 + 32 + 25, false);

        A.store.Bool(ptr + 56 + 32 + 192 + 64 + 28, false);
        A.store.Ref(ptr + 56 + 32 + 192 + 64 + 0, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 64 + 4, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 64 + 8, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 64 + 12, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 64 + 16, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 64 + 20, undefined);
        A.store.Bool(ptr + 56 + 32 + 192 + 64 + 26, false);
        A.store.Bool(ptr + 56 + 32 + 192 + 64 + 24, false);
        A.store.Bool(ptr + 56 + 32 + 192 + 64 + 27, false);
        A.store.Bool(ptr + 56 + 32 + 192 + 64 + 25, false);

        A.store.Bool(ptr + 56 + 32 + 192 + 96 + 28, false);
        A.store.Ref(ptr + 56 + 32 + 192 + 96 + 0, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 96 + 4, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 96 + 8, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 96 + 12, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 96 + 16, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 96 + 20, undefined);
        A.store.Bool(ptr + 56 + 32 + 192 + 96 + 26, false);
        A.store.Bool(ptr + 56 + 32 + 192 + 96 + 24, false);
        A.store.Bool(ptr + 56 + 32 + 192 + 96 + 27, false);
        A.store.Bool(ptr + 56 + 32 + 192 + 96 + 25, false);

        A.store.Bool(ptr + 56 + 352 + 28, false);
        A.store.Ref(ptr + 56 + 352 + 0, undefined);
        A.store.Ref(ptr + 56 + 352 + 4, undefined);
        A.store.Ref(ptr + 56 + 352 + 8, undefined);
        A.store.Ref(ptr + 56 + 352 + 12, undefined);
        A.store.Ref(ptr + 56 + 352 + 16, undefined);
        A.store.Ref(ptr + 56 + 352 + 20, undefined);
        A.store.Bool(ptr + 56 + 352 + 26, false);
        A.store.Bool(ptr + 56 + 352 + 24, false);
        A.store.Bool(ptr + 56 + 352 + 27, false);
        A.store.Bool(ptr + 56 + 352 + 25, false);

        A.store.Bool(ptr + 56 + 384 + 28, false);
        A.store.Ref(ptr + 56 + 384 + 0, undefined);
        A.store.Ref(ptr + 56 + 384 + 4, undefined);
        A.store.Ref(ptr + 56 + 384 + 8, undefined);
        A.store.Ref(ptr + 56 + 384 + 12, undefined);
        A.store.Ref(ptr + 56 + 384 + 16, undefined);
        A.store.Ref(ptr + 56 + 384 + 20, undefined);
        A.store.Bool(ptr + 56 + 384 + 26, false);
        A.store.Bool(ptr + 56 + 384 + 24, false);
        A.store.Bool(ptr + 56 + 384 + 27, false);
        A.store.Bool(ptr + 56 + 384 + 25, false);

        A.store.Bool(ptr + 56 + 416 + 28, false);
        A.store.Ref(ptr + 56 + 416 + 0, undefined);
        A.store.Ref(ptr + 56 + 416 + 4, undefined);
        A.store.Ref(ptr + 56 + 416 + 8, undefined);
        A.store.Ref(ptr + 56 + 416 + 12, undefined);
        A.store.Ref(ptr + 56 + 416 + 16, undefined);
        A.store.Ref(ptr + 56 + 416 + 20, undefined);
        A.store.Bool(ptr + 56 + 416 + 26, false);
        A.store.Bool(ptr + 56 + 416 + 24, false);
        A.store.Bool(ptr + 56 + 416 + 27, false);
        A.store.Bool(ptr + 56 + 416 + 25, false);

        A.store.Bool(ptr + 56 + 448 + 28, false);
        A.store.Ref(ptr + 56 + 448 + 0, undefined);
        A.store.Ref(ptr + 56 + 448 + 4, undefined);
        A.store.Ref(ptr + 56 + 448 + 8, undefined);
        A.store.Ref(ptr + 56 + 448 + 12, undefined);
        A.store.Ref(ptr + 56 + 448 + 16, undefined);
        A.store.Ref(ptr + 56 + 448 + 20, undefined);
        A.store.Bool(ptr + 56 + 448 + 26, false);
        A.store.Bool(ptr + 56 + 448 + 24, false);
        A.store.Bool(ptr + 56 + 448 + 27, false);
        A.store.Bool(ptr + 56 + 448 + 25, false);

        A.store.Bool(ptr + 56 + 480 + 28, false);
        A.store.Ref(ptr + 56 + 480 + 0, undefined);
        A.store.Ref(ptr + 56 + 480 + 4, undefined);
        A.store.Ref(ptr + 56 + 480 + 8, undefined);
        A.store.Ref(ptr + 56 + 480 + 12, undefined);
        A.store.Ref(ptr + 56 + 480 + 16, undefined);
        A.store.Ref(ptr + 56 + 480 + 20, undefined);
        A.store.Bool(ptr + 56 + 480 + 26, false);
        A.store.Bool(ptr + 56 + 480 + 24, false);
        A.store.Bool(ptr + 56 + 480 + 27, false);
        A.store.Bool(ptr + 56 + 480 + 25, false);

        A.store.Bool(ptr + 56 + 512 + 28, false);
        A.store.Ref(ptr + 56 + 512 + 0, undefined);
        A.store.Ref(ptr + 56 + 512 + 4, undefined);
        A.store.Ref(ptr + 56 + 512 + 8, undefined);
        A.store.Ref(ptr + 56 + 512 + 12, undefined);
        A.store.Ref(ptr + 56 + 512 + 16, undefined);
        A.store.Ref(ptr + 56 + 512 + 20, undefined);
        A.store.Bool(ptr + 56 + 512 + 26, false);
        A.store.Bool(ptr + 56 + 512 + 24, false);
        A.store.Bool(ptr + 56 + 512 + 27, false);
        A.store.Bool(ptr + 56 + 512 + 25, false);

        A.store.Bool(ptr + 56 + 544 + 28, false);
        A.store.Ref(ptr + 56 + 544 + 0, undefined);
        A.store.Ref(ptr + 56 + 544 + 4, undefined);
        A.store.Ref(ptr + 56 + 544 + 8, undefined);
        A.store.Ref(ptr + 56 + 544 + 12, undefined);
        A.store.Ref(ptr + 56 + 544 + 16, undefined);
        A.store.Ref(ptr + 56 + 544 + 20, undefined);
        A.store.Bool(ptr + 56 + 544 + 26, false);
        A.store.Bool(ptr + 56 + 544 + 24, false);
        A.store.Bool(ptr + 56 + 544 + 27, false);
        A.store.Bool(ptr + 56 + 544 + 25, false);

        A.store.Bool(ptr + 56 + 576 + 28, false);
        A.store.Ref(ptr + 56 + 576 + 0, undefined);
        A.store.Ref(ptr + 56 + 576 + 4, undefined);
        A.store.Ref(ptr + 56 + 576 + 8, undefined);
        A.store.Ref(ptr + 56 + 576 + 12, undefined);
        A.store.Ref(ptr + 56 + 576 + 16, undefined);
        A.store.Ref(ptr + 56 + 576 + 20, undefined);
        A.store.Bool(ptr + 56 + 576 + 26, false);
        A.store.Bool(ptr + 56 + 576 + 24, false);
        A.store.Bool(ptr + 56 + 576 + 27, false);
        A.store.Bool(ptr + 56 + 576 + 25, false);

        A.store.Bool(ptr + 56 + 608 + 21, false);
        A.store.Bool(ptr + 56 + 608 + 14, false);
        A.store.Bool(ptr + 56 + 608 + 0, false);
        A.store.Ref(ptr + 56 + 608 + 4, undefined);
        A.store.Bool(ptr + 56 + 608 + 15, false);
        A.store.Bool(ptr + 56 + 608 + 8, false);
        A.store.Bool(ptr + 56 + 608 + 16, false);
        A.store.Bool(ptr + 56 + 608 + 9, false);
        A.store.Bool(ptr + 56 + 608 + 17, false);
        A.store.Bool(ptr + 56 + 608 + 10, false);
        A.store.Bool(ptr + 56 + 608 + 18, false);
        A.store.Bool(ptr + 56 + 608 + 11, false);
        A.store.Bool(ptr + 56 + 608 + 19, false);
        A.store.Bool(ptr + 56 + 608 + 12, false);
        A.store.Bool(ptr + 56 + 608 + 20, false);
        A.store.Bool(ptr + 56 + 608 + 13, false);

        A.store.Bool(ptr + 56 + 632 + 28, false);
        A.store.Ref(ptr + 56 + 632 + 0, undefined);
        A.store.Ref(ptr + 56 + 632 + 4, undefined);
        A.store.Ref(ptr + 56 + 632 + 8, undefined);
        A.store.Ref(ptr + 56 + 632 + 12, undefined);
        A.store.Ref(ptr + 56 + 632 + 16, undefined);
        A.store.Ref(ptr + 56 + 632 + 20, undefined);
        A.store.Bool(ptr + 56 + 632 + 26, false);
        A.store.Bool(ptr + 56 + 632 + 24, false);
        A.store.Bool(ptr + 56 + 632 + 27, false);
        A.store.Bool(ptr + 56 + 632 + 25, false);

        A.store.Bool(ptr + 56 + 664 + 28, false);
        A.store.Ref(ptr + 56 + 664 + 0, undefined);
        A.store.Ref(ptr + 56 + 664 + 4, undefined);
        A.store.Ref(ptr + 56 + 664 + 8, undefined);
        A.store.Ref(ptr + 56 + 664 + 12, undefined);
        A.store.Ref(ptr + 56 + 664 + 16, undefined);
        A.store.Ref(ptr + 56 + 664 + 20, undefined);
        A.store.Bool(ptr + 56 + 664 + 26, false);
        A.store.Bool(ptr + 56 + 664 + 24, false);
        A.store.Bool(ptr + 56 + 664 + 27, false);
        A.store.Bool(ptr + 56 + 664 + 25, false);

        A.store.Bool(ptr + 56 + 696 + 28, false);
        A.store.Ref(ptr + 56 + 696 + 0, undefined);
        A.store.Ref(ptr + 56 + 696 + 4, undefined);
        A.store.Ref(ptr + 56 + 696 + 8, undefined);
        A.store.Ref(ptr + 56 + 696 + 12, undefined);
        A.store.Ref(ptr + 56 + 696 + 16, undefined);
        A.store.Ref(ptr + 56 + 696 + 20, undefined);
        A.store.Bool(ptr + 56 + 696 + 26, false);
        A.store.Bool(ptr + 56 + 696 + 24, false);
        A.store.Bool(ptr + 56 + 696 + 27, false);
        A.store.Bool(ptr + 56 + 696 + 25, false);

        A.store.Bool(ptr + 56 + 728 + 28, false);
        A.store.Ref(ptr + 56 + 728 + 0, undefined);
        A.store.Ref(ptr + 56 + 728 + 4, undefined);
        A.store.Ref(ptr + 56 + 728 + 8, undefined);
        A.store.Ref(ptr + 56 + 728 + 12, undefined);
        A.store.Ref(ptr + 56 + 728 + 16, undefined);
        A.store.Ref(ptr + 56 + 728 + 20, undefined);
        A.store.Bool(ptr + 56 + 728 + 26, false);
        A.store.Bool(ptr + 56 + 728 + 24, false);
        A.store.Bool(ptr + 56 + 728 + 27, false);
        A.store.Bool(ptr + 56 + 728 + 25, false);

        A.store.Bool(ptr + 56 + 760 + 21, false);
        A.store.Bool(ptr + 56 + 760 + 14, false);
        A.store.Bool(ptr + 56 + 760 + 0, false);
        A.store.Ref(ptr + 56 + 760 + 4, undefined);
        A.store.Bool(ptr + 56 + 760 + 15, false);
        A.store.Bool(ptr + 56 + 760 + 8, false);
        A.store.Bool(ptr + 56 + 760 + 16, false);
        A.store.Bool(ptr + 56 + 760 + 9, false);
        A.store.Bool(ptr + 56 + 760 + 17, false);
        A.store.Bool(ptr + 56 + 760 + 10, false);
        A.store.Bool(ptr + 56 + 760 + 18, false);
        A.store.Bool(ptr + 56 + 760 + 11, false);
        A.store.Bool(ptr + 56 + 760 + 19, false);
        A.store.Bool(ptr + 56 + 760 + 12, false);
        A.store.Bool(ptr + 56 + 760 + 20, false);
        A.store.Bool(ptr + 56 + 760 + 13, false);

        A.store.Bool(ptr + 56 + 784 + 21, false);
        A.store.Bool(ptr + 56 + 784 + 14, false);
        A.store.Bool(ptr + 56 + 784 + 0, false);
        A.store.Ref(ptr + 56 + 784 + 4, undefined);
        A.store.Bool(ptr + 56 + 784 + 15, false);
        A.store.Bool(ptr + 56 + 784 + 8, false);
        A.store.Bool(ptr + 56 + 784 + 16, false);
        A.store.Bool(ptr + 56 + 784 + 9, false);
        A.store.Bool(ptr + 56 + 784 + 17, false);
        A.store.Bool(ptr + 56 + 784 + 10, false);
        A.store.Bool(ptr + 56 + 784 + 18, false);
        A.store.Bool(ptr + 56 + 784 + 11, false);
        A.store.Bool(ptr + 56 + 784 + 19, false);
        A.store.Bool(ptr + 56 + 784 + 12, false);
        A.store.Bool(ptr + 56 + 784 + 20, false);
        A.store.Bool(ptr + 56 + 784 + 13, false);
      } else {
        A.store.Bool(ptr + 863, true);

        if (typeof x["AutoConnect"] === "undefined") {
          A.store.Bool(ptr + 0 + 21, false);
          A.store.Bool(ptr + 0 + 14, false);
          A.store.Bool(ptr + 0 + 0, false);
          A.store.Ref(ptr + 0 + 4, undefined);
          A.store.Bool(ptr + 0 + 15, false);
          A.store.Bool(ptr + 0 + 8, false);
          A.store.Bool(ptr + 0 + 16, false);
          A.store.Bool(ptr + 0 + 9, false);
          A.store.Bool(ptr + 0 + 17, false);
          A.store.Bool(ptr + 0 + 10, false);
          A.store.Bool(ptr + 0 + 18, false);
          A.store.Bool(ptr + 0 + 11, false);
          A.store.Bool(ptr + 0 + 19, false);
          A.store.Bool(ptr + 0 + 12, false);
          A.store.Bool(ptr + 0 + 20, false);
          A.store.Bool(ptr + 0 + 13, false);
        } else {
          A.store.Bool(ptr + 0 + 21, true);
          A.store.Bool(ptr + 0 + 14, "Active" in x["AutoConnect"] ? true : false);
          A.store.Bool(ptr + 0 + 0, x["AutoConnect"]["Active"] ? true : false);
          A.store.Ref(ptr + 0 + 4, x["AutoConnect"]["Effective"]);
          A.store.Bool(ptr + 0 + 15, "UserPolicy" in x["AutoConnect"] ? true : false);
          A.store.Bool(ptr + 0 + 8, x["AutoConnect"]["UserPolicy"] ? true : false);
          A.store.Bool(ptr + 0 + 16, "DevicePolicy" in x["AutoConnect"] ? true : false);
          A.store.Bool(ptr + 0 + 9, x["AutoConnect"]["DevicePolicy"] ? true : false);
          A.store.Bool(ptr + 0 + 17, "UserSetting" in x["AutoConnect"] ? true : false);
          A.store.Bool(ptr + 0 + 10, x["AutoConnect"]["UserSetting"] ? true : false);
          A.store.Bool(ptr + 0 + 18, "SharedSetting" in x["AutoConnect"] ? true : false);
          A.store.Bool(ptr + 0 + 11, x["AutoConnect"]["SharedSetting"] ? true : false);
          A.store.Bool(ptr + 0 + 19, "UserEditable" in x["AutoConnect"] ? true : false);
          A.store.Bool(ptr + 0 + 12, x["AutoConnect"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 0 + 20, "DeviceEditable" in x["AutoConnect"] ? true : false);
          A.store.Bool(ptr + 0 + 13, x["AutoConnect"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["Authentication"] === "undefined") {
          A.store.Bool(ptr + 24 + 28, false);
          A.store.Ref(ptr + 24 + 0, undefined);
          A.store.Ref(ptr + 24 + 4, undefined);
          A.store.Ref(ptr + 24 + 8, undefined);
          A.store.Ref(ptr + 24 + 12, undefined);
          A.store.Ref(ptr + 24 + 16, undefined);
          A.store.Ref(ptr + 24 + 20, undefined);
          A.store.Bool(ptr + 24 + 26, false);
          A.store.Bool(ptr + 24 + 24, false);
          A.store.Bool(ptr + 24 + 27, false);
          A.store.Bool(ptr + 24 + 25, false);
        } else {
          A.store.Bool(ptr + 24 + 28, true);
          A.store.Ref(ptr + 24 + 0, x["Authentication"]["Active"]);
          A.store.Ref(ptr + 24 + 4, x["Authentication"]["Effective"]);
          A.store.Ref(ptr + 24 + 8, x["Authentication"]["UserPolicy"]);
          A.store.Ref(ptr + 24 + 12, x["Authentication"]["DevicePolicy"]);
          A.store.Ref(ptr + 24 + 16, x["Authentication"]["UserSetting"]);
          A.store.Ref(ptr + 24 + 20, x["Authentication"]["SharedSetting"]);
          A.store.Bool(ptr + 24 + 26, "UserEditable" in x["Authentication"] ? true : false);
          A.store.Bool(ptr + 24 + 24, x["Authentication"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 24 + 27, "DeviceEditable" in x["Authentication"] ? true : false);
          A.store.Bool(ptr + 24 + 25, x["Authentication"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["EAP"] === "undefined") {
          A.store.Bool(ptr + 56 + 806, false);

          A.store.Bool(ptr + 56 + 0 + 28, false);
          A.store.Ref(ptr + 56 + 0 + 0, undefined);
          A.store.Ref(ptr + 56 + 0 + 4, undefined);
          A.store.Ref(ptr + 56 + 0 + 8, undefined);
          A.store.Ref(ptr + 56 + 0 + 12, undefined);
          A.store.Ref(ptr + 56 + 0 + 16, undefined);
          A.store.Ref(ptr + 56 + 0 + 20, undefined);
          A.store.Bool(ptr + 56 + 0 + 26, false);
          A.store.Bool(ptr + 56 + 0 + 24, false);
          A.store.Bool(ptr + 56 + 0 + 27, false);
          A.store.Bool(ptr + 56 + 0 + 25, false);

          A.store.Bool(ptr + 56 + 32 + 318, false);

          A.store.Bool(ptr + 56 + 32 + 0 + 28, false);
          A.store.Ref(ptr + 56 + 32 + 0 + 0, undefined);
          A.store.Ref(ptr + 56 + 32 + 0 + 4, undefined);
          A.store.Ref(ptr + 56 + 32 + 0 + 8, undefined);
          A.store.Ref(ptr + 56 + 32 + 0 + 12, undefined);
          A.store.Ref(ptr + 56 + 32 + 0 + 16, undefined);
          A.store.Ref(ptr + 56 + 32 + 0 + 20, undefined);
          A.store.Bool(ptr + 56 + 32 + 0 + 26, false);
          A.store.Bool(ptr + 56 + 32 + 0 + 24, false);
          A.store.Bool(ptr + 56 + 32 + 0 + 27, false);
          A.store.Bool(ptr + 56 + 32 + 0 + 25, false);

          A.store.Bool(ptr + 56 + 32 + 32 + 125, false);

          A.store.Bool(ptr + 56 + 32 + 32 + 0 + 28, false);
          A.store.Ref(ptr + 56 + 32 + 32 + 0 + 0, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 0 + 4, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 0 + 8, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 0 + 12, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 0 + 16, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 0 + 20, undefined);
          A.store.Bool(ptr + 56 + 32 + 32 + 0 + 26, false);
          A.store.Bool(ptr + 56 + 32 + 32 + 0 + 24, false);
          A.store.Bool(ptr + 56 + 32 + 32 + 0 + 27, false);
          A.store.Bool(ptr + 56 + 32 + 32 + 0 + 25, false);

          A.store.Bool(ptr + 56 + 32 + 32 + 32 + 28, false);
          A.store.Ref(ptr + 56 + 32 + 32 + 32 + 0, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 32 + 4, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 32 + 8, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 32 + 12, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 32 + 16, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 32 + 20, undefined);
          A.store.Bool(ptr + 56 + 32 + 32 + 32 + 26, false);
          A.store.Bool(ptr + 56 + 32 + 32 + 32 + 24, false);
          A.store.Bool(ptr + 56 + 32 + 32 + 32 + 27, false);
          A.store.Bool(ptr + 56 + 32 + 32 + 32 + 25, false);

          A.store.Bool(ptr + 56 + 32 + 32 + 64 + 28, false);
          A.store.Ref(ptr + 56 + 32 + 32 + 64 + 0, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 64 + 4, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 64 + 8, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 64 + 12, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 64 + 16, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 64 + 20, undefined);
          A.store.Bool(ptr + 56 + 32 + 32 + 64 + 26, false);
          A.store.Bool(ptr + 56 + 32 + 32 + 64 + 24, false);
          A.store.Bool(ptr + 56 + 32 + 32 + 64 + 27, false);
          A.store.Bool(ptr + 56 + 32 + 32 + 64 + 25, false);

          A.store.Bool(ptr + 56 + 32 + 32 + 96 + 28, false);
          A.store.Ref(ptr + 56 + 32 + 32 + 96 + 0, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 96 + 4, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 96 + 8, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 96 + 12, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 96 + 16, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 96 + 20, undefined);
          A.store.Bool(ptr + 56 + 32 + 32 + 96 + 26, false);
          A.store.Bool(ptr + 56 + 32 + 32 + 96 + 24, false);
          A.store.Bool(ptr + 56 + 32 + 32 + 96 + 27, false);
          A.store.Bool(ptr + 56 + 32 + 32 + 96 + 25, false);

          A.store.Bool(ptr + 56 + 32 + 160 + 28, false);
          A.store.Ref(ptr + 56 + 32 + 160 + 0, undefined);
          A.store.Ref(ptr + 56 + 32 + 160 + 4, undefined);
          A.store.Ref(ptr + 56 + 32 + 160 + 8, undefined);
          A.store.Ref(ptr + 56 + 32 + 160 + 12, undefined);
          A.store.Ref(ptr + 56 + 32 + 160 + 16, undefined);
          A.store.Ref(ptr + 56 + 32 + 160 + 20, undefined);
          A.store.Bool(ptr + 56 + 32 + 160 + 26, false);
          A.store.Bool(ptr + 56 + 32 + 160 + 24, false);
          A.store.Bool(ptr + 56 + 32 + 160 + 27, false);
          A.store.Bool(ptr + 56 + 32 + 160 + 25, false);

          A.store.Bool(ptr + 56 + 32 + 192 + 125, false);

          A.store.Bool(ptr + 56 + 32 + 192 + 0 + 28, false);
          A.store.Ref(ptr + 56 + 32 + 192 + 0 + 0, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 0 + 4, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 0 + 8, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 0 + 12, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 0 + 16, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 0 + 20, undefined);
          A.store.Bool(ptr + 56 + 32 + 192 + 0 + 26, false);
          A.store.Bool(ptr + 56 + 32 + 192 + 0 + 24, false);
          A.store.Bool(ptr + 56 + 32 + 192 + 0 + 27, false);
          A.store.Bool(ptr + 56 + 32 + 192 + 0 + 25, false);

          A.store.Bool(ptr + 56 + 32 + 192 + 32 + 28, false);
          A.store.Ref(ptr + 56 + 32 + 192 + 32 + 0, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 32 + 4, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 32 + 8, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 32 + 12, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 32 + 16, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 32 + 20, undefined);
          A.store.Bool(ptr + 56 + 32 + 192 + 32 + 26, false);
          A.store.Bool(ptr + 56 + 32 + 192 + 32 + 24, false);
          A.store.Bool(ptr + 56 + 32 + 192 + 32 + 27, false);
          A.store.Bool(ptr + 56 + 32 + 192 + 32 + 25, false);

          A.store.Bool(ptr + 56 + 32 + 192 + 64 + 28, false);
          A.store.Ref(ptr + 56 + 32 + 192 + 64 + 0, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 64 + 4, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 64 + 8, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 64 + 12, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 64 + 16, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 64 + 20, undefined);
          A.store.Bool(ptr + 56 + 32 + 192 + 64 + 26, false);
          A.store.Bool(ptr + 56 + 32 + 192 + 64 + 24, false);
          A.store.Bool(ptr + 56 + 32 + 192 + 64 + 27, false);
          A.store.Bool(ptr + 56 + 32 + 192 + 64 + 25, false);

          A.store.Bool(ptr + 56 + 32 + 192 + 96 + 28, false);
          A.store.Ref(ptr + 56 + 32 + 192 + 96 + 0, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 96 + 4, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 96 + 8, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 96 + 12, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 96 + 16, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 96 + 20, undefined);
          A.store.Bool(ptr + 56 + 32 + 192 + 96 + 26, false);
          A.store.Bool(ptr + 56 + 32 + 192 + 96 + 24, false);
          A.store.Bool(ptr + 56 + 32 + 192 + 96 + 27, false);
          A.store.Bool(ptr + 56 + 32 + 192 + 96 + 25, false);

          A.store.Bool(ptr + 56 + 352 + 28, false);
          A.store.Ref(ptr + 56 + 352 + 0, undefined);
          A.store.Ref(ptr + 56 + 352 + 4, undefined);
          A.store.Ref(ptr + 56 + 352 + 8, undefined);
          A.store.Ref(ptr + 56 + 352 + 12, undefined);
          A.store.Ref(ptr + 56 + 352 + 16, undefined);
          A.store.Ref(ptr + 56 + 352 + 20, undefined);
          A.store.Bool(ptr + 56 + 352 + 26, false);
          A.store.Bool(ptr + 56 + 352 + 24, false);
          A.store.Bool(ptr + 56 + 352 + 27, false);
          A.store.Bool(ptr + 56 + 352 + 25, false);

          A.store.Bool(ptr + 56 + 384 + 28, false);
          A.store.Ref(ptr + 56 + 384 + 0, undefined);
          A.store.Ref(ptr + 56 + 384 + 4, undefined);
          A.store.Ref(ptr + 56 + 384 + 8, undefined);
          A.store.Ref(ptr + 56 + 384 + 12, undefined);
          A.store.Ref(ptr + 56 + 384 + 16, undefined);
          A.store.Ref(ptr + 56 + 384 + 20, undefined);
          A.store.Bool(ptr + 56 + 384 + 26, false);
          A.store.Bool(ptr + 56 + 384 + 24, false);
          A.store.Bool(ptr + 56 + 384 + 27, false);
          A.store.Bool(ptr + 56 + 384 + 25, false);

          A.store.Bool(ptr + 56 + 416 + 28, false);
          A.store.Ref(ptr + 56 + 416 + 0, undefined);
          A.store.Ref(ptr + 56 + 416 + 4, undefined);
          A.store.Ref(ptr + 56 + 416 + 8, undefined);
          A.store.Ref(ptr + 56 + 416 + 12, undefined);
          A.store.Ref(ptr + 56 + 416 + 16, undefined);
          A.store.Ref(ptr + 56 + 416 + 20, undefined);
          A.store.Bool(ptr + 56 + 416 + 26, false);
          A.store.Bool(ptr + 56 + 416 + 24, false);
          A.store.Bool(ptr + 56 + 416 + 27, false);
          A.store.Bool(ptr + 56 + 416 + 25, false);

          A.store.Bool(ptr + 56 + 448 + 28, false);
          A.store.Ref(ptr + 56 + 448 + 0, undefined);
          A.store.Ref(ptr + 56 + 448 + 4, undefined);
          A.store.Ref(ptr + 56 + 448 + 8, undefined);
          A.store.Ref(ptr + 56 + 448 + 12, undefined);
          A.store.Ref(ptr + 56 + 448 + 16, undefined);
          A.store.Ref(ptr + 56 + 448 + 20, undefined);
          A.store.Bool(ptr + 56 + 448 + 26, false);
          A.store.Bool(ptr + 56 + 448 + 24, false);
          A.store.Bool(ptr + 56 + 448 + 27, false);
          A.store.Bool(ptr + 56 + 448 + 25, false);

          A.store.Bool(ptr + 56 + 480 + 28, false);
          A.store.Ref(ptr + 56 + 480 + 0, undefined);
          A.store.Ref(ptr + 56 + 480 + 4, undefined);
          A.store.Ref(ptr + 56 + 480 + 8, undefined);
          A.store.Ref(ptr + 56 + 480 + 12, undefined);
          A.store.Ref(ptr + 56 + 480 + 16, undefined);
          A.store.Ref(ptr + 56 + 480 + 20, undefined);
          A.store.Bool(ptr + 56 + 480 + 26, false);
          A.store.Bool(ptr + 56 + 480 + 24, false);
          A.store.Bool(ptr + 56 + 480 + 27, false);
          A.store.Bool(ptr + 56 + 480 + 25, false);

          A.store.Bool(ptr + 56 + 512 + 28, false);
          A.store.Ref(ptr + 56 + 512 + 0, undefined);
          A.store.Ref(ptr + 56 + 512 + 4, undefined);
          A.store.Ref(ptr + 56 + 512 + 8, undefined);
          A.store.Ref(ptr + 56 + 512 + 12, undefined);
          A.store.Ref(ptr + 56 + 512 + 16, undefined);
          A.store.Ref(ptr + 56 + 512 + 20, undefined);
          A.store.Bool(ptr + 56 + 512 + 26, false);
          A.store.Bool(ptr + 56 + 512 + 24, false);
          A.store.Bool(ptr + 56 + 512 + 27, false);
          A.store.Bool(ptr + 56 + 512 + 25, false);

          A.store.Bool(ptr + 56 + 544 + 28, false);
          A.store.Ref(ptr + 56 + 544 + 0, undefined);
          A.store.Ref(ptr + 56 + 544 + 4, undefined);
          A.store.Ref(ptr + 56 + 544 + 8, undefined);
          A.store.Ref(ptr + 56 + 544 + 12, undefined);
          A.store.Ref(ptr + 56 + 544 + 16, undefined);
          A.store.Ref(ptr + 56 + 544 + 20, undefined);
          A.store.Bool(ptr + 56 + 544 + 26, false);
          A.store.Bool(ptr + 56 + 544 + 24, false);
          A.store.Bool(ptr + 56 + 544 + 27, false);
          A.store.Bool(ptr + 56 + 544 + 25, false);

          A.store.Bool(ptr + 56 + 576 + 28, false);
          A.store.Ref(ptr + 56 + 576 + 0, undefined);
          A.store.Ref(ptr + 56 + 576 + 4, undefined);
          A.store.Ref(ptr + 56 + 576 + 8, undefined);
          A.store.Ref(ptr + 56 + 576 + 12, undefined);
          A.store.Ref(ptr + 56 + 576 + 16, undefined);
          A.store.Ref(ptr + 56 + 576 + 20, undefined);
          A.store.Bool(ptr + 56 + 576 + 26, false);
          A.store.Bool(ptr + 56 + 576 + 24, false);
          A.store.Bool(ptr + 56 + 576 + 27, false);
          A.store.Bool(ptr + 56 + 576 + 25, false);

          A.store.Bool(ptr + 56 + 608 + 21, false);
          A.store.Bool(ptr + 56 + 608 + 14, false);
          A.store.Bool(ptr + 56 + 608 + 0, false);
          A.store.Ref(ptr + 56 + 608 + 4, undefined);
          A.store.Bool(ptr + 56 + 608 + 15, false);
          A.store.Bool(ptr + 56 + 608 + 8, false);
          A.store.Bool(ptr + 56 + 608 + 16, false);
          A.store.Bool(ptr + 56 + 608 + 9, false);
          A.store.Bool(ptr + 56 + 608 + 17, false);
          A.store.Bool(ptr + 56 + 608 + 10, false);
          A.store.Bool(ptr + 56 + 608 + 18, false);
          A.store.Bool(ptr + 56 + 608 + 11, false);
          A.store.Bool(ptr + 56 + 608 + 19, false);
          A.store.Bool(ptr + 56 + 608 + 12, false);
          A.store.Bool(ptr + 56 + 608 + 20, false);
          A.store.Bool(ptr + 56 + 608 + 13, false);

          A.store.Bool(ptr + 56 + 632 + 28, false);
          A.store.Ref(ptr + 56 + 632 + 0, undefined);
          A.store.Ref(ptr + 56 + 632 + 4, undefined);
          A.store.Ref(ptr + 56 + 632 + 8, undefined);
          A.store.Ref(ptr + 56 + 632 + 12, undefined);
          A.store.Ref(ptr + 56 + 632 + 16, undefined);
          A.store.Ref(ptr + 56 + 632 + 20, undefined);
          A.store.Bool(ptr + 56 + 632 + 26, false);
          A.store.Bool(ptr + 56 + 632 + 24, false);
          A.store.Bool(ptr + 56 + 632 + 27, false);
          A.store.Bool(ptr + 56 + 632 + 25, false);

          A.store.Bool(ptr + 56 + 664 + 28, false);
          A.store.Ref(ptr + 56 + 664 + 0, undefined);
          A.store.Ref(ptr + 56 + 664 + 4, undefined);
          A.store.Ref(ptr + 56 + 664 + 8, undefined);
          A.store.Ref(ptr + 56 + 664 + 12, undefined);
          A.store.Ref(ptr + 56 + 664 + 16, undefined);
          A.store.Ref(ptr + 56 + 664 + 20, undefined);
          A.store.Bool(ptr + 56 + 664 + 26, false);
          A.store.Bool(ptr + 56 + 664 + 24, false);
          A.store.Bool(ptr + 56 + 664 + 27, false);
          A.store.Bool(ptr + 56 + 664 + 25, false);

          A.store.Bool(ptr + 56 + 696 + 28, false);
          A.store.Ref(ptr + 56 + 696 + 0, undefined);
          A.store.Ref(ptr + 56 + 696 + 4, undefined);
          A.store.Ref(ptr + 56 + 696 + 8, undefined);
          A.store.Ref(ptr + 56 + 696 + 12, undefined);
          A.store.Ref(ptr + 56 + 696 + 16, undefined);
          A.store.Ref(ptr + 56 + 696 + 20, undefined);
          A.store.Bool(ptr + 56 + 696 + 26, false);
          A.store.Bool(ptr + 56 + 696 + 24, false);
          A.store.Bool(ptr + 56 + 696 + 27, false);
          A.store.Bool(ptr + 56 + 696 + 25, false);

          A.store.Bool(ptr + 56 + 728 + 28, false);
          A.store.Ref(ptr + 56 + 728 + 0, undefined);
          A.store.Ref(ptr + 56 + 728 + 4, undefined);
          A.store.Ref(ptr + 56 + 728 + 8, undefined);
          A.store.Ref(ptr + 56 + 728 + 12, undefined);
          A.store.Ref(ptr + 56 + 728 + 16, undefined);
          A.store.Ref(ptr + 56 + 728 + 20, undefined);
          A.store.Bool(ptr + 56 + 728 + 26, false);
          A.store.Bool(ptr + 56 + 728 + 24, false);
          A.store.Bool(ptr + 56 + 728 + 27, false);
          A.store.Bool(ptr + 56 + 728 + 25, false);

          A.store.Bool(ptr + 56 + 760 + 21, false);
          A.store.Bool(ptr + 56 + 760 + 14, false);
          A.store.Bool(ptr + 56 + 760 + 0, false);
          A.store.Ref(ptr + 56 + 760 + 4, undefined);
          A.store.Bool(ptr + 56 + 760 + 15, false);
          A.store.Bool(ptr + 56 + 760 + 8, false);
          A.store.Bool(ptr + 56 + 760 + 16, false);
          A.store.Bool(ptr + 56 + 760 + 9, false);
          A.store.Bool(ptr + 56 + 760 + 17, false);
          A.store.Bool(ptr + 56 + 760 + 10, false);
          A.store.Bool(ptr + 56 + 760 + 18, false);
          A.store.Bool(ptr + 56 + 760 + 11, false);
          A.store.Bool(ptr + 56 + 760 + 19, false);
          A.store.Bool(ptr + 56 + 760 + 12, false);
          A.store.Bool(ptr + 56 + 760 + 20, false);
          A.store.Bool(ptr + 56 + 760 + 13, false);

          A.store.Bool(ptr + 56 + 784 + 21, false);
          A.store.Bool(ptr + 56 + 784 + 14, false);
          A.store.Bool(ptr + 56 + 784 + 0, false);
          A.store.Ref(ptr + 56 + 784 + 4, undefined);
          A.store.Bool(ptr + 56 + 784 + 15, false);
          A.store.Bool(ptr + 56 + 784 + 8, false);
          A.store.Bool(ptr + 56 + 784 + 16, false);
          A.store.Bool(ptr + 56 + 784 + 9, false);
          A.store.Bool(ptr + 56 + 784 + 17, false);
          A.store.Bool(ptr + 56 + 784 + 10, false);
          A.store.Bool(ptr + 56 + 784 + 18, false);
          A.store.Bool(ptr + 56 + 784 + 11, false);
          A.store.Bool(ptr + 56 + 784 + 19, false);
          A.store.Bool(ptr + 56 + 784 + 12, false);
          A.store.Bool(ptr + 56 + 784 + 20, false);
          A.store.Bool(ptr + 56 + 784 + 13, false);
        } else {
          A.store.Bool(ptr + 56 + 806, true);

          if (typeof x["EAP"]["AnonymousIdentity"] === "undefined") {
            A.store.Bool(ptr + 56 + 0 + 28, false);
            A.store.Ref(ptr + 56 + 0 + 0, undefined);
            A.store.Ref(ptr + 56 + 0 + 4, undefined);
            A.store.Ref(ptr + 56 + 0 + 8, undefined);
            A.store.Ref(ptr + 56 + 0 + 12, undefined);
            A.store.Ref(ptr + 56 + 0 + 16, undefined);
            A.store.Ref(ptr + 56 + 0 + 20, undefined);
            A.store.Bool(ptr + 56 + 0 + 26, false);
            A.store.Bool(ptr + 56 + 0 + 24, false);
            A.store.Bool(ptr + 56 + 0 + 27, false);
            A.store.Bool(ptr + 56 + 0 + 25, false);
          } else {
            A.store.Bool(ptr + 56 + 0 + 28, true);
            A.store.Ref(ptr + 56 + 0 + 0, x["EAP"]["AnonymousIdentity"]["Active"]);
            A.store.Ref(ptr + 56 + 0 + 4, x["EAP"]["AnonymousIdentity"]["Effective"]);
            A.store.Ref(ptr + 56 + 0 + 8, x["EAP"]["AnonymousIdentity"]["UserPolicy"]);
            A.store.Ref(ptr + 56 + 0 + 12, x["EAP"]["AnonymousIdentity"]["DevicePolicy"]);
            A.store.Ref(ptr + 56 + 0 + 16, x["EAP"]["AnonymousIdentity"]["UserSetting"]);
            A.store.Ref(ptr + 56 + 0 + 20, x["EAP"]["AnonymousIdentity"]["SharedSetting"]);
            A.store.Bool(ptr + 56 + 0 + 26, "UserEditable" in x["EAP"]["AnonymousIdentity"] ? true : false);
            A.store.Bool(ptr + 56 + 0 + 24, x["EAP"]["AnonymousIdentity"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 56 + 0 + 27, "DeviceEditable" in x["EAP"]["AnonymousIdentity"] ? true : false);
            A.store.Bool(ptr + 56 + 0 + 25, x["EAP"]["AnonymousIdentity"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["ClientCertPattern"] === "undefined") {
            A.store.Bool(ptr + 56 + 32 + 318, false);

            A.store.Bool(ptr + 56 + 32 + 0 + 28, false);
            A.store.Ref(ptr + 56 + 32 + 0 + 0, undefined);
            A.store.Ref(ptr + 56 + 32 + 0 + 4, undefined);
            A.store.Ref(ptr + 56 + 32 + 0 + 8, undefined);
            A.store.Ref(ptr + 56 + 32 + 0 + 12, undefined);
            A.store.Ref(ptr + 56 + 32 + 0 + 16, undefined);
            A.store.Ref(ptr + 56 + 32 + 0 + 20, undefined);
            A.store.Bool(ptr + 56 + 32 + 0 + 26, false);
            A.store.Bool(ptr + 56 + 32 + 0 + 24, false);
            A.store.Bool(ptr + 56 + 32 + 0 + 27, false);
            A.store.Bool(ptr + 56 + 32 + 0 + 25, false);

            A.store.Bool(ptr + 56 + 32 + 32 + 125, false);

            A.store.Bool(ptr + 56 + 32 + 32 + 0 + 28, false);
            A.store.Ref(ptr + 56 + 32 + 32 + 0 + 0, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 0 + 4, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 0 + 8, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 0 + 12, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 0 + 16, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 0 + 20, undefined);
            A.store.Bool(ptr + 56 + 32 + 32 + 0 + 26, false);
            A.store.Bool(ptr + 56 + 32 + 32 + 0 + 24, false);
            A.store.Bool(ptr + 56 + 32 + 32 + 0 + 27, false);
            A.store.Bool(ptr + 56 + 32 + 32 + 0 + 25, false);

            A.store.Bool(ptr + 56 + 32 + 32 + 32 + 28, false);
            A.store.Ref(ptr + 56 + 32 + 32 + 32 + 0, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 32 + 4, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 32 + 8, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 32 + 12, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 32 + 16, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 32 + 20, undefined);
            A.store.Bool(ptr + 56 + 32 + 32 + 32 + 26, false);
            A.store.Bool(ptr + 56 + 32 + 32 + 32 + 24, false);
            A.store.Bool(ptr + 56 + 32 + 32 + 32 + 27, false);
            A.store.Bool(ptr + 56 + 32 + 32 + 32 + 25, false);

            A.store.Bool(ptr + 56 + 32 + 32 + 64 + 28, false);
            A.store.Ref(ptr + 56 + 32 + 32 + 64 + 0, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 64 + 4, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 64 + 8, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 64 + 12, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 64 + 16, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 64 + 20, undefined);
            A.store.Bool(ptr + 56 + 32 + 32 + 64 + 26, false);
            A.store.Bool(ptr + 56 + 32 + 32 + 64 + 24, false);
            A.store.Bool(ptr + 56 + 32 + 32 + 64 + 27, false);
            A.store.Bool(ptr + 56 + 32 + 32 + 64 + 25, false);

            A.store.Bool(ptr + 56 + 32 + 32 + 96 + 28, false);
            A.store.Ref(ptr + 56 + 32 + 32 + 96 + 0, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 96 + 4, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 96 + 8, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 96 + 12, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 96 + 16, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 96 + 20, undefined);
            A.store.Bool(ptr + 56 + 32 + 32 + 96 + 26, false);
            A.store.Bool(ptr + 56 + 32 + 32 + 96 + 24, false);
            A.store.Bool(ptr + 56 + 32 + 32 + 96 + 27, false);
            A.store.Bool(ptr + 56 + 32 + 32 + 96 + 25, false);

            A.store.Bool(ptr + 56 + 32 + 160 + 28, false);
            A.store.Ref(ptr + 56 + 32 + 160 + 0, undefined);
            A.store.Ref(ptr + 56 + 32 + 160 + 4, undefined);
            A.store.Ref(ptr + 56 + 32 + 160 + 8, undefined);
            A.store.Ref(ptr + 56 + 32 + 160 + 12, undefined);
            A.store.Ref(ptr + 56 + 32 + 160 + 16, undefined);
            A.store.Ref(ptr + 56 + 32 + 160 + 20, undefined);
            A.store.Bool(ptr + 56 + 32 + 160 + 26, false);
            A.store.Bool(ptr + 56 + 32 + 160 + 24, false);
            A.store.Bool(ptr + 56 + 32 + 160 + 27, false);
            A.store.Bool(ptr + 56 + 32 + 160 + 25, false);

            A.store.Bool(ptr + 56 + 32 + 192 + 125, false);

            A.store.Bool(ptr + 56 + 32 + 192 + 0 + 28, false);
            A.store.Ref(ptr + 56 + 32 + 192 + 0 + 0, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 0 + 4, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 0 + 8, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 0 + 12, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 0 + 16, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 0 + 20, undefined);
            A.store.Bool(ptr + 56 + 32 + 192 + 0 + 26, false);
            A.store.Bool(ptr + 56 + 32 + 192 + 0 + 24, false);
            A.store.Bool(ptr + 56 + 32 + 192 + 0 + 27, false);
            A.store.Bool(ptr + 56 + 32 + 192 + 0 + 25, false);

            A.store.Bool(ptr + 56 + 32 + 192 + 32 + 28, false);
            A.store.Ref(ptr + 56 + 32 + 192 + 32 + 0, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 32 + 4, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 32 + 8, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 32 + 12, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 32 + 16, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 32 + 20, undefined);
            A.store.Bool(ptr + 56 + 32 + 192 + 32 + 26, false);
            A.store.Bool(ptr + 56 + 32 + 192 + 32 + 24, false);
            A.store.Bool(ptr + 56 + 32 + 192 + 32 + 27, false);
            A.store.Bool(ptr + 56 + 32 + 192 + 32 + 25, false);

            A.store.Bool(ptr + 56 + 32 + 192 + 64 + 28, false);
            A.store.Ref(ptr + 56 + 32 + 192 + 64 + 0, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 64 + 4, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 64 + 8, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 64 + 12, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 64 + 16, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 64 + 20, undefined);
            A.store.Bool(ptr + 56 + 32 + 192 + 64 + 26, false);
            A.store.Bool(ptr + 56 + 32 + 192 + 64 + 24, false);
            A.store.Bool(ptr + 56 + 32 + 192 + 64 + 27, false);
            A.store.Bool(ptr + 56 + 32 + 192 + 64 + 25, false);

            A.store.Bool(ptr + 56 + 32 + 192 + 96 + 28, false);
            A.store.Ref(ptr + 56 + 32 + 192 + 96 + 0, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 96 + 4, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 96 + 8, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 96 + 12, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 96 + 16, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 96 + 20, undefined);
            A.store.Bool(ptr + 56 + 32 + 192 + 96 + 26, false);
            A.store.Bool(ptr + 56 + 32 + 192 + 96 + 24, false);
            A.store.Bool(ptr + 56 + 32 + 192 + 96 + 27, false);
            A.store.Bool(ptr + 56 + 32 + 192 + 96 + 25, false);
          } else {
            A.store.Bool(ptr + 56 + 32 + 318, true);

            if (typeof x["EAP"]["ClientCertPattern"]["EnrollmentURI"] === "undefined") {
              A.store.Bool(ptr + 56 + 32 + 0 + 28, false);
              A.store.Ref(ptr + 56 + 32 + 0 + 0, undefined);
              A.store.Ref(ptr + 56 + 32 + 0 + 4, undefined);
              A.store.Ref(ptr + 56 + 32 + 0 + 8, undefined);
              A.store.Ref(ptr + 56 + 32 + 0 + 12, undefined);
              A.store.Ref(ptr + 56 + 32 + 0 + 16, undefined);
              A.store.Ref(ptr + 56 + 32 + 0 + 20, undefined);
              A.store.Bool(ptr + 56 + 32 + 0 + 26, false);
              A.store.Bool(ptr + 56 + 32 + 0 + 24, false);
              A.store.Bool(ptr + 56 + 32 + 0 + 27, false);
              A.store.Bool(ptr + 56 + 32 + 0 + 25, false);
            } else {
              A.store.Bool(ptr + 56 + 32 + 0 + 28, true);
              A.store.Ref(ptr + 56 + 32 + 0 + 0, x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["Active"]);
              A.store.Ref(ptr + 56 + 32 + 0 + 4, x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["Effective"]);
              A.store.Ref(ptr + 56 + 32 + 0 + 8, x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserPolicy"]);
              A.store.Ref(ptr + 56 + 32 + 0 + 12, x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["DevicePolicy"]);
              A.store.Ref(ptr + 56 + 32 + 0 + 16, x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserSetting"]);
              A.store.Ref(ptr + 56 + 32 + 0 + 20, x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["SharedSetting"]);
              A.store.Bool(
                ptr + 56 + 32 + 0 + 26,
                "UserEditable" in x["EAP"]["ClientCertPattern"]["EnrollmentURI"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 32 + 0 + 24,
                x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 32 + 0 + 27,
                "DeviceEditable" in x["EAP"]["ClientCertPattern"]["EnrollmentURI"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 32 + 0 + 25,
                x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["EAP"]["ClientCertPattern"]["Issuer"] === "undefined") {
              A.store.Bool(ptr + 56 + 32 + 32 + 125, false);

              A.store.Bool(ptr + 56 + 32 + 32 + 0 + 28, false);
              A.store.Ref(ptr + 56 + 32 + 32 + 0 + 0, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 0 + 4, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 0 + 8, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 0 + 12, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 0 + 16, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 0 + 20, undefined);
              A.store.Bool(ptr + 56 + 32 + 32 + 0 + 26, false);
              A.store.Bool(ptr + 56 + 32 + 32 + 0 + 24, false);
              A.store.Bool(ptr + 56 + 32 + 32 + 0 + 27, false);
              A.store.Bool(ptr + 56 + 32 + 32 + 0 + 25, false);

              A.store.Bool(ptr + 56 + 32 + 32 + 32 + 28, false);
              A.store.Ref(ptr + 56 + 32 + 32 + 32 + 0, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 32 + 4, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 32 + 8, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 32 + 12, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 32 + 16, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 32 + 20, undefined);
              A.store.Bool(ptr + 56 + 32 + 32 + 32 + 26, false);
              A.store.Bool(ptr + 56 + 32 + 32 + 32 + 24, false);
              A.store.Bool(ptr + 56 + 32 + 32 + 32 + 27, false);
              A.store.Bool(ptr + 56 + 32 + 32 + 32 + 25, false);

              A.store.Bool(ptr + 56 + 32 + 32 + 64 + 28, false);
              A.store.Ref(ptr + 56 + 32 + 32 + 64 + 0, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 64 + 4, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 64 + 8, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 64 + 12, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 64 + 16, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 64 + 20, undefined);
              A.store.Bool(ptr + 56 + 32 + 32 + 64 + 26, false);
              A.store.Bool(ptr + 56 + 32 + 32 + 64 + 24, false);
              A.store.Bool(ptr + 56 + 32 + 32 + 64 + 27, false);
              A.store.Bool(ptr + 56 + 32 + 32 + 64 + 25, false);

              A.store.Bool(ptr + 56 + 32 + 32 + 96 + 28, false);
              A.store.Ref(ptr + 56 + 32 + 32 + 96 + 0, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 96 + 4, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 96 + 8, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 96 + 12, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 96 + 16, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 96 + 20, undefined);
              A.store.Bool(ptr + 56 + 32 + 32 + 96 + 26, false);
              A.store.Bool(ptr + 56 + 32 + 32 + 96 + 24, false);
              A.store.Bool(ptr + 56 + 32 + 32 + 96 + 27, false);
              A.store.Bool(ptr + 56 + 32 + 32 + 96 + 25, false);
            } else {
              A.store.Bool(ptr + 56 + 32 + 32 + 125, true);

              if (typeof x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] === "undefined") {
                A.store.Bool(ptr + 56 + 32 + 32 + 0 + 28, false);
                A.store.Ref(ptr + 56 + 32 + 32 + 0 + 0, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 0 + 4, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 0 + 8, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 0 + 12, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 0 + 16, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 0 + 20, undefined);
                A.store.Bool(ptr + 56 + 32 + 32 + 0 + 26, false);
                A.store.Bool(ptr + 56 + 32 + 32 + 0 + 24, false);
                A.store.Bool(ptr + 56 + 32 + 32 + 0 + 27, false);
                A.store.Bool(ptr + 56 + 32 + 32 + 0 + 25, false);
              } else {
                A.store.Bool(ptr + 56 + 32 + 32 + 0 + 28, true);
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 0 + 0,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["Active"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 0 + 4,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["Effective"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 0 + 8,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 0 + 12,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 0 + 16,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 0 + 20,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 56 + 32 + 32 + 0 + 26,
                  "UserEditable" in x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 32 + 0 + 24,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 32 + 0 + 27,
                  "DeviceEditable" in x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 32 + 0 + 25,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] === "undefined") {
                A.store.Bool(ptr + 56 + 32 + 32 + 32 + 28, false);
                A.store.Ref(ptr + 56 + 32 + 32 + 32 + 0, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 32 + 4, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 32 + 8, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 32 + 12, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 32 + 16, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 32 + 20, undefined);
                A.store.Bool(ptr + 56 + 32 + 32 + 32 + 26, false);
                A.store.Bool(ptr + 56 + 32 + 32 + 32 + 24, false);
                A.store.Bool(ptr + 56 + 32 + 32 + 32 + 27, false);
                A.store.Bool(ptr + 56 + 32 + 32 + 32 + 25, false);
              } else {
                A.store.Bool(ptr + 56 + 32 + 32 + 32 + 28, true);
                A.store.Ref(ptr + 56 + 32 + 32 + 32 + 0, x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["Active"]);
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 32 + 4,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["Effective"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 32 + 8,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 32 + 12,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 32 + 16,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 32 + 20,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 56 + 32 + 32 + 32 + 26,
                  "UserEditable" in x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 32 + 32 + 24,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 32 + 32 + 27,
                  "DeviceEditable" in x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 32 + 32 + 25,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] === "undefined") {
                A.store.Bool(ptr + 56 + 32 + 32 + 64 + 28, false);
                A.store.Ref(ptr + 56 + 32 + 32 + 64 + 0, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 64 + 4, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 64 + 8, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 64 + 12, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 64 + 16, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 64 + 20, undefined);
                A.store.Bool(ptr + 56 + 32 + 32 + 64 + 26, false);
                A.store.Bool(ptr + 56 + 32 + 32 + 64 + 24, false);
                A.store.Bool(ptr + 56 + 32 + 32 + 64 + 27, false);
                A.store.Bool(ptr + 56 + 32 + 32 + 64 + 25, false);
              } else {
                A.store.Bool(ptr + 56 + 32 + 32 + 64 + 28, true);
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 64 + 0,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["Active"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 64 + 4,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["Effective"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 64 + 8,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 64 + 12,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 64 + 16,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 64 + 20,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 56 + 32 + 32 + 64 + 26,
                  "UserEditable" in x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 32 + 64 + 24,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 32 + 64 + 27,
                  "DeviceEditable" in x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 32 + 64 + 25,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] === "undefined") {
                A.store.Bool(ptr + 56 + 32 + 32 + 96 + 28, false);
                A.store.Ref(ptr + 56 + 32 + 32 + 96 + 0, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 96 + 4, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 96 + 8, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 96 + 12, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 96 + 16, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 96 + 20, undefined);
                A.store.Bool(ptr + 56 + 32 + 32 + 96 + 26, false);
                A.store.Bool(ptr + 56 + 32 + 32 + 96 + 24, false);
                A.store.Bool(ptr + 56 + 32 + 32 + 96 + 27, false);
                A.store.Bool(ptr + 56 + 32 + 32 + 96 + 25, false);
              } else {
                A.store.Bool(ptr + 56 + 32 + 32 + 96 + 28, true);
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 96 + 0,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Active"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 96 + 4,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Effective"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 96 + 8,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 96 + 12,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 96 + 16,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 96 + 20,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 56 + 32 + 32 + 96 + 26,
                  "UserEditable" in x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 32 + 96 + 24,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 32 + 96 + 27,
                  "DeviceEditable" in x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 32 + 96 + 25,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"] ? true : false
                );
              }
            }

            if (typeof x["EAP"]["ClientCertPattern"]["IssuerCARef"] === "undefined") {
              A.store.Bool(ptr + 56 + 32 + 160 + 28, false);
              A.store.Ref(ptr + 56 + 32 + 160 + 0, undefined);
              A.store.Ref(ptr + 56 + 32 + 160 + 4, undefined);
              A.store.Ref(ptr + 56 + 32 + 160 + 8, undefined);
              A.store.Ref(ptr + 56 + 32 + 160 + 12, undefined);
              A.store.Ref(ptr + 56 + 32 + 160 + 16, undefined);
              A.store.Ref(ptr + 56 + 32 + 160 + 20, undefined);
              A.store.Bool(ptr + 56 + 32 + 160 + 26, false);
              A.store.Bool(ptr + 56 + 32 + 160 + 24, false);
              A.store.Bool(ptr + 56 + 32 + 160 + 27, false);
              A.store.Bool(ptr + 56 + 32 + 160 + 25, false);
            } else {
              A.store.Bool(ptr + 56 + 32 + 160 + 28, true);
              A.store.Ref(ptr + 56 + 32 + 160 + 0, x["EAP"]["ClientCertPattern"]["IssuerCARef"]["Active"]);
              A.store.Ref(ptr + 56 + 32 + 160 + 4, x["EAP"]["ClientCertPattern"]["IssuerCARef"]["Effective"]);
              A.store.Ref(ptr + 56 + 32 + 160 + 8, x["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserPolicy"]);
              A.store.Ref(ptr + 56 + 32 + 160 + 12, x["EAP"]["ClientCertPattern"]["IssuerCARef"]["DevicePolicy"]);
              A.store.Ref(ptr + 56 + 32 + 160 + 16, x["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserSetting"]);
              A.store.Ref(ptr + 56 + 32 + 160 + 20, x["EAP"]["ClientCertPattern"]["IssuerCARef"]["SharedSetting"]);
              A.store.Bool(
                ptr + 56 + 32 + 160 + 26,
                "UserEditable" in x["EAP"]["ClientCertPattern"]["IssuerCARef"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 32 + 160 + 24,
                x["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 32 + 160 + 27,
                "DeviceEditable" in x["EAP"]["ClientCertPattern"]["IssuerCARef"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 32 + 160 + 25,
                x["EAP"]["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["EAP"]["ClientCertPattern"]["Subject"] === "undefined") {
              A.store.Bool(ptr + 56 + 32 + 192 + 125, false);

              A.store.Bool(ptr + 56 + 32 + 192 + 0 + 28, false);
              A.store.Ref(ptr + 56 + 32 + 192 + 0 + 0, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 0 + 4, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 0 + 8, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 0 + 12, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 0 + 16, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 0 + 20, undefined);
              A.store.Bool(ptr + 56 + 32 + 192 + 0 + 26, false);
              A.store.Bool(ptr + 56 + 32 + 192 + 0 + 24, false);
              A.store.Bool(ptr + 56 + 32 + 192 + 0 + 27, false);
              A.store.Bool(ptr + 56 + 32 + 192 + 0 + 25, false);

              A.store.Bool(ptr + 56 + 32 + 192 + 32 + 28, false);
              A.store.Ref(ptr + 56 + 32 + 192 + 32 + 0, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 32 + 4, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 32 + 8, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 32 + 12, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 32 + 16, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 32 + 20, undefined);
              A.store.Bool(ptr + 56 + 32 + 192 + 32 + 26, false);
              A.store.Bool(ptr + 56 + 32 + 192 + 32 + 24, false);
              A.store.Bool(ptr + 56 + 32 + 192 + 32 + 27, false);
              A.store.Bool(ptr + 56 + 32 + 192 + 32 + 25, false);

              A.store.Bool(ptr + 56 + 32 + 192 + 64 + 28, false);
              A.store.Ref(ptr + 56 + 32 + 192 + 64 + 0, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 64 + 4, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 64 + 8, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 64 + 12, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 64 + 16, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 64 + 20, undefined);
              A.store.Bool(ptr + 56 + 32 + 192 + 64 + 26, false);
              A.store.Bool(ptr + 56 + 32 + 192 + 64 + 24, false);
              A.store.Bool(ptr + 56 + 32 + 192 + 64 + 27, false);
              A.store.Bool(ptr + 56 + 32 + 192 + 64 + 25, false);

              A.store.Bool(ptr + 56 + 32 + 192 + 96 + 28, false);
              A.store.Ref(ptr + 56 + 32 + 192 + 96 + 0, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 96 + 4, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 96 + 8, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 96 + 12, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 96 + 16, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 96 + 20, undefined);
              A.store.Bool(ptr + 56 + 32 + 192 + 96 + 26, false);
              A.store.Bool(ptr + 56 + 32 + 192 + 96 + 24, false);
              A.store.Bool(ptr + 56 + 32 + 192 + 96 + 27, false);
              A.store.Bool(ptr + 56 + 32 + 192 + 96 + 25, false);
            } else {
              A.store.Bool(ptr + 56 + 32 + 192 + 125, true);

              if (typeof x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] === "undefined") {
                A.store.Bool(ptr + 56 + 32 + 192 + 0 + 28, false);
                A.store.Ref(ptr + 56 + 32 + 192 + 0 + 0, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 0 + 4, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 0 + 8, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 0 + 12, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 0 + 16, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 0 + 20, undefined);
                A.store.Bool(ptr + 56 + 32 + 192 + 0 + 26, false);
                A.store.Bool(ptr + 56 + 32 + 192 + 0 + 24, false);
                A.store.Bool(ptr + 56 + 32 + 192 + 0 + 27, false);
                A.store.Bool(ptr + 56 + 32 + 192 + 0 + 25, false);
              } else {
                A.store.Bool(ptr + 56 + 32 + 192 + 0 + 28, true);
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 0 + 0,
                  x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["Active"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 0 + 4,
                  x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["Effective"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 0 + 8,
                  x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 0 + 12,
                  x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 0 + 16,
                  x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 0 + 20,
                  x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 56 + 32 + 192 + 0 + 26,
                  "UserEditable" in x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 192 + 0 + 24,
                  x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 192 + 0 + 27,
                  "DeviceEditable" in x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 192 + 0 + 25,
                  x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["EAP"]["ClientCertPattern"]["Subject"]["Locality"] === "undefined") {
                A.store.Bool(ptr + 56 + 32 + 192 + 32 + 28, false);
                A.store.Ref(ptr + 56 + 32 + 192 + 32 + 0, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 32 + 4, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 32 + 8, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 32 + 12, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 32 + 16, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 32 + 20, undefined);
                A.store.Bool(ptr + 56 + 32 + 192 + 32 + 26, false);
                A.store.Bool(ptr + 56 + 32 + 192 + 32 + 24, false);
                A.store.Bool(ptr + 56 + 32 + 192 + 32 + 27, false);
                A.store.Bool(ptr + 56 + 32 + 192 + 32 + 25, false);
              } else {
                A.store.Bool(ptr + 56 + 32 + 192 + 32 + 28, true);
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 32 + 0,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["Active"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 32 + 4,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["Effective"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 32 + 8,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 32 + 12,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 32 + 16,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 32 + 20,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 56 + 32 + 192 + 32 + 26,
                  "UserEditable" in x["EAP"]["ClientCertPattern"]["Subject"]["Locality"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 192 + 32 + 24,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 192 + 32 + 27,
                  "DeviceEditable" in x["EAP"]["ClientCertPattern"]["Subject"]["Locality"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 192 + 32 + 25,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["EAP"]["ClientCertPattern"]["Subject"]["Organization"] === "undefined") {
                A.store.Bool(ptr + 56 + 32 + 192 + 64 + 28, false);
                A.store.Ref(ptr + 56 + 32 + 192 + 64 + 0, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 64 + 4, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 64 + 8, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 64 + 12, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 64 + 16, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 64 + 20, undefined);
                A.store.Bool(ptr + 56 + 32 + 192 + 64 + 26, false);
                A.store.Bool(ptr + 56 + 32 + 192 + 64 + 24, false);
                A.store.Bool(ptr + 56 + 32 + 192 + 64 + 27, false);
                A.store.Bool(ptr + 56 + 32 + 192 + 64 + 25, false);
              } else {
                A.store.Bool(ptr + 56 + 32 + 192 + 64 + 28, true);
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 64 + 0,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["Active"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 64 + 4,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["Effective"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 64 + 8,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 64 + 12,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 64 + 16,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 64 + 20,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 56 + 32 + 192 + 64 + 26,
                  "UserEditable" in x["EAP"]["ClientCertPattern"]["Subject"]["Organization"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 192 + 64 + 24,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 192 + 64 + 27,
                  "DeviceEditable" in x["EAP"]["ClientCertPattern"]["Subject"]["Organization"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 192 + 64 + 25,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] === "undefined") {
                A.store.Bool(ptr + 56 + 32 + 192 + 96 + 28, false);
                A.store.Ref(ptr + 56 + 32 + 192 + 96 + 0, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 96 + 4, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 96 + 8, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 96 + 12, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 96 + 16, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 96 + 20, undefined);
                A.store.Bool(ptr + 56 + 32 + 192 + 96 + 26, false);
                A.store.Bool(ptr + 56 + 32 + 192 + 96 + 24, false);
                A.store.Bool(ptr + 56 + 32 + 192 + 96 + 27, false);
                A.store.Bool(ptr + 56 + 32 + 192 + 96 + 25, false);
              } else {
                A.store.Bool(ptr + 56 + 32 + 192 + 96 + 28, true);
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 96 + 0,
                  x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Active"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 96 + 4,
                  x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Effective"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 96 + 8,
                  x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 96 + 12,
                  x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 96 + 16,
                  x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 96 + 20,
                  x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 56 + 32 + 192 + 96 + 26,
                  "UserEditable" in x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 192 + 96 + 24,
                  x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 192 + 96 + 27,
                  "DeviceEditable" in x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 192 + 96 + 25,
                  x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"] ? true : false
                );
              }
            }
          }

          if (typeof x["EAP"]["ClientCertPKCS11Id"] === "undefined") {
            A.store.Bool(ptr + 56 + 352 + 28, false);
            A.store.Ref(ptr + 56 + 352 + 0, undefined);
            A.store.Ref(ptr + 56 + 352 + 4, undefined);
            A.store.Ref(ptr + 56 + 352 + 8, undefined);
            A.store.Ref(ptr + 56 + 352 + 12, undefined);
            A.store.Ref(ptr + 56 + 352 + 16, undefined);
            A.store.Ref(ptr + 56 + 352 + 20, undefined);
            A.store.Bool(ptr + 56 + 352 + 26, false);
            A.store.Bool(ptr + 56 + 352 + 24, false);
            A.store.Bool(ptr + 56 + 352 + 27, false);
            A.store.Bool(ptr + 56 + 352 + 25, false);
          } else {
            A.store.Bool(ptr + 56 + 352 + 28, true);
            A.store.Ref(ptr + 56 + 352 + 0, x["EAP"]["ClientCertPKCS11Id"]["Active"]);
            A.store.Ref(ptr + 56 + 352 + 4, x["EAP"]["ClientCertPKCS11Id"]["Effective"]);
            A.store.Ref(ptr + 56 + 352 + 8, x["EAP"]["ClientCertPKCS11Id"]["UserPolicy"]);
            A.store.Ref(ptr + 56 + 352 + 12, x["EAP"]["ClientCertPKCS11Id"]["DevicePolicy"]);
            A.store.Ref(ptr + 56 + 352 + 16, x["EAP"]["ClientCertPKCS11Id"]["UserSetting"]);
            A.store.Ref(ptr + 56 + 352 + 20, x["EAP"]["ClientCertPKCS11Id"]["SharedSetting"]);
            A.store.Bool(ptr + 56 + 352 + 26, "UserEditable" in x["EAP"]["ClientCertPKCS11Id"] ? true : false);
            A.store.Bool(ptr + 56 + 352 + 24, x["EAP"]["ClientCertPKCS11Id"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 56 + 352 + 27, "DeviceEditable" in x["EAP"]["ClientCertPKCS11Id"] ? true : false);
            A.store.Bool(ptr + 56 + 352 + 25, x["EAP"]["ClientCertPKCS11Id"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["ClientCertProvisioningProfileId"] === "undefined") {
            A.store.Bool(ptr + 56 + 384 + 28, false);
            A.store.Ref(ptr + 56 + 384 + 0, undefined);
            A.store.Ref(ptr + 56 + 384 + 4, undefined);
            A.store.Ref(ptr + 56 + 384 + 8, undefined);
            A.store.Ref(ptr + 56 + 384 + 12, undefined);
            A.store.Ref(ptr + 56 + 384 + 16, undefined);
            A.store.Ref(ptr + 56 + 384 + 20, undefined);
            A.store.Bool(ptr + 56 + 384 + 26, false);
            A.store.Bool(ptr + 56 + 384 + 24, false);
            A.store.Bool(ptr + 56 + 384 + 27, false);
            A.store.Bool(ptr + 56 + 384 + 25, false);
          } else {
            A.store.Bool(ptr + 56 + 384 + 28, true);
            A.store.Ref(ptr + 56 + 384 + 0, x["EAP"]["ClientCertProvisioningProfileId"]["Active"]);
            A.store.Ref(ptr + 56 + 384 + 4, x["EAP"]["ClientCertProvisioningProfileId"]["Effective"]);
            A.store.Ref(ptr + 56 + 384 + 8, x["EAP"]["ClientCertProvisioningProfileId"]["UserPolicy"]);
            A.store.Ref(ptr + 56 + 384 + 12, x["EAP"]["ClientCertProvisioningProfileId"]["DevicePolicy"]);
            A.store.Ref(ptr + 56 + 384 + 16, x["EAP"]["ClientCertProvisioningProfileId"]["UserSetting"]);
            A.store.Ref(ptr + 56 + 384 + 20, x["EAP"]["ClientCertProvisioningProfileId"]["SharedSetting"]);
            A.store.Bool(
              ptr + 56 + 384 + 26,
              "UserEditable" in x["EAP"]["ClientCertProvisioningProfileId"] ? true : false
            );
            A.store.Bool(
              ptr + 56 + 384 + 24,
              x["EAP"]["ClientCertProvisioningProfileId"]["UserEditable"] ? true : false
            );
            A.store.Bool(
              ptr + 56 + 384 + 27,
              "DeviceEditable" in x["EAP"]["ClientCertProvisioningProfileId"] ? true : false
            );
            A.store.Bool(
              ptr + 56 + 384 + 25,
              x["EAP"]["ClientCertProvisioningProfileId"]["DeviceEditable"] ? true : false
            );
          }

          if (typeof x["EAP"]["ClientCertRef"] === "undefined") {
            A.store.Bool(ptr + 56 + 416 + 28, false);
            A.store.Ref(ptr + 56 + 416 + 0, undefined);
            A.store.Ref(ptr + 56 + 416 + 4, undefined);
            A.store.Ref(ptr + 56 + 416 + 8, undefined);
            A.store.Ref(ptr + 56 + 416 + 12, undefined);
            A.store.Ref(ptr + 56 + 416 + 16, undefined);
            A.store.Ref(ptr + 56 + 416 + 20, undefined);
            A.store.Bool(ptr + 56 + 416 + 26, false);
            A.store.Bool(ptr + 56 + 416 + 24, false);
            A.store.Bool(ptr + 56 + 416 + 27, false);
            A.store.Bool(ptr + 56 + 416 + 25, false);
          } else {
            A.store.Bool(ptr + 56 + 416 + 28, true);
            A.store.Ref(ptr + 56 + 416 + 0, x["EAP"]["ClientCertRef"]["Active"]);
            A.store.Ref(ptr + 56 + 416 + 4, x["EAP"]["ClientCertRef"]["Effective"]);
            A.store.Ref(ptr + 56 + 416 + 8, x["EAP"]["ClientCertRef"]["UserPolicy"]);
            A.store.Ref(ptr + 56 + 416 + 12, x["EAP"]["ClientCertRef"]["DevicePolicy"]);
            A.store.Ref(ptr + 56 + 416 + 16, x["EAP"]["ClientCertRef"]["UserSetting"]);
            A.store.Ref(ptr + 56 + 416 + 20, x["EAP"]["ClientCertRef"]["SharedSetting"]);
            A.store.Bool(ptr + 56 + 416 + 26, "UserEditable" in x["EAP"]["ClientCertRef"] ? true : false);
            A.store.Bool(ptr + 56 + 416 + 24, x["EAP"]["ClientCertRef"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 56 + 416 + 27, "DeviceEditable" in x["EAP"]["ClientCertRef"] ? true : false);
            A.store.Bool(ptr + 56 + 416 + 25, x["EAP"]["ClientCertRef"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["ClientCertType"] === "undefined") {
            A.store.Bool(ptr + 56 + 448 + 28, false);
            A.store.Ref(ptr + 56 + 448 + 0, undefined);
            A.store.Ref(ptr + 56 + 448 + 4, undefined);
            A.store.Ref(ptr + 56 + 448 + 8, undefined);
            A.store.Ref(ptr + 56 + 448 + 12, undefined);
            A.store.Ref(ptr + 56 + 448 + 16, undefined);
            A.store.Ref(ptr + 56 + 448 + 20, undefined);
            A.store.Bool(ptr + 56 + 448 + 26, false);
            A.store.Bool(ptr + 56 + 448 + 24, false);
            A.store.Bool(ptr + 56 + 448 + 27, false);
            A.store.Bool(ptr + 56 + 448 + 25, false);
          } else {
            A.store.Bool(ptr + 56 + 448 + 28, true);
            A.store.Ref(ptr + 56 + 448 + 0, x["EAP"]["ClientCertType"]["Active"]);
            A.store.Ref(ptr + 56 + 448 + 4, x["EAP"]["ClientCertType"]["Effective"]);
            A.store.Ref(ptr + 56 + 448 + 8, x["EAP"]["ClientCertType"]["UserPolicy"]);
            A.store.Ref(ptr + 56 + 448 + 12, x["EAP"]["ClientCertType"]["DevicePolicy"]);
            A.store.Ref(ptr + 56 + 448 + 16, x["EAP"]["ClientCertType"]["UserSetting"]);
            A.store.Ref(ptr + 56 + 448 + 20, x["EAP"]["ClientCertType"]["SharedSetting"]);
            A.store.Bool(ptr + 56 + 448 + 26, "UserEditable" in x["EAP"]["ClientCertType"] ? true : false);
            A.store.Bool(ptr + 56 + 448 + 24, x["EAP"]["ClientCertType"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 56 + 448 + 27, "DeviceEditable" in x["EAP"]["ClientCertType"] ? true : false);
            A.store.Bool(ptr + 56 + 448 + 25, x["EAP"]["ClientCertType"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["Identity"] === "undefined") {
            A.store.Bool(ptr + 56 + 480 + 28, false);
            A.store.Ref(ptr + 56 + 480 + 0, undefined);
            A.store.Ref(ptr + 56 + 480 + 4, undefined);
            A.store.Ref(ptr + 56 + 480 + 8, undefined);
            A.store.Ref(ptr + 56 + 480 + 12, undefined);
            A.store.Ref(ptr + 56 + 480 + 16, undefined);
            A.store.Ref(ptr + 56 + 480 + 20, undefined);
            A.store.Bool(ptr + 56 + 480 + 26, false);
            A.store.Bool(ptr + 56 + 480 + 24, false);
            A.store.Bool(ptr + 56 + 480 + 27, false);
            A.store.Bool(ptr + 56 + 480 + 25, false);
          } else {
            A.store.Bool(ptr + 56 + 480 + 28, true);
            A.store.Ref(ptr + 56 + 480 + 0, x["EAP"]["Identity"]["Active"]);
            A.store.Ref(ptr + 56 + 480 + 4, x["EAP"]["Identity"]["Effective"]);
            A.store.Ref(ptr + 56 + 480 + 8, x["EAP"]["Identity"]["UserPolicy"]);
            A.store.Ref(ptr + 56 + 480 + 12, x["EAP"]["Identity"]["DevicePolicy"]);
            A.store.Ref(ptr + 56 + 480 + 16, x["EAP"]["Identity"]["UserSetting"]);
            A.store.Ref(ptr + 56 + 480 + 20, x["EAP"]["Identity"]["SharedSetting"]);
            A.store.Bool(ptr + 56 + 480 + 26, "UserEditable" in x["EAP"]["Identity"] ? true : false);
            A.store.Bool(ptr + 56 + 480 + 24, x["EAP"]["Identity"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 56 + 480 + 27, "DeviceEditable" in x["EAP"]["Identity"] ? true : false);
            A.store.Bool(ptr + 56 + 480 + 25, x["EAP"]["Identity"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["Inner"] === "undefined") {
            A.store.Bool(ptr + 56 + 512 + 28, false);
            A.store.Ref(ptr + 56 + 512 + 0, undefined);
            A.store.Ref(ptr + 56 + 512 + 4, undefined);
            A.store.Ref(ptr + 56 + 512 + 8, undefined);
            A.store.Ref(ptr + 56 + 512 + 12, undefined);
            A.store.Ref(ptr + 56 + 512 + 16, undefined);
            A.store.Ref(ptr + 56 + 512 + 20, undefined);
            A.store.Bool(ptr + 56 + 512 + 26, false);
            A.store.Bool(ptr + 56 + 512 + 24, false);
            A.store.Bool(ptr + 56 + 512 + 27, false);
            A.store.Bool(ptr + 56 + 512 + 25, false);
          } else {
            A.store.Bool(ptr + 56 + 512 + 28, true);
            A.store.Ref(ptr + 56 + 512 + 0, x["EAP"]["Inner"]["Active"]);
            A.store.Ref(ptr + 56 + 512 + 4, x["EAP"]["Inner"]["Effective"]);
            A.store.Ref(ptr + 56 + 512 + 8, x["EAP"]["Inner"]["UserPolicy"]);
            A.store.Ref(ptr + 56 + 512 + 12, x["EAP"]["Inner"]["DevicePolicy"]);
            A.store.Ref(ptr + 56 + 512 + 16, x["EAP"]["Inner"]["UserSetting"]);
            A.store.Ref(ptr + 56 + 512 + 20, x["EAP"]["Inner"]["SharedSetting"]);
            A.store.Bool(ptr + 56 + 512 + 26, "UserEditable" in x["EAP"]["Inner"] ? true : false);
            A.store.Bool(ptr + 56 + 512 + 24, x["EAP"]["Inner"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 56 + 512 + 27, "DeviceEditable" in x["EAP"]["Inner"] ? true : false);
            A.store.Bool(ptr + 56 + 512 + 25, x["EAP"]["Inner"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["Outer"] === "undefined") {
            A.store.Bool(ptr + 56 + 544 + 28, false);
            A.store.Ref(ptr + 56 + 544 + 0, undefined);
            A.store.Ref(ptr + 56 + 544 + 4, undefined);
            A.store.Ref(ptr + 56 + 544 + 8, undefined);
            A.store.Ref(ptr + 56 + 544 + 12, undefined);
            A.store.Ref(ptr + 56 + 544 + 16, undefined);
            A.store.Ref(ptr + 56 + 544 + 20, undefined);
            A.store.Bool(ptr + 56 + 544 + 26, false);
            A.store.Bool(ptr + 56 + 544 + 24, false);
            A.store.Bool(ptr + 56 + 544 + 27, false);
            A.store.Bool(ptr + 56 + 544 + 25, false);
          } else {
            A.store.Bool(ptr + 56 + 544 + 28, true);
            A.store.Ref(ptr + 56 + 544 + 0, x["EAP"]["Outer"]["Active"]);
            A.store.Ref(ptr + 56 + 544 + 4, x["EAP"]["Outer"]["Effective"]);
            A.store.Ref(ptr + 56 + 544 + 8, x["EAP"]["Outer"]["UserPolicy"]);
            A.store.Ref(ptr + 56 + 544 + 12, x["EAP"]["Outer"]["DevicePolicy"]);
            A.store.Ref(ptr + 56 + 544 + 16, x["EAP"]["Outer"]["UserSetting"]);
            A.store.Ref(ptr + 56 + 544 + 20, x["EAP"]["Outer"]["SharedSetting"]);
            A.store.Bool(ptr + 56 + 544 + 26, "UserEditable" in x["EAP"]["Outer"] ? true : false);
            A.store.Bool(ptr + 56 + 544 + 24, x["EAP"]["Outer"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 56 + 544 + 27, "DeviceEditable" in x["EAP"]["Outer"] ? true : false);
            A.store.Bool(ptr + 56 + 544 + 25, x["EAP"]["Outer"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["Password"] === "undefined") {
            A.store.Bool(ptr + 56 + 576 + 28, false);
            A.store.Ref(ptr + 56 + 576 + 0, undefined);
            A.store.Ref(ptr + 56 + 576 + 4, undefined);
            A.store.Ref(ptr + 56 + 576 + 8, undefined);
            A.store.Ref(ptr + 56 + 576 + 12, undefined);
            A.store.Ref(ptr + 56 + 576 + 16, undefined);
            A.store.Ref(ptr + 56 + 576 + 20, undefined);
            A.store.Bool(ptr + 56 + 576 + 26, false);
            A.store.Bool(ptr + 56 + 576 + 24, false);
            A.store.Bool(ptr + 56 + 576 + 27, false);
            A.store.Bool(ptr + 56 + 576 + 25, false);
          } else {
            A.store.Bool(ptr + 56 + 576 + 28, true);
            A.store.Ref(ptr + 56 + 576 + 0, x["EAP"]["Password"]["Active"]);
            A.store.Ref(ptr + 56 + 576 + 4, x["EAP"]["Password"]["Effective"]);
            A.store.Ref(ptr + 56 + 576 + 8, x["EAP"]["Password"]["UserPolicy"]);
            A.store.Ref(ptr + 56 + 576 + 12, x["EAP"]["Password"]["DevicePolicy"]);
            A.store.Ref(ptr + 56 + 576 + 16, x["EAP"]["Password"]["UserSetting"]);
            A.store.Ref(ptr + 56 + 576 + 20, x["EAP"]["Password"]["SharedSetting"]);
            A.store.Bool(ptr + 56 + 576 + 26, "UserEditable" in x["EAP"]["Password"] ? true : false);
            A.store.Bool(ptr + 56 + 576 + 24, x["EAP"]["Password"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 56 + 576 + 27, "DeviceEditable" in x["EAP"]["Password"] ? true : false);
            A.store.Bool(ptr + 56 + 576 + 25, x["EAP"]["Password"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["SaveCredentials"] === "undefined") {
            A.store.Bool(ptr + 56 + 608 + 21, false);
            A.store.Bool(ptr + 56 + 608 + 14, false);
            A.store.Bool(ptr + 56 + 608 + 0, false);
            A.store.Ref(ptr + 56 + 608 + 4, undefined);
            A.store.Bool(ptr + 56 + 608 + 15, false);
            A.store.Bool(ptr + 56 + 608 + 8, false);
            A.store.Bool(ptr + 56 + 608 + 16, false);
            A.store.Bool(ptr + 56 + 608 + 9, false);
            A.store.Bool(ptr + 56 + 608 + 17, false);
            A.store.Bool(ptr + 56 + 608 + 10, false);
            A.store.Bool(ptr + 56 + 608 + 18, false);
            A.store.Bool(ptr + 56 + 608 + 11, false);
            A.store.Bool(ptr + 56 + 608 + 19, false);
            A.store.Bool(ptr + 56 + 608 + 12, false);
            A.store.Bool(ptr + 56 + 608 + 20, false);
            A.store.Bool(ptr + 56 + 608 + 13, false);
          } else {
            A.store.Bool(ptr + 56 + 608 + 21, true);
            A.store.Bool(ptr + 56 + 608 + 14, "Active" in x["EAP"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 56 + 608 + 0, x["EAP"]["SaveCredentials"]["Active"] ? true : false);
            A.store.Ref(ptr + 56 + 608 + 4, x["EAP"]["SaveCredentials"]["Effective"]);
            A.store.Bool(ptr + 56 + 608 + 15, "UserPolicy" in x["EAP"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 56 + 608 + 8, x["EAP"]["SaveCredentials"]["UserPolicy"] ? true : false);
            A.store.Bool(ptr + 56 + 608 + 16, "DevicePolicy" in x["EAP"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 56 + 608 + 9, x["EAP"]["SaveCredentials"]["DevicePolicy"] ? true : false);
            A.store.Bool(ptr + 56 + 608 + 17, "UserSetting" in x["EAP"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 56 + 608 + 10, x["EAP"]["SaveCredentials"]["UserSetting"] ? true : false);
            A.store.Bool(ptr + 56 + 608 + 18, "SharedSetting" in x["EAP"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 56 + 608 + 11, x["EAP"]["SaveCredentials"]["SharedSetting"] ? true : false);
            A.store.Bool(ptr + 56 + 608 + 19, "UserEditable" in x["EAP"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 56 + 608 + 12, x["EAP"]["SaveCredentials"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 56 + 608 + 20, "DeviceEditable" in x["EAP"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 56 + 608 + 13, x["EAP"]["SaveCredentials"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["ServerCAPEMs"] === "undefined") {
            A.store.Bool(ptr + 56 + 632 + 28, false);
            A.store.Ref(ptr + 56 + 632 + 0, undefined);
            A.store.Ref(ptr + 56 + 632 + 4, undefined);
            A.store.Ref(ptr + 56 + 632 + 8, undefined);
            A.store.Ref(ptr + 56 + 632 + 12, undefined);
            A.store.Ref(ptr + 56 + 632 + 16, undefined);
            A.store.Ref(ptr + 56 + 632 + 20, undefined);
            A.store.Bool(ptr + 56 + 632 + 26, false);
            A.store.Bool(ptr + 56 + 632 + 24, false);
            A.store.Bool(ptr + 56 + 632 + 27, false);
            A.store.Bool(ptr + 56 + 632 + 25, false);
          } else {
            A.store.Bool(ptr + 56 + 632 + 28, true);
            A.store.Ref(ptr + 56 + 632 + 0, x["EAP"]["ServerCAPEMs"]["Active"]);
            A.store.Ref(ptr + 56 + 632 + 4, x["EAP"]["ServerCAPEMs"]["Effective"]);
            A.store.Ref(ptr + 56 + 632 + 8, x["EAP"]["ServerCAPEMs"]["UserPolicy"]);
            A.store.Ref(ptr + 56 + 632 + 12, x["EAP"]["ServerCAPEMs"]["DevicePolicy"]);
            A.store.Ref(ptr + 56 + 632 + 16, x["EAP"]["ServerCAPEMs"]["UserSetting"]);
            A.store.Ref(ptr + 56 + 632 + 20, x["EAP"]["ServerCAPEMs"]["SharedSetting"]);
            A.store.Bool(ptr + 56 + 632 + 26, "UserEditable" in x["EAP"]["ServerCAPEMs"] ? true : false);
            A.store.Bool(ptr + 56 + 632 + 24, x["EAP"]["ServerCAPEMs"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 56 + 632 + 27, "DeviceEditable" in x["EAP"]["ServerCAPEMs"] ? true : false);
            A.store.Bool(ptr + 56 + 632 + 25, x["EAP"]["ServerCAPEMs"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["ServerCARefs"] === "undefined") {
            A.store.Bool(ptr + 56 + 664 + 28, false);
            A.store.Ref(ptr + 56 + 664 + 0, undefined);
            A.store.Ref(ptr + 56 + 664 + 4, undefined);
            A.store.Ref(ptr + 56 + 664 + 8, undefined);
            A.store.Ref(ptr + 56 + 664 + 12, undefined);
            A.store.Ref(ptr + 56 + 664 + 16, undefined);
            A.store.Ref(ptr + 56 + 664 + 20, undefined);
            A.store.Bool(ptr + 56 + 664 + 26, false);
            A.store.Bool(ptr + 56 + 664 + 24, false);
            A.store.Bool(ptr + 56 + 664 + 27, false);
            A.store.Bool(ptr + 56 + 664 + 25, false);
          } else {
            A.store.Bool(ptr + 56 + 664 + 28, true);
            A.store.Ref(ptr + 56 + 664 + 0, x["EAP"]["ServerCARefs"]["Active"]);
            A.store.Ref(ptr + 56 + 664 + 4, x["EAP"]["ServerCARefs"]["Effective"]);
            A.store.Ref(ptr + 56 + 664 + 8, x["EAP"]["ServerCARefs"]["UserPolicy"]);
            A.store.Ref(ptr + 56 + 664 + 12, x["EAP"]["ServerCARefs"]["DevicePolicy"]);
            A.store.Ref(ptr + 56 + 664 + 16, x["EAP"]["ServerCARefs"]["UserSetting"]);
            A.store.Ref(ptr + 56 + 664 + 20, x["EAP"]["ServerCARefs"]["SharedSetting"]);
            A.store.Bool(ptr + 56 + 664 + 26, "UserEditable" in x["EAP"]["ServerCARefs"] ? true : false);
            A.store.Bool(ptr + 56 + 664 + 24, x["EAP"]["ServerCARefs"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 56 + 664 + 27, "DeviceEditable" in x["EAP"]["ServerCARefs"] ? true : false);
            A.store.Bool(ptr + 56 + 664 + 25, x["EAP"]["ServerCARefs"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["SubjectMatch"] === "undefined") {
            A.store.Bool(ptr + 56 + 696 + 28, false);
            A.store.Ref(ptr + 56 + 696 + 0, undefined);
            A.store.Ref(ptr + 56 + 696 + 4, undefined);
            A.store.Ref(ptr + 56 + 696 + 8, undefined);
            A.store.Ref(ptr + 56 + 696 + 12, undefined);
            A.store.Ref(ptr + 56 + 696 + 16, undefined);
            A.store.Ref(ptr + 56 + 696 + 20, undefined);
            A.store.Bool(ptr + 56 + 696 + 26, false);
            A.store.Bool(ptr + 56 + 696 + 24, false);
            A.store.Bool(ptr + 56 + 696 + 27, false);
            A.store.Bool(ptr + 56 + 696 + 25, false);
          } else {
            A.store.Bool(ptr + 56 + 696 + 28, true);
            A.store.Ref(ptr + 56 + 696 + 0, x["EAP"]["SubjectMatch"]["Active"]);
            A.store.Ref(ptr + 56 + 696 + 4, x["EAP"]["SubjectMatch"]["Effective"]);
            A.store.Ref(ptr + 56 + 696 + 8, x["EAP"]["SubjectMatch"]["UserPolicy"]);
            A.store.Ref(ptr + 56 + 696 + 12, x["EAP"]["SubjectMatch"]["DevicePolicy"]);
            A.store.Ref(ptr + 56 + 696 + 16, x["EAP"]["SubjectMatch"]["UserSetting"]);
            A.store.Ref(ptr + 56 + 696 + 20, x["EAP"]["SubjectMatch"]["SharedSetting"]);
            A.store.Bool(ptr + 56 + 696 + 26, "UserEditable" in x["EAP"]["SubjectMatch"] ? true : false);
            A.store.Bool(ptr + 56 + 696 + 24, x["EAP"]["SubjectMatch"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 56 + 696 + 27, "DeviceEditable" in x["EAP"]["SubjectMatch"] ? true : false);
            A.store.Bool(ptr + 56 + 696 + 25, x["EAP"]["SubjectMatch"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["TLSVersionMax"] === "undefined") {
            A.store.Bool(ptr + 56 + 728 + 28, false);
            A.store.Ref(ptr + 56 + 728 + 0, undefined);
            A.store.Ref(ptr + 56 + 728 + 4, undefined);
            A.store.Ref(ptr + 56 + 728 + 8, undefined);
            A.store.Ref(ptr + 56 + 728 + 12, undefined);
            A.store.Ref(ptr + 56 + 728 + 16, undefined);
            A.store.Ref(ptr + 56 + 728 + 20, undefined);
            A.store.Bool(ptr + 56 + 728 + 26, false);
            A.store.Bool(ptr + 56 + 728 + 24, false);
            A.store.Bool(ptr + 56 + 728 + 27, false);
            A.store.Bool(ptr + 56 + 728 + 25, false);
          } else {
            A.store.Bool(ptr + 56 + 728 + 28, true);
            A.store.Ref(ptr + 56 + 728 + 0, x["EAP"]["TLSVersionMax"]["Active"]);
            A.store.Ref(ptr + 56 + 728 + 4, x["EAP"]["TLSVersionMax"]["Effective"]);
            A.store.Ref(ptr + 56 + 728 + 8, x["EAP"]["TLSVersionMax"]["UserPolicy"]);
            A.store.Ref(ptr + 56 + 728 + 12, x["EAP"]["TLSVersionMax"]["DevicePolicy"]);
            A.store.Ref(ptr + 56 + 728 + 16, x["EAP"]["TLSVersionMax"]["UserSetting"]);
            A.store.Ref(ptr + 56 + 728 + 20, x["EAP"]["TLSVersionMax"]["SharedSetting"]);
            A.store.Bool(ptr + 56 + 728 + 26, "UserEditable" in x["EAP"]["TLSVersionMax"] ? true : false);
            A.store.Bool(ptr + 56 + 728 + 24, x["EAP"]["TLSVersionMax"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 56 + 728 + 27, "DeviceEditable" in x["EAP"]["TLSVersionMax"] ? true : false);
            A.store.Bool(ptr + 56 + 728 + 25, x["EAP"]["TLSVersionMax"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["UseProactiveKeyCaching"] === "undefined") {
            A.store.Bool(ptr + 56 + 760 + 21, false);
            A.store.Bool(ptr + 56 + 760 + 14, false);
            A.store.Bool(ptr + 56 + 760 + 0, false);
            A.store.Ref(ptr + 56 + 760 + 4, undefined);
            A.store.Bool(ptr + 56 + 760 + 15, false);
            A.store.Bool(ptr + 56 + 760 + 8, false);
            A.store.Bool(ptr + 56 + 760 + 16, false);
            A.store.Bool(ptr + 56 + 760 + 9, false);
            A.store.Bool(ptr + 56 + 760 + 17, false);
            A.store.Bool(ptr + 56 + 760 + 10, false);
            A.store.Bool(ptr + 56 + 760 + 18, false);
            A.store.Bool(ptr + 56 + 760 + 11, false);
            A.store.Bool(ptr + 56 + 760 + 19, false);
            A.store.Bool(ptr + 56 + 760 + 12, false);
            A.store.Bool(ptr + 56 + 760 + 20, false);
            A.store.Bool(ptr + 56 + 760 + 13, false);
          } else {
            A.store.Bool(ptr + 56 + 760 + 21, true);
            A.store.Bool(ptr + 56 + 760 + 14, "Active" in x["EAP"]["UseProactiveKeyCaching"] ? true : false);
            A.store.Bool(ptr + 56 + 760 + 0, x["EAP"]["UseProactiveKeyCaching"]["Active"] ? true : false);
            A.store.Ref(ptr + 56 + 760 + 4, x["EAP"]["UseProactiveKeyCaching"]["Effective"]);
            A.store.Bool(ptr + 56 + 760 + 15, "UserPolicy" in x["EAP"]["UseProactiveKeyCaching"] ? true : false);
            A.store.Bool(ptr + 56 + 760 + 8, x["EAP"]["UseProactiveKeyCaching"]["UserPolicy"] ? true : false);
            A.store.Bool(ptr + 56 + 760 + 16, "DevicePolicy" in x["EAP"]["UseProactiveKeyCaching"] ? true : false);
            A.store.Bool(ptr + 56 + 760 + 9, x["EAP"]["UseProactiveKeyCaching"]["DevicePolicy"] ? true : false);
            A.store.Bool(ptr + 56 + 760 + 17, "UserSetting" in x["EAP"]["UseProactiveKeyCaching"] ? true : false);
            A.store.Bool(ptr + 56 + 760 + 10, x["EAP"]["UseProactiveKeyCaching"]["UserSetting"] ? true : false);
            A.store.Bool(ptr + 56 + 760 + 18, "SharedSetting" in x["EAP"]["UseProactiveKeyCaching"] ? true : false);
            A.store.Bool(ptr + 56 + 760 + 11, x["EAP"]["UseProactiveKeyCaching"]["SharedSetting"] ? true : false);
            A.store.Bool(ptr + 56 + 760 + 19, "UserEditable" in x["EAP"]["UseProactiveKeyCaching"] ? true : false);
            A.store.Bool(ptr + 56 + 760 + 12, x["EAP"]["UseProactiveKeyCaching"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 56 + 760 + 20, "DeviceEditable" in x["EAP"]["UseProactiveKeyCaching"] ? true : false);
            A.store.Bool(ptr + 56 + 760 + 13, x["EAP"]["UseProactiveKeyCaching"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["UseSystemCAs"] === "undefined") {
            A.store.Bool(ptr + 56 + 784 + 21, false);
            A.store.Bool(ptr + 56 + 784 + 14, false);
            A.store.Bool(ptr + 56 + 784 + 0, false);
            A.store.Ref(ptr + 56 + 784 + 4, undefined);
            A.store.Bool(ptr + 56 + 784 + 15, false);
            A.store.Bool(ptr + 56 + 784 + 8, false);
            A.store.Bool(ptr + 56 + 784 + 16, false);
            A.store.Bool(ptr + 56 + 784 + 9, false);
            A.store.Bool(ptr + 56 + 784 + 17, false);
            A.store.Bool(ptr + 56 + 784 + 10, false);
            A.store.Bool(ptr + 56 + 784 + 18, false);
            A.store.Bool(ptr + 56 + 784 + 11, false);
            A.store.Bool(ptr + 56 + 784 + 19, false);
            A.store.Bool(ptr + 56 + 784 + 12, false);
            A.store.Bool(ptr + 56 + 784 + 20, false);
            A.store.Bool(ptr + 56 + 784 + 13, false);
          } else {
            A.store.Bool(ptr + 56 + 784 + 21, true);
            A.store.Bool(ptr + 56 + 784 + 14, "Active" in x["EAP"]["UseSystemCAs"] ? true : false);
            A.store.Bool(ptr + 56 + 784 + 0, x["EAP"]["UseSystemCAs"]["Active"] ? true : false);
            A.store.Ref(ptr + 56 + 784 + 4, x["EAP"]["UseSystemCAs"]["Effective"]);
            A.store.Bool(ptr + 56 + 784 + 15, "UserPolicy" in x["EAP"]["UseSystemCAs"] ? true : false);
            A.store.Bool(ptr + 56 + 784 + 8, x["EAP"]["UseSystemCAs"]["UserPolicy"] ? true : false);
            A.store.Bool(ptr + 56 + 784 + 16, "DevicePolicy" in x["EAP"]["UseSystemCAs"] ? true : false);
            A.store.Bool(ptr + 56 + 784 + 9, x["EAP"]["UseSystemCAs"]["DevicePolicy"] ? true : false);
            A.store.Bool(ptr + 56 + 784 + 17, "UserSetting" in x["EAP"]["UseSystemCAs"] ? true : false);
            A.store.Bool(ptr + 56 + 784 + 10, x["EAP"]["UseSystemCAs"]["UserSetting"] ? true : false);
            A.store.Bool(ptr + 56 + 784 + 18, "SharedSetting" in x["EAP"]["UseSystemCAs"] ? true : false);
            A.store.Bool(ptr + 56 + 784 + 11, x["EAP"]["UseSystemCAs"]["SharedSetting"] ? true : false);
            A.store.Bool(ptr + 56 + 784 + 19, "UserEditable" in x["EAP"]["UseSystemCAs"] ? true : false);
            A.store.Bool(ptr + 56 + 784 + 12, x["EAP"]["UseSystemCAs"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 56 + 784 + 20, "DeviceEditable" in x["EAP"]["UseSystemCAs"] ? true : false);
            A.store.Bool(ptr + 56 + 784 + 13, x["EAP"]["UseSystemCAs"]["DeviceEditable"] ? true : false);
          }
        }
      }
    },
    "load_ManagedEthernetProperties": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      if (A.load.Bool(ptr + 0 + 21)) {
        x["AutoConnect"] = {};
        if (A.load.Bool(ptr + 0 + 14)) {
          x["AutoConnect"]["Active"] = A.load.Bool(ptr + 0 + 0);
        } else {
          delete x["AutoConnect"]["Active"];
        }
        x["AutoConnect"]["Effective"] = A.load.Ref(ptr + 0 + 4, undefined);
        if (A.load.Bool(ptr + 0 + 15)) {
          x["AutoConnect"]["UserPolicy"] = A.load.Bool(ptr + 0 + 8);
        } else {
          delete x["AutoConnect"]["UserPolicy"];
        }
        if (A.load.Bool(ptr + 0 + 16)) {
          x["AutoConnect"]["DevicePolicy"] = A.load.Bool(ptr + 0 + 9);
        } else {
          delete x["AutoConnect"]["DevicePolicy"];
        }
        if (A.load.Bool(ptr + 0 + 17)) {
          x["AutoConnect"]["UserSetting"] = A.load.Bool(ptr + 0 + 10);
        } else {
          delete x["AutoConnect"]["UserSetting"];
        }
        if (A.load.Bool(ptr + 0 + 18)) {
          x["AutoConnect"]["SharedSetting"] = A.load.Bool(ptr + 0 + 11);
        } else {
          delete x["AutoConnect"]["SharedSetting"];
        }
        if (A.load.Bool(ptr + 0 + 19)) {
          x["AutoConnect"]["UserEditable"] = A.load.Bool(ptr + 0 + 12);
        } else {
          delete x["AutoConnect"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 0 + 20)) {
          x["AutoConnect"]["DeviceEditable"] = A.load.Bool(ptr + 0 + 13);
        } else {
          delete x["AutoConnect"]["DeviceEditable"];
        }
      } else {
        delete x["AutoConnect"];
      }
      if (A.load.Bool(ptr + 24 + 28)) {
        x["Authentication"] = {};
        x["Authentication"]["Active"] = A.load.Ref(ptr + 24 + 0, undefined);
        x["Authentication"]["Effective"] = A.load.Ref(ptr + 24 + 4, undefined);
        x["Authentication"]["UserPolicy"] = A.load.Ref(ptr + 24 + 8, undefined);
        x["Authentication"]["DevicePolicy"] = A.load.Ref(ptr + 24 + 12, undefined);
        x["Authentication"]["UserSetting"] = A.load.Ref(ptr + 24 + 16, undefined);
        x["Authentication"]["SharedSetting"] = A.load.Ref(ptr + 24 + 20, undefined);
        if (A.load.Bool(ptr + 24 + 26)) {
          x["Authentication"]["UserEditable"] = A.load.Bool(ptr + 24 + 24);
        } else {
          delete x["Authentication"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 24 + 27)) {
          x["Authentication"]["DeviceEditable"] = A.load.Bool(ptr + 24 + 25);
        } else {
          delete x["Authentication"]["DeviceEditable"];
        }
      } else {
        delete x["Authentication"];
      }
      if (A.load.Bool(ptr + 56 + 806)) {
        x["EAP"] = {};
        if (A.load.Bool(ptr + 56 + 0 + 28)) {
          x["EAP"]["AnonymousIdentity"] = {};
          x["EAP"]["AnonymousIdentity"]["Active"] = A.load.Ref(ptr + 56 + 0 + 0, undefined);
          x["EAP"]["AnonymousIdentity"]["Effective"] = A.load.Ref(ptr + 56 + 0 + 4, undefined);
          x["EAP"]["AnonymousIdentity"]["UserPolicy"] = A.load.Ref(ptr + 56 + 0 + 8, undefined);
          x["EAP"]["AnonymousIdentity"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 0 + 12, undefined);
          x["EAP"]["AnonymousIdentity"]["UserSetting"] = A.load.Ref(ptr + 56 + 0 + 16, undefined);
          x["EAP"]["AnonymousIdentity"]["SharedSetting"] = A.load.Ref(ptr + 56 + 0 + 20, undefined);
          if (A.load.Bool(ptr + 56 + 0 + 26)) {
            x["EAP"]["AnonymousIdentity"]["UserEditable"] = A.load.Bool(ptr + 56 + 0 + 24);
          } else {
            delete x["EAP"]["AnonymousIdentity"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 56 + 0 + 27)) {
            x["EAP"]["AnonymousIdentity"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 0 + 25);
          } else {
            delete x["EAP"]["AnonymousIdentity"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["AnonymousIdentity"];
        }
        if (A.load.Bool(ptr + 56 + 32 + 318)) {
          x["EAP"]["ClientCertPattern"] = {};
          if (A.load.Bool(ptr + 56 + 32 + 0 + 28)) {
            x["EAP"]["ClientCertPattern"]["EnrollmentURI"] = {};
            x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["Active"] = A.load.Ref(ptr + 56 + 32 + 0 + 0, undefined);
            x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["Effective"] = A.load.Ref(ptr + 56 + 32 + 0 + 4, undefined);
            x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserPolicy"] = A.load.Ref(ptr + 56 + 32 + 0 + 8, undefined);
            x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["DevicePolicy"] = A.load.Ref(
              ptr + 56 + 32 + 0 + 12,
              undefined
            );
            x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserSetting"] = A.load.Ref(
              ptr + 56 + 32 + 0 + 16,
              undefined
            );
            x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["SharedSetting"] = A.load.Ref(
              ptr + 56 + 32 + 0 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 56 + 32 + 0 + 26)) {
              x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserEditable"] = A.load.Bool(ptr + 56 + 32 + 0 + 24);
            } else {
              delete x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 56 + 32 + 0 + 27)) {
              x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 32 + 0 + 25);
            } else {
              delete x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"];
            }
          } else {
            delete x["EAP"]["ClientCertPattern"]["EnrollmentURI"];
          }
          if (A.load.Bool(ptr + 56 + 32 + 32 + 125)) {
            x["EAP"]["ClientCertPattern"]["Issuer"] = {};
            if (A.load.Bool(ptr + 56 + 32 + 32 + 0 + 28)) {
              x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] = {};
              x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["Active"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 0 + 0,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["Effective"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 0 + 4,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserPolicy"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 0 + 8,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["DevicePolicy"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 0 + 12,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserSetting"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 0 + 16,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["SharedSetting"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 0 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 56 + 32 + 32 + 0 + 26)) {
                x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"] = A.load.Bool(
                  ptr + 56 + 32 + 32 + 0 + 24
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 56 + 32 + 32 + 0 + 27)) {
                x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"] = A.load.Bool(
                  ptr + 56 + 32 + 32 + 0 + 25
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"];
              }
            } else {
              delete x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"];
            }
            if (A.load.Bool(ptr + 56 + 32 + 32 + 32 + 28)) {
              x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] = {};
              x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["Active"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 32 + 0,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["Effective"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 32 + 4,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserPolicy"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 32 + 8,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["DevicePolicy"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 32 + 12,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserSetting"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 32 + 16,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["SharedSetting"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 32 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 56 + 32 + 32 + 32 + 26)) {
                x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"] = A.load.Bool(
                  ptr + 56 + 32 + 32 + 32 + 24
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 56 + 32 + 32 + 32 + 27)) {
                x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"] = A.load.Bool(
                  ptr + 56 + 32 + 32 + 32 + 25
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"];
              }
            } else {
              delete x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"];
            }
            if (A.load.Bool(ptr + 56 + 32 + 32 + 64 + 28)) {
              x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] = {};
              x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["Active"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 64 + 0,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["Effective"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 64 + 4,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserPolicy"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 64 + 8,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["DevicePolicy"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 64 + 12,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserSetting"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 64 + 16,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["SharedSetting"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 64 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 56 + 32 + 32 + 64 + 26)) {
                x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"] = A.load.Bool(
                  ptr + 56 + 32 + 32 + 64 + 24
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 56 + 32 + 32 + 64 + 27)) {
                x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"] = A.load.Bool(
                  ptr + 56 + 32 + 32 + 64 + 25
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"];
              }
            } else {
              delete x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"];
            }
            if (A.load.Bool(ptr + 56 + 32 + 32 + 96 + 28)) {
              x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = {};
              x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Active"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 96 + 0,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Effective"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 96 + 4,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserPolicy"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 96 + 8,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DevicePolicy"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 96 + 12,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserSetting"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 96 + 16,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["SharedSetting"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 96 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 56 + 32 + 32 + 96 + 26)) {
                x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"] = A.load.Bool(
                  ptr + 56 + 32 + 32 + 96 + 24
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 56 + 32 + 32 + 96 + 27)) {
                x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"] = A.load.Bool(
                  ptr + 56 + 32 + 32 + 96 + 25
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"];
              }
            } else {
              delete x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"];
            }
          } else {
            delete x["EAP"]["ClientCertPattern"]["Issuer"];
          }
          if (A.load.Bool(ptr + 56 + 32 + 160 + 28)) {
            x["EAP"]["ClientCertPattern"]["IssuerCARef"] = {};
            x["EAP"]["ClientCertPattern"]["IssuerCARef"]["Active"] = A.load.Ref(ptr + 56 + 32 + 160 + 0, undefined);
            x["EAP"]["ClientCertPattern"]["IssuerCARef"]["Effective"] = A.load.Ref(ptr + 56 + 32 + 160 + 4, undefined);
            x["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserPolicy"] = A.load.Ref(ptr + 56 + 32 + 160 + 8, undefined);
            x["EAP"]["ClientCertPattern"]["IssuerCARef"]["DevicePolicy"] = A.load.Ref(
              ptr + 56 + 32 + 160 + 12,
              undefined
            );
            x["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserSetting"] = A.load.Ref(
              ptr + 56 + 32 + 160 + 16,
              undefined
            );
            x["EAP"]["ClientCertPattern"]["IssuerCARef"]["SharedSetting"] = A.load.Ref(
              ptr + 56 + 32 + 160 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 56 + 32 + 160 + 26)) {
              x["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserEditable"] = A.load.Bool(ptr + 56 + 32 + 160 + 24);
            } else {
              delete x["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 56 + 32 + 160 + 27)) {
              x["EAP"]["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 32 + 160 + 25);
            } else {
              delete x["EAP"]["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"];
            }
          } else {
            delete x["EAP"]["ClientCertPattern"]["IssuerCARef"];
          }
          if (A.load.Bool(ptr + 56 + 32 + 192 + 125)) {
            x["EAP"]["ClientCertPattern"]["Subject"] = {};
            if (A.load.Bool(ptr + 56 + 32 + 192 + 0 + 28)) {
              x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] = {};
              x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["Active"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 0 + 0,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["Effective"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 0 + 4,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserPolicy"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 0 + 8,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["DevicePolicy"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 0 + 12,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserSetting"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 0 + 16,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["SharedSetting"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 0 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 56 + 32 + 192 + 0 + 26)) {
                x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"] = A.load.Bool(
                  ptr + 56 + 32 + 192 + 0 + 24
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 56 + 32 + 192 + 0 + 27)) {
                x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"] = A.load.Bool(
                  ptr + 56 + 32 + 192 + 0 + 25
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"];
              }
            } else {
              delete x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"];
            }
            if (A.load.Bool(ptr + 56 + 32 + 192 + 32 + 28)) {
              x["EAP"]["ClientCertPattern"]["Subject"]["Locality"] = {};
              x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["Active"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 32 + 0,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["Effective"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 32 + 4,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserPolicy"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 32 + 8,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["DevicePolicy"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 32 + 12,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserSetting"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 32 + 16,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["SharedSetting"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 32 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 56 + 32 + 192 + 32 + 26)) {
                x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"] = A.load.Bool(
                  ptr + 56 + 32 + 192 + 32 + 24
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 56 + 32 + 192 + 32 + 27)) {
                x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"] = A.load.Bool(
                  ptr + 56 + 32 + 192 + 32 + 25
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"];
              }
            } else {
              delete x["EAP"]["ClientCertPattern"]["Subject"]["Locality"];
            }
            if (A.load.Bool(ptr + 56 + 32 + 192 + 64 + 28)) {
              x["EAP"]["ClientCertPattern"]["Subject"]["Organization"] = {};
              x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["Active"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 64 + 0,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["Effective"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 64 + 4,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserPolicy"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 64 + 8,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["DevicePolicy"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 64 + 12,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserSetting"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 64 + 16,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["SharedSetting"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 64 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 56 + 32 + 192 + 64 + 26)) {
                x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"] = A.load.Bool(
                  ptr + 56 + 32 + 192 + 64 + 24
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 56 + 32 + 192 + 64 + 27)) {
                x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"] = A.load.Bool(
                  ptr + 56 + 32 + 192 + 64 + 25
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"];
              }
            } else {
              delete x["EAP"]["ClientCertPattern"]["Subject"]["Organization"];
            }
            if (A.load.Bool(ptr + 56 + 32 + 192 + 96 + 28)) {
              x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = {};
              x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Active"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 96 + 0,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Effective"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 96 + 4,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserPolicy"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 96 + 8,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DevicePolicy"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 96 + 12,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserSetting"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 96 + 16,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["SharedSetting"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 96 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 56 + 32 + 192 + 96 + 26)) {
                x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"] = A.load.Bool(
                  ptr + 56 + 32 + 192 + 96 + 24
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 56 + 32 + 192 + 96 + 27)) {
                x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"] = A.load.Bool(
                  ptr + 56 + 32 + 192 + 96 + 25
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"];
              }
            } else {
              delete x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"];
            }
          } else {
            delete x["EAP"]["ClientCertPattern"]["Subject"];
          }
        } else {
          delete x["EAP"]["ClientCertPattern"];
        }
        if (A.load.Bool(ptr + 56 + 352 + 28)) {
          x["EAP"]["ClientCertPKCS11Id"] = {};
          x["EAP"]["ClientCertPKCS11Id"]["Active"] = A.load.Ref(ptr + 56 + 352 + 0, undefined);
          x["EAP"]["ClientCertPKCS11Id"]["Effective"] = A.load.Ref(ptr + 56 + 352 + 4, undefined);
          x["EAP"]["ClientCertPKCS11Id"]["UserPolicy"] = A.load.Ref(ptr + 56 + 352 + 8, undefined);
          x["EAP"]["ClientCertPKCS11Id"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 352 + 12, undefined);
          x["EAP"]["ClientCertPKCS11Id"]["UserSetting"] = A.load.Ref(ptr + 56 + 352 + 16, undefined);
          x["EAP"]["ClientCertPKCS11Id"]["SharedSetting"] = A.load.Ref(ptr + 56 + 352 + 20, undefined);
          if (A.load.Bool(ptr + 56 + 352 + 26)) {
            x["EAP"]["ClientCertPKCS11Id"]["UserEditable"] = A.load.Bool(ptr + 56 + 352 + 24);
          } else {
            delete x["EAP"]["ClientCertPKCS11Id"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 56 + 352 + 27)) {
            x["EAP"]["ClientCertPKCS11Id"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 352 + 25);
          } else {
            delete x["EAP"]["ClientCertPKCS11Id"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["ClientCertPKCS11Id"];
        }
        if (A.load.Bool(ptr + 56 + 384 + 28)) {
          x["EAP"]["ClientCertProvisioningProfileId"] = {};
          x["EAP"]["ClientCertProvisioningProfileId"]["Active"] = A.load.Ref(ptr + 56 + 384 + 0, undefined);
          x["EAP"]["ClientCertProvisioningProfileId"]["Effective"] = A.load.Ref(ptr + 56 + 384 + 4, undefined);
          x["EAP"]["ClientCertProvisioningProfileId"]["UserPolicy"] = A.load.Ref(ptr + 56 + 384 + 8, undefined);
          x["EAP"]["ClientCertProvisioningProfileId"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 384 + 12, undefined);
          x["EAP"]["ClientCertProvisioningProfileId"]["UserSetting"] = A.load.Ref(ptr + 56 + 384 + 16, undefined);
          x["EAP"]["ClientCertProvisioningProfileId"]["SharedSetting"] = A.load.Ref(ptr + 56 + 384 + 20, undefined);
          if (A.load.Bool(ptr + 56 + 384 + 26)) {
            x["EAP"]["ClientCertProvisioningProfileId"]["UserEditable"] = A.load.Bool(ptr + 56 + 384 + 24);
          } else {
            delete x["EAP"]["ClientCertProvisioningProfileId"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 56 + 384 + 27)) {
            x["EAP"]["ClientCertProvisioningProfileId"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 384 + 25);
          } else {
            delete x["EAP"]["ClientCertProvisioningProfileId"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["ClientCertProvisioningProfileId"];
        }
        if (A.load.Bool(ptr + 56 + 416 + 28)) {
          x["EAP"]["ClientCertRef"] = {};
          x["EAP"]["ClientCertRef"]["Active"] = A.load.Ref(ptr + 56 + 416 + 0, undefined);
          x["EAP"]["ClientCertRef"]["Effective"] = A.load.Ref(ptr + 56 + 416 + 4, undefined);
          x["EAP"]["ClientCertRef"]["UserPolicy"] = A.load.Ref(ptr + 56 + 416 + 8, undefined);
          x["EAP"]["ClientCertRef"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 416 + 12, undefined);
          x["EAP"]["ClientCertRef"]["UserSetting"] = A.load.Ref(ptr + 56 + 416 + 16, undefined);
          x["EAP"]["ClientCertRef"]["SharedSetting"] = A.load.Ref(ptr + 56 + 416 + 20, undefined);
          if (A.load.Bool(ptr + 56 + 416 + 26)) {
            x["EAP"]["ClientCertRef"]["UserEditable"] = A.load.Bool(ptr + 56 + 416 + 24);
          } else {
            delete x["EAP"]["ClientCertRef"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 56 + 416 + 27)) {
            x["EAP"]["ClientCertRef"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 416 + 25);
          } else {
            delete x["EAP"]["ClientCertRef"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["ClientCertRef"];
        }
        if (A.load.Bool(ptr + 56 + 448 + 28)) {
          x["EAP"]["ClientCertType"] = {};
          x["EAP"]["ClientCertType"]["Active"] = A.load.Ref(ptr + 56 + 448 + 0, undefined);
          x["EAP"]["ClientCertType"]["Effective"] = A.load.Ref(ptr + 56 + 448 + 4, undefined);
          x["EAP"]["ClientCertType"]["UserPolicy"] = A.load.Ref(ptr + 56 + 448 + 8, undefined);
          x["EAP"]["ClientCertType"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 448 + 12, undefined);
          x["EAP"]["ClientCertType"]["UserSetting"] = A.load.Ref(ptr + 56 + 448 + 16, undefined);
          x["EAP"]["ClientCertType"]["SharedSetting"] = A.load.Ref(ptr + 56 + 448 + 20, undefined);
          if (A.load.Bool(ptr + 56 + 448 + 26)) {
            x["EAP"]["ClientCertType"]["UserEditable"] = A.load.Bool(ptr + 56 + 448 + 24);
          } else {
            delete x["EAP"]["ClientCertType"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 56 + 448 + 27)) {
            x["EAP"]["ClientCertType"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 448 + 25);
          } else {
            delete x["EAP"]["ClientCertType"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["ClientCertType"];
        }
        if (A.load.Bool(ptr + 56 + 480 + 28)) {
          x["EAP"]["Identity"] = {};
          x["EAP"]["Identity"]["Active"] = A.load.Ref(ptr + 56 + 480 + 0, undefined);
          x["EAP"]["Identity"]["Effective"] = A.load.Ref(ptr + 56 + 480 + 4, undefined);
          x["EAP"]["Identity"]["UserPolicy"] = A.load.Ref(ptr + 56 + 480 + 8, undefined);
          x["EAP"]["Identity"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 480 + 12, undefined);
          x["EAP"]["Identity"]["UserSetting"] = A.load.Ref(ptr + 56 + 480 + 16, undefined);
          x["EAP"]["Identity"]["SharedSetting"] = A.load.Ref(ptr + 56 + 480 + 20, undefined);
          if (A.load.Bool(ptr + 56 + 480 + 26)) {
            x["EAP"]["Identity"]["UserEditable"] = A.load.Bool(ptr + 56 + 480 + 24);
          } else {
            delete x["EAP"]["Identity"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 56 + 480 + 27)) {
            x["EAP"]["Identity"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 480 + 25);
          } else {
            delete x["EAP"]["Identity"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["Identity"];
        }
        if (A.load.Bool(ptr + 56 + 512 + 28)) {
          x["EAP"]["Inner"] = {};
          x["EAP"]["Inner"]["Active"] = A.load.Ref(ptr + 56 + 512 + 0, undefined);
          x["EAP"]["Inner"]["Effective"] = A.load.Ref(ptr + 56 + 512 + 4, undefined);
          x["EAP"]["Inner"]["UserPolicy"] = A.load.Ref(ptr + 56 + 512 + 8, undefined);
          x["EAP"]["Inner"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 512 + 12, undefined);
          x["EAP"]["Inner"]["UserSetting"] = A.load.Ref(ptr + 56 + 512 + 16, undefined);
          x["EAP"]["Inner"]["SharedSetting"] = A.load.Ref(ptr + 56 + 512 + 20, undefined);
          if (A.load.Bool(ptr + 56 + 512 + 26)) {
            x["EAP"]["Inner"]["UserEditable"] = A.load.Bool(ptr + 56 + 512 + 24);
          } else {
            delete x["EAP"]["Inner"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 56 + 512 + 27)) {
            x["EAP"]["Inner"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 512 + 25);
          } else {
            delete x["EAP"]["Inner"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["Inner"];
        }
        if (A.load.Bool(ptr + 56 + 544 + 28)) {
          x["EAP"]["Outer"] = {};
          x["EAP"]["Outer"]["Active"] = A.load.Ref(ptr + 56 + 544 + 0, undefined);
          x["EAP"]["Outer"]["Effective"] = A.load.Ref(ptr + 56 + 544 + 4, undefined);
          x["EAP"]["Outer"]["UserPolicy"] = A.load.Ref(ptr + 56 + 544 + 8, undefined);
          x["EAP"]["Outer"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 544 + 12, undefined);
          x["EAP"]["Outer"]["UserSetting"] = A.load.Ref(ptr + 56 + 544 + 16, undefined);
          x["EAP"]["Outer"]["SharedSetting"] = A.load.Ref(ptr + 56 + 544 + 20, undefined);
          if (A.load.Bool(ptr + 56 + 544 + 26)) {
            x["EAP"]["Outer"]["UserEditable"] = A.load.Bool(ptr + 56 + 544 + 24);
          } else {
            delete x["EAP"]["Outer"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 56 + 544 + 27)) {
            x["EAP"]["Outer"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 544 + 25);
          } else {
            delete x["EAP"]["Outer"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["Outer"];
        }
        if (A.load.Bool(ptr + 56 + 576 + 28)) {
          x["EAP"]["Password"] = {};
          x["EAP"]["Password"]["Active"] = A.load.Ref(ptr + 56 + 576 + 0, undefined);
          x["EAP"]["Password"]["Effective"] = A.load.Ref(ptr + 56 + 576 + 4, undefined);
          x["EAP"]["Password"]["UserPolicy"] = A.load.Ref(ptr + 56 + 576 + 8, undefined);
          x["EAP"]["Password"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 576 + 12, undefined);
          x["EAP"]["Password"]["UserSetting"] = A.load.Ref(ptr + 56 + 576 + 16, undefined);
          x["EAP"]["Password"]["SharedSetting"] = A.load.Ref(ptr + 56 + 576 + 20, undefined);
          if (A.load.Bool(ptr + 56 + 576 + 26)) {
            x["EAP"]["Password"]["UserEditable"] = A.load.Bool(ptr + 56 + 576 + 24);
          } else {
            delete x["EAP"]["Password"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 56 + 576 + 27)) {
            x["EAP"]["Password"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 576 + 25);
          } else {
            delete x["EAP"]["Password"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["Password"];
        }
        if (A.load.Bool(ptr + 56 + 608 + 21)) {
          x["EAP"]["SaveCredentials"] = {};
          if (A.load.Bool(ptr + 56 + 608 + 14)) {
            x["EAP"]["SaveCredentials"]["Active"] = A.load.Bool(ptr + 56 + 608 + 0);
          } else {
            delete x["EAP"]["SaveCredentials"]["Active"];
          }
          x["EAP"]["SaveCredentials"]["Effective"] = A.load.Ref(ptr + 56 + 608 + 4, undefined);
          if (A.load.Bool(ptr + 56 + 608 + 15)) {
            x["EAP"]["SaveCredentials"]["UserPolicy"] = A.load.Bool(ptr + 56 + 608 + 8);
          } else {
            delete x["EAP"]["SaveCredentials"]["UserPolicy"];
          }
          if (A.load.Bool(ptr + 56 + 608 + 16)) {
            x["EAP"]["SaveCredentials"]["DevicePolicy"] = A.load.Bool(ptr + 56 + 608 + 9);
          } else {
            delete x["EAP"]["SaveCredentials"]["DevicePolicy"];
          }
          if (A.load.Bool(ptr + 56 + 608 + 17)) {
            x["EAP"]["SaveCredentials"]["UserSetting"] = A.load.Bool(ptr + 56 + 608 + 10);
          } else {
            delete x["EAP"]["SaveCredentials"]["UserSetting"];
          }
          if (A.load.Bool(ptr + 56 + 608 + 18)) {
            x["EAP"]["SaveCredentials"]["SharedSetting"] = A.load.Bool(ptr + 56 + 608 + 11);
          } else {
            delete x["EAP"]["SaveCredentials"]["SharedSetting"];
          }
          if (A.load.Bool(ptr + 56 + 608 + 19)) {
            x["EAP"]["SaveCredentials"]["UserEditable"] = A.load.Bool(ptr + 56 + 608 + 12);
          } else {
            delete x["EAP"]["SaveCredentials"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 56 + 608 + 20)) {
            x["EAP"]["SaveCredentials"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 608 + 13);
          } else {
            delete x["EAP"]["SaveCredentials"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["SaveCredentials"];
        }
        if (A.load.Bool(ptr + 56 + 632 + 28)) {
          x["EAP"]["ServerCAPEMs"] = {};
          x["EAP"]["ServerCAPEMs"]["Active"] = A.load.Ref(ptr + 56 + 632 + 0, undefined);
          x["EAP"]["ServerCAPEMs"]["Effective"] = A.load.Ref(ptr + 56 + 632 + 4, undefined);
          x["EAP"]["ServerCAPEMs"]["UserPolicy"] = A.load.Ref(ptr + 56 + 632 + 8, undefined);
          x["EAP"]["ServerCAPEMs"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 632 + 12, undefined);
          x["EAP"]["ServerCAPEMs"]["UserSetting"] = A.load.Ref(ptr + 56 + 632 + 16, undefined);
          x["EAP"]["ServerCAPEMs"]["SharedSetting"] = A.load.Ref(ptr + 56 + 632 + 20, undefined);
          if (A.load.Bool(ptr + 56 + 632 + 26)) {
            x["EAP"]["ServerCAPEMs"]["UserEditable"] = A.load.Bool(ptr + 56 + 632 + 24);
          } else {
            delete x["EAP"]["ServerCAPEMs"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 56 + 632 + 27)) {
            x["EAP"]["ServerCAPEMs"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 632 + 25);
          } else {
            delete x["EAP"]["ServerCAPEMs"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["ServerCAPEMs"];
        }
        if (A.load.Bool(ptr + 56 + 664 + 28)) {
          x["EAP"]["ServerCARefs"] = {};
          x["EAP"]["ServerCARefs"]["Active"] = A.load.Ref(ptr + 56 + 664 + 0, undefined);
          x["EAP"]["ServerCARefs"]["Effective"] = A.load.Ref(ptr + 56 + 664 + 4, undefined);
          x["EAP"]["ServerCARefs"]["UserPolicy"] = A.load.Ref(ptr + 56 + 664 + 8, undefined);
          x["EAP"]["ServerCARefs"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 664 + 12, undefined);
          x["EAP"]["ServerCARefs"]["UserSetting"] = A.load.Ref(ptr + 56 + 664 + 16, undefined);
          x["EAP"]["ServerCARefs"]["SharedSetting"] = A.load.Ref(ptr + 56 + 664 + 20, undefined);
          if (A.load.Bool(ptr + 56 + 664 + 26)) {
            x["EAP"]["ServerCARefs"]["UserEditable"] = A.load.Bool(ptr + 56 + 664 + 24);
          } else {
            delete x["EAP"]["ServerCARefs"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 56 + 664 + 27)) {
            x["EAP"]["ServerCARefs"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 664 + 25);
          } else {
            delete x["EAP"]["ServerCARefs"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["ServerCARefs"];
        }
        if (A.load.Bool(ptr + 56 + 696 + 28)) {
          x["EAP"]["SubjectMatch"] = {};
          x["EAP"]["SubjectMatch"]["Active"] = A.load.Ref(ptr + 56 + 696 + 0, undefined);
          x["EAP"]["SubjectMatch"]["Effective"] = A.load.Ref(ptr + 56 + 696 + 4, undefined);
          x["EAP"]["SubjectMatch"]["UserPolicy"] = A.load.Ref(ptr + 56 + 696 + 8, undefined);
          x["EAP"]["SubjectMatch"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 696 + 12, undefined);
          x["EAP"]["SubjectMatch"]["UserSetting"] = A.load.Ref(ptr + 56 + 696 + 16, undefined);
          x["EAP"]["SubjectMatch"]["SharedSetting"] = A.load.Ref(ptr + 56 + 696 + 20, undefined);
          if (A.load.Bool(ptr + 56 + 696 + 26)) {
            x["EAP"]["SubjectMatch"]["UserEditable"] = A.load.Bool(ptr + 56 + 696 + 24);
          } else {
            delete x["EAP"]["SubjectMatch"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 56 + 696 + 27)) {
            x["EAP"]["SubjectMatch"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 696 + 25);
          } else {
            delete x["EAP"]["SubjectMatch"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["SubjectMatch"];
        }
        if (A.load.Bool(ptr + 56 + 728 + 28)) {
          x["EAP"]["TLSVersionMax"] = {};
          x["EAP"]["TLSVersionMax"]["Active"] = A.load.Ref(ptr + 56 + 728 + 0, undefined);
          x["EAP"]["TLSVersionMax"]["Effective"] = A.load.Ref(ptr + 56 + 728 + 4, undefined);
          x["EAP"]["TLSVersionMax"]["UserPolicy"] = A.load.Ref(ptr + 56 + 728 + 8, undefined);
          x["EAP"]["TLSVersionMax"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 728 + 12, undefined);
          x["EAP"]["TLSVersionMax"]["UserSetting"] = A.load.Ref(ptr + 56 + 728 + 16, undefined);
          x["EAP"]["TLSVersionMax"]["SharedSetting"] = A.load.Ref(ptr + 56 + 728 + 20, undefined);
          if (A.load.Bool(ptr + 56 + 728 + 26)) {
            x["EAP"]["TLSVersionMax"]["UserEditable"] = A.load.Bool(ptr + 56 + 728 + 24);
          } else {
            delete x["EAP"]["TLSVersionMax"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 56 + 728 + 27)) {
            x["EAP"]["TLSVersionMax"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 728 + 25);
          } else {
            delete x["EAP"]["TLSVersionMax"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["TLSVersionMax"];
        }
        if (A.load.Bool(ptr + 56 + 760 + 21)) {
          x["EAP"]["UseProactiveKeyCaching"] = {};
          if (A.load.Bool(ptr + 56 + 760 + 14)) {
            x["EAP"]["UseProactiveKeyCaching"]["Active"] = A.load.Bool(ptr + 56 + 760 + 0);
          } else {
            delete x["EAP"]["UseProactiveKeyCaching"]["Active"];
          }
          x["EAP"]["UseProactiveKeyCaching"]["Effective"] = A.load.Ref(ptr + 56 + 760 + 4, undefined);
          if (A.load.Bool(ptr + 56 + 760 + 15)) {
            x["EAP"]["UseProactiveKeyCaching"]["UserPolicy"] = A.load.Bool(ptr + 56 + 760 + 8);
          } else {
            delete x["EAP"]["UseProactiveKeyCaching"]["UserPolicy"];
          }
          if (A.load.Bool(ptr + 56 + 760 + 16)) {
            x["EAP"]["UseProactiveKeyCaching"]["DevicePolicy"] = A.load.Bool(ptr + 56 + 760 + 9);
          } else {
            delete x["EAP"]["UseProactiveKeyCaching"]["DevicePolicy"];
          }
          if (A.load.Bool(ptr + 56 + 760 + 17)) {
            x["EAP"]["UseProactiveKeyCaching"]["UserSetting"] = A.load.Bool(ptr + 56 + 760 + 10);
          } else {
            delete x["EAP"]["UseProactiveKeyCaching"]["UserSetting"];
          }
          if (A.load.Bool(ptr + 56 + 760 + 18)) {
            x["EAP"]["UseProactiveKeyCaching"]["SharedSetting"] = A.load.Bool(ptr + 56 + 760 + 11);
          } else {
            delete x["EAP"]["UseProactiveKeyCaching"]["SharedSetting"];
          }
          if (A.load.Bool(ptr + 56 + 760 + 19)) {
            x["EAP"]["UseProactiveKeyCaching"]["UserEditable"] = A.load.Bool(ptr + 56 + 760 + 12);
          } else {
            delete x["EAP"]["UseProactiveKeyCaching"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 56 + 760 + 20)) {
            x["EAP"]["UseProactiveKeyCaching"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 760 + 13);
          } else {
            delete x["EAP"]["UseProactiveKeyCaching"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["UseProactiveKeyCaching"];
        }
        if (A.load.Bool(ptr + 56 + 784 + 21)) {
          x["EAP"]["UseSystemCAs"] = {};
          if (A.load.Bool(ptr + 56 + 784 + 14)) {
            x["EAP"]["UseSystemCAs"]["Active"] = A.load.Bool(ptr + 56 + 784 + 0);
          } else {
            delete x["EAP"]["UseSystemCAs"]["Active"];
          }
          x["EAP"]["UseSystemCAs"]["Effective"] = A.load.Ref(ptr + 56 + 784 + 4, undefined);
          if (A.load.Bool(ptr + 56 + 784 + 15)) {
            x["EAP"]["UseSystemCAs"]["UserPolicy"] = A.load.Bool(ptr + 56 + 784 + 8);
          } else {
            delete x["EAP"]["UseSystemCAs"]["UserPolicy"];
          }
          if (A.load.Bool(ptr + 56 + 784 + 16)) {
            x["EAP"]["UseSystemCAs"]["DevicePolicy"] = A.load.Bool(ptr + 56 + 784 + 9);
          } else {
            delete x["EAP"]["UseSystemCAs"]["DevicePolicy"];
          }
          if (A.load.Bool(ptr + 56 + 784 + 17)) {
            x["EAP"]["UseSystemCAs"]["UserSetting"] = A.load.Bool(ptr + 56 + 784 + 10);
          } else {
            delete x["EAP"]["UseSystemCAs"]["UserSetting"];
          }
          if (A.load.Bool(ptr + 56 + 784 + 18)) {
            x["EAP"]["UseSystemCAs"]["SharedSetting"] = A.load.Bool(ptr + 56 + 784 + 11);
          } else {
            delete x["EAP"]["UseSystemCAs"]["SharedSetting"];
          }
          if (A.load.Bool(ptr + 56 + 784 + 19)) {
            x["EAP"]["UseSystemCAs"]["UserEditable"] = A.load.Bool(ptr + 56 + 784 + 12);
          } else {
            delete x["EAP"]["UseSystemCAs"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 56 + 784 + 20)) {
            x["EAP"]["UseSystemCAs"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 784 + 13);
          } else {
            delete x["EAP"]["UseSystemCAs"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["UseSystemCAs"];
        }
      } else {
        delete x["EAP"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },
    "constof_IPConfigType": (ref: heap.Ref<string>): number => {
      const idx = ["DHCP", "Static"].indexOf(A.H.get(ref));
      return idx < 0 ? 0 : idx + 1;
    },

    "store_ManagedIPConfigType": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 28, false);
        A.store.Enum(ptr + 0, -1);
        A.store.Ref(ptr + 4, undefined);
        A.store.Enum(ptr + 8, -1);
        A.store.Enum(ptr + 12, -1);
        A.store.Enum(ptr + 16, -1);
        A.store.Enum(ptr + 20, -1);
        A.store.Bool(ptr + 26, false);
        A.store.Bool(ptr + 24, false);
        A.store.Bool(ptr + 27, false);
        A.store.Bool(ptr + 25, false);
      } else {
        A.store.Bool(ptr + 28, true);
        A.store.Enum(ptr + 0, ["DHCP", "Static"].indexOf(x["Active"] as string));
        A.store.Ref(ptr + 4, x["Effective"]);
        A.store.Enum(ptr + 8, ["DHCP", "Static"].indexOf(x["UserPolicy"] as string));
        A.store.Enum(ptr + 12, ["DHCP", "Static"].indexOf(x["DevicePolicy"] as string));
        A.store.Enum(ptr + 16, ["DHCP", "Static"].indexOf(x["UserSetting"] as string));
        A.store.Enum(ptr + 20, ["DHCP", "Static"].indexOf(x["SharedSetting"] as string));
        A.store.Bool(ptr + 26, "UserEditable" in x ? true : false);
        A.store.Bool(ptr + 24, x["UserEditable"] ? true : false);
        A.store.Bool(ptr + 27, "DeviceEditable" in x ? true : false);
        A.store.Bool(ptr + 25, x["DeviceEditable"] ? true : false);
      }
    },
    "load_ManagedIPConfigType": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      x["Active"] = A.load.Enum(ptr + 0, ["DHCP", "Static"]);
      x["Effective"] = A.load.Ref(ptr + 4, undefined);
      x["UserPolicy"] = A.load.Enum(ptr + 8, ["DHCP", "Static"]);
      x["DevicePolicy"] = A.load.Enum(ptr + 12, ["DHCP", "Static"]);
      x["UserSetting"] = A.load.Enum(ptr + 16, ["DHCP", "Static"]);
      x["SharedSetting"] = A.load.Enum(ptr + 20, ["DHCP", "Static"]);
      if (A.load.Bool(ptr + 26)) {
        x["UserEditable"] = A.load.Bool(ptr + 24);
      } else {
        delete x["UserEditable"];
      }
      if (A.load.Bool(ptr + 27)) {
        x["DeviceEditable"] = A.load.Bool(ptr + 25);
      } else {
        delete x["DeviceEditable"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_IPConfigProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 37, false);
        A.store.Ref(ptr + 0, undefined);
        A.store.Ref(ptr + 4, undefined);
        A.store.Ref(ptr + 8, undefined);
        A.store.Ref(ptr + 12, undefined);
        A.store.Ref(ptr + 16, undefined);
        A.store.Ref(ptr + 20, undefined);
        A.store.Bool(ptr + 36, false);
        A.store.Int32(ptr + 24, 0);
        A.store.Ref(ptr + 28, undefined);
        A.store.Ref(ptr + 32, undefined);
      } else {
        A.store.Bool(ptr + 37, true);
        A.store.Ref(ptr + 0, x["Gateway"]);
        A.store.Ref(ptr + 4, x["IPAddress"]);
        A.store.Ref(ptr + 8, x["ExcludedRoutes"]);
        A.store.Ref(ptr + 12, x["IncludedRoutes"]);
        A.store.Ref(ptr + 16, x["NameServers"]);
        A.store.Ref(ptr + 20, x["SearchDomains"]);
        A.store.Bool(ptr + 36, "RoutingPrefix" in x ? true : false);
        A.store.Int32(ptr + 24, x["RoutingPrefix"] === undefined ? 0 : (x["RoutingPrefix"] as number));
        A.store.Ref(ptr + 28, x["Type"]);
        A.store.Ref(ptr + 32, x["WebProxyAutoDiscoveryUrl"]);
      }
    },
    "load_IPConfigProperties": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      x["Gateway"] = A.load.Ref(ptr + 0, undefined);
      x["IPAddress"] = A.load.Ref(ptr + 4, undefined);
      x["ExcludedRoutes"] = A.load.Ref(ptr + 8, undefined);
      x["IncludedRoutes"] = A.load.Ref(ptr + 12, undefined);
      x["NameServers"] = A.load.Ref(ptr + 16, undefined);
      x["SearchDomains"] = A.load.Ref(ptr + 20, undefined);
      if (A.load.Bool(ptr + 36)) {
        x["RoutingPrefix"] = A.load.Int32(ptr + 24);
      } else {
        delete x["RoutingPrefix"];
      }
      x["Type"] = A.load.Ref(ptr + 28, undefined);
      x["WebProxyAutoDiscoveryUrl"] = A.load.Ref(ptr + 32, undefined);
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_ManagedLong": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 33, false);
        A.store.Bool(ptr + 26, false);
        A.store.Int32(ptr + 0, 0);
        A.store.Ref(ptr + 4, undefined);
        A.store.Bool(ptr + 27, false);
        A.store.Int32(ptr + 8, 0);
        A.store.Bool(ptr + 28, false);
        A.store.Int32(ptr + 12, 0);
        A.store.Bool(ptr + 29, false);
        A.store.Int32(ptr + 16, 0);
        A.store.Bool(ptr + 30, false);
        A.store.Int32(ptr + 20, 0);
        A.store.Bool(ptr + 31, false);
        A.store.Bool(ptr + 24, false);
        A.store.Bool(ptr + 32, false);
        A.store.Bool(ptr + 25, false);
      } else {
        A.store.Bool(ptr + 33, true);
        A.store.Bool(ptr + 26, "Active" in x ? true : false);
        A.store.Int32(ptr + 0, x["Active"] === undefined ? 0 : (x["Active"] as number));
        A.store.Ref(ptr + 4, x["Effective"]);
        A.store.Bool(ptr + 27, "UserPolicy" in x ? true : false);
        A.store.Int32(ptr + 8, x["UserPolicy"] === undefined ? 0 : (x["UserPolicy"] as number));
        A.store.Bool(ptr + 28, "DevicePolicy" in x ? true : false);
        A.store.Int32(ptr + 12, x["DevicePolicy"] === undefined ? 0 : (x["DevicePolicy"] as number));
        A.store.Bool(ptr + 29, "UserSetting" in x ? true : false);
        A.store.Int32(ptr + 16, x["UserSetting"] === undefined ? 0 : (x["UserSetting"] as number));
        A.store.Bool(ptr + 30, "SharedSetting" in x ? true : false);
        A.store.Int32(ptr + 20, x["SharedSetting"] === undefined ? 0 : (x["SharedSetting"] as number));
        A.store.Bool(ptr + 31, "UserEditable" in x ? true : false);
        A.store.Bool(ptr + 24, x["UserEditable"] ? true : false);
        A.store.Bool(ptr + 32, "DeviceEditable" in x ? true : false);
        A.store.Bool(ptr + 25, x["DeviceEditable"] ? true : false);
      }
    },
    "load_ManagedLong": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      if (A.load.Bool(ptr + 26)) {
        x["Active"] = A.load.Int32(ptr + 0);
      } else {
        delete x["Active"];
      }
      x["Effective"] = A.load.Ref(ptr + 4, undefined);
      if (A.load.Bool(ptr + 27)) {
        x["UserPolicy"] = A.load.Int32(ptr + 8);
      } else {
        delete x["UserPolicy"];
      }
      if (A.load.Bool(ptr + 28)) {
        x["DevicePolicy"] = A.load.Int32(ptr + 12);
      } else {
        delete x["DevicePolicy"];
      }
      if (A.load.Bool(ptr + 29)) {
        x["UserSetting"] = A.load.Int32(ptr + 16);
      } else {
        delete x["UserSetting"];
      }
      if (A.load.Bool(ptr + 30)) {
        x["SharedSetting"] = A.load.Int32(ptr + 20);
      } else {
        delete x["SharedSetting"];
      }
      if (A.load.Bool(ptr + 31)) {
        x["UserEditable"] = A.load.Bool(ptr + 24);
      } else {
        delete x["UserEditable"];
      }
      if (A.load.Bool(ptr + 32)) {
        x["DeviceEditable"] = A.load.Bool(ptr + 25);
      } else {
        delete x["DeviceEditable"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },
    "constof_ProxySettingsType": (ref: heap.Ref<string>): number => {
      const idx = ["Direct", "Manual", "PAC", "WPAD"].indexOf(A.H.get(ref));
      return idx < 0 ? 0 : idx + 1;
    },

    "store_ManagedProxySettingsType": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 28, false);
        A.store.Enum(ptr + 0, -1);
        A.store.Ref(ptr + 4, undefined);
        A.store.Enum(ptr + 8, -1);
        A.store.Enum(ptr + 12, -1);
        A.store.Enum(ptr + 16, -1);
        A.store.Enum(ptr + 20, -1);
        A.store.Bool(ptr + 26, false);
        A.store.Bool(ptr + 24, false);
        A.store.Bool(ptr + 27, false);
        A.store.Bool(ptr + 25, false);
      } else {
        A.store.Bool(ptr + 28, true);
        A.store.Enum(ptr + 0, ["Direct", "Manual", "PAC", "WPAD"].indexOf(x["Active"] as string));
        A.store.Ref(ptr + 4, x["Effective"]);
        A.store.Enum(ptr + 8, ["Direct", "Manual", "PAC", "WPAD"].indexOf(x["UserPolicy"] as string));
        A.store.Enum(ptr + 12, ["Direct", "Manual", "PAC", "WPAD"].indexOf(x["DevicePolicy"] as string));
        A.store.Enum(ptr + 16, ["Direct", "Manual", "PAC", "WPAD"].indexOf(x["UserSetting"] as string));
        A.store.Enum(ptr + 20, ["Direct", "Manual", "PAC", "WPAD"].indexOf(x["SharedSetting"] as string));
        A.store.Bool(ptr + 26, "UserEditable" in x ? true : false);
        A.store.Bool(ptr + 24, x["UserEditable"] ? true : false);
        A.store.Bool(ptr + 27, "DeviceEditable" in x ? true : false);
        A.store.Bool(ptr + 25, x["DeviceEditable"] ? true : false);
      }
    },
    "load_ManagedProxySettingsType": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      x["Active"] = A.load.Enum(ptr + 0, ["Direct", "Manual", "PAC", "WPAD"]);
      x["Effective"] = A.load.Ref(ptr + 4, undefined);
      x["UserPolicy"] = A.load.Enum(ptr + 8, ["Direct", "Manual", "PAC", "WPAD"]);
      x["DevicePolicy"] = A.load.Enum(ptr + 12, ["Direct", "Manual", "PAC", "WPAD"]);
      x["UserSetting"] = A.load.Enum(ptr + 16, ["Direct", "Manual", "PAC", "WPAD"]);
      x["SharedSetting"] = A.load.Enum(ptr + 20, ["Direct", "Manual", "PAC", "WPAD"]);
      if (A.load.Bool(ptr + 26)) {
        x["UserEditable"] = A.load.Bool(ptr + 24);
      } else {
        delete x["UserEditable"];
      }
      if (A.load.Bool(ptr + 27)) {
        x["DeviceEditable"] = A.load.Bool(ptr + 25);
      } else {
        delete x["DeviceEditable"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_ManagedProxyLocation": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 66, false);

        A.store.Bool(ptr + 0 + 28, false);
        A.store.Ref(ptr + 0 + 0, undefined);
        A.store.Ref(ptr + 0 + 4, undefined);
        A.store.Ref(ptr + 0 + 8, undefined);
        A.store.Ref(ptr + 0 + 12, undefined);
        A.store.Ref(ptr + 0 + 16, undefined);
        A.store.Ref(ptr + 0 + 20, undefined);
        A.store.Bool(ptr + 0 + 26, false);
        A.store.Bool(ptr + 0 + 24, false);
        A.store.Bool(ptr + 0 + 27, false);
        A.store.Bool(ptr + 0 + 25, false);

        A.store.Bool(ptr + 32 + 33, false);
        A.store.Bool(ptr + 32 + 26, false);
        A.store.Int32(ptr + 32 + 0, 0);
        A.store.Ref(ptr + 32 + 4, undefined);
        A.store.Bool(ptr + 32 + 27, false);
        A.store.Int32(ptr + 32 + 8, 0);
        A.store.Bool(ptr + 32 + 28, false);
        A.store.Int32(ptr + 32 + 12, 0);
        A.store.Bool(ptr + 32 + 29, false);
        A.store.Int32(ptr + 32 + 16, 0);
        A.store.Bool(ptr + 32 + 30, false);
        A.store.Int32(ptr + 32 + 20, 0);
        A.store.Bool(ptr + 32 + 31, false);
        A.store.Bool(ptr + 32 + 24, false);
        A.store.Bool(ptr + 32 + 32, false);
        A.store.Bool(ptr + 32 + 25, false);
      } else {
        A.store.Bool(ptr + 66, true);

        if (typeof x["Host"] === "undefined") {
          A.store.Bool(ptr + 0 + 28, false);
          A.store.Ref(ptr + 0 + 0, undefined);
          A.store.Ref(ptr + 0 + 4, undefined);
          A.store.Ref(ptr + 0 + 8, undefined);
          A.store.Ref(ptr + 0 + 12, undefined);
          A.store.Ref(ptr + 0 + 16, undefined);
          A.store.Ref(ptr + 0 + 20, undefined);
          A.store.Bool(ptr + 0 + 26, false);
          A.store.Bool(ptr + 0 + 24, false);
          A.store.Bool(ptr + 0 + 27, false);
          A.store.Bool(ptr + 0 + 25, false);
        } else {
          A.store.Bool(ptr + 0 + 28, true);
          A.store.Ref(ptr + 0 + 0, x["Host"]["Active"]);
          A.store.Ref(ptr + 0 + 4, x["Host"]["Effective"]);
          A.store.Ref(ptr + 0 + 8, x["Host"]["UserPolicy"]);
          A.store.Ref(ptr + 0 + 12, x["Host"]["DevicePolicy"]);
          A.store.Ref(ptr + 0 + 16, x["Host"]["UserSetting"]);
          A.store.Ref(ptr + 0 + 20, x["Host"]["SharedSetting"]);
          A.store.Bool(ptr + 0 + 26, "UserEditable" in x["Host"] ? true : false);
          A.store.Bool(ptr + 0 + 24, x["Host"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 0 + 27, "DeviceEditable" in x["Host"] ? true : false);
          A.store.Bool(ptr + 0 + 25, x["Host"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["Port"] === "undefined") {
          A.store.Bool(ptr + 32 + 33, false);
          A.store.Bool(ptr + 32 + 26, false);
          A.store.Int32(ptr + 32 + 0, 0);
          A.store.Ref(ptr + 32 + 4, undefined);
          A.store.Bool(ptr + 32 + 27, false);
          A.store.Int32(ptr + 32 + 8, 0);
          A.store.Bool(ptr + 32 + 28, false);
          A.store.Int32(ptr + 32 + 12, 0);
          A.store.Bool(ptr + 32 + 29, false);
          A.store.Int32(ptr + 32 + 16, 0);
          A.store.Bool(ptr + 32 + 30, false);
          A.store.Int32(ptr + 32 + 20, 0);
          A.store.Bool(ptr + 32 + 31, false);
          A.store.Bool(ptr + 32 + 24, false);
          A.store.Bool(ptr + 32 + 32, false);
          A.store.Bool(ptr + 32 + 25, false);
        } else {
          A.store.Bool(ptr + 32 + 33, true);
          A.store.Bool(ptr + 32 + 26, "Active" in x["Port"] ? true : false);
          A.store.Int32(ptr + 32 + 0, x["Port"]["Active"] === undefined ? 0 : (x["Port"]["Active"] as number));
          A.store.Ref(ptr + 32 + 4, x["Port"]["Effective"]);
          A.store.Bool(ptr + 32 + 27, "UserPolicy" in x["Port"] ? true : false);
          A.store.Int32(ptr + 32 + 8, x["Port"]["UserPolicy"] === undefined ? 0 : (x["Port"]["UserPolicy"] as number));
          A.store.Bool(ptr + 32 + 28, "DevicePolicy" in x["Port"] ? true : false);
          A.store.Int32(
            ptr + 32 + 12,
            x["Port"]["DevicePolicy"] === undefined ? 0 : (x["Port"]["DevicePolicy"] as number)
          );
          A.store.Bool(ptr + 32 + 29, "UserSetting" in x["Port"] ? true : false);
          A.store.Int32(
            ptr + 32 + 16,
            x["Port"]["UserSetting"] === undefined ? 0 : (x["Port"]["UserSetting"] as number)
          );
          A.store.Bool(ptr + 32 + 30, "SharedSetting" in x["Port"] ? true : false);
          A.store.Int32(
            ptr + 32 + 20,
            x["Port"]["SharedSetting"] === undefined ? 0 : (x["Port"]["SharedSetting"] as number)
          );
          A.store.Bool(ptr + 32 + 31, "UserEditable" in x["Port"] ? true : false);
          A.store.Bool(ptr + 32 + 24, x["Port"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 32 + 32, "DeviceEditable" in x["Port"] ? true : false);
          A.store.Bool(ptr + 32 + 25, x["Port"]["DeviceEditable"] ? true : false);
        }
      }
    },
    "load_ManagedProxyLocation": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      if (A.load.Bool(ptr + 0 + 28)) {
        x["Host"] = {};
        x["Host"]["Active"] = A.load.Ref(ptr + 0 + 0, undefined);
        x["Host"]["Effective"] = A.load.Ref(ptr + 0 + 4, undefined);
        x["Host"]["UserPolicy"] = A.load.Ref(ptr + 0 + 8, undefined);
        x["Host"]["DevicePolicy"] = A.load.Ref(ptr + 0 + 12, undefined);
        x["Host"]["UserSetting"] = A.load.Ref(ptr + 0 + 16, undefined);
        x["Host"]["SharedSetting"] = A.load.Ref(ptr + 0 + 20, undefined);
        if (A.load.Bool(ptr + 0 + 26)) {
          x["Host"]["UserEditable"] = A.load.Bool(ptr + 0 + 24);
        } else {
          delete x["Host"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 0 + 27)) {
          x["Host"]["DeviceEditable"] = A.load.Bool(ptr + 0 + 25);
        } else {
          delete x["Host"]["DeviceEditable"];
        }
      } else {
        delete x["Host"];
      }
      if (A.load.Bool(ptr + 32 + 33)) {
        x["Port"] = {};
        if (A.load.Bool(ptr + 32 + 26)) {
          x["Port"]["Active"] = A.load.Int32(ptr + 32 + 0);
        } else {
          delete x["Port"]["Active"];
        }
        x["Port"]["Effective"] = A.load.Ref(ptr + 32 + 4, undefined);
        if (A.load.Bool(ptr + 32 + 27)) {
          x["Port"]["UserPolicy"] = A.load.Int32(ptr + 32 + 8);
        } else {
          delete x["Port"]["UserPolicy"];
        }
        if (A.load.Bool(ptr + 32 + 28)) {
          x["Port"]["DevicePolicy"] = A.load.Int32(ptr + 32 + 12);
        } else {
          delete x["Port"]["DevicePolicy"];
        }
        if (A.load.Bool(ptr + 32 + 29)) {
          x["Port"]["UserSetting"] = A.load.Int32(ptr + 32 + 16);
        } else {
          delete x["Port"]["UserSetting"];
        }
        if (A.load.Bool(ptr + 32 + 30)) {
          x["Port"]["SharedSetting"] = A.load.Int32(ptr + 32 + 20);
        } else {
          delete x["Port"]["SharedSetting"];
        }
        if (A.load.Bool(ptr + 32 + 31)) {
          x["Port"]["UserEditable"] = A.load.Bool(ptr + 32 + 24);
        } else {
          delete x["Port"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 32 + 32)) {
          x["Port"]["DeviceEditable"] = A.load.Bool(ptr + 32 + 25);
        } else {
          delete x["Port"]["DeviceEditable"];
        }
      } else {
        delete x["Port"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_ManagedManualProxySettings": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 271, false);

        A.store.Bool(ptr + 0 + 66, false);

        A.store.Bool(ptr + 0 + 0 + 28, false);
        A.store.Ref(ptr + 0 + 0 + 0, undefined);
        A.store.Ref(ptr + 0 + 0 + 4, undefined);
        A.store.Ref(ptr + 0 + 0 + 8, undefined);
        A.store.Ref(ptr + 0 + 0 + 12, undefined);
        A.store.Ref(ptr + 0 + 0 + 16, undefined);
        A.store.Ref(ptr + 0 + 0 + 20, undefined);
        A.store.Bool(ptr + 0 + 0 + 26, false);
        A.store.Bool(ptr + 0 + 0 + 24, false);
        A.store.Bool(ptr + 0 + 0 + 27, false);
        A.store.Bool(ptr + 0 + 0 + 25, false);

        A.store.Bool(ptr + 0 + 32 + 33, false);
        A.store.Bool(ptr + 0 + 32 + 26, false);
        A.store.Int32(ptr + 0 + 32 + 0, 0);
        A.store.Ref(ptr + 0 + 32 + 4, undefined);
        A.store.Bool(ptr + 0 + 32 + 27, false);
        A.store.Int32(ptr + 0 + 32 + 8, 0);
        A.store.Bool(ptr + 0 + 32 + 28, false);
        A.store.Int32(ptr + 0 + 32 + 12, 0);
        A.store.Bool(ptr + 0 + 32 + 29, false);
        A.store.Int32(ptr + 0 + 32 + 16, 0);
        A.store.Bool(ptr + 0 + 32 + 30, false);
        A.store.Int32(ptr + 0 + 32 + 20, 0);
        A.store.Bool(ptr + 0 + 32 + 31, false);
        A.store.Bool(ptr + 0 + 32 + 24, false);
        A.store.Bool(ptr + 0 + 32 + 32, false);
        A.store.Bool(ptr + 0 + 32 + 25, false);

        A.store.Bool(ptr + 68 + 66, false);

        A.store.Bool(ptr + 68 + 0 + 28, false);
        A.store.Ref(ptr + 68 + 0 + 0, undefined);
        A.store.Ref(ptr + 68 + 0 + 4, undefined);
        A.store.Ref(ptr + 68 + 0 + 8, undefined);
        A.store.Ref(ptr + 68 + 0 + 12, undefined);
        A.store.Ref(ptr + 68 + 0 + 16, undefined);
        A.store.Ref(ptr + 68 + 0 + 20, undefined);
        A.store.Bool(ptr + 68 + 0 + 26, false);
        A.store.Bool(ptr + 68 + 0 + 24, false);
        A.store.Bool(ptr + 68 + 0 + 27, false);
        A.store.Bool(ptr + 68 + 0 + 25, false);

        A.store.Bool(ptr + 68 + 32 + 33, false);
        A.store.Bool(ptr + 68 + 32 + 26, false);
        A.store.Int32(ptr + 68 + 32 + 0, 0);
        A.store.Ref(ptr + 68 + 32 + 4, undefined);
        A.store.Bool(ptr + 68 + 32 + 27, false);
        A.store.Int32(ptr + 68 + 32 + 8, 0);
        A.store.Bool(ptr + 68 + 32 + 28, false);
        A.store.Int32(ptr + 68 + 32 + 12, 0);
        A.store.Bool(ptr + 68 + 32 + 29, false);
        A.store.Int32(ptr + 68 + 32 + 16, 0);
        A.store.Bool(ptr + 68 + 32 + 30, false);
        A.store.Int32(ptr + 68 + 32 + 20, 0);
        A.store.Bool(ptr + 68 + 32 + 31, false);
        A.store.Bool(ptr + 68 + 32 + 24, false);
        A.store.Bool(ptr + 68 + 32 + 32, false);
        A.store.Bool(ptr + 68 + 32 + 25, false);

        A.store.Bool(ptr + 136 + 66, false);

        A.store.Bool(ptr + 136 + 0 + 28, false);
        A.store.Ref(ptr + 136 + 0 + 0, undefined);
        A.store.Ref(ptr + 136 + 0 + 4, undefined);
        A.store.Ref(ptr + 136 + 0 + 8, undefined);
        A.store.Ref(ptr + 136 + 0 + 12, undefined);
        A.store.Ref(ptr + 136 + 0 + 16, undefined);
        A.store.Ref(ptr + 136 + 0 + 20, undefined);
        A.store.Bool(ptr + 136 + 0 + 26, false);
        A.store.Bool(ptr + 136 + 0 + 24, false);
        A.store.Bool(ptr + 136 + 0 + 27, false);
        A.store.Bool(ptr + 136 + 0 + 25, false);

        A.store.Bool(ptr + 136 + 32 + 33, false);
        A.store.Bool(ptr + 136 + 32 + 26, false);
        A.store.Int32(ptr + 136 + 32 + 0, 0);
        A.store.Ref(ptr + 136 + 32 + 4, undefined);
        A.store.Bool(ptr + 136 + 32 + 27, false);
        A.store.Int32(ptr + 136 + 32 + 8, 0);
        A.store.Bool(ptr + 136 + 32 + 28, false);
        A.store.Int32(ptr + 136 + 32 + 12, 0);
        A.store.Bool(ptr + 136 + 32 + 29, false);
        A.store.Int32(ptr + 136 + 32 + 16, 0);
        A.store.Bool(ptr + 136 + 32 + 30, false);
        A.store.Int32(ptr + 136 + 32 + 20, 0);
        A.store.Bool(ptr + 136 + 32 + 31, false);
        A.store.Bool(ptr + 136 + 32 + 24, false);
        A.store.Bool(ptr + 136 + 32 + 32, false);
        A.store.Bool(ptr + 136 + 32 + 25, false);

        A.store.Bool(ptr + 204 + 66, false);

        A.store.Bool(ptr + 204 + 0 + 28, false);
        A.store.Ref(ptr + 204 + 0 + 0, undefined);
        A.store.Ref(ptr + 204 + 0 + 4, undefined);
        A.store.Ref(ptr + 204 + 0 + 8, undefined);
        A.store.Ref(ptr + 204 + 0 + 12, undefined);
        A.store.Ref(ptr + 204 + 0 + 16, undefined);
        A.store.Ref(ptr + 204 + 0 + 20, undefined);
        A.store.Bool(ptr + 204 + 0 + 26, false);
        A.store.Bool(ptr + 204 + 0 + 24, false);
        A.store.Bool(ptr + 204 + 0 + 27, false);
        A.store.Bool(ptr + 204 + 0 + 25, false);

        A.store.Bool(ptr + 204 + 32 + 33, false);
        A.store.Bool(ptr + 204 + 32 + 26, false);
        A.store.Int32(ptr + 204 + 32 + 0, 0);
        A.store.Ref(ptr + 204 + 32 + 4, undefined);
        A.store.Bool(ptr + 204 + 32 + 27, false);
        A.store.Int32(ptr + 204 + 32 + 8, 0);
        A.store.Bool(ptr + 204 + 32 + 28, false);
        A.store.Int32(ptr + 204 + 32 + 12, 0);
        A.store.Bool(ptr + 204 + 32 + 29, false);
        A.store.Int32(ptr + 204 + 32 + 16, 0);
        A.store.Bool(ptr + 204 + 32 + 30, false);
        A.store.Int32(ptr + 204 + 32 + 20, 0);
        A.store.Bool(ptr + 204 + 32 + 31, false);
        A.store.Bool(ptr + 204 + 32 + 24, false);
        A.store.Bool(ptr + 204 + 32 + 32, false);
        A.store.Bool(ptr + 204 + 32 + 25, false);
      } else {
        A.store.Bool(ptr + 271, true);

        if (typeof x["HTTPProxy"] === "undefined") {
          A.store.Bool(ptr + 0 + 66, false);

          A.store.Bool(ptr + 0 + 0 + 28, false);
          A.store.Ref(ptr + 0 + 0 + 0, undefined);
          A.store.Ref(ptr + 0 + 0 + 4, undefined);
          A.store.Ref(ptr + 0 + 0 + 8, undefined);
          A.store.Ref(ptr + 0 + 0 + 12, undefined);
          A.store.Ref(ptr + 0 + 0 + 16, undefined);
          A.store.Ref(ptr + 0 + 0 + 20, undefined);
          A.store.Bool(ptr + 0 + 0 + 26, false);
          A.store.Bool(ptr + 0 + 0 + 24, false);
          A.store.Bool(ptr + 0 + 0 + 27, false);
          A.store.Bool(ptr + 0 + 0 + 25, false);

          A.store.Bool(ptr + 0 + 32 + 33, false);
          A.store.Bool(ptr + 0 + 32 + 26, false);
          A.store.Int32(ptr + 0 + 32 + 0, 0);
          A.store.Ref(ptr + 0 + 32 + 4, undefined);
          A.store.Bool(ptr + 0 + 32 + 27, false);
          A.store.Int32(ptr + 0 + 32 + 8, 0);
          A.store.Bool(ptr + 0 + 32 + 28, false);
          A.store.Int32(ptr + 0 + 32 + 12, 0);
          A.store.Bool(ptr + 0 + 32 + 29, false);
          A.store.Int32(ptr + 0 + 32 + 16, 0);
          A.store.Bool(ptr + 0 + 32 + 30, false);
          A.store.Int32(ptr + 0 + 32 + 20, 0);
          A.store.Bool(ptr + 0 + 32 + 31, false);
          A.store.Bool(ptr + 0 + 32 + 24, false);
          A.store.Bool(ptr + 0 + 32 + 32, false);
          A.store.Bool(ptr + 0 + 32 + 25, false);
        } else {
          A.store.Bool(ptr + 0 + 66, true);

          if (typeof x["HTTPProxy"]["Host"] === "undefined") {
            A.store.Bool(ptr + 0 + 0 + 28, false);
            A.store.Ref(ptr + 0 + 0 + 0, undefined);
            A.store.Ref(ptr + 0 + 0 + 4, undefined);
            A.store.Ref(ptr + 0 + 0 + 8, undefined);
            A.store.Ref(ptr + 0 + 0 + 12, undefined);
            A.store.Ref(ptr + 0 + 0 + 16, undefined);
            A.store.Ref(ptr + 0 + 0 + 20, undefined);
            A.store.Bool(ptr + 0 + 0 + 26, false);
            A.store.Bool(ptr + 0 + 0 + 24, false);
            A.store.Bool(ptr + 0 + 0 + 27, false);
            A.store.Bool(ptr + 0 + 0 + 25, false);
          } else {
            A.store.Bool(ptr + 0 + 0 + 28, true);
            A.store.Ref(ptr + 0 + 0 + 0, x["HTTPProxy"]["Host"]["Active"]);
            A.store.Ref(ptr + 0 + 0 + 4, x["HTTPProxy"]["Host"]["Effective"]);
            A.store.Ref(ptr + 0 + 0 + 8, x["HTTPProxy"]["Host"]["UserPolicy"]);
            A.store.Ref(ptr + 0 + 0 + 12, x["HTTPProxy"]["Host"]["DevicePolicy"]);
            A.store.Ref(ptr + 0 + 0 + 16, x["HTTPProxy"]["Host"]["UserSetting"]);
            A.store.Ref(ptr + 0 + 0 + 20, x["HTTPProxy"]["Host"]["SharedSetting"]);
            A.store.Bool(ptr + 0 + 0 + 26, "UserEditable" in x["HTTPProxy"]["Host"] ? true : false);
            A.store.Bool(ptr + 0 + 0 + 24, x["HTTPProxy"]["Host"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 0 + 0 + 27, "DeviceEditable" in x["HTTPProxy"]["Host"] ? true : false);
            A.store.Bool(ptr + 0 + 0 + 25, x["HTTPProxy"]["Host"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["HTTPProxy"]["Port"] === "undefined") {
            A.store.Bool(ptr + 0 + 32 + 33, false);
            A.store.Bool(ptr + 0 + 32 + 26, false);
            A.store.Int32(ptr + 0 + 32 + 0, 0);
            A.store.Ref(ptr + 0 + 32 + 4, undefined);
            A.store.Bool(ptr + 0 + 32 + 27, false);
            A.store.Int32(ptr + 0 + 32 + 8, 0);
            A.store.Bool(ptr + 0 + 32 + 28, false);
            A.store.Int32(ptr + 0 + 32 + 12, 0);
            A.store.Bool(ptr + 0 + 32 + 29, false);
            A.store.Int32(ptr + 0 + 32 + 16, 0);
            A.store.Bool(ptr + 0 + 32 + 30, false);
            A.store.Int32(ptr + 0 + 32 + 20, 0);
            A.store.Bool(ptr + 0 + 32 + 31, false);
            A.store.Bool(ptr + 0 + 32 + 24, false);
            A.store.Bool(ptr + 0 + 32 + 32, false);
            A.store.Bool(ptr + 0 + 32 + 25, false);
          } else {
            A.store.Bool(ptr + 0 + 32 + 33, true);
            A.store.Bool(ptr + 0 + 32 + 26, "Active" in x["HTTPProxy"]["Port"] ? true : false);
            A.store.Int32(
              ptr + 0 + 32 + 0,
              x["HTTPProxy"]["Port"]["Active"] === undefined ? 0 : (x["HTTPProxy"]["Port"]["Active"] as number)
            );
            A.store.Ref(ptr + 0 + 32 + 4, x["HTTPProxy"]["Port"]["Effective"]);
            A.store.Bool(ptr + 0 + 32 + 27, "UserPolicy" in x["HTTPProxy"]["Port"] ? true : false);
            A.store.Int32(
              ptr + 0 + 32 + 8,
              x["HTTPProxy"]["Port"]["UserPolicy"] === undefined ? 0 : (x["HTTPProxy"]["Port"]["UserPolicy"] as number)
            );
            A.store.Bool(ptr + 0 + 32 + 28, "DevicePolicy" in x["HTTPProxy"]["Port"] ? true : false);
            A.store.Int32(
              ptr + 0 + 32 + 12,
              x["HTTPProxy"]["Port"]["DevicePolicy"] === undefined
                ? 0
                : (x["HTTPProxy"]["Port"]["DevicePolicy"] as number)
            );
            A.store.Bool(ptr + 0 + 32 + 29, "UserSetting" in x["HTTPProxy"]["Port"] ? true : false);
            A.store.Int32(
              ptr + 0 + 32 + 16,
              x["HTTPProxy"]["Port"]["UserSetting"] === undefined
                ? 0
                : (x["HTTPProxy"]["Port"]["UserSetting"] as number)
            );
            A.store.Bool(ptr + 0 + 32 + 30, "SharedSetting" in x["HTTPProxy"]["Port"] ? true : false);
            A.store.Int32(
              ptr + 0 + 32 + 20,
              x["HTTPProxy"]["Port"]["SharedSetting"] === undefined
                ? 0
                : (x["HTTPProxy"]["Port"]["SharedSetting"] as number)
            );
            A.store.Bool(ptr + 0 + 32 + 31, "UserEditable" in x["HTTPProxy"]["Port"] ? true : false);
            A.store.Bool(ptr + 0 + 32 + 24, x["HTTPProxy"]["Port"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 0 + 32 + 32, "DeviceEditable" in x["HTTPProxy"]["Port"] ? true : false);
            A.store.Bool(ptr + 0 + 32 + 25, x["HTTPProxy"]["Port"]["DeviceEditable"] ? true : false);
          }
        }

        if (typeof x["SecureHTTPProxy"] === "undefined") {
          A.store.Bool(ptr + 68 + 66, false);

          A.store.Bool(ptr + 68 + 0 + 28, false);
          A.store.Ref(ptr + 68 + 0 + 0, undefined);
          A.store.Ref(ptr + 68 + 0 + 4, undefined);
          A.store.Ref(ptr + 68 + 0 + 8, undefined);
          A.store.Ref(ptr + 68 + 0 + 12, undefined);
          A.store.Ref(ptr + 68 + 0 + 16, undefined);
          A.store.Ref(ptr + 68 + 0 + 20, undefined);
          A.store.Bool(ptr + 68 + 0 + 26, false);
          A.store.Bool(ptr + 68 + 0 + 24, false);
          A.store.Bool(ptr + 68 + 0 + 27, false);
          A.store.Bool(ptr + 68 + 0 + 25, false);

          A.store.Bool(ptr + 68 + 32 + 33, false);
          A.store.Bool(ptr + 68 + 32 + 26, false);
          A.store.Int32(ptr + 68 + 32 + 0, 0);
          A.store.Ref(ptr + 68 + 32 + 4, undefined);
          A.store.Bool(ptr + 68 + 32 + 27, false);
          A.store.Int32(ptr + 68 + 32 + 8, 0);
          A.store.Bool(ptr + 68 + 32 + 28, false);
          A.store.Int32(ptr + 68 + 32 + 12, 0);
          A.store.Bool(ptr + 68 + 32 + 29, false);
          A.store.Int32(ptr + 68 + 32 + 16, 0);
          A.store.Bool(ptr + 68 + 32 + 30, false);
          A.store.Int32(ptr + 68 + 32 + 20, 0);
          A.store.Bool(ptr + 68 + 32 + 31, false);
          A.store.Bool(ptr + 68 + 32 + 24, false);
          A.store.Bool(ptr + 68 + 32 + 32, false);
          A.store.Bool(ptr + 68 + 32 + 25, false);
        } else {
          A.store.Bool(ptr + 68 + 66, true);

          if (typeof x["SecureHTTPProxy"]["Host"] === "undefined") {
            A.store.Bool(ptr + 68 + 0 + 28, false);
            A.store.Ref(ptr + 68 + 0 + 0, undefined);
            A.store.Ref(ptr + 68 + 0 + 4, undefined);
            A.store.Ref(ptr + 68 + 0 + 8, undefined);
            A.store.Ref(ptr + 68 + 0 + 12, undefined);
            A.store.Ref(ptr + 68 + 0 + 16, undefined);
            A.store.Ref(ptr + 68 + 0 + 20, undefined);
            A.store.Bool(ptr + 68 + 0 + 26, false);
            A.store.Bool(ptr + 68 + 0 + 24, false);
            A.store.Bool(ptr + 68 + 0 + 27, false);
            A.store.Bool(ptr + 68 + 0 + 25, false);
          } else {
            A.store.Bool(ptr + 68 + 0 + 28, true);
            A.store.Ref(ptr + 68 + 0 + 0, x["SecureHTTPProxy"]["Host"]["Active"]);
            A.store.Ref(ptr + 68 + 0 + 4, x["SecureHTTPProxy"]["Host"]["Effective"]);
            A.store.Ref(ptr + 68 + 0 + 8, x["SecureHTTPProxy"]["Host"]["UserPolicy"]);
            A.store.Ref(ptr + 68 + 0 + 12, x["SecureHTTPProxy"]["Host"]["DevicePolicy"]);
            A.store.Ref(ptr + 68 + 0 + 16, x["SecureHTTPProxy"]["Host"]["UserSetting"]);
            A.store.Ref(ptr + 68 + 0 + 20, x["SecureHTTPProxy"]["Host"]["SharedSetting"]);
            A.store.Bool(ptr + 68 + 0 + 26, "UserEditable" in x["SecureHTTPProxy"]["Host"] ? true : false);
            A.store.Bool(ptr + 68 + 0 + 24, x["SecureHTTPProxy"]["Host"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 68 + 0 + 27, "DeviceEditable" in x["SecureHTTPProxy"]["Host"] ? true : false);
            A.store.Bool(ptr + 68 + 0 + 25, x["SecureHTTPProxy"]["Host"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["SecureHTTPProxy"]["Port"] === "undefined") {
            A.store.Bool(ptr + 68 + 32 + 33, false);
            A.store.Bool(ptr + 68 + 32 + 26, false);
            A.store.Int32(ptr + 68 + 32 + 0, 0);
            A.store.Ref(ptr + 68 + 32 + 4, undefined);
            A.store.Bool(ptr + 68 + 32 + 27, false);
            A.store.Int32(ptr + 68 + 32 + 8, 0);
            A.store.Bool(ptr + 68 + 32 + 28, false);
            A.store.Int32(ptr + 68 + 32 + 12, 0);
            A.store.Bool(ptr + 68 + 32 + 29, false);
            A.store.Int32(ptr + 68 + 32 + 16, 0);
            A.store.Bool(ptr + 68 + 32 + 30, false);
            A.store.Int32(ptr + 68 + 32 + 20, 0);
            A.store.Bool(ptr + 68 + 32 + 31, false);
            A.store.Bool(ptr + 68 + 32 + 24, false);
            A.store.Bool(ptr + 68 + 32 + 32, false);
            A.store.Bool(ptr + 68 + 32 + 25, false);
          } else {
            A.store.Bool(ptr + 68 + 32 + 33, true);
            A.store.Bool(ptr + 68 + 32 + 26, "Active" in x["SecureHTTPProxy"]["Port"] ? true : false);
            A.store.Int32(
              ptr + 68 + 32 + 0,
              x["SecureHTTPProxy"]["Port"]["Active"] === undefined
                ? 0
                : (x["SecureHTTPProxy"]["Port"]["Active"] as number)
            );
            A.store.Ref(ptr + 68 + 32 + 4, x["SecureHTTPProxy"]["Port"]["Effective"]);
            A.store.Bool(ptr + 68 + 32 + 27, "UserPolicy" in x["SecureHTTPProxy"]["Port"] ? true : false);
            A.store.Int32(
              ptr + 68 + 32 + 8,
              x["SecureHTTPProxy"]["Port"]["UserPolicy"] === undefined
                ? 0
                : (x["SecureHTTPProxy"]["Port"]["UserPolicy"] as number)
            );
            A.store.Bool(ptr + 68 + 32 + 28, "DevicePolicy" in x["SecureHTTPProxy"]["Port"] ? true : false);
            A.store.Int32(
              ptr + 68 + 32 + 12,
              x["SecureHTTPProxy"]["Port"]["DevicePolicy"] === undefined
                ? 0
                : (x["SecureHTTPProxy"]["Port"]["DevicePolicy"] as number)
            );
            A.store.Bool(ptr + 68 + 32 + 29, "UserSetting" in x["SecureHTTPProxy"]["Port"] ? true : false);
            A.store.Int32(
              ptr + 68 + 32 + 16,
              x["SecureHTTPProxy"]["Port"]["UserSetting"] === undefined
                ? 0
                : (x["SecureHTTPProxy"]["Port"]["UserSetting"] as number)
            );
            A.store.Bool(ptr + 68 + 32 + 30, "SharedSetting" in x["SecureHTTPProxy"]["Port"] ? true : false);
            A.store.Int32(
              ptr + 68 + 32 + 20,
              x["SecureHTTPProxy"]["Port"]["SharedSetting"] === undefined
                ? 0
                : (x["SecureHTTPProxy"]["Port"]["SharedSetting"] as number)
            );
            A.store.Bool(ptr + 68 + 32 + 31, "UserEditable" in x["SecureHTTPProxy"]["Port"] ? true : false);
            A.store.Bool(ptr + 68 + 32 + 24, x["SecureHTTPProxy"]["Port"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 68 + 32 + 32, "DeviceEditable" in x["SecureHTTPProxy"]["Port"] ? true : false);
            A.store.Bool(ptr + 68 + 32 + 25, x["SecureHTTPProxy"]["Port"]["DeviceEditable"] ? true : false);
          }
        }

        if (typeof x["FTPProxy"] === "undefined") {
          A.store.Bool(ptr + 136 + 66, false);

          A.store.Bool(ptr + 136 + 0 + 28, false);
          A.store.Ref(ptr + 136 + 0 + 0, undefined);
          A.store.Ref(ptr + 136 + 0 + 4, undefined);
          A.store.Ref(ptr + 136 + 0 + 8, undefined);
          A.store.Ref(ptr + 136 + 0 + 12, undefined);
          A.store.Ref(ptr + 136 + 0 + 16, undefined);
          A.store.Ref(ptr + 136 + 0 + 20, undefined);
          A.store.Bool(ptr + 136 + 0 + 26, false);
          A.store.Bool(ptr + 136 + 0 + 24, false);
          A.store.Bool(ptr + 136 + 0 + 27, false);
          A.store.Bool(ptr + 136 + 0 + 25, false);

          A.store.Bool(ptr + 136 + 32 + 33, false);
          A.store.Bool(ptr + 136 + 32 + 26, false);
          A.store.Int32(ptr + 136 + 32 + 0, 0);
          A.store.Ref(ptr + 136 + 32 + 4, undefined);
          A.store.Bool(ptr + 136 + 32 + 27, false);
          A.store.Int32(ptr + 136 + 32 + 8, 0);
          A.store.Bool(ptr + 136 + 32 + 28, false);
          A.store.Int32(ptr + 136 + 32 + 12, 0);
          A.store.Bool(ptr + 136 + 32 + 29, false);
          A.store.Int32(ptr + 136 + 32 + 16, 0);
          A.store.Bool(ptr + 136 + 32 + 30, false);
          A.store.Int32(ptr + 136 + 32 + 20, 0);
          A.store.Bool(ptr + 136 + 32 + 31, false);
          A.store.Bool(ptr + 136 + 32 + 24, false);
          A.store.Bool(ptr + 136 + 32 + 32, false);
          A.store.Bool(ptr + 136 + 32 + 25, false);
        } else {
          A.store.Bool(ptr + 136 + 66, true);

          if (typeof x["FTPProxy"]["Host"] === "undefined") {
            A.store.Bool(ptr + 136 + 0 + 28, false);
            A.store.Ref(ptr + 136 + 0 + 0, undefined);
            A.store.Ref(ptr + 136 + 0 + 4, undefined);
            A.store.Ref(ptr + 136 + 0 + 8, undefined);
            A.store.Ref(ptr + 136 + 0 + 12, undefined);
            A.store.Ref(ptr + 136 + 0 + 16, undefined);
            A.store.Ref(ptr + 136 + 0 + 20, undefined);
            A.store.Bool(ptr + 136 + 0 + 26, false);
            A.store.Bool(ptr + 136 + 0 + 24, false);
            A.store.Bool(ptr + 136 + 0 + 27, false);
            A.store.Bool(ptr + 136 + 0 + 25, false);
          } else {
            A.store.Bool(ptr + 136 + 0 + 28, true);
            A.store.Ref(ptr + 136 + 0 + 0, x["FTPProxy"]["Host"]["Active"]);
            A.store.Ref(ptr + 136 + 0 + 4, x["FTPProxy"]["Host"]["Effective"]);
            A.store.Ref(ptr + 136 + 0 + 8, x["FTPProxy"]["Host"]["UserPolicy"]);
            A.store.Ref(ptr + 136 + 0 + 12, x["FTPProxy"]["Host"]["DevicePolicy"]);
            A.store.Ref(ptr + 136 + 0 + 16, x["FTPProxy"]["Host"]["UserSetting"]);
            A.store.Ref(ptr + 136 + 0 + 20, x["FTPProxy"]["Host"]["SharedSetting"]);
            A.store.Bool(ptr + 136 + 0 + 26, "UserEditable" in x["FTPProxy"]["Host"] ? true : false);
            A.store.Bool(ptr + 136 + 0 + 24, x["FTPProxy"]["Host"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 136 + 0 + 27, "DeviceEditable" in x["FTPProxy"]["Host"] ? true : false);
            A.store.Bool(ptr + 136 + 0 + 25, x["FTPProxy"]["Host"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["FTPProxy"]["Port"] === "undefined") {
            A.store.Bool(ptr + 136 + 32 + 33, false);
            A.store.Bool(ptr + 136 + 32 + 26, false);
            A.store.Int32(ptr + 136 + 32 + 0, 0);
            A.store.Ref(ptr + 136 + 32 + 4, undefined);
            A.store.Bool(ptr + 136 + 32 + 27, false);
            A.store.Int32(ptr + 136 + 32 + 8, 0);
            A.store.Bool(ptr + 136 + 32 + 28, false);
            A.store.Int32(ptr + 136 + 32 + 12, 0);
            A.store.Bool(ptr + 136 + 32 + 29, false);
            A.store.Int32(ptr + 136 + 32 + 16, 0);
            A.store.Bool(ptr + 136 + 32 + 30, false);
            A.store.Int32(ptr + 136 + 32 + 20, 0);
            A.store.Bool(ptr + 136 + 32 + 31, false);
            A.store.Bool(ptr + 136 + 32 + 24, false);
            A.store.Bool(ptr + 136 + 32 + 32, false);
            A.store.Bool(ptr + 136 + 32 + 25, false);
          } else {
            A.store.Bool(ptr + 136 + 32 + 33, true);
            A.store.Bool(ptr + 136 + 32 + 26, "Active" in x["FTPProxy"]["Port"] ? true : false);
            A.store.Int32(
              ptr + 136 + 32 + 0,
              x["FTPProxy"]["Port"]["Active"] === undefined ? 0 : (x["FTPProxy"]["Port"]["Active"] as number)
            );
            A.store.Ref(ptr + 136 + 32 + 4, x["FTPProxy"]["Port"]["Effective"]);
            A.store.Bool(ptr + 136 + 32 + 27, "UserPolicy" in x["FTPProxy"]["Port"] ? true : false);
            A.store.Int32(
              ptr + 136 + 32 + 8,
              x["FTPProxy"]["Port"]["UserPolicy"] === undefined ? 0 : (x["FTPProxy"]["Port"]["UserPolicy"] as number)
            );
            A.store.Bool(ptr + 136 + 32 + 28, "DevicePolicy" in x["FTPProxy"]["Port"] ? true : false);
            A.store.Int32(
              ptr + 136 + 32 + 12,
              x["FTPProxy"]["Port"]["DevicePolicy"] === undefined
                ? 0
                : (x["FTPProxy"]["Port"]["DevicePolicy"] as number)
            );
            A.store.Bool(ptr + 136 + 32 + 29, "UserSetting" in x["FTPProxy"]["Port"] ? true : false);
            A.store.Int32(
              ptr + 136 + 32 + 16,
              x["FTPProxy"]["Port"]["UserSetting"] === undefined ? 0 : (x["FTPProxy"]["Port"]["UserSetting"] as number)
            );
            A.store.Bool(ptr + 136 + 32 + 30, "SharedSetting" in x["FTPProxy"]["Port"] ? true : false);
            A.store.Int32(
              ptr + 136 + 32 + 20,
              x["FTPProxy"]["Port"]["SharedSetting"] === undefined
                ? 0
                : (x["FTPProxy"]["Port"]["SharedSetting"] as number)
            );
            A.store.Bool(ptr + 136 + 32 + 31, "UserEditable" in x["FTPProxy"]["Port"] ? true : false);
            A.store.Bool(ptr + 136 + 32 + 24, x["FTPProxy"]["Port"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 136 + 32 + 32, "DeviceEditable" in x["FTPProxy"]["Port"] ? true : false);
            A.store.Bool(ptr + 136 + 32 + 25, x["FTPProxy"]["Port"]["DeviceEditable"] ? true : false);
          }
        }

        if (typeof x["SOCKS"] === "undefined") {
          A.store.Bool(ptr + 204 + 66, false);

          A.store.Bool(ptr + 204 + 0 + 28, false);
          A.store.Ref(ptr + 204 + 0 + 0, undefined);
          A.store.Ref(ptr + 204 + 0 + 4, undefined);
          A.store.Ref(ptr + 204 + 0 + 8, undefined);
          A.store.Ref(ptr + 204 + 0 + 12, undefined);
          A.store.Ref(ptr + 204 + 0 + 16, undefined);
          A.store.Ref(ptr + 204 + 0 + 20, undefined);
          A.store.Bool(ptr + 204 + 0 + 26, false);
          A.store.Bool(ptr + 204 + 0 + 24, false);
          A.store.Bool(ptr + 204 + 0 + 27, false);
          A.store.Bool(ptr + 204 + 0 + 25, false);

          A.store.Bool(ptr + 204 + 32 + 33, false);
          A.store.Bool(ptr + 204 + 32 + 26, false);
          A.store.Int32(ptr + 204 + 32 + 0, 0);
          A.store.Ref(ptr + 204 + 32 + 4, undefined);
          A.store.Bool(ptr + 204 + 32 + 27, false);
          A.store.Int32(ptr + 204 + 32 + 8, 0);
          A.store.Bool(ptr + 204 + 32 + 28, false);
          A.store.Int32(ptr + 204 + 32 + 12, 0);
          A.store.Bool(ptr + 204 + 32 + 29, false);
          A.store.Int32(ptr + 204 + 32 + 16, 0);
          A.store.Bool(ptr + 204 + 32 + 30, false);
          A.store.Int32(ptr + 204 + 32 + 20, 0);
          A.store.Bool(ptr + 204 + 32 + 31, false);
          A.store.Bool(ptr + 204 + 32 + 24, false);
          A.store.Bool(ptr + 204 + 32 + 32, false);
          A.store.Bool(ptr + 204 + 32 + 25, false);
        } else {
          A.store.Bool(ptr + 204 + 66, true);

          if (typeof x["SOCKS"]["Host"] === "undefined") {
            A.store.Bool(ptr + 204 + 0 + 28, false);
            A.store.Ref(ptr + 204 + 0 + 0, undefined);
            A.store.Ref(ptr + 204 + 0 + 4, undefined);
            A.store.Ref(ptr + 204 + 0 + 8, undefined);
            A.store.Ref(ptr + 204 + 0 + 12, undefined);
            A.store.Ref(ptr + 204 + 0 + 16, undefined);
            A.store.Ref(ptr + 204 + 0 + 20, undefined);
            A.store.Bool(ptr + 204 + 0 + 26, false);
            A.store.Bool(ptr + 204 + 0 + 24, false);
            A.store.Bool(ptr + 204 + 0 + 27, false);
            A.store.Bool(ptr + 204 + 0 + 25, false);
          } else {
            A.store.Bool(ptr + 204 + 0 + 28, true);
            A.store.Ref(ptr + 204 + 0 + 0, x["SOCKS"]["Host"]["Active"]);
            A.store.Ref(ptr + 204 + 0 + 4, x["SOCKS"]["Host"]["Effective"]);
            A.store.Ref(ptr + 204 + 0 + 8, x["SOCKS"]["Host"]["UserPolicy"]);
            A.store.Ref(ptr + 204 + 0 + 12, x["SOCKS"]["Host"]["DevicePolicy"]);
            A.store.Ref(ptr + 204 + 0 + 16, x["SOCKS"]["Host"]["UserSetting"]);
            A.store.Ref(ptr + 204 + 0 + 20, x["SOCKS"]["Host"]["SharedSetting"]);
            A.store.Bool(ptr + 204 + 0 + 26, "UserEditable" in x["SOCKS"]["Host"] ? true : false);
            A.store.Bool(ptr + 204 + 0 + 24, x["SOCKS"]["Host"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 204 + 0 + 27, "DeviceEditable" in x["SOCKS"]["Host"] ? true : false);
            A.store.Bool(ptr + 204 + 0 + 25, x["SOCKS"]["Host"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["SOCKS"]["Port"] === "undefined") {
            A.store.Bool(ptr + 204 + 32 + 33, false);
            A.store.Bool(ptr + 204 + 32 + 26, false);
            A.store.Int32(ptr + 204 + 32 + 0, 0);
            A.store.Ref(ptr + 204 + 32 + 4, undefined);
            A.store.Bool(ptr + 204 + 32 + 27, false);
            A.store.Int32(ptr + 204 + 32 + 8, 0);
            A.store.Bool(ptr + 204 + 32 + 28, false);
            A.store.Int32(ptr + 204 + 32 + 12, 0);
            A.store.Bool(ptr + 204 + 32 + 29, false);
            A.store.Int32(ptr + 204 + 32 + 16, 0);
            A.store.Bool(ptr + 204 + 32 + 30, false);
            A.store.Int32(ptr + 204 + 32 + 20, 0);
            A.store.Bool(ptr + 204 + 32 + 31, false);
            A.store.Bool(ptr + 204 + 32 + 24, false);
            A.store.Bool(ptr + 204 + 32 + 32, false);
            A.store.Bool(ptr + 204 + 32 + 25, false);
          } else {
            A.store.Bool(ptr + 204 + 32 + 33, true);
            A.store.Bool(ptr + 204 + 32 + 26, "Active" in x["SOCKS"]["Port"] ? true : false);
            A.store.Int32(
              ptr + 204 + 32 + 0,
              x["SOCKS"]["Port"]["Active"] === undefined ? 0 : (x["SOCKS"]["Port"]["Active"] as number)
            );
            A.store.Ref(ptr + 204 + 32 + 4, x["SOCKS"]["Port"]["Effective"]);
            A.store.Bool(ptr + 204 + 32 + 27, "UserPolicy" in x["SOCKS"]["Port"] ? true : false);
            A.store.Int32(
              ptr + 204 + 32 + 8,
              x["SOCKS"]["Port"]["UserPolicy"] === undefined ? 0 : (x["SOCKS"]["Port"]["UserPolicy"] as number)
            );
            A.store.Bool(ptr + 204 + 32 + 28, "DevicePolicy" in x["SOCKS"]["Port"] ? true : false);
            A.store.Int32(
              ptr + 204 + 32 + 12,
              x["SOCKS"]["Port"]["DevicePolicy"] === undefined ? 0 : (x["SOCKS"]["Port"]["DevicePolicy"] as number)
            );
            A.store.Bool(ptr + 204 + 32 + 29, "UserSetting" in x["SOCKS"]["Port"] ? true : false);
            A.store.Int32(
              ptr + 204 + 32 + 16,
              x["SOCKS"]["Port"]["UserSetting"] === undefined ? 0 : (x["SOCKS"]["Port"]["UserSetting"] as number)
            );
            A.store.Bool(ptr + 204 + 32 + 30, "SharedSetting" in x["SOCKS"]["Port"] ? true : false);
            A.store.Int32(
              ptr + 204 + 32 + 20,
              x["SOCKS"]["Port"]["SharedSetting"] === undefined ? 0 : (x["SOCKS"]["Port"]["SharedSetting"] as number)
            );
            A.store.Bool(ptr + 204 + 32 + 31, "UserEditable" in x["SOCKS"]["Port"] ? true : false);
            A.store.Bool(ptr + 204 + 32 + 24, x["SOCKS"]["Port"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 204 + 32 + 32, "DeviceEditable" in x["SOCKS"]["Port"] ? true : false);
            A.store.Bool(ptr + 204 + 32 + 25, x["SOCKS"]["Port"]["DeviceEditable"] ? true : false);
          }
        }
      }
    },
    "load_ManagedManualProxySettings": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      if (A.load.Bool(ptr + 0 + 66)) {
        x["HTTPProxy"] = {};
        if (A.load.Bool(ptr + 0 + 0 + 28)) {
          x["HTTPProxy"]["Host"] = {};
          x["HTTPProxy"]["Host"]["Active"] = A.load.Ref(ptr + 0 + 0 + 0, undefined);
          x["HTTPProxy"]["Host"]["Effective"] = A.load.Ref(ptr + 0 + 0 + 4, undefined);
          x["HTTPProxy"]["Host"]["UserPolicy"] = A.load.Ref(ptr + 0 + 0 + 8, undefined);
          x["HTTPProxy"]["Host"]["DevicePolicy"] = A.load.Ref(ptr + 0 + 0 + 12, undefined);
          x["HTTPProxy"]["Host"]["UserSetting"] = A.load.Ref(ptr + 0 + 0 + 16, undefined);
          x["HTTPProxy"]["Host"]["SharedSetting"] = A.load.Ref(ptr + 0 + 0 + 20, undefined);
          if (A.load.Bool(ptr + 0 + 0 + 26)) {
            x["HTTPProxy"]["Host"]["UserEditable"] = A.load.Bool(ptr + 0 + 0 + 24);
          } else {
            delete x["HTTPProxy"]["Host"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 0 + 0 + 27)) {
            x["HTTPProxy"]["Host"]["DeviceEditable"] = A.load.Bool(ptr + 0 + 0 + 25);
          } else {
            delete x["HTTPProxy"]["Host"]["DeviceEditable"];
          }
        } else {
          delete x["HTTPProxy"]["Host"];
        }
        if (A.load.Bool(ptr + 0 + 32 + 33)) {
          x["HTTPProxy"]["Port"] = {};
          if (A.load.Bool(ptr + 0 + 32 + 26)) {
            x["HTTPProxy"]["Port"]["Active"] = A.load.Int32(ptr + 0 + 32 + 0);
          } else {
            delete x["HTTPProxy"]["Port"]["Active"];
          }
          x["HTTPProxy"]["Port"]["Effective"] = A.load.Ref(ptr + 0 + 32 + 4, undefined);
          if (A.load.Bool(ptr + 0 + 32 + 27)) {
            x["HTTPProxy"]["Port"]["UserPolicy"] = A.load.Int32(ptr + 0 + 32 + 8);
          } else {
            delete x["HTTPProxy"]["Port"]["UserPolicy"];
          }
          if (A.load.Bool(ptr + 0 + 32 + 28)) {
            x["HTTPProxy"]["Port"]["DevicePolicy"] = A.load.Int32(ptr + 0 + 32 + 12);
          } else {
            delete x["HTTPProxy"]["Port"]["DevicePolicy"];
          }
          if (A.load.Bool(ptr + 0 + 32 + 29)) {
            x["HTTPProxy"]["Port"]["UserSetting"] = A.load.Int32(ptr + 0 + 32 + 16);
          } else {
            delete x["HTTPProxy"]["Port"]["UserSetting"];
          }
          if (A.load.Bool(ptr + 0 + 32 + 30)) {
            x["HTTPProxy"]["Port"]["SharedSetting"] = A.load.Int32(ptr + 0 + 32 + 20);
          } else {
            delete x["HTTPProxy"]["Port"]["SharedSetting"];
          }
          if (A.load.Bool(ptr + 0 + 32 + 31)) {
            x["HTTPProxy"]["Port"]["UserEditable"] = A.load.Bool(ptr + 0 + 32 + 24);
          } else {
            delete x["HTTPProxy"]["Port"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 0 + 32 + 32)) {
            x["HTTPProxy"]["Port"]["DeviceEditable"] = A.load.Bool(ptr + 0 + 32 + 25);
          } else {
            delete x["HTTPProxy"]["Port"]["DeviceEditable"];
          }
        } else {
          delete x["HTTPProxy"]["Port"];
        }
      } else {
        delete x["HTTPProxy"];
      }
      if (A.load.Bool(ptr + 68 + 66)) {
        x["SecureHTTPProxy"] = {};
        if (A.load.Bool(ptr + 68 + 0 + 28)) {
          x["SecureHTTPProxy"]["Host"] = {};
          x["SecureHTTPProxy"]["Host"]["Active"] = A.load.Ref(ptr + 68 + 0 + 0, undefined);
          x["SecureHTTPProxy"]["Host"]["Effective"] = A.load.Ref(ptr + 68 + 0 + 4, undefined);
          x["SecureHTTPProxy"]["Host"]["UserPolicy"] = A.load.Ref(ptr + 68 + 0 + 8, undefined);
          x["SecureHTTPProxy"]["Host"]["DevicePolicy"] = A.load.Ref(ptr + 68 + 0 + 12, undefined);
          x["SecureHTTPProxy"]["Host"]["UserSetting"] = A.load.Ref(ptr + 68 + 0 + 16, undefined);
          x["SecureHTTPProxy"]["Host"]["SharedSetting"] = A.load.Ref(ptr + 68 + 0 + 20, undefined);
          if (A.load.Bool(ptr + 68 + 0 + 26)) {
            x["SecureHTTPProxy"]["Host"]["UserEditable"] = A.load.Bool(ptr + 68 + 0 + 24);
          } else {
            delete x["SecureHTTPProxy"]["Host"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 68 + 0 + 27)) {
            x["SecureHTTPProxy"]["Host"]["DeviceEditable"] = A.load.Bool(ptr + 68 + 0 + 25);
          } else {
            delete x["SecureHTTPProxy"]["Host"]["DeviceEditable"];
          }
        } else {
          delete x["SecureHTTPProxy"]["Host"];
        }
        if (A.load.Bool(ptr + 68 + 32 + 33)) {
          x["SecureHTTPProxy"]["Port"] = {};
          if (A.load.Bool(ptr + 68 + 32 + 26)) {
            x["SecureHTTPProxy"]["Port"]["Active"] = A.load.Int32(ptr + 68 + 32 + 0);
          } else {
            delete x["SecureHTTPProxy"]["Port"]["Active"];
          }
          x["SecureHTTPProxy"]["Port"]["Effective"] = A.load.Ref(ptr + 68 + 32 + 4, undefined);
          if (A.load.Bool(ptr + 68 + 32 + 27)) {
            x["SecureHTTPProxy"]["Port"]["UserPolicy"] = A.load.Int32(ptr + 68 + 32 + 8);
          } else {
            delete x["SecureHTTPProxy"]["Port"]["UserPolicy"];
          }
          if (A.load.Bool(ptr + 68 + 32 + 28)) {
            x["SecureHTTPProxy"]["Port"]["DevicePolicy"] = A.load.Int32(ptr + 68 + 32 + 12);
          } else {
            delete x["SecureHTTPProxy"]["Port"]["DevicePolicy"];
          }
          if (A.load.Bool(ptr + 68 + 32 + 29)) {
            x["SecureHTTPProxy"]["Port"]["UserSetting"] = A.load.Int32(ptr + 68 + 32 + 16);
          } else {
            delete x["SecureHTTPProxy"]["Port"]["UserSetting"];
          }
          if (A.load.Bool(ptr + 68 + 32 + 30)) {
            x["SecureHTTPProxy"]["Port"]["SharedSetting"] = A.load.Int32(ptr + 68 + 32 + 20);
          } else {
            delete x["SecureHTTPProxy"]["Port"]["SharedSetting"];
          }
          if (A.load.Bool(ptr + 68 + 32 + 31)) {
            x["SecureHTTPProxy"]["Port"]["UserEditable"] = A.load.Bool(ptr + 68 + 32 + 24);
          } else {
            delete x["SecureHTTPProxy"]["Port"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 68 + 32 + 32)) {
            x["SecureHTTPProxy"]["Port"]["DeviceEditable"] = A.load.Bool(ptr + 68 + 32 + 25);
          } else {
            delete x["SecureHTTPProxy"]["Port"]["DeviceEditable"];
          }
        } else {
          delete x["SecureHTTPProxy"]["Port"];
        }
      } else {
        delete x["SecureHTTPProxy"];
      }
      if (A.load.Bool(ptr + 136 + 66)) {
        x["FTPProxy"] = {};
        if (A.load.Bool(ptr + 136 + 0 + 28)) {
          x["FTPProxy"]["Host"] = {};
          x["FTPProxy"]["Host"]["Active"] = A.load.Ref(ptr + 136 + 0 + 0, undefined);
          x["FTPProxy"]["Host"]["Effective"] = A.load.Ref(ptr + 136 + 0 + 4, undefined);
          x["FTPProxy"]["Host"]["UserPolicy"] = A.load.Ref(ptr + 136 + 0 + 8, undefined);
          x["FTPProxy"]["Host"]["DevicePolicy"] = A.load.Ref(ptr + 136 + 0 + 12, undefined);
          x["FTPProxy"]["Host"]["UserSetting"] = A.load.Ref(ptr + 136 + 0 + 16, undefined);
          x["FTPProxy"]["Host"]["SharedSetting"] = A.load.Ref(ptr + 136 + 0 + 20, undefined);
          if (A.load.Bool(ptr + 136 + 0 + 26)) {
            x["FTPProxy"]["Host"]["UserEditable"] = A.load.Bool(ptr + 136 + 0 + 24);
          } else {
            delete x["FTPProxy"]["Host"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 136 + 0 + 27)) {
            x["FTPProxy"]["Host"]["DeviceEditable"] = A.load.Bool(ptr + 136 + 0 + 25);
          } else {
            delete x["FTPProxy"]["Host"]["DeviceEditable"];
          }
        } else {
          delete x["FTPProxy"]["Host"];
        }
        if (A.load.Bool(ptr + 136 + 32 + 33)) {
          x["FTPProxy"]["Port"] = {};
          if (A.load.Bool(ptr + 136 + 32 + 26)) {
            x["FTPProxy"]["Port"]["Active"] = A.load.Int32(ptr + 136 + 32 + 0);
          } else {
            delete x["FTPProxy"]["Port"]["Active"];
          }
          x["FTPProxy"]["Port"]["Effective"] = A.load.Ref(ptr + 136 + 32 + 4, undefined);
          if (A.load.Bool(ptr + 136 + 32 + 27)) {
            x["FTPProxy"]["Port"]["UserPolicy"] = A.load.Int32(ptr + 136 + 32 + 8);
          } else {
            delete x["FTPProxy"]["Port"]["UserPolicy"];
          }
          if (A.load.Bool(ptr + 136 + 32 + 28)) {
            x["FTPProxy"]["Port"]["DevicePolicy"] = A.load.Int32(ptr + 136 + 32 + 12);
          } else {
            delete x["FTPProxy"]["Port"]["DevicePolicy"];
          }
          if (A.load.Bool(ptr + 136 + 32 + 29)) {
            x["FTPProxy"]["Port"]["UserSetting"] = A.load.Int32(ptr + 136 + 32 + 16);
          } else {
            delete x["FTPProxy"]["Port"]["UserSetting"];
          }
          if (A.load.Bool(ptr + 136 + 32 + 30)) {
            x["FTPProxy"]["Port"]["SharedSetting"] = A.load.Int32(ptr + 136 + 32 + 20);
          } else {
            delete x["FTPProxy"]["Port"]["SharedSetting"];
          }
          if (A.load.Bool(ptr + 136 + 32 + 31)) {
            x["FTPProxy"]["Port"]["UserEditable"] = A.load.Bool(ptr + 136 + 32 + 24);
          } else {
            delete x["FTPProxy"]["Port"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 136 + 32 + 32)) {
            x["FTPProxy"]["Port"]["DeviceEditable"] = A.load.Bool(ptr + 136 + 32 + 25);
          } else {
            delete x["FTPProxy"]["Port"]["DeviceEditable"];
          }
        } else {
          delete x["FTPProxy"]["Port"];
        }
      } else {
        delete x["FTPProxy"];
      }
      if (A.load.Bool(ptr + 204 + 66)) {
        x["SOCKS"] = {};
        if (A.load.Bool(ptr + 204 + 0 + 28)) {
          x["SOCKS"]["Host"] = {};
          x["SOCKS"]["Host"]["Active"] = A.load.Ref(ptr + 204 + 0 + 0, undefined);
          x["SOCKS"]["Host"]["Effective"] = A.load.Ref(ptr + 204 + 0 + 4, undefined);
          x["SOCKS"]["Host"]["UserPolicy"] = A.load.Ref(ptr + 204 + 0 + 8, undefined);
          x["SOCKS"]["Host"]["DevicePolicy"] = A.load.Ref(ptr + 204 + 0 + 12, undefined);
          x["SOCKS"]["Host"]["UserSetting"] = A.load.Ref(ptr + 204 + 0 + 16, undefined);
          x["SOCKS"]["Host"]["SharedSetting"] = A.load.Ref(ptr + 204 + 0 + 20, undefined);
          if (A.load.Bool(ptr + 204 + 0 + 26)) {
            x["SOCKS"]["Host"]["UserEditable"] = A.load.Bool(ptr + 204 + 0 + 24);
          } else {
            delete x["SOCKS"]["Host"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 204 + 0 + 27)) {
            x["SOCKS"]["Host"]["DeviceEditable"] = A.load.Bool(ptr + 204 + 0 + 25);
          } else {
            delete x["SOCKS"]["Host"]["DeviceEditable"];
          }
        } else {
          delete x["SOCKS"]["Host"];
        }
        if (A.load.Bool(ptr + 204 + 32 + 33)) {
          x["SOCKS"]["Port"] = {};
          if (A.load.Bool(ptr + 204 + 32 + 26)) {
            x["SOCKS"]["Port"]["Active"] = A.load.Int32(ptr + 204 + 32 + 0);
          } else {
            delete x["SOCKS"]["Port"]["Active"];
          }
          x["SOCKS"]["Port"]["Effective"] = A.load.Ref(ptr + 204 + 32 + 4, undefined);
          if (A.load.Bool(ptr + 204 + 32 + 27)) {
            x["SOCKS"]["Port"]["UserPolicy"] = A.load.Int32(ptr + 204 + 32 + 8);
          } else {
            delete x["SOCKS"]["Port"]["UserPolicy"];
          }
          if (A.load.Bool(ptr + 204 + 32 + 28)) {
            x["SOCKS"]["Port"]["DevicePolicy"] = A.load.Int32(ptr + 204 + 32 + 12);
          } else {
            delete x["SOCKS"]["Port"]["DevicePolicy"];
          }
          if (A.load.Bool(ptr + 204 + 32 + 29)) {
            x["SOCKS"]["Port"]["UserSetting"] = A.load.Int32(ptr + 204 + 32 + 16);
          } else {
            delete x["SOCKS"]["Port"]["UserSetting"];
          }
          if (A.load.Bool(ptr + 204 + 32 + 30)) {
            x["SOCKS"]["Port"]["SharedSetting"] = A.load.Int32(ptr + 204 + 32 + 20);
          } else {
            delete x["SOCKS"]["Port"]["SharedSetting"];
          }
          if (A.load.Bool(ptr + 204 + 32 + 31)) {
            x["SOCKS"]["Port"]["UserEditable"] = A.load.Bool(ptr + 204 + 32 + 24);
          } else {
            delete x["SOCKS"]["Port"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 204 + 32 + 32)) {
            x["SOCKS"]["Port"]["DeviceEditable"] = A.load.Bool(ptr + 204 + 32 + 25);
          } else {
            delete x["SOCKS"]["Port"]["DeviceEditable"];
          }
        } else {
          delete x["SOCKS"]["Port"];
        }
      } else {
        delete x["SOCKS"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_ManagedProxySettings": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 365, false);

        A.store.Bool(ptr + 0 + 28, false);
        A.store.Enum(ptr + 0 + 0, -1);
        A.store.Ref(ptr + 0 + 4, undefined);
        A.store.Enum(ptr + 0 + 8, -1);
        A.store.Enum(ptr + 0 + 12, -1);
        A.store.Enum(ptr + 0 + 16, -1);
        A.store.Enum(ptr + 0 + 20, -1);
        A.store.Bool(ptr + 0 + 26, false);
        A.store.Bool(ptr + 0 + 24, false);
        A.store.Bool(ptr + 0 + 27, false);
        A.store.Bool(ptr + 0 + 25, false);

        A.store.Bool(ptr + 32 + 271, false);

        A.store.Bool(ptr + 32 + 0 + 66, false);

        A.store.Bool(ptr + 32 + 0 + 0 + 28, false);
        A.store.Ref(ptr + 32 + 0 + 0 + 0, undefined);
        A.store.Ref(ptr + 32 + 0 + 0 + 4, undefined);
        A.store.Ref(ptr + 32 + 0 + 0 + 8, undefined);
        A.store.Ref(ptr + 32 + 0 + 0 + 12, undefined);
        A.store.Ref(ptr + 32 + 0 + 0 + 16, undefined);
        A.store.Ref(ptr + 32 + 0 + 0 + 20, undefined);
        A.store.Bool(ptr + 32 + 0 + 0 + 26, false);
        A.store.Bool(ptr + 32 + 0 + 0 + 24, false);
        A.store.Bool(ptr + 32 + 0 + 0 + 27, false);
        A.store.Bool(ptr + 32 + 0 + 0 + 25, false);

        A.store.Bool(ptr + 32 + 0 + 32 + 33, false);
        A.store.Bool(ptr + 32 + 0 + 32 + 26, false);
        A.store.Int32(ptr + 32 + 0 + 32 + 0, 0);
        A.store.Ref(ptr + 32 + 0 + 32 + 4, undefined);
        A.store.Bool(ptr + 32 + 0 + 32 + 27, false);
        A.store.Int32(ptr + 32 + 0 + 32 + 8, 0);
        A.store.Bool(ptr + 32 + 0 + 32 + 28, false);
        A.store.Int32(ptr + 32 + 0 + 32 + 12, 0);
        A.store.Bool(ptr + 32 + 0 + 32 + 29, false);
        A.store.Int32(ptr + 32 + 0 + 32 + 16, 0);
        A.store.Bool(ptr + 32 + 0 + 32 + 30, false);
        A.store.Int32(ptr + 32 + 0 + 32 + 20, 0);
        A.store.Bool(ptr + 32 + 0 + 32 + 31, false);
        A.store.Bool(ptr + 32 + 0 + 32 + 24, false);
        A.store.Bool(ptr + 32 + 0 + 32 + 32, false);
        A.store.Bool(ptr + 32 + 0 + 32 + 25, false);

        A.store.Bool(ptr + 32 + 68 + 66, false);

        A.store.Bool(ptr + 32 + 68 + 0 + 28, false);
        A.store.Ref(ptr + 32 + 68 + 0 + 0, undefined);
        A.store.Ref(ptr + 32 + 68 + 0 + 4, undefined);
        A.store.Ref(ptr + 32 + 68 + 0 + 8, undefined);
        A.store.Ref(ptr + 32 + 68 + 0 + 12, undefined);
        A.store.Ref(ptr + 32 + 68 + 0 + 16, undefined);
        A.store.Ref(ptr + 32 + 68 + 0 + 20, undefined);
        A.store.Bool(ptr + 32 + 68 + 0 + 26, false);
        A.store.Bool(ptr + 32 + 68 + 0 + 24, false);
        A.store.Bool(ptr + 32 + 68 + 0 + 27, false);
        A.store.Bool(ptr + 32 + 68 + 0 + 25, false);

        A.store.Bool(ptr + 32 + 68 + 32 + 33, false);
        A.store.Bool(ptr + 32 + 68 + 32 + 26, false);
        A.store.Int32(ptr + 32 + 68 + 32 + 0, 0);
        A.store.Ref(ptr + 32 + 68 + 32 + 4, undefined);
        A.store.Bool(ptr + 32 + 68 + 32 + 27, false);
        A.store.Int32(ptr + 32 + 68 + 32 + 8, 0);
        A.store.Bool(ptr + 32 + 68 + 32 + 28, false);
        A.store.Int32(ptr + 32 + 68 + 32 + 12, 0);
        A.store.Bool(ptr + 32 + 68 + 32 + 29, false);
        A.store.Int32(ptr + 32 + 68 + 32 + 16, 0);
        A.store.Bool(ptr + 32 + 68 + 32 + 30, false);
        A.store.Int32(ptr + 32 + 68 + 32 + 20, 0);
        A.store.Bool(ptr + 32 + 68 + 32 + 31, false);
        A.store.Bool(ptr + 32 + 68 + 32 + 24, false);
        A.store.Bool(ptr + 32 + 68 + 32 + 32, false);
        A.store.Bool(ptr + 32 + 68 + 32 + 25, false);

        A.store.Bool(ptr + 32 + 136 + 66, false);

        A.store.Bool(ptr + 32 + 136 + 0 + 28, false);
        A.store.Ref(ptr + 32 + 136 + 0 + 0, undefined);
        A.store.Ref(ptr + 32 + 136 + 0 + 4, undefined);
        A.store.Ref(ptr + 32 + 136 + 0 + 8, undefined);
        A.store.Ref(ptr + 32 + 136 + 0 + 12, undefined);
        A.store.Ref(ptr + 32 + 136 + 0 + 16, undefined);
        A.store.Ref(ptr + 32 + 136 + 0 + 20, undefined);
        A.store.Bool(ptr + 32 + 136 + 0 + 26, false);
        A.store.Bool(ptr + 32 + 136 + 0 + 24, false);
        A.store.Bool(ptr + 32 + 136 + 0 + 27, false);
        A.store.Bool(ptr + 32 + 136 + 0 + 25, false);

        A.store.Bool(ptr + 32 + 136 + 32 + 33, false);
        A.store.Bool(ptr + 32 + 136 + 32 + 26, false);
        A.store.Int32(ptr + 32 + 136 + 32 + 0, 0);
        A.store.Ref(ptr + 32 + 136 + 32 + 4, undefined);
        A.store.Bool(ptr + 32 + 136 + 32 + 27, false);
        A.store.Int32(ptr + 32 + 136 + 32 + 8, 0);
        A.store.Bool(ptr + 32 + 136 + 32 + 28, false);
        A.store.Int32(ptr + 32 + 136 + 32 + 12, 0);
        A.store.Bool(ptr + 32 + 136 + 32 + 29, false);
        A.store.Int32(ptr + 32 + 136 + 32 + 16, 0);
        A.store.Bool(ptr + 32 + 136 + 32 + 30, false);
        A.store.Int32(ptr + 32 + 136 + 32 + 20, 0);
        A.store.Bool(ptr + 32 + 136 + 32 + 31, false);
        A.store.Bool(ptr + 32 + 136 + 32 + 24, false);
        A.store.Bool(ptr + 32 + 136 + 32 + 32, false);
        A.store.Bool(ptr + 32 + 136 + 32 + 25, false);

        A.store.Bool(ptr + 32 + 204 + 66, false);

        A.store.Bool(ptr + 32 + 204 + 0 + 28, false);
        A.store.Ref(ptr + 32 + 204 + 0 + 0, undefined);
        A.store.Ref(ptr + 32 + 204 + 0 + 4, undefined);
        A.store.Ref(ptr + 32 + 204 + 0 + 8, undefined);
        A.store.Ref(ptr + 32 + 204 + 0 + 12, undefined);
        A.store.Ref(ptr + 32 + 204 + 0 + 16, undefined);
        A.store.Ref(ptr + 32 + 204 + 0 + 20, undefined);
        A.store.Bool(ptr + 32 + 204 + 0 + 26, false);
        A.store.Bool(ptr + 32 + 204 + 0 + 24, false);
        A.store.Bool(ptr + 32 + 204 + 0 + 27, false);
        A.store.Bool(ptr + 32 + 204 + 0 + 25, false);

        A.store.Bool(ptr + 32 + 204 + 32 + 33, false);
        A.store.Bool(ptr + 32 + 204 + 32 + 26, false);
        A.store.Int32(ptr + 32 + 204 + 32 + 0, 0);
        A.store.Ref(ptr + 32 + 204 + 32 + 4, undefined);
        A.store.Bool(ptr + 32 + 204 + 32 + 27, false);
        A.store.Int32(ptr + 32 + 204 + 32 + 8, 0);
        A.store.Bool(ptr + 32 + 204 + 32 + 28, false);
        A.store.Int32(ptr + 32 + 204 + 32 + 12, 0);
        A.store.Bool(ptr + 32 + 204 + 32 + 29, false);
        A.store.Int32(ptr + 32 + 204 + 32 + 16, 0);
        A.store.Bool(ptr + 32 + 204 + 32 + 30, false);
        A.store.Int32(ptr + 32 + 204 + 32 + 20, 0);
        A.store.Bool(ptr + 32 + 204 + 32 + 31, false);
        A.store.Bool(ptr + 32 + 204 + 32 + 24, false);
        A.store.Bool(ptr + 32 + 204 + 32 + 32, false);
        A.store.Bool(ptr + 32 + 204 + 32 + 25, false);

        A.store.Bool(ptr + 304 + 28, false);
        A.store.Ref(ptr + 304 + 0, undefined);
        A.store.Ref(ptr + 304 + 4, undefined);
        A.store.Ref(ptr + 304 + 8, undefined);
        A.store.Ref(ptr + 304 + 12, undefined);
        A.store.Ref(ptr + 304 + 16, undefined);
        A.store.Ref(ptr + 304 + 20, undefined);
        A.store.Bool(ptr + 304 + 26, false);
        A.store.Bool(ptr + 304 + 24, false);
        A.store.Bool(ptr + 304 + 27, false);
        A.store.Bool(ptr + 304 + 25, false);

        A.store.Bool(ptr + 336 + 28, false);
        A.store.Ref(ptr + 336 + 0, undefined);
        A.store.Ref(ptr + 336 + 4, undefined);
        A.store.Ref(ptr + 336 + 8, undefined);
        A.store.Ref(ptr + 336 + 12, undefined);
        A.store.Ref(ptr + 336 + 16, undefined);
        A.store.Ref(ptr + 336 + 20, undefined);
        A.store.Bool(ptr + 336 + 26, false);
        A.store.Bool(ptr + 336 + 24, false);
        A.store.Bool(ptr + 336 + 27, false);
        A.store.Bool(ptr + 336 + 25, false);
      } else {
        A.store.Bool(ptr + 365, true);

        if (typeof x["Type"] === "undefined") {
          A.store.Bool(ptr + 0 + 28, false);
          A.store.Enum(ptr + 0 + 0, -1);
          A.store.Ref(ptr + 0 + 4, undefined);
          A.store.Enum(ptr + 0 + 8, -1);
          A.store.Enum(ptr + 0 + 12, -1);
          A.store.Enum(ptr + 0 + 16, -1);
          A.store.Enum(ptr + 0 + 20, -1);
          A.store.Bool(ptr + 0 + 26, false);
          A.store.Bool(ptr + 0 + 24, false);
          A.store.Bool(ptr + 0 + 27, false);
          A.store.Bool(ptr + 0 + 25, false);
        } else {
          A.store.Bool(ptr + 0 + 28, true);
          A.store.Enum(ptr + 0 + 0, ["Direct", "Manual", "PAC", "WPAD"].indexOf(x["Type"]["Active"] as string));
          A.store.Ref(ptr + 0 + 4, x["Type"]["Effective"]);
          A.store.Enum(ptr + 0 + 8, ["Direct", "Manual", "PAC", "WPAD"].indexOf(x["Type"]["UserPolicy"] as string));
          A.store.Enum(ptr + 0 + 12, ["Direct", "Manual", "PAC", "WPAD"].indexOf(x["Type"]["DevicePolicy"] as string));
          A.store.Enum(ptr + 0 + 16, ["Direct", "Manual", "PAC", "WPAD"].indexOf(x["Type"]["UserSetting"] as string));
          A.store.Enum(ptr + 0 + 20, ["Direct", "Manual", "PAC", "WPAD"].indexOf(x["Type"]["SharedSetting"] as string));
          A.store.Bool(ptr + 0 + 26, "UserEditable" in x["Type"] ? true : false);
          A.store.Bool(ptr + 0 + 24, x["Type"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 0 + 27, "DeviceEditable" in x["Type"] ? true : false);
          A.store.Bool(ptr + 0 + 25, x["Type"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["Manual"] === "undefined") {
          A.store.Bool(ptr + 32 + 271, false);

          A.store.Bool(ptr + 32 + 0 + 66, false);

          A.store.Bool(ptr + 32 + 0 + 0 + 28, false);
          A.store.Ref(ptr + 32 + 0 + 0 + 0, undefined);
          A.store.Ref(ptr + 32 + 0 + 0 + 4, undefined);
          A.store.Ref(ptr + 32 + 0 + 0 + 8, undefined);
          A.store.Ref(ptr + 32 + 0 + 0 + 12, undefined);
          A.store.Ref(ptr + 32 + 0 + 0 + 16, undefined);
          A.store.Ref(ptr + 32 + 0 + 0 + 20, undefined);
          A.store.Bool(ptr + 32 + 0 + 0 + 26, false);
          A.store.Bool(ptr + 32 + 0 + 0 + 24, false);
          A.store.Bool(ptr + 32 + 0 + 0 + 27, false);
          A.store.Bool(ptr + 32 + 0 + 0 + 25, false);

          A.store.Bool(ptr + 32 + 0 + 32 + 33, false);
          A.store.Bool(ptr + 32 + 0 + 32 + 26, false);
          A.store.Int32(ptr + 32 + 0 + 32 + 0, 0);
          A.store.Ref(ptr + 32 + 0 + 32 + 4, undefined);
          A.store.Bool(ptr + 32 + 0 + 32 + 27, false);
          A.store.Int32(ptr + 32 + 0 + 32 + 8, 0);
          A.store.Bool(ptr + 32 + 0 + 32 + 28, false);
          A.store.Int32(ptr + 32 + 0 + 32 + 12, 0);
          A.store.Bool(ptr + 32 + 0 + 32 + 29, false);
          A.store.Int32(ptr + 32 + 0 + 32 + 16, 0);
          A.store.Bool(ptr + 32 + 0 + 32 + 30, false);
          A.store.Int32(ptr + 32 + 0 + 32 + 20, 0);
          A.store.Bool(ptr + 32 + 0 + 32 + 31, false);
          A.store.Bool(ptr + 32 + 0 + 32 + 24, false);
          A.store.Bool(ptr + 32 + 0 + 32 + 32, false);
          A.store.Bool(ptr + 32 + 0 + 32 + 25, false);

          A.store.Bool(ptr + 32 + 68 + 66, false);

          A.store.Bool(ptr + 32 + 68 + 0 + 28, false);
          A.store.Ref(ptr + 32 + 68 + 0 + 0, undefined);
          A.store.Ref(ptr + 32 + 68 + 0 + 4, undefined);
          A.store.Ref(ptr + 32 + 68 + 0 + 8, undefined);
          A.store.Ref(ptr + 32 + 68 + 0 + 12, undefined);
          A.store.Ref(ptr + 32 + 68 + 0 + 16, undefined);
          A.store.Ref(ptr + 32 + 68 + 0 + 20, undefined);
          A.store.Bool(ptr + 32 + 68 + 0 + 26, false);
          A.store.Bool(ptr + 32 + 68 + 0 + 24, false);
          A.store.Bool(ptr + 32 + 68 + 0 + 27, false);
          A.store.Bool(ptr + 32 + 68 + 0 + 25, false);

          A.store.Bool(ptr + 32 + 68 + 32 + 33, false);
          A.store.Bool(ptr + 32 + 68 + 32 + 26, false);
          A.store.Int32(ptr + 32 + 68 + 32 + 0, 0);
          A.store.Ref(ptr + 32 + 68 + 32 + 4, undefined);
          A.store.Bool(ptr + 32 + 68 + 32 + 27, false);
          A.store.Int32(ptr + 32 + 68 + 32 + 8, 0);
          A.store.Bool(ptr + 32 + 68 + 32 + 28, false);
          A.store.Int32(ptr + 32 + 68 + 32 + 12, 0);
          A.store.Bool(ptr + 32 + 68 + 32 + 29, false);
          A.store.Int32(ptr + 32 + 68 + 32 + 16, 0);
          A.store.Bool(ptr + 32 + 68 + 32 + 30, false);
          A.store.Int32(ptr + 32 + 68 + 32 + 20, 0);
          A.store.Bool(ptr + 32 + 68 + 32 + 31, false);
          A.store.Bool(ptr + 32 + 68 + 32 + 24, false);
          A.store.Bool(ptr + 32 + 68 + 32 + 32, false);
          A.store.Bool(ptr + 32 + 68 + 32 + 25, false);

          A.store.Bool(ptr + 32 + 136 + 66, false);

          A.store.Bool(ptr + 32 + 136 + 0 + 28, false);
          A.store.Ref(ptr + 32 + 136 + 0 + 0, undefined);
          A.store.Ref(ptr + 32 + 136 + 0 + 4, undefined);
          A.store.Ref(ptr + 32 + 136 + 0 + 8, undefined);
          A.store.Ref(ptr + 32 + 136 + 0 + 12, undefined);
          A.store.Ref(ptr + 32 + 136 + 0 + 16, undefined);
          A.store.Ref(ptr + 32 + 136 + 0 + 20, undefined);
          A.store.Bool(ptr + 32 + 136 + 0 + 26, false);
          A.store.Bool(ptr + 32 + 136 + 0 + 24, false);
          A.store.Bool(ptr + 32 + 136 + 0 + 27, false);
          A.store.Bool(ptr + 32 + 136 + 0 + 25, false);

          A.store.Bool(ptr + 32 + 136 + 32 + 33, false);
          A.store.Bool(ptr + 32 + 136 + 32 + 26, false);
          A.store.Int32(ptr + 32 + 136 + 32 + 0, 0);
          A.store.Ref(ptr + 32 + 136 + 32 + 4, undefined);
          A.store.Bool(ptr + 32 + 136 + 32 + 27, false);
          A.store.Int32(ptr + 32 + 136 + 32 + 8, 0);
          A.store.Bool(ptr + 32 + 136 + 32 + 28, false);
          A.store.Int32(ptr + 32 + 136 + 32 + 12, 0);
          A.store.Bool(ptr + 32 + 136 + 32 + 29, false);
          A.store.Int32(ptr + 32 + 136 + 32 + 16, 0);
          A.store.Bool(ptr + 32 + 136 + 32 + 30, false);
          A.store.Int32(ptr + 32 + 136 + 32 + 20, 0);
          A.store.Bool(ptr + 32 + 136 + 32 + 31, false);
          A.store.Bool(ptr + 32 + 136 + 32 + 24, false);
          A.store.Bool(ptr + 32 + 136 + 32 + 32, false);
          A.store.Bool(ptr + 32 + 136 + 32 + 25, false);

          A.store.Bool(ptr + 32 + 204 + 66, false);

          A.store.Bool(ptr + 32 + 204 + 0 + 28, false);
          A.store.Ref(ptr + 32 + 204 + 0 + 0, undefined);
          A.store.Ref(ptr + 32 + 204 + 0 + 4, undefined);
          A.store.Ref(ptr + 32 + 204 + 0 + 8, undefined);
          A.store.Ref(ptr + 32 + 204 + 0 + 12, undefined);
          A.store.Ref(ptr + 32 + 204 + 0 + 16, undefined);
          A.store.Ref(ptr + 32 + 204 + 0 + 20, undefined);
          A.store.Bool(ptr + 32 + 204 + 0 + 26, false);
          A.store.Bool(ptr + 32 + 204 + 0 + 24, false);
          A.store.Bool(ptr + 32 + 204 + 0 + 27, false);
          A.store.Bool(ptr + 32 + 204 + 0 + 25, false);

          A.store.Bool(ptr + 32 + 204 + 32 + 33, false);
          A.store.Bool(ptr + 32 + 204 + 32 + 26, false);
          A.store.Int32(ptr + 32 + 204 + 32 + 0, 0);
          A.store.Ref(ptr + 32 + 204 + 32 + 4, undefined);
          A.store.Bool(ptr + 32 + 204 + 32 + 27, false);
          A.store.Int32(ptr + 32 + 204 + 32 + 8, 0);
          A.store.Bool(ptr + 32 + 204 + 32 + 28, false);
          A.store.Int32(ptr + 32 + 204 + 32 + 12, 0);
          A.store.Bool(ptr + 32 + 204 + 32 + 29, false);
          A.store.Int32(ptr + 32 + 204 + 32 + 16, 0);
          A.store.Bool(ptr + 32 + 204 + 32 + 30, false);
          A.store.Int32(ptr + 32 + 204 + 32 + 20, 0);
          A.store.Bool(ptr + 32 + 204 + 32 + 31, false);
          A.store.Bool(ptr + 32 + 204 + 32 + 24, false);
          A.store.Bool(ptr + 32 + 204 + 32 + 32, false);
          A.store.Bool(ptr + 32 + 204 + 32 + 25, false);
        } else {
          A.store.Bool(ptr + 32 + 271, true);

          if (typeof x["Manual"]["HTTPProxy"] === "undefined") {
            A.store.Bool(ptr + 32 + 0 + 66, false);

            A.store.Bool(ptr + 32 + 0 + 0 + 28, false);
            A.store.Ref(ptr + 32 + 0 + 0 + 0, undefined);
            A.store.Ref(ptr + 32 + 0 + 0 + 4, undefined);
            A.store.Ref(ptr + 32 + 0 + 0 + 8, undefined);
            A.store.Ref(ptr + 32 + 0 + 0 + 12, undefined);
            A.store.Ref(ptr + 32 + 0 + 0 + 16, undefined);
            A.store.Ref(ptr + 32 + 0 + 0 + 20, undefined);
            A.store.Bool(ptr + 32 + 0 + 0 + 26, false);
            A.store.Bool(ptr + 32 + 0 + 0 + 24, false);
            A.store.Bool(ptr + 32 + 0 + 0 + 27, false);
            A.store.Bool(ptr + 32 + 0 + 0 + 25, false);

            A.store.Bool(ptr + 32 + 0 + 32 + 33, false);
            A.store.Bool(ptr + 32 + 0 + 32 + 26, false);
            A.store.Int32(ptr + 32 + 0 + 32 + 0, 0);
            A.store.Ref(ptr + 32 + 0 + 32 + 4, undefined);
            A.store.Bool(ptr + 32 + 0 + 32 + 27, false);
            A.store.Int32(ptr + 32 + 0 + 32 + 8, 0);
            A.store.Bool(ptr + 32 + 0 + 32 + 28, false);
            A.store.Int32(ptr + 32 + 0 + 32 + 12, 0);
            A.store.Bool(ptr + 32 + 0 + 32 + 29, false);
            A.store.Int32(ptr + 32 + 0 + 32 + 16, 0);
            A.store.Bool(ptr + 32 + 0 + 32 + 30, false);
            A.store.Int32(ptr + 32 + 0 + 32 + 20, 0);
            A.store.Bool(ptr + 32 + 0 + 32 + 31, false);
            A.store.Bool(ptr + 32 + 0 + 32 + 24, false);
            A.store.Bool(ptr + 32 + 0 + 32 + 32, false);
            A.store.Bool(ptr + 32 + 0 + 32 + 25, false);
          } else {
            A.store.Bool(ptr + 32 + 0 + 66, true);

            if (typeof x["Manual"]["HTTPProxy"]["Host"] === "undefined") {
              A.store.Bool(ptr + 32 + 0 + 0 + 28, false);
              A.store.Ref(ptr + 32 + 0 + 0 + 0, undefined);
              A.store.Ref(ptr + 32 + 0 + 0 + 4, undefined);
              A.store.Ref(ptr + 32 + 0 + 0 + 8, undefined);
              A.store.Ref(ptr + 32 + 0 + 0 + 12, undefined);
              A.store.Ref(ptr + 32 + 0 + 0 + 16, undefined);
              A.store.Ref(ptr + 32 + 0 + 0 + 20, undefined);
              A.store.Bool(ptr + 32 + 0 + 0 + 26, false);
              A.store.Bool(ptr + 32 + 0 + 0 + 24, false);
              A.store.Bool(ptr + 32 + 0 + 0 + 27, false);
              A.store.Bool(ptr + 32 + 0 + 0 + 25, false);
            } else {
              A.store.Bool(ptr + 32 + 0 + 0 + 28, true);
              A.store.Ref(ptr + 32 + 0 + 0 + 0, x["Manual"]["HTTPProxy"]["Host"]["Active"]);
              A.store.Ref(ptr + 32 + 0 + 0 + 4, x["Manual"]["HTTPProxy"]["Host"]["Effective"]);
              A.store.Ref(ptr + 32 + 0 + 0 + 8, x["Manual"]["HTTPProxy"]["Host"]["UserPolicy"]);
              A.store.Ref(ptr + 32 + 0 + 0 + 12, x["Manual"]["HTTPProxy"]["Host"]["DevicePolicy"]);
              A.store.Ref(ptr + 32 + 0 + 0 + 16, x["Manual"]["HTTPProxy"]["Host"]["UserSetting"]);
              A.store.Ref(ptr + 32 + 0 + 0 + 20, x["Manual"]["HTTPProxy"]["Host"]["SharedSetting"]);
              A.store.Bool(ptr + 32 + 0 + 0 + 26, "UserEditable" in x["Manual"]["HTTPProxy"]["Host"] ? true : false);
              A.store.Bool(ptr + 32 + 0 + 0 + 24, x["Manual"]["HTTPProxy"]["Host"]["UserEditable"] ? true : false);
              A.store.Bool(ptr + 32 + 0 + 0 + 27, "DeviceEditable" in x["Manual"]["HTTPProxy"]["Host"] ? true : false);
              A.store.Bool(ptr + 32 + 0 + 0 + 25, x["Manual"]["HTTPProxy"]["Host"]["DeviceEditable"] ? true : false);
            }

            if (typeof x["Manual"]["HTTPProxy"]["Port"] === "undefined") {
              A.store.Bool(ptr + 32 + 0 + 32 + 33, false);
              A.store.Bool(ptr + 32 + 0 + 32 + 26, false);
              A.store.Int32(ptr + 32 + 0 + 32 + 0, 0);
              A.store.Ref(ptr + 32 + 0 + 32 + 4, undefined);
              A.store.Bool(ptr + 32 + 0 + 32 + 27, false);
              A.store.Int32(ptr + 32 + 0 + 32 + 8, 0);
              A.store.Bool(ptr + 32 + 0 + 32 + 28, false);
              A.store.Int32(ptr + 32 + 0 + 32 + 12, 0);
              A.store.Bool(ptr + 32 + 0 + 32 + 29, false);
              A.store.Int32(ptr + 32 + 0 + 32 + 16, 0);
              A.store.Bool(ptr + 32 + 0 + 32 + 30, false);
              A.store.Int32(ptr + 32 + 0 + 32 + 20, 0);
              A.store.Bool(ptr + 32 + 0 + 32 + 31, false);
              A.store.Bool(ptr + 32 + 0 + 32 + 24, false);
              A.store.Bool(ptr + 32 + 0 + 32 + 32, false);
              A.store.Bool(ptr + 32 + 0 + 32 + 25, false);
            } else {
              A.store.Bool(ptr + 32 + 0 + 32 + 33, true);
              A.store.Bool(ptr + 32 + 0 + 32 + 26, "Active" in x["Manual"]["HTTPProxy"]["Port"] ? true : false);
              A.store.Int32(
                ptr + 32 + 0 + 32 + 0,
                x["Manual"]["HTTPProxy"]["Port"]["Active"] === undefined
                  ? 0
                  : (x["Manual"]["HTTPProxy"]["Port"]["Active"] as number)
              );
              A.store.Ref(ptr + 32 + 0 + 32 + 4, x["Manual"]["HTTPProxy"]["Port"]["Effective"]);
              A.store.Bool(ptr + 32 + 0 + 32 + 27, "UserPolicy" in x["Manual"]["HTTPProxy"]["Port"] ? true : false);
              A.store.Int32(
                ptr + 32 + 0 + 32 + 8,
                x["Manual"]["HTTPProxy"]["Port"]["UserPolicy"] === undefined
                  ? 0
                  : (x["Manual"]["HTTPProxy"]["Port"]["UserPolicy"] as number)
              );
              A.store.Bool(ptr + 32 + 0 + 32 + 28, "DevicePolicy" in x["Manual"]["HTTPProxy"]["Port"] ? true : false);
              A.store.Int32(
                ptr + 32 + 0 + 32 + 12,
                x["Manual"]["HTTPProxy"]["Port"]["DevicePolicy"] === undefined
                  ? 0
                  : (x["Manual"]["HTTPProxy"]["Port"]["DevicePolicy"] as number)
              );
              A.store.Bool(ptr + 32 + 0 + 32 + 29, "UserSetting" in x["Manual"]["HTTPProxy"]["Port"] ? true : false);
              A.store.Int32(
                ptr + 32 + 0 + 32 + 16,
                x["Manual"]["HTTPProxy"]["Port"]["UserSetting"] === undefined
                  ? 0
                  : (x["Manual"]["HTTPProxy"]["Port"]["UserSetting"] as number)
              );
              A.store.Bool(ptr + 32 + 0 + 32 + 30, "SharedSetting" in x["Manual"]["HTTPProxy"]["Port"] ? true : false);
              A.store.Int32(
                ptr + 32 + 0 + 32 + 20,
                x["Manual"]["HTTPProxy"]["Port"]["SharedSetting"] === undefined
                  ? 0
                  : (x["Manual"]["HTTPProxy"]["Port"]["SharedSetting"] as number)
              );
              A.store.Bool(ptr + 32 + 0 + 32 + 31, "UserEditable" in x["Manual"]["HTTPProxy"]["Port"] ? true : false);
              A.store.Bool(ptr + 32 + 0 + 32 + 24, x["Manual"]["HTTPProxy"]["Port"]["UserEditable"] ? true : false);
              A.store.Bool(ptr + 32 + 0 + 32 + 32, "DeviceEditable" in x["Manual"]["HTTPProxy"]["Port"] ? true : false);
              A.store.Bool(ptr + 32 + 0 + 32 + 25, x["Manual"]["HTTPProxy"]["Port"]["DeviceEditable"] ? true : false);
            }
          }

          if (typeof x["Manual"]["SecureHTTPProxy"] === "undefined") {
            A.store.Bool(ptr + 32 + 68 + 66, false);

            A.store.Bool(ptr + 32 + 68 + 0 + 28, false);
            A.store.Ref(ptr + 32 + 68 + 0 + 0, undefined);
            A.store.Ref(ptr + 32 + 68 + 0 + 4, undefined);
            A.store.Ref(ptr + 32 + 68 + 0 + 8, undefined);
            A.store.Ref(ptr + 32 + 68 + 0 + 12, undefined);
            A.store.Ref(ptr + 32 + 68 + 0 + 16, undefined);
            A.store.Ref(ptr + 32 + 68 + 0 + 20, undefined);
            A.store.Bool(ptr + 32 + 68 + 0 + 26, false);
            A.store.Bool(ptr + 32 + 68 + 0 + 24, false);
            A.store.Bool(ptr + 32 + 68 + 0 + 27, false);
            A.store.Bool(ptr + 32 + 68 + 0 + 25, false);

            A.store.Bool(ptr + 32 + 68 + 32 + 33, false);
            A.store.Bool(ptr + 32 + 68 + 32 + 26, false);
            A.store.Int32(ptr + 32 + 68 + 32 + 0, 0);
            A.store.Ref(ptr + 32 + 68 + 32 + 4, undefined);
            A.store.Bool(ptr + 32 + 68 + 32 + 27, false);
            A.store.Int32(ptr + 32 + 68 + 32 + 8, 0);
            A.store.Bool(ptr + 32 + 68 + 32 + 28, false);
            A.store.Int32(ptr + 32 + 68 + 32 + 12, 0);
            A.store.Bool(ptr + 32 + 68 + 32 + 29, false);
            A.store.Int32(ptr + 32 + 68 + 32 + 16, 0);
            A.store.Bool(ptr + 32 + 68 + 32 + 30, false);
            A.store.Int32(ptr + 32 + 68 + 32 + 20, 0);
            A.store.Bool(ptr + 32 + 68 + 32 + 31, false);
            A.store.Bool(ptr + 32 + 68 + 32 + 24, false);
            A.store.Bool(ptr + 32 + 68 + 32 + 32, false);
            A.store.Bool(ptr + 32 + 68 + 32 + 25, false);
          } else {
            A.store.Bool(ptr + 32 + 68 + 66, true);

            if (typeof x["Manual"]["SecureHTTPProxy"]["Host"] === "undefined") {
              A.store.Bool(ptr + 32 + 68 + 0 + 28, false);
              A.store.Ref(ptr + 32 + 68 + 0 + 0, undefined);
              A.store.Ref(ptr + 32 + 68 + 0 + 4, undefined);
              A.store.Ref(ptr + 32 + 68 + 0 + 8, undefined);
              A.store.Ref(ptr + 32 + 68 + 0 + 12, undefined);
              A.store.Ref(ptr + 32 + 68 + 0 + 16, undefined);
              A.store.Ref(ptr + 32 + 68 + 0 + 20, undefined);
              A.store.Bool(ptr + 32 + 68 + 0 + 26, false);
              A.store.Bool(ptr + 32 + 68 + 0 + 24, false);
              A.store.Bool(ptr + 32 + 68 + 0 + 27, false);
              A.store.Bool(ptr + 32 + 68 + 0 + 25, false);
            } else {
              A.store.Bool(ptr + 32 + 68 + 0 + 28, true);
              A.store.Ref(ptr + 32 + 68 + 0 + 0, x["Manual"]["SecureHTTPProxy"]["Host"]["Active"]);
              A.store.Ref(ptr + 32 + 68 + 0 + 4, x["Manual"]["SecureHTTPProxy"]["Host"]["Effective"]);
              A.store.Ref(ptr + 32 + 68 + 0 + 8, x["Manual"]["SecureHTTPProxy"]["Host"]["UserPolicy"]);
              A.store.Ref(ptr + 32 + 68 + 0 + 12, x["Manual"]["SecureHTTPProxy"]["Host"]["DevicePolicy"]);
              A.store.Ref(ptr + 32 + 68 + 0 + 16, x["Manual"]["SecureHTTPProxy"]["Host"]["UserSetting"]);
              A.store.Ref(ptr + 32 + 68 + 0 + 20, x["Manual"]["SecureHTTPProxy"]["Host"]["SharedSetting"]);
              A.store.Bool(
                ptr + 32 + 68 + 0 + 26,
                "UserEditable" in x["Manual"]["SecureHTTPProxy"]["Host"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 68 + 0 + 24,
                x["Manual"]["SecureHTTPProxy"]["Host"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 68 + 0 + 27,
                "DeviceEditable" in x["Manual"]["SecureHTTPProxy"]["Host"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 68 + 0 + 25,
                x["Manual"]["SecureHTTPProxy"]["Host"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["Manual"]["SecureHTTPProxy"]["Port"] === "undefined") {
              A.store.Bool(ptr + 32 + 68 + 32 + 33, false);
              A.store.Bool(ptr + 32 + 68 + 32 + 26, false);
              A.store.Int32(ptr + 32 + 68 + 32 + 0, 0);
              A.store.Ref(ptr + 32 + 68 + 32 + 4, undefined);
              A.store.Bool(ptr + 32 + 68 + 32 + 27, false);
              A.store.Int32(ptr + 32 + 68 + 32 + 8, 0);
              A.store.Bool(ptr + 32 + 68 + 32 + 28, false);
              A.store.Int32(ptr + 32 + 68 + 32 + 12, 0);
              A.store.Bool(ptr + 32 + 68 + 32 + 29, false);
              A.store.Int32(ptr + 32 + 68 + 32 + 16, 0);
              A.store.Bool(ptr + 32 + 68 + 32 + 30, false);
              A.store.Int32(ptr + 32 + 68 + 32 + 20, 0);
              A.store.Bool(ptr + 32 + 68 + 32 + 31, false);
              A.store.Bool(ptr + 32 + 68 + 32 + 24, false);
              A.store.Bool(ptr + 32 + 68 + 32 + 32, false);
              A.store.Bool(ptr + 32 + 68 + 32 + 25, false);
            } else {
              A.store.Bool(ptr + 32 + 68 + 32 + 33, true);
              A.store.Bool(ptr + 32 + 68 + 32 + 26, "Active" in x["Manual"]["SecureHTTPProxy"]["Port"] ? true : false);
              A.store.Int32(
                ptr + 32 + 68 + 32 + 0,
                x["Manual"]["SecureHTTPProxy"]["Port"]["Active"] === undefined
                  ? 0
                  : (x["Manual"]["SecureHTTPProxy"]["Port"]["Active"] as number)
              );
              A.store.Ref(ptr + 32 + 68 + 32 + 4, x["Manual"]["SecureHTTPProxy"]["Port"]["Effective"]);
              A.store.Bool(
                ptr + 32 + 68 + 32 + 27,
                "UserPolicy" in x["Manual"]["SecureHTTPProxy"]["Port"] ? true : false
              );
              A.store.Int32(
                ptr + 32 + 68 + 32 + 8,
                x["Manual"]["SecureHTTPProxy"]["Port"]["UserPolicy"] === undefined
                  ? 0
                  : (x["Manual"]["SecureHTTPProxy"]["Port"]["UserPolicy"] as number)
              );
              A.store.Bool(
                ptr + 32 + 68 + 32 + 28,
                "DevicePolicy" in x["Manual"]["SecureHTTPProxy"]["Port"] ? true : false
              );
              A.store.Int32(
                ptr + 32 + 68 + 32 + 12,
                x["Manual"]["SecureHTTPProxy"]["Port"]["DevicePolicy"] === undefined
                  ? 0
                  : (x["Manual"]["SecureHTTPProxy"]["Port"]["DevicePolicy"] as number)
              );
              A.store.Bool(
                ptr + 32 + 68 + 32 + 29,
                "UserSetting" in x["Manual"]["SecureHTTPProxy"]["Port"] ? true : false
              );
              A.store.Int32(
                ptr + 32 + 68 + 32 + 16,
                x["Manual"]["SecureHTTPProxy"]["Port"]["UserSetting"] === undefined
                  ? 0
                  : (x["Manual"]["SecureHTTPProxy"]["Port"]["UserSetting"] as number)
              );
              A.store.Bool(
                ptr + 32 + 68 + 32 + 30,
                "SharedSetting" in x["Manual"]["SecureHTTPProxy"]["Port"] ? true : false
              );
              A.store.Int32(
                ptr + 32 + 68 + 32 + 20,
                x["Manual"]["SecureHTTPProxy"]["Port"]["SharedSetting"] === undefined
                  ? 0
                  : (x["Manual"]["SecureHTTPProxy"]["Port"]["SharedSetting"] as number)
              );
              A.store.Bool(
                ptr + 32 + 68 + 32 + 31,
                "UserEditable" in x["Manual"]["SecureHTTPProxy"]["Port"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 68 + 32 + 24,
                x["Manual"]["SecureHTTPProxy"]["Port"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 68 + 32 + 32,
                "DeviceEditable" in x["Manual"]["SecureHTTPProxy"]["Port"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 68 + 32 + 25,
                x["Manual"]["SecureHTTPProxy"]["Port"]["DeviceEditable"] ? true : false
              );
            }
          }

          if (typeof x["Manual"]["FTPProxy"] === "undefined") {
            A.store.Bool(ptr + 32 + 136 + 66, false);

            A.store.Bool(ptr + 32 + 136 + 0 + 28, false);
            A.store.Ref(ptr + 32 + 136 + 0 + 0, undefined);
            A.store.Ref(ptr + 32 + 136 + 0 + 4, undefined);
            A.store.Ref(ptr + 32 + 136 + 0 + 8, undefined);
            A.store.Ref(ptr + 32 + 136 + 0 + 12, undefined);
            A.store.Ref(ptr + 32 + 136 + 0 + 16, undefined);
            A.store.Ref(ptr + 32 + 136 + 0 + 20, undefined);
            A.store.Bool(ptr + 32 + 136 + 0 + 26, false);
            A.store.Bool(ptr + 32 + 136 + 0 + 24, false);
            A.store.Bool(ptr + 32 + 136 + 0 + 27, false);
            A.store.Bool(ptr + 32 + 136 + 0 + 25, false);

            A.store.Bool(ptr + 32 + 136 + 32 + 33, false);
            A.store.Bool(ptr + 32 + 136 + 32 + 26, false);
            A.store.Int32(ptr + 32 + 136 + 32 + 0, 0);
            A.store.Ref(ptr + 32 + 136 + 32 + 4, undefined);
            A.store.Bool(ptr + 32 + 136 + 32 + 27, false);
            A.store.Int32(ptr + 32 + 136 + 32 + 8, 0);
            A.store.Bool(ptr + 32 + 136 + 32 + 28, false);
            A.store.Int32(ptr + 32 + 136 + 32 + 12, 0);
            A.store.Bool(ptr + 32 + 136 + 32 + 29, false);
            A.store.Int32(ptr + 32 + 136 + 32 + 16, 0);
            A.store.Bool(ptr + 32 + 136 + 32 + 30, false);
            A.store.Int32(ptr + 32 + 136 + 32 + 20, 0);
            A.store.Bool(ptr + 32 + 136 + 32 + 31, false);
            A.store.Bool(ptr + 32 + 136 + 32 + 24, false);
            A.store.Bool(ptr + 32 + 136 + 32 + 32, false);
            A.store.Bool(ptr + 32 + 136 + 32 + 25, false);
          } else {
            A.store.Bool(ptr + 32 + 136 + 66, true);

            if (typeof x["Manual"]["FTPProxy"]["Host"] === "undefined") {
              A.store.Bool(ptr + 32 + 136 + 0 + 28, false);
              A.store.Ref(ptr + 32 + 136 + 0 + 0, undefined);
              A.store.Ref(ptr + 32 + 136 + 0 + 4, undefined);
              A.store.Ref(ptr + 32 + 136 + 0 + 8, undefined);
              A.store.Ref(ptr + 32 + 136 + 0 + 12, undefined);
              A.store.Ref(ptr + 32 + 136 + 0 + 16, undefined);
              A.store.Ref(ptr + 32 + 136 + 0 + 20, undefined);
              A.store.Bool(ptr + 32 + 136 + 0 + 26, false);
              A.store.Bool(ptr + 32 + 136 + 0 + 24, false);
              A.store.Bool(ptr + 32 + 136 + 0 + 27, false);
              A.store.Bool(ptr + 32 + 136 + 0 + 25, false);
            } else {
              A.store.Bool(ptr + 32 + 136 + 0 + 28, true);
              A.store.Ref(ptr + 32 + 136 + 0 + 0, x["Manual"]["FTPProxy"]["Host"]["Active"]);
              A.store.Ref(ptr + 32 + 136 + 0 + 4, x["Manual"]["FTPProxy"]["Host"]["Effective"]);
              A.store.Ref(ptr + 32 + 136 + 0 + 8, x["Manual"]["FTPProxy"]["Host"]["UserPolicy"]);
              A.store.Ref(ptr + 32 + 136 + 0 + 12, x["Manual"]["FTPProxy"]["Host"]["DevicePolicy"]);
              A.store.Ref(ptr + 32 + 136 + 0 + 16, x["Manual"]["FTPProxy"]["Host"]["UserSetting"]);
              A.store.Ref(ptr + 32 + 136 + 0 + 20, x["Manual"]["FTPProxy"]["Host"]["SharedSetting"]);
              A.store.Bool(ptr + 32 + 136 + 0 + 26, "UserEditable" in x["Manual"]["FTPProxy"]["Host"] ? true : false);
              A.store.Bool(ptr + 32 + 136 + 0 + 24, x["Manual"]["FTPProxy"]["Host"]["UserEditable"] ? true : false);
              A.store.Bool(ptr + 32 + 136 + 0 + 27, "DeviceEditable" in x["Manual"]["FTPProxy"]["Host"] ? true : false);
              A.store.Bool(ptr + 32 + 136 + 0 + 25, x["Manual"]["FTPProxy"]["Host"]["DeviceEditable"] ? true : false);
            }

            if (typeof x["Manual"]["FTPProxy"]["Port"] === "undefined") {
              A.store.Bool(ptr + 32 + 136 + 32 + 33, false);
              A.store.Bool(ptr + 32 + 136 + 32 + 26, false);
              A.store.Int32(ptr + 32 + 136 + 32 + 0, 0);
              A.store.Ref(ptr + 32 + 136 + 32 + 4, undefined);
              A.store.Bool(ptr + 32 + 136 + 32 + 27, false);
              A.store.Int32(ptr + 32 + 136 + 32 + 8, 0);
              A.store.Bool(ptr + 32 + 136 + 32 + 28, false);
              A.store.Int32(ptr + 32 + 136 + 32 + 12, 0);
              A.store.Bool(ptr + 32 + 136 + 32 + 29, false);
              A.store.Int32(ptr + 32 + 136 + 32 + 16, 0);
              A.store.Bool(ptr + 32 + 136 + 32 + 30, false);
              A.store.Int32(ptr + 32 + 136 + 32 + 20, 0);
              A.store.Bool(ptr + 32 + 136 + 32 + 31, false);
              A.store.Bool(ptr + 32 + 136 + 32 + 24, false);
              A.store.Bool(ptr + 32 + 136 + 32 + 32, false);
              A.store.Bool(ptr + 32 + 136 + 32 + 25, false);
            } else {
              A.store.Bool(ptr + 32 + 136 + 32 + 33, true);
              A.store.Bool(ptr + 32 + 136 + 32 + 26, "Active" in x["Manual"]["FTPProxy"]["Port"] ? true : false);
              A.store.Int32(
                ptr + 32 + 136 + 32 + 0,
                x["Manual"]["FTPProxy"]["Port"]["Active"] === undefined
                  ? 0
                  : (x["Manual"]["FTPProxy"]["Port"]["Active"] as number)
              );
              A.store.Ref(ptr + 32 + 136 + 32 + 4, x["Manual"]["FTPProxy"]["Port"]["Effective"]);
              A.store.Bool(ptr + 32 + 136 + 32 + 27, "UserPolicy" in x["Manual"]["FTPProxy"]["Port"] ? true : false);
              A.store.Int32(
                ptr + 32 + 136 + 32 + 8,
                x["Manual"]["FTPProxy"]["Port"]["UserPolicy"] === undefined
                  ? 0
                  : (x["Manual"]["FTPProxy"]["Port"]["UserPolicy"] as number)
              );
              A.store.Bool(ptr + 32 + 136 + 32 + 28, "DevicePolicy" in x["Manual"]["FTPProxy"]["Port"] ? true : false);
              A.store.Int32(
                ptr + 32 + 136 + 32 + 12,
                x["Manual"]["FTPProxy"]["Port"]["DevicePolicy"] === undefined
                  ? 0
                  : (x["Manual"]["FTPProxy"]["Port"]["DevicePolicy"] as number)
              );
              A.store.Bool(ptr + 32 + 136 + 32 + 29, "UserSetting" in x["Manual"]["FTPProxy"]["Port"] ? true : false);
              A.store.Int32(
                ptr + 32 + 136 + 32 + 16,
                x["Manual"]["FTPProxy"]["Port"]["UserSetting"] === undefined
                  ? 0
                  : (x["Manual"]["FTPProxy"]["Port"]["UserSetting"] as number)
              );
              A.store.Bool(ptr + 32 + 136 + 32 + 30, "SharedSetting" in x["Manual"]["FTPProxy"]["Port"] ? true : false);
              A.store.Int32(
                ptr + 32 + 136 + 32 + 20,
                x["Manual"]["FTPProxy"]["Port"]["SharedSetting"] === undefined
                  ? 0
                  : (x["Manual"]["FTPProxy"]["Port"]["SharedSetting"] as number)
              );
              A.store.Bool(ptr + 32 + 136 + 32 + 31, "UserEditable" in x["Manual"]["FTPProxy"]["Port"] ? true : false);
              A.store.Bool(ptr + 32 + 136 + 32 + 24, x["Manual"]["FTPProxy"]["Port"]["UserEditable"] ? true : false);
              A.store.Bool(
                ptr + 32 + 136 + 32 + 32,
                "DeviceEditable" in x["Manual"]["FTPProxy"]["Port"] ? true : false
              );
              A.store.Bool(ptr + 32 + 136 + 32 + 25, x["Manual"]["FTPProxy"]["Port"]["DeviceEditable"] ? true : false);
            }
          }

          if (typeof x["Manual"]["SOCKS"] === "undefined") {
            A.store.Bool(ptr + 32 + 204 + 66, false);

            A.store.Bool(ptr + 32 + 204 + 0 + 28, false);
            A.store.Ref(ptr + 32 + 204 + 0 + 0, undefined);
            A.store.Ref(ptr + 32 + 204 + 0 + 4, undefined);
            A.store.Ref(ptr + 32 + 204 + 0 + 8, undefined);
            A.store.Ref(ptr + 32 + 204 + 0 + 12, undefined);
            A.store.Ref(ptr + 32 + 204 + 0 + 16, undefined);
            A.store.Ref(ptr + 32 + 204 + 0 + 20, undefined);
            A.store.Bool(ptr + 32 + 204 + 0 + 26, false);
            A.store.Bool(ptr + 32 + 204 + 0 + 24, false);
            A.store.Bool(ptr + 32 + 204 + 0 + 27, false);
            A.store.Bool(ptr + 32 + 204 + 0 + 25, false);

            A.store.Bool(ptr + 32 + 204 + 32 + 33, false);
            A.store.Bool(ptr + 32 + 204 + 32 + 26, false);
            A.store.Int32(ptr + 32 + 204 + 32 + 0, 0);
            A.store.Ref(ptr + 32 + 204 + 32 + 4, undefined);
            A.store.Bool(ptr + 32 + 204 + 32 + 27, false);
            A.store.Int32(ptr + 32 + 204 + 32 + 8, 0);
            A.store.Bool(ptr + 32 + 204 + 32 + 28, false);
            A.store.Int32(ptr + 32 + 204 + 32 + 12, 0);
            A.store.Bool(ptr + 32 + 204 + 32 + 29, false);
            A.store.Int32(ptr + 32 + 204 + 32 + 16, 0);
            A.store.Bool(ptr + 32 + 204 + 32 + 30, false);
            A.store.Int32(ptr + 32 + 204 + 32 + 20, 0);
            A.store.Bool(ptr + 32 + 204 + 32 + 31, false);
            A.store.Bool(ptr + 32 + 204 + 32 + 24, false);
            A.store.Bool(ptr + 32 + 204 + 32 + 32, false);
            A.store.Bool(ptr + 32 + 204 + 32 + 25, false);
          } else {
            A.store.Bool(ptr + 32 + 204 + 66, true);

            if (typeof x["Manual"]["SOCKS"]["Host"] === "undefined") {
              A.store.Bool(ptr + 32 + 204 + 0 + 28, false);
              A.store.Ref(ptr + 32 + 204 + 0 + 0, undefined);
              A.store.Ref(ptr + 32 + 204 + 0 + 4, undefined);
              A.store.Ref(ptr + 32 + 204 + 0 + 8, undefined);
              A.store.Ref(ptr + 32 + 204 + 0 + 12, undefined);
              A.store.Ref(ptr + 32 + 204 + 0 + 16, undefined);
              A.store.Ref(ptr + 32 + 204 + 0 + 20, undefined);
              A.store.Bool(ptr + 32 + 204 + 0 + 26, false);
              A.store.Bool(ptr + 32 + 204 + 0 + 24, false);
              A.store.Bool(ptr + 32 + 204 + 0 + 27, false);
              A.store.Bool(ptr + 32 + 204 + 0 + 25, false);
            } else {
              A.store.Bool(ptr + 32 + 204 + 0 + 28, true);
              A.store.Ref(ptr + 32 + 204 + 0 + 0, x["Manual"]["SOCKS"]["Host"]["Active"]);
              A.store.Ref(ptr + 32 + 204 + 0 + 4, x["Manual"]["SOCKS"]["Host"]["Effective"]);
              A.store.Ref(ptr + 32 + 204 + 0 + 8, x["Manual"]["SOCKS"]["Host"]["UserPolicy"]);
              A.store.Ref(ptr + 32 + 204 + 0 + 12, x["Manual"]["SOCKS"]["Host"]["DevicePolicy"]);
              A.store.Ref(ptr + 32 + 204 + 0 + 16, x["Manual"]["SOCKS"]["Host"]["UserSetting"]);
              A.store.Ref(ptr + 32 + 204 + 0 + 20, x["Manual"]["SOCKS"]["Host"]["SharedSetting"]);
              A.store.Bool(ptr + 32 + 204 + 0 + 26, "UserEditable" in x["Manual"]["SOCKS"]["Host"] ? true : false);
              A.store.Bool(ptr + 32 + 204 + 0 + 24, x["Manual"]["SOCKS"]["Host"]["UserEditable"] ? true : false);
              A.store.Bool(ptr + 32 + 204 + 0 + 27, "DeviceEditable" in x["Manual"]["SOCKS"]["Host"] ? true : false);
              A.store.Bool(ptr + 32 + 204 + 0 + 25, x["Manual"]["SOCKS"]["Host"]["DeviceEditable"] ? true : false);
            }

            if (typeof x["Manual"]["SOCKS"]["Port"] === "undefined") {
              A.store.Bool(ptr + 32 + 204 + 32 + 33, false);
              A.store.Bool(ptr + 32 + 204 + 32 + 26, false);
              A.store.Int32(ptr + 32 + 204 + 32 + 0, 0);
              A.store.Ref(ptr + 32 + 204 + 32 + 4, undefined);
              A.store.Bool(ptr + 32 + 204 + 32 + 27, false);
              A.store.Int32(ptr + 32 + 204 + 32 + 8, 0);
              A.store.Bool(ptr + 32 + 204 + 32 + 28, false);
              A.store.Int32(ptr + 32 + 204 + 32 + 12, 0);
              A.store.Bool(ptr + 32 + 204 + 32 + 29, false);
              A.store.Int32(ptr + 32 + 204 + 32 + 16, 0);
              A.store.Bool(ptr + 32 + 204 + 32 + 30, false);
              A.store.Int32(ptr + 32 + 204 + 32 + 20, 0);
              A.store.Bool(ptr + 32 + 204 + 32 + 31, false);
              A.store.Bool(ptr + 32 + 204 + 32 + 24, false);
              A.store.Bool(ptr + 32 + 204 + 32 + 32, false);
              A.store.Bool(ptr + 32 + 204 + 32 + 25, false);
            } else {
              A.store.Bool(ptr + 32 + 204 + 32 + 33, true);
              A.store.Bool(ptr + 32 + 204 + 32 + 26, "Active" in x["Manual"]["SOCKS"]["Port"] ? true : false);
              A.store.Int32(
                ptr + 32 + 204 + 32 + 0,
                x["Manual"]["SOCKS"]["Port"]["Active"] === undefined
                  ? 0
                  : (x["Manual"]["SOCKS"]["Port"]["Active"] as number)
              );
              A.store.Ref(ptr + 32 + 204 + 32 + 4, x["Manual"]["SOCKS"]["Port"]["Effective"]);
              A.store.Bool(ptr + 32 + 204 + 32 + 27, "UserPolicy" in x["Manual"]["SOCKS"]["Port"] ? true : false);
              A.store.Int32(
                ptr + 32 + 204 + 32 + 8,
                x["Manual"]["SOCKS"]["Port"]["UserPolicy"] === undefined
                  ? 0
                  : (x["Manual"]["SOCKS"]["Port"]["UserPolicy"] as number)
              );
              A.store.Bool(ptr + 32 + 204 + 32 + 28, "DevicePolicy" in x["Manual"]["SOCKS"]["Port"] ? true : false);
              A.store.Int32(
                ptr + 32 + 204 + 32 + 12,
                x["Manual"]["SOCKS"]["Port"]["DevicePolicy"] === undefined
                  ? 0
                  : (x["Manual"]["SOCKS"]["Port"]["DevicePolicy"] as number)
              );
              A.store.Bool(ptr + 32 + 204 + 32 + 29, "UserSetting" in x["Manual"]["SOCKS"]["Port"] ? true : false);
              A.store.Int32(
                ptr + 32 + 204 + 32 + 16,
                x["Manual"]["SOCKS"]["Port"]["UserSetting"] === undefined
                  ? 0
                  : (x["Manual"]["SOCKS"]["Port"]["UserSetting"] as number)
              );
              A.store.Bool(ptr + 32 + 204 + 32 + 30, "SharedSetting" in x["Manual"]["SOCKS"]["Port"] ? true : false);
              A.store.Int32(
                ptr + 32 + 204 + 32 + 20,
                x["Manual"]["SOCKS"]["Port"]["SharedSetting"] === undefined
                  ? 0
                  : (x["Manual"]["SOCKS"]["Port"]["SharedSetting"] as number)
              );
              A.store.Bool(ptr + 32 + 204 + 32 + 31, "UserEditable" in x["Manual"]["SOCKS"]["Port"] ? true : false);
              A.store.Bool(ptr + 32 + 204 + 32 + 24, x["Manual"]["SOCKS"]["Port"]["UserEditable"] ? true : false);
              A.store.Bool(ptr + 32 + 204 + 32 + 32, "DeviceEditable" in x["Manual"]["SOCKS"]["Port"] ? true : false);
              A.store.Bool(ptr + 32 + 204 + 32 + 25, x["Manual"]["SOCKS"]["Port"]["DeviceEditable"] ? true : false);
            }
          }
        }

        if (typeof x["ExcludeDomains"] === "undefined") {
          A.store.Bool(ptr + 304 + 28, false);
          A.store.Ref(ptr + 304 + 0, undefined);
          A.store.Ref(ptr + 304 + 4, undefined);
          A.store.Ref(ptr + 304 + 8, undefined);
          A.store.Ref(ptr + 304 + 12, undefined);
          A.store.Ref(ptr + 304 + 16, undefined);
          A.store.Ref(ptr + 304 + 20, undefined);
          A.store.Bool(ptr + 304 + 26, false);
          A.store.Bool(ptr + 304 + 24, false);
          A.store.Bool(ptr + 304 + 27, false);
          A.store.Bool(ptr + 304 + 25, false);
        } else {
          A.store.Bool(ptr + 304 + 28, true);
          A.store.Ref(ptr + 304 + 0, x["ExcludeDomains"]["Active"]);
          A.store.Ref(ptr + 304 + 4, x["ExcludeDomains"]["Effective"]);
          A.store.Ref(ptr + 304 + 8, x["ExcludeDomains"]["UserPolicy"]);
          A.store.Ref(ptr + 304 + 12, x["ExcludeDomains"]["DevicePolicy"]);
          A.store.Ref(ptr + 304 + 16, x["ExcludeDomains"]["UserSetting"]);
          A.store.Ref(ptr + 304 + 20, x["ExcludeDomains"]["SharedSetting"]);
          A.store.Bool(ptr + 304 + 26, "UserEditable" in x["ExcludeDomains"] ? true : false);
          A.store.Bool(ptr + 304 + 24, x["ExcludeDomains"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 304 + 27, "DeviceEditable" in x["ExcludeDomains"] ? true : false);
          A.store.Bool(ptr + 304 + 25, x["ExcludeDomains"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["PAC"] === "undefined") {
          A.store.Bool(ptr + 336 + 28, false);
          A.store.Ref(ptr + 336 + 0, undefined);
          A.store.Ref(ptr + 336 + 4, undefined);
          A.store.Ref(ptr + 336 + 8, undefined);
          A.store.Ref(ptr + 336 + 12, undefined);
          A.store.Ref(ptr + 336 + 16, undefined);
          A.store.Ref(ptr + 336 + 20, undefined);
          A.store.Bool(ptr + 336 + 26, false);
          A.store.Bool(ptr + 336 + 24, false);
          A.store.Bool(ptr + 336 + 27, false);
          A.store.Bool(ptr + 336 + 25, false);
        } else {
          A.store.Bool(ptr + 336 + 28, true);
          A.store.Ref(ptr + 336 + 0, x["PAC"]["Active"]);
          A.store.Ref(ptr + 336 + 4, x["PAC"]["Effective"]);
          A.store.Ref(ptr + 336 + 8, x["PAC"]["UserPolicy"]);
          A.store.Ref(ptr + 336 + 12, x["PAC"]["DevicePolicy"]);
          A.store.Ref(ptr + 336 + 16, x["PAC"]["UserSetting"]);
          A.store.Ref(ptr + 336 + 20, x["PAC"]["SharedSetting"]);
          A.store.Bool(ptr + 336 + 26, "UserEditable" in x["PAC"] ? true : false);
          A.store.Bool(ptr + 336 + 24, x["PAC"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 336 + 27, "DeviceEditable" in x["PAC"] ? true : false);
          A.store.Bool(ptr + 336 + 25, x["PAC"]["DeviceEditable"] ? true : false);
        }
      }
    },
    "load_ManagedProxySettings": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      if (A.load.Bool(ptr + 0 + 28)) {
        x["Type"] = {};
        x["Type"]["Active"] = A.load.Enum(ptr + 0 + 0, ["Direct", "Manual", "PAC", "WPAD"]);
        x["Type"]["Effective"] = A.load.Ref(ptr + 0 + 4, undefined);
        x["Type"]["UserPolicy"] = A.load.Enum(ptr + 0 + 8, ["Direct", "Manual", "PAC", "WPAD"]);
        x["Type"]["DevicePolicy"] = A.load.Enum(ptr + 0 + 12, ["Direct", "Manual", "PAC", "WPAD"]);
        x["Type"]["UserSetting"] = A.load.Enum(ptr + 0 + 16, ["Direct", "Manual", "PAC", "WPAD"]);
        x["Type"]["SharedSetting"] = A.load.Enum(ptr + 0 + 20, ["Direct", "Manual", "PAC", "WPAD"]);
        if (A.load.Bool(ptr + 0 + 26)) {
          x["Type"]["UserEditable"] = A.load.Bool(ptr + 0 + 24);
        } else {
          delete x["Type"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 0 + 27)) {
          x["Type"]["DeviceEditable"] = A.load.Bool(ptr + 0 + 25);
        } else {
          delete x["Type"]["DeviceEditable"];
        }
      } else {
        delete x["Type"];
      }
      if (A.load.Bool(ptr + 32 + 271)) {
        x["Manual"] = {};
        if (A.load.Bool(ptr + 32 + 0 + 66)) {
          x["Manual"]["HTTPProxy"] = {};
          if (A.load.Bool(ptr + 32 + 0 + 0 + 28)) {
            x["Manual"]["HTTPProxy"]["Host"] = {};
            x["Manual"]["HTTPProxy"]["Host"]["Active"] = A.load.Ref(ptr + 32 + 0 + 0 + 0, undefined);
            x["Manual"]["HTTPProxy"]["Host"]["Effective"] = A.load.Ref(ptr + 32 + 0 + 0 + 4, undefined);
            x["Manual"]["HTTPProxy"]["Host"]["UserPolicy"] = A.load.Ref(ptr + 32 + 0 + 0 + 8, undefined);
            x["Manual"]["HTTPProxy"]["Host"]["DevicePolicy"] = A.load.Ref(ptr + 32 + 0 + 0 + 12, undefined);
            x["Manual"]["HTTPProxy"]["Host"]["UserSetting"] = A.load.Ref(ptr + 32 + 0 + 0 + 16, undefined);
            x["Manual"]["HTTPProxy"]["Host"]["SharedSetting"] = A.load.Ref(ptr + 32 + 0 + 0 + 20, undefined);
            if (A.load.Bool(ptr + 32 + 0 + 0 + 26)) {
              x["Manual"]["HTTPProxy"]["Host"]["UserEditable"] = A.load.Bool(ptr + 32 + 0 + 0 + 24);
            } else {
              delete x["Manual"]["HTTPProxy"]["Host"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 32 + 0 + 0 + 27)) {
              x["Manual"]["HTTPProxy"]["Host"]["DeviceEditable"] = A.load.Bool(ptr + 32 + 0 + 0 + 25);
            } else {
              delete x["Manual"]["HTTPProxy"]["Host"]["DeviceEditable"];
            }
          } else {
            delete x["Manual"]["HTTPProxy"]["Host"];
          }
          if (A.load.Bool(ptr + 32 + 0 + 32 + 33)) {
            x["Manual"]["HTTPProxy"]["Port"] = {};
            if (A.load.Bool(ptr + 32 + 0 + 32 + 26)) {
              x["Manual"]["HTTPProxy"]["Port"]["Active"] = A.load.Int32(ptr + 32 + 0 + 32 + 0);
            } else {
              delete x["Manual"]["HTTPProxy"]["Port"]["Active"];
            }
            x["Manual"]["HTTPProxy"]["Port"]["Effective"] = A.load.Ref(ptr + 32 + 0 + 32 + 4, undefined);
            if (A.load.Bool(ptr + 32 + 0 + 32 + 27)) {
              x["Manual"]["HTTPProxy"]["Port"]["UserPolicy"] = A.load.Int32(ptr + 32 + 0 + 32 + 8);
            } else {
              delete x["Manual"]["HTTPProxy"]["Port"]["UserPolicy"];
            }
            if (A.load.Bool(ptr + 32 + 0 + 32 + 28)) {
              x["Manual"]["HTTPProxy"]["Port"]["DevicePolicy"] = A.load.Int32(ptr + 32 + 0 + 32 + 12);
            } else {
              delete x["Manual"]["HTTPProxy"]["Port"]["DevicePolicy"];
            }
            if (A.load.Bool(ptr + 32 + 0 + 32 + 29)) {
              x["Manual"]["HTTPProxy"]["Port"]["UserSetting"] = A.load.Int32(ptr + 32 + 0 + 32 + 16);
            } else {
              delete x["Manual"]["HTTPProxy"]["Port"]["UserSetting"];
            }
            if (A.load.Bool(ptr + 32 + 0 + 32 + 30)) {
              x["Manual"]["HTTPProxy"]["Port"]["SharedSetting"] = A.load.Int32(ptr + 32 + 0 + 32 + 20);
            } else {
              delete x["Manual"]["HTTPProxy"]["Port"]["SharedSetting"];
            }
            if (A.load.Bool(ptr + 32 + 0 + 32 + 31)) {
              x["Manual"]["HTTPProxy"]["Port"]["UserEditable"] = A.load.Bool(ptr + 32 + 0 + 32 + 24);
            } else {
              delete x["Manual"]["HTTPProxy"]["Port"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 32 + 0 + 32 + 32)) {
              x["Manual"]["HTTPProxy"]["Port"]["DeviceEditable"] = A.load.Bool(ptr + 32 + 0 + 32 + 25);
            } else {
              delete x["Manual"]["HTTPProxy"]["Port"]["DeviceEditable"];
            }
          } else {
            delete x["Manual"]["HTTPProxy"]["Port"];
          }
        } else {
          delete x["Manual"]["HTTPProxy"];
        }
        if (A.load.Bool(ptr + 32 + 68 + 66)) {
          x["Manual"]["SecureHTTPProxy"] = {};
          if (A.load.Bool(ptr + 32 + 68 + 0 + 28)) {
            x["Manual"]["SecureHTTPProxy"]["Host"] = {};
            x["Manual"]["SecureHTTPProxy"]["Host"]["Active"] = A.load.Ref(ptr + 32 + 68 + 0 + 0, undefined);
            x["Manual"]["SecureHTTPProxy"]["Host"]["Effective"] = A.load.Ref(ptr + 32 + 68 + 0 + 4, undefined);
            x["Manual"]["SecureHTTPProxy"]["Host"]["UserPolicy"] = A.load.Ref(ptr + 32 + 68 + 0 + 8, undefined);
            x["Manual"]["SecureHTTPProxy"]["Host"]["DevicePolicy"] = A.load.Ref(ptr + 32 + 68 + 0 + 12, undefined);
            x["Manual"]["SecureHTTPProxy"]["Host"]["UserSetting"] = A.load.Ref(ptr + 32 + 68 + 0 + 16, undefined);
            x["Manual"]["SecureHTTPProxy"]["Host"]["SharedSetting"] = A.load.Ref(ptr + 32 + 68 + 0 + 20, undefined);
            if (A.load.Bool(ptr + 32 + 68 + 0 + 26)) {
              x["Manual"]["SecureHTTPProxy"]["Host"]["UserEditable"] = A.load.Bool(ptr + 32 + 68 + 0 + 24);
            } else {
              delete x["Manual"]["SecureHTTPProxy"]["Host"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 32 + 68 + 0 + 27)) {
              x["Manual"]["SecureHTTPProxy"]["Host"]["DeviceEditable"] = A.load.Bool(ptr + 32 + 68 + 0 + 25);
            } else {
              delete x["Manual"]["SecureHTTPProxy"]["Host"]["DeviceEditable"];
            }
          } else {
            delete x["Manual"]["SecureHTTPProxy"]["Host"];
          }
          if (A.load.Bool(ptr + 32 + 68 + 32 + 33)) {
            x["Manual"]["SecureHTTPProxy"]["Port"] = {};
            if (A.load.Bool(ptr + 32 + 68 + 32 + 26)) {
              x["Manual"]["SecureHTTPProxy"]["Port"]["Active"] = A.load.Int32(ptr + 32 + 68 + 32 + 0);
            } else {
              delete x["Manual"]["SecureHTTPProxy"]["Port"]["Active"];
            }
            x["Manual"]["SecureHTTPProxy"]["Port"]["Effective"] = A.load.Ref(ptr + 32 + 68 + 32 + 4, undefined);
            if (A.load.Bool(ptr + 32 + 68 + 32 + 27)) {
              x["Manual"]["SecureHTTPProxy"]["Port"]["UserPolicy"] = A.load.Int32(ptr + 32 + 68 + 32 + 8);
            } else {
              delete x["Manual"]["SecureHTTPProxy"]["Port"]["UserPolicy"];
            }
            if (A.load.Bool(ptr + 32 + 68 + 32 + 28)) {
              x["Manual"]["SecureHTTPProxy"]["Port"]["DevicePolicy"] = A.load.Int32(ptr + 32 + 68 + 32 + 12);
            } else {
              delete x["Manual"]["SecureHTTPProxy"]["Port"]["DevicePolicy"];
            }
            if (A.load.Bool(ptr + 32 + 68 + 32 + 29)) {
              x["Manual"]["SecureHTTPProxy"]["Port"]["UserSetting"] = A.load.Int32(ptr + 32 + 68 + 32 + 16);
            } else {
              delete x["Manual"]["SecureHTTPProxy"]["Port"]["UserSetting"];
            }
            if (A.load.Bool(ptr + 32 + 68 + 32 + 30)) {
              x["Manual"]["SecureHTTPProxy"]["Port"]["SharedSetting"] = A.load.Int32(ptr + 32 + 68 + 32 + 20);
            } else {
              delete x["Manual"]["SecureHTTPProxy"]["Port"]["SharedSetting"];
            }
            if (A.load.Bool(ptr + 32 + 68 + 32 + 31)) {
              x["Manual"]["SecureHTTPProxy"]["Port"]["UserEditable"] = A.load.Bool(ptr + 32 + 68 + 32 + 24);
            } else {
              delete x["Manual"]["SecureHTTPProxy"]["Port"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 32 + 68 + 32 + 32)) {
              x["Manual"]["SecureHTTPProxy"]["Port"]["DeviceEditable"] = A.load.Bool(ptr + 32 + 68 + 32 + 25);
            } else {
              delete x["Manual"]["SecureHTTPProxy"]["Port"]["DeviceEditable"];
            }
          } else {
            delete x["Manual"]["SecureHTTPProxy"]["Port"];
          }
        } else {
          delete x["Manual"]["SecureHTTPProxy"];
        }
        if (A.load.Bool(ptr + 32 + 136 + 66)) {
          x["Manual"]["FTPProxy"] = {};
          if (A.load.Bool(ptr + 32 + 136 + 0 + 28)) {
            x["Manual"]["FTPProxy"]["Host"] = {};
            x["Manual"]["FTPProxy"]["Host"]["Active"] = A.load.Ref(ptr + 32 + 136 + 0 + 0, undefined);
            x["Manual"]["FTPProxy"]["Host"]["Effective"] = A.load.Ref(ptr + 32 + 136 + 0 + 4, undefined);
            x["Manual"]["FTPProxy"]["Host"]["UserPolicy"] = A.load.Ref(ptr + 32 + 136 + 0 + 8, undefined);
            x["Manual"]["FTPProxy"]["Host"]["DevicePolicy"] = A.load.Ref(ptr + 32 + 136 + 0 + 12, undefined);
            x["Manual"]["FTPProxy"]["Host"]["UserSetting"] = A.load.Ref(ptr + 32 + 136 + 0 + 16, undefined);
            x["Manual"]["FTPProxy"]["Host"]["SharedSetting"] = A.load.Ref(ptr + 32 + 136 + 0 + 20, undefined);
            if (A.load.Bool(ptr + 32 + 136 + 0 + 26)) {
              x["Manual"]["FTPProxy"]["Host"]["UserEditable"] = A.load.Bool(ptr + 32 + 136 + 0 + 24);
            } else {
              delete x["Manual"]["FTPProxy"]["Host"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 32 + 136 + 0 + 27)) {
              x["Manual"]["FTPProxy"]["Host"]["DeviceEditable"] = A.load.Bool(ptr + 32 + 136 + 0 + 25);
            } else {
              delete x["Manual"]["FTPProxy"]["Host"]["DeviceEditable"];
            }
          } else {
            delete x["Manual"]["FTPProxy"]["Host"];
          }
          if (A.load.Bool(ptr + 32 + 136 + 32 + 33)) {
            x["Manual"]["FTPProxy"]["Port"] = {};
            if (A.load.Bool(ptr + 32 + 136 + 32 + 26)) {
              x["Manual"]["FTPProxy"]["Port"]["Active"] = A.load.Int32(ptr + 32 + 136 + 32 + 0);
            } else {
              delete x["Manual"]["FTPProxy"]["Port"]["Active"];
            }
            x["Manual"]["FTPProxy"]["Port"]["Effective"] = A.load.Ref(ptr + 32 + 136 + 32 + 4, undefined);
            if (A.load.Bool(ptr + 32 + 136 + 32 + 27)) {
              x["Manual"]["FTPProxy"]["Port"]["UserPolicy"] = A.load.Int32(ptr + 32 + 136 + 32 + 8);
            } else {
              delete x["Manual"]["FTPProxy"]["Port"]["UserPolicy"];
            }
            if (A.load.Bool(ptr + 32 + 136 + 32 + 28)) {
              x["Manual"]["FTPProxy"]["Port"]["DevicePolicy"] = A.load.Int32(ptr + 32 + 136 + 32 + 12);
            } else {
              delete x["Manual"]["FTPProxy"]["Port"]["DevicePolicy"];
            }
            if (A.load.Bool(ptr + 32 + 136 + 32 + 29)) {
              x["Manual"]["FTPProxy"]["Port"]["UserSetting"] = A.load.Int32(ptr + 32 + 136 + 32 + 16);
            } else {
              delete x["Manual"]["FTPProxy"]["Port"]["UserSetting"];
            }
            if (A.load.Bool(ptr + 32 + 136 + 32 + 30)) {
              x["Manual"]["FTPProxy"]["Port"]["SharedSetting"] = A.load.Int32(ptr + 32 + 136 + 32 + 20);
            } else {
              delete x["Manual"]["FTPProxy"]["Port"]["SharedSetting"];
            }
            if (A.load.Bool(ptr + 32 + 136 + 32 + 31)) {
              x["Manual"]["FTPProxy"]["Port"]["UserEditable"] = A.load.Bool(ptr + 32 + 136 + 32 + 24);
            } else {
              delete x["Manual"]["FTPProxy"]["Port"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 32 + 136 + 32 + 32)) {
              x["Manual"]["FTPProxy"]["Port"]["DeviceEditable"] = A.load.Bool(ptr + 32 + 136 + 32 + 25);
            } else {
              delete x["Manual"]["FTPProxy"]["Port"]["DeviceEditable"];
            }
          } else {
            delete x["Manual"]["FTPProxy"]["Port"];
          }
        } else {
          delete x["Manual"]["FTPProxy"];
        }
        if (A.load.Bool(ptr + 32 + 204 + 66)) {
          x["Manual"]["SOCKS"] = {};
          if (A.load.Bool(ptr + 32 + 204 + 0 + 28)) {
            x["Manual"]["SOCKS"]["Host"] = {};
            x["Manual"]["SOCKS"]["Host"]["Active"] = A.load.Ref(ptr + 32 + 204 + 0 + 0, undefined);
            x["Manual"]["SOCKS"]["Host"]["Effective"] = A.load.Ref(ptr + 32 + 204 + 0 + 4, undefined);
            x["Manual"]["SOCKS"]["Host"]["UserPolicy"] = A.load.Ref(ptr + 32 + 204 + 0 + 8, undefined);
            x["Manual"]["SOCKS"]["Host"]["DevicePolicy"] = A.load.Ref(ptr + 32 + 204 + 0 + 12, undefined);
            x["Manual"]["SOCKS"]["Host"]["UserSetting"] = A.load.Ref(ptr + 32 + 204 + 0 + 16, undefined);
            x["Manual"]["SOCKS"]["Host"]["SharedSetting"] = A.load.Ref(ptr + 32 + 204 + 0 + 20, undefined);
            if (A.load.Bool(ptr + 32 + 204 + 0 + 26)) {
              x["Manual"]["SOCKS"]["Host"]["UserEditable"] = A.load.Bool(ptr + 32 + 204 + 0 + 24);
            } else {
              delete x["Manual"]["SOCKS"]["Host"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 32 + 204 + 0 + 27)) {
              x["Manual"]["SOCKS"]["Host"]["DeviceEditable"] = A.load.Bool(ptr + 32 + 204 + 0 + 25);
            } else {
              delete x["Manual"]["SOCKS"]["Host"]["DeviceEditable"];
            }
          } else {
            delete x["Manual"]["SOCKS"]["Host"];
          }
          if (A.load.Bool(ptr + 32 + 204 + 32 + 33)) {
            x["Manual"]["SOCKS"]["Port"] = {};
            if (A.load.Bool(ptr + 32 + 204 + 32 + 26)) {
              x["Manual"]["SOCKS"]["Port"]["Active"] = A.load.Int32(ptr + 32 + 204 + 32 + 0);
            } else {
              delete x["Manual"]["SOCKS"]["Port"]["Active"];
            }
            x["Manual"]["SOCKS"]["Port"]["Effective"] = A.load.Ref(ptr + 32 + 204 + 32 + 4, undefined);
            if (A.load.Bool(ptr + 32 + 204 + 32 + 27)) {
              x["Manual"]["SOCKS"]["Port"]["UserPolicy"] = A.load.Int32(ptr + 32 + 204 + 32 + 8);
            } else {
              delete x["Manual"]["SOCKS"]["Port"]["UserPolicy"];
            }
            if (A.load.Bool(ptr + 32 + 204 + 32 + 28)) {
              x["Manual"]["SOCKS"]["Port"]["DevicePolicy"] = A.load.Int32(ptr + 32 + 204 + 32 + 12);
            } else {
              delete x["Manual"]["SOCKS"]["Port"]["DevicePolicy"];
            }
            if (A.load.Bool(ptr + 32 + 204 + 32 + 29)) {
              x["Manual"]["SOCKS"]["Port"]["UserSetting"] = A.load.Int32(ptr + 32 + 204 + 32 + 16);
            } else {
              delete x["Manual"]["SOCKS"]["Port"]["UserSetting"];
            }
            if (A.load.Bool(ptr + 32 + 204 + 32 + 30)) {
              x["Manual"]["SOCKS"]["Port"]["SharedSetting"] = A.load.Int32(ptr + 32 + 204 + 32 + 20);
            } else {
              delete x["Manual"]["SOCKS"]["Port"]["SharedSetting"];
            }
            if (A.load.Bool(ptr + 32 + 204 + 32 + 31)) {
              x["Manual"]["SOCKS"]["Port"]["UserEditable"] = A.load.Bool(ptr + 32 + 204 + 32 + 24);
            } else {
              delete x["Manual"]["SOCKS"]["Port"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 32 + 204 + 32 + 32)) {
              x["Manual"]["SOCKS"]["Port"]["DeviceEditable"] = A.load.Bool(ptr + 32 + 204 + 32 + 25);
            } else {
              delete x["Manual"]["SOCKS"]["Port"]["DeviceEditable"];
            }
          } else {
            delete x["Manual"]["SOCKS"]["Port"];
          }
        } else {
          delete x["Manual"]["SOCKS"];
        }
      } else {
        delete x["Manual"];
      }
      if (A.load.Bool(ptr + 304 + 28)) {
        x["ExcludeDomains"] = {};
        x["ExcludeDomains"]["Active"] = A.load.Ref(ptr + 304 + 0, undefined);
        x["ExcludeDomains"]["Effective"] = A.load.Ref(ptr + 304 + 4, undefined);
        x["ExcludeDomains"]["UserPolicy"] = A.load.Ref(ptr + 304 + 8, undefined);
        x["ExcludeDomains"]["DevicePolicy"] = A.load.Ref(ptr + 304 + 12, undefined);
        x["ExcludeDomains"]["UserSetting"] = A.load.Ref(ptr + 304 + 16, undefined);
        x["ExcludeDomains"]["SharedSetting"] = A.load.Ref(ptr + 304 + 20, undefined);
        if (A.load.Bool(ptr + 304 + 26)) {
          x["ExcludeDomains"]["UserEditable"] = A.load.Bool(ptr + 304 + 24);
        } else {
          delete x["ExcludeDomains"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 304 + 27)) {
          x["ExcludeDomains"]["DeviceEditable"] = A.load.Bool(ptr + 304 + 25);
        } else {
          delete x["ExcludeDomains"]["DeviceEditable"];
        }
      } else {
        delete x["ExcludeDomains"];
      }
      if (A.load.Bool(ptr + 336 + 28)) {
        x["PAC"] = {};
        x["PAC"]["Active"] = A.load.Ref(ptr + 336 + 0, undefined);
        x["PAC"]["Effective"] = A.load.Ref(ptr + 336 + 4, undefined);
        x["PAC"]["UserPolicy"] = A.load.Ref(ptr + 336 + 8, undefined);
        x["PAC"]["DevicePolicy"] = A.load.Ref(ptr + 336 + 12, undefined);
        x["PAC"]["UserSetting"] = A.load.Ref(ptr + 336 + 16, undefined);
        x["PAC"]["SharedSetting"] = A.load.Ref(ptr + 336 + 20, undefined);
        if (A.load.Bool(ptr + 336 + 26)) {
          x["PAC"]["UserEditable"] = A.load.Bool(ptr + 336 + 24);
        } else {
          delete x["PAC"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 336 + 27)) {
          x["PAC"]["DeviceEditable"] = A.load.Bool(ptr + 336 + 25);
        } else {
          delete x["PAC"]["DeviceEditable"];
        }
      } else {
        delete x["PAC"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_ManagedIPConfigProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 193, false);

        A.store.Bool(ptr + 0 + 28, false);
        A.store.Ref(ptr + 0 + 0, undefined);
        A.store.Ref(ptr + 0 + 4, undefined);
        A.store.Ref(ptr + 0 + 8, undefined);
        A.store.Ref(ptr + 0 + 12, undefined);
        A.store.Ref(ptr + 0 + 16, undefined);
        A.store.Ref(ptr + 0 + 20, undefined);
        A.store.Bool(ptr + 0 + 26, false);
        A.store.Bool(ptr + 0 + 24, false);
        A.store.Bool(ptr + 0 + 27, false);
        A.store.Bool(ptr + 0 + 25, false);

        A.store.Bool(ptr + 32 + 28, false);
        A.store.Ref(ptr + 32 + 0, undefined);
        A.store.Ref(ptr + 32 + 4, undefined);
        A.store.Ref(ptr + 32 + 8, undefined);
        A.store.Ref(ptr + 32 + 12, undefined);
        A.store.Ref(ptr + 32 + 16, undefined);
        A.store.Ref(ptr + 32 + 20, undefined);
        A.store.Bool(ptr + 32 + 26, false);
        A.store.Bool(ptr + 32 + 24, false);
        A.store.Bool(ptr + 32 + 27, false);
        A.store.Bool(ptr + 32 + 25, false);

        A.store.Bool(ptr + 64 + 28, false);
        A.store.Ref(ptr + 64 + 0, undefined);
        A.store.Ref(ptr + 64 + 4, undefined);
        A.store.Ref(ptr + 64 + 8, undefined);
        A.store.Ref(ptr + 64 + 12, undefined);
        A.store.Ref(ptr + 64 + 16, undefined);
        A.store.Ref(ptr + 64 + 20, undefined);
        A.store.Bool(ptr + 64 + 26, false);
        A.store.Bool(ptr + 64 + 24, false);
        A.store.Bool(ptr + 64 + 27, false);
        A.store.Bool(ptr + 64 + 25, false);

        A.store.Bool(ptr + 96 + 33, false);
        A.store.Bool(ptr + 96 + 26, false);
        A.store.Int32(ptr + 96 + 0, 0);
        A.store.Ref(ptr + 96 + 4, undefined);
        A.store.Bool(ptr + 96 + 27, false);
        A.store.Int32(ptr + 96 + 8, 0);
        A.store.Bool(ptr + 96 + 28, false);
        A.store.Int32(ptr + 96 + 12, 0);
        A.store.Bool(ptr + 96 + 29, false);
        A.store.Int32(ptr + 96 + 16, 0);
        A.store.Bool(ptr + 96 + 30, false);
        A.store.Int32(ptr + 96 + 20, 0);
        A.store.Bool(ptr + 96 + 31, false);
        A.store.Bool(ptr + 96 + 24, false);
        A.store.Bool(ptr + 96 + 32, false);
        A.store.Bool(ptr + 96 + 25, false);

        A.store.Bool(ptr + 132 + 28, false);
        A.store.Ref(ptr + 132 + 0, undefined);
        A.store.Ref(ptr + 132 + 4, undefined);
        A.store.Ref(ptr + 132 + 8, undefined);
        A.store.Ref(ptr + 132 + 12, undefined);
        A.store.Ref(ptr + 132 + 16, undefined);
        A.store.Ref(ptr + 132 + 20, undefined);
        A.store.Bool(ptr + 132 + 26, false);
        A.store.Bool(ptr + 132 + 24, false);
        A.store.Bool(ptr + 132 + 27, false);
        A.store.Bool(ptr + 132 + 25, false);

        A.store.Bool(ptr + 164 + 28, false);
        A.store.Ref(ptr + 164 + 0, undefined);
        A.store.Ref(ptr + 164 + 4, undefined);
        A.store.Ref(ptr + 164 + 8, undefined);
        A.store.Ref(ptr + 164 + 12, undefined);
        A.store.Ref(ptr + 164 + 16, undefined);
        A.store.Ref(ptr + 164 + 20, undefined);
        A.store.Bool(ptr + 164 + 26, false);
        A.store.Bool(ptr + 164 + 24, false);
        A.store.Bool(ptr + 164 + 27, false);
        A.store.Bool(ptr + 164 + 25, false);
      } else {
        A.store.Bool(ptr + 193, true);

        if (typeof x["Gateway"] === "undefined") {
          A.store.Bool(ptr + 0 + 28, false);
          A.store.Ref(ptr + 0 + 0, undefined);
          A.store.Ref(ptr + 0 + 4, undefined);
          A.store.Ref(ptr + 0 + 8, undefined);
          A.store.Ref(ptr + 0 + 12, undefined);
          A.store.Ref(ptr + 0 + 16, undefined);
          A.store.Ref(ptr + 0 + 20, undefined);
          A.store.Bool(ptr + 0 + 26, false);
          A.store.Bool(ptr + 0 + 24, false);
          A.store.Bool(ptr + 0 + 27, false);
          A.store.Bool(ptr + 0 + 25, false);
        } else {
          A.store.Bool(ptr + 0 + 28, true);
          A.store.Ref(ptr + 0 + 0, x["Gateway"]["Active"]);
          A.store.Ref(ptr + 0 + 4, x["Gateway"]["Effective"]);
          A.store.Ref(ptr + 0 + 8, x["Gateway"]["UserPolicy"]);
          A.store.Ref(ptr + 0 + 12, x["Gateway"]["DevicePolicy"]);
          A.store.Ref(ptr + 0 + 16, x["Gateway"]["UserSetting"]);
          A.store.Ref(ptr + 0 + 20, x["Gateway"]["SharedSetting"]);
          A.store.Bool(ptr + 0 + 26, "UserEditable" in x["Gateway"] ? true : false);
          A.store.Bool(ptr + 0 + 24, x["Gateway"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 0 + 27, "DeviceEditable" in x["Gateway"] ? true : false);
          A.store.Bool(ptr + 0 + 25, x["Gateway"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["IPAddress"] === "undefined") {
          A.store.Bool(ptr + 32 + 28, false);
          A.store.Ref(ptr + 32 + 0, undefined);
          A.store.Ref(ptr + 32 + 4, undefined);
          A.store.Ref(ptr + 32 + 8, undefined);
          A.store.Ref(ptr + 32 + 12, undefined);
          A.store.Ref(ptr + 32 + 16, undefined);
          A.store.Ref(ptr + 32 + 20, undefined);
          A.store.Bool(ptr + 32 + 26, false);
          A.store.Bool(ptr + 32 + 24, false);
          A.store.Bool(ptr + 32 + 27, false);
          A.store.Bool(ptr + 32 + 25, false);
        } else {
          A.store.Bool(ptr + 32 + 28, true);
          A.store.Ref(ptr + 32 + 0, x["IPAddress"]["Active"]);
          A.store.Ref(ptr + 32 + 4, x["IPAddress"]["Effective"]);
          A.store.Ref(ptr + 32 + 8, x["IPAddress"]["UserPolicy"]);
          A.store.Ref(ptr + 32 + 12, x["IPAddress"]["DevicePolicy"]);
          A.store.Ref(ptr + 32 + 16, x["IPAddress"]["UserSetting"]);
          A.store.Ref(ptr + 32 + 20, x["IPAddress"]["SharedSetting"]);
          A.store.Bool(ptr + 32 + 26, "UserEditable" in x["IPAddress"] ? true : false);
          A.store.Bool(ptr + 32 + 24, x["IPAddress"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 32 + 27, "DeviceEditable" in x["IPAddress"] ? true : false);
          A.store.Bool(ptr + 32 + 25, x["IPAddress"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["NameServers"] === "undefined") {
          A.store.Bool(ptr + 64 + 28, false);
          A.store.Ref(ptr + 64 + 0, undefined);
          A.store.Ref(ptr + 64 + 4, undefined);
          A.store.Ref(ptr + 64 + 8, undefined);
          A.store.Ref(ptr + 64 + 12, undefined);
          A.store.Ref(ptr + 64 + 16, undefined);
          A.store.Ref(ptr + 64 + 20, undefined);
          A.store.Bool(ptr + 64 + 26, false);
          A.store.Bool(ptr + 64 + 24, false);
          A.store.Bool(ptr + 64 + 27, false);
          A.store.Bool(ptr + 64 + 25, false);
        } else {
          A.store.Bool(ptr + 64 + 28, true);
          A.store.Ref(ptr + 64 + 0, x["NameServers"]["Active"]);
          A.store.Ref(ptr + 64 + 4, x["NameServers"]["Effective"]);
          A.store.Ref(ptr + 64 + 8, x["NameServers"]["UserPolicy"]);
          A.store.Ref(ptr + 64 + 12, x["NameServers"]["DevicePolicy"]);
          A.store.Ref(ptr + 64 + 16, x["NameServers"]["UserSetting"]);
          A.store.Ref(ptr + 64 + 20, x["NameServers"]["SharedSetting"]);
          A.store.Bool(ptr + 64 + 26, "UserEditable" in x["NameServers"] ? true : false);
          A.store.Bool(ptr + 64 + 24, x["NameServers"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 64 + 27, "DeviceEditable" in x["NameServers"] ? true : false);
          A.store.Bool(ptr + 64 + 25, x["NameServers"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["RoutingPrefix"] === "undefined") {
          A.store.Bool(ptr + 96 + 33, false);
          A.store.Bool(ptr + 96 + 26, false);
          A.store.Int32(ptr + 96 + 0, 0);
          A.store.Ref(ptr + 96 + 4, undefined);
          A.store.Bool(ptr + 96 + 27, false);
          A.store.Int32(ptr + 96 + 8, 0);
          A.store.Bool(ptr + 96 + 28, false);
          A.store.Int32(ptr + 96 + 12, 0);
          A.store.Bool(ptr + 96 + 29, false);
          A.store.Int32(ptr + 96 + 16, 0);
          A.store.Bool(ptr + 96 + 30, false);
          A.store.Int32(ptr + 96 + 20, 0);
          A.store.Bool(ptr + 96 + 31, false);
          A.store.Bool(ptr + 96 + 24, false);
          A.store.Bool(ptr + 96 + 32, false);
          A.store.Bool(ptr + 96 + 25, false);
        } else {
          A.store.Bool(ptr + 96 + 33, true);
          A.store.Bool(ptr + 96 + 26, "Active" in x["RoutingPrefix"] ? true : false);
          A.store.Int32(
            ptr + 96 + 0,
            x["RoutingPrefix"]["Active"] === undefined ? 0 : (x["RoutingPrefix"]["Active"] as number)
          );
          A.store.Ref(ptr + 96 + 4, x["RoutingPrefix"]["Effective"]);
          A.store.Bool(ptr + 96 + 27, "UserPolicy" in x["RoutingPrefix"] ? true : false);
          A.store.Int32(
            ptr + 96 + 8,
            x["RoutingPrefix"]["UserPolicy"] === undefined ? 0 : (x["RoutingPrefix"]["UserPolicy"] as number)
          );
          A.store.Bool(ptr + 96 + 28, "DevicePolicy" in x["RoutingPrefix"] ? true : false);
          A.store.Int32(
            ptr + 96 + 12,
            x["RoutingPrefix"]["DevicePolicy"] === undefined ? 0 : (x["RoutingPrefix"]["DevicePolicy"] as number)
          );
          A.store.Bool(ptr + 96 + 29, "UserSetting" in x["RoutingPrefix"] ? true : false);
          A.store.Int32(
            ptr + 96 + 16,
            x["RoutingPrefix"]["UserSetting"] === undefined ? 0 : (x["RoutingPrefix"]["UserSetting"] as number)
          );
          A.store.Bool(ptr + 96 + 30, "SharedSetting" in x["RoutingPrefix"] ? true : false);
          A.store.Int32(
            ptr + 96 + 20,
            x["RoutingPrefix"]["SharedSetting"] === undefined ? 0 : (x["RoutingPrefix"]["SharedSetting"] as number)
          );
          A.store.Bool(ptr + 96 + 31, "UserEditable" in x["RoutingPrefix"] ? true : false);
          A.store.Bool(ptr + 96 + 24, x["RoutingPrefix"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 96 + 32, "DeviceEditable" in x["RoutingPrefix"] ? true : false);
          A.store.Bool(ptr + 96 + 25, x["RoutingPrefix"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["Type"] === "undefined") {
          A.store.Bool(ptr + 132 + 28, false);
          A.store.Ref(ptr + 132 + 0, undefined);
          A.store.Ref(ptr + 132 + 4, undefined);
          A.store.Ref(ptr + 132 + 8, undefined);
          A.store.Ref(ptr + 132 + 12, undefined);
          A.store.Ref(ptr + 132 + 16, undefined);
          A.store.Ref(ptr + 132 + 20, undefined);
          A.store.Bool(ptr + 132 + 26, false);
          A.store.Bool(ptr + 132 + 24, false);
          A.store.Bool(ptr + 132 + 27, false);
          A.store.Bool(ptr + 132 + 25, false);
        } else {
          A.store.Bool(ptr + 132 + 28, true);
          A.store.Ref(ptr + 132 + 0, x["Type"]["Active"]);
          A.store.Ref(ptr + 132 + 4, x["Type"]["Effective"]);
          A.store.Ref(ptr + 132 + 8, x["Type"]["UserPolicy"]);
          A.store.Ref(ptr + 132 + 12, x["Type"]["DevicePolicy"]);
          A.store.Ref(ptr + 132 + 16, x["Type"]["UserSetting"]);
          A.store.Ref(ptr + 132 + 20, x["Type"]["SharedSetting"]);
          A.store.Bool(ptr + 132 + 26, "UserEditable" in x["Type"] ? true : false);
          A.store.Bool(ptr + 132 + 24, x["Type"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 132 + 27, "DeviceEditable" in x["Type"] ? true : false);
          A.store.Bool(ptr + 132 + 25, x["Type"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["WebProxyAutoDiscoveryUrl"] === "undefined") {
          A.store.Bool(ptr + 164 + 28, false);
          A.store.Ref(ptr + 164 + 0, undefined);
          A.store.Ref(ptr + 164 + 4, undefined);
          A.store.Ref(ptr + 164 + 8, undefined);
          A.store.Ref(ptr + 164 + 12, undefined);
          A.store.Ref(ptr + 164 + 16, undefined);
          A.store.Ref(ptr + 164 + 20, undefined);
          A.store.Bool(ptr + 164 + 26, false);
          A.store.Bool(ptr + 164 + 24, false);
          A.store.Bool(ptr + 164 + 27, false);
          A.store.Bool(ptr + 164 + 25, false);
        } else {
          A.store.Bool(ptr + 164 + 28, true);
          A.store.Ref(ptr + 164 + 0, x["WebProxyAutoDiscoveryUrl"]["Active"]);
          A.store.Ref(ptr + 164 + 4, x["WebProxyAutoDiscoveryUrl"]["Effective"]);
          A.store.Ref(ptr + 164 + 8, x["WebProxyAutoDiscoveryUrl"]["UserPolicy"]);
          A.store.Ref(ptr + 164 + 12, x["WebProxyAutoDiscoveryUrl"]["DevicePolicy"]);
          A.store.Ref(ptr + 164 + 16, x["WebProxyAutoDiscoveryUrl"]["UserSetting"]);
          A.store.Ref(ptr + 164 + 20, x["WebProxyAutoDiscoveryUrl"]["SharedSetting"]);
          A.store.Bool(ptr + 164 + 26, "UserEditable" in x["WebProxyAutoDiscoveryUrl"] ? true : false);
          A.store.Bool(ptr + 164 + 24, x["WebProxyAutoDiscoveryUrl"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 164 + 27, "DeviceEditable" in x["WebProxyAutoDiscoveryUrl"] ? true : false);
          A.store.Bool(ptr + 164 + 25, x["WebProxyAutoDiscoveryUrl"]["DeviceEditable"] ? true : false);
        }
      }
    },
    "load_ManagedIPConfigProperties": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      if (A.load.Bool(ptr + 0 + 28)) {
        x["Gateway"] = {};
        x["Gateway"]["Active"] = A.load.Ref(ptr + 0 + 0, undefined);
        x["Gateway"]["Effective"] = A.load.Ref(ptr + 0 + 4, undefined);
        x["Gateway"]["UserPolicy"] = A.load.Ref(ptr + 0 + 8, undefined);
        x["Gateway"]["DevicePolicy"] = A.load.Ref(ptr + 0 + 12, undefined);
        x["Gateway"]["UserSetting"] = A.load.Ref(ptr + 0 + 16, undefined);
        x["Gateway"]["SharedSetting"] = A.load.Ref(ptr + 0 + 20, undefined);
        if (A.load.Bool(ptr + 0 + 26)) {
          x["Gateway"]["UserEditable"] = A.load.Bool(ptr + 0 + 24);
        } else {
          delete x["Gateway"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 0 + 27)) {
          x["Gateway"]["DeviceEditable"] = A.load.Bool(ptr + 0 + 25);
        } else {
          delete x["Gateway"]["DeviceEditable"];
        }
      } else {
        delete x["Gateway"];
      }
      if (A.load.Bool(ptr + 32 + 28)) {
        x["IPAddress"] = {};
        x["IPAddress"]["Active"] = A.load.Ref(ptr + 32 + 0, undefined);
        x["IPAddress"]["Effective"] = A.load.Ref(ptr + 32 + 4, undefined);
        x["IPAddress"]["UserPolicy"] = A.load.Ref(ptr + 32 + 8, undefined);
        x["IPAddress"]["DevicePolicy"] = A.load.Ref(ptr + 32 + 12, undefined);
        x["IPAddress"]["UserSetting"] = A.load.Ref(ptr + 32 + 16, undefined);
        x["IPAddress"]["SharedSetting"] = A.load.Ref(ptr + 32 + 20, undefined);
        if (A.load.Bool(ptr + 32 + 26)) {
          x["IPAddress"]["UserEditable"] = A.load.Bool(ptr + 32 + 24);
        } else {
          delete x["IPAddress"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 32 + 27)) {
          x["IPAddress"]["DeviceEditable"] = A.load.Bool(ptr + 32 + 25);
        } else {
          delete x["IPAddress"]["DeviceEditable"];
        }
      } else {
        delete x["IPAddress"];
      }
      if (A.load.Bool(ptr + 64 + 28)) {
        x["NameServers"] = {};
        x["NameServers"]["Active"] = A.load.Ref(ptr + 64 + 0, undefined);
        x["NameServers"]["Effective"] = A.load.Ref(ptr + 64 + 4, undefined);
        x["NameServers"]["UserPolicy"] = A.load.Ref(ptr + 64 + 8, undefined);
        x["NameServers"]["DevicePolicy"] = A.load.Ref(ptr + 64 + 12, undefined);
        x["NameServers"]["UserSetting"] = A.load.Ref(ptr + 64 + 16, undefined);
        x["NameServers"]["SharedSetting"] = A.load.Ref(ptr + 64 + 20, undefined);
        if (A.load.Bool(ptr + 64 + 26)) {
          x["NameServers"]["UserEditable"] = A.load.Bool(ptr + 64 + 24);
        } else {
          delete x["NameServers"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 64 + 27)) {
          x["NameServers"]["DeviceEditable"] = A.load.Bool(ptr + 64 + 25);
        } else {
          delete x["NameServers"]["DeviceEditable"];
        }
      } else {
        delete x["NameServers"];
      }
      if (A.load.Bool(ptr + 96 + 33)) {
        x["RoutingPrefix"] = {};
        if (A.load.Bool(ptr + 96 + 26)) {
          x["RoutingPrefix"]["Active"] = A.load.Int32(ptr + 96 + 0);
        } else {
          delete x["RoutingPrefix"]["Active"];
        }
        x["RoutingPrefix"]["Effective"] = A.load.Ref(ptr + 96 + 4, undefined);
        if (A.load.Bool(ptr + 96 + 27)) {
          x["RoutingPrefix"]["UserPolicy"] = A.load.Int32(ptr + 96 + 8);
        } else {
          delete x["RoutingPrefix"]["UserPolicy"];
        }
        if (A.load.Bool(ptr + 96 + 28)) {
          x["RoutingPrefix"]["DevicePolicy"] = A.load.Int32(ptr + 96 + 12);
        } else {
          delete x["RoutingPrefix"]["DevicePolicy"];
        }
        if (A.load.Bool(ptr + 96 + 29)) {
          x["RoutingPrefix"]["UserSetting"] = A.load.Int32(ptr + 96 + 16);
        } else {
          delete x["RoutingPrefix"]["UserSetting"];
        }
        if (A.load.Bool(ptr + 96 + 30)) {
          x["RoutingPrefix"]["SharedSetting"] = A.load.Int32(ptr + 96 + 20);
        } else {
          delete x["RoutingPrefix"]["SharedSetting"];
        }
        if (A.load.Bool(ptr + 96 + 31)) {
          x["RoutingPrefix"]["UserEditable"] = A.load.Bool(ptr + 96 + 24);
        } else {
          delete x["RoutingPrefix"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 96 + 32)) {
          x["RoutingPrefix"]["DeviceEditable"] = A.load.Bool(ptr + 96 + 25);
        } else {
          delete x["RoutingPrefix"]["DeviceEditable"];
        }
      } else {
        delete x["RoutingPrefix"];
      }
      if (A.load.Bool(ptr + 132 + 28)) {
        x["Type"] = {};
        x["Type"]["Active"] = A.load.Ref(ptr + 132 + 0, undefined);
        x["Type"]["Effective"] = A.load.Ref(ptr + 132 + 4, undefined);
        x["Type"]["UserPolicy"] = A.load.Ref(ptr + 132 + 8, undefined);
        x["Type"]["DevicePolicy"] = A.load.Ref(ptr + 132 + 12, undefined);
        x["Type"]["UserSetting"] = A.load.Ref(ptr + 132 + 16, undefined);
        x["Type"]["SharedSetting"] = A.load.Ref(ptr + 132 + 20, undefined);
        if (A.load.Bool(ptr + 132 + 26)) {
          x["Type"]["UserEditable"] = A.load.Bool(ptr + 132 + 24);
        } else {
          delete x["Type"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 132 + 27)) {
          x["Type"]["DeviceEditable"] = A.load.Bool(ptr + 132 + 25);
        } else {
          delete x["Type"]["DeviceEditable"];
        }
      } else {
        delete x["Type"];
      }
      if (A.load.Bool(ptr + 164 + 28)) {
        x["WebProxyAutoDiscoveryUrl"] = {};
        x["WebProxyAutoDiscoveryUrl"]["Active"] = A.load.Ref(ptr + 164 + 0, undefined);
        x["WebProxyAutoDiscoveryUrl"]["Effective"] = A.load.Ref(ptr + 164 + 4, undefined);
        x["WebProxyAutoDiscoveryUrl"]["UserPolicy"] = A.load.Ref(ptr + 164 + 8, undefined);
        x["WebProxyAutoDiscoveryUrl"]["DevicePolicy"] = A.load.Ref(ptr + 164 + 12, undefined);
        x["WebProxyAutoDiscoveryUrl"]["UserSetting"] = A.load.Ref(ptr + 164 + 16, undefined);
        x["WebProxyAutoDiscoveryUrl"]["SharedSetting"] = A.load.Ref(ptr + 164 + 20, undefined);
        if (A.load.Bool(ptr + 164 + 26)) {
          x["WebProxyAutoDiscoveryUrl"]["UserEditable"] = A.load.Bool(ptr + 164 + 24);
        } else {
          delete x["WebProxyAutoDiscoveryUrl"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 164 + 27)) {
          x["WebProxyAutoDiscoveryUrl"]["DeviceEditable"] = A.load.Bool(ptr + 164 + 25);
        } else {
          delete x["WebProxyAutoDiscoveryUrl"]["DeviceEditable"];
        }
      } else {
        delete x["WebProxyAutoDiscoveryUrl"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_TetherProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 19, false);
        A.store.Bool(ptr + 16, false);
        A.store.Int32(ptr + 0, 0);
        A.store.Ref(ptr + 4, undefined);
        A.store.Bool(ptr + 17, false);
        A.store.Bool(ptr + 8, false);
        A.store.Bool(ptr + 18, false);
        A.store.Int32(ptr + 12, 0);
      } else {
        A.store.Bool(ptr + 19, true);
        A.store.Bool(ptr + 16, "BatteryPercentage" in x ? true : false);
        A.store.Int32(ptr + 0, x["BatteryPercentage"] === undefined ? 0 : (x["BatteryPercentage"] as number));
        A.store.Ref(ptr + 4, x["Carrier"]);
        A.store.Bool(ptr + 17, "HasConnectedToHost" in x ? true : false);
        A.store.Bool(ptr + 8, x["HasConnectedToHost"] ? true : false);
        A.store.Bool(ptr + 18, "SignalStrength" in x ? true : false);
        A.store.Int32(ptr + 12, x["SignalStrength"] === undefined ? 0 : (x["SignalStrength"] as number));
      }
    },
    "load_TetherProperties": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      if (A.load.Bool(ptr + 16)) {
        x["BatteryPercentage"] = A.load.Int32(ptr + 0);
      } else {
        delete x["BatteryPercentage"];
      }
      x["Carrier"] = A.load.Ref(ptr + 4, undefined);
      if (A.load.Bool(ptr + 17)) {
        x["HasConnectedToHost"] = A.load.Bool(ptr + 8);
      } else {
        delete x["HasConnectedToHost"];
      }
      if (A.load.Bool(ptr + 18)) {
        x["SignalStrength"] = A.load.Int32(ptr + 12);
      } else {
        delete x["SignalStrength"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_ManagedXAUTHProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 85, false);

        A.store.Bool(ptr + 0 + 28, false);
        A.store.Ref(ptr + 0 + 0, undefined);
        A.store.Ref(ptr + 0 + 4, undefined);
        A.store.Ref(ptr + 0 + 8, undefined);
        A.store.Ref(ptr + 0 + 12, undefined);
        A.store.Ref(ptr + 0 + 16, undefined);
        A.store.Ref(ptr + 0 + 20, undefined);
        A.store.Bool(ptr + 0 + 26, false);
        A.store.Bool(ptr + 0 + 24, false);
        A.store.Bool(ptr + 0 + 27, false);
        A.store.Bool(ptr + 0 + 25, false);

        A.store.Bool(ptr + 32 + 21, false);
        A.store.Bool(ptr + 32 + 14, false);
        A.store.Bool(ptr + 32 + 0, false);
        A.store.Ref(ptr + 32 + 4, undefined);
        A.store.Bool(ptr + 32 + 15, false);
        A.store.Bool(ptr + 32 + 8, false);
        A.store.Bool(ptr + 32 + 16, false);
        A.store.Bool(ptr + 32 + 9, false);
        A.store.Bool(ptr + 32 + 17, false);
        A.store.Bool(ptr + 32 + 10, false);
        A.store.Bool(ptr + 32 + 18, false);
        A.store.Bool(ptr + 32 + 11, false);
        A.store.Bool(ptr + 32 + 19, false);
        A.store.Bool(ptr + 32 + 12, false);
        A.store.Bool(ptr + 32 + 20, false);
        A.store.Bool(ptr + 32 + 13, false);

        A.store.Bool(ptr + 56 + 28, false);
        A.store.Ref(ptr + 56 + 0, undefined);
        A.store.Ref(ptr + 56 + 4, undefined);
        A.store.Ref(ptr + 56 + 8, undefined);
        A.store.Ref(ptr + 56 + 12, undefined);
        A.store.Ref(ptr + 56 + 16, undefined);
        A.store.Ref(ptr + 56 + 20, undefined);
        A.store.Bool(ptr + 56 + 26, false);
        A.store.Bool(ptr + 56 + 24, false);
        A.store.Bool(ptr + 56 + 27, false);
        A.store.Bool(ptr + 56 + 25, false);
      } else {
        A.store.Bool(ptr + 85, true);

        if (typeof x["Password"] === "undefined") {
          A.store.Bool(ptr + 0 + 28, false);
          A.store.Ref(ptr + 0 + 0, undefined);
          A.store.Ref(ptr + 0 + 4, undefined);
          A.store.Ref(ptr + 0 + 8, undefined);
          A.store.Ref(ptr + 0 + 12, undefined);
          A.store.Ref(ptr + 0 + 16, undefined);
          A.store.Ref(ptr + 0 + 20, undefined);
          A.store.Bool(ptr + 0 + 26, false);
          A.store.Bool(ptr + 0 + 24, false);
          A.store.Bool(ptr + 0 + 27, false);
          A.store.Bool(ptr + 0 + 25, false);
        } else {
          A.store.Bool(ptr + 0 + 28, true);
          A.store.Ref(ptr + 0 + 0, x["Password"]["Active"]);
          A.store.Ref(ptr + 0 + 4, x["Password"]["Effective"]);
          A.store.Ref(ptr + 0 + 8, x["Password"]["UserPolicy"]);
          A.store.Ref(ptr + 0 + 12, x["Password"]["DevicePolicy"]);
          A.store.Ref(ptr + 0 + 16, x["Password"]["UserSetting"]);
          A.store.Ref(ptr + 0 + 20, x["Password"]["SharedSetting"]);
          A.store.Bool(ptr + 0 + 26, "UserEditable" in x["Password"] ? true : false);
          A.store.Bool(ptr + 0 + 24, x["Password"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 0 + 27, "DeviceEditable" in x["Password"] ? true : false);
          A.store.Bool(ptr + 0 + 25, x["Password"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["SaveCredentials"] === "undefined") {
          A.store.Bool(ptr + 32 + 21, false);
          A.store.Bool(ptr + 32 + 14, false);
          A.store.Bool(ptr + 32 + 0, false);
          A.store.Ref(ptr + 32 + 4, undefined);
          A.store.Bool(ptr + 32 + 15, false);
          A.store.Bool(ptr + 32 + 8, false);
          A.store.Bool(ptr + 32 + 16, false);
          A.store.Bool(ptr + 32 + 9, false);
          A.store.Bool(ptr + 32 + 17, false);
          A.store.Bool(ptr + 32 + 10, false);
          A.store.Bool(ptr + 32 + 18, false);
          A.store.Bool(ptr + 32 + 11, false);
          A.store.Bool(ptr + 32 + 19, false);
          A.store.Bool(ptr + 32 + 12, false);
          A.store.Bool(ptr + 32 + 20, false);
          A.store.Bool(ptr + 32 + 13, false);
        } else {
          A.store.Bool(ptr + 32 + 21, true);
          A.store.Bool(ptr + 32 + 14, "Active" in x["SaveCredentials"] ? true : false);
          A.store.Bool(ptr + 32 + 0, x["SaveCredentials"]["Active"] ? true : false);
          A.store.Ref(ptr + 32 + 4, x["SaveCredentials"]["Effective"]);
          A.store.Bool(ptr + 32 + 15, "UserPolicy" in x["SaveCredentials"] ? true : false);
          A.store.Bool(ptr + 32 + 8, x["SaveCredentials"]["UserPolicy"] ? true : false);
          A.store.Bool(ptr + 32 + 16, "DevicePolicy" in x["SaveCredentials"] ? true : false);
          A.store.Bool(ptr + 32 + 9, x["SaveCredentials"]["DevicePolicy"] ? true : false);
          A.store.Bool(ptr + 32 + 17, "UserSetting" in x["SaveCredentials"] ? true : false);
          A.store.Bool(ptr + 32 + 10, x["SaveCredentials"]["UserSetting"] ? true : false);
          A.store.Bool(ptr + 32 + 18, "SharedSetting" in x["SaveCredentials"] ? true : false);
          A.store.Bool(ptr + 32 + 11, x["SaveCredentials"]["SharedSetting"] ? true : false);
          A.store.Bool(ptr + 32 + 19, "UserEditable" in x["SaveCredentials"] ? true : false);
          A.store.Bool(ptr + 32 + 12, x["SaveCredentials"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 32 + 20, "DeviceEditable" in x["SaveCredentials"] ? true : false);
          A.store.Bool(ptr + 32 + 13, x["SaveCredentials"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["Username"] === "undefined") {
          A.store.Bool(ptr + 56 + 28, false);
          A.store.Ref(ptr + 56 + 0, undefined);
          A.store.Ref(ptr + 56 + 4, undefined);
          A.store.Ref(ptr + 56 + 8, undefined);
          A.store.Ref(ptr + 56 + 12, undefined);
          A.store.Ref(ptr + 56 + 16, undefined);
          A.store.Ref(ptr + 56 + 20, undefined);
          A.store.Bool(ptr + 56 + 26, false);
          A.store.Bool(ptr + 56 + 24, false);
          A.store.Bool(ptr + 56 + 27, false);
          A.store.Bool(ptr + 56 + 25, false);
        } else {
          A.store.Bool(ptr + 56 + 28, true);
          A.store.Ref(ptr + 56 + 0, x["Username"]["Active"]);
          A.store.Ref(ptr + 56 + 4, x["Username"]["Effective"]);
          A.store.Ref(ptr + 56 + 8, x["Username"]["UserPolicy"]);
          A.store.Ref(ptr + 56 + 12, x["Username"]["DevicePolicy"]);
          A.store.Ref(ptr + 56 + 16, x["Username"]["UserSetting"]);
          A.store.Ref(ptr + 56 + 20, x["Username"]["SharedSetting"]);
          A.store.Bool(ptr + 56 + 26, "UserEditable" in x["Username"] ? true : false);
          A.store.Bool(ptr + 56 + 24, x["Username"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 56 + 27, "DeviceEditable" in x["Username"] ? true : false);
          A.store.Bool(ptr + 56 + 25, x["Username"]["DeviceEditable"] ? true : false);
        }
      }
    },
    "load_ManagedXAUTHProperties": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      if (A.load.Bool(ptr + 0 + 28)) {
        x["Password"] = {};
        x["Password"]["Active"] = A.load.Ref(ptr + 0 + 0, undefined);
        x["Password"]["Effective"] = A.load.Ref(ptr + 0 + 4, undefined);
        x["Password"]["UserPolicy"] = A.load.Ref(ptr + 0 + 8, undefined);
        x["Password"]["DevicePolicy"] = A.load.Ref(ptr + 0 + 12, undefined);
        x["Password"]["UserSetting"] = A.load.Ref(ptr + 0 + 16, undefined);
        x["Password"]["SharedSetting"] = A.load.Ref(ptr + 0 + 20, undefined);
        if (A.load.Bool(ptr + 0 + 26)) {
          x["Password"]["UserEditable"] = A.load.Bool(ptr + 0 + 24);
        } else {
          delete x["Password"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 0 + 27)) {
          x["Password"]["DeviceEditable"] = A.load.Bool(ptr + 0 + 25);
        } else {
          delete x["Password"]["DeviceEditable"];
        }
      } else {
        delete x["Password"];
      }
      if (A.load.Bool(ptr + 32 + 21)) {
        x["SaveCredentials"] = {};
        if (A.load.Bool(ptr + 32 + 14)) {
          x["SaveCredentials"]["Active"] = A.load.Bool(ptr + 32 + 0);
        } else {
          delete x["SaveCredentials"]["Active"];
        }
        x["SaveCredentials"]["Effective"] = A.load.Ref(ptr + 32 + 4, undefined);
        if (A.load.Bool(ptr + 32 + 15)) {
          x["SaveCredentials"]["UserPolicy"] = A.load.Bool(ptr + 32 + 8);
        } else {
          delete x["SaveCredentials"]["UserPolicy"];
        }
        if (A.load.Bool(ptr + 32 + 16)) {
          x["SaveCredentials"]["DevicePolicy"] = A.load.Bool(ptr + 32 + 9);
        } else {
          delete x["SaveCredentials"]["DevicePolicy"];
        }
        if (A.load.Bool(ptr + 32 + 17)) {
          x["SaveCredentials"]["UserSetting"] = A.load.Bool(ptr + 32 + 10);
        } else {
          delete x["SaveCredentials"]["UserSetting"];
        }
        if (A.load.Bool(ptr + 32 + 18)) {
          x["SaveCredentials"]["SharedSetting"] = A.load.Bool(ptr + 32 + 11);
        } else {
          delete x["SaveCredentials"]["SharedSetting"];
        }
        if (A.load.Bool(ptr + 32 + 19)) {
          x["SaveCredentials"]["UserEditable"] = A.load.Bool(ptr + 32 + 12);
        } else {
          delete x["SaveCredentials"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 32 + 20)) {
          x["SaveCredentials"]["DeviceEditable"] = A.load.Bool(ptr + 32 + 13);
        } else {
          delete x["SaveCredentials"]["DeviceEditable"];
        }
      } else {
        delete x["SaveCredentials"];
      }
      if (A.load.Bool(ptr + 56 + 28)) {
        x["Username"] = {};
        x["Username"]["Active"] = A.load.Ref(ptr + 56 + 0, undefined);
        x["Username"]["Effective"] = A.load.Ref(ptr + 56 + 4, undefined);
        x["Username"]["UserPolicy"] = A.load.Ref(ptr + 56 + 8, undefined);
        x["Username"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 12, undefined);
        x["Username"]["UserSetting"] = A.load.Ref(ptr + 56 + 16, undefined);
        x["Username"]["SharedSetting"] = A.load.Ref(ptr + 56 + 20, undefined);
        if (A.load.Bool(ptr + 56 + 26)) {
          x["Username"]["UserEditable"] = A.load.Bool(ptr + 56 + 24);
        } else {
          delete x["Username"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 56 + 27)) {
          x["Username"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 25);
        } else {
          delete x["Username"]["DeviceEditable"];
        }
      } else {
        delete x["Username"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_ManagedIPSecProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 1562, false);

        A.store.Bool(ptr + 0 + 28, false);
        A.store.Ref(ptr + 0 + 0, undefined);
        A.store.Ref(ptr + 0 + 4, undefined);
        A.store.Ref(ptr + 0 + 8, undefined);
        A.store.Ref(ptr + 0 + 12, undefined);
        A.store.Ref(ptr + 0 + 16, undefined);
        A.store.Ref(ptr + 0 + 20, undefined);
        A.store.Bool(ptr + 0 + 26, false);
        A.store.Bool(ptr + 0 + 24, false);
        A.store.Bool(ptr + 0 + 27, false);
        A.store.Bool(ptr + 0 + 25, false);

        A.store.Bool(ptr + 32 + 318, false);

        A.store.Bool(ptr + 32 + 0 + 28, false);
        A.store.Ref(ptr + 32 + 0 + 0, undefined);
        A.store.Ref(ptr + 32 + 0 + 4, undefined);
        A.store.Ref(ptr + 32 + 0 + 8, undefined);
        A.store.Ref(ptr + 32 + 0 + 12, undefined);
        A.store.Ref(ptr + 32 + 0 + 16, undefined);
        A.store.Ref(ptr + 32 + 0 + 20, undefined);
        A.store.Bool(ptr + 32 + 0 + 26, false);
        A.store.Bool(ptr + 32 + 0 + 24, false);
        A.store.Bool(ptr + 32 + 0 + 27, false);
        A.store.Bool(ptr + 32 + 0 + 25, false);

        A.store.Bool(ptr + 32 + 32 + 125, false);

        A.store.Bool(ptr + 32 + 32 + 0 + 28, false);
        A.store.Ref(ptr + 32 + 32 + 0 + 0, undefined);
        A.store.Ref(ptr + 32 + 32 + 0 + 4, undefined);
        A.store.Ref(ptr + 32 + 32 + 0 + 8, undefined);
        A.store.Ref(ptr + 32 + 32 + 0 + 12, undefined);
        A.store.Ref(ptr + 32 + 32 + 0 + 16, undefined);
        A.store.Ref(ptr + 32 + 32 + 0 + 20, undefined);
        A.store.Bool(ptr + 32 + 32 + 0 + 26, false);
        A.store.Bool(ptr + 32 + 32 + 0 + 24, false);
        A.store.Bool(ptr + 32 + 32 + 0 + 27, false);
        A.store.Bool(ptr + 32 + 32 + 0 + 25, false);

        A.store.Bool(ptr + 32 + 32 + 32 + 28, false);
        A.store.Ref(ptr + 32 + 32 + 32 + 0, undefined);
        A.store.Ref(ptr + 32 + 32 + 32 + 4, undefined);
        A.store.Ref(ptr + 32 + 32 + 32 + 8, undefined);
        A.store.Ref(ptr + 32 + 32 + 32 + 12, undefined);
        A.store.Ref(ptr + 32 + 32 + 32 + 16, undefined);
        A.store.Ref(ptr + 32 + 32 + 32 + 20, undefined);
        A.store.Bool(ptr + 32 + 32 + 32 + 26, false);
        A.store.Bool(ptr + 32 + 32 + 32 + 24, false);
        A.store.Bool(ptr + 32 + 32 + 32 + 27, false);
        A.store.Bool(ptr + 32 + 32 + 32 + 25, false);

        A.store.Bool(ptr + 32 + 32 + 64 + 28, false);
        A.store.Ref(ptr + 32 + 32 + 64 + 0, undefined);
        A.store.Ref(ptr + 32 + 32 + 64 + 4, undefined);
        A.store.Ref(ptr + 32 + 32 + 64 + 8, undefined);
        A.store.Ref(ptr + 32 + 32 + 64 + 12, undefined);
        A.store.Ref(ptr + 32 + 32 + 64 + 16, undefined);
        A.store.Ref(ptr + 32 + 32 + 64 + 20, undefined);
        A.store.Bool(ptr + 32 + 32 + 64 + 26, false);
        A.store.Bool(ptr + 32 + 32 + 64 + 24, false);
        A.store.Bool(ptr + 32 + 32 + 64 + 27, false);
        A.store.Bool(ptr + 32 + 32 + 64 + 25, false);

        A.store.Bool(ptr + 32 + 32 + 96 + 28, false);
        A.store.Ref(ptr + 32 + 32 + 96 + 0, undefined);
        A.store.Ref(ptr + 32 + 32 + 96 + 4, undefined);
        A.store.Ref(ptr + 32 + 32 + 96 + 8, undefined);
        A.store.Ref(ptr + 32 + 32 + 96 + 12, undefined);
        A.store.Ref(ptr + 32 + 32 + 96 + 16, undefined);
        A.store.Ref(ptr + 32 + 32 + 96 + 20, undefined);
        A.store.Bool(ptr + 32 + 32 + 96 + 26, false);
        A.store.Bool(ptr + 32 + 32 + 96 + 24, false);
        A.store.Bool(ptr + 32 + 32 + 96 + 27, false);
        A.store.Bool(ptr + 32 + 32 + 96 + 25, false);

        A.store.Bool(ptr + 32 + 160 + 28, false);
        A.store.Ref(ptr + 32 + 160 + 0, undefined);
        A.store.Ref(ptr + 32 + 160 + 4, undefined);
        A.store.Ref(ptr + 32 + 160 + 8, undefined);
        A.store.Ref(ptr + 32 + 160 + 12, undefined);
        A.store.Ref(ptr + 32 + 160 + 16, undefined);
        A.store.Ref(ptr + 32 + 160 + 20, undefined);
        A.store.Bool(ptr + 32 + 160 + 26, false);
        A.store.Bool(ptr + 32 + 160 + 24, false);
        A.store.Bool(ptr + 32 + 160 + 27, false);
        A.store.Bool(ptr + 32 + 160 + 25, false);

        A.store.Bool(ptr + 32 + 192 + 125, false);

        A.store.Bool(ptr + 32 + 192 + 0 + 28, false);
        A.store.Ref(ptr + 32 + 192 + 0 + 0, undefined);
        A.store.Ref(ptr + 32 + 192 + 0 + 4, undefined);
        A.store.Ref(ptr + 32 + 192 + 0 + 8, undefined);
        A.store.Ref(ptr + 32 + 192 + 0 + 12, undefined);
        A.store.Ref(ptr + 32 + 192 + 0 + 16, undefined);
        A.store.Ref(ptr + 32 + 192 + 0 + 20, undefined);
        A.store.Bool(ptr + 32 + 192 + 0 + 26, false);
        A.store.Bool(ptr + 32 + 192 + 0 + 24, false);
        A.store.Bool(ptr + 32 + 192 + 0 + 27, false);
        A.store.Bool(ptr + 32 + 192 + 0 + 25, false);

        A.store.Bool(ptr + 32 + 192 + 32 + 28, false);
        A.store.Ref(ptr + 32 + 192 + 32 + 0, undefined);
        A.store.Ref(ptr + 32 + 192 + 32 + 4, undefined);
        A.store.Ref(ptr + 32 + 192 + 32 + 8, undefined);
        A.store.Ref(ptr + 32 + 192 + 32 + 12, undefined);
        A.store.Ref(ptr + 32 + 192 + 32 + 16, undefined);
        A.store.Ref(ptr + 32 + 192 + 32 + 20, undefined);
        A.store.Bool(ptr + 32 + 192 + 32 + 26, false);
        A.store.Bool(ptr + 32 + 192 + 32 + 24, false);
        A.store.Bool(ptr + 32 + 192 + 32 + 27, false);
        A.store.Bool(ptr + 32 + 192 + 32 + 25, false);

        A.store.Bool(ptr + 32 + 192 + 64 + 28, false);
        A.store.Ref(ptr + 32 + 192 + 64 + 0, undefined);
        A.store.Ref(ptr + 32 + 192 + 64 + 4, undefined);
        A.store.Ref(ptr + 32 + 192 + 64 + 8, undefined);
        A.store.Ref(ptr + 32 + 192 + 64 + 12, undefined);
        A.store.Ref(ptr + 32 + 192 + 64 + 16, undefined);
        A.store.Ref(ptr + 32 + 192 + 64 + 20, undefined);
        A.store.Bool(ptr + 32 + 192 + 64 + 26, false);
        A.store.Bool(ptr + 32 + 192 + 64 + 24, false);
        A.store.Bool(ptr + 32 + 192 + 64 + 27, false);
        A.store.Bool(ptr + 32 + 192 + 64 + 25, false);

        A.store.Bool(ptr + 32 + 192 + 96 + 28, false);
        A.store.Ref(ptr + 32 + 192 + 96 + 0, undefined);
        A.store.Ref(ptr + 32 + 192 + 96 + 4, undefined);
        A.store.Ref(ptr + 32 + 192 + 96 + 8, undefined);
        A.store.Ref(ptr + 32 + 192 + 96 + 12, undefined);
        A.store.Ref(ptr + 32 + 192 + 96 + 16, undefined);
        A.store.Ref(ptr + 32 + 192 + 96 + 20, undefined);
        A.store.Bool(ptr + 32 + 192 + 96 + 26, false);
        A.store.Bool(ptr + 32 + 192 + 96 + 24, false);
        A.store.Bool(ptr + 32 + 192 + 96 + 27, false);
        A.store.Bool(ptr + 32 + 192 + 96 + 25, false);

        A.store.Bool(ptr + 352 + 28, false);
        A.store.Ref(ptr + 352 + 0, undefined);
        A.store.Ref(ptr + 352 + 4, undefined);
        A.store.Ref(ptr + 352 + 8, undefined);
        A.store.Ref(ptr + 352 + 12, undefined);
        A.store.Ref(ptr + 352 + 16, undefined);
        A.store.Ref(ptr + 352 + 20, undefined);
        A.store.Bool(ptr + 352 + 26, false);
        A.store.Bool(ptr + 352 + 24, false);
        A.store.Bool(ptr + 352 + 27, false);
        A.store.Bool(ptr + 352 + 25, false);

        A.store.Bool(ptr + 384 + 28, false);
        A.store.Ref(ptr + 384 + 0, undefined);
        A.store.Ref(ptr + 384 + 4, undefined);
        A.store.Ref(ptr + 384 + 8, undefined);
        A.store.Ref(ptr + 384 + 12, undefined);
        A.store.Ref(ptr + 384 + 16, undefined);
        A.store.Ref(ptr + 384 + 20, undefined);
        A.store.Bool(ptr + 384 + 26, false);
        A.store.Bool(ptr + 384 + 24, false);
        A.store.Bool(ptr + 384 + 27, false);
        A.store.Bool(ptr + 384 + 25, false);

        A.store.Bool(ptr + 416 + 28, false);
        A.store.Ref(ptr + 416 + 0, undefined);
        A.store.Ref(ptr + 416 + 4, undefined);
        A.store.Ref(ptr + 416 + 8, undefined);
        A.store.Ref(ptr + 416 + 12, undefined);
        A.store.Ref(ptr + 416 + 16, undefined);
        A.store.Ref(ptr + 416 + 20, undefined);
        A.store.Bool(ptr + 416 + 26, false);
        A.store.Bool(ptr + 416 + 24, false);
        A.store.Bool(ptr + 416 + 27, false);
        A.store.Bool(ptr + 416 + 25, false);

        A.store.Bool(ptr + 448 + 28, false);
        A.store.Ref(ptr + 448 + 0, undefined);
        A.store.Ref(ptr + 448 + 4, undefined);
        A.store.Ref(ptr + 448 + 8, undefined);
        A.store.Ref(ptr + 448 + 12, undefined);
        A.store.Ref(ptr + 448 + 16, undefined);
        A.store.Ref(ptr + 448 + 20, undefined);
        A.store.Bool(ptr + 448 + 26, false);
        A.store.Bool(ptr + 448 + 24, false);
        A.store.Bool(ptr + 448 + 27, false);
        A.store.Bool(ptr + 448 + 25, false);

        A.store.Bool(ptr + 480 + 806, false);

        A.store.Bool(ptr + 480 + 0 + 28, false);
        A.store.Ref(ptr + 480 + 0 + 0, undefined);
        A.store.Ref(ptr + 480 + 0 + 4, undefined);
        A.store.Ref(ptr + 480 + 0 + 8, undefined);
        A.store.Ref(ptr + 480 + 0 + 12, undefined);
        A.store.Ref(ptr + 480 + 0 + 16, undefined);
        A.store.Ref(ptr + 480 + 0 + 20, undefined);
        A.store.Bool(ptr + 480 + 0 + 26, false);
        A.store.Bool(ptr + 480 + 0 + 24, false);
        A.store.Bool(ptr + 480 + 0 + 27, false);
        A.store.Bool(ptr + 480 + 0 + 25, false);

        A.store.Bool(ptr + 480 + 32 + 318, false);

        A.store.Bool(ptr + 480 + 32 + 0 + 28, false);
        A.store.Ref(ptr + 480 + 32 + 0 + 0, undefined);
        A.store.Ref(ptr + 480 + 32 + 0 + 4, undefined);
        A.store.Ref(ptr + 480 + 32 + 0 + 8, undefined);
        A.store.Ref(ptr + 480 + 32 + 0 + 12, undefined);
        A.store.Ref(ptr + 480 + 32 + 0 + 16, undefined);
        A.store.Ref(ptr + 480 + 32 + 0 + 20, undefined);
        A.store.Bool(ptr + 480 + 32 + 0 + 26, false);
        A.store.Bool(ptr + 480 + 32 + 0 + 24, false);
        A.store.Bool(ptr + 480 + 32 + 0 + 27, false);
        A.store.Bool(ptr + 480 + 32 + 0 + 25, false);

        A.store.Bool(ptr + 480 + 32 + 32 + 125, false);

        A.store.Bool(ptr + 480 + 32 + 32 + 0 + 28, false);
        A.store.Ref(ptr + 480 + 32 + 32 + 0 + 0, undefined);
        A.store.Ref(ptr + 480 + 32 + 32 + 0 + 4, undefined);
        A.store.Ref(ptr + 480 + 32 + 32 + 0 + 8, undefined);
        A.store.Ref(ptr + 480 + 32 + 32 + 0 + 12, undefined);
        A.store.Ref(ptr + 480 + 32 + 32 + 0 + 16, undefined);
        A.store.Ref(ptr + 480 + 32 + 32 + 0 + 20, undefined);
        A.store.Bool(ptr + 480 + 32 + 32 + 0 + 26, false);
        A.store.Bool(ptr + 480 + 32 + 32 + 0 + 24, false);
        A.store.Bool(ptr + 480 + 32 + 32 + 0 + 27, false);
        A.store.Bool(ptr + 480 + 32 + 32 + 0 + 25, false);

        A.store.Bool(ptr + 480 + 32 + 32 + 32 + 28, false);
        A.store.Ref(ptr + 480 + 32 + 32 + 32 + 0, undefined);
        A.store.Ref(ptr + 480 + 32 + 32 + 32 + 4, undefined);
        A.store.Ref(ptr + 480 + 32 + 32 + 32 + 8, undefined);
        A.store.Ref(ptr + 480 + 32 + 32 + 32 + 12, undefined);
        A.store.Ref(ptr + 480 + 32 + 32 + 32 + 16, undefined);
        A.store.Ref(ptr + 480 + 32 + 32 + 32 + 20, undefined);
        A.store.Bool(ptr + 480 + 32 + 32 + 32 + 26, false);
        A.store.Bool(ptr + 480 + 32 + 32 + 32 + 24, false);
        A.store.Bool(ptr + 480 + 32 + 32 + 32 + 27, false);
        A.store.Bool(ptr + 480 + 32 + 32 + 32 + 25, false);

        A.store.Bool(ptr + 480 + 32 + 32 + 64 + 28, false);
        A.store.Ref(ptr + 480 + 32 + 32 + 64 + 0, undefined);
        A.store.Ref(ptr + 480 + 32 + 32 + 64 + 4, undefined);
        A.store.Ref(ptr + 480 + 32 + 32 + 64 + 8, undefined);
        A.store.Ref(ptr + 480 + 32 + 32 + 64 + 12, undefined);
        A.store.Ref(ptr + 480 + 32 + 32 + 64 + 16, undefined);
        A.store.Ref(ptr + 480 + 32 + 32 + 64 + 20, undefined);
        A.store.Bool(ptr + 480 + 32 + 32 + 64 + 26, false);
        A.store.Bool(ptr + 480 + 32 + 32 + 64 + 24, false);
        A.store.Bool(ptr + 480 + 32 + 32 + 64 + 27, false);
        A.store.Bool(ptr + 480 + 32 + 32 + 64 + 25, false);

        A.store.Bool(ptr + 480 + 32 + 32 + 96 + 28, false);
        A.store.Ref(ptr + 480 + 32 + 32 + 96 + 0, undefined);
        A.store.Ref(ptr + 480 + 32 + 32 + 96 + 4, undefined);
        A.store.Ref(ptr + 480 + 32 + 32 + 96 + 8, undefined);
        A.store.Ref(ptr + 480 + 32 + 32 + 96 + 12, undefined);
        A.store.Ref(ptr + 480 + 32 + 32 + 96 + 16, undefined);
        A.store.Ref(ptr + 480 + 32 + 32 + 96 + 20, undefined);
        A.store.Bool(ptr + 480 + 32 + 32 + 96 + 26, false);
        A.store.Bool(ptr + 480 + 32 + 32 + 96 + 24, false);
        A.store.Bool(ptr + 480 + 32 + 32 + 96 + 27, false);
        A.store.Bool(ptr + 480 + 32 + 32 + 96 + 25, false);

        A.store.Bool(ptr + 480 + 32 + 160 + 28, false);
        A.store.Ref(ptr + 480 + 32 + 160 + 0, undefined);
        A.store.Ref(ptr + 480 + 32 + 160 + 4, undefined);
        A.store.Ref(ptr + 480 + 32 + 160 + 8, undefined);
        A.store.Ref(ptr + 480 + 32 + 160 + 12, undefined);
        A.store.Ref(ptr + 480 + 32 + 160 + 16, undefined);
        A.store.Ref(ptr + 480 + 32 + 160 + 20, undefined);
        A.store.Bool(ptr + 480 + 32 + 160 + 26, false);
        A.store.Bool(ptr + 480 + 32 + 160 + 24, false);
        A.store.Bool(ptr + 480 + 32 + 160 + 27, false);
        A.store.Bool(ptr + 480 + 32 + 160 + 25, false);

        A.store.Bool(ptr + 480 + 32 + 192 + 125, false);

        A.store.Bool(ptr + 480 + 32 + 192 + 0 + 28, false);
        A.store.Ref(ptr + 480 + 32 + 192 + 0 + 0, undefined);
        A.store.Ref(ptr + 480 + 32 + 192 + 0 + 4, undefined);
        A.store.Ref(ptr + 480 + 32 + 192 + 0 + 8, undefined);
        A.store.Ref(ptr + 480 + 32 + 192 + 0 + 12, undefined);
        A.store.Ref(ptr + 480 + 32 + 192 + 0 + 16, undefined);
        A.store.Ref(ptr + 480 + 32 + 192 + 0 + 20, undefined);
        A.store.Bool(ptr + 480 + 32 + 192 + 0 + 26, false);
        A.store.Bool(ptr + 480 + 32 + 192 + 0 + 24, false);
        A.store.Bool(ptr + 480 + 32 + 192 + 0 + 27, false);
        A.store.Bool(ptr + 480 + 32 + 192 + 0 + 25, false);

        A.store.Bool(ptr + 480 + 32 + 192 + 32 + 28, false);
        A.store.Ref(ptr + 480 + 32 + 192 + 32 + 0, undefined);
        A.store.Ref(ptr + 480 + 32 + 192 + 32 + 4, undefined);
        A.store.Ref(ptr + 480 + 32 + 192 + 32 + 8, undefined);
        A.store.Ref(ptr + 480 + 32 + 192 + 32 + 12, undefined);
        A.store.Ref(ptr + 480 + 32 + 192 + 32 + 16, undefined);
        A.store.Ref(ptr + 480 + 32 + 192 + 32 + 20, undefined);
        A.store.Bool(ptr + 480 + 32 + 192 + 32 + 26, false);
        A.store.Bool(ptr + 480 + 32 + 192 + 32 + 24, false);
        A.store.Bool(ptr + 480 + 32 + 192 + 32 + 27, false);
        A.store.Bool(ptr + 480 + 32 + 192 + 32 + 25, false);

        A.store.Bool(ptr + 480 + 32 + 192 + 64 + 28, false);
        A.store.Ref(ptr + 480 + 32 + 192 + 64 + 0, undefined);
        A.store.Ref(ptr + 480 + 32 + 192 + 64 + 4, undefined);
        A.store.Ref(ptr + 480 + 32 + 192 + 64 + 8, undefined);
        A.store.Ref(ptr + 480 + 32 + 192 + 64 + 12, undefined);
        A.store.Ref(ptr + 480 + 32 + 192 + 64 + 16, undefined);
        A.store.Ref(ptr + 480 + 32 + 192 + 64 + 20, undefined);
        A.store.Bool(ptr + 480 + 32 + 192 + 64 + 26, false);
        A.store.Bool(ptr + 480 + 32 + 192 + 64 + 24, false);
        A.store.Bool(ptr + 480 + 32 + 192 + 64 + 27, false);
        A.store.Bool(ptr + 480 + 32 + 192 + 64 + 25, false);

        A.store.Bool(ptr + 480 + 32 + 192 + 96 + 28, false);
        A.store.Ref(ptr + 480 + 32 + 192 + 96 + 0, undefined);
        A.store.Ref(ptr + 480 + 32 + 192 + 96 + 4, undefined);
        A.store.Ref(ptr + 480 + 32 + 192 + 96 + 8, undefined);
        A.store.Ref(ptr + 480 + 32 + 192 + 96 + 12, undefined);
        A.store.Ref(ptr + 480 + 32 + 192 + 96 + 16, undefined);
        A.store.Ref(ptr + 480 + 32 + 192 + 96 + 20, undefined);
        A.store.Bool(ptr + 480 + 32 + 192 + 96 + 26, false);
        A.store.Bool(ptr + 480 + 32 + 192 + 96 + 24, false);
        A.store.Bool(ptr + 480 + 32 + 192 + 96 + 27, false);
        A.store.Bool(ptr + 480 + 32 + 192 + 96 + 25, false);

        A.store.Bool(ptr + 480 + 352 + 28, false);
        A.store.Ref(ptr + 480 + 352 + 0, undefined);
        A.store.Ref(ptr + 480 + 352 + 4, undefined);
        A.store.Ref(ptr + 480 + 352 + 8, undefined);
        A.store.Ref(ptr + 480 + 352 + 12, undefined);
        A.store.Ref(ptr + 480 + 352 + 16, undefined);
        A.store.Ref(ptr + 480 + 352 + 20, undefined);
        A.store.Bool(ptr + 480 + 352 + 26, false);
        A.store.Bool(ptr + 480 + 352 + 24, false);
        A.store.Bool(ptr + 480 + 352 + 27, false);
        A.store.Bool(ptr + 480 + 352 + 25, false);

        A.store.Bool(ptr + 480 + 384 + 28, false);
        A.store.Ref(ptr + 480 + 384 + 0, undefined);
        A.store.Ref(ptr + 480 + 384 + 4, undefined);
        A.store.Ref(ptr + 480 + 384 + 8, undefined);
        A.store.Ref(ptr + 480 + 384 + 12, undefined);
        A.store.Ref(ptr + 480 + 384 + 16, undefined);
        A.store.Ref(ptr + 480 + 384 + 20, undefined);
        A.store.Bool(ptr + 480 + 384 + 26, false);
        A.store.Bool(ptr + 480 + 384 + 24, false);
        A.store.Bool(ptr + 480 + 384 + 27, false);
        A.store.Bool(ptr + 480 + 384 + 25, false);

        A.store.Bool(ptr + 480 + 416 + 28, false);
        A.store.Ref(ptr + 480 + 416 + 0, undefined);
        A.store.Ref(ptr + 480 + 416 + 4, undefined);
        A.store.Ref(ptr + 480 + 416 + 8, undefined);
        A.store.Ref(ptr + 480 + 416 + 12, undefined);
        A.store.Ref(ptr + 480 + 416 + 16, undefined);
        A.store.Ref(ptr + 480 + 416 + 20, undefined);
        A.store.Bool(ptr + 480 + 416 + 26, false);
        A.store.Bool(ptr + 480 + 416 + 24, false);
        A.store.Bool(ptr + 480 + 416 + 27, false);
        A.store.Bool(ptr + 480 + 416 + 25, false);

        A.store.Bool(ptr + 480 + 448 + 28, false);
        A.store.Ref(ptr + 480 + 448 + 0, undefined);
        A.store.Ref(ptr + 480 + 448 + 4, undefined);
        A.store.Ref(ptr + 480 + 448 + 8, undefined);
        A.store.Ref(ptr + 480 + 448 + 12, undefined);
        A.store.Ref(ptr + 480 + 448 + 16, undefined);
        A.store.Ref(ptr + 480 + 448 + 20, undefined);
        A.store.Bool(ptr + 480 + 448 + 26, false);
        A.store.Bool(ptr + 480 + 448 + 24, false);
        A.store.Bool(ptr + 480 + 448 + 27, false);
        A.store.Bool(ptr + 480 + 448 + 25, false);

        A.store.Bool(ptr + 480 + 480 + 28, false);
        A.store.Ref(ptr + 480 + 480 + 0, undefined);
        A.store.Ref(ptr + 480 + 480 + 4, undefined);
        A.store.Ref(ptr + 480 + 480 + 8, undefined);
        A.store.Ref(ptr + 480 + 480 + 12, undefined);
        A.store.Ref(ptr + 480 + 480 + 16, undefined);
        A.store.Ref(ptr + 480 + 480 + 20, undefined);
        A.store.Bool(ptr + 480 + 480 + 26, false);
        A.store.Bool(ptr + 480 + 480 + 24, false);
        A.store.Bool(ptr + 480 + 480 + 27, false);
        A.store.Bool(ptr + 480 + 480 + 25, false);

        A.store.Bool(ptr + 480 + 512 + 28, false);
        A.store.Ref(ptr + 480 + 512 + 0, undefined);
        A.store.Ref(ptr + 480 + 512 + 4, undefined);
        A.store.Ref(ptr + 480 + 512 + 8, undefined);
        A.store.Ref(ptr + 480 + 512 + 12, undefined);
        A.store.Ref(ptr + 480 + 512 + 16, undefined);
        A.store.Ref(ptr + 480 + 512 + 20, undefined);
        A.store.Bool(ptr + 480 + 512 + 26, false);
        A.store.Bool(ptr + 480 + 512 + 24, false);
        A.store.Bool(ptr + 480 + 512 + 27, false);
        A.store.Bool(ptr + 480 + 512 + 25, false);

        A.store.Bool(ptr + 480 + 544 + 28, false);
        A.store.Ref(ptr + 480 + 544 + 0, undefined);
        A.store.Ref(ptr + 480 + 544 + 4, undefined);
        A.store.Ref(ptr + 480 + 544 + 8, undefined);
        A.store.Ref(ptr + 480 + 544 + 12, undefined);
        A.store.Ref(ptr + 480 + 544 + 16, undefined);
        A.store.Ref(ptr + 480 + 544 + 20, undefined);
        A.store.Bool(ptr + 480 + 544 + 26, false);
        A.store.Bool(ptr + 480 + 544 + 24, false);
        A.store.Bool(ptr + 480 + 544 + 27, false);
        A.store.Bool(ptr + 480 + 544 + 25, false);

        A.store.Bool(ptr + 480 + 576 + 28, false);
        A.store.Ref(ptr + 480 + 576 + 0, undefined);
        A.store.Ref(ptr + 480 + 576 + 4, undefined);
        A.store.Ref(ptr + 480 + 576 + 8, undefined);
        A.store.Ref(ptr + 480 + 576 + 12, undefined);
        A.store.Ref(ptr + 480 + 576 + 16, undefined);
        A.store.Ref(ptr + 480 + 576 + 20, undefined);
        A.store.Bool(ptr + 480 + 576 + 26, false);
        A.store.Bool(ptr + 480 + 576 + 24, false);
        A.store.Bool(ptr + 480 + 576 + 27, false);
        A.store.Bool(ptr + 480 + 576 + 25, false);

        A.store.Bool(ptr + 480 + 608 + 21, false);
        A.store.Bool(ptr + 480 + 608 + 14, false);
        A.store.Bool(ptr + 480 + 608 + 0, false);
        A.store.Ref(ptr + 480 + 608 + 4, undefined);
        A.store.Bool(ptr + 480 + 608 + 15, false);
        A.store.Bool(ptr + 480 + 608 + 8, false);
        A.store.Bool(ptr + 480 + 608 + 16, false);
        A.store.Bool(ptr + 480 + 608 + 9, false);
        A.store.Bool(ptr + 480 + 608 + 17, false);
        A.store.Bool(ptr + 480 + 608 + 10, false);
        A.store.Bool(ptr + 480 + 608 + 18, false);
        A.store.Bool(ptr + 480 + 608 + 11, false);
        A.store.Bool(ptr + 480 + 608 + 19, false);
        A.store.Bool(ptr + 480 + 608 + 12, false);
        A.store.Bool(ptr + 480 + 608 + 20, false);
        A.store.Bool(ptr + 480 + 608 + 13, false);

        A.store.Bool(ptr + 480 + 632 + 28, false);
        A.store.Ref(ptr + 480 + 632 + 0, undefined);
        A.store.Ref(ptr + 480 + 632 + 4, undefined);
        A.store.Ref(ptr + 480 + 632 + 8, undefined);
        A.store.Ref(ptr + 480 + 632 + 12, undefined);
        A.store.Ref(ptr + 480 + 632 + 16, undefined);
        A.store.Ref(ptr + 480 + 632 + 20, undefined);
        A.store.Bool(ptr + 480 + 632 + 26, false);
        A.store.Bool(ptr + 480 + 632 + 24, false);
        A.store.Bool(ptr + 480 + 632 + 27, false);
        A.store.Bool(ptr + 480 + 632 + 25, false);

        A.store.Bool(ptr + 480 + 664 + 28, false);
        A.store.Ref(ptr + 480 + 664 + 0, undefined);
        A.store.Ref(ptr + 480 + 664 + 4, undefined);
        A.store.Ref(ptr + 480 + 664 + 8, undefined);
        A.store.Ref(ptr + 480 + 664 + 12, undefined);
        A.store.Ref(ptr + 480 + 664 + 16, undefined);
        A.store.Ref(ptr + 480 + 664 + 20, undefined);
        A.store.Bool(ptr + 480 + 664 + 26, false);
        A.store.Bool(ptr + 480 + 664 + 24, false);
        A.store.Bool(ptr + 480 + 664 + 27, false);
        A.store.Bool(ptr + 480 + 664 + 25, false);

        A.store.Bool(ptr + 480 + 696 + 28, false);
        A.store.Ref(ptr + 480 + 696 + 0, undefined);
        A.store.Ref(ptr + 480 + 696 + 4, undefined);
        A.store.Ref(ptr + 480 + 696 + 8, undefined);
        A.store.Ref(ptr + 480 + 696 + 12, undefined);
        A.store.Ref(ptr + 480 + 696 + 16, undefined);
        A.store.Ref(ptr + 480 + 696 + 20, undefined);
        A.store.Bool(ptr + 480 + 696 + 26, false);
        A.store.Bool(ptr + 480 + 696 + 24, false);
        A.store.Bool(ptr + 480 + 696 + 27, false);
        A.store.Bool(ptr + 480 + 696 + 25, false);

        A.store.Bool(ptr + 480 + 728 + 28, false);
        A.store.Ref(ptr + 480 + 728 + 0, undefined);
        A.store.Ref(ptr + 480 + 728 + 4, undefined);
        A.store.Ref(ptr + 480 + 728 + 8, undefined);
        A.store.Ref(ptr + 480 + 728 + 12, undefined);
        A.store.Ref(ptr + 480 + 728 + 16, undefined);
        A.store.Ref(ptr + 480 + 728 + 20, undefined);
        A.store.Bool(ptr + 480 + 728 + 26, false);
        A.store.Bool(ptr + 480 + 728 + 24, false);
        A.store.Bool(ptr + 480 + 728 + 27, false);
        A.store.Bool(ptr + 480 + 728 + 25, false);

        A.store.Bool(ptr + 480 + 760 + 21, false);
        A.store.Bool(ptr + 480 + 760 + 14, false);
        A.store.Bool(ptr + 480 + 760 + 0, false);
        A.store.Ref(ptr + 480 + 760 + 4, undefined);
        A.store.Bool(ptr + 480 + 760 + 15, false);
        A.store.Bool(ptr + 480 + 760 + 8, false);
        A.store.Bool(ptr + 480 + 760 + 16, false);
        A.store.Bool(ptr + 480 + 760 + 9, false);
        A.store.Bool(ptr + 480 + 760 + 17, false);
        A.store.Bool(ptr + 480 + 760 + 10, false);
        A.store.Bool(ptr + 480 + 760 + 18, false);
        A.store.Bool(ptr + 480 + 760 + 11, false);
        A.store.Bool(ptr + 480 + 760 + 19, false);
        A.store.Bool(ptr + 480 + 760 + 12, false);
        A.store.Bool(ptr + 480 + 760 + 20, false);
        A.store.Bool(ptr + 480 + 760 + 13, false);

        A.store.Bool(ptr + 480 + 784 + 21, false);
        A.store.Bool(ptr + 480 + 784 + 14, false);
        A.store.Bool(ptr + 480 + 784 + 0, false);
        A.store.Ref(ptr + 480 + 784 + 4, undefined);
        A.store.Bool(ptr + 480 + 784 + 15, false);
        A.store.Bool(ptr + 480 + 784 + 8, false);
        A.store.Bool(ptr + 480 + 784 + 16, false);
        A.store.Bool(ptr + 480 + 784 + 9, false);
        A.store.Bool(ptr + 480 + 784 + 17, false);
        A.store.Bool(ptr + 480 + 784 + 10, false);
        A.store.Bool(ptr + 480 + 784 + 18, false);
        A.store.Bool(ptr + 480 + 784 + 11, false);
        A.store.Bool(ptr + 480 + 784 + 19, false);
        A.store.Bool(ptr + 480 + 784 + 12, false);
        A.store.Bool(ptr + 480 + 784 + 20, false);
        A.store.Bool(ptr + 480 + 784 + 13, false);

        A.store.Bool(ptr + 1288 + 28, false);
        A.store.Ref(ptr + 1288 + 0, undefined);
        A.store.Ref(ptr + 1288 + 4, undefined);
        A.store.Ref(ptr + 1288 + 8, undefined);
        A.store.Ref(ptr + 1288 + 12, undefined);
        A.store.Ref(ptr + 1288 + 16, undefined);
        A.store.Ref(ptr + 1288 + 20, undefined);
        A.store.Bool(ptr + 1288 + 26, false);
        A.store.Bool(ptr + 1288 + 24, false);
        A.store.Bool(ptr + 1288 + 27, false);
        A.store.Bool(ptr + 1288 + 25, false);

        A.store.Bool(ptr + 1320 + 33, false);
        A.store.Bool(ptr + 1320 + 26, false);
        A.store.Int32(ptr + 1320 + 0, 0);
        A.store.Ref(ptr + 1320 + 4, undefined);
        A.store.Bool(ptr + 1320 + 27, false);
        A.store.Int32(ptr + 1320 + 8, 0);
        A.store.Bool(ptr + 1320 + 28, false);
        A.store.Int32(ptr + 1320 + 12, 0);
        A.store.Bool(ptr + 1320 + 29, false);
        A.store.Int32(ptr + 1320 + 16, 0);
        A.store.Bool(ptr + 1320 + 30, false);
        A.store.Int32(ptr + 1320 + 20, 0);
        A.store.Bool(ptr + 1320 + 31, false);
        A.store.Bool(ptr + 1320 + 24, false);
        A.store.Bool(ptr + 1320 + 32, false);
        A.store.Bool(ptr + 1320 + 25, false);

        A.store.Bool(ptr + 1356 + 28, false);
        A.store.Ref(ptr + 1356 + 0, undefined);
        A.store.Ref(ptr + 1356 + 4, undefined);
        A.store.Ref(ptr + 1356 + 8, undefined);
        A.store.Ref(ptr + 1356 + 12, undefined);
        A.store.Ref(ptr + 1356 + 16, undefined);
        A.store.Ref(ptr + 1356 + 20, undefined);
        A.store.Bool(ptr + 1356 + 26, false);
        A.store.Bool(ptr + 1356 + 24, false);
        A.store.Bool(ptr + 1356 + 27, false);
        A.store.Bool(ptr + 1356 + 25, false);

        A.store.Bool(ptr + 1388 + 21, false);
        A.store.Bool(ptr + 1388 + 14, false);
        A.store.Bool(ptr + 1388 + 0, false);
        A.store.Ref(ptr + 1388 + 4, undefined);
        A.store.Bool(ptr + 1388 + 15, false);
        A.store.Bool(ptr + 1388 + 8, false);
        A.store.Bool(ptr + 1388 + 16, false);
        A.store.Bool(ptr + 1388 + 9, false);
        A.store.Bool(ptr + 1388 + 17, false);
        A.store.Bool(ptr + 1388 + 10, false);
        A.store.Bool(ptr + 1388 + 18, false);
        A.store.Bool(ptr + 1388 + 11, false);
        A.store.Bool(ptr + 1388 + 19, false);
        A.store.Bool(ptr + 1388 + 12, false);
        A.store.Bool(ptr + 1388 + 20, false);
        A.store.Bool(ptr + 1388 + 13, false);

        A.store.Bool(ptr + 1412 + 28, false);
        A.store.Ref(ptr + 1412 + 0, undefined);
        A.store.Ref(ptr + 1412 + 4, undefined);
        A.store.Ref(ptr + 1412 + 8, undefined);
        A.store.Ref(ptr + 1412 + 12, undefined);
        A.store.Ref(ptr + 1412 + 16, undefined);
        A.store.Ref(ptr + 1412 + 20, undefined);
        A.store.Bool(ptr + 1412 + 26, false);
        A.store.Bool(ptr + 1412 + 24, false);
        A.store.Bool(ptr + 1412 + 27, false);
        A.store.Bool(ptr + 1412 + 25, false);

        A.store.Bool(ptr + 1444 + 28, false);
        A.store.Ref(ptr + 1444 + 0, undefined);
        A.store.Ref(ptr + 1444 + 4, undefined);
        A.store.Ref(ptr + 1444 + 8, undefined);
        A.store.Ref(ptr + 1444 + 12, undefined);
        A.store.Ref(ptr + 1444 + 16, undefined);
        A.store.Ref(ptr + 1444 + 20, undefined);
        A.store.Bool(ptr + 1444 + 26, false);
        A.store.Bool(ptr + 1444 + 24, false);
        A.store.Bool(ptr + 1444 + 27, false);
        A.store.Bool(ptr + 1444 + 25, false);

        A.store.Bool(ptr + 1476 + 85, false);

        A.store.Bool(ptr + 1476 + 0 + 28, false);
        A.store.Ref(ptr + 1476 + 0 + 0, undefined);
        A.store.Ref(ptr + 1476 + 0 + 4, undefined);
        A.store.Ref(ptr + 1476 + 0 + 8, undefined);
        A.store.Ref(ptr + 1476 + 0 + 12, undefined);
        A.store.Ref(ptr + 1476 + 0 + 16, undefined);
        A.store.Ref(ptr + 1476 + 0 + 20, undefined);
        A.store.Bool(ptr + 1476 + 0 + 26, false);
        A.store.Bool(ptr + 1476 + 0 + 24, false);
        A.store.Bool(ptr + 1476 + 0 + 27, false);
        A.store.Bool(ptr + 1476 + 0 + 25, false);

        A.store.Bool(ptr + 1476 + 32 + 21, false);
        A.store.Bool(ptr + 1476 + 32 + 14, false);
        A.store.Bool(ptr + 1476 + 32 + 0, false);
        A.store.Ref(ptr + 1476 + 32 + 4, undefined);
        A.store.Bool(ptr + 1476 + 32 + 15, false);
        A.store.Bool(ptr + 1476 + 32 + 8, false);
        A.store.Bool(ptr + 1476 + 32 + 16, false);
        A.store.Bool(ptr + 1476 + 32 + 9, false);
        A.store.Bool(ptr + 1476 + 32 + 17, false);
        A.store.Bool(ptr + 1476 + 32 + 10, false);
        A.store.Bool(ptr + 1476 + 32 + 18, false);
        A.store.Bool(ptr + 1476 + 32 + 11, false);
        A.store.Bool(ptr + 1476 + 32 + 19, false);
        A.store.Bool(ptr + 1476 + 32 + 12, false);
        A.store.Bool(ptr + 1476 + 32 + 20, false);
        A.store.Bool(ptr + 1476 + 32 + 13, false);

        A.store.Bool(ptr + 1476 + 56 + 28, false);
        A.store.Ref(ptr + 1476 + 56 + 0, undefined);
        A.store.Ref(ptr + 1476 + 56 + 4, undefined);
        A.store.Ref(ptr + 1476 + 56 + 8, undefined);
        A.store.Ref(ptr + 1476 + 56 + 12, undefined);
        A.store.Ref(ptr + 1476 + 56 + 16, undefined);
        A.store.Ref(ptr + 1476 + 56 + 20, undefined);
        A.store.Bool(ptr + 1476 + 56 + 26, false);
        A.store.Bool(ptr + 1476 + 56 + 24, false);
        A.store.Bool(ptr + 1476 + 56 + 27, false);
        A.store.Bool(ptr + 1476 + 56 + 25, false);
      } else {
        A.store.Bool(ptr + 1562, true);

        if (typeof x["AuthenticationType"] === "undefined") {
          A.store.Bool(ptr + 0 + 28, false);
          A.store.Ref(ptr + 0 + 0, undefined);
          A.store.Ref(ptr + 0 + 4, undefined);
          A.store.Ref(ptr + 0 + 8, undefined);
          A.store.Ref(ptr + 0 + 12, undefined);
          A.store.Ref(ptr + 0 + 16, undefined);
          A.store.Ref(ptr + 0 + 20, undefined);
          A.store.Bool(ptr + 0 + 26, false);
          A.store.Bool(ptr + 0 + 24, false);
          A.store.Bool(ptr + 0 + 27, false);
          A.store.Bool(ptr + 0 + 25, false);
        } else {
          A.store.Bool(ptr + 0 + 28, true);
          A.store.Ref(ptr + 0 + 0, x["AuthenticationType"]["Active"]);
          A.store.Ref(ptr + 0 + 4, x["AuthenticationType"]["Effective"]);
          A.store.Ref(ptr + 0 + 8, x["AuthenticationType"]["UserPolicy"]);
          A.store.Ref(ptr + 0 + 12, x["AuthenticationType"]["DevicePolicy"]);
          A.store.Ref(ptr + 0 + 16, x["AuthenticationType"]["UserSetting"]);
          A.store.Ref(ptr + 0 + 20, x["AuthenticationType"]["SharedSetting"]);
          A.store.Bool(ptr + 0 + 26, "UserEditable" in x["AuthenticationType"] ? true : false);
          A.store.Bool(ptr + 0 + 24, x["AuthenticationType"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 0 + 27, "DeviceEditable" in x["AuthenticationType"] ? true : false);
          A.store.Bool(ptr + 0 + 25, x["AuthenticationType"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["ClientCertPattern"] === "undefined") {
          A.store.Bool(ptr + 32 + 318, false);

          A.store.Bool(ptr + 32 + 0 + 28, false);
          A.store.Ref(ptr + 32 + 0 + 0, undefined);
          A.store.Ref(ptr + 32 + 0 + 4, undefined);
          A.store.Ref(ptr + 32 + 0 + 8, undefined);
          A.store.Ref(ptr + 32 + 0 + 12, undefined);
          A.store.Ref(ptr + 32 + 0 + 16, undefined);
          A.store.Ref(ptr + 32 + 0 + 20, undefined);
          A.store.Bool(ptr + 32 + 0 + 26, false);
          A.store.Bool(ptr + 32 + 0 + 24, false);
          A.store.Bool(ptr + 32 + 0 + 27, false);
          A.store.Bool(ptr + 32 + 0 + 25, false);

          A.store.Bool(ptr + 32 + 32 + 125, false);

          A.store.Bool(ptr + 32 + 32 + 0 + 28, false);
          A.store.Ref(ptr + 32 + 32 + 0 + 0, undefined);
          A.store.Ref(ptr + 32 + 32 + 0 + 4, undefined);
          A.store.Ref(ptr + 32 + 32 + 0 + 8, undefined);
          A.store.Ref(ptr + 32 + 32 + 0 + 12, undefined);
          A.store.Ref(ptr + 32 + 32 + 0 + 16, undefined);
          A.store.Ref(ptr + 32 + 32 + 0 + 20, undefined);
          A.store.Bool(ptr + 32 + 32 + 0 + 26, false);
          A.store.Bool(ptr + 32 + 32 + 0 + 24, false);
          A.store.Bool(ptr + 32 + 32 + 0 + 27, false);
          A.store.Bool(ptr + 32 + 32 + 0 + 25, false);

          A.store.Bool(ptr + 32 + 32 + 32 + 28, false);
          A.store.Ref(ptr + 32 + 32 + 32 + 0, undefined);
          A.store.Ref(ptr + 32 + 32 + 32 + 4, undefined);
          A.store.Ref(ptr + 32 + 32 + 32 + 8, undefined);
          A.store.Ref(ptr + 32 + 32 + 32 + 12, undefined);
          A.store.Ref(ptr + 32 + 32 + 32 + 16, undefined);
          A.store.Ref(ptr + 32 + 32 + 32 + 20, undefined);
          A.store.Bool(ptr + 32 + 32 + 32 + 26, false);
          A.store.Bool(ptr + 32 + 32 + 32 + 24, false);
          A.store.Bool(ptr + 32 + 32 + 32 + 27, false);
          A.store.Bool(ptr + 32 + 32 + 32 + 25, false);

          A.store.Bool(ptr + 32 + 32 + 64 + 28, false);
          A.store.Ref(ptr + 32 + 32 + 64 + 0, undefined);
          A.store.Ref(ptr + 32 + 32 + 64 + 4, undefined);
          A.store.Ref(ptr + 32 + 32 + 64 + 8, undefined);
          A.store.Ref(ptr + 32 + 32 + 64 + 12, undefined);
          A.store.Ref(ptr + 32 + 32 + 64 + 16, undefined);
          A.store.Ref(ptr + 32 + 32 + 64 + 20, undefined);
          A.store.Bool(ptr + 32 + 32 + 64 + 26, false);
          A.store.Bool(ptr + 32 + 32 + 64 + 24, false);
          A.store.Bool(ptr + 32 + 32 + 64 + 27, false);
          A.store.Bool(ptr + 32 + 32 + 64 + 25, false);

          A.store.Bool(ptr + 32 + 32 + 96 + 28, false);
          A.store.Ref(ptr + 32 + 32 + 96 + 0, undefined);
          A.store.Ref(ptr + 32 + 32 + 96 + 4, undefined);
          A.store.Ref(ptr + 32 + 32 + 96 + 8, undefined);
          A.store.Ref(ptr + 32 + 32 + 96 + 12, undefined);
          A.store.Ref(ptr + 32 + 32 + 96 + 16, undefined);
          A.store.Ref(ptr + 32 + 32 + 96 + 20, undefined);
          A.store.Bool(ptr + 32 + 32 + 96 + 26, false);
          A.store.Bool(ptr + 32 + 32 + 96 + 24, false);
          A.store.Bool(ptr + 32 + 32 + 96 + 27, false);
          A.store.Bool(ptr + 32 + 32 + 96 + 25, false);

          A.store.Bool(ptr + 32 + 160 + 28, false);
          A.store.Ref(ptr + 32 + 160 + 0, undefined);
          A.store.Ref(ptr + 32 + 160 + 4, undefined);
          A.store.Ref(ptr + 32 + 160 + 8, undefined);
          A.store.Ref(ptr + 32 + 160 + 12, undefined);
          A.store.Ref(ptr + 32 + 160 + 16, undefined);
          A.store.Ref(ptr + 32 + 160 + 20, undefined);
          A.store.Bool(ptr + 32 + 160 + 26, false);
          A.store.Bool(ptr + 32 + 160 + 24, false);
          A.store.Bool(ptr + 32 + 160 + 27, false);
          A.store.Bool(ptr + 32 + 160 + 25, false);

          A.store.Bool(ptr + 32 + 192 + 125, false);

          A.store.Bool(ptr + 32 + 192 + 0 + 28, false);
          A.store.Ref(ptr + 32 + 192 + 0 + 0, undefined);
          A.store.Ref(ptr + 32 + 192 + 0 + 4, undefined);
          A.store.Ref(ptr + 32 + 192 + 0 + 8, undefined);
          A.store.Ref(ptr + 32 + 192 + 0 + 12, undefined);
          A.store.Ref(ptr + 32 + 192 + 0 + 16, undefined);
          A.store.Ref(ptr + 32 + 192 + 0 + 20, undefined);
          A.store.Bool(ptr + 32 + 192 + 0 + 26, false);
          A.store.Bool(ptr + 32 + 192 + 0 + 24, false);
          A.store.Bool(ptr + 32 + 192 + 0 + 27, false);
          A.store.Bool(ptr + 32 + 192 + 0 + 25, false);

          A.store.Bool(ptr + 32 + 192 + 32 + 28, false);
          A.store.Ref(ptr + 32 + 192 + 32 + 0, undefined);
          A.store.Ref(ptr + 32 + 192 + 32 + 4, undefined);
          A.store.Ref(ptr + 32 + 192 + 32 + 8, undefined);
          A.store.Ref(ptr + 32 + 192 + 32 + 12, undefined);
          A.store.Ref(ptr + 32 + 192 + 32 + 16, undefined);
          A.store.Ref(ptr + 32 + 192 + 32 + 20, undefined);
          A.store.Bool(ptr + 32 + 192 + 32 + 26, false);
          A.store.Bool(ptr + 32 + 192 + 32 + 24, false);
          A.store.Bool(ptr + 32 + 192 + 32 + 27, false);
          A.store.Bool(ptr + 32 + 192 + 32 + 25, false);

          A.store.Bool(ptr + 32 + 192 + 64 + 28, false);
          A.store.Ref(ptr + 32 + 192 + 64 + 0, undefined);
          A.store.Ref(ptr + 32 + 192 + 64 + 4, undefined);
          A.store.Ref(ptr + 32 + 192 + 64 + 8, undefined);
          A.store.Ref(ptr + 32 + 192 + 64 + 12, undefined);
          A.store.Ref(ptr + 32 + 192 + 64 + 16, undefined);
          A.store.Ref(ptr + 32 + 192 + 64 + 20, undefined);
          A.store.Bool(ptr + 32 + 192 + 64 + 26, false);
          A.store.Bool(ptr + 32 + 192 + 64 + 24, false);
          A.store.Bool(ptr + 32 + 192 + 64 + 27, false);
          A.store.Bool(ptr + 32 + 192 + 64 + 25, false);

          A.store.Bool(ptr + 32 + 192 + 96 + 28, false);
          A.store.Ref(ptr + 32 + 192 + 96 + 0, undefined);
          A.store.Ref(ptr + 32 + 192 + 96 + 4, undefined);
          A.store.Ref(ptr + 32 + 192 + 96 + 8, undefined);
          A.store.Ref(ptr + 32 + 192 + 96 + 12, undefined);
          A.store.Ref(ptr + 32 + 192 + 96 + 16, undefined);
          A.store.Ref(ptr + 32 + 192 + 96 + 20, undefined);
          A.store.Bool(ptr + 32 + 192 + 96 + 26, false);
          A.store.Bool(ptr + 32 + 192 + 96 + 24, false);
          A.store.Bool(ptr + 32 + 192 + 96 + 27, false);
          A.store.Bool(ptr + 32 + 192 + 96 + 25, false);
        } else {
          A.store.Bool(ptr + 32 + 318, true);

          if (typeof x["ClientCertPattern"]["EnrollmentURI"] === "undefined") {
            A.store.Bool(ptr + 32 + 0 + 28, false);
            A.store.Ref(ptr + 32 + 0 + 0, undefined);
            A.store.Ref(ptr + 32 + 0 + 4, undefined);
            A.store.Ref(ptr + 32 + 0 + 8, undefined);
            A.store.Ref(ptr + 32 + 0 + 12, undefined);
            A.store.Ref(ptr + 32 + 0 + 16, undefined);
            A.store.Ref(ptr + 32 + 0 + 20, undefined);
            A.store.Bool(ptr + 32 + 0 + 26, false);
            A.store.Bool(ptr + 32 + 0 + 24, false);
            A.store.Bool(ptr + 32 + 0 + 27, false);
            A.store.Bool(ptr + 32 + 0 + 25, false);
          } else {
            A.store.Bool(ptr + 32 + 0 + 28, true);
            A.store.Ref(ptr + 32 + 0 + 0, x["ClientCertPattern"]["EnrollmentURI"]["Active"]);
            A.store.Ref(ptr + 32 + 0 + 4, x["ClientCertPattern"]["EnrollmentURI"]["Effective"]);
            A.store.Ref(ptr + 32 + 0 + 8, x["ClientCertPattern"]["EnrollmentURI"]["UserPolicy"]);
            A.store.Ref(ptr + 32 + 0 + 12, x["ClientCertPattern"]["EnrollmentURI"]["DevicePolicy"]);
            A.store.Ref(ptr + 32 + 0 + 16, x["ClientCertPattern"]["EnrollmentURI"]["UserSetting"]);
            A.store.Ref(ptr + 32 + 0 + 20, x["ClientCertPattern"]["EnrollmentURI"]["SharedSetting"]);
            A.store.Bool(ptr + 32 + 0 + 26, "UserEditable" in x["ClientCertPattern"]["EnrollmentURI"] ? true : false);
            A.store.Bool(ptr + 32 + 0 + 24, x["ClientCertPattern"]["EnrollmentURI"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 32 + 0 + 27, "DeviceEditable" in x["ClientCertPattern"]["EnrollmentURI"] ? true : false);
            A.store.Bool(ptr + 32 + 0 + 25, x["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["ClientCertPattern"]["Issuer"] === "undefined") {
            A.store.Bool(ptr + 32 + 32 + 125, false);

            A.store.Bool(ptr + 32 + 32 + 0 + 28, false);
            A.store.Ref(ptr + 32 + 32 + 0 + 0, undefined);
            A.store.Ref(ptr + 32 + 32 + 0 + 4, undefined);
            A.store.Ref(ptr + 32 + 32 + 0 + 8, undefined);
            A.store.Ref(ptr + 32 + 32 + 0 + 12, undefined);
            A.store.Ref(ptr + 32 + 32 + 0 + 16, undefined);
            A.store.Ref(ptr + 32 + 32 + 0 + 20, undefined);
            A.store.Bool(ptr + 32 + 32 + 0 + 26, false);
            A.store.Bool(ptr + 32 + 32 + 0 + 24, false);
            A.store.Bool(ptr + 32 + 32 + 0 + 27, false);
            A.store.Bool(ptr + 32 + 32 + 0 + 25, false);

            A.store.Bool(ptr + 32 + 32 + 32 + 28, false);
            A.store.Ref(ptr + 32 + 32 + 32 + 0, undefined);
            A.store.Ref(ptr + 32 + 32 + 32 + 4, undefined);
            A.store.Ref(ptr + 32 + 32 + 32 + 8, undefined);
            A.store.Ref(ptr + 32 + 32 + 32 + 12, undefined);
            A.store.Ref(ptr + 32 + 32 + 32 + 16, undefined);
            A.store.Ref(ptr + 32 + 32 + 32 + 20, undefined);
            A.store.Bool(ptr + 32 + 32 + 32 + 26, false);
            A.store.Bool(ptr + 32 + 32 + 32 + 24, false);
            A.store.Bool(ptr + 32 + 32 + 32 + 27, false);
            A.store.Bool(ptr + 32 + 32 + 32 + 25, false);

            A.store.Bool(ptr + 32 + 32 + 64 + 28, false);
            A.store.Ref(ptr + 32 + 32 + 64 + 0, undefined);
            A.store.Ref(ptr + 32 + 32 + 64 + 4, undefined);
            A.store.Ref(ptr + 32 + 32 + 64 + 8, undefined);
            A.store.Ref(ptr + 32 + 32 + 64 + 12, undefined);
            A.store.Ref(ptr + 32 + 32 + 64 + 16, undefined);
            A.store.Ref(ptr + 32 + 32 + 64 + 20, undefined);
            A.store.Bool(ptr + 32 + 32 + 64 + 26, false);
            A.store.Bool(ptr + 32 + 32 + 64 + 24, false);
            A.store.Bool(ptr + 32 + 32 + 64 + 27, false);
            A.store.Bool(ptr + 32 + 32 + 64 + 25, false);

            A.store.Bool(ptr + 32 + 32 + 96 + 28, false);
            A.store.Ref(ptr + 32 + 32 + 96 + 0, undefined);
            A.store.Ref(ptr + 32 + 32 + 96 + 4, undefined);
            A.store.Ref(ptr + 32 + 32 + 96 + 8, undefined);
            A.store.Ref(ptr + 32 + 32 + 96 + 12, undefined);
            A.store.Ref(ptr + 32 + 32 + 96 + 16, undefined);
            A.store.Ref(ptr + 32 + 32 + 96 + 20, undefined);
            A.store.Bool(ptr + 32 + 32 + 96 + 26, false);
            A.store.Bool(ptr + 32 + 32 + 96 + 24, false);
            A.store.Bool(ptr + 32 + 32 + 96 + 27, false);
            A.store.Bool(ptr + 32 + 32 + 96 + 25, false);
          } else {
            A.store.Bool(ptr + 32 + 32 + 125, true);

            if (typeof x["ClientCertPattern"]["Issuer"]["CommonName"] === "undefined") {
              A.store.Bool(ptr + 32 + 32 + 0 + 28, false);
              A.store.Ref(ptr + 32 + 32 + 0 + 0, undefined);
              A.store.Ref(ptr + 32 + 32 + 0 + 4, undefined);
              A.store.Ref(ptr + 32 + 32 + 0 + 8, undefined);
              A.store.Ref(ptr + 32 + 32 + 0 + 12, undefined);
              A.store.Ref(ptr + 32 + 32 + 0 + 16, undefined);
              A.store.Ref(ptr + 32 + 32 + 0 + 20, undefined);
              A.store.Bool(ptr + 32 + 32 + 0 + 26, false);
              A.store.Bool(ptr + 32 + 32 + 0 + 24, false);
              A.store.Bool(ptr + 32 + 32 + 0 + 27, false);
              A.store.Bool(ptr + 32 + 32 + 0 + 25, false);
            } else {
              A.store.Bool(ptr + 32 + 32 + 0 + 28, true);
              A.store.Ref(ptr + 32 + 32 + 0 + 0, x["ClientCertPattern"]["Issuer"]["CommonName"]["Active"]);
              A.store.Ref(ptr + 32 + 32 + 0 + 4, x["ClientCertPattern"]["Issuer"]["CommonName"]["Effective"]);
              A.store.Ref(ptr + 32 + 32 + 0 + 8, x["ClientCertPattern"]["Issuer"]["CommonName"]["UserPolicy"]);
              A.store.Ref(ptr + 32 + 32 + 0 + 12, x["ClientCertPattern"]["Issuer"]["CommonName"]["DevicePolicy"]);
              A.store.Ref(ptr + 32 + 32 + 0 + 16, x["ClientCertPattern"]["Issuer"]["CommonName"]["UserSetting"]);
              A.store.Ref(ptr + 32 + 32 + 0 + 20, x["ClientCertPattern"]["Issuer"]["CommonName"]["SharedSetting"]);
              A.store.Bool(
                ptr + 32 + 32 + 0 + 26,
                "UserEditable" in x["ClientCertPattern"]["Issuer"]["CommonName"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 32 + 0 + 24,
                x["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 32 + 0 + 27,
                "DeviceEditable" in x["ClientCertPattern"]["Issuer"]["CommonName"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 32 + 0 + 25,
                x["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["ClientCertPattern"]["Issuer"]["Locality"] === "undefined") {
              A.store.Bool(ptr + 32 + 32 + 32 + 28, false);
              A.store.Ref(ptr + 32 + 32 + 32 + 0, undefined);
              A.store.Ref(ptr + 32 + 32 + 32 + 4, undefined);
              A.store.Ref(ptr + 32 + 32 + 32 + 8, undefined);
              A.store.Ref(ptr + 32 + 32 + 32 + 12, undefined);
              A.store.Ref(ptr + 32 + 32 + 32 + 16, undefined);
              A.store.Ref(ptr + 32 + 32 + 32 + 20, undefined);
              A.store.Bool(ptr + 32 + 32 + 32 + 26, false);
              A.store.Bool(ptr + 32 + 32 + 32 + 24, false);
              A.store.Bool(ptr + 32 + 32 + 32 + 27, false);
              A.store.Bool(ptr + 32 + 32 + 32 + 25, false);
            } else {
              A.store.Bool(ptr + 32 + 32 + 32 + 28, true);
              A.store.Ref(ptr + 32 + 32 + 32 + 0, x["ClientCertPattern"]["Issuer"]["Locality"]["Active"]);
              A.store.Ref(ptr + 32 + 32 + 32 + 4, x["ClientCertPattern"]["Issuer"]["Locality"]["Effective"]);
              A.store.Ref(ptr + 32 + 32 + 32 + 8, x["ClientCertPattern"]["Issuer"]["Locality"]["UserPolicy"]);
              A.store.Ref(ptr + 32 + 32 + 32 + 12, x["ClientCertPattern"]["Issuer"]["Locality"]["DevicePolicy"]);
              A.store.Ref(ptr + 32 + 32 + 32 + 16, x["ClientCertPattern"]["Issuer"]["Locality"]["UserSetting"]);
              A.store.Ref(ptr + 32 + 32 + 32 + 20, x["ClientCertPattern"]["Issuer"]["Locality"]["SharedSetting"]);
              A.store.Bool(
                ptr + 32 + 32 + 32 + 26,
                "UserEditable" in x["ClientCertPattern"]["Issuer"]["Locality"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 32 + 32 + 24,
                x["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 32 + 32 + 27,
                "DeviceEditable" in x["ClientCertPattern"]["Issuer"]["Locality"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 32 + 32 + 25,
                x["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["ClientCertPattern"]["Issuer"]["Organization"] === "undefined") {
              A.store.Bool(ptr + 32 + 32 + 64 + 28, false);
              A.store.Ref(ptr + 32 + 32 + 64 + 0, undefined);
              A.store.Ref(ptr + 32 + 32 + 64 + 4, undefined);
              A.store.Ref(ptr + 32 + 32 + 64 + 8, undefined);
              A.store.Ref(ptr + 32 + 32 + 64 + 12, undefined);
              A.store.Ref(ptr + 32 + 32 + 64 + 16, undefined);
              A.store.Ref(ptr + 32 + 32 + 64 + 20, undefined);
              A.store.Bool(ptr + 32 + 32 + 64 + 26, false);
              A.store.Bool(ptr + 32 + 32 + 64 + 24, false);
              A.store.Bool(ptr + 32 + 32 + 64 + 27, false);
              A.store.Bool(ptr + 32 + 32 + 64 + 25, false);
            } else {
              A.store.Bool(ptr + 32 + 32 + 64 + 28, true);
              A.store.Ref(ptr + 32 + 32 + 64 + 0, x["ClientCertPattern"]["Issuer"]["Organization"]["Active"]);
              A.store.Ref(ptr + 32 + 32 + 64 + 4, x["ClientCertPattern"]["Issuer"]["Organization"]["Effective"]);
              A.store.Ref(ptr + 32 + 32 + 64 + 8, x["ClientCertPattern"]["Issuer"]["Organization"]["UserPolicy"]);
              A.store.Ref(ptr + 32 + 32 + 64 + 12, x["ClientCertPattern"]["Issuer"]["Organization"]["DevicePolicy"]);
              A.store.Ref(ptr + 32 + 32 + 64 + 16, x["ClientCertPattern"]["Issuer"]["Organization"]["UserSetting"]);
              A.store.Ref(ptr + 32 + 32 + 64 + 20, x["ClientCertPattern"]["Issuer"]["Organization"]["SharedSetting"]);
              A.store.Bool(
                ptr + 32 + 32 + 64 + 26,
                "UserEditable" in x["ClientCertPattern"]["Issuer"]["Organization"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 32 + 64 + 24,
                x["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 32 + 64 + 27,
                "DeviceEditable" in x["ClientCertPattern"]["Issuer"]["Organization"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 32 + 64 + 25,
                x["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] === "undefined") {
              A.store.Bool(ptr + 32 + 32 + 96 + 28, false);
              A.store.Ref(ptr + 32 + 32 + 96 + 0, undefined);
              A.store.Ref(ptr + 32 + 32 + 96 + 4, undefined);
              A.store.Ref(ptr + 32 + 32 + 96 + 8, undefined);
              A.store.Ref(ptr + 32 + 32 + 96 + 12, undefined);
              A.store.Ref(ptr + 32 + 32 + 96 + 16, undefined);
              A.store.Ref(ptr + 32 + 32 + 96 + 20, undefined);
              A.store.Bool(ptr + 32 + 32 + 96 + 26, false);
              A.store.Bool(ptr + 32 + 32 + 96 + 24, false);
              A.store.Bool(ptr + 32 + 32 + 96 + 27, false);
              A.store.Bool(ptr + 32 + 32 + 96 + 25, false);
            } else {
              A.store.Bool(ptr + 32 + 32 + 96 + 28, true);
              A.store.Ref(ptr + 32 + 32 + 96 + 0, x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Active"]);
              A.store.Ref(ptr + 32 + 32 + 96 + 4, x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Effective"]);
              A.store.Ref(ptr + 32 + 32 + 96 + 8, x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserPolicy"]);
              A.store.Ref(
                ptr + 32 + 32 + 96 + 12,
                x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DevicePolicy"]
              );
              A.store.Ref(
                ptr + 32 + 32 + 96 + 16,
                x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserSetting"]
              );
              A.store.Ref(
                ptr + 32 + 32 + 96 + 20,
                x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["SharedSetting"]
              );
              A.store.Bool(
                ptr + 32 + 32 + 96 + 26,
                "UserEditable" in x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 32 + 96 + 24,
                x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 32 + 96 + 27,
                "DeviceEditable" in x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 32 + 96 + 25,
                x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"] ? true : false
              );
            }
          }

          if (typeof x["ClientCertPattern"]["IssuerCARef"] === "undefined") {
            A.store.Bool(ptr + 32 + 160 + 28, false);
            A.store.Ref(ptr + 32 + 160 + 0, undefined);
            A.store.Ref(ptr + 32 + 160 + 4, undefined);
            A.store.Ref(ptr + 32 + 160 + 8, undefined);
            A.store.Ref(ptr + 32 + 160 + 12, undefined);
            A.store.Ref(ptr + 32 + 160 + 16, undefined);
            A.store.Ref(ptr + 32 + 160 + 20, undefined);
            A.store.Bool(ptr + 32 + 160 + 26, false);
            A.store.Bool(ptr + 32 + 160 + 24, false);
            A.store.Bool(ptr + 32 + 160 + 27, false);
            A.store.Bool(ptr + 32 + 160 + 25, false);
          } else {
            A.store.Bool(ptr + 32 + 160 + 28, true);
            A.store.Ref(ptr + 32 + 160 + 0, x["ClientCertPattern"]["IssuerCARef"]["Active"]);
            A.store.Ref(ptr + 32 + 160 + 4, x["ClientCertPattern"]["IssuerCARef"]["Effective"]);
            A.store.Ref(ptr + 32 + 160 + 8, x["ClientCertPattern"]["IssuerCARef"]["UserPolicy"]);
            A.store.Ref(ptr + 32 + 160 + 12, x["ClientCertPattern"]["IssuerCARef"]["DevicePolicy"]);
            A.store.Ref(ptr + 32 + 160 + 16, x["ClientCertPattern"]["IssuerCARef"]["UserSetting"]);
            A.store.Ref(ptr + 32 + 160 + 20, x["ClientCertPattern"]["IssuerCARef"]["SharedSetting"]);
            A.store.Bool(ptr + 32 + 160 + 26, "UserEditable" in x["ClientCertPattern"]["IssuerCARef"] ? true : false);
            A.store.Bool(ptr + 32 + 160 + 24, x["ClientCertPattern"]["IssuerCARef"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 32 + 160 + 27, "DeviceEditable" in x["ClientCertPattern"]["IssuerCARef"] ? true : false);
            A.store.Bool(ptr + 32 + 160 + 25, x["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["ClientCertPattern"]["Subject"] === "undefined") {
            A.store.Bool(ptr + 32 + 192 + 125, false);

            A.store.Bool(ptr + 32 + 192 + 0 + 28, false);
            A.store.Ref(ptr + 32 + 192 + 0 + 0, undefined);
            A.store.Ref(ptr + 32 + 192 + 0 + 4, undefined);
            A.store.Ref(ptr + 32 + 192 + 0 + 8, undefined);
            A.store.Ref(ptr + 32 + 192 + 0 + 12, undefined);
            A.store.Ref(ptr + 32 + 192 + 0 + 16, undefined);
            A.store.Ref(ptr + 32 + 192 + 0 + 20, undefined);
            A.store.Bool(ptr + 32 + 192 + 0 + 26, false);
            A.store.Bool(ptr + 32 + 192 + 0 + 24, false);
            A.store.Bool(ptr + 32 + 192 + 0 + 27, false);
            A.store.Bool(ptr + 32 + 192 + 0 + 25, false);

            A.store.Bool(ptr + 32 + 192 + 32 + 28, false);
            A.store.Ref(ptr + 32 + 192 + 32 + 0, undefined);
            A.store.Ref(ptr + 32 + 192 + 32 + 4, undefined);
            A.store.Ref(ptr + 32 + 192 + 32 + 8, undefined);
            A.store.Ref(ptr + 32 + 192 + 32 + 12, undefined);
            A.store.Ref(ptr + 32 + 192 + 32 + 16, undefined);
            A.store.Ref(ptr + 32 + 192 + 32 + 20, undefined);
            A.store.Bool(ptr + 32 + 192 + 32 + 26, false);
            A.store.Bool(ptr + 32 + 192 + 32 + 24, false);
            A.store.Bool(ptr + 32 + 192 + 32 + 27, false);
            A.store.Bool(ptr + 32 + 192 + 32 + 25, false);

            A.store.Bool(ptr + 32 + 192 + 64 + 28, false);
            A.store.Ref(ptr + 32 + 192 + 64 + 0, undefined);
            A.store.Ref(ptr + 32 + 192 + 64 + 4, undefined);
            A.store.Ref(ptr + 32 + 192 + 64 + 8, undefined);
            A.store.Ref(ptr + 32 + 192 + 64 + 12, undefined);
            A.store.Ref(ptr + 32 + 192 + 64 + 16, undefined);
            A.store.Ref(ptr + 32 + 192 + 64 + 20, undefined);
            A.store.Bool(ptr + 32 + 192 + 64 + 26, false);
            A.store.Bool(ptr + 32 + 192 + 64 + 24, false);
            A.store.Bool(ptr + 32 + 192 + 64 + 27, false);
            A.store.Bool(ptr + 32 + 192 + 64 + 25, false);

            A.store.Bool(ptr + 32 + 192 + 96 + 28, false);
            A.store.Ref(ptr + 32 + 192 + 96 + 0, undefined);
            A.store.Ref(ptr + 32 + 192 + 96 + 4, undefined);
            A.store.Ref(ptr + 32 + 192 + 96 + 8, undefined);
            A.store.Ref(ptr + 32 + 192 + 96 + 12, undefined);
            A.store.Ref(ptr + 32 + 192 + 96 + 16, undefined);
            A.store.Ref(ptr + 32 + 192 + 96 + 20, undefined);
            A.store.Bool(ptr + 32 + 192 + 96 + 26, false);
            A.store.Bool(ptr + 32 + 192 + 96 + 24, false);
            A.store.Bool(ptr + 32 + 192 + 96 + 27, false);
            A.store.Bool(ptr + 32 + 192 + 96 + 25, false);
          } else {
            A.store.Bool(ptr + 32 + 192 + 125, true);

            if (typeof x["ClientCertPattern"]["Subject"]["CommonName"] === "undefined") {
              A.store.Bool(ptr + 32 + 192 + 0 + 28, false);
              A.store.Ref(ptr + 32 + 192 + 0 + 0, undefined);
              A.store.Ref(ptr + 32 + 192 + 0 + 4, undefined);
              A.store.Ref(ptr + 32 + 192 + 0 + 8, undefined);
              A.store.Ref(ptr + 32 + 192 + 0 + 12, undefined);
              A.store.Ref(ptr + 32 + 192 + 0 + 16, undefined);
              A.store.Ref(ptr + 32 + 192 + 0 + 20, undefined);
              A.store.Bool(ptr + 32 + 192 + 0 + 26, false);
              A.store.Bool(ptr + 32 + 192 + 0 + 24, false);
              A.store.Bool(ptr + 32 + 192 + 0 + 27, false);
              A.store.Bool(ptr + 32 + 192 + 0 + 25, false);
            } else {
              A.store.Bool(ptr + 32 + 192 + 0 + 28, true);
              A.store.Ref(ptr + 32 + 192 + 0 + 0, x["ClientCertPattern"]["Subject"]["CommonName"]["Active"]);
              A.store.Ref(ptr + 32 + 192 + 0 + 4, x["ClientCertPattern"]["Subject"]["CommonName"]["Effective"]);
              A.store.Ref(ptr + 32 + 192 + 0 + 8, x["ClientCertPattern"]["Subject"]["CommonName"]["UserPolicy"]);
              A.store.Ref(ptr + 32 + 192 + 0 + 12, x["ClientCertPattern"]["Subject"]["CommonName"]["DevicePolicy"]);
              A.store.Ref(ptr + 32 + 192 + 0 + 16, x["ClientCertPattern"]["Subject"]["CommonName"]["UserSetting"]);
              A.store.Ref(ptr + 32 + 192 + 0 + 20, x["ClientCertPattern"]["Subject"]["CommonName"]["SharedSetting"]);
              A.store.Bool(
                ptr + 32 + 192 + 0 + 26,
                "UserEditable" in x["ClientCertPattern"]["Subject"]["CommonName"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 192 + 0 + 24,
                x["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 192 + 0 + 27,
                "DeviceEditable" in x["ClientCertPattern"]["Subject"]["CommonName"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 192 + 0 + 25,
                x["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["ClientCertPattern"]["Subject"]["Locality"] === "undefined") {
              A.store.Bool(ptr + 32 + 192 + 32 + 28, false);
              A.store.Ref(ptr + 32 + 192 + 32 + 0, undefined);
              A.store.Ref(ptr + 32 + 192 + 32 + 4, undefined);
              A.store.Ref(ptr + 32 + 192 + 32 + 8, undefined);
              A.store.Ref(ptr + 32 + 192 + 32 + 12, undefined);
              A.store.Ref(ptr + 32 + 192 + 32 + 16, undefined);
              A.store.Ref(ptr + 32 + 192 + 32 + 20, undefined);
              A.store.Bool(ptr + 32 + 192 + 32 + 26, false);
              A.store.Bool(ptr + 32 + 192 + 32 + 24, false);
              A.store.Bool(ptr + 32 + 192 + 32 + 27, false);
              A.store.Bool(ptr + 32 + 192 + 32 + 25, false);
            } else {
              A.store.Bool(ptr + 32 + 192 + 32 + 28, true);
              A.store.Ref(ptr + 32 + 192 + 32 + 0, x["ClientCertPattern"]["Subject"]["Locality"]["Active"]);
              A.store.Ref(ptr + 32 + 192 + 32 + 4, x["ClientCertPattern"]["Subject"]["Locality"]["Effective"]);
              A.store.Ref(ptr + 32 + 192 + 32 + 8, x["ClientCertPattern"]["Subject"]["Locality"]["UserPolicy"]);
              A.store.Ref(ptr + 32 + 192 + 32 + 12, x["ClientCertPattern"]["Subject"]["Locality"]["DevicePolicy"]);
              A.store.Ref(ptr + 32 + 192 + 32 + 16, x["ClientCertPattern"]["Subject"]["Locality"]["UserSetting"]);
              A.store.Ref(ptr + 32 + 192 + 32 + 20, x["ClientCertPattern"]["Subject"]["Locality"]["SharedSetting"]);
              A.store.Bool(
                ptr + 32 + 192 + 32 + 26,
                "UserEditable" in x["ClientCertPattern"]["Subject"]["Locality"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 192 + 32 + 24,
                x["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 192 + 32 + 27,
                "DeviceEditable" in x["ClientCertPattern"]["Subject"]["Locality"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 192 + 32 + 25,
                x["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["ClientCertPattern"]["Subject"]["Organization"] === "undefined") {
              A.store.Bool(ptr + 32 + 192 + 64 + 28, false);
              A.store.Ref(ptr + 32 + 192 + 64 + 0, undefined);
              A.store.Ref(ptr + 32 + 192 + 64 + 4, undefined);
              A.store.Ref(ptr + 32 + 192 + 64 + 8, undefined);
              A.store.Ref(ptr + 32 + 192 + 64 + 12, undefined);
              A.store.Ref(ptr + 32 + 192 + 64 + 16, undefined);
              A.store.Ref(ptr + 32 + 192 + 64 + 20, undefined);
              A.store.Bool(ptr + 32 + 192 + 64 + 26, false);
              A.store.Bool(ptr + 32 + 192 + 64 + 24, false);
              A.store.Bool(ptr + 32 + 192 + 64 + 27, false);
              A.store.Bool(ptr + 32 + 192 + 64 + 25, false);
            } else {
              A.store.Bool(ptr + 32 + 192 + 64 + 28, true);
              A.store.Ref(ptr + 32 + 192 + 64 + 0, x["ClientCertPattern"]["Subject"]["Organization"]["Active"]);
              A.store.Ref(ptr + 32 + 192 + 64 + 4, x["ClientCertPattern"]["Subject"]["Organization"]["Effective"]);
              A.store.Ref(ptr + 32 + 192 + 64 + 8, x["ClientCertPattern"]["Subject"]["Organization"]["UserPolicy"]);
              A.store.Ref(ptr + 32 + 192 + 64 + 12, x["ClientCertPattern"]["Subject"]["Organization"]["DevicePolicy"]);
              A.store.Ref(ptr + 32 + 192 + 64 + 16, x["ClientCertPattern"]["Subject"]["Organization"]["UserSetting"]);
              A.store.Ref(ptr + 32 + 192 + 64 + 20, x["ClientCertPattern"]["Subject"]["Organization"]["SharedSetting"]);
              A.store.Bool(
                ptr + 32 + 192 + 64 + 26,
                "UserEditable" in x["ClientCertPattern"]["Subject"]["Organization"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 192 + 64 + 24,
                x["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 192 + 64 + 27,
                "DeviceEditable" in x["ClientCertPattern"]["Subject"]["Organization"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 192 + 64 + 25,
                x["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["ClientCertPattern"]["Subject"]["OrganizationalUnit"] === "undefined") {
              A.store.Bool(ptr + 32 + 192 + 96 + 28, false);
              A.store.Ref(ptr + 32 + 192 + 96 + 0, undefined);
              A.store.Ref(ptr + 32 + 192 + 96 + 4, undefined);
              A.store.Ref(ptr + 32 + 192 + 96 + 8, undefined);
              A.store.Ref(ptr + 32 + 192 + 96 + 12, undefined);
              A.store.Ref(ptr + 32 + 192 + 96 + 16, undefined);
              A.store.Ref(ptr + 32 + 192 + 96 + 20, undefined);
              A.store.Bool(ptr + 32 + 192 + 96 + 26, false);
              A.store.Bool(ptr + 32 + 192 + 96 + 24, false);
              A.store.Bool(ptr + 32 + 192 + 96 + 27, false);
              A.store.Bool(ptr + 32 + 192 + 96 + 25, false);
            } else {
              A.store.Bool(ptr + 32 + 192 + 96 + 28, true);
              A.store.Ref(ptr + 32 + 192 + 96 + 0, x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Active"]);
              A.store.Ref(
                ptr + 32 + 192 + 96 + 4,
                x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Effective"]
              );
              A.store.Ref(
                ptr + 32 + 192 + 96 + 8,
                x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserPolicy"]
              );
              A.store.Ref(
                ptr + 32 + 192 + 96 + 12,
                x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DevicePolicy"]
              );
              A.store.Ref(
                ptr + 32 + 192 + 96 + 16,
                x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserSetting"]
              );
              A.store.Ref(
                ptr + 32 + 192 + 96 + 20,
                x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["SharedSetting"]
              );
              A.store.Bool(
                ptr + 32 + 192 + 96 + 26,
                "UserEditable" in x["ClientCertPattern"]["Subject"]["OrganizationalUnit"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 192 + 96 + 24,
                x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 192 + 96 + 27,
                "DeviceEditable" in x["ClientCertPattern"]["Subject"]["OrganizationalUnit"] ? true : false
              );
              A.store.Bool(
                ptr + 32 + 192 + 96 + 25,
                x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"] ? true : false
              );
            }
          }
        }

        if (typeof x["ClientCertPKCS11Id"] === "undefined") {
          A.store.Bool(ptr + 352 + 28, false);
          A.store.Ref(ptr + 352 + 0, undefined);
          A.store.Ref(ptr + 352 + 4, undefined);
          A.store.Ref(ptr + 352 + 8, undefined);
          A.store.Ref(ptr + 352 + 12, undefined);
          A.store.Ref(ptr + 352 + 16, undefined);
          A.store.Ref(ptr + 352 + 20, undefined);
          A.store.Bool(ptr + 352 + 26, false);
          A.store.Bool(ptr + 352 + 24, false);
          A.store.Bool(ptr + 352 + 27, false);
          A.store.Bool(ptr + 352 + 25, false);
        } else {
          A.store.Bool(ptr + 352 + 28, true);
          A.store.Ref(ptr + 352 + 0, x["ClientCertPKCS11Id"]["Active"]);
          A.store.Ref(ptr + 352 + 4, x["ClientCertPKCS11Id"]["Effective"]);
          A.store.Ref(ptr + 352 + 8, x["ClientCertPKCS11Id"]["UserPolicy"]);
          A.store.Ref(ptr + 352 + 12, x["ClientCertPKCS11Id"]["DevicePolicy"]);
          A.store.Ref(ptr + 352 + 16, x["ClientCertPKCS11Id"]["UserSetting"]);
          A.store.Ref(ptr + 352 + 20, x["ClientCertPKCS11Id"]["SharedSetting"]);
          A.store.Bool(ptr + 352 + 26, "UserEditable" in x["ClientCertPKCS11Id"] ? true : false);
          A.store.Bool(ptr + 352 + 24, x["ClientCertPKCS11Id"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 352 + 27, "DeviceEditable" in x["ClientCertPKCS11Id"] ? true : false);
          A.store.Bool(ptr + 352 + 25, x["ClientCertPKCS11Id"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["ClientCertProvisioningProfileId"] === "undefined") {
          A.store.Bool(ptr + 384 + 28, false);
          A.store.Ref(ptr + 384 + 0, undefined);
          A.store.Ref(ptr + 384 + 4, undefined);
          A.store.Ref(ptr + 384 + 8, undefined);
          A.store.Ref(ptr + 384 + 12, undefined);
          A.store.Ref(ptr + 384 + 16, undefined);
          A.store.Ref(ptr + 384 + 20, undefined);
          A.store.Bool(ptr + 384 + 26, false);
          A.store.Bool(ptr + 384 + 24, false);
          A.store.Bool(ptr + 384 + 27, false);
          A.store.Bool(ptr + 384 + 25, false);
        } else {
          A.store.Bool(ptr + 384 + 28, true);
          A.store.Ref(ptr + 384 + 0, x["ClientCertProvisioningProfileId"]["Active"]);
          A.store.Ref(ptr + 384 + 4, x["ClientCertProvisioningProfileId"]["Effective"]);
          A.store.Ref(ptr + 384 + 8, x["ClientCertProvisioningProfileId"]["UserPolicy"]);
          A.store.Ref(ptr + 384 + 12, x["ClientCertProvisioningProfileId"]["DevicePolicy"]);
          A.store.Ref(ptr + 384 + 16, x["ClientCertProvisioningProfileId"]["UserSetting"]);
          A.store.Ref(ptr + 384 + 20, x["ClientCertProvisioningProfileId"]["SharedSetting"]);
          A.store.Bool(ptr + 384 + 26, "UserEditable" in x["ClientCertProvisioningProfileId"] ? true : false);
          A.store.Bool(ptr + 384 + 24, x["ClientCertProvisioningProfileId"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 384 + 27, "DeviceEditable" in x["ClientCertProvisioningProfileId"] ? true : false);
          A.store.Bool(ptr + 384 + 25, x["ClientCertProvisioningProfileId"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["ClientCertRef"] === "undefined") {
          A.store.Bool(ptr + 416 + 28, false);
          A.store.Ref(ptr + 416 + 0, undefined);
          A.store.Ref(ptr + 416 + 4, undefined);
          A.store.Ref(ptr + 416 + 8, undefined);
          A.store.Ref(ptr + 416 + 12, undefined);
          A.store.Ref(ptr + 416 + 16, undefined);
          A.store.Ref(ptr + 416 + 20, undefined);
          A.store.Bool(ptr + 416 + 26, false);
          A.store.Bool(ptr + 416 + 24, false);
          A.store.Bool(ptr + 416 + 27, false);
          A.store.Bool(ptr + 416 + 25, false);
        } else {
          A.store.Bool(ptr + 416 + 28, true);
          A.store.Ref(ptr + 416 + 0, x["ClientCertRef"]["Active"]);
          A.store.Ref(ptr + 416 + 4, x["ClientCertRef"]["Effective"]);
          A.store.Ref(ptr + 416 + 8, x["ClientCertRef"]["UserPolicy"]);
          A.store.Ref(ptr + 416 + 12, x["ClientCertRef"]["DevicePolicy"]);
          A.store.Ref(ptr + 416 + 16, x["ClientCertRef"]["UserSetting"]);
          A.store.Ref(ptr + 416 + 20, x["ClientCertRef"]["SharedSetting"]);
          A.store.Bool(ptr + 416 + 26, "UserEditable" in x["ClientCertRef"] ? true : false);
          A.store.Bool(ptr + 416 + 24, x["ClientCertRef"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 416 + 27, "DeviceEditable" in x["ClientCertRef"] ? true : false);
          A.store.Bool(ptr + 416 + 25, x["ClientCertRef"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["ClientCertType"] === "undefined") {
          A.store.Bool(ptr + 448 + 28, false);
          A.store.Ref(ptr + 448 + 0, undefined);
          A.store.Ref(ptr + 448 + 4, undefined);
          A.store.Ref(ptr + 448 + 8, undefined);
          A.store.Ref(ptr + 448 + 12, undefined);
          A.store.Ref(ptr + 448 + 16, undefined);
          A.store.Ref(ptr + 448 + 20, undefined);
          A.store.Bool(ptr + 448 + 26, false);
          A.store.Bool(ptr + 448 + 24, false);
          A.store.Bool(ptr + 448 + 27, false);
          A.store.Bool(ptr + 448 + 25, false);
        } else {
          A.store.Bool(ptr + 448 + 28, true);
          A.store.Ref(ptr + 448 + 0, x["ClientCertType"]["Active"]);
          A.store.Ref(ptr + 448 + 4, x["ClientCertType"]["Effective"]);
          A.store.Ref(ptr + 448 + 8, x["ClientCertType"]["UserPolicy"]);
          A.store.Ref(ptr + 448 + 12, x["ClientCertType"]["DevicePolicy"]);
          A.store.Ref(ptr + 448 + 16, x["ClientCertType"]["UserSetting"]);
          A.store.Ref(ptr + 448 + 20, x["ClientCertType"]["SharedSetting"]);
          A.store.Bool(ptr + 448 + 26, "UserEditable" in x["ClientCertType"] ? true : false);
          A.store.Bool(ptr + 448 + 24, x["ClientCertType"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 448 + 27, "DeviceEditable" in x["ClientCertType"] ? true : false);
          A.store.Bool(ptr + 448 + 25, x["ClientCertType"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["EAP"] === "undefined") {
          A.store.Bool(ptr + 480 + 806, false);

          A.store.Bool(ptr + 480 + 0 + 28, false);
          A.store.Ref(ptr + 480 + 0 + 0, undefined);
          A.store.Ref(ptr + 480 + 0 + 4, undefined);
          A.store.Ref(ptr + 480 + 0 + 8, undefined);
          A.store.Ref(ptr + 480 + 0 + 12, undefined);
          A.store.Ref(ptr + 480 + 0 + 16, undefined);
          A.store.Ref(ptr + 480 + 0 + 20, undefined);
          A.store.Bool(ptr + 480 + 0 + 26, false);
          A.store.Bool(ptr + 480 + 0 + 24, false);
          A.store.Bool(ptr + 480 + 0 + 27, false);
          A.store.Bool(ptr + 480 + 0 + 25, false);

          A.store.Bool(ptr + 480 + 32 + 318, false);

          A.store.Bool(ptr + 480 + 32 + 0 + 28, false);
          A.store.Ref(ptr + 480 + 32 + 0 + 0, undefined);
          A.store.Ref(ptr + 480 + 32 + 0 + 4, undefined);
          A.store.Ref(ptr + 480 + 32 + 0 + 8, undefined);
          A.store.Ref(ptr + 480 + 32 + 0 + 12, undefined);
          A.store.Ref(ptr + 480 + 32 + 0 + 16, undefined);
          A.store.Ref(ptr + 480 + 32 + 0 + 20, undefined);
          A.store.Bool(ptr + 480 + 32 + 0 + 26, false);
          A.store.Bool(ptr + 480 + 32 + 0 + 24, false);
          A.store.Bool(ptr + 480 + 32 + 0 + 27, false);
          A.store.Bool(ptr + 480 + 32 + 0 + 25, false);

          A.store.Bool(ptr + 480 + 32 + 32 + 125, false);

          A.store.Bool(ptr + 480 + 32 + 32 + 0 + 28, false);
          A.store.Ref(ptr + 480 + 32 + 32 + 0 + 0, undefined);
          A.store.Ref(ptr + 480 + 32 + 32 + 0 + 4, undefined);
          A.store.Ref(ptr + 480 + 32 + 32 + 0 + 8, undefined);
          A.store.Ref(ptr + 480 + 32 + 32 + 0 + 12, undefined);
          A.store.Ref(ptr + 480 + 32 + 32 + 0 + 16, undefined);
          A.store.Ref(ptr + 480 + 32 + 32 + 0 + 20, undefined);
          A.store.Bool(ptr + 480 + 32 + 32 + 0 + 26, false);
          A.store.Bool(ptr + 480 + 32 + 32 + 0 + 24, false);
          A.store.Bool(ptr + 480 + 32 + 32 + 0 + 27, false);
          A.store.Bool(ptr + 480 + 32 + 32 + 0 + 25, false);

          A.store.Bool(ptr + 480 + 32 + 32 + 32 + 28, false);
          A.store.Ref(ptr + 480 + 32 + 32 + 32 + 0, undefined);
          A.store.Ref(ptr + 480 + 32 + 32 + 32 + 4, undefined);
          A.store.Ref(ptr + 480 + 32 + 32 + 32 + 8, undefined);
          A.store.Ref(ptr + 480 + 32 + 32 + 32 + 12, undefined);
          A.store.Ref(ptr + 480 + 32 + 32 + 32 + 16, undefined);
          A.store.Ref(ptr + 480 + 32 + 32 + 32 + 20, undefined);
          A.store.Bool(ptr + 480 + 32 + 32 + 32 + 26, false);
          A.store.Bool(ptr + 480 + 32 + 32 + 32 + 24, false);
          A.store.Bool(ptr + 480 + 32 + 32 + 32 + 27, false);
          A.store.Bool(ptr + 480 + 32 + 32 + 32 + 25, false);

          A.store.Bool(ptr + 480 + 32 + 32 + 64 + 28, false);
          A.store.Ref(ptr + 480 + 32 + 32 + 64 + 0, undefined);
          A.store.Ref(ptr + 480 + 32 + 32 + 64 + 4, undefined);
          A.store.Ref(ptr + 480 + 32 + 32 + 64 + 8, undefined);
          A.store.Ref(ptr + 480 + 32 + 32 + 64 + 12, undefined);
          A.store.Ref(ptr + 480 + 32 + 32 + 64 + 16, undefined);
          A.store.Ref(ptr + 480 + 32 + 32 + 64 + 20, undefined);
          A.store.Bool(ptr + 480 + 32 + 32 + 64 + 26, false);
          A.store.Bool(ptr + 480 + 32 + 32 + 64 + 24, false);
          A.store.Bool(ptr + 480 + 32 + 32 + 64 + 27, false);
          A.store.Bool(ptr + 480 + 32 + 32 + 64 + 25, false);

          A.store.Bool(ptr + 480 + 32 + 32 + 96 + 28, false);
          A.store.Ref(ptr + 480 + 32 + 32 + 96 + 0, undefined);
          A.store.Ref(ptr + 480 + 32 + 32 + 96 + 4, undefined);
          A.store.Ref(ptr + 480 + 32 + 32 + 96 + 8, undefined);
          A.store.Ref(ptr + 480 + 32 + 32 + 96 + 12, undefined);
          A.store.Ref(ptr + 480 + 32 + 32 + 96 + 16, undefined);
          A.store.Ref(ptr + 480 + 32 + 32 + 96 + 20, undefined);
          A.store.Bool(ptr + 480 + 32 + 32 + 96 + 26, false);
          A.store.Bool(ptr + 480 + 32 + 32 + 96 + 24, false);
          A.store.Bool(ptr + 480 + 32 + 32 + 96 + 27, false);
          A.store.Bool(ptr + 480 + 32 + 32 + 96 + 25, false);

          A.store.Bool(ptr + 480 + 32 + 160 + 28, false);
          A.store.Ref(ptr + 480 + 32 + 160 + 0, undefined);
          A.store.Ref(ptr + 480 + 32 + 160 + 4, undefined);
          A.store.Ref(ptr + 480 + 32 + 160 + 8, undefined);
          A.store.Ref(ptr + 480 + 32 + 160 + 12, undefined);
          A.store.Ref(ptr + 480 + 32 + 160 + 16, undefined);
          A.store.Ref(ptr + 480 + 32 + 160 + 20, undefined);
          A.store.Bool(ptr + 480 + 32 + 160 + 26, false);
          A.store.Bool(ptr + 480 + 32 + 160 + 24, false);
          A.store.Bool(ptr + 480 + 32 + 160 + 27, false);
          A.store.Bool(ptr + 480 + 32 + 160 + 25, false);

          A.store.Bool(ptr + 480 + 32 + 192 + 125, false);

          A.store.Bool(ptr + 480 + 32 + 192 + 0 + 28, false);
          A.store.Ref(ptr + 480 + 32 + 192 + 0 + 0, undefined);
          A.store.Ref(ptr + 480 + 32 + 192 + 0 + 4, undefined);
          A.store.Ref(ptr + 480 + 32 + 192 + 0 + 8, undefined);
          A.store.Ref(ptr + 480 + 32 + 192 + 0 + 12, undefined);
          A.store.Ref(ptr + 480 + 32 + 192 + 0 + 16, undefined);
          A.store.Ref(ptr + 480 + 32 + 192 + 0 + 20, undefined);
          A.store.Bool(ptr + 480 + 32 + 192 + 0 + 26, false);
          A.store.Bool(ptr + 480 + 32 + 192 + 0 + 24, false);
          A.store.Bool(ptr + 480 + 32 + 192 + 0 + 27, false);
          A.store.Bool(ptr + 480 + 32 + 192 + 0 + 25, false);

          A.store.Bool(ptr + 480 + 32 + 192 + 32 + 28, false);
          A.store.Ref(ptr + 480 + 32 + 192 + 32 + 0, undefined);
          A.store.Ref(ptr + 480 + 32 + 192 + 32 + 4, undefined);
          A.store.Ref(ptr + 480 + 32 + 192 + 32 + 8, undefined);
          A.store.Ref(ptr + 480 + 32 + 192 + 32 + 12, undefined);
          A.store.Ref(ptr + 480 + 32 + 192 + 32 + 16, undefined);
          A.store.Ref(ptr + 480 + 32 + 192 + 32 + 20, undefined);
          A.store.Bool(ptr + 480 + 32 + 192 + 32 + 26, false);
          A.store.Bool(ptr + 480 + 32 + 192 + 32 + 24, false);
          A.store.Bool(ptr + 480 + 32 + 192 + 32 + 27, false);
          A.store.Bool(ptr + 480 + 32 + 192 + 32 + 25, false);

          A.store.Bool(ptr + 480 + 32 + 192 + 64 + 28, false);
          A.store.Ref(ptr + 480 + 32 + 192 + 64 + 0, undefined);
          A.store.Ref(ptr + 480 + 32 + 192 + 64 + 4, undefined);
          A.store.Ref(ptr + 480 + 32 + 192 + 64 + 8, undefined);
          A.store.Ref(ptr + 480 + 32 + 192 + 64 + 12, undefined);
          A.store.Ref(ptr + 480 + 32 + 192 + 64 + 16, undefined);
          A.store.Ref(ptr + 480 + 32 + 192 + 64 + 20, undefined);
          A.store.Bool(ptr + 480 + 32 + 192 + 64 + 26, false);
          A.store.Bool(ptr + 480 + 32 + 192 + 64 + 24, false);
          A.store.Bool(ptr + 480 + 32 + 192 + 64 + 27, false);
          A.store.Bool(ptr + 480 + 32 + 192 + 64 + 25, false);

          A.store.Bool(ptr + 480 + 32 + 192 + 96 + 28, false);
          A.store.Ref(ptr + 480 + 32 + 192 + 96 + 0, undefined);
          A.store.Ref(ptr + 480 + 32 + 192 + 96 + 4, undefined);
          A.store.Ref(ptr + 480 + 32 + 192 + 96 + 8, undefined);
          A.store.Ref(ptr + 480 + 32 + 192 + 96 + 12, undefined);
          A.store.Ref(ptr + 480 + 32 + 192 + 96 + 16, undefined);
          A.store.Ref(ptr + 480 + 32 + 192 + 96 + 20, undefined);
          A.store.Bool(ptr + 480 + 32 + 192 + 96 + 26, false);
          A.store.Bool(ptr + 480 + 32 + 192 + 96 + 24, false);
          A.store.Bool(ptr + 480 + 32 + 192 + 96 + 27, false);
          A.store.Bool(ptr + 480 + 32 + 192 + 96 + 25, false);

          A.store.Bool(ptr + 480 + 352 + 28, false);
          A.store.Ref(ptr + 480 + 352 + 0, undefined);
          A.store.Ref(ptr + 480 + 352 + 4, undefined);
          A.store.Ref(ptr + 480 + 352 + 8, undefined);
          A.store.Ref(ptr + 480 + 352 + 12, undefined);
          A.store.Ref(ptr + 480 + 352 + 16, undefined);
          A.store.Ref(ptr + 480 + 352 + 20, undefined);
          A.store.Bool(ptr + 480 + 352 + 26, false);
          A.store.Bool(ptr + 480 + 352 + 24, false);
          A.store.Bool(ptr + 480 + 352 + 27, false);
          A.store.Bool(ptr + 480 + 352 + 25, false);

          A.store.Bool(ptr + 480 + 384 + 28, false);
          A.store.Ref(ptr + 480 + 384 + 0, undefined);
          A.store.Ref(ptr + 480 + 384 + 4, undefined);
          A.store.Ref(ptr + 480 + 384 + 8, undefined);
          A.store.Ref(ptr + 480 + 384 + 12, undefined);
          A.store.Ref(ptr + 480 + 384 + 16, undefined);
          A.store.Ref(ptr + 480 + 384 + 20, undefined);
          A.store.Bool(ptr + 480 + 384 + 26, false);
          A.store.Bool(ptr + 480 + 384 + 24, false);
          A.store.Bool(ptr + 480 + 384 + 27, false);
          A.store.Bool(ptr + 480 + 384 + 25, false);

          A.store.Bool(ptr + 480 + 416 + 28, false);
          A.store.Ref(ptr + 480 + 416 + 0, undefined);
          A.store.Ref(ptr + 480 + 416 + 4, undefined);
          A.store.Ref(ptr + 480 + 416 + 8, undefined);
          A.store.Ref(ptr + 480 + 416 + 12, undefined);
          A.store.Ref(ptr + 480 + 416 + 16, undefined);
          A.store.Ref(ptr + 480 + 416 + 20, undefined);
          A.store.Bool(ptr + 480 + 416 + 26, false);
          A.store.Bool(ptr + 480 + 416 + 24, false);
          A.store.Bool(ptr + 480 + 416 + 27, false);
          A.store.Bool(ptr + 480 + 416 + 25, false);

          A.store.Bool(ptr + 480 + 448 + 28, false);
          A.store.Ref(ptr + 480 + 448 + 0, undefined);
          A.store.Ref(ptr + 480 + 448 + 4, undefined);
          A.store.Ref(ptr + 480 + 448 + 8, undefined);
          A.store.Ref(ptr + 480 + 448 + 12, undefined);
          A.store.Ref(ptr + 480 + 448 + 16, undefined);
          A.store.Ref(ptr + 480 + 448 + 20, undefined);
          A.store.Bool(ptr + 480 + 448 + 26, false);
          A.store.Bool(ptr + 480 + 448 + 24, false);
          A.store.Bool(ptr + 480 + 448 + 27, false);
          A.store.Bool(ptr + 480 + 448 + 25, false);

          A.store.Bool(ptr + 480 + 480 + 28, false);
          A.store.Ref(ptr + 480 + 480 + 0, undefined);
          A.store.Ref(ptr + 480 + 480 + 4, undefined);
          A.store.Ref(ptr + 480 + 480 + 8, undefined);
          A.store.Ref(ptr + 480 + 480 + 12, undefined);
          A.store.Ref(ptr + 480 + 480 + 16, undefined);
          A.store.Ref(ptr + 480 + 480 + 20, undefined);
          A.store.Bool(ptr + 480 + 480 + 26, false);
          A.store.Bool(ptr + 480 + 480 + 24, false);
          A.store.Bool(ptr + 480 + 480 + 27, false);
          A.store.Bool(ptr + 480 + 480 + 25, false);

          A.store.Bool(ptr + 480 + 512 + 28, false);
          A.store.Ref(ptr + 480 + 512 + 0, undefined);
          A.store.Ref(ptr + 480 + 512 + 4, undefined);
          A.store.Ref(ptr + 480 + 512 + 8, undefined);
          A.store.Ref(ptr + 480 + 512 + 12, undefined);
          A.store.Ref(ptr + 480 + 512 + 16, undefined);
          A.store.Ref(ptr + 480 + 512 + 20, undefined);
          A.store.Bool(ptr + 480 + 512 + 26, false);
          A.store.Bool(ptr + 480 + 512 + 24, false);
          A.store.Bool(ptr + 480 + 512 + 27, false);
          A.store.Bool(ptr + 480 + 512 + 25, false);

          A.store.Bool(ptr + 480 + 544 + 28, false);
          A.store.Ref(ptr + 480 + 544 + 0, undefined);
          A.store.Ref(ptr + 480 + 544 + 4, undefined);
          A.store.Ref(ptr + 480 + 544 + 8, undefined);
          A.store.Ref(ptr + 480 + 544 + 12, undefined);
          A.store.Ref(ptr + 480 + 544 + 16, undefined);
          A.store.Ref(ptr + 480 + 544 + 20, undefined);
          A.store.Bool(ptr + 480 + 544 + 26, false);
          A.store.Bool(ptr + 480 + 544 + 24, false);
          A.store.Bool(ptr + 480 + 544 + 27, false);
          A.store.Bool(ptr + 480 + 544 + 25, false);

          A.store.Bool(ptr + 480 + 576 + 28, false);
          A.store.Ref(ptr + 480 + 576 + 0, undefined);
          A.store.Ref(ptr + 480 + 576 + 4, undefined);
          A.store.Ref(ptr + 480 + 576 + 8, undefined);
          A.store.Ref(ptr + 480 + 576 + 12, undefined);
          A.store.Ref(ptr + 480 + 576 + 16, undefined);
          A.store.Ref(ptr + 480 + 576 + 20, undefined);
          A.store.Bool(ptr + 480 + 576 + 26, false);
          A.store.Bool(ptr + 480 + 576 + 24, false);
          A.store.Bool(ptr + 480 + 576 + 27, false);
          A.store.Bool(ptr + 480 + 576 + 25, false);

          A.store.Bool(ptr + 480 + 608 + 21, false);
          A.store.Bool(ptr + 480 + 608 + 14, false);
          A.store.Bool(ptr + 480 + 608 + 0, false);
          A.store.Ref(ptr + 480 + 608 + 4, undefined);
          A.store.Bool(ptr + 480 + 608 + 15, false);
          A.store.Bool(ptr + 480 + 608 + 8, false);
          A.store.Bool(ptr + 480 + 608 + 16, false);
          A.store.Bool(ptr + 480 + 608 + 9, false);
          A.store.Bool(ptr + 480 + 608 + 17, false);
          A.store.Bool(ptr + 480 + 608 + 10, false);
          A.store.Bool(ptr + 480 + 608 + 18, false);
          A.store.Bool(ptr + 480 + 608 + 11, false);
          A.store.Bool(ptr + 480 + 608 + 19, false);
          A.store.Bool(ptr + 480 + 608 + 12, false);
          A.store.Bool(ptr + 480 + 608 + 20, false);
          A.store.Bool(ptr + 480 + 608 + 13, false);

          A.store.Bool(ptr + 480 + 632 + 28, false);
          A.store.Ref(ptr + 480 + 632 + 0, undefined);
          A.store.Ref(ptr + 480 + 632 + 4, undefined);
          A.store.Ref(ptr + 480 + 632 + 8, undefined);
          A.store.Ref(ptr + 480 + 632 + 12, undefined);
          A.store.Ref(ptr + 480 + 632 + 16, undefined);
          A.store.Ref(ptr + 480 + 632 + 20, undefined);
          A.store.Bool(ptr + 480 + 632 + 26, false);
          A.store.Bool(ptr + 480 + 632 + 24, false);
          A.store.Bool(ptr + 480 + 632 + 27, false);
          A.store.Bool(ptr + 480 + 632 + 25, false);

          A.store.Bool(ptr + 480 + 664 + 28, false);
          A.store.Ref(ptr + 480 + 664 + 0, undefined);
          A.store.Ref(ptr + 480 + 664 + 4, undefined);
          A.store.Ref(ptr + 480 + 664 + 8, undefined);
          A.store.Ref(ptr + 480 + 664 + 12, undefined);
          A.store.Ref(ptr + 480 + 664 + 16, undefined);
          A.store.Ref(ptr + 480 + 664 + 20, undefined);
          A.store.Bool(ptr + 480 + 664 + 26, false);
          A.store.Bool(ptr + 480 + 664 + 24, false);
          A.store.Bool(ptr + 480 + 664 + 27, false);
          A.store.Bool(ptr + 480 + 664 + 25, false);

          A.store.Bool(ptr + 480 + 696 + 28, false);
          A.store.Ref(ptr + 480 + 696 + 0, undefined);
          A.store.Ref(ptr + 480 + 696 + 4, undefined);
          A.store.Ref(ptr + 480 + 696 + 8, undefined);
          A.store.Ref(ptr + 480 + 696 + 12, undefined);
          A.store.Ref(ptr + 480 + 696 + 16, undefined);
          A.store.Ref(ptr + 480 + 696 + 20, undefined);
          A.store.Bool(ptr + 480 + 696 + 26, false);
          A.store.Bool(ptr + 480 + 696 + 24, false);
          A.store.Bool(ptr + 480 + 696 + 27, false);
          A.store.Bool(ptr + 480 + 696 + 25, false);

          A.store.Bool(ptr + 480 + 728 + 28, false);
          A.store.Ref(ptr + 480 + 728 + 0, undefined);
          A.store.Ref(ptr + 480 + 728 + 4, undefined);
          A.store.Ref(ptr + 480 + 728 + 8, undefined);
          A.store.Ref(ptr + 480 + 728 + 12, undefined);
          A.store.Ref(ptr + 480 + 728 + 16, undefined);
          A.store.Ref(ptr + 480 + 728 + 20, undefined);
          A.store.Bool(ptr + 480 + 728 + 26, false);
          A.store.Bool(ptr + 480 + 728 + 24, false);
          A.store.Bool(ptr + 480 + 728 + 27, false);
          A.store.Bool(ptr + 480 + 728 + 25, false);

          A.store.Bool(ptr + 480 + 760 + 21, false);
          A.store.Bool(ptr + 480 + 760 + 14, false);
          A.store.Bool(ptr + 480 + 760 + 0, false);
          A.store.Ref(ptr + 480 + 760 + 4, undefined);
          A.store.Bool(ptr + 480 + 760 + 15, false);
          A.store.Bool(ptr + 480 + 760 + 8, false);
          A.store.Bool(ptr + 480 + 760 + 16, false);
          A.store.Bool(ptr + 480 + 760 + 9, false);
          A.store.Bool(ptr + 480 + 760 + 17, false);
          A.store.Bool(ptr + 480 + 760 + 10, false);
          A.store.Bool(ptr + 480 + 760 + 18, false);
          A.store.Bool(ptr + 480 + 760 + 11, false);
          A.store.Bool(ptr + 480 + 760 + 19, false);
          A.store.Bool(ptr + 480 + 760 + 12, false);
          A.store.Bool(ptr + 480 + 760 + 20, false);
          A.store.Bool(ptr + 480 + 760 + 13, false);

          A.store.Bool(ptr + 480 + 784 + 21, false);
          A.store.Bool(ptr + 480 + 784 + 14, false);
          A.store.Bool(ptr + 480 + 784 + 0, false);
          A.store.Ref(ptr + 480 + 784 + 4, undefined);
          A.store.Bool(ptr + 480 + 784 + 15, false);
          A.store.Bool(ptr + 480 + 784 + 8, false);
          A.store.Bool(ptr + 480 + 784 + 16, false);
          A.store.Bool(ptr + 480 + 784 + 9, false);
          A.store.Bool(ptr + 480 + 784 + 17, false);
          A.store.Bool(ptr + 480 + 784 + 10, false);
          A.store.Bool(ptr + 480 + 784 + 18, false);
          A.store.Bool(ptr + 480 + 784 + 11, false);
          A.store.Bool(ptr + 480 + 784 + 19, false);
          A.store.Bool(ptr + 480 + 784 + 12, false);
          A.store.Bool(ptr + 480 + 784 + 20, false);
          A.store.Bool(ptr + 480 + 784 + 13, false);
        } else {
          A.store.Bool(ptr + 480 + 806, true);

          if (typeof x["EAP"]["AnonymousIdentity"] === "undefined") {
            A.store.Bool(ptr + 480 + 0 + 28, false);
            A.store.Ref(ptr + 480 + 0 + 0, undefined);
            A.store.Ref(ptr + 480 + 0 + 4, undefined);
            A.store.Ref(ptr + 480 + 0 + 8, undefined);
            A.store.Ref(ptr + 480 + 0 + 12, undefined);
            A.store.Ref(ptr + 480 + 0 + 16, undefined);
            A.store.Ref(ptr + 480 + 0 + 20, undefined);
            A.store.Bool(ptr + 480 + 0 + 26, false);
            A.store.Bool(ptr + 480 + 0 + 24, false);
            A.store.Bool(ptr + 480 + 0 + 27, false);
            A.store.Bool(ptr + 480 + 0 + 25, false);
          } else {
            A.store.Bool(ptr + 480 + 0 + 28, true);
            A.store.Ref(ptr + 480 + 0 + 0, x["EAP"]["AnonymousIdentity"]["Active"]);
            A.store.Ref(ptr + 480 + 0 + 4, x["EAP"]["AnonymousIdentity"]["Effective"]);
            A.store.Ref(ptr + 480 + 0 + 8, x["EAP"]["AnonymousIdentity"]["UserPolicy"]);
            A.store.Ref(ptr + 480 + 0 + 12, x["EAP"]["AnonymousIdentity"]["DevicePolicy"]);
            A.store.Ref(ptr + 480 + 0 + 16, x["EAP"]["AnonymousIdentity"]["UserSetting"]);
            A.store.Ref(ptr + 480 + 0 + 20, x["EAP"]["AnonymousIdentity"]["SharedSetting"]);
            A.store.Bool(ptr + 480 + 0 + 26, "UserEditable" in x["EAP"]["AnonymousIdentity"] ? true : false);
            A.store.Bool(ptr + 480 + 0 + 24, x["EAP"]["AnonymousIdentity"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 480 + 0 + 27, "DeviceEditable" in x["EAP"]["AnonymousIdentity"] ? true : false);
            A.store.Bool(ptr + 480 + 0 + 25, x["EAP"]["AnonymousIdentity"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["ClientCertPattern"] === "undefined") {
            A.store.Bool(ptr + 480 + 32 + 318, false);

            A.store.Bool(ptr + 480 + 32 + 0 + 28, false);
            A.store.Ref(ptr + 480 + 32 + 0 + 0, undefined);
            A.store.Ref(ptr + 480 + 32 + 0 + 4, undefined);
            A.store.Ref(ptr + 480 + 32 + 0 + 8, undefined);
            A.store.Ref(ptr + 480 + 32 + 0 + 12, undefined);
            A.store.Ref(ptr + 480 + 32 + 0 + 16, undefined);
            A.store.Ref(ptr + 480 + 32 + 0 + 20, undefined);
            A.store.Bool(ptr + 480 + 32 + 0 + 26, false);
            A.store.Bool(ptr + 480 + 32 + 0 + 24, false);
            A.store.Bool(ptr + 480 + 32 + 0 + 27, false);
            A.store.Bool(ptr + 480 + 32 + 0 + 25, false);

            A.store.Bool(ptr + 480 + 32 + 32 + 125, false);

            A.store.Bool(ptr + 480 + 32 + 32 + 0 + 28, false);
            A.store.Ref(ptr + 480 + 32 + 32 + 0 + 0, undefined);
            A.store.Ref(ptr + 480 + 32 + 32 + 0 + 4, undefined);
            A.store.Ref(ptr + 480 + 32 + 32 + 0 + 8, undefined);
            A.store.Ref(ptr + 480 + 32 + 32 + 0 + 12, undefined);
            A.store.Ref(ptr + 480 + 32 + 32 + 0 + 16, undefined);
            A.store.Ref(ptr + 480 + 32 + 32 + 0 + 20, undefined);
            A.store.Bool(ptr + 480 + 32 + 32 + 0 + 26, false);
            A.store.Bool(ptr + 480 + 32 + 32 + 0 + 24, false);
            A.store.Bool(ptr + 480 + 32 + 32 + 0 + 27, false);
            A.store.Bool(ptr + 480 + 32 + 32 + 0 + 25, false);

            A.store.Bool(ptr + 480 + 32 + 32 + 32 + 28, false);
            A.store.Ref(ptr + 480 + 32 + 32 + 32 + 0, undefined);
            A.store.Ref(ptr + 480 + 32 + 32 + 32 + 4, undefined);
            A.store.Ref(ptr + 480 + 32 + 32 + 32 + 8, undefined);
            A.store.Ref(ptr + 480 + 32 + 32 + 32 + 12, undefined);
            A.store.Ref(ptr + 480 + 32 + 32 + 32 + 16, undefined);
            A.store.Ref(ptr + 480 + 32 + 32 + 32 + 20, undefined);
            A.store.Bool(ptr + 480 + 32 + 32 + 32 + 26, false);
            A.store.Bool(ptr + 480 + 32 + 32 + 32 + 24, false);
            A.store.Bool(ptr + 480 + 32 + 32 + 32 + 27, false);
            A.store.Bool(ptr + 480 + 32 + 32 + 32 + 25, false);

            A.store.Bool(ptr + 480 + 32 + 32 + 64 + 28, false);
            A.store.Ref(ptr + 480 + 32 + 32 + 64 + 0, undefined);
            A.store.Ref(ptr + 480 + 32 + 32 + 64 + 4, undefined);
            A.store.Ref(ptr + 480 + 32 + 32 + 64 + 8, undefined);
            A.store.Ref(ptr + 480 + 32 + 32 + 64 + 12, undefined);
            A.store.Ref(ptr + 480 + 32 + 32 + 64 + 16, undefined);
            A.store.Ref(ptr + 480 + 32 + 32 + 64 + 20, undefined);
            A.store.Bool(ptr + 480 + 32 + 32 + 64 + 26, false);
            A.store.Bool(ptr + 480 + 32 + 32 + 64 + 24, false);
            A.store.Bool(ptr + 480 + 32 + 32 + 64 + 27, false);
            A.store.Bool(ptr + 480 + 32 + 32 + 64 + 25, false);

            A.store.Bool(ptr + 480 + 32 + 32 + 96 + 28, false);
            A.store.Ref(ptr + 480 + 32 + 32 + 96 + 0, undefined);
            A.store.Ref(ptr + 480 + 32 + 32 + 96 + 4, undefined);
            A.store.Ref(ptr + 480 + 32 + 32 + 96 + 8, undefined);
            A.store.Ref(ptr + 480 + 32 + 32 + 96 + 12, undefined);
            A.store.Ref(ptr + 480 + 32 + 32 + 96 + 16, undefined);
            A.store.Ref(ptr + 480 + 32 + 32 + 96 + 20, undefined);
            A.store.Bool(ptr + 480 + 32 + 32 + 96 + 26, false);
            A.store.Bool(ptr + 480 + 32 + 32 + 96 + 24, false);
            A.store.Bool(ptr + 480 + 32 + 32 + 96 + 27, false);
            A.store.Bool(ptr + 480 + 32 + 32 + 96 + 25, false);

            A.store.Bool(ptr + 480 + 32 + 160 + 28, false);
            A.store.Ref(ptr + 480 + 32 + 160 + 0, undefined);
            A.store.Ref(ptr + 480 + 32 + 160 + 4, undefined);
            A.store.Ref(ptr + 480 + 32 + 160 + 8, undefined);
            A.store.Ref(ptr + 480 + 32 + 160 + 12, undefined);
            A.store.Ref(ptr + 480 + 32 + 160 + 16, undefined);
            A.store.Ref(ptr + 480 + 32 + 160 + 20, undefined);
            A.store.Bool(ptr + 480 + 32 + 160 + 26, false);
            A.store.Bool(ptr + 480 + 32 + 160 + 24, false);
            A.store.Bool(ptr + 480 + 32 + 160 + 27, false);
            A.store.Bool(ptr + 480 + 32 + 160 + 25, false);

            A.store.Bool(ptr + 480 + 32 + 192 + 125, false);

            A.store.Bool(ptr + 480 + 32 + 192 + 0 + 28, false);
            A.store.Ref(ptr + 480 + 32 + 192 + 0 + 0, undefined);
            A.store.Ref(ptr + 480 + 32 + 192 + 0 + 4, undefined);
            A.store.Ref(ptr + 480 + 32 + 192 + 0 + 8, undefined);
            A.store.Ref(ptr + 480 + 32 + 192 + 0 + 12, undefined);
            A.store.Ref(ptr + 480 + 32 + 192 + 0 + 16, undefined);
            A.store.Ref(ptr + 480 + 32 + 192 + 0 + 20, undefined);
            A.store.Bool(ptr + 480 + 32 + 192 + 0 + 26, false);
            A.store.Bool(ptr + 480 + 32 + 192 + 0 + 24, false);
            A.store.Bool(ptr + 480 + 32 + 192 + 0 + 27, false);
            A.store.Bool(ptr + 480 + 32 + 192 + 0 + 25, false);

            A.store.Bool(ptr + 480 + 32 + 192 + 32 + 28, false);
            A.store.Ref(ptr + 480 + 32 + 192 + 32 + 0, undefined);
            A.store.Ref(ptr + 480 + 32 + 192 + 32 + 4, undefined);
            A.store.Ref(ptr + 480 + 32 + 192 + 32 + 8, undefined);
            A.store.Ref(ptr + 480 + 32 + 192 + 32 + 12, undefined);
            A.store.Ref(ptr + 480 + 32 + 192 + 32 + 16, undefined);
            A.store.Ref(ptr + 480 + 32 + 192 + 32 + 20, undefined);
            A.store.Bool(ptr + 480 + 32 + 192 + 32 + 26, false);
            A.store.Bool(ptr + 480 + 32 + 192 + 32 + 24, false);
            A.store.Bool(ptr + 480 + 32 + 192 + 32 + 27, false);
            A.store.Bool(ptr + 480 + 32 + 192 + 32 + 25, false);

            A.store.Bool(ptr + 480 + 32 + 192 + 64 + 28, false);
            A.store.Ref(ptr + 480 + 32 + 192 + 64 + 0, undefined);
            A.store.Ref(ptr + 480 + 32 + 192 + 64 + 4, undefined);
            A.store.Ref(ptr + 480 + 32 + 192 + 64 + 8, undefined);
            A.store.Ref(ptr + 480 + 32 + 192 + 64 + 12, undefined);
            A.store.Ref(ptr + 480 + 32 + 192 + 64 + 16, undefined);
            A.store.Ref(ptr + 480 + 32 + 192 + 64 + 20, undefined);
            A.store.Bool(ptr + 480 + 32 + 192 + 64 + 26, false);
            A.store.Bool(ptr + 480 + 32 + 192 + 64 + 24, false);
            A.store.Bool(ptr + 480 + 32 + 192 + 64 + 27, false);
            A.store.Bool(ptr + 480 + 32 + 192 + 64 + 25, false);

            A.store.Bool(ptr + 480 + 32 + 192 + 96 + 28, false);
            A.store.Ref(ptr + 480 + 32 + 192 + 96 + 0, undefined);
            A.store.Ref(ptr + 480 + 32 + 192 + 96 + 4, undefined);
            A.store.Ref(ptr + 480 + 32 + 192 + 96 + 8, undefined);
            A.store.Ref(ptr + 480 + 32 + 192 + 96 + 12, undefined);
            A.store.Ref(ptr + 480 + 32 + 192 + 96 + 16, undefined);
            A.store.Ref(ptr + 480 + 32 + 192 + 96 + 20, undefined);
            A.store.Bool(ptr + 480 + 32 + 192 + 96 + 26, false);
            A.store.Bool(ptr + 480 + 32 + 192 + 96 + 24, false);
            A.store.Bool(ptr + 480 + 32 + 192 + 96 + 27, false);
            A.store.Bool(ptr + 480 + 32 + 192 + 96 + 25, false);
          } else {
            A.store.Bool(ptr + 480 + 32 + 318, true);

            if (typeof x["EAP"]["ClientCertPattern"]["EnrollmentURI"] === "undefined") {
              A.store.Bool(ptr + 480 + 32 + 0 + 28, false);
              A.store.Ref(ptr + 480 + 32 + 0 + 0, undefined);
              A.store.Ref(ptr + 480 + 32 + 0 + 4, undefined);
              A.store.Ref(ptr + 480 + 32 + 0 + 8, undefined);
              A.store.Ref(ptr + 480 + 32 + 0 + 12, undefined);
              A.store.Ref(ptr + 480 + 32 + 0 + 16, undefined);
              A.store.Ref(ptr + 480 + 32 + 0 + 20, undefined);
              A.store.Bool(ptr + 480 + 32 + 0 + 26, false);
              A.store.Bool(ptr + 480 + 32 + 0 + 24, false);
              A.store.Bool(ptr + 480 + 32 + 0 + 27, false);
              A.store.Bool(ptr + 480 + 32 + 0 + 25, false);
            } else {
              A.store.Bool(ptr + 480 + 32 + 0 + 28, true);
              A.store.Ref(ptr + 480 + 32 + 0 + 0, x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["Active"]);
              A.store.Ref(ptr + 480 + 32 + 0 + 4, x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["Effective"]);
              A.store.Ref(ptr + 480 + 32 + 0 + 8, x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserPolicy"]);
              A.store.Ref(ptr + 480 + 32 + 0 + 12, x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["DevicePolicy"]);
              A.store.Ref(ptr + 480 + 32 + 0 + 16, x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserSetting"]);
              A.store.Ref(ptr + 480 + 32 + 0 + 20, x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["SharedSetting"]);
              A.store.Bool(
                ptr + 480 + 32 + 0 + 26,
                "UserEditable" in x["EAP"]["ClientCertPattern"]["EnrollmentURI"] ? true : false
              );
              A.store.Bool(
                ptr + 480 + 32 + 0 + 24,
                x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 480 + 32 + 0 + 27,
                "DeviceEditable" in x["EAP"]["ClientCertPattern"]["EnrollmentURI"] ? true : false
              );
              A.store.Bool(
                ptr + 480 + 32 + 0 + 25,
                x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["EAP"]["ClientCertPattern"]["Issuer"] === "undefined") {
              A.store.Bool(ptr + 480 + 32 + 32 + 125, false);

              A.store.Bool(ptr + 480 + 32 + 32 + 0 + 28, false);
              A.store.Ref(ptr + 480 + 32 + 32 + 0 + 0, undefined);
              A.store.Ref(ptr + 480 + 32 + 32 + 0 + 4, undefined);
              A.store.Ref(ptr + 480 + 32 + 32 + 0 + 8, undefined);
              A.store.Ref(ptr + 480 + 32 + 32 + 0 + 12, undefined);
              A.store.Ref(ptr + 480 + 32 + 32 + 0 + 16, undefined);
              A.store.Ref(ptr + 480 + 32 + 32 + 0 + 20, undefined);
              A.store.Bool(ptr + 480 + 32 + 32 + 0 + 26, false);
              A.store.Bool(ptr + 480 + 32 + 32 + 0 + 24, false);
              A.store.Bool(ptr + 480 + 32 + 32 + 0 + 27, false);
              A.store.Bool(ptr + 480 + 32 + 32 + 0 + 25, false);

              A.store.Bool(ptr + 480 + 32 + 32 + 32 + 28, false);
              A.store.Ref(ptr + 480 + 32 + 32 + 32 + 0, undefined);
              A.store.Ref(ptr + 480 + 32 + 32 + 32 + 4, undefined);
              A.store.Ref(ptr + 480 + 32 + 32 + 32 + 8, undefined);
              A.store.Ref(ptr + 480 + 32 + 32 + 32 + 12, undefined);
              A.store.Ref(ptr + 480 + 32 + 32 + 32 + 16, undefined);
              A.store.Ref(ptr + 480 + 32 + 32 + 32 + 20, undefined);
              A.store.Bool(ptr + 480 + 32 + 32 + 32 + 26, false);
              A.store.Bool(ptr + 480 + 32 + 32 + 32 + 24, false);
              A.store.Bool(ptr + 480 + 32 + 32 + 32 + 27, false);
              A.store.Bool(ptr + 480 + 32 + 32 + 32 + 25, false);

              A.store.Bool(ptr + 480 + 32 + 32 + 64 + 28, false);
              A.store.Ref(ptr + 480 + 32 + 32 + 64 + 0, undefined);
              A.store.Ref(ptr + 480 + 32 + 32 + 64 + 4, undefined);
              A.store.Ref(ptr + 480 + 32 + 32 + 64 + 8, undefined);
              A.store.Ref(ptr + 480 + 32 + 32 + 64 + 12, undefined);
              A.store.Ref(ptr + 480 + 32 + 32 + 64 + 16, undefined);
              A.store.Ref(ptr + 480 + 32 + 32 + 64 + 20, undefined);
              A.store.Bool(ptr + 480 + 32 + 32 + 64 + 26, false);
              A.store.Bool(ptr + 480 + 32 + 32 + 64 + 24, false);
              A.store.Bool(ptr + 480 + 32 + 32 + 64 + 27, false);
              A.store.Bool(ptr + 480 + 32 + 32 + 64 + 25, false);

              A.store.Bool(ptr + 480 + 32 + 32 + 96 + 28, false);
              A.store.Ref(ptr + 480 + 32 + 32 + 96 + 0, undefined);
              A.store.Ref(ptr + 480 + 32 + 32 + 96 + 4, undefined);
              A.store.Ref(ptr + 480 + 32 + 32 + 96 + 8, undefined);
              A.store.Ref(ptr + 480 + 32 + 32 + 96 + 12, undefined);
              A.store.Ref(ptr + 480 + 32 + 32 + 96 + 16, undefined);
              A.store.Ref(ptr + 480 + 32 + 32 + 96 + 20, undefined);
              A.store.Bool(ptr + 480 + 32 + 32 + 96 + 26, false);
              A.store.Bool(ptr + 480 + 32 + 32 + 96 + 24, false);
              A.store.Bool(ptr + 480 + 32 + 32 + 96 + 27, false);
              A.store.Bool(ptr + 480 + 32 + 32 + 96 + 25, false);
            } else {
              A.store.Bool(ptr + 480 + 32 + 32 + 125, true);

              if (typeof x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] === "undefined") {
                A.store.Bool(ptr + 480 + 32 + 32 + 0 + 28, false);
                A.store.Ref(ptr + 480 + 32 + 32 + 0 + 0, undefined);
                A.store.Ref(ptr + 480 + 32 + 32 + 0 + 4, undefined);
                A.store.Ref(ptr + 480 + 32 + 32 + 0 + 8, undefined);
                A.store.Ref(ptr + 480 + 32 + 32 + 0 + 12, undefined);
                A.store.Ref(ptr + 480 + 32 + 32 + 0 + 16, undefined);
                A.store.Ref(ptr + 480 + 32 + 32 + 0 + 20, undefined);
                A.store.Bool(ptr + 480 + 32 + 32 + 0 + 26, false);
                A.store.Bool(ptr + 480 + 32 + 32 + 0 + 24, false);
                A.store.Bool(ptr + 480 + 32 + 32 + 0 + 27, false);
                A.store.Bool(ptr + 480 + 32 + 32 + 0 + 25, false);
              } else {
                A.store.Bool(ptr + 480 + 32 + 32 + 0 + 28, true);
                A.store.Ref(
                  ptr + 480 + 32 + 32 + 0 + 0,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["Active"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 32 + 0 + 4,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["Effective"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 32 + 0 + 8,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 32 + 0 + 12,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 32 + 0 + 16,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 32 + 0 + 20,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 480 + 32 + 32 + 0 + 26,
                  "UserEditable" in x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] ? true : false
                );
                A.store.Bool(
                  ptr + 480 + 32 + 32 + 0 + 24,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 480 + 32 + 32 + 0 + 27,
                  "DeviceEditable" in x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] ? true : false
                );
                A.store.Bool(
                  ptr + 480 + 32 + 32 + 0 + 25,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] === "undefined") {
                A.store.Bool(ptr + 480 + 32 + 32 + 32 + 28, false);
                A.store.Ref(ptr + 480 + 32 + 32 + 32 + 0, undefined);
                A.store.Ref(ptr + 480 + 32 + 32 + 32 + 4, undefined);
                A.store.Ref(ptr + 480 + 32 + 32 + 32 + 8, undefined);
                A.store.Ref(ptr + 480 + 32 + 32 + 32 + 12, undefined);
                A.store.Ref(ptr + 480 + 32 + 32 + 32 + 16, undefined);
                A.store.Ref(ptr + 480 + 32 + 32 + 32 + 20, undefined);
                A.store.Bool(ptr + 480 + 32 + 32 + 32 + 26, false);
                A.store.Bool(ptr + 480 + 32 + 32 + 32 + 24, false);
                A.store.Bool(ptr + 480 + 32 + 32 + 32 + 27, false);
                A.store.Bool(ptr + 480 + 32 + 32 + 32 + 25, false);
              } else {
                A.store.Bool(ptr + 480 + 32 + 32 + 32 + 28, true);
                A.store.Ref(
                  ptr + 480 + 32 + 32 + 32 + 0,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["Active"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 32 + 32 + 4,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["Effective"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 32 + 32 + 8,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 32 + 32 + 12,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 32 + 32 + 16,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 32 + 32 + 20,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 480 + 32 + 32 + 32 + 26,
                  "UserEditable" in x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] ? true : false
                );
                A.store.Bool(
                  ptr + 480 + 32 + 32 + 32 + 24,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 480 + 32 + 32 + 32 + 27,
                  "DeviceEditable" in x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] ? true : false
                );
                A.store.Bool(
                  ptr + 480 + 32 + 32 + 32 + 25,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] === "undefined") {
                A.store.Bool(ptr + 480 + 32 + 32 + 64 + 28, false);
                A.store.Ref(ptr + 480 + 32 + 32 + 64 + 0, undefined);
                A.store.Ref(ptr + 480 + 32 + 32 + 64 + 4, undefined);
                A.store.Ref(ptr + 480 + 32 + 32 + 64 + 8, undefined);
                A.store.Ref(ptr + 480 + 32 + 32 + 64 + 12, undefined);
                A.store.Ref(ptr + 480 + 32 + 32 + 64 + 16, undefined);
                A.store.Ref(ptr + 480 + 32 + 32 + 64 + 20, undefined);
                A.store.Bool(ptr + 480 + 32 + 32 + 64 + 26, false);
                A.store.Bool(ptr + 480 + 32 + 32 + 64 + 24, false);
                A.store.Bool(ptr + 480 + 32 + 32 + 64 + 27, false);
                A.store.Bool(ptr + 480 + 32 + 32 + 64 + 25, false);
              } else {
                A.store.Bool(ptr + 480 + 32 + 32 + 64 + 28, true);
                A.store.Ref(
                  ptr + 480 + 32 + 32 + 64 + 0,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["Active"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 32 + 64 + 4,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["Effective"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 32 + 64 + 8,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 32 + 64 + 12,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 32 + 64 + 16,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 32 + 64 + 20,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 480 + 32 + 32 + 64 + 26,
                  "UserEditable" in x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] ? true : false
                );
                A.store.Bool(
                  ptr + 480 + 32 + 32 + 64 + 24,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 480 + 32 + 32 + 64 + 27,
                  "DeviceEditable" in x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] ? true : false
                );
                A.store.Bool(
                  ptr + 480 + 32 + 32 + 64 + 25,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] === "undefined") {
                A.store.Bool(ptr + 480 + 32 + 32 + 96 + 28, false);
                A.store.Ref(ptr + 480 + 32 + 32 + 96 + 0, undefined);
                A.store.Ref(ptr + 480 + 32 + 32 + 96 + 4, undefined);
                A.store.Ref(ptr + 480 + 32 + 32 + 96 + 8, undefined);
                A.store.Ref(ptr + 480 + 32 + 32 + 96 + 12, undefined);
                A.store.Ref(ptr + 480 + 32 + 32 + 96 + 16, undefined);
                A.store.Ref(ptr + 480 + 32 + 32 + 96 + 20, undefined);
                A.store.Bool(ptr + 480 + 32 + 32 + 96 + 26, false);
                A.store.Bool(ptr + 480 + 32 + 32 + 96 + 24, false);
                A.store.Bool(ptr + 480 + 32 + 32 + 96 + 27, false);
                A.store.Bool(ptr + 480 + 32 + 32 + 96 + 25, false);
              } else {
                A.store.Bool(ptr + 480 + 32 + 32 + 96 + 28, true);
                A.store.Ref(
                  ptr + 480 + 32 + 32 + 96 + 0,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Active"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 32 + 96 + 4,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Effective"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 32 + 96 + 8,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 32 + 96 + 12,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 32 + 96 + 16,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 32 + 96 + 20,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 480 + 32 + 32 + 96 + 26,
                  "UserEditable" in x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] ? true : false
                );
                A.store.Bool(
                  ptr + 480 + 32 + 32 + 96 + 24,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 480 + 32 + 32 + 96 + 27,
                  "DeviceEditable" in x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] ? true : false
                );
                A.store.Bool(
                  ptr + 480 + 32 + 32 + 96 + 25,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"] ? true : false
                );
              }
            }

            if (typeof x["EAP"]["ClientCertPattern"]["IssuerCARef"] === "undefined") {
              A.store.Bool(ptr + 480 + 32 + 160 + 28, false);
              A.store.Ref(ptr + 480 + 32 + 160 + 0, undefined);
              A.store.Ref(ptr + 480 + 32 + 160 + 4, undefined);
              A.store.Ref(ptr + 480 + 32 + 160 + 8, undefined);
              A.store.Ref(ptr + 480 + 32 + 160 + 12, undefined);
              A.store.Ref(ptr + 480 + 32 + 160 + 16, undefined);
              A.store.Ref(ptr + 480 + 32 + 160 + 20, undefined);
              A.store.Bool(ptr + 480 + 32 + 160 + 26, false);
              A.store.Bool(ptr + 480 + 32 + 160 + 24, false);
              A.store.Bool(ptr + 480 + 32 + 160 + 27, false);
              A.store.Bool(ptr + 480 + 32 + 160 + 25, false);
            } else {
              A.store.Bool(ptr + 480 + 32 + 160 + 28, true);
              A.store.Ref(ptr + 480 + 32 + 160 + 0, x["EAP"]["ClientCertPattern"]["IssuerCARef"]["Active"]);
              A.store.Ref(ptr + 480 + 32 + 160 + 4, x["EAP"]["ClientCertPattern"]["IssuerCARef"]["Effective"]);
              A.store.Ref(ptr + 480 + 32 + 160 + 8, x["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserPolicy"]);
              A.store.Ref(ptr + 480 + 32 + 160 + 12, x["EAP"]["ClientCertPattern"]["IssuerCARef"]["DevicePolicy"]);
              A.store.Ref(ptr + 480 + 32 + 160 + 16, x["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserSetting"]);
              A.store.Ref(ptr + 480 + 32 + 160 + 20, x["EAP"]["ClientCertPattern"]["IssuerCARef"]["SharedSetting"]);
              A.store.Bool(
                ptr + 480 + 32 + 160 + 26,
                "UserEditable" in x["EAP"]["ClientCertPattern"]["IssuerCARef"] ? true : false
              );
              A.store.Bool(
                ptr + 480 + 32 + 160 + 24,
                x["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 480 + 32 + 160 + 27,
                "DeviceEditable" in x["EAP"]["ClientCertPattern"]["IssuerCARef"] ? true : false
              );
              A.store.Bool(
                ptr + 480 + 32 + 160 + 25,
                x["EAP"]["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["EAP"]["ClientCertPattern"]["Subject"] === "undefined") {
              A.store.Bool(ptr + 480 + 32 + 192 + 125, false);

              A.store.Bool(ptr + 480 + 32 + 192 + 0 + 28, false);
              A.store.Ref(ptr + 480 + 32 + 192 + 0 + 0, undefined);
              A.store.Ref(ptr + 480 + 32 + 192 + 0 + 4, undefined);
              A.store.Ref(ptr + 480 + 32 + 192 + 0 + 8, undefined);
              A.store.Ref(ptr + 480 + 32 + 192 + 0 + 12, undefined);
              A.store.Ref(ptr + 480 + 32 + 192 + 0 + 16, undefined);
              A.store.Ref(ptr + 480 + 32 + 192 + 0 + 20, undefined);
              A.store.Bool(ptr + 480 + 32 + 192 + 0 + 26, false);
              A.store.Bool(ptr + 480 + 32 + 192 + 0 + 24, false);
              A.store.Bool(ptr + 480 + 32 + 192 + 0 + 27, false);
              A.store.Bool(ptr + 480 + 32 + 192 + 0 + 25, false);

              A.store.Bool(ptr + 480 + 32 + 192 + 32 + 28, false);
              A.store.Ref(ptr + 480 + 32 + 192 + 32 + 0, undefined);
              A.store.Ref(ptr + 480 + 32 + 192 + 32 + 4, undefined);
              A.store.Ref(ptr + 480 + 32 + 192 + 32 + 8, undefined);
              A.store.Ref(ptr + 480 + 32 + 192 + 32 + 12, undefined);
              A.store.Ref(ptr + 480 + 32 + 192 + 32 + 16, undefined);
              A.store.Ref(ptr + 480 + 32 + 192 + 32 + 20, undefined);
              A.store.Bool(ptr + 480 + 32 + 192 + 32 + 26, false);
              A.store.Bool(ptr + 480 + 32 + 192 + 32 + 24, false);
              A.store.Bool(ptr + 480 + 32 + 192 + 32 + 27, false);
              A.store.Bool(ptr + 480 + 32 + 192 + 32 + 25, false);

              A.store.Bool(ptr + 480 + 32 + 192 + 64 + 28, false);
              A.store.Ref(ptr + 480 + 32 + 192 + 64 + 0, undefined);
              A.store.Ref(ptr + 480 + 32 + 192 + 64 + 4, undefined);
              A.store.Ref(ptr + 480 + 32 + 192 + 64 + 8, undefined);
              A.store.Ref(ptr + 480 + 32 + 192 + 64 + 12, undefined);
              A.store.Ref(ptr + 480 + 32 + 192 + 64 + 16, undefined);
              A.store.Ref(ptr + 480 + 32 + 192 + 64 + 20, undefined);
              A.store.Bool(ptr + 480 + 32 + 192 + 64 + 26, false);
              A.store.Bool(ptr + 480 + 32 + 192 + 64 + 24, false);
              A.store.Bool(ptr + 480 + 32 + 192 + 64 + 27, false);
              A.store.Bool(ptr + 480 + 32 + 192 + 64 + 25, false);

              A.store.Bool(ptr + 480 + 32 + 192 + 96 + 28, false);
              A.store.Ref(ptr + 480 + 32 + 192 + 96 + 0, undefined);
              A.store.Ref(ptr + 480 + 32 + 192 + 96 + 4, undefined);
              A.store.Ref(ptr + 480 + 32 + 192 + 96 + 8, undefined);
              A.store.Ref(ptr + 480 + 32 + 192 + 96 + 12, undefined);
              A.store.Ref(ptr + 480 + 32 + 192 + 96 + 16, undefined);
              A.store.Ref(ptr + 480 + 32 + 192 + 96 + 20, undefined);
              A.store.Bool(ptr + 480 + 32 + 192 + 96 + 26, false);
              A.store.Bool(ptr + 480 + 32 + 192 + 96 + 24, false);
              A.store.Bool(ptr + 480 + 32 + 192 + 96 + 27, false);
              A.store.Bool(ptr + 480 + 32 + 192 + 96 + 25, false);
            } else {
              A.store.Bool(ptr + 480 + 32 + 192 + 125, true);

              if (typeof x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] === "undefined") {
                A.store.Bool(ptr + 480 + 32 + 192 + 0 + 28, false);
                A.store.Ref(ptr + 480 + 32 + 192 + 0 + 0, undefined);
                A.store.Ref(ptr + 480 + 32 + 192 + 0 + 4, undefined);
                A.store.Ref(ptr + 480 + 32 + 192 + 0 + 8, undefined);
                A.store.Ref(ptr + 480 + 32 + 192 + 0 + 12, undefined);
                A.store.Ref(ptr + 480 + 32 + 192 + 0 + 16, undefined);
                A.store.Ref(ptr + 480 + 32 + 192 + 0 + 20, undefined);
                A.store.Bool(ptr + 480 + 32 + 192 + 0 + 26, false);
                A.store.Bool(ptr + 480 + 32 + 192 + 0 + 24, false);
                A.store.Bool(ptr + 480 + 32 + 192 + 0 + 27, false);
                A.store.Bool(ptr + 480 + 32 + 192 + 0 + 25, false);
              } else {
                A.store.Bool(ptr + 480 + 32 + 192 + 0 + 28, true);
                A.store.Ref(
                  ptr + 480 + 32 + 192 + 0 + 0,
                  x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["Active"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 192 + 0 + 4,
                  x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["Effective"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 192 + 0 + 8,
                  x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 192 + 0 + 12,
                  x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 192 + 0 + 16,
                  x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 192 + 0 + 20,
                  x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 480 + 32 + 192 + 0 + 26,
                  "UserEditable" in x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] ? true : false
                );
                A.store.Bool(
                  ptr + 480 + 32 + 192 + 0 + 24,
                  x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 480 + 32 + 192 + 0 + 27,
                  "DeviceEditable" in x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] ? true : false
                );
                A.store.Bool(
                  ptr + 480 + 32 + 192 + 0 + 25,
                  x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["EAP"]["ClientCertPattern"]["Subject"]["Locality"] === "undefined") {
                A.store.Bool(ptr + 480 + 32 + 192 + 32 + 28, false);
                A.store.Ref(ptr + 480 + 32 + 192 + 32 + 0, undefined);
                A.store.Ref(ptr + 480 + 32 + 192 + 32 + 4, undefined);
                A.store.Ref(ptr + 480 + 32 + 192 + 32 + 8, undefined);
                A.store.Ref(ptr + 480 + 32 + 192 + 32 + 12, undefined);
                A.store.Ref(ptr + 480 + 32 + 192 + 32 + 16, undefined);
                A.store.Ref(ptr + 480 + 32 + 192 + 32 + 20, undefined);
                A.store.Bool(ptr + 480 + 32 + 192 + 32 + 26, false);
                A.store.Bool(ptr + 480 + 32 + 192 + 32 + 24, false);
                A.store.Bool(ptr + 480 + 32 + 192 + 32 + 27, false);
                A.store.Bool(ptr + 480 + 32 + 192 + 32 + 25, false);
              } else {
                A.store.Bool(ptr + 480 + 32 + 192 + 32 + 28, true);
                A.store.Ref(
                  ptr + 480 + 32 + 192 + 32 + 0,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["Active"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 192 + 32 + 4,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["Effective"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 192 + 32 + 8,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 192 + 32 + 12,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 192 + 32 + 16,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 192 + 32 + 20,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 480 + 32 + 192 + 32 + 26,
                  "UserEditable" in x["EAP"]["ClientCertPattern"]["Subject"]["Locality"] ? true : false
                );
                A.store.Bool(
                  ptr + 480 + 32 + 192 + 32 + 24,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 480 + 32 + 192 + 32 + 27,
                  "DeviceEditable" in x["EAP"]["ClientCertPattern"]["Subject"]["Locality"] ? true : false
                );
                A.store.Bool(
                  ptr + 480 + 32 + 192 + 32 + 25,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["EAP"]["ClientCertPattern"]["Subject"]["Organization"] === "undefined") {
                A.store.Bool(ptr + 480 + 32 + 192 + 64 + 28, false);
                A.store.Ref(ptr + 480 + 32 + 192 + 64 + 0, undefined);
                A.store.Ref(ptr + 480 + 32 + 192 + 64 + 4, undefined);
                A.store.Ref(ptr + 480 + 32 + 192 + 64 + 8, undefined);
                A.store.Ref(ptr + 480 + 32 + 192 + 64 + 12, undefined);
                A.store.Ref(ptr + 480 + 32 + 192 + 64 + 16, undefined);
                A.store.Ref(ptr + 480 + 32 + 192 + 64 + 20, undefined);
                A.store.Bool(ptr + 480 + 32 + 192 + 64 + 26, false);
                A.store.Bool(ptr + 480 + 32 + 192 + 64 + 24, false);
                A.store.Bool(ptr + 480 + 32 + 192 + 64 + 27, false);
                A.store.Bool(ptr + 480 + 32 + 192 + 64 + 25, false);
              } else {
                A.store.Bool(ptr + 480 + 32 + 192 + 64 + 28, true);
                A.store.Ref(
                  ptr + 480 + 32 + 192 + 64 + 0,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["Active"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 192 + 64 + 4,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["Effective"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 192 + 64 + 8,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 192 + 64 + 12,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 192 + 64 + 16,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 192 + 64 + 20,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 480 + 32 + 192 + 64 + 26,
                  "UserEditable" in x["EAP"]["ClientCertPattern"]["Subject"]["Organization"] ? true : false
                );
                A.store.Bool(
                  ptr + 480 + 32 + 192 + 64 + 24,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 480 + 32 + 192 + 64 + 27,
                  "DeviceEditable" in x["EAP"]["ClientCertPattern"]["Subject"]["Organization"] ? true : false
                );
                A.store.Bool(
                  ptr + 480 + 32 + 192 + 64 + 25,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] === "undefined") {
                A.store.Bool(ptr + 480 + 32 + 192 + 96 + 28, false);
                A.store.Ref(ptr + 480 + 32 + 192 + 96 + 0, undefined);
                A.store.Ref(ptr + 480 + 32 + 192 + 96 + 4, undefined);
                A.store.Ref(ptr + 480 + 32 + 192 + 96 + 8, undefined);
                A.store.Ref(ptr + 480 + 32 + 192 + 96 + 12, undefined);
                A.store.Ref(ptr + 480 + 32 + 192 + 96 + 16, undefined);
                A.store.Ref(ptr + 480 + 32 + 192 + 96 + 20, undefined);
                A.store.Bool(ptr + 480 + 32 + 192 + 96 + 26, false);
                A.store.Bool(ptr + 480 + 32 + 192 + 96 + 24, false);
                A.store.Bool(ptr + 480 + 32 + 192 + 96 + 27, false);
                A.store.Bool(ptr + 480 + 32 + 192 + 96 + 25, false);
              } else {
                A.store.Bool(ptr + 480 + 32 + 192 + 96 + 28, true);
                A.store.Ref(
                  ptr + 480 + 32 + 192 + 96 + 0,
                  x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Active"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 192 + 96 + 4,
                  x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Effective"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 192 + 96 + 8,
                  x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 192 + 96 + 12,
                  x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 192 + 96 + 16,
                  x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 480 + 32 + 192 + 96 + 20,
                  x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 480 + 32 + 192 + 96 + 26,
                  "UserEditable" in x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] ? true : false
                );
                A.store.Bool(
                  ptr + 480 + 32 + 192 + 96 + 24,
                  x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 480 + 32 + 192 + 96 + 27,
                  "DeviceEditable" in x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] ? true : false
                );
                A.store.Bool(
                  ptr + 480 + 32 + 192 + 96 + 25,
                  x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"] ? true : false
                );
              }
            }
          }

          if (typeof x["EAP"]["ClientCertPKCS11Id"] === "undefined") {
            A.store.Bool(ptr + 480 + 352 + 28, false);
            A.store.Ref(ptr + 480 + 352 + 0, undefined);
            A.store.Ref(ptr + 480 + 352 + 4, undefined);
            A.store.Ref(ptr + 480 + 352 + 8, undefined);
            A.store.Ref(ptr + 480 + 352 + 12, undefined);
            A.store.Ref(ptr + 480 + 352 + 16, undefined);
            A.store.Ref(ptr + 480 + 352 + 20, undefined);
            A.store.Bool(ptr + 480 + 352 + 26, false);
            A.store.Bool(ptr + 480 + 352 + 24, false);
            A.store.Bool(ptr + 480 + 352 + 27, false);
            A.store.Bool(ptr + 480 + 352 + 25, false);
          } else {
            A.store.Bool(ptr + 480 + 352 + 28, true);
            A.store.Ref(ptr + 480 + 352 + 0, x["EAP"]["ClientCertPKCS11Id"]["Active"]);
            A.store.Ref(ptr + 480 + 352 + 4, x["EAP"]["ClientCertPKCS11Id"]["Effective"]);
            A.store.Ref(ptr + 480 + 352 + 8, x["EAP"]["ClientCertPKCS11Id"]["UserPolicy"]);
            A.store.Ref(ptr + 480 + 352 + 12, x["EAP"]["ClientCertPKCS11Id"]["DevicePolicy"]);
            A.store.Ref(ptr + 480 + 352 + 16, x["EAP"]["ClientCertPKCS11Id"]["UserSetting"]);
            A.store.Ref(ptr + 480 + 352 + 20, x["EAP"]["ClientCertPKCS11Id"]["SharedSetting"]);
            A.store.Bool(ptr + 480 + 352 + 26, "UserEditable" in x["EAP"]["ClientCertPKCS11Id"] ? true : false);
            A.store.Bool(ptr + 480 + 352 + 24, x["EAP"]["ClientCertPKCS11Id"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 480 + 352 + 27, "DeviceEditable" in x["EAP"]["ClientCertPKCS11Id"] ? true : false);
            A.store.Bool(ptr + 480 + 352 + 25, x["EAP"]["ClientCertPKCS11Id"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["ClientCertProvisioningProfileId"] === "undefined") {
            A.store.Bool(ptr + 480 + 384 + 28, false);
            A.store.Ref(ptr + 480 + 384 + 0, undefined);
            A.store.Ref(ptr + 480 + 384 + 4, undefined);
            A.store.Ref(ptr + 480 + 384 + 8, undefined);
            A.store.Ref(ptr + 480 + 384 + 12, undefined);
            A.store.Ref(ptr + 480 + 384 + 16, undefined);
            A.store.Ref(ptr + 480 + 384 + 20, undefined);
            A.store.Bool(ptr + 480 + 384 + 26, false);
            A.store.Bool(ptr + 480 + 384 + 24, false);
            A.store.Bool(ptr + 480 + 384 + 27, false);
            A.store.Bool(ptr + 480 + 384 + 25, false);
          } else {
            A.store.Bool(ptr + 480 + 384 + 28, true);
            A.store.Ref(ptr + 480 + 384 + 0, x["EAP"]["ClientCertProvisioningProfileId"]["Active"]);
            A.store.Ref(ptr + 480 + 384 + 4, x["EAP"]["ClientCertProvisioningProfileId"]["Effective"]);
            A.store.Ref(ptr + 480 + 384 + 8, x["EAP"]["ClientCertProvisioningProfileId"]["UserPolicy"]);
            A.store.Ref(ptr + 480 + 384 + 12, x["EAP"]["ClientCertProvisioningProfileId"]["DevicePolicy"]);
            A.store.Ref(ptr + 480 + 384 + 16, x["EAP"]["ClientCertProvisioningProfileId"]["UserSetting"]);
            A.store.Ref(ptr + 480 + 384 + 20, x["EAP"]["ClientCertProvisioningProfileId"]["SharedSetting"]);
            A.store.Bool(
              ptr + 480 + 384 + 26,
              "UserEditable" in x["EAP"]["ClientCertProvisioningProfileId"] ? true : false
            );
            A.store.Bool(
              ptr + 480 + 384 + 24,
              x["EAP"]["ClientCertProvisioningProfileId"]["UserEditable"] ? true : false
            );
            A.store.Bool(
              ptr + 480 + 384 + 27,
              "DeviceEditable" in x["EAP"]["ClientCertProvisioningProfileId"] ? true : false
            );
            A.store.Bool(
              ptr + 480 + 384 + 25,
              x["EAP"]["ClientCertProvisioningProfileId"]["DeviceEditable"] ? true : false
            );
          }

          if (typeof x["EAP"]["ClientCertRef"] === "undefined") {
            A.store.Bool(ptr + 480 + 416 + 28, false);
            A.store.Ref(ptr + 480 + 416 + 0, undefined);
            A.store.Ref(ptr + 480 + 416 + 4, undefined);
            A.store.Ref(ptr + 480 + 416 + 8, undefined);
            A.store.Ref(ptr + 480 + 416 + 12, undefined);
            A.store.Ref(ptr + 480 + 416 + 16, undefined);
            A.store.Ref(ptr + 480 + 416 + 20, undefined);
            A.store.Bool(ptr + 480 + 416 + 26, false);
            A.store.Bool(ptr + 480 + 416 + 24, false);
            A.store.Bool(ptr + 480 + 416 + 27, false);
            A.store.Bool(ptr + 480 + 416 + 25, false);
          } else {
            A.store.Bool(ptr + 480 + 416 + 28, true);
            A.store.Ref(ptr + 480 + 416 + 0, x["EAP"]["ClientCertRef"]["Active"]);
            A.store.Ref(ptr + 480 + 416 + 4, x["EAP"]["ClientCertRef"]["Effective"]);
            A.store.Ref(ptr + 480 + 416 + 8, x["EAP"]["ClientCertRef"]["UserPolicy"]);
            A.store.Ref(ptr + 480 + 416 + 12, x["EAP"]["ClientCertRef"]["DevicePolicy"]);
            A.store.Ref(ptr + 480 + 416 + 16, x["EAP"]["ClientCertRef"]["UserSetting"]);
            A.store.Ref(ptr + 480 + 416 + 20, x["EAP"]["ClientCertRef"]["SharedSetting"]);
            A.store.Bool(ptr + 480 + 416 + 26, "UserEditable" in x["EAP"]["ClientCertRef"] ? true : false);
            A.store.Bool(ptr + 480 + 416 + 24, x["EAP"]["ClientCertRef"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 480 + 416 + 27, "DeviceEditable" in x["EAP"]["ClientCertRef"] ? true : false);
            A.store.Bool(ptr + 480 + 416 + 25, x["EAP"]["ClientCertRef"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["ClientCertType"] === "undefined") {
            A.store.Bool(ptr + 480 + 448 + 28, false);
            A.store.Ref(ptr + 480 + 448 + 0, undefined);
            A.store.Ref(ptr + 480 + 448 + 4, undefined);
            A.store.Ref(ptr + 480 + 448 + 8, undefined);
            A.store.Ref(ptr + 480 + 448 + 12, undefined);
            A.store.Ref(ptr + 480 + 448 + 16, undefined);
            A.store.Ref(ptr + 480 + 448 + 20, undefined);
            A.store.Bool(ptr + 480 + 448 + 26, false);
            A.store.Bool(ptr + 480 + 448 + 24, false);
            A.store.Bool(ptr + 480 + 448 + 27, false);
            A.store.Bool(ptr + 480 + 448 + 25, false);
          } else {
            A.store.Bool(ptr + 480 + 448 + 28, true);
            A.store.Ref(ptr + 480 + 448 + 0, x["EAP"]["ClientCertType"]["Active"]);
            A.store.Ref(ptr + 480 + 448 + 4, x["EAP"]["ClientCertType"]["Effective"]);
            A.store.Ref(ptr + 480 + 448 + 8, x["EAP"]["ClientCertType"]["UserPolicy"]);
            A.store.Ref(ptr + 480 + 448 + 12, x["EAP"]["ClientCertType"]["DevicePolicy"]);
            A.store.Ref(ptr + 480 + 448 + 16, x["EAP"]["ClientCertType"]["UserSetting"]);
            A.store.Ref(ptr + 480 + 448 + 20, x["EAP"]["ClientCertType"]["SharedSetting"]);
            A.store.Bool(ptr + 480 + 448 + 26, "UserEditable" in x["EAP"]["ClientCertType"] ? true : false);
            A.store.Bool(ptr + 480 + 448 + 24, x["EAP"]["ClientCertType"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 480 + 448 + 27, "DeviceEditable" in x["EAP"]["ClientCertType"] ? true : false);
            A.store.Bool(ptr + 480 + 448 + 25, x["EAP"]["ClientCertType"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["Identity"] === "undefined") {
            A.store.Bool(ptr + 480 + 480 + 28, false);
            A.store.Ref(ptr + 480 + 480 + 0, undefined);
            A.store.Ref(ptr + 480 + 480 + 4, undefined);
            A.store.Ref(ptr + 480 + 480 + 8, undefined);
            A.store.Ref(ptr + 480 + 480 + 12, undefined);
            A.store.Ref(ptr + 480 + 480 + 16, undefined);
            A.store.Ref(ptr + 480 + 480 + 20, undefined);
            A.store.Bool(ptr + 480 + 480 + 26, false);
            A.store.Bool(ptr + 480 + 480 + 24, false);
            A.store.Bool(ptr + 480 + 480 + 27, false);
            A.store.Bool(ptr + 480 + 480 + 25, false);
          } else {
            A.store.Bool(ptr + 480 + 480 + 28, true);
            A.store.Ref(ptr + 480 + 480 + 0, x["EAP"]["Identity"]["Active"]);
            A.store.Ref(ptr + 480 + 480 + 4, x["EAP"]["Identity"]["Effective"]);
            A.store.Ref(ptr + 480 + 480 + 8, x["EAP"]["Identity"]["UserPolicy"]);
            A.store.Ref(ptr + 480 + 480 + 12, x["EAP"]["Identity"]["DevicePolicy"]);
            A.store.Ref(ptr + 480 + 480 + 16, x["EAP"]["Identity"]["UserSetting"]);
            A.store.Ref(ptr + 480 + 480 + 20, x["EAP"]["Identity"]["SharedSetting"]);
            A.store.Bool(ptr + 480 + 480 + 26, "UserEditable" in x["EAP"]["Identity"] ? true : false);
            A.store.Bool(ptr + 480 + 480 + 24, x["EAP"]["Identity"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 480 + 480 + 27, "DeviceEditable" in x["EAP"]["Identity"] ? true : false);
            A.store.Bool(ptr + 480 + 480 + 25, x["EAP"]["Identity"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["Inner"] === "undefined") {
            A.store.Bool(ptr + 480 + 512 + 28, false);
            A.store.Ref(ptr + 480 + 512 + 0, undefined);
            A.store.Ref(ptr + 480 + 512 + 4, undefined);
            A.store.Ref(ptr + 480 + 512 + 8, undefined);
            A.store.Ref(ptr + 480 + 512 + 12, undefined);
            A.store.Ref(ptr + 480 + 512 + 16, undefined);
            A.store.Ref(ptr + 480 + 512 + 20, undefined);
            A.store.Bool(ptr + 480 + 512 + 26, false);
            A.store.Bool(ptr + 480 + 512 + 24, false);
            A.store.Bool(ptr + 480 + 512 + 27, false);
            A.store.Bool(ptr + 480 + 512 + 25, false);
          } else {
            A.store.Bool(ptr + 480 + 512 + 28, true);
            A.store.Ref(ptr + 480 + 512 + 0, x["EAP"]["Inner"]["Active"]);
            A.store.Ref(ptr + 480 + 512 + 4, x["EAP"]["Inner"]["Effective"]);
            A.store.Ref(ptr + 480 + 512 + 8, x["EAP"]["Inner"]["UserPolicy"]);
            A.store.Ref(ptr + 480 + 512 + 12, x["EAP"]["Inner"]["DevicePolicy"]);
            A.store.Ref(ptr + 480 + 512 + 16, x["EAP"]["Inner"]["UserSetting"]);
            A.store.Ref(ptr + 480 + 512 + 20, x["EAP"]["Inner"]["SharedSetting"]);
            A.store.Bool(ptr + 480 + 512 + 26, "UserEditable" in x["EAP"]["Inner"] ? true : false);
            A.store.Bool(ptr + 480 + 512 + 24, x["EAP"]["Inner"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 480 + 512 + 27, "DeviceEditable" in x["EAP"]["Inner"] ? true : false);
            A.store.Bool(ptr + 480 + 512 + 25, x["EAP"]["Inner"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["Outer"] === "undefined") {
            A.store.Bool(ptr + 480 + 544 + 28, false);
            A.store.Ref(ptr + 480 + 544 + 0, undefined);
            A.store.Ref(ptr + 480 + 544 + 4, undefined);
            A.store.Ref(ptr + 480 + 544 + 8, undefined);
            A.store.Ref(ptr + 480 + 544 + 12, undefined);
            A.store.Ref(ptr + 480 + 544 + 16, undefined);
            A.store.Ref(ptr + 480 + 544 + 20, undefined);
            A.store.Bool(ptr + 480 + 544 + 26, false);
            A.store.Bool(ptr + 480 + 544 + 24, false);
            A.store.Bool(ptr + 480 + 544 + 27, false);
            A.store.Bool(ptr + 480 + 544 + 25, false);
          } else {
            A.store.Bool(ptr + 480 + 544 + 28, true);
            A.store.Ref(ptr + 480 + 544 + 0, x["EAP"]["Outer"]["Active"]);
            A.store.Ref(ptr + 480 + 544 + 4, x["EAP"]["Outer"]["Effective"]);
            A.store.Ref(ptr + 480 + 544 + 8, x["EAP"]["Outer"]["UserPolicy"]);
            A.store.Ref(ptr + 480 + 544 + 12, x["EAP"]["Outer"]["DevicePolicy"]);
            A.store.Ref(ptr + 480 + 544 + 16, x["EAP"]["Outer"]["UserSetting"]);
            A.store.Ref(ptr + 480 + 544 + 20, x["EAP"]["Outer"]["SharedSetting"]);
            A.store.Bool(ptr + 480 + 544 + 26, "UserEditable" in x["EAP"]["Outer"] ? true : false);
            A.store.Bool(ptr + 480 + 544 + 24, x["EAP"]["Outer"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 480 + 544 + 27, "DeviceEditable" in x["EAP"]["Outer"] ? true : false);
            A.store.Bool(ptr + 480 + 544 + 25, x["EAP"]["Outer"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["Password"] === "undefined") {
            A.store.Bool(ptr + 480 + 576 + 28, false);
            A.store.Ref(ptr + 480 + 576 + 0, undefined);
            A.store.Ref(ptr + 480 + 576 + 4, undefined);
            A.store.Ref(ptr + 480 + 576 + 8, undefined);
            A.store.Ref(ptr + 480 + 576 + 12, undefined);
            A.store.Ref(ptr + 480 + 576 + 16, undefined);
            A.store.Ref(ptr + 480 + 576 + 20, undefined);
            A.store.Bool(ptr + 480 + 576 + 26, false);
            A.store.Bool(ptr + 480 + 576 + 24, false);
            A.store.Bool(ptr + 480 + 576 + 27, false);
            A.store.Bool(ptr + 480 + 576 + 25, false);
          } else {
            A.store.Bool(ptr + 480 + 576 + 28, true);
            A.store.Ref(ptr + 480 + 576 + 0, x["EAP"]["Password"]["Active"]);
            A.store.Ref(ptr + 480 + 576 + 4, x["EAP"]["Password"]["Effective"]);
            A.store.Ref(ptr + 480 + 576 + 8, x["EAP"]["Password"]["UserPolicy"]);
            A.store.Ref(ptr + 480 + 576 + 12, x["EAP"]["Password"]["DevicePolicy"]);
            A.store.Ref(ptr + 480 + 576 + 16, x["EAP"]["Password"]["UserSetting"]);
            A.store.Ref(ptr + 480 + 576 + 20, x["EAP"]["Password"]["SharedSetting"]);
            A.store.Bool(ptr + 480 + 576 + 26, "UserEditable" in x["EAP"]["Password"] ? true : false);
            A.store.Bool(ptr + 480 + 576 + 24, x["EAP"]["Password"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 480 + 576 + 27, "DeviceEditable" in x["EAP"]["Password"] ? true : false);
            A.store.Bool(ptr + 480 + 576 + 25, x["EAP"]["Password"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["SaveCredentials"] === "undefined") {
            A.store.Bool(ptr + 480 + 608 + 21, false);
            A.store.Bool(ptr + 480 + 608 + 14, false);
            A.store.Bool(ptr + 480 + 608 + 0, false);
            A.store.Ref(ptr + 480 + 608 + 4, undefined);
            A.store.Bool(ptr + 480 + 608 + 15, false);
            A.store.Bool(ptr + 480 + 608 + 8, false);
            A.store.Bool(ptr + 480 + 608 + 16, false);
            A.store.Bool(ptr + 480 + 608 + 9, false);
            A.store.Bool(ptr + 480 + 608 + 17, false);
            A.store.Bool(ptr + 480 + 608 + 10, false);
            A.store.Bool(ptr + 480 + 608 + 18, false);
            A.store.Bool(ptr + 480 + 608 + 11, false);
            A.store.Bool(ptr + 480 + 608 + 19, false);
            A.store.Bool(ptr + 480 + 608 + 12, false);
            A.store.Bool(ptr + 480 + 608 + 20, false);
            A.store.Bool(ptr + 480 + 608 + 13, false);
          } else {
            A.store.Bool(ptr + 480 + 608 + 21, true);
            A.store.Bool(ptr + 480 + 608 + 14, "Active" in x["EAP"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 480 + 608 + 0, x["EAP"]["SaveCredentials"]["Active"] ? true : false);
            A.store.Ref(ptr + 480 + 608 + 4, x["EAP"]["SaveCredentials"]["Effective"]);
            A.store.Bool(ptr + 480 + 608 + 15, "UserPolicy" in x["EAP"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 480 + 608 + 8, x["EAP"]["SaveCredentials"]["UserPolicy"] ? true : false);
            A.store.Bool(ptr + 480 + 608 + 16, "DevicePolicy" in x["EAP"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 480 + 608 + 9, x["EAP"]["SaveCredentials"]["DevicePolicy"] ? true : false);
            A.store.Bool(ptr + 480 + 608 + 17, "UserSetting" in x["EAP"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 480 + 608 + 10, x["EAP"]["SaveCredentials"]["UserSetting"] ? true : false);
            A.store.Bool(ptr + 480 + 608 + 18, "SharedSetting" in x["EAP"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 480 + 608 + 11, x["EAP"]["SaveCredentials"]["SharedSetting"] ? true : false);
            A.store.Bool(ptr + 480 + 608 + 19, "UserEditable" in x["EAP"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 480 + 608 + 12, x["EAP"]["SaveCredentials"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 480 + 608 + 20, "DeviceEditable" in x["EAP"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 480 + 608 + 13, x["EAP"]["SaveCredentials"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["ServerCAPEMs"] === "undefined") {
            A.store.Bool(ptr + 480 + 632 + 28, false);
            A.store.Ref(ptr + 480 + 632 + 0, undefined);
            A.store.Ref(ptr + 480 + 632 + 4, undefined);
            A.store.Ref(ptr + 480 + 632 + 8, undefined);
            A.store.Ref(ptr + 480 + 632 + 12, undefined);
            A.store.Ref(ptr + 480 + 632 + 16, undefined);
            A.store.Ref(ptr + 480 + 632 + 20, undefined);
            A.store.Bool(ptr + 480 + 632 + 26, false);
            A.store.Bool(ptr + 480 + 632 + 24, false);
            A.store.Bool(ptr + 480 + 632 + 27, false);
            A.store.Bool(ptr + 480 + 632 + 25, false);
          } else {
            A.store.Bool(ptr + 480 + 632 + 28, true);
            A.store.Ref(ptr + 480 + 632 + 0, x["EAP"]["ServerCAPEMs"]["Active"]);
            A.store.Ref(ptr + 480 + 632 + 4, x["EAP"]["ServerCAPEMs"]["Effective"]);
            A.store.Ref(ptr + 480 + 632 + 8, x["EAP"]["ServerCAPEMs"]["UserPolicy"]);
            A.store.Ref(ptr + 480 + 632 + 12, x["EAP"]["ServerCAPEMs"]["DevicePolicy"]);
            A.store.Ref(ptr + 480 + 632 + 16, x["EAP"]["ServerCAPEMs"]["UserSetting"]);
            A.store.Ref(ptr + 480 + 632 + 20, x["EAP"]["ServerCAPEMs"]["SharedSetting"]);
            A.store.Bool(ptr + 480 + 632 + 26, "UserEditable" in x["EAP"]["ServerCAPEMs"] ? true : false);
            A.store.Bool(ptr + 480 + 632 + 24, x["EAP"]["ServerCAPEMs"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 480 + 632 + 27, "DeviceEditable" in x["EAP"]["ServerCAPEMs"] ? true : false);
            A.store.Bool(ptr + 480 + 632 + 25, x["EAP"]["ServerCAPEMs"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["ServerCARefs"] === "undefined") {
            A.store.Bool(ptr + 480 + 664 + 28, false);
            A.store.Ref(ptr + 480 + 664 + 0, undefined);
            A.store.Ref(ptr + 480 + 664 + 4, undefined);
            A.store.Ref(ptr + 480 + 664 + 8, undefined);
            A.store.Ref(ptr + 480 + 664 + 12, undefined);
            A.store.Ref(ptr + 480 + 664 + 16, undefined);
            A.store.Ref(ptr + 480 + 664 + 20, undefined);
            A.store.Bool(ptr + 480 + 664 + 26, false);
            A.store.Bool(ptr + 480 + 664 + 24, false);
            A.store.Bool(ptr + 480 + 664 + 27, false);
            A.store.Bool(ptr + 480 + 664 + 25, false);
          } else {
            A.store.Bool(ptr + 480 + 664 + 28, true);
            A.store.Ref(ptr + 480 + 664 + 0, x["EAP"]["ServerCARefs"]["Active"]);
            A.store.Ref(ptr + 480 + 664 + 4, x["EAP"]["ServerCARefs"]["Effective"]);
            A.store.Ref(ptr + 480 + 664 + 8, x["EAP"]["ServerCARefs"]["UserPolicy"]);
            A.store.Ref(ptr + 480 + 664 + 12, x["EAP"]["ServerCARefs"]["DevicePolicy"]);
            A.store.Ref(ptr + 480 + 664 + 16, x["EAP"]["ServerCARefs"]["UserSetting"]);
            A.store.Ref(ptr + 480 + 664 + 20, x["EAP"]["ServerCARefs"]["SharedSetting"]);
            A.store.Bool(ptr + 480 + 664 + 26, "UserEditable" in x["EAP"]["ServerCARefs"] ? true : false);
            A.store.Bool(ptr + 480 + 664 + 24, x["EAP"]["ServerCARefs"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 480 + 664 + 27, "DeviceEditable" in x["EAP"]["ServerCARefs"] ? true : false);
            A.store.Bool(ptr + 480 + 664 + 25, x["EAP"]["ServerCARefs"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["SubjectMatch"] === "undefined") {
            A.store.Bool(ptr + 480 + 696 + 28, false);
            A.store.Ref(ptr + 480 + 696 + 0, undefined);
            A.store.Ref(ptr + 480 + 696 + 4, undefined);
            A.store.Ref(ptr + 480 + 696 + 8, undefined);
            A.store.Ref(ptr + 480 + 696 + 12, undefined);
            A.store.Ref(ptr + 480 + 696 + 16, undefined);
            A.store.Ref(ptr + 480 + 696 + 20, undefined);
            A.store.Bool(ptr + 480 + 696 + 26, false);
            A.store.Bool(ptr + 480 + 696 + 24, false);
            A.store.Bool(ptr + 480 + 696 + 27, false);
            A.store.Bool(ptr + 480 + 696 + 25, false);
          } else {
            A.store.Bool(ptr + 480 + 696 + 28, true);
            A.store.Ref(ptr + 480 + 696 + 0, x["EAP"]["SubjectMatch"]["Active"]);
            A.store.Ref(ptr + 480 + 696 + 4, x["EAP"]["SubjectMatch"]["Effective"]);
            A.store.Ref(ptr + 480 + 696 + 8, x["EAP"]["SubjectMatch"]["UserPolicy"]);
            A.store.Ref(ptr + 480 + 696 + 12, x["EAP"]["SubjectMatch"]["DevicePolicy"]);
            A.store.Ref(ptr + 480 + 696 + 16, x["EAP"]["SubjectMatch"]["UserSetting"]);
            A.store.Ref(ptr + 480 + 696 + 20, x["EAP"]["SubjectMatch"]["SharedSetting"]);
            A.store.Bool(ptr + 480 + 696 + 26, "UserEditable" in x["EAP"]["SubjectMatch"] ? true : false);
            A.store.Bool(ptr + 480 + 696 + 24, x["EAP"]["SubjectMatch"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 480 + 696 + 27, "DeviceEditable" in x["EAP"]["SubjectMatch"] ? true : false);
            A.store.Bool(ptr + 480 + 696 + 25, x["EAP"]["SubjectMatch"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["TLSVersionMax"] === "undefined") {
            A.store.Bool(ptr + 480 + 728 + 28, false);
            A.store.Ref(ptr + 480 + 728 + 0, undefined);
            A.store.Ref(ptr + 480 + 728 + 4, undefined);
            A.store.Ref(ptr + 480 + 728 + 8, undefined);
            A.store.Ref(ptr + 480 + 728 + 12, undefined);
            A.store.Ref(ptr + 480 + 728 + 16, undefined);
            A.store.Ref(ptr + 480 + 728 + 20, undefined);
            A.store.Bool(ptr + 480 + 728 + 26, false);
            A.store.Bool(ptr + 480 + 728 + 24, false);
            A.store.Bool(ptr + 480 + 728 + 27, false);
            A.store.Bool(ptr + 480 + 728 + 25, false);
          } else {
            A.store.Bool(ptr + 480 + 728 + 28, true);
            A.store.Ref(ptr + 480 + 728 + 0, x["EAP"]["TLSVersionMax"]["Active"]);
            A.store.Ref(ptr + 480 + 728 + 4, x["EAP"]["TLSVersionMax"]["Effective"]);
            A.store.Ref(ptr + 480 + 728 + 8, x["EAP"]["TLSVersionMax"]["UserPolicy"]);
            A.store.Ref(ptr + 480 + 728 + 12, x["EAP"]["TLSVersionMax"]["DevicePolicy"]);
            A.store.Ref(ptr + 480 + 728 + 16, x["EAP"]["TLSVersionMax"]["UserSetting"]);
            A.store.Ref(ptr + 480 + 728 + 20, x["EAP"]["TLSVersionMax"]["SharedSetting"]);
            A.store.Bool(ptr + 480 + 728 + 26, "UserEditable" in x["EAP"]["TLSVersionMax"] ? true : false);
            A.store.Bool(ptr + 480 + 728 + 24, x["EAP"]["TLSVersionMax"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 480 + 728 + 27, "DeviceEditable" in x["EAP"]["TLSVersionMax"] ? true : false);
            A.store.Bool(ptr + 480 + 728 + 25, x["EAP"]["TLSVersionMax"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["UseProactiveKeyCaching"] === "undefined") {
            A.store.Bool(ptr + 480 + 760 + 21, false);
            A.store.Bool(ptr + 480 + 760 + 14, false);
            A.store.Bool(ptr + 480 + 760 + 0, false);
            A.store.Ref(ptr + 480 + 760 + 4, undefined);
            A.store.Bool(ptr + 480 + 760 + 15, false);
            A.store.Bool(ptr + 480 + 760 + 8, false);
            A.store.Bool(ptr + 480 + 760 + 16, false);
            A.store.Bool(ptr + 480 + 760 + 9, false);
            A.store.Bool(ptr + 480 + 760 + 17, false);
            A.store.Bool(ptr + 480 + 760 + 10, false);
            A.store.Bool(ptr + 480 + 760 + 18, false);
            A.store.Bool(ptr + 480 + 760 + 11, false);
            A.store.Bool(ptr + 480 + 760 + 19, false);
            A.store.Bool(ptr + 480 + 760 + 12, false);
            A.store.Bool(ptr + 480 + 760 + 20, false);
            A.store.Bool(ptr + 480 + 760 + 13, false);
          } else {
            A.store.Bool(ptr + 480 + 760 + 21, true);
            A.store.Bool(ptr + 480 + 760 + 14, "Active" in x["EAP"]["UseProactiveKeyCaching"] ? true : false);
            A.store.Bool(ptr + 480 + 760 + 0, x["EAP"]["UseProactiveKeyCaching"]["Active"] ? true : false);
            A.store.Ref(ptr + 480 + 760 + 4, x["EAP"]["UseProactiveKeyCaching"]["Effective"]);
            A.store.Bool(ptr + 480 + 760 + 15, "UserPolicy" in x["EAP"]["UseProactiveKeyCaching"] ? true : false);
            A.store.Bool(ptr + 480 + 760 + 8, x["EAP"]["UseProactiveKeyCaching"]["UserPolicy"] ? true : false);
            A.store.Bool(ptr + 480 + 760 + 16, "DevicePolicy" in x["EAP"]["UseProactiveKeyCaching"] ? true : false);
            A.store.Bool(ptr + 480 + 760 + 9, x["EAP"]["UseProactiveKeyCaching"]["DevicePolicy"] ? true : false);
            A.store.Bool(ptr + 480 + 760 + 17, "UserSetting" in x["EAP"]["UseProactiveKeyCaching"] ? true : false);
            A.store.Bool(ptr + 480 + 760 + 10, x["EAP"]["UseProactiveKeyCaching"]["UserSetting"] ? true : false);
            A.store.Bool(ptr + 480 + 760 + 18, "SharedSetting" in x["EAP"]["UseProactiveKeyCaching"] ? true : false);
            A.store.Bool(ptr + 480 + 760 + 11, x["EAP"]["UseProactiveKeyCaching"]["SharedSetting"] ? true : false);
            A.store.Bool(ptr + 480 + 760 + 19, "UserEditable" in x["EAP"]["UseProactiveKeyCaching"] ? true : false);
            A.store.Bool(ptr + 480 + 760 + 12, x["EAP"]["UseProactiveKeyCaching"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 480 + 760 + 20, "DeviceEditable" in x["EAP"]["UseProactiveKeyCaching"] ? true : false);
            A.store.Bool(ptr + 480 + 760 + 13, x["EAP"]["UseProactiveKeyCaching"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["UseSystemCAs"] === "undefined") {
            A.store.Bool(ptr + 480 + 784 + 21, false);
            A.store.Bool(ptr + 480 + 784 + 14, false);
            A.store.Bool(ptr + 480 + 784 + 0, false);
            A.store.Ref(ptr + 480 + 784 + 4, undefined);
            A.store.Bool(ptr + 480 + 784 + 15, false);
            A.store.Bool(ptr + 480 + 784 + 8, false);
            A.store.Bool(ptr + 480 + 784 + 16, false);
            A.store.Bool(ptr + 480 + 784 + 9, false);
            A.store.Bool(ptr + 480 + 784 + 17, false);
            A.store.Bool(ptr + 480 + 784 + 10, false);
            A.store.Bool(ptr + 480 + 784 + 18, false);
            A.store.Bool(ptr + 480 + 784 + 11, false);
            A.store.Bool(ptr + 480 + 784 + 19, false);
            A.store.Bool(ptr + 480 + 784 + 12, false);
            A.store.Bool(ptr + 480 + 784 + 20, false);
            A.store.Bool(ptr + 480 + 784 + 13, false);
          } else {
            A.store.Bool(ptr + 480 + 784 + 21, true);
            A.store.Bool(ptr + 480 + 784 + 14, "Active" in x["EAP"]["UseSystemCAs"] ? true : false);
            A.store.Bool(ptr + 480 + 784 + 0, x["EAP"]["UseSystemCAs"]["Active"] ? true : false);
            A.store.Ref(ptr + 480 + 784 + 4, x["EAP"]["UseSystemCAs"]["Effective"]);
            A.store.Bool(ptr + 480 + 784 + 15, "UserPolicy" in x["EAP"]["UseSystemCAs"] ? true : false);
            A.store.Bool(ptr + 480 + 784 + 8, x["EAP"]["UseSystemCAs"]["UserPolicy"] ? true : false);
            A.store.Bool(ptr + 480 + 784 + 16, "DevicePolicy" in x["EAP"]["UseSystemCAs"] ? true : false);
            A.store.Bool(ptr + 480 + 784 + 9, x["EAP"]["UseSystemCAs"]["DevicePolicy"] ? true : false);
            A.store.Bool(ptr + 480 + 784 + 17, "UserSetting" in x["EAP"]["UseSystemCAs"] ? true : false);
            A.store.Bool(ptr + 480 + 784 + 10, x["EAP"]["UseSystemCAs"]["UserSetting"] ? true : false);
            A.store.Bool(ptr + 480 + 784 + 18, "SharedSetting" in x["EAP"]["UseSystemCAs"] ? true : false);
            A.store.Bool(ptr + 480 + 784 + 11, x["EAP"]["UseSystemCAs"]["SharedSetting"] ? true : false);
            A.store.Bool(ptr + 480 + 784 + 19, "UserEditable" in x["EAP"]["UseSystemCAs"] ? true : false);
            A.store.Bool(ptr + 480 + 784 + 12, x["EAP"]["UseSystemCAs"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 480 + 784 + 20, "DeviceEditable" in x["EAP"]["UseSystemCAs"] ? true : false);
            A.store.Bool(ptr + 480 + 784 + 13, x["EAP"]["UseSystemCAs"]["DeviceEditable"] ? true : false);
          }
        }

        if (typeof x["Group"] === "undefined") {
          A.store.Bool(ptr + 1288 + 28, false);
          A.store.Ref(ptr + 1288 + 0, undefined);
          A.store.Ref(ptr + 1288 + 4, undefined);
          A.store.Ref(ptr + 1288 + 8, undefined);
          A.store.Ref(ptr + 1288 + 12, undefined);
          A.store.Ref(ptr + 1288 + 16, undefined);
          A.store.Ref(ptr + 1288 + 20, undefined);
          A.store.Bool(ptr + 1288 + 26, false);
          A.store.Bool(ptr + 1288 + 24, false);
          A.store.Bool(ptr + 1288 + 27, false);
          A.store.Bool(ptr + 1288 + 25, false);
        } else {
          A.store.Bool(ptr + 1288 + 28, true);
          A.store.Ref(ptr + 1288 + 0, x["Group"]["Active"]);
          A.store.Ref(ptr + 1288 + 4, x["Group"]["Effective"]);
          A.store.Ref(ptr + 1288 + 8, x["Group"]["UserPolicy"]);
          A.store.Ref(ptr + 1288 + 12, x["Group"]["DevicePolicy"]);
          A.store.Ref(ptr + 1288 + 16, x["Group"]["UserSetting"]);
          A.store.Ref(ptr + 1288 + 20, x["Group"]["SharedSetting"]);
          A.store.Bool(ptr + 1288 + 26, "UserEditable" in x["Group"] ? true : false);
          A.store.Bool(ptr + 1288 + 24, x["Group"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 1288 + 27, "DeviceEditable" in x["Group"] ? true : false);
          A.store.Bool(ptr + 1288 + 25, x["Group"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["IKEVersion"] === "undefined") {
          A.store.Bool(ptr + 1320 + 33, false);
          A.store.Bool(ptr + 1320 + 26, false);
          A.store.Int32(ptr + 1320 + 0, 0);
          A.store.Ref(ptr + 1320 + 4, undefined);
          A.store.Bool(ptr + 1320 + 27, false);
          A.store.Int32(ptr + 1320 + 8, 0);
          A.store.Bool(ptr + 1320 + 28, false);
          A.store.Int32(ptr + 1320 + 12, 0);
          A.store.Bool(ptr + 1320 + 29, false);
          A.store.Int32(ptr + 1320 + 16, 0);
          A.store.Bool(ptr + 1320 + 30, false);
          A.store.Int32(ptr + 1320 + 20, 0);
          A.store.Bool(ptr + 1320 + 31, false);
          A.store.Bool(ptr + 1320 + 24, false);
          A.store.Bool(ptr + 1320 + 32, false);
          A.store.Bool(ptr + 1320 + 25, false);
        } else {
          A.store.Bool(ptr + 1320 + 33, true);
          A.store.Bool(ptr + 1320 + 26, "Active" in x["IKEVersion"] ? true : false);
          A.store.Int32(
            ptr + 1320 + 0,
            x["IKEVersion"]["Active"] === undefined ? 0 : (x["IKEVersion"]["Active"] as number)
          );
          A.store.Ref(ptr + 1320 + 4, x["IKEVersion"]["Effective"]);
          A.store.Bool(ptr + 1320 + 27, "UserPolicy" in x["IKEVersion"] ? true : false);
          A.store.Int32(
            ptr + 1320 + 8,
            x["IKEVersion"]["UserPolicy"] === undefined ? 0 : (x["IKEVersion"]["UserPolicy"] as number)
          );
          A.store.Bool(ptr + 1320 + 28, "DevicePolicy" in x["IKEVersion"] ? true : false);
          A.store.Int32(
            ptr + 1320 + 12,
            x["IKEVersion"]["DevicePolicy"] === undefined ? 0 : (x["IKEVersion"]["DevicePolicy"] as number)
          );
          A.store.Bool(ptr + 1320 + 29, "UserSetting" in x["IKEVersion"] ? true : false);
          A.store.Int32(
            ptr + 1320 + 16,
            x["IKEVersion"]["UserSetting"] === undefined ? 0 : (x["IKEVersion"]["UserSetting"] as number)
          );
          A.store.Bool(ptr + 1320 + 30, "SharedSetting" in x["IKEVersion"] ? true : false);
          A.store.Int32(
            ptr + 1320 + 20,
            x["IKEVersion"]["SharedSetting"] === undefined ? 0 : (x["IKEVersion"]["SharedSetting"] as number)
          );
          A.store.Bool(ptr + 1320 + 31, "UserEditable" in x["IKEVersion"] ? true : false);
          A.store.Bool(ptr + 1320 + 24, x["IKEVersion"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 1320 + 32, "DeviceEditable" in x["IKEVersion"] ? true : false);
          A.store.Bool(ptr + 1320 + 25, x["IKEVersion"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["PSK"] === "undefined") {
          A.store.Bool(ptr + 1356 + 28, false);
          A.store.Ref(ptr + 1356 + 0, undefined);
          A.store.Ref(ptr + 1356 + 4, undefined);
          A.store.Ref(ptr + 1356 + 8, undefined);
          A.store.Ref(ptr + 1356 + 12, undefined);
          A.store.Ref(ptr + 1356 + 16, undefined);
          A.store.Ref(ptr + 1356 + 20, undefined);
          A.store.Bool(ptr + 1356 + 26, false);
          A.store.Bool(ptr + 1356 + 24, false);
          A.store.Bool(ptr + 1356 + 27, false);
          A.store.Bool(ptr + 1356 + 25, false);
        } else {
          A.store.Bool(ptr + 1356 + 28, true);
          A.store.Ref(ptr + 1356 + 0, x["PSK"]["Active"]);
          A.store.Ref(ptr + 1356 + 4, x["PSK"]["Effective"]);
          A.store.Ref(ptr + 1356 + 8, x["PSK"]["UserPolicy"]);
          A.store.Ref(ptr + 1356 + 12, x["PSK"]["DevicePolicy"]);
          A.store.Ref(ptr + 1356 + 16, x["PSK"]["UserSetting"]);
          A.store.Ref(ptr + 1356 + 20, x["PSK"]["SharedSetting"]);
          A.store.Bool(ptr + 1356 + 26, "UserEditable" in x["PSK"] ? true : false);
          A.store.Bool(ptr + 1356 + 24, x["PSK"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 1356 + 27, "DeviceEditable" in x["PSK"] ? true : false);
          A.store.Bool(ptr + 1356 + 25, x["PSK"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["SaveCredentials"] === "undefined") {
          A.store.Bool(ptr + 1388 + 21, false);
          A.store.Bool(ptr + 1388 + 14, false);
          A.store.Bool(ptr + 1388 + 0, false);
          A.store.Ref(ptr + 1388 + 4, undefined);
          A.store.Bool(ptr + 1388 + 15, false);
          A.store.Bool(ptr + 1388 + 8, false);
          A.store.Bool(ptr + 1388 + 16, false);
          A.store.Bool(ptr + 1388 + 9, false);
          A.store.Bool(ptr + 1388 + 17, false);
          A.store.Bool(ptr + 1388 + 10, false);
          A.store.Bool(ptr + 1388 + 18, false);
          A.store.Bool(ptr + 1388 + 11, false);
          A.store.Bool(ptr + 1388 + 19, false);
          A.store.Bool(ptr + 1388 + 12, false);
          A.store.Bool(ptr + 1388 + 20, false);
          A.store.Bool(ptr + 1388 + 13, false);
        } else {
          A.store.Bool(ptr + 1388 + 21, true);
          A.store.Bool(ptr + 1388 + 14, "Active" in x["SaveCredentials"] ? true : false);
          A.store.Bool(ptr + 1388 + 0, x["SaveCredentials"]["Active"] ? true : false);
          A.store.Ref(ptr + 1388 + 4, x["SaveCredentials"]["Effective"]);
          A.store.Bool(ptr + 1388 + 15, "UserPolicy" in x["SaveCredentials"] ? true : false);
          A.store.Bool(ptr + 1388 + 8, x["SaveCredentials"]["UserPolicy"] ? true : false);
          A.store.Bool(ptr + 1388 + 16, "DevicePolicy" in x["SaveCredentials"] ? true : false);
          A.store.Bool(ptr + 1388 + 9, x["SaveCredentials"]["DevicePolicy"] ? true : false);
          A.store.Bool(ptr + 1388 + 17, "UserSetting" in x["SaveCredentials"] ? true : false);
          A.store.Bool(ptr + 1388 + 10, x["SaveCredentials"]["UserSetting"] ? true : false);
          A.store.Bool(ptr + 1388 + 18, "SharedSetting" in x["SaveCredentials"] ? true : false);
          A.store.Bool(ptr + 1388 + 11, x["SaveCredentials"]["SharedSetting"] ? true : false);
          A.store.Bool(ptr + 1388 + 19, "UserEditable" in x["SaveCredentials"] ? true : false);
          A.store.Bool(ptr + 1388 + 12, x["SaveCredentials"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 1388 + 20, "DeviceEditable" in x["SaveCredentials"] ? true : false);
          A.store.Bool(ptr + 1388 + 13, x["SaveCredentials"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["ServerCAPEMs"] === "undefined") {
          A.store.Bool(ptr + 1412 + 28, false);
          A.store.Ref(ptr + 1412 + 0, undefined);
          A.store.Ref(ptr + 1412 + 4, undefined);
          A.store.Ref(ptr + 1412 + 8, undefined);
          A.store.Ref(ptr + 1412 + 12, undefined);
          A.store.Ref(ptr + 1412 + 16, undefined);
          A.store.Ref(ptr + 1412 + 20, undefined);
          A.store.Bool(ptr + 1412 + 26, false);
          A.store.Bool(ptr + 1412 + 24, false);
          A.store.Bool(ptr + 1412 + 27, false);
          A.store.Bool(ptr + 1412 + 25, false);
        } else {
          A.store.Bool(ptr + 1412 + 28, true);
          A.store.Ref(ptr + 1412 + 0, x["ServerCAPEMs"]["Active"]);
          A.store.Ref(ptr + 1412 + 4, x["ServerCAPEMs"]["Effective"]);
          A.store.Ref(ptr + 1412 + 8, x["ServerCAPEMs"]["UserPolicy"]);
          A.store.Ref(ptr + 1412 + 12, x["ServerCAPEMs"]["DevicePolicy"]);
          A.store.Ref(ptr + 1412 + 16, x["ServerCAPEMs"]["UserSetting"]);
          A.store.Ref(ptr + 1412 + 20, x["ServerCAPEMs"]["SharedSetting"]);
          A.store.Bool(ptr + 1412 + 26, "UserEditable" in x["ServerCAPEMs"] ? true : false);
          A.store.Bool(ptr + 1412 + 24, x["ServerCAPEMs"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 1412 + 27, "DeviceEditable" in x["ServerCAPEMs"] ? true : false);
          A.store.Bool(ptr + 1412 + 25, x["ServerCAPEMs"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["ServerCARefs"] === "undefined") {
          A.store.Bool(ptr + 1444 + 28, false);
          A.store.Ref(ptr + 1444 + 0, undefined);
          A.store.Ref(ptr + 1444 + 4, undefined);
          A.store.Ref(ptr + 1444 + 8, undefined);
          A.store.Ref(ptr + 1444 + 12, undefined);
          A.store.Ref(ptr + 1444 + 16, undefined);
          A.store.Ref(ptr + 1444 + 20, undefined);
          A.store.Bool(ptr + 1444 + 26, false);
          A.store.Bool(ptr + 1444 + 24, false);
          A.store.Bool(ptr + 1444 + 27, false);
          A.store.Bool(ptr + 1444 + 25, false);
        } else {
          A.store.Bool(ptr + 1444 + 28, true);
          A.store.Ref(ptr + 1444 + 0, x["ServerCARefs"]["Active"]);
          A.store.Ref(ptr + 1444 + 4, x["ServerCARefs"]["Effective"]);
          A.store.Ref(ptr + 1444 + 8, x["ServerCARefs"]["UserPolicy"]);
          A.store.Ref(ptr + 1444 + 12, x["ServerCARefs"]["DevicePolicy"]);
          A.store.Ref(ptr + 1444 + 16, x["ServerCARefs"]["UserSetting"]);
          A.store.Ref(ptr + 1444 + 20, x["ServerCARefs"]["SharedSetting"]);
          A.store.Bool(ptr + 1444 + 26, "UserEditable" in x["ServerCARefs"] ? true : false);
          A.store.Bool(ptr + 1444 + 24, x["ServerCARefs"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 1444 + 27, "DeviceEditable" in x["ServerCARefs"] ? true : false);
          A.store.Bool(ptr + 1444 + 25, x["ServerCARefs"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["XAUTH"] === "undefined") {
          A.store.Bool(ptr + 1476 + 85, false);

          A.store.Bool(ptr + 1476 + 0 + 28, false);
          A.store.Ref(ptr + 1476 + 0 + 0, undefined);
          A.store.Ref(ptr + 1476 + 0 + 4, undefined);
          A.store.Ref(ptr + 1476 + 0 + 8, undefined);
          A.store.Ref(ptr + 1476 + 0 + 12, undefined);
          A.store.Ref(ptr + 1476 + 0 + 16, undefined);
          A.store.Ref(ptr + 1476 + 0 + 20, undefined);
          A.store.Bool(ptr + 1476 + 0 + 26, false);
          A.store.Bool(ptr + 1476 + 0 + 24, false);
          A.store.Bool(ptr + 1476 + 0 + 27, false);
          A.store.Bool(ptr + 1476 + 0 + 25, false);

          A.store.Bool(ptr + 1476 + 32 + 21, false);
          A.store.Bool(ptr + 1476 + 32 + 14, false);
          A.store.Bool(ptr + 1476 + 32 + 0, false);
          A.store.Ref(ptr + 1476 + 32 + 4, undefined);
          A.store.Bool(ptr + 1476 + 32 + 15, false);
          A.store.Bool(ptr + 1476 + 32 + 8, false);
          A.store.Bool(ptr + 1476 + 32 + 16, false);
          A.store.Bool(ptr + 1476 + 32 + 9, false);
          A.store.Bool(ptr + 1476 + 32 + 17, false);
          A.store.Bool(ptr + 1476 + 32 + 10, false);
          A.store.Bool(ptr + 1476 + 32 + 18, false);
          A.store.Bool(ptr + 1476 + 32 + 11, false);
          A.store.Bool(ptr + 1476 + 32 + 19, false);
          A.store.Bool(ptr + 1476 + 32 + 12, false);
          A.store.Bool(ptr + 1476 + 32 + 20, false);
          A.store.Bool(ptr + 1476 + 32 + 13, false);

          A.store.Bool(ptr + 1476 + 56 + 28, false);
          A.store.Ref(ptr + 1476 + 56 + 0, undefined);
          A.store.Ref(ptr + 1476 + 56 + 4, undefined);
          A.store.Ref(ptr + 1476 + 56 + 8, undefined);
          A.store.Ref(ptr + 1476 + 56 + 12, undefined);
          A.store.Ref(ptr + 1476 + 56 + 16, undefined);
          A.store.Ref(ptr + 1476 + 56 + 20, undefined);
          A.store.Bool(ptr + 1476 + 56 + 26, false);
          A.store.Bool(ptr + 1476 + 56 + 24, false);
          A.store.Bool(ptr + 1476 + 56 + 27, false);
          A.store.Bool(ptr + 1476 + 56 + 25, false);
        } else {
          A.store.Bool(ptr + 1476 + 85, true);

          if (typeof x["XAUTH"]["Password"] === "undefined") {
            A.store.Bool(ptr + 1476 + 0 + 28, false);
            A.store.Ref(ptr + 1476 + 0 + 0, undefined);
            A.store.Ref(ptr + 1476 + 0 + 4, undefined);
            A.store.Ref(ptr + 1476 + 0 + 8, undefined);
            A.store.Ref(ptr + 1476 + 0 + 12, undefined);
            A.store.Ref(ptr + 1476 + 0 + 16, undefined);
            A.store.Ref(ptr + 1476 + 0 + 20, undefined);
            A.store.Bool(ptr + 1476 + 0 + 26, false);
            A.store.Bool(ptr + 1476 + 0 + 24, false);
            A.store.Bool(ptr + 1476 + 0 + 27, false);
            A.store.Bool(ptr + 1476 + 0 + 25, false);
          } else {
            A.store.Bool(ptr + 1476 + 0 + 28, true);
            A.store.Ref(ptr + 1476 + 0 + 0, x["XAUTH"]["Password"]["Active"]);
            A.store.Ref(ptr + 1476 + 0 + 4, x["XAUTH"]["Password"]["Effective"]);
            A.store.Ref(ptr + 1476 + 0 + 8, x["XAUTH"]["Password"]["UserPolicy"]);
            A.store.Ref(ptr + 1476 + 0 + 12, x["XAUTH"]["Password"]["DevicePolicy"]);
            A.store.Ref(ptr + 1476 + 0 + 16, x["XAUTH"]["Password"]["UserSetting"]);
            A.store.Ref(ptr + 1476 + 0 + 20, x["XAUTH"]["Password"]["SharedSetting"]);
            A.store.Bool(ptr + 1476 + 0 + 26, "UserEditable" in x["XAUTH"]["Password"] ? true : false);
            A.store.Bool(ptr + 1476 + 0 + 24, x["XAUTH"]["Password"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1476 + 0 + 27, "DeviceEditable" in x["XAUTH"]["Password"] ? true : false);
            A.store.Bool(ptr + 1476 + 0 + 25, x["XAUTH"]["Password"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["XAUTH"]["SaveCredentials"] === "undefined") {
            A.store.Bool(ptr + 1476 + 32 + 21, false);
            A.store.Bool(ptr + 1476 + 32 + 14, false);
            A.store.Bool(ptr + 1476 + 32 + 0, false);
            A.store.Ref(ptr + 1476 + 32 + 4, undefined);
            A.store.Bool(ptr + 1476 + 32 + 15, false);
            A.store.Bool(ptr + 1476 + 32 + 8, false);
            A.store.Bool(ptr + 1476 + 32 + 16, false);
            A.store.Bool(ptr + 1476 + 32 + 9, false);
            A.store.Bool(ptr + 1476 + 32 + 17, false);
            A.store.Bool(ptr + 1476 + 32 + 10, false);
            A.store.Bool(ptr + 1476 + 32 + 18, false);
            A.store.Bool(ptr + 1476 + 32 + 11, false);
            A.store.Bool(ptr + 1476 + 32 + 19, false);
            A.store.Bool(ptr + 1476 + 32 + 12, false);
            A.store.Bool(ptr + 1476 + 32 + 20, false);
            A.store.Bool(ptr + 1476 + 32 + 13, false);
          } else {
            A.store.Bool(ptr + 1476 + 32 + 21, true);
            A.store.Bool(ptr + 1476 + 32 + 14, "Active" in x["XAUTH"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 1476 + 32 + 0, x["XAUTH"]["SaveCredentials"]["Active"] ? true : false);
            A.store.Ref(ptr + 1476 + 32 + 4, x["XAUTH"]["SaveCredentials"]["Effective"]);
            A.store.Bool(ptr + 1476 + 32 + 15, "UserPolicy" in x["XAUTH"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 1476 + 32 + 8, x["XAUTH"]["SaveCredentials"]["UserPolicy"] ? true : false);
            A.store.Bool(ptr + 1476 + 32 + 16, "DevicePolicy" in x["XAUTH"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 1476 + 32 + 9, x["XAUTH"]["SaveCredentials"]["DevicePolicy"] ? true : false);
            A.store.Bool(ptr + 1476 + 32 + 17, "UserSetting" in x["XAUTH"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 1476 + 32 + 10, x["XAUTH"]["SaveCredentials"]["UserSetting"] ? true : false);
            A.store.Bool(ptr + 1476 + 32 + 18, "SharedSetting" in x["XAUTH"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 1476 + 32 + 11, x["XAUTH"]["SaveCredentials"]["SharedSetting"] ? true : false);
            A.store.Bool(ptr + 1476 + 32 + 19, "UserEditable" in x["XAUTH"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 1476 + 32 + 12, x["XAUTH"]["SaveCredentials"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1476 + 32 + 20, "DeviceEditable" in x["XAUTH"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 1476 + 32 + 13, x["XAUTH"]["SaveCredentials"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["XAUTH"]["Username"] === "undefined") {
            A.store.Bool(ptr + 1476 + 56 + 28, false);
            A.store.Ref(ptr + 1476 + 56 + 0, undefined);
            A.store.Ref(ptr + 1476 + 56 + 4, undefined);
            A.store.Ref(ptr + 1476 + 56 + 8, undefined);
            A.store.Ref(ptr + 1476 + 56 + 12, undefined);
            A.store.Ref(ptr + 1476 + 56 + 16, undefined);
            A.store.Ref(ptr + 1476 + 56 + 20, undefined);
            A.store.Bool(ptr + 1476 + 56 + 26, false);
            A.store.Bool(ptr + 1476 + 56 + 24, false);
            A.store.Bool(ptr + 1476 + 56 + 27, false);
            A.store.Bool(ptr + 1476 + 56 + 25, false);
          } else {
            A.store.Bool(ptr + 1476 + 56 + 28, true);
            A.store.Ref(ptr + 1476 + 56 + 0, x["XAUTH"]["Username"]["Active"]);
            A.store.Ref(ptr + 1476 + 56 + 4, x["XAUTH"]["Username"]["Effective"]);
            A.store.Ref(ptr + 1476 + 56 + 8, x["XAUTH"]["Username"]["UserPolicy"]);
            A.store.Ref(ptr + 1476 + 56 + 12, x["XAUTH"]["Username"]["DevicePolicy"]);
            A.store.Ref(ptr + 1476 + 56 + 16, x["XAUTH"]["Username"]["UserSetting"]);
            A.store.Ref(ptr + 1476 + 56 + 20, x["XAUTH"]["Username"]["SharedSetting"]);
            A.store.Bool(ptr + 1476 + 56 + 26, "UserEditable" in x["XAUTH"]["Username"] ? true : false);
            A.store.Bool(ptr + 1476 + 56 + 24, x["XAUTH"]["Username"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1476 + 56 + 27, "DeviceEditable" in x["XAUTH"]["Username"] ? true : false);
            A.store.Bool(ptr + 1476 + 56 + 25, x["XAUTH"]["Username"]["DeviceEditable"] ? true : false);
          }
        }
      }
    },
    "load_ManagedIPSecProperties": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      if (A.load.Bool(ptr + 0 + 28)) {
        x["AuthenticationType"] = {};
        x["AuthenticationType"]["Active"] = A.load.Ref(ptr + 0 + 0, undefined);
        x["AuthenticationType"]["Effective"] = A.load.Ref(ptr + 0 + 4, undefined);
        x["AuthenticationType"]["UserPolicy"] = A.load.Ref(ptr + 0 + 8, undefined);
        x["AuthenticationType"]["DevicePolicy"] = A.load.Ref(ptr + 0 + 12, undefined);
        x["AuthenticationType"]["UserSetting"] = A.load.Ref(ptr + 0 + 16, undefined);
        x["AuthenticationType"]["SharedSetting"] = A.load.Ref(ptr + 0 + 20, undefined);
        if (A.load.Bool(ptr + 0 + 26)) {
          x["AuthenticationType"]["UserEditable"] = A.load.Bool(ptr + 0 + 24);
        } else {
          delete x["AuthenticationType"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 0 + 27)) {
          x["AuthenticationType"]["DeviceEditable"] = A.load.Bool(ptr + 0 + 25);
        } else {
          delete x["AuthenticationType"]["DeviceEditable"];
        }
      } else {
        delete x["AuthenticationType"];
      }
      if (A.load.Bool(ptr + 32 + 318)) {
        x["ClientCertPattern"] = {};
        if (A.load.Bool(ptr + 32 + 0 + 28)) {
          x["ClientCertPattern"]["EnrollmentURI"] = {};
          x["ClientCertPattern"]["EnrollmentURI"]["Active"] = A.load.Ref(ptr + 32 + 0 + 0, undefined);
          x["ClientCertPattern"]["EnrollmentURI"]["Effective"] = A.load.Ref(ptr + 32 + 0 + 4, undefined);
          x["ClientCertPattern"]["EnrollmentURI"]["UserPolicy"] = A.load.Ref(ptr + 32 + 0 + 8, undefined);
          x["ClientCertPattern"]["EnrollmentURI"]["DevicePolicy"] = A.load.Ref(ptr + 32 + 0 + 12, undefined);
          x["ClientCertPattern"]["EnrollmentURI"]["UserSetting"] = A.load.Ref(ptr + 32 + 0 + 16, undefined);
          x["ClientCertPattern"]["EnrollmentURI"]["SharedSetting"] = A.load.Ref(ptr + 32 + 0 + 20, undefined);
          if (A.load.Bool(ptr + 32 + 0 + 26)) {
            x["ClientCertPattern"]["EnrollmentURI"]["UserEditable"] = A.load.Bool(ptr + 32 + 0 + 24);
          } else {
            delete x["ClientCertPattern"]["EnrollmentURI"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 32 + 0 + 27)) {
            x["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"] = A.load.Bool(ptr + 32 + 0 + 25);
          } else {
            delete x["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"];
          }
        } else {
          delete x["ClientCertPattern"]["EnrollmentURI"];
        }
        if (A.load.Bool(ptr + 32 + 32 + 125)) {
          x["ClientCertPattern"]["Issuer"] = {};
          if (A.load.Bool(ptr + 32 + 32 + 0 + 28)) {
            x["ClientCertPattern"]["Issuer"]["CommonName"] = {};
            x["ClientCertPattern"]["Issuer"]["CommonName"]["Active"] = A.load.Ref(ptr + 32 + 32 + 0 + 0, undefined);
            x["ClientCertPattern"]["Issuer"]["CommonName"]["Effective"] = A.load.Ref(ptr + 32 + 32 + 0 + 4, undefined);
            x["ClientCertPattern"]["Issuer"]["CommonName"]["UserPolicy"] = A.load.Ref(ptr + 32 + 32 + 0 + 8, undefined);
            x["ClientCertPattern"]["Issuer"]["CommonName"]["DevicePolicy"] = A.load.Ref(
              ptr + 32 + 32 + 0 + 12,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["CommonName"]["UserSetting"] = A.load.Ref(
              ptr + 32 + 32 + 0 + 16,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["CommonName"]["SharedSetting"] = A.load.Ref(
              ptr + 32 + 32 + 0 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 32 + 32 + 0 + 26)) {
              x["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"] = A.load.Bool(ptr + 32 + 32 + 0 + 24);
            } else {
              delete x["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 32 + 32 + 0 + 27)) {
              x["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"] = A.load.Bool(ptr + 32 + 32 + 0 + 25);
            } else {
              delete x["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"];
            }
          } else {
            delete x["ClientCertPattern"]["Issuer"]["CommonName"];
          }
          if (A.load.Bool(ptr + 32 + 32 + 32 + 28)) {
            x["ClientCertPattern"]["Issuer"]["Locality"] = {};
            x["ClientCertPattern"]["Issuer"]["Locality"]["Active"] = A.load.Ref(ptr + 32 + 32 + 32 + 0, undefined);
            x["ClientCertPattern"]["Issuer"]["Locality"]["Effective"] = A.load.Ref(ptr + 32 + 32 + 32 + 4, undefined);
            x["ClientCertPattern"]["Issuer"]["Locality"]["UserPolicy"] = A.load.Ref(ptr + 32 + 32 + 32 + 8, undefined);
            x["ClientCertPattern"]["Issuer"]["Locality"]["DevicePolicy"] = A.load.Ref(
              ptr + 32 + 32 + 32 + 12,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["Locality"]["UserSetting"] = A.load.Ref(
              ptr + 32 + 32 + 32 + 16,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["Locality"]["SharedSetting"] = A.load.Ref(
              ptr + 32 + 32 + 32 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 32 + 32 + 32 + 26)) {
              x["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"] = A.load.Bool(ptr + 32 + 32 + 32 + 24);
            } else {
              delete x["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 32 + 32 + 32 + 27)) {
              x["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"] = A.load.Bool(ptr + 32 + 32 + 32 + 25);
            } else {
              delete x["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"];
            }
          } else {
            delete x["ClientCertPattern"]["Issuer"]["Locality"];
          }
          if (A.load.Bool(ptr + 32 + 32 + 64 + 28)) {
            x["ClientCertPattern"]["Issuer"]["Organization"] = {};
            x["ClientCertPattern"]["Issuer"]["Organization"]["Active"] = A.load.Ref(ptr + 32 + 32 + 64 + 0, undefined);
            x["ClientCertPattern"]["Issuer"]["Organization"]["Effective"] = A.load.Ref(
              ptr + 32 + 32 + 64 + 4,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["Organization"]["UserPolicy"] = A.load.Ref(
              ptr + 32 + 32 + 64 + 8,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["Organization"]["DevicePolicy"] = A.load.Ref(
              ptr + 32 + 32 + 64 + 12,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["Organization"]["UserSetting"] = A.load.Ref(
              ptr + 32 + 32 + 64 + 16,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["Organization"]["SharedSetting"] = A.load.Ref(
              ptr + 32 + 32 + 64 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 32 + 32 + 64 + 26)) {
              x["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"] = A.load.Bool(ptr + 32 + 32 + 64 + 24);
            } else {
              delete x["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 32 + 32 + 64 + 27)) {
              x["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"] = A.load.Bool(ptr + 32 + 32 + 64 + 25);
            } else {
              delete x["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"];
            }
          } else {
            delete x["ClientCertPattern"]["Issuer"]["Organization"];
          }
          if (A.load.Bool(ptr + 32 + 32 + 96 + 28)) {
            x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = {};
            x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Active"] = A.load.Ref(
              ptr + 32 + 32 + 96 + 0,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Effective"] = A.load.Ref(
              ptr + 32 + 32 + 96 + 4,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserPolicy"] = A.load.Ref(
              ptr + 32 + 32 + 96 + 8,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DevicePolicy"] = A.load.Ref(
              ptr + 32 + 32 + 96 + 12,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserSetting"] = A.load.Ref(
              ptr + 32 + 32 + 96 + 16,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["SharedSetting"] = A.load.Ref(
              ptr + 32 + 32 + 96 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 32 + 32 + 96 + 26)) {
              x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"] = A.load.Bool(
                ptr + 32 + 32 + 96 + 24
              );
            } else {
              delete x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 32 + 32 + 96 + 27)) {
              x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"] = A.load.Bool(
                ptr + 32 + 32 + 96 + 25
              );
            } else {
              delete x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"];
            }
          } else {
            delete x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"];
          }
        } else {
          delete x["ClientCertPattern"]["Issuer"];
        }
        if (A.load.Bool(ptr + 32 + 160 + 28)) {
          x["ClientCertPattern"]["IssuerCARef"] = {};
          x["ClientCertPattern"]["IssuerCARef"]["Active"] = A.load.Ref(ptr + 32 + 160 + 0, undefined);
          x["ClientCertPattern"]["IssuerCARef"]["Effective"] = A.load.Ref(ptr + 32 + 160 + 4, undefined);
          x["ClientCertPattern"]["IssuerCARef"]["UserPolicy"] = A.load.Ref(ptr + 32 + 160 + 8, undefined);
          x["ClientCertPattern"]["IssuerCARef"]["DevicePolicy"] = A.load.Ref(ptr + 32 + 160 + 12, undefined);
          x["ClientCertPattern"]["IssuerCARef"]["UserSetting"] = A.load.Ref(ptr + 32 + 160 + 16, undefined);
          x["ClientCertPattern"]["IssuerCARef"]["SharedSetting"] = A.load.Ref(ptr + 32 + 160 + 20, undefined);
          if (A.load.Bool(ptr + 32 + 160 + 26)) {
            x["ClientCertPattern"]["IssuerCARef"]["UserEditable"] = A.load.Bool(ptr + 32 + 160 + 24);
          } else {
            delete x["ClientCertPattern"]["IssuerCARef"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 32 + 160 + 27)) {
            x["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"] = A.load.Bool(ptr + 32 + 160 + 25);
          } else {
            delete x["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"];
          }
        } else {
          delete x["ClientCertPattern"]["IssuerCARef"];
        }
        if (A.load.Bool(ptr + 32 + 192 + 125)) {
          x["ClientCertPattern"]["Subject"] = {};
          if (A.load.Bool(ptr + 32 + 192 + 0 + 28)) {
            x["ClientCertPattern"]["Subject"]["CommonName"] = {};
            x["ClientCertPattern"]["Subject"]["CommonName"]["Active"] = A.load.Ref(ptr + 32 + 192 + 0 + 0, undefined);
            x["ClientCertPattern"]["Subject"]["CommonName"]["Effective"] = A.load.Ref(
              ptr + 32 + 192 + 0 + 4,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["CommonName"]["UserPolicy"] = A.load.Ref(
              ptr + 32 + 192 + 0 + 8,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["CommonName"]["DevicePolicy"] = A.load.Ref(
              ptr + 32 + 192 + 0 + 12,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["CommonName"]["UserSetting"] = A.load.Ref(
              ptr + 32 + 192 + 0 + 16,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["CommonName"]["SharedSetting"] = A.load.Ref(
              ptr + 32 + 192 + 0 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 32 + 192 + 0 + 26)) {
              x["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"] = A.load.Bool(ptr + 32 + 192 + 0 + 24);
            } else {
              delete x["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 32 + 192 + 0 + 27)) {
              x["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"] = A.load.Bool(ptr + 32 + 192 + 0 + 25);
            } else {
              delete x["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"];
            }
          } else {
            delete x["ClientCertPattern"]["Subject"]["CommonName"];
          }
          if (A.load.Bool(ptr + 32 + 192 + 32 + 28)) {
            x["ClientCertPattern"]["Subject"]["Locality"] = {};
            x["ClientCertPattern"]["Subject"]["Locality"]["Active"] = A.load.Ref(ptr + 32 + 192 + 32 + 0, undefined);
            x["ClientCertPattern"]["Subject"]["Locality"]["Effective"] = A.load.Ref(ptr + 32 + 192 + 32 + 4, undefined);
            x["ClientCertPattern"]["Subject"]["Locality"]["UserPolicy"] = A.load.Ref(
              ptr + 32 + 192 + 32 + 8,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["Locality"]["DevicePolicy"] = A.load.Ref(
              ptr + 32 + 192 + 32 + 12,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["Locality"]["UserSetting"] = A.load.Ref(
              ptr + 32 + 192 + 32 + 16,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["Locality"]["SharedSetting"] = A.load.Ref(
              ptr + 32 + 192 + 32 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 32 + 192 + 32 + 26)) {
              x["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"] = A.load.Bool(ptr + 32 + 192 + 32 + 24);
            } else {
              delete x["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 32 + 192 + 32 + 27)) {
              x["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"] = A.load.Bool(ptr + 32 + 192 + 32 + 25);
            } else {
              delete x["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"];
            }
          } else {
            delete x["ClientCertPattern"]["Subject"]["Locality"];
          }
          if (A.load.Bool(ptr + 32 + 192 + 64 + 28)) {
            x["ClientCertPattern"]["Subject"]["Organization"] = {};
            x["ClientCertPattern"]["Subject"]["Organization"]["Active"] = A.load.Ref(
              ptr + 32 + 192 + 64 + 0,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["Organization"]["Effective"] = A.load.Ref(
              ptr + 32 + 192 + 64 + 4,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["Organization"]["UserPolicy"] = A.load.Ref(
              ptr + 32 + 192 + 64 + 8,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["Organization"]["DevicePolicy"] = A.load.Ref(
              ptr + 32 + 192 + 64 + 12,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["Organization"]["UserSetting"] = A.load.Ref(
              ptr + 32 + 192 + 64 + 16,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["Organization"]["SharedSetting"] = A.load.Ref(
              ptr + 32 + 192 + 64 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 32 + 192 + 64 + 26)) {
              x["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"] = A.load.Bool(ptr + 32 + 192 + 64 + 24);
            } else {
              delete x["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 32 + 192 + 64 + 27)) {
              x["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"] = A.load.Bool(
                ptr + 32 + 192 + 64 + 25
              );
            } else {
              delete x["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"];
            }
          } else {
            delete x["ClientCertPattern"]["Subject"]["Organization"];
          }
          if (A.load.Bool(ptr + 32 + 192 + 96 + 28)) {
            x["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = {};
            x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Active"] = A.load.Ref(
              ptr + 32 + 192 + 96 + 0,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Effective"] = A.load.Ref(
              ptr + 32 + 192 + 96 + 4,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserPolicy"] = A.load.Ref(
              ptr + 32 + 192 + 96 + 8,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DevicePolicy"] = A.load.Ref(
              ptr + 32 + 192 + 96 + 12,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserSetting"] = A.load.Ref(
              ptr + 32 + 192 + 96 + 16,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["SharedSetting"] = A.load.Ref(
              ptr + 32 + 192 + 96 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 32 + 192 + 96 + 26)) {
              x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"] = A.load.Bool(
                ptr + 32 + 192 + 96 + 24
              );
            } else {
              delete x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 32 + 192 + 96 + 27)) {
              x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"] = A.load.Bool(
                ptr + 32 + 192 + 96 + 25
              );
            } else {
              delete x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"];
            }
          } else {
            delete x["ClientCertPattern"]["Subject"]["OrganizationalUnit"];
          }
        } else {
          delete x["ClientCertPattern"]["Subject"];
        }
      } else {
        delete x["ClientCertPattern"];
      }
      if (A.load.Bool(ptr + 352 + 28)) {
        x["ClientCertPKCS11Id"] = {};
        x["ClientCertPKCS11Id"]["Active"] = A.load.Ref(ptr + 352 + 0, undefined);
        x["ClientCertPKCS11Id"]["Effective"] = A.load.Ref(ptr + 352 + 4, undefined);
        x["ClientCertPKCS11Id"]["UserPolicy"] = A.load.Ref(ptr + 352 + 8, undefined);
        x["ClientCertPKCS11Id"]["DevicePolicy"] = A.load.Ref(ptr + 352 + 12, undefined);
        x["ClientCertPKCS11Id"]["UserSetting"] = A.load.Ref(ptr + 352 + 16, undefined);
        x["ClientCertPKCS11Id"]["SharedSetting"] = A.load.Ref(ptr + 352 + 20, undefined);
        if (A.load.Bool(ptr + 352 + 26)) {
          x["ClientCertPKCS11Id"]["UserEditable"] = A.load.Bool(ptr + 352 + 24);
        } else {
          delete x["ClientCertPKCS11Id"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 352 + 27)) {
          x["ClientCertPKCS11Id"]["DeviceEditable"] = A.load.Bool(ptr + 352 + 25);
        } else {
          delete x["ClientCertPKCS11Id"]["DeviceEditable"];
        }
      } else {
        delete x["ClientCertPKCS11Id"];
      }
      if (A.load.Bool(ptr + 384 + 28)) {
        x["ClientCertProvisioningProfileId"] = {};
        x["ClientCertProvisioningProfileId"]["Active"] = A.load.Ref(ptr + 384 + 0, undefined);
        x["ClientCertProvisioningProfileId"]["Effective"] = A.load.Ref(ptr + 384 + 4, undefined);
        x["ClientCertProvisioningProfileId"]["UserPolicy"] = A.load.Ref(ptr + 384 + 8, undefined);
        x["ClientCertProvisioningProfileId"]["DevicePolicy"] = A.load.Ref(ptr + 384 + 12, undefined);
        x["ClientCertProvisioningProfileId"]["UserSetting"] = A.load.Ref(ptr + 384 + 16, undefined);
        x["ClientCertProvisioningProfileId"]["SharedSetting"] = A.load.Ref(ptr + 384 + 20, undefined);
        if (A.load.Bool(ptr + 384 + 26)) {
          x["ClientCertProvisioningProfileId"]["UserEditable"] = A.load.Bool(ptr + 384 + 24);
        } else {
          delete x["ClientCertProvisioningProfileId"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 384 + 27)) {
          x["ClientCertProvisioningProfileId"]["DeviceEditable"] = A.load.Bool(ptr + 384 + 25);
        } else {
          delete x["ClientCertProvisioningProfileId"]["DeviceEditable"];
        }
      } else {
        delete x["ClientCertProvisioningProfileId"];
      }
      if (A.load.Bool(ptr + 416 + 28)) {
        x["ClientCertRef"] = {};
        x["ClientCertRef"]["Active"] = A.load.Ref(ptr + 416 + 0, undefined);
        x["ClientCertRef"]["Effective"] = A.load.Ref(ptr + 416 + 4, undefined);
        x["ClientCertRef"]["UserPolicy"] = A.load.Ref(ptr + 416 + 8, undefined);
        x["ClientCertRef"]["DevicePolicy"] = A.load.Ref(ptr + 416 + 12, undefined);
        x["ClientCertRef"]["UserSetting"] = A.load.Ref(ptr + 416 + 16, undefined);
        x["ClientCertRef"]["SharedSetting"] = A.load.Ref(ptr + 416 + 20, undefined);
        if (A.load.Bool(ptr + 416 + 26)) {
          x["ClientCertRef"]["UserEditable"] = A.load.Bool(ptr + 416 + 24);
        } else {
          delete x["ClientCertRef"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 416 + 27)) {
          x["ClientCertRef"]["DeviceEditable"] = A.load.Bool(ptr + 416 + 25);
        } else {
          delete x["ClientCertRef"]["DeviceEditable"];
        }
      } else {
        delete x["ClientCertRef"];
      }
      if (A.load.Bool(ptr + 448 + 28)) {
        x["ClientCertType"] = {};
        x["ClientCertType"]["Active"] = A.load.Ref(ptr + 448 + 0, undefined);
        x["ClientCertType"]["Effective"] = A.load.Ref(ptr + 448 + 4, undefined);
        x["ClientCertType"]["UserPolicy"] = A.load.Ref(ptr + 448 + 8, undefined);
        x["ClientCertType"]["DevicePolicy"] = A.load.Ref(ptr + 448 + 12, undefined);
        x["ClientCertType"]["UserSetting"] = A.load.Ref(ptr + 448 + 16, undefined);
        x["ClientCertType"]["SharedSetting"] = A.load.Ref(ptr + 448 + 20, undefined);
        if (A.load.Bool(ptr + 448 + 26)) {
          x["ClientCertType"]["UserEditable"] = A.load.Bool(ptr + 448 + 24);
        } else {
          delete x["ClientCertType"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 448 + 27)) {
          x["ClientCertType"]["DeviceEditable"] = A.load.Bool(ptr + 448 + 25);
        } else {
          delete x["ClientCertType"]["DeviceEditable"];
        }
      } else {
        delete x["ClientCertType"];
      }
      if (A.load.Bool(ptr + 480 + 806)) {
        x["EAP"] = {};
        if (A.load.Bool(ptr + 480 + 0 + 28)) {
          x["EAP"]["AnonymousIdentity"] = {};
          x["EAP"]["AnonymousIdentity"]["Active"] = A.load.Ref(ptr + 480 + 0 + 0, undefined);
          x["EAP"]["AnonymousIdentity"]["Effective"] = A.load.Ref(ptr + 480 + 0 + 4, undefined);
          x["EAP"]["AnonymousIdentity"]["UserPolicy"] = A.load.Ref(ptr + 480 + 0 + 8, undefined);
          x["EAP"]["AnonymousIdentity"]["DevicePolicy"] = A.load.Ref(ptr + 480 + 0 + 12, undefined);
          x["EAP"]["AnonymousIdentity"]["UserSetting"] = A.load.Ref(ptr + 480 + 0 + 16, undefined);
          x["EAP"]["AnonymousIdentity"]["SharedSetting"] = A.load.Ref(ptr + 480 + 0 + 20, undefined);
          if (A.load.Bool(ptr + 480 + 0 + 26)) {
            x["EAP"]["AnonymousIdentity"]["UserEditable"] = A.load.Bool(ptr + 480 + 0 + 24);
          } else {
            delete x["EAP"]["AnonymousIdentity"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 480 + 0 + 27)) {
            x["EAP"]["AnonymousIdentity"]["DeviceEditable"] = A.load.Bool(ptr + 480 + 0 + 25);
          } else {
            delete x["EAP"]["AnonymousIdentity"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["AnonymousIdentity"];
        }
        if (A.load.Bool(ptr + 480 + 32 + 318)) {
          x["EAP"]["ClientCertPattern"] = {};
          if (A.load.Bool(ptr + 480 + 32 + 0 + 28)) {
            x["EAP"]["ClientCertPattern"]["EnrollmentURI"] = {};
            x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["Active"] = A.load.Ref(ptr + 480 + 32 + 0 + 0, undefined);
            x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["Effective"] = A.load.Ref(ptr + 480 + 32 + 0 + 4, undefined);
            x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserPolicy"] = A.load.Ref(
              ptr + 480 + 32 + 0 + 8,
              undefined
            );
            x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["DevicePolicy"] = A.load.Ref(
              ptr + 480 + 32 + 0 + 12,
              undefined
            );
            x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserSetting"] = A.load.Ref(
              ptr + 480 + 32 + 0 + 16,
              undefined
            );
            x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["SharedSetting"] = A.load.Ref(
              ptr + 480 + 32 + 0 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 480 + 32 + 0 + 26)) {
              x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserEditable"] = A.load.Bool(ptr + 480 + 32 + 0 + 24);
            } else {
              delete x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 480 + 32 + 0 + 27)) {
              x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"] = A.load.Bool(ptr + 480 + 32 + 0 + 25);
            } else {
              delete x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"];
            }
          } else {
            delete x["EAP"]["ClientCertPattern"]["EnrollmentURI"];
          }
          if (A.load.Bool(ptr + 480 + 32 + 32 + 125)) {
            x["EAP"]["ClientCertPattern"]["Issuer"] = {};
            if (A.load.Bool(ptr + 480 + 32 + 32 + 0 + 28)) {
              x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] = {};
              x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["Active"] = A.load.Ref(
                ptr + 480 + 32 + 32 + 0 + 0,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["Effective"] = A.load.Ref(
                ptr + 480 + 32 + 32 + 0 + 4,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserPolicy"] = A.load.Ref(
                ptr + 480 + 32 + 32 + 0 + 8,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["DevicePolicy"] = A.load.Ref(
                ptr + 480 + 32 + 32 + 0 + 12,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserSetting"] = A.load.Ref(
                ptr + 480 + 32 + 32 + 0 + 16,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["SharedSetting"] = A.load.Ref(
                ptr + 480 + 32 + 32 + 0 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 480 + 32 + 32 + 0 + 26)) {
                x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"] = A.load.Bool(
                  ptr + 480 + 32 + 32 + 0 + 24
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 480 + 32 + 32 + 0 + 27)) {
                x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"] = A.load.Bool(
                  ptr + 480 + 32 + 32 + 0 + 25
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"];
              }
            } else {
              delete x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"];
            }
            if (A.load.Bool(ptr + 480 + 32 + 32 + 32 + 28)) {
              x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] = {};
              x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["Active"] = A.load.Ref(
                ptr + 480 + 32 + 32 + 32 + 0,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["Effective"] = A.load.Ref(
                ptr + 480 + 32 + 32 + 32 + 4,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserPolicy"] = A.load.Ref(
                ptr + 480 + 32 + 32 + 32 + 8,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["DevicePolicy"] = A.load.Ref(
                ptr + 480 + 32 + 32 + 32 + 12,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserSetting"] = A.load.Ref(
                ptr + 480 + 32 + 32 + 32 + 16,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["SharedSetting"] = A.load.Ref(
                ptr + 480 + 32 + 32 + 32 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 480 + 32 + 32 + 32 + 26)) {
                x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"] = A.load.Bool(
                  ptr + 480 + 32 + 32 + 32 + 24
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 480 + 32 + 32 + 32 + 27)) {
                x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"] = A.load.Bool(
                  ptr + 480 + 32 + 32 + 32 + 25
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"];
              }
            } else {
              delete x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"];
            }
            if (A.load.Bool(ptr + 480 + 32 + 32 + 64 + 28)) {
              x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] = {};
              x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["Active"] = A.load.Ref(
                ptr + 480 + 32 + 32 + 64 + 0,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["Effective"] = A.load.Ref(
                ptr + 480 + 32 + 32 + 64 + 4,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserPolicy"] = A.load.Ref(
                ptr + 480 + 32 + 32 + 64 + 8,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["DevicePolicy"] = A.load.Ref(
                ptr + 480 + 32 + 32 + 64 + 12,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserSetting"] = A.load.Ref(
                ptr + 480 + 32 + 32 + 64 + 16,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["SharedSetting"] = A.load.Ref(
                ptr + 480 + 32 + 32 + 64 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 480 + 32 + 32 + 64 + 26)) {
                x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"] = A.load.Bool(
                  ptr + 480 + 32 + 32 + 64 + 24
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 480 + 32 + 32 + 64 + 27)) {
                x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"] = A.load.Bool(
                  ptr + 480 + 32 + 32 + 64 + 25
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"];
              }
            } else {
              delete x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"];
            }
            if (A.load.Bool(ptr + 480 + 32 + 32 + 96 + 28)) {
              x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = {};
              x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Active"] = A.load.Ref(
                ptr + 480 + 32 + 32 + 96 + 0,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Effective"] = A.load.Ref(
                ptr + 480 + 32 + 32 + 96 + 4,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserPolicy"] = A.load.Ref(
                ptr + 480 + 32 + 32 + 96 + 8,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DevicePolicy"] = A.load.Ref(
                ptr + 480 + 32 + 32 + 96 + 12,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserSetting"] = A.load.Ref(
                ptr + 480 + 32 + 32 + 96 + 16,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["SharedSetting"] = A.load.Ref(
                ptr + 480 + 32 + 32 + 96 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 480 + 32 + 32 + 96 + 26)) {
                x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"] = A.load.Bool(
                  ptr + 480 + 32 + 32 + 96 + 24
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 480 + 32 + 32 + 96 + 27)) {
                x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"] = A.load.Bool(
                  ptr + 480 + 32 + 32 + 96 + 25
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"];
              }
            } else {
              delete x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"];
            }
          } else {
            delete x["EAP"]["ClientCertPattern"]["Issuer"];
          }
          if (A.load.Bool(ptr + 480 + 32 + 160 + 28)) {
            x["EAP"]["ClientCertPattern"]["IssuerCARef"] = {};
            x["EAP"]["ClientCertPattern"]["IssuerCARef"]["Active"] = A.load.Ref(ptr + 480 + 32 + 160 + 0, undefined);
            x["EAP"]["ClientCertPattern"]["IssuerCARef"]["Effective"] = A.load.Ref(ptr + 480 + 32 + 160 + 4, undefined);
            x["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserPolicy"] = A.load.Ref(
              ptr + 480 + 32 + 160 + 8,
              undefined
            );
            x["EAP"]["ClientCertPattern"]["IssuerCARef"]["DevicePolicy"] = A.load.Ref(
              ptr + 480 + 32 + 160 + 12,
              undefined
            );
            x["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserSetting"] = A.load.Ref(
              ptr + 480 + 32 + 160 + 16,
              undefined
            );
            x["EAP"]["ClientCertPattern"]["IssuerCARef"]["SharedSetting"] = A.load.Ref(
              ptr + 480 + 32 + 160 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 480 + 32 + 160 + 26)) {
              x["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserEditable"] = A.load.Bool(ptr + 480 + 32 + 160 + 24);
            } else {
              delete x["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 480 + 32 + 160 + 27)) {
              x["EAP"]["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"] = A.load.Bool(ptr + 480 + 32 + 160 + 25);
            } else {
              delete x["EAP"]["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"];
            }
          } else {
            delete x["EAP"]["ClientCertPattern"]["IssuerCARef"];
          }
          if (A.load.Bool(ptr + 480 + 32 + 192 + 125)) {
            x["EAP"]["ClientCertPattern"]["Subject"] = {};
            if (A.load.Bool(ptr + 480 + 32 + 192 + 0 + 28)) {
              x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] = {};
              x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["Active"] = A.load.Ref(
                ptr + 480 + 32 + 192 + 0 + 0,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["Effective"] = A.load.Ref(
                ptr + 480 + 32 + 192 + 0 + 4,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserPolicy"] = A.load.Ref(
                ptr + 480 + 32 + 192 + 0 + 8,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["DevicePolicy"] = A.load.Ref(
                ptr + 480 + 32 + 192 + 0 + 12,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserSetting"] = A.load.Ref(
                ptr + 480 + 32 + 192 + 0 + 16,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["SharedSetting"] = A.load.Ref(
                ptr + 480 + 32 + 192 + 0 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 480 + 32 + 192 + 0 + 26)) {
                x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"] = A.load.Bool(
                  ptr + 480 + 32 + 192 + 0 + 24
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 480 + 32 + 192 + 0 + 27)) {
                x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"] = A.load.Bool(
                  ptr + 480 + 32 + 192 + 0 + 25
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"];
              }
            } else {
              delete x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"];
            }
            if (A.load.Bool(ptr + 480 + 32 + 192 + 32 + 28)) {
              x["EAP"]["ClientCertPattern"]["Subject"]["Locality"] = {};
              x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["Active"] = A.load.Ref(
                ptr + 480 + 32 + 192 + 32 + 0,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["Effective"] = A.load.Ref(
                ptr + 480 + 32 + 192 + 32 + 4,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserPolicy"] = A.load.Ref(
                ptr + 480 + 32 + 192 + 32 + 8,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["DevicePolicy"] = A.load.Ref(
                ptr + 480 + 32 + 192 + 32 + 12,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserSetting"] = A.load.Ref(
                ptr + 480 + 32 + 192 + 32 + 16,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["SharedSetting"] = A.load.Ref(
                ptr + 480 + 32 + 192 + 32 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 480 + 32 + 192 + 32 + 26)) {
                x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"] = A.load.Bool(
                  ptr + 480 + 32 + 192 + 32 + 24
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 480 + 32 + 192 + 32 + 27)) {
                x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"] = A.load.Bool(
                  ptr + 480 + 32 + 192 + 32 + 25
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"];
              }
            } else {
              delete x["EAP"]["ClientCertPattern"]["Subject"]["Locality"];
            }
            if (A.load.Bool(ptr + 480 + 32 + 192 + 64 + 28)) {
              x["EAP"]["ClientCertPattern"]["Subject"]["Organization"] = {};
              x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["Active"] = A.load.Ref(
                ptr + 480 + 32 + 192 + 64 + 0,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["Effective"] = A.load.Ref(
                ptr + 480 + 32 + 192 + 64 + 4,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserPolicy"] = A.load.Ref(
                ptr + 480 + 32 + 192 + 64 + 8,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["DevicePolicy"] = A.load.Ref(
                ptr + 480 + 32 + 192 + 64 + 12,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserSetting"] = A.load.Ref(
                ptr + 480 + 32 + 192 + 64 + 16,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["SharedSetting"] = A.load.Ref(
                ptr + 480 + 32 + 192 + 64 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 480 + 32 + 192 + 64 + 26)) {
                x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"] = A.load.Bool(
                  ptr + 480 + 32 + 192 + 64 + 24
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 480 + 32 + 192 + 64 + 27)) {
                x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"] = A.load.Bool(
                  ptr + 480 + 32 + 192 + 64 + 25
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"];
              }
            } else {
              delete x["EAP"]["ClientCertPattern"]["Subject"]["Organization"];
            }
            if (A.load.Bool(ptr + 480 + 32 + 192 + 96 + 28)) {
              x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = {};
              x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Active"] = A.load.Ref(
                ptr + 480 + 32 + 192 + 96 + 0,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Effective"] = A.load.Ref(
                ptr + 480 + 32 + 192 + 96 + 4,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserPolicy"] = A.load.Ref(
                ptr + 480 + 32 + 192 + 96 + 8,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DevicePolicy"] = A.load.Ref(
                ptr + 480 + 32 + 192 + 96 + 12,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserSetting"] = A.load.Ref(
                ptr + 480 + 32 + 192 + 96 + 16,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["SharedSetting"] = A.load.Ref(
                ptr + 480 + 32 + 192 + 96 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 480 + 32 + 192 + 96 + 26)) {
                x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"] = A.load.Bool(
                  ptr + 480 + 32 + 192 + 96 + 24
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 480 + 32 + 192 + 96 + 27)) {
                x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"] = A.load.Bool(
                  ptr + 480 + 32 + 192 + 96 + 25
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"];
              }
            } else {
              delete x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"];
            }
          } else {
            delete x["EAP"]["ClientCertPattern"]["Subject"];
          }
        } else {
          delete x["EAP"]["ClientCertPattern"];
        }
        if (A.load.Bool(ptr + 480 + 352 + 28)) {
          x["EAP"]["ClientCertPKCS11Id"] = {};
          x["EAP"]["ClientCertPKCS11Id"]["Active"] = A.load.Ref(ptr + 480 + 352 + 0, undefined);
          x["EAP"]["ClientCertPKCS11Id"]["Effective"] = A.load.Ref(ptr + 480 + 352 + 4, undefined);
          x["EAP"]["ClientCertPKCS11Id"]["UserPolicy"] = A.load.Ref(ptr + 480 + 352 + 8, undefined);
          x["EAP"]["ClientCertPKCS11Id"]["DevicePolicy"] = A.load.Ref(ptr + 480 + 352 + 12, undefined);
          x["EAP"]["ClientCertPKCS11Id"]["UserSetting"] = A.load.Ref(ptr + 480 + 352 + 16, undefined);
          x["EAP"]["ClientCertPKCS11Id"]["SharedSetting"] = A.load.Ref(ptr + 480 + 352 + 20, undefined);
          if (A.load.Bool(ptr + 480 + 352 + 26)) {
            x["EAP"]["ClientCertPKCS11Id"]["UserEditable"] = A.load.Bool(ptr + 480 + 352 + 24);
          } else {
            delete x["EAP"]["ClientCertPKCS11Id"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 480 + 352 + 27)) {
            x["EAP"]["ClientCertPKCS11Id"]["DeviceEditable"] = A.load.Bool(ptr + 480 + 352 + 25);
          } else {
            delete x["EAP"]["ClientCertPKCS11Id"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["ClientCertPKCS11Id"];
        }
        if (A.load.Bool(ptr + 480 + 384 + 28)) {
          x["EAP"]["ClientCertProvisioningProfileId"] = {};
          x["EAP"]["ClientCertProvisioningProfileId"]["Active"] = A.load.Ref(ptr + 480 + 384 + 0, undefined);
          x["EAP"]["ClientCertProvisioningProfileId"]["Effective"] = A.load.Ref(ptr + 480 + 384 + 4, undefined);
          x["EAP"]["ClientCertProvisioningProfileId"]["UserPolicy"] = A.load.Ref(ptr + 480 + 384 + 8, undefined);
          x["EAP"]["ClientCertProvisioningProfileId"]["DevicePolicy"] = A.load.Ref(ptr + 480 + 384 + 12, undefined);
          x["EAP"]["ClientCertProvisioningProfileId"]["UserSetting"] = A.load.Ref(ptr + 480 + 384 + 16, undefined);
          x["EAP"]["ClientCertProvisioningProfileId"]["SharedSetting"] = A.load.Ref(ptr + 480 + 384 + 20, undefined);
          if (A.load.Bool(ptr + 480 + 384 + 26)) {
            x["EAP"]["ClientCertProvisioningProfileId"]["UserEditable"] = A.load.Bool(ptr + 480 + 384 + 24);
          } else {
            delete x["EAP"]["ClientCertProvisioningProfileId"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 480 + 384 + 27)) {
            x["EAP"]["ClientCertProvisioningProfileId"]["DeviceEditable"] = A.load.Bool(ptr + 480 + 384 + 25);
          } else {
            delete x["EAP"]["ClientCertProvisioningProfileId"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["ClientCertProvisioningProfileId"];
        }
        if (A.load.Bool(ptr + 480 + 416 + 28)) {
          x["EAP"]["ClientCertRef"] = {};
          x["EAP"]["ClientCertRef"]["Active"] = A.load.Ref(ptr + 480 + 416 + 0, undefined);
          x["EAP"]["ClientCertRef"]["Effective"] = A.load.Ref(ptr + 480 + 416 + 4, undefined);
          x["EAP"]["ClientCertRef"]["UserPolicy"] = A.load.Ref(ptr + 480 + 416 + 8, undefined);
          x["EAP"]["ClientCertRef"]["DevicePolicy"] = A.load.Ref(ptr + 480 + 416 + 12, undefined);
          x["EAP"]["ClientCertRef"]["UserSetting"] = A.load.Ref(ptr + 480 + 416 + 16, undefined);
          x["EAP"]["ClientCertRef"]["SharedSetting"] = A.load.Ref(ptr + 480 + 416 + 20, undefined);
          if (A.load.Bool(ptr + 480 + 416 + 26)) {
            x["EAP"]["ClientCertRef"]["UserEditable"] = A.load.Bool(ptr + 480 + 416 + 24);
          } else {
            delete x["EAP"]["ClientCertRef"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 480 + 416 + 27)) {
            x["EAP"]["ClientCertRef"]["DeviceEditable"] = A.load.Bool(ptr + 480 + 416 + 25);
          } else {
            delete x["EAP"]["ClientCertRef"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["ClientCertRef"];
        }
        if (A.load.Bool(ptr + 480 + 448 + 28)) {
          x["EAP"]["ClientCertType"] = {};
          x["EAP"]["ClientCertType"]["Active"] = A.load.Ref(ptr + 480 + 448 + 0, undefined);
          x["EAP"]["ClientCertType"]["Effective"] = A.load.Ref(ptr + 480 + 448 + 4, undefined);
          x["EAP"]["ClientCertType"]["UserPolicy"] = A.load.Ref(ptr + 480 + 448 + 8, undefined);
          x["EAP"]["ClientCertType"]["DevicePolicy"] = A.load.Ref(ptr + 480 + 448 + 12, undefined);
          x["EAP"]["ClientCertType"]["UserSetting"] = A.load.Ref(ptr + 480 + 448 + 16, undefined);
          x["EAP"]["ClientCertType"]["SharedSetting"] = A.load.Ref(ptr + 480 + 448 + 20, undefined);
          if (A.load.Bool(ptr + 480 + 448 + 26)) {
            x["EAP"]["ClientCertType"]["UserEditable"] = A.load.Bool(ptr + 480 + 448 + 24);
          } else {
            delete x["EAP"]["ClientCertType"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 480 + 448 + 27)) {
            x["EAP"]["ClientCertType"]["DeviceEditable"] = A.load.Bool(ptr + 480 + 448 + 25);
          } else {
            delete x["EAP"]["ClientCertType"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["ClientCertType"];
        }
        if (A.load.Bool(ptr + 480 + 480 + 28)) {
          x["EAP"]["Identity"] = {};
          x["EAP"]["Identity"]["Active"] = A.load.Ref(ptr + 480 + 480 + 0, undefined);
          x["EAP"]["Identity"]["Effective"] = A.load.Ref(ptr + 480 + 480 + 4, undefined);
          x["EAP"]["Identity"]["UserPolicy"] = A.load.Ref(ptr + 480 + 480 + 8, undefined);
          x["EAP"]["Identity"]["DevicePolicy"] = A.load.Ref(ptr + 480 + 480 + 12, undefined);
          x["EAP"]["Identity"]["UserSetting"] = A.load.Ref(ptr + 480 + 480 + 16, undefined);
          x["EAP"]["Identity"]["SharedSetting"] = A.load.Ref(ptr + 480 + 480 + 20, undefined);
          if (A.load.Bool(ptr + 480 + 480 + 26)) {
            x["EAP"]["Identity"]["UserEditable"] = A.load.Bool(ptr + 480 + 480 + 24);
          } else {
            delete x["EAP"]["Identity"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 480 + 480 + 27)) {
            x["EAP"]["Identity"]["DeviceEditable"] = A.load.Bool(ptr + 480 + 480 + 25);
          } else {
            delete x["EAP"]["Identity"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["Identity"];
        }
        if (A.load.Bool(ptr + 480 + 512 + 28)) {
          x["EAP"]["Inner"] = {};
          x["EAP"]["Inner"]["Active"] = A.load.Ref(ptr + 480 + 512 + 0, undefined);
          x["EAP"]["Inner"]["Effective"] = A.load.Ref(ptr + 480 + 512 + 4, undefined);
          x["EAP"]["Inner"]["UserPolicy"] = A.load.Ref(ptr + 480 + 512 + 8, undefined);
          x["EAP"]["Inner"]["DevicePolicy"] = A.load.Ref(ptr + 480 + 512 + 12, undefined);
          x["EAP"]["Inner"]["UserSetting"] = A.load.Ref(ptr + 480 + 512 + 16, undefined);
          x["EAP"]["Inner"]["SharedSetting"] = A.load.Ref(ptr + 480 + 512 + 20, undefined);
          if (A.load.Bool(ptr + 480 + 512 + 26)) {
            x["EAP"]["Inner"]["UserEditable"] = A.load.Bool(ptr + 480 + 512 + 24);
          } else {
            delete x["EAP"]["Inner"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 480 + 512 + 27)) {
            x["EAP"]["Inner"]["DeviceEditable"] = A.load.Bool(ptr + 480 + 512 + 25);
          } else {
            delete x["EAP"]["Inner"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["Inner"];
        }
        if (A.load.Bool(ptr + 480 + 544 + 28)) {
          x["EAP"]["Outer"] = {};
          x["EAP"]["Outer"]["Active"] = A.load.Ref(ptr + 480 + 544 + 0, undefined);
          x["EAP"]["Outer"]["Effective"] = A.load.Ref(ptr + 480 + 544 + 4, undefined);
          x["EAP"]["Outer"]["UserPolicy"] = A.load.Ref(ptr + 480 + 544 + 8, undefined);
          x["EAP"]["Outer"]["DevicePolicy"] = A.load.Ref(ptr + 480 + 544 + 12, undefined);
          x["EAP"]["Outer"]["UserSetting"] = A.load.Ref(ptr + 480 + 544 + 16, undefined);
          x["EAP"]["Outer"]["SharedSetting"] = A.load.Ref(ptr + 480 + 544 + 20, undefined);
          if (A.load.Bool(ptr + 480 + 544 + 26)) {
            x["EAP"]["Outer"]["UserEditable"] = A.load.Bool(ptr + 480 + 544 + 24);
          } else {
            delete x["EAP"]["Outer"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 480 + 544 + 27)) {
            x["EAP"]["Outer"]["DeviceEditable"] = A.load.Bool(ptr + 480 + 544 + 25);
          } else {
            delete x["EAP"]["Outer"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["Outer"];
        }
        if (A.load.Bool(ptr + 480 + 576 + 28)) {
          x["EAP"]["Password"] = {};
          x["EAP"]["Password"]["Active"] = A.load.Ref(ptr + 480 + 576 + 0, undefined);
          x["EAP"]["Password"]["Effective"] = A.load.Ref(ptr + 480 + 576 + 4, undefined);
          x["EAP"]["Password"]["UserPolicy"] = A.load.Ref(ptr + 480 + 576 + 8, undefined);
          x["EAP"]["Password"]["DevicePolicy"] = A.load.Ref(ptr + 480 + 576 + 12, undefined);
          x["EAP"]["Password"]["UserSetting"] = A.load.Ref(ptr + 480 + 576 + 16, undefined);
          x["EAP"]["Password"]["SharedSetting"] = A.load.Ref(ptr + 480 + 576 + 20, undefined);
          if (A.load.Bool(ptr + 480 + 576 + 26)) {
            x["EAP"]["Password"]["UserEditable"] = A.load.Bool(ptr + 480 + 576 + 24);
          } else {
            delete x["EAP"]["Password"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 480 + 576 + 27)) {
            x["EAP"]["Password"]["DeviceEditable"] = A.load.Bool(ptr + 480 + 576 + 25);
          } else {
            delete x["EAP"]["Password"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["Password"];
        }
        if (A.load.Bool(ptr + 480 + 608 + 21)) {
          x["EAP"]["SaveCredentials"] = {};
          if (A.load.Bool(ptr + 480 + 608 + 14)) {
            x["EAP"]["SaveCredentials"]["Active"] = A.load.Bool(ptr + 480 + 608 + 0);
          } else {
            delete x["EAP"]["SaveCredentials"]["Active"];
          }
          x["EAP"]["SaveCredentials"]["Effective"] = A.load.Ref(ptr + 480 + 608 + 4, undefined);
          if (A.load.Bool(ptr + 480 + 608 + 15)) {
            x["EAP"]["SaveCredentials"]["UserPolicy"] = A.load.Bool(ptr + 480 + 608 + 8);
          } else {
            delete x["EAP"]["SaveCredentials"]["UserPolicy"];
          }
          if (A.load.Bool(ptr + 480 + 608 + 16)) {
            x["EAP"]["SaveCredentials"]["DevicePolicy"] = A.load.Bool(ptr + 480 + 608 + 9);
          } else {
            delete x["EAP"]["SaveCredentials"]["DevicePolicy"];
          }
          if (A.load.Bool(ptr + 480 + 608 + 17)) {
            x["EAP"]["SaveCredentials"]["UserSetting"] = A.load.Bool(ptr + 480 + 608 + 10);
          } else {
            delete x["EAP"]["SaveCredentials"]["UserSetting"];
          }
          if (A.load.Bool(ptr + 480 + 608 + 18)) {
            x["EAP"]["SaveCredentials"]["SharedSetting"] = A.load.Bool(ptr + 480 + 608 + 11);
          } else {
            delete x["EAP"]["SaveCredentials"]["SharedSetting"];
          }
          if (A.load.Bool(ptr + 480 + 608 + 19)) {
            x["EAP"]["SaveCredentials"]["UserEditable"] = A.load.Bool(ptr + 480 + 608 + 12);
          } else {
            delete x["EAP"]["SaveCredentials"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 480 + 608 + 20)) {
            x["EAP"]["SaveCredentials"]["DeviceEditable"] = A.load.Bool(ptr + 480 + 608 + 13);
          } else {
            delete x["EAP"]["SaveCredentials"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["SaveCredentials"];
        }
        if (A.load.Bool(ptr + 480 + 632 + 28)) {
          x["EAP"]["ServerCAPEMs"] = {};
          x["EAP"]["ServerCAPEMs"]["Active"] = A.load.Ref(ptr + 480 + 632 + 0, undefined);
          x["EAP"]["ServerCAPEMs"]["Effective"] = A.load.Ref(ptr + 480 + 632 + 4, undefined);
          x["EAP"]["ServerCAPEMs"]["UserPolicy"] = A.load.Ref(ptr + 480 + 632 + 8, undefined);
          x["EAP"]["ServerCAPEMs"]["DevicePolicy"] = A.load.Ref(ptr + 480 + 632 + 12, undefined);
          x["EAP"]["ServerCAPEMs"]["UserSetting"] = A.load.Ref(ptr + 480 + 632 + 16, undefined);
          x["EAP"]["ServerCAPEMs"]["SharedSetting"] = A.load.Ref(ptr + 480 + 632 + 20, undefined);
          if (A.load.Bool(ptr + 480 + 632 + 26)) {
            x["EAP"]["ServerCAPEMs"]["UserEditable"] = A.load.Bool(ptr + 480 + 632 + 24);
          } else {
            delete x["EAP"]["ServerCAPEMs"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 480 + 632 + 27)) {
            x["EAP"]["ServerCAPEMs"]["DeviceEditable"] = A.load.Bool(ptr + 480 + 632 + 25);
          } else {
            delete x["EAP"]["ServerCAPEMs"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["ServerCAPEMs"];
        }
        if (A.load.Bool(ptr + 480 + 664 + 28)) {
          x["EAP"]["ServerCARefs"] = {};
          x["EAP"]["ServerCARefs"]["Active"] = A.load.Ref(ptr + 480 + 664 + 0, undefined);
          x["EAP"]["ServerCARefs"]["Effective"] = A.load.Ref(ptr + 480 + 664 + 4, undefined);
          x["EAP"]["ServerCARefs"]["UserPolicy"] = A.load.Ref(ptr + 480 + 664 + 8, undefined);
          x["EAP"]["ServerCARefs"]["DevicePolicy"] = A.load.Ref(ptr + 480 + 664 + 12, undefined);
          x["EAP"]["ServerCARefs"]["UserSetting"] = A.load.Ref(ptr + 480 + 664 + 16, undefined);
          x["EAP"]["ServerCARefs"]["SharedSetting"] = A.load.Ref(ptr + 480 + 664 + 20, undefined);
          if (A.load.Bool(ptr + 480 + 664 + 26)) {
            x["EAP"]["ServerCARefs"]["UserEditable"] = A.load.Bool(ptr + 480 + 664 + 24);
          } else {
            delete x["EAP"]["ServerCARefs"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 480 + 664 + 27)) {
            x["EAP"]["ServerCARefs"]["DeviceEditable"] = A.load.Bool(ptr + 480 + 664 + 25);
          } else {
            delete x["EAP"]["ServerCARefs"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["ServerCARefs"];
        }
        if (A.load.Bool(ptr + 480 + 696 + 28)) {
          x["EAP"]["SubjectMatch"] = {};
          x["EAP"]["SubjectMatch"]["Active"] = A.load.Ref(ptr + 480 + 696 + 0, undefined);
          x["EAP"]["SubjectMatch"]["Effective"] = A.load.Ref(ptr + 480 + 696 + 4, undefined);
          x["EAP"]["SubjectMatch"]["UserPolicy"] = A.load.Ref(ptr + 480 + 696 + 8, undefined);
          x["EAP"]["SubjectMatch"]["DevicePolicy"] = A.load.Ref(ptr + 480 + 696 + 12, undefined);
          x["EAP"]["SubjectMatch"]["UserSetting"] = A.load.Ref(ptr + 480 + 696 + 16, undefined);
          x["EAP"]["SubjectMatch"]["SharedSetting"] = A.load.Ref(ptr + 480 + 696 + 20, undefined);
          if (A.load.Bool(ptr + 480 + 696 + 26)) {
            x["EAP"]["SubjectMatch"]["UserEditable"] = A.load.Bool(ptr + 480 + 696 + 24);
          } else {
            delete x["EAP"]["SubjectMatch"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 480 + 696 + 27)) {
            x["EAP"]["SubjectMatch"]["DeviceEditable"] = A.load.Bool(ptr + 480 + 696 + 25);
          } else {
            delete x["EAP"]["SubjectMatch"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["SubjectMatch"];
        }
        if (A.load.Bool(ptr + 480 + 728 + 28)) {
          x["EAP"]["TLSVersionMax"] = {};
          x["EAP"]["TLSVersionMax"]["Active"] = A.load.Ref(ptr + 480 + 728 + 0, undefined);
          x["EAP"]["TLSVersionMax"]["Effective"] = A.load.Ref(ptr + 480 + 728 + 4, undefined);
          x["EAP"]["TLSVersionMax"]["UserPolicy"] = A.load.Ref(ptr + 480 + 728 + 8, undefined);
          x["EAP"]["TLSVersionMax"]["DevicePolicy"] = A.load.Ref(ptr + 480 + 728 + 12, undefined);
          x["EAP"]["TLSVersionMax"]["UserSetting"] = A.load.Ref(ptr + 480 + 728 + 16, undefined);
          x["EAP"]["TLSVersionMax"]["SharedSetting"] = A.load.Ref(ptr + 480 + 728 + 20, undefined);
          if (A.load.Bool(ptr + 480 + 728 + 26)) {
            x["EAP"]["TLSVersionMax"]["UserEditable"] = A.load.Bool(ptr + 480 + 728 + 24);
          } else {
            delete x["EAP"]["TLSVersionMax"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 480 + 728 + 27)) {
            x["EAP"]["TLSVersionMax"]["DeviceEditable"] = A.load.Bool(ptr + 480 + 728 + 25);
          } else {
            delete x["EAP"]["TLSVersionMax"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["TLSVersionMax"];
        }
        if (A.load.Bool(ptr + 480 + 760 + 21)) {
          x["EAP"]["UseProactiveKeyCaching"] = {};
          if (A.load.Bool(ptr + 480 + 760 + 14)) {
            x["EAP"]["UseProactiveKeyCaching"]["Active"] = A.load.Bool(ptr + 480 + 760 + 0);
          } else {
            delete x["EAP"]["UseProactiveKeyCaching"]["Active"];
          }
          x["EAP"]["UseProactiveKeyCaching"]["Effective"] = A.load.Ref(ptr + 480 + 760 + 4, undefined);
          if (A.load.Bool(ptr + 480 + 760 + 15)) {
            x["EAP"]["UseProactiveKeyCaching"]["UserPolicy"] = A.load.Bool(ptr + 480 + 760 + 8);
          } else {
            delete x["EAP"]["UseProactiveKeyCaching"]["UserPolicy"];
          }
          if (A.load.Bool(ptr + 480 + 760 + 16)) {
            x["EAP"]["UseProactiveKeyCaching"]["DevicePolicy"] = A.load.Bool(ptr + 480 + 760 + 9);
          } else {
            delete x["EAP"]["UseProactiveKeyCaching"]["DevicePolicy"];
          }
          if (A.load.Bool(ptr + 480 + 760 + 17)) {
            x["EAP"]["UseProactiveKeyCaching"]["UserSetting"] = A.load.Bool(ptr + 480 + 760 + 10);
          } else {
            delete x["EAP"]["UseProactiveKeyCaching"]["UserSetting"];
          }
          if (A.load.Bool(ptr + 480 + 760 + 18)) {
            x["EAP"]["UseProactiveKeyCaching"]["SharedSetting"] = A.load.Bool(ptr + 480 + 760 + 11);
          } else {
            delete x["EAP"]["UseProactiveKeyCaching"]["SharedSetting"];
          }
          if (A.load.Bool(ptr + 480 + 760 + 19)) {
            x["EAP"]["UseProactiveKeyCaching"]["UserEditable"] = A.load.Bool(ptr + 480 + 760 + 12);
          } else {
            delete x["EAP"]["UseProactiveKeyCaching"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 480 + 760 + 20)) {
            x["EAP"]["UseProactiveKeyCaching"]["DeviceEditable"] = A.load.Bool(ptr + 480 + 760 + 13);
          } else {
            delete x["EAP"]["UseProactiveKeyCaching"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["UseProactiveKeyCaching"];
        }
        if (A.load.Bool(ptr + 480 + 784 + 21)) {
          x["EAP"]["UseSystemCAs"] = {};
          if (A.load.Bool(ptr + 480 + 784 + 14)) {
            x["EAP"]["UseSystemCAs"]["Active"] = A.load.Bool(ptr + 480 + 784 + 0);
          } else {
            delete x["EAP"]["UseSystemCAs"]["Active"];
          }
          x["EAP"]["UseSystemCAs"]["Effective"] = A.load.Ref(ptr + 480 + 784 + 4, undefined);
          if (A.load.Bool(ptr + 480 + 784 + 15)) {
            x["EAP"]["UseSystemCAs"]["UserPolicy"] = A.load.Bool(ptr + 480 + 784 + 8);
          } else {
            delete x["EAP"]["UseSystemCAs"]["UserPolicy"];
          }
          if (A.load.Bool(ptr + 480 + 784 + 16)) {
            x["EAP"]["UseSystemCAs"]["DevicePolicy"] = A.load.Bool(ptr + 480 + 784 + 9);
          } else {
            delete x["EAP"]["UseSystemCAs"]["DevicePolicy"];
          }
          if (A.load.Bool(ptr + 480 + 784 + 17)) {
            x["EAP"]["UseSystemCAs"]["UserSetting"] = A.load.Bool(ptr + 480 + 784 + 10);
          } else {
            delete x["EAP"]["UseSystemCAs"]["UserSetting"];
          }
          if (A.load.Bool(ptr + 480 + 784 + 18)) {
            x["EAP"]["UseSystemCAs"]["SharedSetting"] = A.load.Bool(ptr + 480 + 784 + 11);
          } else {
            delete x["EAP"]["UseSystemCAs"]["SharedSetting"];
          }
          if (A.load.Bool(ptr + 480 + 784 + 19)) {
            x["EAP"]["UseSystemCAs"]["UserEditable"] = A.load.Bool(ptr + 480 + 784 + 12);
          } else {
            delete x["EAP"]["UseSystemCAs"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 480 + 784 + 20)) {
            x["EAP"]["UseSystemCAs"]["DeviceEditable"] = A.load.Bool(ptr + 480 + 784 + 13);
          } else {
            delete x["EAP"]["UseSystemCAs"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["UseSystemCAs"];
        }
      } else {
        delete x["EAP"];
      }
      if (A.load.Bool(ptr + 1288 + 28)) {
        x["Group"] = {};
        x["Group"]["Active"] = A.load.Ref(ptr + 1288 + 0, undefined);
        x["Group"]["Effective"] = A.load.Ref(ptr + 1288 + 4, undefined);
        x["Group"]["UserPolicy"] = A.load.Ref(ptr + 1288 + 8, undefined);
        x["Group"]["DevicePolicy"] = A.load.Ref(ptr + 1288 + 12, undefined);
        x["Group"]["UserSetting"] = A.load.Ref(ptr + 1288 + 16, undefined);
        x["Group"]["SharedSetting"] = A.load.Ref(ptr + 1288 + 20, undefined);
        if (A.load.Bool(ptr + 1288 + 26)) {
          x["Group"]["UserEditable"] = A.load.Bool(ptr + 1288 + 24);
        } else {
          delete x["Group"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 1288 + 27)) {
          x["Group"]["DeviceEditable"] = A.load.Bool(ptr + 1288 + 25);
        } else {
          delete x["Group"]["DeviceEditable"];
        }
      } else {
        delete x["Group"];
      }
      if (A.load.Bool(ptr + 1320 + 33)) {
        x["IKEVersion"] = {};
        if (A.load.Bool(ptr + 1320 + 26)) {
          x["IKEVersion"]["Active"] = A.load.Int32(ptr + 1320 + 0);
        } else {
          delete x["IKEVersion"]["Active"];
        }
        x["IKEVersion"]["Effective"] = A.load.Ref(ptr + 1320 + 4, undefined);
        if (A.load.Bool(ptr + 1320 + 27)) {
          x["IKEVersion"]["UserPolicy"] = A.load.Int32(ptr + 1320 + 8);
        } else {
          delete x["IKEVersion"]["UserPolicy"];
        }
        if (A.load.Bool(ptr + 1320 + 28)) {
          x["IKEVersion"]["DevicePolicy"] = A.load.Int32(ptr + 1320 + 12);
        } else {
          delete x["IKEVersion"]["DevicePolicy"];
        }
        if (A.load.Bool(ptr + 1320 + 29)) {
          x["IKEVersion"]["UserSetting"] = A.load.Int32(ptr + 1320 + 16);
        } else {
          delete x["IKEVersion"]["UserSetting"];
        }
        if (A.load.Bool(ptr + 1320 + 30)) {
          x["IKEVersion"]["SharedSetting"] = A.load.Int32(ptr + 1320 + 20);
        } else {
          delete x["IKEVersion"]["SharedSetting"];
        }
        if (A.load.Bool(ptr + 1320 + 31)) {
          x["IKEVersion"]["UserEditable"] = A.load.Bool(ptr + 1320 + 24);
        } else {
          delete x["IKEVersion"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 1320 + 32)) {
          x["IKEVersion"]["DeviceEditable"] = A.load.Bool(ptr + 1320 + 25);
        } else {
          delete x["IKEVersion"]["DeviceEditable"];
        }
      } else {
        delete x["IKEVersion"];
      }
      if (A.load.Bool(ptr + 1356 + 28)) {
        x["PSK"] = {};
        x["PSK"]["Active"] = A.load.Ref(ptr + 1356 + 0, undefined);
        x["PSK"]["Effective"] = A.load.Ref(ptr + 1356 + 4, undefined);
        x["PSK"]["UserPolicy"] = A.load.Ref(ptr + 1356 + 8, undefined);
        x["PSK"]["DevicePolicy"] = A.load.Ref(ptr + 1356 + 12, undefined);
        x["PSK"]["UserSetting"] = A.load.Ref(ptr + 1356 + 16, undefined);
        x["PSK"]["SharedSetting"] = A.load.Ref(ptr + 1356 + 20, undefined);
        if (A.load.Bool(ptr + 1356 + 26)) {
          x["PSK"]["UserEditable"] = A.load.Bool(ptr + 1356 + 24);
        } else {
          delete x["PSK"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 1356 + 27)) {
          x["PSK"]["DeviceEditable"] = A.load.Bool(ptr + 1356 + 25);
        } else {
          delete x["PSK"]["DeviceEditable"];
        }
      } else {
        delete x["PSK"];
      }
      if (A.load.Bool(ptr + 1388 + 21)) {
        x["SaveCredentials"] = {};
        if (A.load.Bool(ptr + 1388 + 14)) {
          x["SaveCredentials"]["Active"] = A.load.Bool(ptr + 1388 + 0);
        } else {
          delete x["SaveCredentials"]["Active"];
        }
        x["SaveCredentials"]["Effective"] = A.load.Ref(ptr + 1388 + 4, undefined);
        if (A.load.Bool(ptr + 1388 + 15)) {
          x["SaveCredentials"]["UserPolicy"] = A.load.Bool(ptr + 1388 + 8);
        } else {
          delete x["SaveCredentials"]["UserPolicy"];
        }
        if (A.load.Bool(ptr + 1388 + 16)) {
          x["SaveCredentials"]["DevicePolicy"] = A.load.Bool(ptr + 1388 + 9);
        } else {
          delete x["SaveCredentials"]["DevicePolicy"];
        }
        if (A.load.Bool(ptr + 1388 + 17)) {
          x["SaveCredentials"]["UserSetting"] = A.load.Bool(ptr + 1388 + 10);
        } else {
          delete x["SaveCredentials"]["UserSetting"];
        }
        if (A.load.Bool(ptr + 1388 + 18)) {
          x["SaveCredentials"]["SharedSetting"] = A.load.Bool(ptr + 1388 + 11);
        } else {
          delete x["SaveCredentials"]["SharedSetting"];
        }
        if (A.load.Bool(ptr + 1388 + 19)) {
          x["SaveCredentials"]["UserEditable"] = A.load.Bool(ptr + 1388 + 12);
        } else {
          delete x["SaveCredentials"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 1388 + 20)) {
          x["SaveCredentials"]["DeviceEditable"] = A.load.Bool(ptr + 1388 + 13);
        } else {
          delete x["SaveCredentials"]["DeviceEditable"];
        }
      } else {
        delete x["SaveCredentials"];
      }
      if (A.load.Bool(ptr + 1412 + 28)) {
        x["ServerCAPEMs"] = {};
        x["ServerCAPEMs"]["Active"] = A.load.Ref(ptr + 1412 + 0, undefined);
        x["ServerCAPEMs"]["Effective"] = A.load.Ref(ptr + 1412 + 4, undefined);
        x["ServerCAPEMs"]["UserPolicy"] = A.load.Ref(ptr + 1412 + 8, undefined);
        x["ServerCAPEMs"]["DevicePolicy"] = A.load.Ref(ptr + 1412 + 12, undefined);
        x["ServerCAPEMs"]["UserSetting"] = A.load.Ref(ptr + 1412 + 16, undefined);
        x["ServerCAPEMs"]["SharedSetting"] = A.load.Ref(ptr + 1412 + 20, undefined);
        if (A.load.Bool(ptr + 1412 + 26)) {
          x["ServerCAPEMs"]["UserEditable"] = A.load.Bool(ptr + 1412 + 24);
        } else {
          delete x["ServerCAPEMs"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 1412 + 27)) {
          x["ServerCAPEMs"]["DeviceEditable"] = A.load.Bool(ptr + 1412 + 25);
        } else {
          delete x["ServerCAPEMs"]["DeviceEditable"];
        }
      } else {
        delete x["ServerCAPEMs"];
      }
      if (A.load.Bool(ptr + 1444 + 28)) {
        x["ServerCARefs"] = {};
        x["ServerCARefs"]["Active"] = A.load.Ref(ptr + 1444 + 0, undefined);
        x["ServerCARefs"]["Effective"] = A.load.Ref(ptr + 1444 + 4, undefined);
        x["ServerCARefs"]["UserPolicy"] = A.load.Ref(ptr + 1444 + 8, undefined);
        x["ServerCARefs"]["DevicePolicy"] = A.load.Ref(ptr + 1444 + 12, undefined);
        x["ServerCARefs"]["UserSetting"] = A.load.Ref(ptr + 1444 + 16, undefined);
        x["ServerCARefs"]["SharedSetting"] = A.load.Ref(ptr + 1444 + 20, undefined);
        if (A.load.Bool(ptr + 1444 + 26)) {
          x["ServerCARefs"]["UserEditable"] = A.load.Bool(ptr + 1444 + 24);
        } else {
          delete x["ServerCARefs"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 1444 + 27)) {
          x["ServerCARefs"]["DeviceEditable"] = A.load.Bool(ptr + 1444 + 25);
        } else {
          delete x["ServerCARefs"]["DeviceEditable"];
        }
      } else {
        delete x["ServerCARefs"];
      }
      if (A.load.Bool(ptr + 1476 + 85)) {
        x["XAUTH"] = {};
        if (A.load.Bool(ptr + 1476 + 0 + 28)) {
          x["XAUTH"]["Password"] = {};
          x["XAUTH"]["Password"]["Active"] = A.load.Ref(ptr + 1476 + 0 + 0, undefined);
          x["XAUTH"]["Password"]["Effective"] = A.load.Ref(ptr + 1476 + 0 + 4, undefined);
          x["XAUTH"]["Password"]["UserPolicy"] = A.load.Ref(ptr + 1476 + 0 + 8, undefined);
          x["XAUTH"]["Password"]["DevicePolicy"] = A.load.Ref(ptr + 1476 + 0 + 12, undefined);
          x["XAUTH"]["Password"]["UserSetting"] = A.load.Ref(ptr + 1476 + 0 + 16, undefined);
          x["XAUTH"]["Password"]["SharedSetting"] = A.load.Ref(ptr + 1476 + 0 + 20, undefined);
          if (A.load.Bool(ptr + 1476 + 0 + 26)) {
            x["XAUTH"]["Password"]["UserEditable"] = A.load.Bool(ptr + 1476 + 0 + 24);
          } else {
            delete x["XAUTH"]["Password"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1476 + 0 + 27)) {
            x["XAUTH"]["Password"]["DeviceEditable"] = A.load.Bool(ptr + 1476 + 0 + 25);
          } else {
            delete x["XAUTH"]["Password"]["DeviceEditable"];
          }
        } else {
          delete x["XAUTH"]["Password"];
        }
        if (A.load.Bool(ptr + 1476 + 32 + 21)) {
          x["XAUTH"]["SaveCredentials"] = {};
          if (A.load.Bool(ptr + 1476 + 32 + 14)) {
            x["XAUTH"]["SaveCredentials"]["Active"] = A.load.Bool(ptr + 1476 + 32 + 0);
          } else {
            delete x["XAUTH"]["SaveCredentials"]["Active"];
          }
          x["XAUTH"]["SaveCredentials"]["Effective"] = A.load.Ref(ptr + 1476 + 32 + 4, undefined);
          if (A.load.Bool(ptr + 1476 + 32 + 15)) {
            x["XAUTH"]["SaveCredentials"]["UserPolicy"] = A.load.Bool(ptr + 1476 + 32 + 8);
          } else {
            delete x["XAUTH"]["SaveCredentials"]["UserPolicy"];
          }
          if (A.load.Bool(ptr + 1476 + 32 + 16)) {
            x["XAUTH"]["SaveCredentials"]["DevicePolicy"] = A.load.Bool(ptr + 1476 + 32 + 9);
          } else {
            delete x["XAUTH"]["SaveCredentials"]["DevicePolicy"];
          }
          if (A.load.Bool(ptr + 1476 + 32 + 17)) {
            x["XAUTH"]["SaveCredentials"]["UserSetting"] = A.load.Bool(ptr + 1476 + 32 + 10);
          } else {
            delete x["XAUTH"]["SaveCredentials"]["UserSetting"];
          }
          if (A.load.Bool(ptr + 1476 + 32 + 18)) {
            x["XAUTH"]["SaveCredentials"]["SharedSetting"] = A.load.Bool(ptr + 1476 + 32 + 11);
          } else {
            delete x["XAUTH"]["SaveCredentials"]["SharedSetting"];
          }
          if (A.load.Bool(ptr + 1476 + 32 + 19)) {
            x["XAUTH"]["SaveCredentials"]["UserEditable"] = A.load.Bool(ptr + 1476 + 32 + 12);
          } else {
            delete x["XAUTH"]["SaveCredentials"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1476 + 32 + 20)) {
            x["XAUTH"]["SaveCredentials"]["DeviceEditable"] = A.load.Bool(ptr + 1476 + 32 + 13);
          } else {
            delete x["XAUTH"]["SaveCredentials"]["DeviceEditable"];
          }
        } else {
          delete x["XAUTH"]["SaveCredentials"];
        }
        if (A.load.Bool(ptr + 1476 + 56 + 28)) {
          x["XAUTH"]["Username"] = {};
          x["XAUTH"]["Username"]["Active"] = A.load.Ref(ptr + 1476 + 56 + 0, undefined);
          x["XAUTH"]["Username"]["Effective"] = A.load.Ref(ptr + 1476 + 56 + 4, undefined);
          x["XAUTH"]["Username"]["UserPolicy"] = A.load.Ref(ptr + 1476 + 56 + 8, undefined);
          x["XAUTH"]["Username"]["DevicePolicy"] = A.load.Ref(ptr + 1476 + 56 + 12, undefined);
          x["XAUTH"]["Username"]["UserSetting"] = A.load.Ref(ptr + 1476 + 56 + 16, undefined);
          x["XAUTH"]["Username"]["SharedSetting"] = A.load.Ref(ptr + 1476 + 56 + 20, undefined);
          if (A.load.Bool(ptr + 1476 + 56 + 26)) {
            x["XAUTH"]["Username"]["UserEditable"] = A.load.Bool(ptr + 1476 + 56 + 24);
          } else {
            delete x["XAUTH"]["Username"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1476 + 56 + 27)) {
            x["XAUTH"]["Username"]["DeviceEditable"] = A.load.Bool(ptr + 1476 + 56 + 25);
          } else {
            delete x["XAUTH"]["Username"]["DeviceEditable"];
          }
        } else {
          delete x["XAUTH"]["Username"];
        }
      } else {
        delete x["XAUTH"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_ManagedL2TPProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 109, false);

        A.store.Bool(ptr + 0 + 21, false);
        A.store.Bool(ptr + 0 + 14, false);
        A.store.Bool(ptr + 0 + 0, false);
        A.store.Ref(ptr + 0 + 4, undefined);
        A.store.Bool(ptr + 0 + 15, false);
        A.store.Bool(ptr + 0 + 8, false);
        A.store.Bool(ptr + 0 + 16, false);
        A.store.Bool(ptr + 0 + 9, false);
        A.store.Bool(ptr + 0 + 17, false);
        A.store.Bool(ptr + 0 + 10, false);
        A.store.Bool(ptr + 0 + 18, false);
        A.store.Bool(ptr + 0 + 11, false);
        A.store.Bool(ptr + 0 + 19, false);
        A.store.Bool(ptr + 0 + 12, false);
        A.store.Bool(ptr + 0 + 20, false);
        A.store.Bool(ptr + 0 + 13, false);

        A.store.Bool(ptr + 24 + 28, false);
        A.store.Ref(ptr + 24 + 0, undefined);
        A.store.Ref(ptr + 24 + 4, undefined);
        A.store.Ref(ptr + 24 + 8, undefined);
        A.store.Ref(ptr + 24 + 12, undefined);
        A.store.Ref(ptr + 24 + 16, undefined);
        A.store.Ref(ptr + 24 + 20, undefined);
        A.store.Bool(ptr + 24 + 26, false);
        A.store.Bool(ptr + 24 + 24, false);
        A.store.Bool(ptr + 24 + 27, false);
        A.store.Bool(ptr + 24 + 25, false);

        A.store.Bool(ptr + 56 + 21, false);
        A.store.Bool(ptr + 56 + 14, false);
        A.store.Bool(ptr + 56 + 0, false);
        A.store.Ref(ptr + 56 + 4, undefined);
        A.store.Bool(ptr + 56 + 15, false);
        A.store.Bool(ptr + 56 + 8, false);
        A.store.Bool(ptr + 56 + 16, false);
        A.store.Bool(ptr + 56 + 9, false);
        A.store.Bool(ptr + 56 + 17, false);
        A.store.Bool(ptr + 56 + 10, false);
        A.store.Bool(ptr + 56 + 18, false);
        A.store.Bool(ptr + 56 + 11, false);
        A.store.Bool(ptr + 56 + 19, false);
        A.store.Bool(ptr + 56 + 12, false);
        A.store.Bool(ptr + 56 + 20, false);
        A.store.Bool(ptr + 56 + 13, false);

        A.store.Bool(ptr + 80 + 28, false);
        A.store.Ref(ptr + 80 + 0, undefined);
        A.store.Ref(ptr + 80 + 4, undefined);
        A.store.Ref(ptr + 80 + 8, undefined);
        A.store.Ref(ptr + 80 + 12, undefined);
        A.store.Ref(ptr + 80 + 16, undefined);
        A.store.Ref(ptr + 80 + 20, undefined);
        A.store.Bool(ptr + 80 + 26, false);
        A.store.Bool(ptr + 80 + 24, false);
        A.store.Bool(ptr + 80 + 27, false);
        A.store.Bool(ptr + 80 + 25, false);
      } else {
        A.store.Bool(ptr + 109, true);

        if (typeof x["LcpEchoDisabled"] === "undefined") {
          A.store.Bool(ptr + 0 + 21, false);
          A.store.Bool(ptr + 0 + 14, false);
          A.store.Bool(ptr + 0 + 0, false);
          A.store.Ref(ptr + 0 + 4, undefined);
          A.store.Bool(ptr + 0 + 15, false);
          A.store.Bool(ptr + 0 + 8, false);
          A.store.Bool(ptr + 0 + 16, false);
          A.store.Bool(ptr + 0 + 9, false);
          A.store.Bool(ptr + 0 + 17, false);
          A.store.Bool(ptr + 0 + 10, false);
          A.store.Bool(ptr + 0 + 18, false);
          A.store.Bool(ptr + 0 + 11, false);
          A.store.Bool(ptr + 0 + 19, false);
          A.store.Bool(ptr + 0 + 12, false);
          A.store.Bool(ptr + 0 + 20, false);
          A.store.Bool(ptr + 0 + 13, false);
        } else {
          A.store.Bool(ptr + 0 + 21, true);
          A.store.Bool(ptr + 0 + 14, "Active" in x["LcpEchoDisabled"] ? true : false);
          A.store.Bool(ptr + 0 + 0, x["LcpEchoDisabled"]["Active"] ? true : false);
          A.store.Ref(ptr + 0 + 4, x["LcpEchoDisabled"]["Effective"]);
          A.store.Bool(ptr + 0 + 15, "UserPolicy" in x["LcpEchoDisabled"] ? true : false);
          A.store.Bool(ptr + 0 + 8, x["LcpEchoDisabled"]["UserPolicy"] ? true : false);
          A.store.Bool(ptr + 0 + 16, "DevicePolicy" in x["LcpEchoDisabled"] ? true : false);
          A.store.Bool(ptr + 0 + 9, x["LcpEchoDisabled"]["DevicePolicy"] ? true : false);
          A.store.Bool(ptr + 0 + 17, "UserSetting" in x["LcpEchoDisabled"] ? true : false);
          A.store.Bool(ptr + 0 + 10, x["LcpEchoDisabled"]["UserSetting"] ? true : false);
          A.store.Bool(ptr + 0 + 18, "SharedSetting" in x["LcpEchoDisabled"] ? true : false);
          A.store.Bool(ptr + 0 + 11, x["LcpEchoDisabled"]["SharedSetting"] ? true : false);
          A.store.Bool(ptr + 0 + 19, "UserEditable" in x["LcpEchoDisabled"] ? true : false);
          A.store.Bool(ptr + 0 + 12, x["LcpEchoDisabled"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 0 + 20, "DeviceEditable" in x["LcpEchoDisabled"] ? true : false);
          A.store.Bool(ptr + 0 + 13, x["LcpEchoDisabled"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["Password"] === "undefined") {
          A.store.Bool(ptr + 24 + 28, false);
          A.store.Ref(ptr + 24 + 0, undefined);
          A.store.Ref(ptr + 24 + 4, undefined);
          A.store.Ref(ptr + 24 + 8, undefined);
          A.store.Ref(ptr + 24 + 12, undefined);
          A.store.Ref(ptr + 24 + 16, undefined);
          A.store.Ref(ptr + 24 + 20, undefined);
          A.store.Bool(ptr + 24 + 26, false);
          A.store.Bool(ptr + 24 + 24, false);
          A.store.Bool(ptr + 24 + 27, false);
          A.store.Bool(ptr + 24 + 25, false);
        } else {
          A.store.Bool(ptr + 24 + 28, true);
          A.store.Ref(ptr + 24 + 0, x["Password"]["Active"]);
          A.store.Ref(ptr + 24 + 4, x["Password"]["Effective"]);
          A.store.Ref(ptr + 24 + 8, x["Password"]["UserPolicy"]);
          A.store.Ref(ptr + 24 + 12, x["Password"]["DevicePolicy"]);
          A.store.Ref(ptr + 24 + 16, x["Password"]["UserSetting"]);
          A.store.Ref(ptr + 24 + 20, x["Password"]["SharedSetting"]);
          A.store.Bool(ptr + 24 + 26, "UserEditable" in x["Password"] ? true : false);
          A.store.Bool(ptr + 24 + 24, x["Password"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 24 + 27, "DeviceEditable" in x["Password"] ? true : false);
          A.store.Bool(ptr + 24 + 25, x["Password"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["SaveCredentials"] === "undefined") {
          A.store.Bool(ptr + 56 + 21, false);
          A.store.Bool(ptr + 56 + 14, false);
          A.store.Bool(ptr + 56 + 0, false);
          A.store.Ref(ptr + 56 + 4, undefined);
          A.store.Bool(ptr + 56 + 15, false);
          A.store.Bool(ptr + 56 + 8, false);
          A.store.Bool(ptr + 56 + 16, false);
          A.store.Bool(ptr + 56 + 9, false);
          A.store.Bool(ptr + 56 + 17, false);
          A.store.Bool(ptr + 56 + 10, false);
          A.store.Bool(ptr + 56 + 18, false);
          A.store.Bool(ptr + 56 + 11, false);
          A.store.Bool(ptr + 56 + 19, false);
          A.store.Bool(ptr + 56 + 12, false);
          A.store.Bool(ptr + 56 + 20, false);
          A.store.Bool(ptr + 56 + 13, false);
        } else {
          A.store.Bool(ptr + 56 + 21, true);
          A.store.Bool(ptr + 56 + 14, "Active" in x["SaveCredentials"] ? true : false);
          A.store.Bool(ptr + 56 + 0, x["SaveCredentials"]["Active"] ? true : false);
          A.store.Ref(ptr + 56 + 4, x["SaveCredentials"]["Effective"]);
          A.store.Bool(ptr + 56 + 15, "UserPolicy" in x["SaveCredentials"] ? true : false);
          A.store.Bool(ptr + 56 + 8, x["SaveCredentials"]["UserPolicy"] ? true : false);
          A.store.Bool(ptr + 56 + 16, "DevicePolicy" in x["SaveCredentials"] ? true : false);
          A.store.Bool(ptr + 56 + 9, x["SaveCredentials"]["DevicePolicy"] ? true : false);
          A.store.Bool(ptr + 56 + 17, "UserSetting" in x["SaveCredentials"] ? true : false);
          A.store.Bool(ptr + 56 + 10, x["SaveCredentials"]["UserSetting"] ? true : false);
          A.store.Bool(ptr + 56 + 18, "SharedSetting" in x["SaveCredentials"] ? true : false);
          A.store.Bool(ptr + 56 + 11, x["SaveCredentials"]["SharedSetting"] ? true : false);
          A.store.Bool(ptr + 56 + 19, "UserEditable" in x["SaveCredentials"] ? true : false);
          A.store.Bool(ptr + 56 + 12, x["SaveCredentials"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 56 + 20, "DeviceEditable" in x["SaveCredentials"] ? true : false);
          A.store.Bool(ptr + 56 + 13, x["SaveCredentials"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["Username"] === "undefined") {
          A.store.Bool(ptr + 80 + 28, false);
          A.store.Ref(ptr + 80 + 0, undefined);
          A.store.Ref(ptr + 80 + 4, undefined);
          A.store.Ref(ptr + 80 + 8, undefined);
          A.store.Ref(ptr + 80 + 12, undefined);
          A.store.Ref(ptr + 80 + 16, undefined);
          A.store.Ref(ptr + 80 + 20, undefined);
          A.store.Bool(ptr + 80 + 26, false);
          A.store.Bool(ptr + 80 + 24, false);
          A.store.Bool(ptr + 80 + 27, false);
          A.store.Bool(ptr + 80 + 25, false);
        } else {
          A.store.Bool(ptr + 80 + 28, true);
          A.store.Ref(ptr + 80 + 0, x["Username"]["Active"]);
          A.store.Ref(ptr + 80 + 4, x["Username"]["Effective"]);
          A.store.Ref(ptr + 80 + 8, x["Username"]["UserPolicy"]);
          A.store.Ref(ptr + 80 + 12, x["Username"]["DevicePolicy"]);
          A.store.Ref(ptr + 80 + 16, x["Username"]["UserSetting"]);
          A.store.Ref(ptr + 80 + 20, x["Username"]["SharedSetting"]);
          A.store.Bool(ptr + 80 + 26, "UserEditable" in x["Username"] ? true : false);
          A.store.Bool(ptr + 80 + 24, x["Username"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 80 + 27, "DeviceEditable" in x["Username"] ? true : false);
          A.store.Bool(ptr + 80 + 25, x["Username"]["DeviceEditable"] ? true : false);
        }
      }
    },
    "load_ManagedL2TPProperties": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      if (A.load.Bool(ptr + 0 + 21)) {
        x["LcpEchoDisabled"] = {};
        if (A.load.Bool(ptr + 0 + 14)) {
          x["LcpEchoDisabled"]["Active"] = A.load.Bool(ptr + 0 + 0);
        } else {
          delete x["LcpEchoDisabled"]["Active"];
        }
        x["LcpEchoDisabled"]["Effective"] = A.load.Ref(ptr + 0 + 4, undefined);
        if (A.load.Bool(ptr + 0 + 15)) {
          x["LcpEchoDisabled"]["UserPolicy"] = A.load.Bool(ptr + 0 + 8);
        } else {
          delete x["LcpEchoDisabled"]["UserPolicy"];
        }
        if (A.load.Bool(ptr + 0 + 16)) {
          x["LcpEchoDisabled"]["DevicePolicy"] = A.load.Bool(ptr + 0 + 9);
        } else {
          delete x["LcpEchoDisabled"]["DevicePolicy"];
        }
        if (A.load.Bool(ptr + 0 + 17)) {
          x["LcpEchoDisabled"]["UserSetting"] = A.load.Bool(ptr + 0 + 10);
        } else {
          delete x["LcpEchoDisabled"]["UserSetting"];
        }
        if (A.load.Bool(ptr + 0 + 18)) {
          x["LcpEchoDisabled"]["SharedSetting"] = A.load.Bool(ptr + 0 + 11);
        } else {
          delete x["LcpEchoDisabled"]["SharedSetting"];
        }
        if (A.load.Bool(ptr + 0 + 19)) {
          x["LcpEchoDisabled"]["UserEditable"] = A.load.Bool(ptr + 0 + 12);
        } else {
          delete x["LcpEchoDisabled"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 0 + 20)) {
          x["LcpEchoDisabled"]["DeviceEditable"] = A.load.Bool(ptr + 0 + 13);
        } else {
          delete x["LcpEchoDisabled"]["DeviceEditable"];
        }
      } else {
        delete x["LcpEchoDisabled"];
      }
      if (A.load.Bool(ptr + 24 + 28)) {
        x["Password"] = {};
        x["Password"]["Active"] = A.load.Ref(ptr + 24 + 0, undefined);
        x["Password"]["Effective"] = A.load.Ref(ptr + 24 + 4, undefined);
        x["Password"]["UserPolicy"] = A.load.Ref(ptr + 24 + 8, undefined);
        x["Password"]["DevicePolicy"] = A.load.Ref(ptr + 24 + 12, undefined);
        x["Password"]["UserSetting"] = A.load.Ref(ptr + 24 + 16, undefined);
        x["Password"]["SharedSetting"] = A.load.Ref(ptr + 24 + 20, undefined);
        if (A.load.Bool(ptr + 24 + 26)) {
          x["Password"]["UserEditable"] = A.load.Bool(ptr + 24 + 24);
        } else {
          delete x["Password"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 24 + 27)) {
          x["Password"]["DeviceEditable"] = A.load.Bool(ptr + 24 + 25);
        } else {
          delete x["Password"]["DeviceEditable"];
        }
      } else {
        delete x["Password"];
      }
      if (A.load.Bool(ptr + 56 + 21)) {
        x["SaveCredentials"] = {};
        if (A.load.Bool(ptr + 56 + 14)) {
          x["SaveCredentials"]["Active"] = A.load.Bool(ptr + 56 + 0);
        } else {
          delete x["SaveCredentials"]["Active"];
        }
        x["SaveCredentials"]["Effective"] = A.load.Ref(ptr + 56 + 4, undefined);
        if (A.load.Bool(ptr + 56 + 15)) {
          x["SaveCredentials"]["UserPolicy"] = A.load.Bool(ptr + 56 + 8);
        } else {
          delete x["SaveCredentials"]["UserPolicy"];
        }
        if (A.load.Bool(ptr + 56 + 16)) {
          x["SaveCredentials"]["DevicePolicy"] = A.load.Bool(ptr + 56 + 9);
        } else {
          delete x["SaveCredentials"]["DevicePolicy"];
        }
        if (A.load.Bool(ptr + 56 + 17)) {
          x["SaveCredentials"]["UserSetting"] = A.load.Bool(ptr + 56 + 10);
        } else {
          delete x["SaveCredentials"]["UserSetting"];
        }
        if (A.load.Bool(ptr + 56 + 18)) {
          x["SaveCredentials"]["SharedSetting"] = A.load.Bool(ptr + 56 + 11);
        } else {
          delete x["SaveCredentials"]["SharedSetting"];
        }
        if (A.load.Bool(ptr + 56 + 19)) {
          x["SaveCredentials"]["UserEditable"] = A.load.Bool(ptr + 56 + 12);
        } else {
          delete x["SaveCredentials"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 56 + 20)) {
          x["SaveCredentials"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 13);
        } else {
          delete x["SaveCredentials"]["DeviceEditable"];
        }
      } else {
        delete x["SaveCredentials"];
      }
      if (A.load.Bool(ptr + 80 + 28)) {
        x["Username"] = {};
        x["Username"]["Active"] = A.load.Ref(ptr + 80 + 0, undefined);
        x["Username"]["Effective"] = A.load.Ref(ptr + 80 + 4, undefined);
        x["Username"]["UserPolicy"] = A.load.Ref(ptr + 80 + 8, undefined);
        x["Username"]["DevicePolicy"] = A.load.Ref(ptr + 80 + 12, undefined);
        x["Username"]["UserSetting"] = A.load.Ref(ptr + 80 + 16, undefined);
        x["Username"]["SharedSetting"] = A.load.Ref(ptr + 80 + 20, undefined);
        if (A.load.Bool(ptr + 80 + 26)) {
          x["Username"]["UserEditable"] = A.load.Bool(ptr + 80 + 24);
        } else {
          delete x["Username"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 80 + 27)) {
          x["Username"]["DeviceEditable"] = A.load.Bool(ptr + 80 + 25);
        } else {
          delete x["Username"]["DeviceEditable"];
        }
      } else {
        delete x["Username"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_ManagedVerifyX509": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 61, false);

        A.store.Bool(ptr + 0 + 28, false);
        A.store.Ref(ptr + 0 + 0, undefined);
        A.store.Ref(ptr + 0 + 4, undefined);
        A.store.Ref(ptr + 0 + 8, undefined);
        A.store.Ref(ptr + 0 + 12, undefined);
        A.store.Ref(ptr + 0 + 16, undefined);
        A.store.Ref(ptr + 0 + 20, undefined);
        A.store.Bool(ptr + 0 + 26, false);
        A.store.Bool(ptr + 0 + 24, false);
        A.store.Bool(ptr + 0 + 27, false);
        A.store.Bool(ptr + 0 + 25, false);

        A.store.Bool(ptr + 32 + 28, false);
        A.store.Ref(ptr + 32 + 0, undefined);
        A.store.Ref(ptr + 32 + 4, undefined);
        A.store.Ref(ptr + 32 + 8, undefined);
        A.store.Ref(ptr + 32 + 12, undefined);
        A.store.Ref(ptr + 32 + 16, undefined);
        A.store.Ref(ptr + 32 + 20, undefined);
        A.store.Bool(ptr + 32 + 26, false);
        A.store.Bool(ptr + 32 + 24, false);
        A.store.Bool(ptr + 32 + 27, false);
        A.store.Bool(ptr + 32 + 25, false);
      } else {
        A.store.Bool(ptr + 61, true);

        if (typeof x["Name"] === "undefined") {
          A.store.Bool(ptr + 0 + 28, false);
          A.store.Ref(ptr + 0 + 0, undefined);
          A.store.Ref(ptr + 0 + 4, undefined);
          A.store.Ref(ptr + 0 + 8, undefined);
          A.store.Ref(ptr + 0 + 12, undefined);
          A.store.Ref(ptr + 0 + 16, undefined);
          A.store.Ref(ptr + 0 + 20, undefined);
          A.store.Bool(ptr + 0 + 26, false);
          A.store.Bool(ptr + 0 + 24, false);
          A.store.Bool(ptr + 0 + 27, false);
          A.store.Bool(ptr + 0 + 25, false);
        } else {
          A.store.Bool(ptr + 0 + 28, true);
          A.store.Ref(ptr + 0 + 0, x["Name"]["Active"]);
          A.store.Ref(ptr + 0 + 4, x["Name"]["Effective"]);
          A.store.Ref(ptr + 0 + 8, x["Name"]["UserPolicy"]);
          A.store.Ref(ptr + 0 + 12, x["Name"]["DevicePolicy"]);
          A.store.Ref(ptr + 0 + 16, x["Name"]["UserSetting"]);
          A.store.Ref(ptr + 0 + 20, x["Name"]["SharedSetting"]);
          A.store.Bool(ptr + 0 + 26, "UserEditable" in x["Name"] ? true : false);
          A.store.Bool(ptr + 0 + 24, x["Name"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 0 + 27, "DeviceEditable" in x["Name"] ? true : false);
          A.store.Bool(ptr + 0 + 25, x["Name"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["Type"] === "undefined") {
          A.store.Bool(ptr + 32 + 28, false);
          A.store.Ref(ptr + 32 + 0, undefined);
          A.store.Ref(ptr + 32 + 4, undefined);
          A.store.Ref(ptr + 32 + 8, undefined);
          A.store.Ref(ptr + 32 + 12, undefined);
          A.store.Ref(ptr + 32 + 16, undefined);
          A.store.Ref(ptr + 32 + 20, undefined);
          A.store.Bool(ptr + 32 + 26, false);
          A.store.Bool(ptr + 32 + 24, false);
          A.store.Bool(ptr + 32 + 27, false);
          A.store.Bool(ptr + 32 + 25, false);
        } else {
          A.store.Bool(ptr + 32 + 28, true);
          A.store.Ref(ptr + 32 + 0, x["Type"]["Active"]);
          A.store.Ref(ptr + 32 + 4, x["Type"]["Effective"]);
          A.store.Ref(ptr + 32 + 8, x["Type"]["UserPolicy"]);
          A.store.Ref(ptr + 32 + 12, x["Type"]["DevicePolicy"]);
          A.store.Ref(ptr + 32 + 16, x["Type"]["UserSetting"]);
          A.store.Ref(ptr + 32 + 20, x["Type"]["SharedSetting"]);
          A.store.Bool(ptr + 32 + 26, "UserEditable" in x["Type"] ? true : false);
          A.store.Bool(ptr + 32 + 24, x["Type"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 32 + 27, "DeviceEditable" in x["Type"] ? true : false);
          A.store.Bool(ptr + 32 + 25, x["Type"]["DeviceEditable"] ? true : false);
        }
      }
    },
    "load_ManagedVerifyX509": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      if (A.load.Bool(ptr + 0 + 28)) {
        x["Name"] = {};
        x["Name"]["Active"] = A.load.Ref(ptr + 0 + 0, undefined);
        x["Name"]["Effective"] = A.load.Ref(ptr + 0 + 4, undefined);
        x["Name"]["UserPolicy"] = A.load.Ref(ptr + 0 + 8, undefined);
        x["Name"]["DevicePolicy"] = A.load.Ref(ptr + 0 + 12, undefined);
        x["Name"]["UserSetting"] = A.load.Ref(ptr + 0 + 16, undefined);
        x["Name"]["SharedSetting"] = A.load.Ref(ptr + 0 + 20, undefined);
        if (A.load.Bool(ptr + 0 + 26)) {
          x["Name"]["UserEditable"] = A.load.Bool(ptr + 0 + 24);
        } else {
          delete x["Name"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 0 + 27)) {
          x["Name"]["DeviceEditable"] = A.load.Bool(ptr + 0 + 25);
        } else {
          delete x["Name"]["DeviceEditable"];
        }
      } else {
        delete x["Name"];
      }
      if (A.load.Bool(ptr + 32 + 28)) {
        x["Type"] = {};
        x["Type"]["Active"] = A.load.Ref(ptr + 32 + 0, undefined);
        x["Type"]["Effective"] = A.load.Ref(ptr + 32 + 4, undefined);
        x["Type"]["UserPolicy"] = A.load.Ref(ptr + 32 + 8, undefined);
        x["Type"]["DevicePolicy"] = A.load.Ref(ptr + 32 + 12, undefined);
        x["Type"]["UserSetting"] = A.load.Ref(ptr + 32 + 16, undefined);
        x["Type"]["SharedSetting"] = A.load.Ref(ptr + 32 + 20, undefined);
        if (A.load.Bool(ptr + 32 + 26)) {
          x["Type"]["UserEditable"] = A.load.Bool(ptr + 32 + 24);
        } else {
          delete x["Type"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 32 + 27)) {
          x["Type"]["DeviceEditable"] = A.load.Bool(ptr + 32 + 25);
        } else {
          delete x["Type"]["DeviceEditable"];
        }
      } else {
        delete x["Type"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_ManagedOpenVPNProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 1542, false);

        A.store.Bool(ptr + 0 + 28, false);
        A.store.Ref(ptr + 0 + 0, undefined);
        A.store.Ref(ptr + 0 + 4, undefined);
        A.store.Ref(ptr + 0 + 8, undefined);
        A.store.Ref(ptr + 0 + 12, undefined);
        A.store.Ref(ptr + 0 + 16, undefined);
        A.store.Ref(ptr + 0 + 20, undefined);
        A.store.Bool(ptr + 0 + 26, false);
        A.store.Bool(ptr + 0 + 24, false);
        A.store.Bool(ptr + 0 + 27, false);
        A.store.Bool(ptr + 0 + 25, false);

        A.store.Bool(ptr + 32 + 28, false);
        A.store.Ref(ptr + 32 + 0, undefined);
        A.store.Ref(ptr + 32 + 4, undefined);
        A.store.Ref(ptr + 32 + 8, undefined);
        A.store.Ref(ptr + 32 + 12, undefined);
        A.store.Ref(ptr + 32 + 16, undefined);
        A.store.Ref(ptr + 32 + 20, undefined);
        A.store.Bool(ptr + 32 + 26, false);
        A.store.Bool(ptr + 32 + 24, false);
        A.store.Bool(ptr + 32 + 27, false);
        A.store.Bool(ptr + 32 + 25, false);

        A.store.Bool(ptr + 64 + 21, false);
        A.store.Bool(ptr + 64 + 14, false);
        A.store.Bool(ptr + 64 + 0, false);
        A.store.Ref(ptr + 64 + 4, undefined);
        A.store.Bool(ptr + 64 + 15, false);
        A.store.Bool(ptr + 64 + 8, false);
        A.store.Bool(ptr + 64 + 16, false);
        A.store.Bool(ptr + 64 + 9, false);
        A.store.Bool(ptr + 64 + 17, false);
        A.store.Bool(ptr + 64 + 10, false);
        A.store.Bool(ptr + 64 + 18, false);
        A.store.Bool(ptr + 64 + 11, false);
        A.store.Bool(ptr + 64 + 19, false);
        A.store.Bool(ptr + 64 + 12, false);
        A.store.Bool(ptr + 64 + 20, false);
        A.store.Bool(ptr + 64 + 13, false);

        A.store.Bool(ptr + 88 + 28, false);
        A.store.Ref(ptr + 88 + 0, undefined);
        A.store.Ref(ptr + 88 + 4, undefined);
        A.store.Ref(ptr + 88 + 8, undefined);
        A.store.Ref(ptr + 88 + 12, undefined);
        A.store.Ref(ptr + 88 + 16, undefined);
        A.store.Ref(ptr + 88 + 20, undefined);
        A.store.Bool(ptr + 88 + 26, false);
        A.store.Bool(ptr + 88 + 24, false);
        A.store.Bool(ptr + 88 + 27, false);
        A.store.Bool(ptr + 88 + 25, false);

        A.store.Bool(ptr + 120 + 28, false);
        A.store.Ref(ptr + 120 + 0, undefined);
        A.store.Ref(ptr + 120 + 4, undefined);
        A.store.Ref(ptr + 120 + 8, undefined);
        A.store.Ref(ptr + 120 + 12, undefined);
        A.store.Ref(ptr + 120 + 16, undefined);
        A.store.Ref(ptr + 120 + 20, undefined);
        A.store.Bool(ptr + 120 + 26, false);
        A.store.Bool(ptr + 120 + 24, false);
        A.store.Bool(ptr + 120 + 27, false);
        A.store.Bool(ptr + 120 + 25, false);

        A.store.Bool(ptr + 152 + 318, false);

        A.store.Bool(ptr + 152 + 0 + 28, false);
        A.store.Ref(ptr + 152 + 0 + 0, undefined);
        A.store.Ref(ptr + 152 + 0 + 4, undefined);
        A.store.Ref(ptr + 152 + 0 + 8, undefined);
        A.store.Ref(ptr + 152 + 0 + 12, undefined);
        A.store.Ref(ptr + 152 + 0 + 16, undefined);
        A.store.Ref(ptr + 152 + 0 + 20, undefined);
        A.store.Bool(ptr + 152 + 0 + 26, false);
        A.store.Bool(ptr + 152 + 0 + 24, false);
        A.store.Bool(ptr + 152 + 0 + 27, false);
        A.store.Bool(ptr + 152 + 0 + 25, false);

        A.store.Bool(ptr + 152 + 32 + 125, false);

        A.store.Bool(ptr + 152 + 32 + 0 + 28, false);
        A.store.Ref(ptr + 152 + 32 + 0 + 0, undefined);
        A.store.Ref(ptr + 152 + 32 + 0 + 4, undefined);
        A.store.Ref(ptr + 152 + 32 + 0 + 8, undefined);
        A.store.Ref(ptr + 152 + 32 + 0 + 12, undefined);
        A.store.Ref(ptr + 152 + 32 + 0 + 16, undefined);
        A.store.Ref(ptr + 152 + 32 + 0 + 20, undefined);
        A.store.Bool(ptr + 152 + 32 + 0 + 26, false);
        A.store.Bool(ptr + 152 + 32 + 0 + 24, false);
        A.store.Bool(ptr + 152 + 32 + 0 + 27, false);
        A.store.Bool(ptr + 152 + 32 + 0 + 25, false);

        A.store.Bool(ptr + 152 + 32 + 32 + 28, false);
        A.store.Ref(ptr + 152 + 32 + 32 + 0, undefined);
        A.store.Ref(ptr + 152 + 32 + 32 + 4, undefined);
        A.store.Ref(ptr + 152 + 32 + 32 + 8, undefined);
        A.store.Ref(ptr + 152 + 32 + 32 + 12, undefined);
        A.store.Ref(ptr + 152 + 32 + 32 + 16, undefined);
        A.store.Ref(ptr + 152 + 32 + 32 + 20, undefined);
        A.store.Bool(ptr + 152 + 32 + 32 + 26, false);
        A.store.Bool(ptr + 152 + 32 + 32 + 24, false);
        A.store.Bool(ptr + 152 + 32 + 32 + 27, false);
        A.store.Bool(ptr + 152 + 32 + 32 + 25, false);

        A.store.Bool(ptr + 152 + 32 + 64 + 28, false);
        A.store.Ref(ptr + 152 + 32 + 64 + 0, undefined);
        A.store.Ref(ptr + 152 + 32 + 64 + 4, undefined);
        A.store.Ref(ptr + 152 + 32 + 64 + 8, undefined);
        A.store.Ref(ptr + 152 + 32 + 64 + 12, undefined);
        A.store.Ref(ptr + 152 + 32 + 64 + 16, undefined);
        A.store.Ref(ptr + 152 + 32 + 64 + 20, undefined);
        A.store.Bool(ptr + 152 + 32 + 64 + 26, false);
        A.store.Bool(ptr + 152 + 32 + 64 + 24, false);
        A.store.Bool(ptr + 152 + 32 + 64 + 27, false);
        A.store.Bool(ptr + 152 + 32 + 64 + 25, false);

        A.store.Bool(ptr + 152 + 32 + 96 + 28, false);
        A.store.Ref(ptr + 152 + 32 + 96 + 0, undefined);
        A.store.Ref(ptr + 152 + 32 + 96 + 4, undefined);
        A.store.Ref(ptr + 152 + 32 + 96 + 8, undefined);
        A.store.Ref(ptr + 152 + 32 + 96 + 12, undefined);
        A.store.Ref(ptr + 152 + 32 + 96 + 16, undefined);
        A.store.Ref(ptr + 152 + 32 + 96 + 20, undefined);
        A.store.Bool(ptr + 152 + 32 + 96 + 26, false);
        A.store.Bool(ptr + 152 + 32 + 96 + 24, false);
        A.store.Bool(ptr + 152 + 32 + 96 + 27, false);
        A.store.Bool(ptr + 152 + 32 + 96 + 25, false);

        A.store.Bool(ptr + 152 + 160 + 28, false);
        A.store.Ref(ptr + 152 + 160 + 0, undefined);
        A.store.Ref(ptr + 152 + 160 + 4, undefined);
        A.store.Ref(ptr + 152 + 160 + 8, undefined);
        A.store.Ref(ptr + 152 + 160 + 12, undefined);
        A.store.Ref(ptr + 152 + 160 + 16, undefined);
        A.store.Ref(ptr + 152 + 160 + 20, undefined);
        A.store.Bool(ptr + 152 + 160 + 26, false);
        A.store.Bool(ptr + 152 + 160 + 24, false);
        A.store.Bool(ptr + 152 + 160 + 27, false);
        A.store.Bool(ptr + 152 + 160 + 25, false);

        A.store.Bool(ptr + 152 + 192 + 125, false);

        A.store.Bool(ptr + 152 + 192 + 0 + 28, false);
        A.store.Ref(ptr + 152 + 192 + 0 + 0, undefined);
        A.store.Ref(ptr + 152 + 192 + 0 + 4, undefined);
        A.store.Ref(ptr + 152 + 192 + 0 + 8, undefined);
        A.store.Ref(ptr + 152 + 192 + 0 + 12, undefined);
        A.store.Ref(ptr + 152 + 192 + 0 + 16, undefined);
        A.store.Ref(ptr + 152 + 192 + 0 + 20, undefined);
        A.store.Bool(ptr + 152 + 192 + 0 + 26, false);
        A.store.Bool(ptr + 152 + 192 + 0 + 24, false);
        A.store.Bool(ptr + 152 + 192 + 0 + 27, false);
        A.store.Bool(ptr + 152 + 192 + 0 + 25, false);

        A.store.Bool(ptr + 152 + 192 + 32 + 28, false);
        A.store.Ref(ptr + 152 + 192 + 32 + 0, undefined);
        A.store.Ref(ptr + 152 + 192 + 32 + 4, undefined);
        A.store.Ref(ptr + 152 + 192 + 32 + 8, undefined);
        A.store.Ref(ptr + 152 + 192 + 32 + 12, undefined);
        A.store.Ref(ptr + 152 + 192 + 32 + 16, undefined);
        A.store.Ref(ptr + 152 + 192 + 32 + 20, undefined);
        A.store.Bool(ptr + 152 + 192 + 32 + 26, false);
        A.store.Bool(ptr + 152 + 192 + 32 + 24, false);
        A.store.Bool(ptr + 152 + 192 + 32 + 27, false);
        A.store.Bool(ptr + 152 + 192 + 32 + 25, false);

        A.store.Bool(ptr + 152 + 192 + 64 + 28, false);
        A.store.Ref(ptr + 152 + 192 + 64 + 0, undefined);
        A.store.Ref(ptr + 152 + 192 + 64 + 4, undefined);
        A.store.Ref(ptr + 152 + 192 + 64 + 8, undefined);
        A.store.Ref(ptr + 152 + 192 + 64 + 12, undefined);
        A.store.Ref(ptr + 152 + 192 + 64 + 16, undefined);
        A.store.Ref(ptr + 152 + 192 + 64 + 20, undefined);
        A.store.Bool(ptr + 152 + 192 + 64 + 26, false);
        A.store.Bool(ptr + 152 + 192 + 64 + 24, false);
        A.store.Bool(ptr + 152 + 192 + 64 + 27, false);
        A.store.Bool(ptr + 152 + 192 + 64 + 25, false);

        A.store.Bool(ptr + 152 + 192 + 96 + 28, false);
        A.store.Ref(ptr + 152 + 192 + 96 + 0, undefined);
        A.store.Ref(ptr + 152 + 192 + 96 + 4, undefined);
        A.store.Ref(ptr + 152 + 192 + 96 + 8, undefined);
        A.store.Ref(ptr + 152 + 192 + 96 + 12, undefined);
        A.store.Ref(ptr + 152 + 192 + 96 + 16, undefined);
        A.store.Ref(ptr + 152 + 192 + 96 + 20, undefined);
        A.store.Bool(ptr + 152 + 192 + 96 + 26, false);
        A.store.Bool(ptr + 152 + 192 + 96 + 24, false);
        A.store.Bool(ptr + 152 + 192 + 96 + 27, false);
        A.store.Bool(ptr + 152 + 192 + 96 + 25, false);

        A.store.Bool(ptr + 472 + 28, false);
        A.store.Ref(ptr + 472 + 0, undefined);
        A.store.Ref(ptr + 472 + 4, undefined);
        A.store.Ref(ptr + 472 + 8, undefined);
        A.store.Ref(ptr + 472 + 12, undefined);
        A.store.Ref(ptr + 472 + 16, undefined);
        A.store.Ref(ptr + 472 + 20, undefined);
        A.store.Bool(ptr + 472 + 26, false);
        A.store.Bool(ptr + 472 + 24, false);
        A.store.Bool(ptr + 472 + 27, false);
        A.store.Bool(ptr + 472 + 25, false);

        A.store.Bool(ptr + 504 + 28, false);
        A.store.Ref(ptr + 504 + 0, undefined);
        A.store.Ref(ptr + 504 + 4, undefined);
        A.store.Ref(ptr + 504 + 8, undefined);
        A.store.Ref(ptr + 504 + 12, undefined);
        A.store.Ref(ptr + 504 + 16, undefined);
        A.store.Ref(ptr + 504 + 20, undefined);
        A.store.Bool(ptr + 504 + 26, false);
        A.store.Bool(ptr + 504 + 24, false);
        A.store.Bool(ptr + 504 + 27, false);
        A.store.Bool(ptr + 504 + 25, false);

        A.store.Bool(ptr + 536 + 28, false);
        A.store.Ref(ptr + 536 + 0, undefined);
        A.store.Ref(ptr + 536 + 4, undefined);
        A.store.Ref(ptr + 536 + 8, undefined);
        A.store.Ref(ptr + 536 + 12, undefined);
        A.store.Ref(ptr + 536 + 16, undefined);
        A.store.Ref(ptr + 536 + 20, undefined);
        A.store.Bool(ptr + 536 + 26, false);
        A.store.Bool(ptr + 536 + 24, false);
        A.store.Bool(ptr + 536 + 27, false);
        A.store.Bool(ptr + 536 + 25, false);

        A.store.Bool(ptr + 568 + 28, false);
        A.store.Ref(ptr + 568 + 0, undefined);
        A.store.Ref(ptr + 568 + 4, undefined);
        A.store.Ref(ptr + 568 + 8, undefined);
        A.store.Ref(ptr + 568 + 12, undefined);
        A.store.Ref(ptr + 568 + 16, undefined);
        A.store.Ref(ptr + 568 + 20, undefined);
        A.store.Bool(ptr + 568 + 26, false);
        A.store.Bool(ptr + 568 + 24, false);
        A.store.Bool(ptr + 568 + 27, false);
        A.store.Bool(ptr + 568 + 25, false);

        A.store.Bool(ptr + 600 + 21, false);
        A.store.Bool(ptr + 600 + 14, false);
        A.store.Bool(ptr + 600 + 0, false);
        A.store.Ref(ptr + 600 + 4, undefined);
        A.store.Bool(ptr + 600 + 15, false);
        A.store.Bool(ptr + 600 + 8, false);
        A.store.Bool(ptr + 600 + 16, false);
        A.store.Bool(ptr + 600 + 9, false);
        A.store.Bool(ptr + 600 + 17, false);
        A.store.Bool(ptr + 600 + 10, false);
        A.store.Bool(ptr + 600 + 18, false);
        A.store.Bool(ptr + 600 + 11, false);
        A.store.Bool(ptr + 600 + 19, false);
        A.store.Bool(ptr + 600 + 12, false);
        A.store.Bool(ptr + 600 + 20, false);
        A.store.Bool(ptr + 600 + 13, false);

        A.store.Bool(ptr + 624 + 28, false);
        A.store.Ref(ptr + 624 + 0, undefined);
        A.store.Ref(ptr + 624 + 4, undefined);
        A.store.Ref(ptr + 624 + 8, undefined);
        A.store.Ref(ptr + 624 + 12, undefined);
        A.store.Ref(ptr + 624 + 16, undefined);
        A.store.Ref(ptr + 624 + 20, undefined);
        A.store.Bool(ptr + 624 + 26, false);
        A.store.Bool(ptr + 624 + 24, false);
        A.store.Bool(ptr + 624 + 27, false);
        A.store.Bool(ptr + 624 + 25, false);

        A.store.Bool(ptr + 656 + 21, false);
        A.store.Bool(ptr + 656 + 14, false);
        A.store.Bool(ptr + 656 + 0, false);
        A.store.Ref(ptr + 656 + 4, undefined);
        A.store.Bool(ptr + 656 + 15, false);
        A.store.Bool(ptr + 656 + 8, false);
        A.store.Bool(ptr + 656 + 16, false);
        A.store.Bool(ptr + 656 + 9, false);
        A.store.Bool(ptr + 656 + 17, false);
        A.store.Bool(ptr + 656 + 10, false);
        A.store.Bool(ptr + 656 + 18, false);
        A.store.Bool(ptr + 656 + 11, false);
        A.store.Bool(ptr + 656 + 19, false);
        A.store.Bool(ptr + 656 + 12, false);
        A.store.Bool(ptr + 656 + 20, false);
        A.store.Bool(ptr + 656 + 13, false);

        A.store.Bool(ptr + 680 + 28, false);
        A.store.Ref(ptr + 680 + 0, undefined);
        A.store.Ref(ptr + 680 + 4, undefined);
        A.store.Ref(ptr + 680 + 8, undefined);
        A.store.Ref(ptr + 680 + 12, undefined);
        A.store.Ref(ptr + 680 + 16, undefined);
        A.store.Ref(ptr + 680 + 20, undefined);
        A.store.Bool(ptr + 680 + 26, false);
        A.store.Bool(ptr + 680 + 24, false);
        A.store.Bool(ptr + 680 + 27, false);
        A.store.Bool(ptr + 680 + 25, false);

        A.store.Bool(ptr + 712 + 28, false);
        A.store.Ref(ptr + 712 + 0, undefined);
        A.store.Ref(ptr + 712 + 4, undefined);
        A.store.Ref(ptr + 712 + 8, undefined);
        A.store.Ref(ptr + 712 + 12, undefined);
        A.store.Ref(ptr + 712 + 16, undefined);
        A.store.Ref(ptr + 712 + 20, undefined);
        A.store.Bool(ptr + 712 + 26, false);
        A.store.Bool(ptr + 712 + 24, false);
        A.store.Bool(ptr + 712 + 27, false);
        A.store.Bool(ptr + 712 + 25, false);

        A.store.Bool(ptr + 744 + 28, false);
        A.store.Ref(ptr + 744 + 0, undefined);
        A.store.Ref(ptr + 744 + 4, undefined);
        A.store.Ref(ptr + 744 + 8, undefined);
        A.store.Ref(ptr + 744 + 12, undefined);
        A.store.Ref(ptr + 744 + 16, undefined);
        A.store.Ref(ptr + 744 + 20, undefined);
        A.store.Bool(ptr + 744 + 26, false);
        A.store.Bool(ptr + 744 + 24, false);
        A.store.Bool(ptr + 744 + 27, false);
        A.store.Bool(ptr + 744 + 25, false);

        A.store.Bool(ptr + 776 + 28, false);
        A.store.Ref(ptr + 776 + 0, undefined);
        A.store.Ref(ptr + 776 + 4, undefined);
        A.store.Ref(ptr + 776 + 8, undefined);
        A.store.Ref(ptr + 776 + 12, undefined);
        A.store.Ref(ptr + 776 + 16, undefined);
        A.store.Ref(ptr + 776 + 20, undefined);
        A.store.Bool(ptr + 776 + 26, false);
        A.store.Bool(ptr + 776 + 24, false);
        A.store.Bool(ptr + 776 + 27, false);
        A.store.Bool(ptr + 776 + 25, false);

        A.store.Bool(ptr + 808 + 33, false);
        A.store.Bool(ptr + 808 + 26, false);
        A.store.Int32(ptr + 808 + 0, 0);
        A.store.Ref(ptr + 808 + 4, undefined);
        A.store.Bool(ptr + 808 + 27, false);
        A.store.Int32(ptr + 808 + 8, 0);
        A.store.Bool(ptr + 808 + 28, false);
        A.store.Int32(ptr + 808 + 12, 0);
        A.store.Bool(ptr + 808 + 29, false);
        A.store.Int32(ptr + 808 + 16, 0);
        A.store.Bool(ptr + 808 + 30, false);
        A.store.Int32(ptr + 808 + 20, 0);
        A.store.Bool(ptr + 808 + 31, false);
        A.store.Bool(ptr + 808 + 24, false);
        A.store.Bool(ptr + 808 + 32, false);
        A.store.Bool(ptr + 808 + 25, false);

        A.store.Bool(ptr + 844 + 28, false);
        A.store.Ref(ptr + 844 + 0, undefined);
        A.store.Ref(ptr + 844 + 4, undefined);
        A.store.Ref(ptr + 844 + 8, undefined);
        A.store.Ref(ptr + 844 + 12, undefined);
        A.store.Ref(ptr + 844 + 16, undefined);
        A.store.Ref(ptr + 844 + 20, undefined);
        A.store.Bool(ptr + 844 + 26, false);
        A.store.Bool(ptr + 844 + 24, false);
        A.store.Bool(ptr + 844 + 27, false);
        A.store.Bool(ptr + 844 + 25, false);

        A.store.Bool(ptr + 876 + 21, false);
        A.store.Bool(ptr + 876 + 14, false);
        A.store.Bool(ptr + 876 + 0, false);
        A.store.Ref(ptr + 876 + 4, undefined);
        A.store.Bool(ptr + 876 + 15, false);
        A.store.Bool(ptr + 876 + 8, false);
        A.store.Bool(ptr + 876 + 16, false);
        A.store.Bool(ptr + 876 + 9, false);
        A.store.Bool(ptr + 876 + 17, false);
        A.store.Bool(ptr + 876 + 10, false);
        A.store.Bool(ptr + 876 + 18, false);
        A.store.Bool(ptr + 876 + 11, false);
        A.store.Bool(ptr + 876 + 19, false);
        A.store.Bool(ptr + 876 + 12, false);
        A.store.Bool(ptr + 876 + 20, false);
        A.store.Bool(ptr + 876 + 13, false);

        A.store.Bool(ptr + 900 + 28, false);
        A.store.Ref(ptr + 900 + 0, undefined);
        A.store.Ref(ptr + 900 + 4, undefined);
        A.store.Ref(ptr + 900 + 8, undefined);
        A.store.Ref(ptr + 900 + 12, undefined);
        A.store.Ref(ptr + 900 + 16, undefined);
        A.store.Ref(ptr + 900 + 20, undefined);
        A.store.Bool(ptr + 900 + 26, false);
        A.store.Bool(ptr + 900 + 24, false);
        A.store.Bool(ptr + 900 + 27, false);
        A.store.Bool(ptr + 900 + 25, false);

        A.store.Bool(ptr + 932 + 28, false);
        A.store.Ref(ptr + 932 + 0, undefined);
        A.store.Ref(ptr + 932 + 4, undefined);
        A.store.Ref(ptr + 932 + 8, undefined);
        A.store.Ref(ptr + 932 + 12, undefined);
        A.store.Ref(ptr + 932 + 16, undefined);
        A.store.Ref(ptr + 932 + 20, undefined);
        A.store.Bool(ptr + 932 + 26, false);
        A.store.Bool(ptr + 932 + 24, false);
        A.store.Bool(ptr + 932 + 27, false);
        A.store.Bool(ptr + 932 + 25, false);

        A.store.Bool(ptr + 964 + 28, false);
        A.store.Ref(ptr + 964 + 0, undefined);
        A.store.Ref(ptr + 964 + 4, undefined);
        A.store.Ref(ptr + 964 + 8, undefined);
        A.store.Ref(ptr + 964 + 12, undefined);
        A.store.Ref(ptr + 964 + 16, undefined);
        A.store.Ref(ptr + 964 + 20, undefined);
        A.store.Bool(ptr + 964 + 26, false);
        A.store.Bool(ptr + 964 + 24, false);
        A.store.Bool(ptr + 964 + 27, false);
        A.store.Bool(ptr + 964 + 25, false);

        A.store.Bool(ptr + 996 + 33, false);
        A.store.Bool(ptr + 996 + 26, false);
        A.store.Int32(ptr + 996 + 0, 0);
        A.store.Ref(ptr + 996 + 4, undefined);
        A.store.Bool(ptr + 996 + 27, false);
        A.store.Int32(ptr + 996 + 8, 0);
        A.store.Bool(ptr + 996 + 28, false);
        A.store.Int32(ptr + 996 + 12, 0);
        A.store.Bool(ptr + 996 + 29, false);
        A.store.Int32(ptr + 996 + 16, 0);
        A.store.Bool(ptr + 996 + 30, false);
        A.store.Int32(ptr + 996 + 20, 0);
        A.store.Bool(ptr + 996 + 31, false);
        A.store.Bool(ptr + 996 + 24, false);
        A.store.Bool(ptr + 996 + 32, false);
        A.store.Bool(ptr + 996 + 25, false);

        A.store.Bool(ptr + 1032 + 21, false);
        A.store.Bool(ptr + 1032 + 14, false);
        A.store.Bool(ptr + 1032 + 0, false);
        A.store.Ref(ptr + 1032 + 4, undefined);
        A.store.Bool(ptr + 1032 + 15, false);
        A.store.Bool(ptr + 1032 + 8, false);
        A.store.Bool(ptr + 1032 + 16, false);
        A.store.Bool(ptr + 1032 + 9, false);
        A.store.Bool(ptr + 1032 + 17, false);
        A.store.Bool(ptr + 1032 + 10, false);
        A.store.Bool(ptr + 1032 + 18, false);
        A.store.Bool(ptr + 1032 + 11, false);
        A.store.Bool(ptr + 1032 + 19, false);
        A.store.Bool(ptr + 1032 + 12, false);
        A.store.Bool(ptr + 1032 + 20, false);
        A.store.Bool(ptr + 1032 + 13, false);

        A.store.Bool(ptr + 1056 + 28, false);
        A.store.Ref(ptr + 1056 + 0, undefined);
        A.store.Ref(ptr + 1056 + 4, undefined);
        A.store.Ref(ptr + 1056 + 8, undefined);
        A.store.Ref(ptr + 1056 + 12, undefined);
        A.store.Ref(ptr + 1056 + 16, undefined);
        A.store.Ref(ptr + 1056 + 20, undefined);
        A.store.Bool(ptr + 1056 + 26, false);
        A.store.Bool(ptr + 1056 + 24, false);
        A.store.Bool(ptr + 1056 + 27, false);
        A.store.Bool(ptr + 1056 + 25, false);

        A.store.Bool(ptr + 1088 + 28, false);
        A.store.Ref(ptr + 1088 + 0, undefined);
        A.store.Ref(ptr + 1088 + 4, undefined);
        A.store.Ref(ptr + 1088 + 8, undefined);
        A.store.Ref(ptr + 1088 + 12, undefined);
        A.store.Ref(ptr + 1088 + 16, undefined);
        A.store.Ref(ptr + 1088 + 20, undefined);
        A.store.Bool(ptr + 1088 + 26, false);
        A.store.Bool(ptr + 1088 + 24, false);
        A.store.Bool(ptr + 1088 + 27, false);
        A.store.Bool(ptr + 1088 + 25, false);

        A.store.Bool(ptr + 1120 + 28, false);
        A.store.Ref(ptr + 1120 + 0, undefined);
        A.store.Ref(ptr + 1120 + 4, undefined);
        A.store.Ref(ptr + 1120 + 8, undefined);
        A.store.Ref(ptr + 1120 + 12, undefined);
        A.store.Ref(ptr + 1120 + 16, undefined);
        A.store.Ref(ptr + 1120 + 20, undefined);
        A.store.Bool(ptr + 1120 + 26, false);
        A.store.Bool(ptr + 1120 + 24, false);
        A.store.Bool(ptr + 1120 + 27, false);
        A.store.Bool(ptr + 1120 + 25, false);

        A.store.Bool(ptr + 1152 + 33, false);
        A.store.Bool(ptr + 1152 + 26, false);
        A.store.Int32(ptr + 1152 + 0, 0);
        A.store.Ref(ptr + 1152 + 4, undefined);
        A.store.Bool(ptr + 1152 + 27, false);
        A.store.Int32(ptr + 1152 + 8, 0);
        A.store.Bool(ptr + 1152 + 28, false);
        A.store.Int32(ptr + 1152 + 12, 0);
        A.store.Bool(ptr + 1152 + 29, false);
        A.store.Int32(ptr + 1152 + 16, 0);
        A.store.Bool(ptr + 1152 + 30, false);
        A.store.Int32(ptr + 1152 + 20, 0);
        A.store.Bool(ptr + 1152 + 31, false);
        A.store.Bool(ptr + 1152 + 24, false);
        A.store.Bool(ptr + 1152 + 32, false);
        A.store.Bool(ptr + 1152 + 25, false);

        A.store.Bool(ptr + 1188 + 33, false);
        A.store.Bool(ptr + 1188 + 26, false);
        A.store.Int32(ptr + 1188 + 0, 0);
        A.store.Ref(ptr + 1188 + 4, undefined);
        A.store.Bool(ptr + 1188 + 27, false);
        A.store.Int32(ptr + 1188 + 8, 0);
        A.store.Bool(ptr + 1188 + 28, false);
        A.store.Int32(ptr + 1188 + 12, 0);
        A.store.Bool(ptr + 1188 + 29, false);
        A.store.Int32(ptr + 1188 + 16, 0);
        A.store.Bool(ptr + 1188 + 30, false);
        A.store.Int32(ptr + 1188 + 20, 0);
        A.store.Bool(ptr + 1188 + 31, false);
        A.store.Bool(ptr + 1188 + 24, false);
        A.store.Bool(ptr + 1188 + 32, false);
        A.store.Bool(ptr + 1188 + 25, false);

        A.store.Bool(ptr + 1224 + 28, false);
        A.store.Ref(ptr + 1224 + 0, undefined);
        A.store.Ref(ptr + 1224 + 4, undefined);
        A.store.Ref(ptr + 1224 + 8, undefined);
        A.store.Ref(ptr + 1224 + 12, undefined);
        A.store.Ref(ptr + 1224 + 16, undefined);
        A.store.Ref(ptr + 1224 + 20, undefined);
        A.store.Bool(ptr + 1224 + 26, false);
        A.store.Bool(ptr + 1224 + 24, false);
        A.store.Bool(ptr + 1224 + 27, false);
        A.store.Bool(ptr + 1224 + 25, false);

        A.store.Bool(ptr + 1256 + 28, false);
        A.store.Ref(ptr + 1256 + 0, undefined);
        A.store.Ref(ptr + 1256 + 4, undefined);
        A.store.Ref(ptr + 1256 + 8, undefined);
        A.store.Ref(ptr + 1256 + 12, undefined);
        A.store.Ref(ptr + 1256 + 16, undefined);
        A.store.Ref(ptr + 1256 + 20, undefined);
        A.store.Bool(ptr + 1256 + 26, false);
        A.store.Bool(ptr + 1256 + 24, false);
        A.store.Bool(ptr + 1256 + 27, false);
        A.store.Bool(ptr + 1256 + 25, false);

        A.store.Bool(ptr + 1288 + 28, false);
        A.store.Ref(ptr + 1288 + 0, undefined);
        A.store.Ref(ptr + 1288 + 4, undefined);
        A.store.Ref(ptr + 1288 + 8, undefined);
        A.store.Ref(ptr + 1288 + 12, undefined);
        A.store.Ref(ptr + 1288 + 16, undefined);
        A.store.Ref(ptr + 1288 + 20, undefined);
        A.store.Bool(ptr + 1288 + 26, false);
        A.store.Bool(ptr + 1288 + 24, false);
        A.store.Bool(ptr + 1288 + 27, false);
        A.store.Bool(ptr + 1288 + 25, false);

        A.store.Bool(ptr + 1320 + 28, false);
        A.store.Ref(ptr + 1320 + 0, undefined);
        A.store.Ref(ptr + 1320 + 4, undefined);
        A.store.Ref(ptr + 1320 + 8, undefined);
        A.store.Ref(ptr + 1320 + 12, undefined);
        A.store.Ref(ptr + 1320 + 16, undefined);
        A.store.Ref(ptr + 1320 + 20, undefined);
        A.store.Bool(ptr + 1320 + 26, false);
        A.store.Bool(ptr + 1320 + 24, false);
        A.store.Bool(ptr + 1320 + 27, false);
        A.store.Bool(ptr + 1320 + 25, false);

        A.store.Bool(ptr + 1352 + 28, false);
        A.store.Ref(ptr + 1352 + 0, undefined);
        A.store.Ref(ptr + 1352 + 4, undefined);
        A.store.Ref(ptr + 1352 + 8, undefined);
        A.store.Ref(ptr + 1352 + 12, undefined);
        A.store.Ref(ptr + 1352 + 16, undefined);
        A.store.Ref(ptr + 1352 + 20, undefined);
        A.store.Bool(ptr + 1352 + 26, false);
        A.store.Bool(ptr + 1352 + 24, false);
        A.store.Bool(ptr + 1352 + 27, false);
        A.store.Bool(ptr + 1352 + 25, false);

        A.store.Bool(ptr + 1384 + 28, false);
        A.store.Ref(ptr + 1384 + 0, undefined);
        A.store.Ref(ptr + 1384 + 4, undefined);
        A.store.Ref(ptr + 1384 + 8, undefined);
        A.store.Ref(ptr + 1384 + 12, undefined);
        A.store.Ref(ptr + 1384 + 16, undefined);
        A.store.Ref(ptr + 1384 + 20, undefined);
        A.store.Bool(ptr + 1384 + 26, false);
        A.store.Bool(ptr + 1384 + 24, false);
        A.store.Bool(ptr + 1384 + 27, false);
        A.store.Bool(ptr + 1384 + 25, false);

        A.store.Bool(ptr + 1416 + 28, false);
        A.store.Ref(ptr + 1416 + 0, undefined);
        A.store.Ref(ptr + 1416 + 4, undefined);
        A.store.Ref(ptr + 1416 + 8, undefined);
        A.store.Ref(ptr + 1416 + 12, undefined);
        A.store.Ref(ptr + 1416 + 16, undefined);
        A.store.Ref(ptr + 1416 + 20, undefined);
        A.store.Bool(ptr + 1416 + 26, false);
        A.store.Bool(ptr + 1416 + 24, false);
        A.store.Bool(ptr + 1416 + 27, false);
        A.store.Bool(ptr + 1416 + 25, false);

        A.store.Bool(ptr + 1448 + 28, false);
        A.store.Ref(ptr + 1448 + 0, undefined);
        A.store.Ref(ptr + 1448 + 4, undefined);
        A.store.Ref(ptr + 1448 + 8, undefined);
        A.store.Ref(ptr + 1448 + 12, undefined);
        A.store.Ref(ptr + 1448 + 16, undefined);
        A.store.Ref(ptr + 1448 + 20, undefined);
        A.store.Bool(ptr + 1448 + 26, false);
        A.store.Bool(ptr + 1448 + 24, false);
        A.store.Bool(ptr + 1448 + 27, false);
        A.store.Bool(ptr + 1448 + 25, false);

        A.store.Bool(ptr + 1480 + 61, false);

        A.store.Bool(ptr + 1480 + 0 + 28, false);
        A.store.Ref(ptr + 1480 + 0 + 0, undefined);
        A.store.Ref(ptr + 1480 + 0 + 4, undefined);
        A.store.Ref(ptr + 1480 + 0 + 8, undefined);
        A.store.Ref(ptr + 1480 + 0 + 12, undefined);
        A.store.Ref(ptr + 1480 + 0 + 16, undefined);
        A.store.Ref(ptr + 1480 + 0 + 20, undefined);
        A.store.Bool(ptr + 1480 + 0 + 26, false);
        A.store.Bool(ptr + 1480 + 0 + 24, false);
        A.store.Bool(ptr + 1480 + 0 + 27, false);
        A.store.Bool(ptr + 1480 + 0 + 25, false);

        A.store.Bool(ptr + 1480 + 32 + 28, false);
        A.store.Ref(ptr + 1480 + 32 + 0, undefined);
        A.store.Ref(ptr + 1480 + 32 + 4, undefined);
        A.store.Ref(ptr + 1480 + 32 + 8, undefined);
        A.store.Ref(ptr + 1480 + 32 + 12, undefined);
        A.store.Ref(ptr + 1480 + 32 + 16, undefined);
        A.store.Ref(ptr + 1480 + 32 + 20, undefined);
        A.store.Bool(ptr + 1480 + 32 + 26, false);
        A.store.Bool(ptr + 1480 + 32 + 24, false);
        A.store.Bool(ptr + 1480 + 32 + 27, false);
        A.store.Bool(ptr + 1480 + 32 + 25, false);
      } else {
        A.store.Bool(ptr + 1542, true);

        if (typeof x["Auth"] === "undefined") {
          A.store.Bool(ptr + 0 + 28, false);
          A.store.Ref(ptr + 0 + 0, undefined);
          A.store.Ref(ptr + 0 + 4, undefined);
          A.store.Ref(ptr + 0 + 8, undefined);
          A.store.Ref(ptr + 0 + 12, undefined);
          A.store.Ref(ptr + 0 + 16, undefined);
          A.store.Ref(ptr + 0 + 20, undefined);
          A.store.Bool(ptr + 0 + 26, false);
          A.store.Bool(ptr + 0 + 24, false);
          A.store.Bool(ptr + 0 + 27, false);
          A.store.Bool(ptr + 0 + 25, false);
        } else {
          A.store.Bool(ptr + 0 + 28, true);
          A.store.Ref(ptr + 0 + 0, x["Auth"]["Active"]);
          A.store.Ref(ptr + 0 + 4, x["Auth"]["Effective"]);
          A.store.Ref(ptr + 0 + 8, x["Auth"]["UserPolicy"]);
          A.store.Ref(ptr + 0 + 12, x["Auth"]["DevicePolicy"]);
          A.store.Ref(ptr + 0 + 16, x["Auth"]["UserSetting"]);
          A.store.Ref(ptr + 0 + 20, x["Auth"]["SharedSetting"]);
          A.store.Bool(ptr + 0 + 26, "UserEditable" in x["Auth"] ? true : false);
          A.store.Bool(ptr + 0 + 24, x["Auth"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 0 + 27, "DeviceEditable" in x["Auth"] ? true : false);
          A.store.Bool(ptr + 0 + 25, x["Auth"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["AuthRetry"] === "undefined") {
          A.store.Bool(ptr + 32 + 28, false);
          A.store.Ref(ptr + 32 + 0, undefined);
          A.store.Ref(ptr + 32 + 4, undefined);
          A.store.Ref(ptr + 32 + 8, undefined);
          A.store.Ref(ptr + 32 + 12, undefined);
          A.store.Ref(ptr + 32 + 16, undefined);
          A.store.Ref(ptr + 32 + 20, undefined);
          A.store.Bool(ptr + 32 + 26, false);
          A.store.Bool(ptr + 32 + 24, false);
          A.store.Bool(ptr + 32 + 27, false);
          A.store.Bool(ptr + 32 + 25, false);
        } else {
          A.store.Bool(ptr + 32 + 28, true);
          A.store.Ref(ptr + 32 + 0, x["AuthRetry"]["Active"]);
          A.store.Ref(ptr + 32 + 4, x["AuthRetry"]["Effective"]);
          A.store.Ref(ptr + 32 + 8, x["AuthRetry"]["UserPolicy"]);
          A.store.Ref(ptr + 32 + 12, x["AuthRetry"]["DevicePolicy"]);
          A.store.Ref(ptr + 32 + 16, x["AuthRetry"]["UserSetting"]);
          A.store.Ref(ptr + 32 + 20, x["AuthRetry"]["SharedSetting"]);
          A.store.Bool(ptr + 32 + 26, "UserEditable" in x["AuthRetry"] ? true : false);
          A.store.Bool(ptr + 32 + 24, x["AuthRetry"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 32 + 27, "DeviceEditable" in x["AuthRetry"] ? true : false);
          A.store.Bool(ptr + 32 + 25, x["AuthRetry"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["AuthNoCache"] === "undefined") {
          A.store.Bool(ptr + 64 + 21, false);
          A.store.Bool(ptr + 64 + 14, false);
          A.store.Bool(ptr + 64 + 0, false);
          A.store.Ref(ptr + 64 + 4, undefined);
          A.store.Bool(ptr + 64 + 15, false);
          A.store.Bool(ptr + 64 + 8, false);
          A.store.Bool(ptr + 64 + 16, false);
          A.store.Bool(ptr + 64 + 9, false);
          A.store.Bool(ptr + 64 + 17, false);
          A.store.Bool(ptr + 64 + 10, false);
          A.store.Bool(ptr + 64 + 18, false);
          A.store.Bool(ptr + 64 + 11, false);
          A.store.Bool(ptr + 64 + 19, false);
          A.store.Bool(ptr + 64 + 12, false);
          A.store.Bool(ptr + 64 + 20, false);
          A.store.Bool(ptr + 64 + 13, false);
        } else {
          A.store.Bool(ptr + 64 + 21, true);
          A.store.Bool(ptr + 64 + 14, "Active" in x["AuthNoCache"] ? true : false);
          A.store.Bool(ptr + 64 + 0, x["AuthNoCache"]["Active"] ? true : false);
          A.store.Ref(ptr + 64 + 4, x["AuthNoCache"]["Effective"]);
          A.store.Bool(ptr + 64 + 15, "UserPolicy" in x["AuthNoCache"] ? true : false);
          A.store.Bool(ptr + 64 + 8, x["AuthNoCache"]["UserPolicy"] ? true : false);
          A.store.Bool(ptr + 64 + 16, "DevicePolicy" in x["AuthNoCache"] ? true : false);
          A.store.Bool(ptr + 64 + 9, x["AuthNoCache"]["DevicePolicy"] ? true : false);
          A.store.Bool(ptr + 64 + 17, "UserSetting" in x["AuthNoCache"] ? true : false);
          A.store.Bool(ptr + 64 + 10, x["AuthNoCache"]["UserSetting"] ? true : false);
          A.store.Bool(ptr + 64 + 18, "SharedSetting" in x["AuthNoCache"] ? true : false);
          A.store.Bool(ptr + 64 + 11, x["AuthNoCache"]["SharedSetting"] ? true : false);
          A.store.Bool(ptr + 64 + 19, "UserEditable" in x["AuthNoCache"] ? true : false);
          A.store.Bool(ptr + 64 + 12, x["AuthNoCache"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 64 + 20, "DeviceEditable" in x["AuthNoCache"] ? true : false);
          A.store.Bool(ptr + 64 + 13, x["AuthNoCache"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["Cipher"] === "undefined") {
          A.store.Bool(ptr + 88 + 28, false);
          A.store.Ref(ptr + 88 + 0, undefined);
          A.store.Ref(ptr + 88 + 4, undefined);
          A.store.Ref(ptr + 88 + 8, undefined);
          A.store.Ref(ptr + 88 + 12, undefined);
          A.store.Ref(ptr + 88 + 16, undefined);
          A.store.Ref(ptr + 88 + 20, undefined);
          A.store.Bool(ptr + 88 + 26, false);
          A.store.Bool(ptr + 88 + 24, false);
          A.store.Bool(ptr + 88 + 27, false);
          A.store.Bool(ptr + 88 + 25, false);
        } else {
          A.store.Bool(ptr + 88 + 28, true);
          A.store.Ref(ptr + 88 + 0, x["Cipher"]["Active"]);
          A.store.Ref(ptr + 88 + 4, x["Cipher"]["Effective"]);
          A.store.Ref(ptr + 88 + 8, x["Cipher"]["UserPolicy"]);
          A.store.Ref(ptr + 88 + 12, x["Cipher"]["DevicePolicy"]);
          A.store.Ref(ptr + 88 + 16, x["Cipher"]["UserSetting"]);
          A.store.Ref(ptr + 88 + 20, x["Cipher"]["SharedSetting"]);
          A.store.Bool(ptr + 88 + 26, "UserEditable" in x["Cipher"] ? true : false);
          A.store.Bool(ptr + 88 + 24, x["Cipher"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 88 + 27, "DeviceEditable" in x["Cipher"] ? true : false);
          A.store.Bool(ptr + 88 + 25, x["Cipher"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["ClientCertPKCS11Id"] === "undefined") {
          A.store.Bool(ptr + 120 + 28, false);
          A.store.Ref(ptr + 120 + 0, undefined);
          A.store.Ref(ptr + 120 + 4, undefined);
          A.store.Ref(ptr + 120 + 8, undefined);
          A.store.Ref(ptr + 120 + 12, undefined);
          A.store.Ref(ptr + 120 + 16, undefined);
          A.store.Ref(ptr + 120 + 20, undefined);
          A.store.Bool(ptr + 120 + 26, false);
          A.store.Bool(ptr + 120 + 24, false);
          A.store.Bool(ptr + 120 + 27, false);
          A.store.Bool(ptr + 120 + 25, false);
        } else {
          A.store.Bool(ptr + 120 + 28, true);
          A.store.Ref(ptr + 120 + 0, x["ClientCertPKCS11Id"]["Active"]);
          A.store.Ref(ptr + 120 + 4, x["ClientCertPKCS11Id"]["Effective"]);
          A.store.Ref(ptr + 120 + 8, x["ClientCertPKCS11Id"]["UserPolicy"]);
          A.store.Ref(ptr + 120 + 12, x["ClientCertPKCS11Id"]["DevicePolicy"]);
          A.store.Ref(ptr + 120 + 16, x["ClientCertPKCS11Id"]["UserSetting"]);
          A.store.Ref(ptr + 120 + 20, x["ClientCertPKCS11Id"]["SharedSetting"]);
          A.store.Bool(ptr + 120 + 26, "UserEditable" in x["ClientCertPKCS11Id"] ? true : false);
          A.store.Bool(ptr + 120 + 24, x["ClientCertPKCS11Id"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 120 + 27, "DeviceEditable" in x["ClientCertPKCS11Id"] ? true : false);
          A.store.Bool(ptr + 120 + 25, x["ClientCertPKCS11Id"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["ClientCertPattern"] === "undefined") {
          A.store.Bool(ptr + 152 + 318, false);

          A.store.Bool(ptr + 152 + 0 + 28, false);
          A.store.Ref(ptr + 152 + 0 + 0, undefined);
          A.store.Ref(ptr + 152 + 0 + 4, undefined);
          A.store.Ref(ptr + 152 + 0 + 8, undefined);
          A.store.Ref(ptr + 152 + 0 + 12, undefined);
          A.store.Ref(ptr + 152 + 0 + 16, undefined);
          A.store.Ref(ptr + 152 + 0 + 20, undefined);
          A.store.Bool(ptr + 152 + 0 + 26, false);
          A.store.Bool(ptr + 152 + 0 + 24, false);
          A.store.Bool(ptr + 152 + 0 + 27, false);
          A.store.Bool(ptr + 152 + 0 + 25, false);

          A.store.Bool(ptr + 152 + 32 + 125, false);

          A.store.Bool(ptr + 152 + 32 + 0 + 28, false);
          A.store.Ref(ptr + 152 + 32 + 0 + 0, undefined);
          A.store.Ref(ptr + 152 + 32 + 0 + 4, undefined);
          A.store.Ref(ptr + 152 + 32 + 0 + 8, undefined);
          A.store.Ref(ptr + 152 + 32 + 0 + 12, undefined);
          A.store.Ref(ptr + 152 + 32 + 0 + 16, undefined);
          A.store.Ref(ptr + 152 + 32 + 0 + 20, undefined);
          A.store.Bool(ptr + 152 + 32 + 0 + 26, false);
          A.store.Bool(ptr + 152 + 32 + 0 + 24, false);
          A.store.Bool(ptr + 152 + 32 + 0 + 27, false);
          A.store.Bool(ptr + 152 + 32 + 0 + 25, false);

          A.store.Bool(ptr + 152 + 32 + 32 + 28, false);
          A.store.Ref(ptr + 152 + 32 + 32 + 0, undefined);
          A.store.Ref(ptr + 152 + 32 + 32 + 4, undefined);
          A.store.Ref(ptr + 152 + 32 + 32 + 8, undefined);
          A.store.Ref(ptr + 152 + 32 + 32 + 12, undefined);
          A.store.Ref(ptr + 152 + 32 + 32 + 16, undefined);
          A.store.Ref(ptr + 152 + 32 + 32 + 20, undefined);
          A.store.Bool(ptr + 152 + 32 + 32 + 26, false);
          A.store.Bool(ptr + 152 + 32 + 32 + 24, false);
          A.store.Bool(ptr + 152 + 32 + 32 + 27, false);
          A.store.Bool(ptr + 152 + 32 + 32 + 25, false);

          A.store.Bool(ptr + 152 + 32 + 64 + 28, false);
          A.store.Ref(ptr + 152 + 32 + 64 + 0, undefined);
          A.store.Ref(ptr + 152 + 32 + 64 + 4, undefined);
          A.store.Ref(ptr + 152 + 32 + 64 + 8, undefined);
          A.store.Ref(ptr + 152 + 32 + 64 + 12, undefined);
          A.store.Ref(ptr + 152 + 32 + 64 + 16, undefined);
          A.store.Ref(ptr + 152 + 32 + 64 + 20, undefined);
          A.store.Bool(ptr + 152 + 32 + 64 + 26, false);
          A.store.Bool(ptr + 152 + 32 + 64 + 24, false);
          A.store.Bool(ptr + 152 + 32 + 64 + 27, false);
          A.store.Bool(ptr + 152 + 32 + 64 + 25, false);

          A.store.Bool(ptr + 152 + 32 + 96 + 28, false);
          A.store.Ref(ptr + 152 + 32 + 96 + 0, undefined);
          A.store.Ref(ptr + 152 + 32 + 96 + 4, undefined);
          A.store.Ref(ptr + 152 + 32 + 96 + 8, undefined);
          A.store.Ref(ptr + 152 + 32 + 96 + 12, undefined);
          A.store.Ref(ptr + 152 + 32 + 96 + 16, undefined);
          A.store.Ref(ptr + 152 + 32 + 96 + 20, undefined);
          A.store.Bool(ptr + 152 + 32 + 96 + 26, false);
          A.store.Bool(ptr + 152 + 32 + 96 + 24, false);
          A.store.Bool(ptr + 152 + 32 + 96 + 27, false);
          A.store.Bool(ptr + 152 + 32 + 96 + 25, false);

          A.store.Bool(ptr + 152 + 160 + 28, false);
          A.store.Ref(ptr + 152 + 160 + 0, undefined);
          A.store.Ref(ptr + 152 + 160 + 4, undefined);
          A.store.Ref(ptr + 152 + 160 + 8, undefined);
          A.store.Ref(ptr + 152 + 160 + 12, undefined);
          A.store.Ref(ptr + 152 + 160 + 16, undefined);
          A.store.Ref(ptr + 152 + 160 + 20, undefined);
          A.store.Bool(ptr + 152 + 160 + 26, false);
          A.store.Bool(ptr + 152 + 160 + 24, false);
          A.store.Bool(ptr + 152 + 160 + 27, false);
          A.store.Bool(ptr + 152 + 160 + 25, false);

          A.store.Bool(ptr + 152 + 192 + 125, false);

          A.store.Bool(ptr + 152 + 192 + 0 + 28, false);
          A.store.Ref(ptr + 152 + 192 + 0 + 0, undefined);
          A.store.Ref(ptr + 152 + 192 + 0 + 4, undefined);
          A.store.Ref(ptr + 152 + 192 + 0 + 8, undefined);
          A.store.Ref(ptr + 152 + 192 + 0 + 12, undefined);
          A.store.Ref(ptr + 152 + 192 + 0 + 16, undefined);
          A.store.Ref(ptr + 152 + 192 + 0 + 20, undefined);
          A.store.Bool(ptr + 152 + 192 + 0 + 26, false);
          A.store.Bool(ptr + 152 + 192 + 0 + 24, false);
          A.store.Bool(ptr + 152 + 192 + 0 + 27, false);
          A.store.Bool(ptr + 152 + 192 + 0 + 25, false);

          A.store.Bool(ptr + 152 + 192 + 32 + 28, false);
          A.store.Ref(ptr + 152 + 192 + 32 + 0, undefined);
          A.store.Ref(ptr + 152 + 192 + 32 + 4, undefined);
          A.store.Ref(ptr + 152 + 192 + 32 + 8, undefined);
          A.store.Ref(ptr + 152 + 192 + 32 + 12, undefined);
          A.store.Ref(ptr + 152 + 192 + 32 + 16, undefined);
          A.store.Ref(ptr + 152 + 192 + 32 + 20, undefined);
          A.store.Bool(ptr + 152 + 192 + 32 + 26, false);
          A.store.Bool(ptr + 152 + 192 + 32 + 24, false);
          A.store.Bool(ptr + 152 + 192 + 32 + 27, false);
          A.store.Bool(ptr + 152 + 192 + 32 + 25, false);

          A.store.Bool(ptr + 152 + 192 + 64 + 28, false);
          A.store.Ref(ptr + 152 + 192 + 64 + 0, undefined);
          A.store.Ref(ptr + 152 + 192 + 64 + 4, undefined);
          A.store.Ref(ptr + 152 + 192 + 64 + 8, undefined);
          A.store.Ref(ptr + 152 + 192 + 64 + 12, undefined);
          A.store.Ref(ptr + 152 + 192 + 64 + 16, undefined);
          A.store.Ref(ptr + 152 + 192 + 64 + 20, undefined);
          A.store.Bool(ptr + 152 + 192 + 64 + 26, false);
          A.store.Bool(ptr + 152 + 192 + 64 + 24, false);
          A.store.Bool(ptr + 152 + 192 + 64 + 27, false);
          A.store.Bool(ptr + 152 + 192 + 64 + 25, false);

          A.store.Bool(ptr + 152 + 192 + 96 + 28, false);
          A.store.Ref(ptr + 152 + 192 + 96 + 0, undefined);
          A.store.Ref(ptr + 152 + 192 + 96 + 4, undefined);
          A.store.Ref(ptr + 152 + 192 + 96 + 8, undefined);
          A.store.Ref(ptr + 152 + 192 + 96 + 12, undefined);
          A.store.Ref(ptr + 152 + 192 + 96 + 16, undefined);
          A.store.Ref(ptr + 152 + 192 + 96 + 20, undefined);
          A.store.Bool(ptr + 152 + 192 + 96 + 26, false);
          A.store.Bool(ptr + 152 + 192 + 96 + 24, false);
          A.store.Bool(ptr + 152 + 192 + 96 + 27, false);
          A.store.Bool(ptr + 152 + 192 + 96 + 25, false);
        } else {
          A.store.Bool(ptr + 152 + 318, true);

          if (typeof x["ClientCertPattern"]["EnrollmentURI"] === "undefined") {
            A.store.Bool(ptr + 152 + 0 + 28, false);
            A.store.Ref(ptr + 152 + 0 + 0, undefined);
            A.store.Ref(ptr + 152 + 0 + 4, undefined);
            A.store.Ref(ptr + 152 + 0 + 8, undefined);
            A.store.Ref(ptr + 152 + 0 + 12, undefined);
            A.store.Ref(ptr + 152 + 0 + 16, undefined);
            A.store.Ref(ptr + 152 + 0 + 20, undefined);
            A.store.Bool(ptr + 152 + 0 + 26, false);
            A.store.Bool(ptr + 152 + 0 + 24, false);
            A.store.Bool(ptr + 152 + 0 + 27, false);
            A.store.Bool(ptr + 152 + 0 + 25, false);
          } else {
            A.store.Bool(ptr + 152 + 0 + 28, true);
            A.store.Ref(ptr + 152 + 0 + 0, x["ClientCertPattern"]["EnrollmentURI"]["Active"]);
            A.store.Ref(ptr + 152 + 0 + 4, x["ClientCertPattern"]["EnrollmentURI"]["Effective"]);
            A.store.Ref(ptr + 152 + 0 + 8, x["ClientCertPattern"]["EnrollmentURI"]["UserPolicy"]);
            A.store.Ref(ptr + 152 + 0 + 12, x["ClientCertPattern"]["EnrollmentURI"]["DevicePolicy"]);
            A.store.Ref(ptr + 152 + 0 + 16, x["ClientCertPattern"]["EnrollmentURI"]["UserSetting"]);
            A.store.Ref(ptr + 152 + 0 + 20, x["ClientCertPattern"]["EnrollmentURI"]["SharedSetting"]);
            A.store.Bool(ptr + 152 + 0 + 26, "UserEditable" in x["ClientCertPattern"]["EnrollmentURI"] ? true : false);
            A.store.Bool(ptr + 152 + 0 + 24, x["ClientCertPattern"]["EnrollmentURI"]["UserEditable"] ? true : false);
            A.store.Bool(
              ptr + 152 + 0 + 27,
              "DeviceEditable" in x["ClientCertPattern"]["EnrollmentURI"] ? true : false
            );
            A.store.Bool(ptr + 152 + 0 + 25, x["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["ClientCertPattern"]["Issuer"] === "undefined") {
            A.store.Bool(ptr + 152 + 32 + 125, false);

            A.store.Bool(ptr + 152 + 32 + 0 + 28, false);
            A.store.Ref(ptr + 152 + 32 + 0 + 0, undefined);
            A.store.Ref(ptr + 152 + 32 + 0 + 4, undefined);
            A.store.Ref(ptr + 152 + 32 + 0 + 8, undefined);
            A.store.Ref(ptr + 152 + 32 + 0 + 12, undefined);
            A.store.Ref(ptr + 152 + 32 + 0 + 16, undefined);
            A.store.Ref(ptr + 152 + 32 + 0 + 20, undefined);
            A.store.Bool(ptr + 152 + 32 + 0 + 26, false);
            A.store.Bool(ptr + 152 + 32 + 0 + 24, false);
            A.store.Bool(ptr + 152 + 32 + 0 + 27, false);
            A.store.Bool(ptr + 152 + 32 + 0 + 25, false);

            A.store.Bool(ptr + 152 + 32 + 32 + 28, false);
            A.store.Ref(ptr + 152 + 32 + 32 + 0, undefined);
            A.store.Ref(ptr + 152 + 32 + 32 + 4, undefined);
            A.store.Ref(ptr + 152 + 32 + 32 + 8, undefined);
            A.store.Ref(ptr + 152 + 32 + 32 + 12, undefined);
            A.store.Ref(ptr + 152 + 32 + 32 + 16, undefined);
            A.store.Ref(ptr + 152 + 32 + 32 + 20, undefined);
            A.store.Bool(ptr + 152 + 32 + 32 + 26, false);
            A.store.Bool(ptr + 152 + 32 + 32 + 24, false);
            A.store.Bool(ptr + 152 + 32 + 32 + 27, false);
            A.store.Bool(ptr + 152 + 32 + 32 + 25, false);

            A.store.Bool(ptr + 152 + 32 + 64 + 28, false);
            A.store.Ref(ptr + 152 + 32 + 64 + 0, undefined);
            A.store.Ref(ptr + 152 + 32 + 64 + 4, undefined);
            A.store.Ref(ptr + 152 + 32 + 64 + 8, undefined);
            A.store.Ref(ptr + 152 + 32 + 64 + 12, undefined);
            A.store.Ref(ptr + 152 + 32 + 64 + 16, undefined);
            A.store.Ref(ptr + 152 + 32 + 64 + 20, undefined);
            A.store.Bool(ptr + 152 + 32 + 64 + 26, false);
            A.store.Bool(ptr + 152 + 32 + 64 + 24, false);
            A.store.Bool(ptr + 152 + 32 + 64 + 27, false);
            A.store.Bool(ptr + 152 + 32 + 64 + 25, false);

            A.store.Bool(ptr + 152 + 32 + 96 + 28, false);
            A.store.Ref(ptr + 152 + 32 + 96 + 0, undefined);
            A.store.Ref(ptr + 152 + 32 + 96 + 4, undefined);
            A.store.Ref(ptr + 152 + 32 + 96 + 8, undefined);
            A.store.Ref(ptr + 152 + 32 + 96 + 12, undefined);
            A.store.Ref(ptr + 152 + 32 + 96 + 16, undefined);
            A.store.Ref(ptr + 152 + 32 + 96 + 20, undefined);
            A.store.Bool(ptr + 152 + 32 + 96 + 26, false);
            A.store.Bool(ptr + 152 + 32 + 96 + 24, false);
            A.store.Bool(ptr + 152 + 32 + 96 + 27, false);
            A.store.Bool(ptr + 152 + 32 + 96 + 25, false);
          } else {
            A.store.Bool(ptr + 152 + 32 + 125, true);

            if (typeof x["ClientCertPattern"]["Issuer"]["CommonName"] === "undefined") {
              A.store.Bool(ptr + 152 + 32 + 0 + 28, false);
              A.store.Ref(ptr + 152 + 32 + 0 + 0, undefined);
              A.store.Ref(ptr + 152 + 32 + 0 + 4, undefined);
              A.store.Ref(ptr + 152 + 32 + 0 + 8, undefined);
              A.store.Ref(ptr + 152 + 32 + 0 + 12, undefined);
              A.store.Ref(ptr + 152 + 32 + 0 + 16, undefined);
              A.store.Ref(ptr + 152 + 32 + 0 + 20, undefined);
              A.store.Bool(ptr + 152 + 32 + 0 + 26, false);
              A.store.Bool(ptr + 152 + 32 + 0 + 24, false);
              A.store.Bool(ptr + 152 + 32 + 0 + 27, false);
              A.store.Bool(ptr + 152 + 32 + 0 + 25, false);
            } else {
              A.store.Bool(ptr + 152 + 32 + 0 + 28, true);
              A.store.Ref(ptr + 152 + 32 + 0 + 0, x["ClientCertPattern"]["Issuer"]["CommonName"]["Active"]);
              A.store.Ref(ptr + 152 + 32 + 0 + 4, x["ClientCertPattern"]["Issuer"]["CommonName"]["Effective"]);
              A.store.Ref(ptr + 152 + 32 + 0 + 8, x["ClientCertPattern"]["Issuer"]["CommonName"]["UserPolicy"]);
              A.store.Ref(ptr + 152 + 32 + 0 + 12, x["ClientCertPattern"]["Issuer"]["CommonName"]["DevicePolicy"]);
              A.store.Ref(ptr + 152 + 32 + 0 + 16, x["ClientCertPattern"]["Issuer"]["CommonName"]["UserSetting"]);
              A.store.Ref(ptr + 152 + 32 + 0 + 20, x["ClientCertPattern"]["Issuer"]["CommonName"]["SharedSetting"]);
              A.store.Bool(
                ptr + 152 + 32 + 0 + 26,
                "UserEditable" in x["ClientCertPattern"]["Issuer"]["CommonName"] ? true : false
              );
              A.store.Bool(
                ptr + 152 + 32 + 0 + 24,
                x["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 152 + 32 + 0 + 27,
                "DeviceEditable" in x["ClientCertPattern"]["Issuer"]["CommonName"] ? true : false
              );
              A.store.Bool(
                ptr + 152 + 32 + 0 + 25,
                x["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["ClientCertPattern"]["Issuer"]["Locality"] === "undefined") {
              A.store.Bool(ptr + 152 + 32 + 32 + 28, false);
              A.store.Ref(ptr + 152 + 32 + 32 + 0, undefined);
              A.store.Ref(ptr + 152 + 32 + 32 + 4, undefined);
              A.store.Ref(ptr + 152 + 32 + 32 + 8, undefined);
              A.store.Ref(ptr + 152 + 32 + 32 + 12, undefined);
              A.store.Ref(ptr + 152 + 32 + 32 + 16, undefined);
              A.store.Ref(ptr + 152 + 32 + 32 + 20, undefined);
              A.store.Bool(ptr + 152 + 32 + 32 + 26, false);
              A.store.Bool(ptr + 152 + 32 + 32 + 24, false);
              A.store.Bool(ptr + 152 + 32 + 32 + 27, false);
              A.store.Bool(ptr + 152 + 32 + 32 + 25, false);
            } else {
              A.store.Bool(ptr + 152 + 32 + 32 + 28, true);
              A.store.Ref(ptr + 152 + 32 + 32 + 0, x["ClientCertPattern"]["Issuer"]["Locality"]["Active"]);
              A.store.Ref(ptr + 152 + 32 + 32 + 4, x["ClientCertPattern"]["Issuer"]["Locality"]["Effective"]);
              A.store.Ref(ptr + 152 + 32 + 32 + 8, x["ClientCertPattern"]["Issuer"]["Locality"]["UserPolicy"]);
              A.store.Ref(ptr + 152 + 32 + 32 + 12, x["ClientCertPattern"]["Issuer"]["Locality"]["DevicePolicy"]);
              A.store.Ref(ptr + 152 + 32 + 32 + 16, x["ClientCertPattern"]["Issuer"]["Locality"]["UserSetting"]);
              A.store.Ref(ptr + 152 + 32 + 32 + 20, x["ClientCertPattern"]["Issuer"]["Locality"]["SharedSetting"]);
              A.store.Bool(
                ptr + 152 + 32 + 32 + 26,
                "UserEditable" in x["ClientCertPattern"]["Issuer"]["Locality"] ? true : false
              );
              A.store.Bool(
                ptr + 152 + 32 + 32 + 24,
                x["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 152 + 32 + 32 + 27,
                "DeviceEditable" in x["ClientCertPattern"]["Issuer"]["Locality"] ? true : false
              );
              A.store.Bool(
                ptr + 152 + 32 + 32 + 25,
                x["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["ClientCertPattern"]["Issuer"]["Organization"] === "undefined") {
              A.store.Bool(ptr + 152 + 32 + 64 + 28, false);
              A.store.Ref(ptr + 152 + 32 + 64 + 0, undefined);
              A.store.Ref(ptr + 152 + 32 + 64 + 4, undefined);
              A.store.Ref(ptr + 152 + 32 + 64 + 8, undefined);
              A.store.Ref(ptr + 152 + 32 + 64 + 12, undefined);
              A.store.Ref(ptr + 152 + 32 + 64 + 16, undefined);
              A.store.Ref(ptr + 152 + 32 + 64 + 20, undefined);
              A.store.Bool(ptr + 152 + 32 + 64 + 26, false);
              A.store.Bool(ptr + 152 + 32 + 64 + 24, false);
              A.store.Bool(ptr + 152 + 32 + 64 + 27, false);
              A.store.Bool(ptr + 152 + 32 + 64 + 25, false);
            } else {
              A.store.Bool(ptr + 152 + 32 + 64 + 28, true);
              A.store.Ref(ptr + 152 + 32 + 64 + 0, x["ClientCertPattern"]["Issuer"]["Organization"]["Active"]);
              A.store.Ref(ptr + 152 + 32 + 64 + 4, x["ClientCertPattern"]["Issuer"]["Organization"]["Effective"]);
              A.store.Ref(ptr + 152 + 32 + 64 + 8, x["ClientCertPattern"]["Issuer"]["Organization"]["UserPolicy"]);
              A.store.Ref(ptr + 152 + 32 + 64 + 12, x["ClientCertPattern"]["Issuer"]["Organization"]["DevicePolicy"]);
              A.store.Ref(ptr + 152 + 32 + 64 + 16, x["ClientCertPattern"]["Issuer"]["Organization"]["UserSetting"]);
              A.store.Ref(ptr + 152 + 32 + 64 + 20, x["ClientCertPattern"]["Issuer"]["Organization"]["SharedSetting"]);
              A.store.Bool(
                ptr + 152 + 32 + 64 + 26,
                "UserEditable" in x["ClientCertPattern"]["Issuer"]["Organization"] ? true : false
              );
              A.store.Bool(
                ptr + 152 + 32 + 64 + 24,
                x["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 152 + 32 + 64 + 27,
                "DeviceEditable" in x["ClientCertPattern"]["Issuer"]["Organization"] ? true : false
              );
              A.store.Bool(
                ptr + 152 + 32 + 64 + 25,
                x["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] === "undefined") {
              A.store.Bool(ptr + 152 + 32 + 96 + 28, false);
              A.store.Ref(ptr + 152 + 32 + 96 + 0, undefined);
              A.store.Ref(ptr + 152 + 32 + 96 + 4, undefined);
              A.store.Ref(ptr + 152 + 32 + 96 + 8, undefined);
              A.store.Ref(ptr + 152 + 32 + 96 + 12, undefined);
              A.store.Ref(ptr + 152 + 32 + 96 + 16, undefined);
              A.store.Ref(ptr + 152 + 32 + 96 + 20, undefined);
              A.store.Bool(ptr + 152 + 32 + 96 + 26, false);
              A.store.Bool(ptr + 152 + 32 + 96 + 24, false);
              A.store.Bool(ptr + 152 + 32 + 96 + 27, false);
              A.store.Bool(ptr + 152 + 32 + 96 + 25, false);
            } else {
              A.store.Bool(ptr + 152 + 32 + 96 + 28, true);
              A.store.Ref(ptr + 152 + 32 + 96 + 0, x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Active"]);
              A.store.Ref(ptr + 152 + 32 + 96 + 4, x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Effective"]);
              A.store.Ref(
                ptr + 152 + 32 + 96 + 8,
                x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserPolicy"]
              );
              A.store.Ref(
                ptr + 152 + 32 + 96 + 12,
                x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DevicePolicy"]
              );
              A.store.Ref(
                ptr + 152 + 32 + 96 + 16,
                x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserSetting"]
              );
              A.store.Ref(
                ptr + 152 + 32 + 96 + 20,
                x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["SharedSetting"]
              );
              A.store.Bool(
                ptr + 152 + 32 + 96 + 26,
                "UserEditable" in x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] ? true : false
              );
              A.store.Bool(
                ptr + 152 + 32 + 96 + 24,
                x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 152 + 32 + 96 + 27,
                "DeviceEditable" in x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] ? true : false
              );
              A.store.Bool(
                ptr + 152 + 32 + 96 + 25,
                x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"] ? true : false
              );
            }
          }

          if (typeof x["ClientCertPattern"]["IssuerCARef"] === "undefined") {
            A.store.Bool(ptr + 152 + 160 + 28, false);
            A.store.Ref(ptr + 152 + 160 + 0, undefined);
            A.store.Ref(ptr + 152 + 160 + 4, undefined);
            A.store.Ref(ptr + 152 + 160 + 8, undefined);
            A.store.Ref(ptr + 152 + 160 + 12, undefined);
            A.store.Ref(ptr + 152 + 160 + 16, undefined);
            A.store.Ref(ptr + 152 + 160 + 20, undefined);
            A.store.Bool(ptr + 152 + 160 + 26, false);
            A.store.Bool(ptr + 152 + 160 + 24, false);
            A.store.Bool(ptr + 152 + 160 + 27, false);
            A.store.Bool(ptr + 152 + 160 + 25, false);
          } else {
            A.store.Bool(ptr + 152 + 160 + 28, true);
            A.store.Ref(ptr + 152 + 160 + 0, x["ClientCertPattern"]["IssuerCARef"]["Active"]);
            A.store.Ref(ptr + 152 + 160 + 4, x["ClientCertPattern"]["IssuerCARef"]["Effective"]);
            A.store.Ref(ptr + 152 + 160 + 8, x["ClientCertPattern"]["IssuerCARef"]["UserPolicy"]);
            A.store.Ref(ptr + 152 + 160 + 12, x["ClientCertPattern"]["IssuerCARef"]["DevicePolicy"]);
            A.store.Ref(ptr + 152 + 160 + 16, x["ClientCertPattern"]["IssuerCARef"]["UserSetting"]);
            A.store.Ref(ptr + 152 + 160 + 20, x["ClientCertPattern"]["IssuerCARef"]["SharedSetting"]);
            A.store.Bool(ptr + 152 + 160 + 26, "UserEditable" in x["ClientCertPattern"]["IssuerCARef"] ? true : false);
            A.store.Bool(ptr + 152 + 160 + 24, x["ClientCertPattern"]["IssuerCARef"]["UserEditable"] ? true : false);
            A.store.Bool(
              ptr + 152 + 160 + 27,
              "DeviceEditable" in x["ClientCertPattern"]["IssuerCARef"] ? true : false
            );
            A.store.Bool(ptr + 152 + 160 + 25, x["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["ClientCertPattern"]["Subject"] === "undefined") {
            A.store.Bool(ptr + 152 + 192 + 125, false);

            A.store.Bool(ptr + 152 + 192 + 0 + 28, false);
            A.store.Ref(ptr + 152 + 192 + 0 + 0, undefined);
            A.store.Ref(ptr + 152 + 192 + 0 + 4, undefined);
            A.store.Ref(ptr + 152 + 192 + 0 + 8, undefined);
            A.store.Ref(ptr + 152 + 192 + 0 + 12, undefined);
            A.store.Ref(ptr + 152 + 192 + 0 + 16, undefined);
            A.store.Ref(ptr + 152 + 192 + 0 + 20, undefined);
            A.store.Bool(ptr + 152 + 192 + 0 + 26, false);
            A.store.Bool(ptr + 152 + 192 + 0 + 24, false);
            A.store.Bool(ptr + 152 + 192 + 0 + 27, false);
            A.store.Bool(ptr + 152 + 192 + 0 + 25, false);

            A.store.Bool(ptr + 152 + 192 + 32 + 28, false);
            A.store.Ref(ptr + 152 + 192 + 32 + 0, undefined);
            A.store.Ref(ptr + 152 + 192 + 32 + 4, undefined);
            A.store.Ref(ptr + 152 + 192 + 32 + 8, undefined);
            A.store.Ref(ptr + 152 + 192 + 32 + 12, undefined);
            A.store.Ref(ptr + 152 + 192 + 32 + 16, undefined);
            A.store.Ref(ptr + 152 + 192 + 32 + 20, undefined);
            A.store.Bool(ptr + 152 + 192 + 32 + 26, false);
            A.store.Bool(ptr + 152 + 192 + 32 + 24, false);
            A.store.Bool(ptr + 152 + 192 + 32 + 27, false);
            A.store.Bool(ptr + 152 + 192 + 32 + 25, false);

            A.store.Bool(ptr + 152 + 192 + 64 + 28, false);
            A.store.Ref(ptr + 152 + 192 + 64 + 0, undefined);
            A.store.Ref(ptr + 152 + 192 + 64 + 4, undefined);
            A.store.Ref(ptr + 152 + 192 + 64 + 8, undefined);
            A.store.Ref(ptr + 152 + 192 + 64 + 12, undefined);
            A.store.Ref(ptr + 152 + 192 + 64 + 16, undefined);
            A.store.Ref(ptr + 152 + 192 + 64 + 20, undefined);
            A.store.Bool(ptr + 152 + 192 + 64 + 26, false);
            A.store.Bool(ptr + 152 + 192 + 64 + 24, false);
            A.store.Bool(ptr + 152 + 192 + 64 + 27, false);
            A.store.Bool(ptr + 152 + 192 + 64 + 25, false);

            A.store.Bool(ptr + 152 + 192 + 96 + 28, false);
            A.store.Ref(ptr + 152 + 192 + 96 + 0, undefined);
            A.store.Ref(ptr + 152 + 192 + 96 + 4, undefined);
            A.store.Ref(ptr + 152 + 192 + 96 + 8, undefined);
            A.store.Ref(ptr + 152 + 192 + 96 + 12, undefined);
            A.store.Ref(ptr + 152 + 192 + 96 + 16, undefined);
            A.store.Ref(ptr + 152 + 192 + 96 + 20, undefined);
            A.store.Bool(ptr + 152 + 192 + 96 + 26, false);
            A.store.Bool(ptr + 152 + 192 + 96 + 24, false);
            A.store.Bool(ptr + 152 + 192 + 96 + 27, false);
            A.store.Bool(ptr + 152 + 192 + 96 + 25, false);
          } else {
            A.store.Bool(ptr + 152 + 192 + 125, true);

            if (typeof x["ClientCertPattern"]["Subject"]["CommonName"] === "undefined") {
              A.store.Bool(ptr + 152 + 192 + 0 + 28, false);
              A.store.Ref(ptr + 152 + 192 + 0 + 0, undefined);
              A.store.Ref(ptr + 152 + 192 + 0 + 4, undefined);
              A.store.Ref(ptr + 152 + 192 + 0 + 8, undefined);
              A.store.Ref(ptr + 152 + 192 + 0 + 12, undefined);
              A.store.Ref(ptr + 152 + 192 + 0 + 16, undefined);
              A.store.Ref(ptr + 152 + 192 + 0 + 20, undefined);
              A.store.Bool(ptr + 152 + 192 + 0 + 26, false);
              A.store.Bool(ptr + 152 + 192 + 0 + 24, false);
              A.store.Bool(ptr + 152 + 192 + 0 + 27, false);
              A.store.Bool(ptr + 152 + 192 + 0 + 25, false);
            } else {
              A.store.Bool(ptr + 152 + 192 + 0 + 28, true);
              A.store.Ref(ptr + 152 + 192 + 0 + 0, x["ClientCertPattern"]["Subject"]["CommonName"]["Active"]);
              A.store.Ref(ptr + 152 + 192 + 0 + 4, x["ClientCertPattern"]["Subject"]["CommonName"]["Effective"]);
              A.store.Ref(ptr + 152 + 192 + 0 + 8, x["ClientCertPattern"]["Subject"]["CommonName"]["UserPolicy"]);
              A.store.Ref(ptr + 152 + 192 + 0 + 12, x["ClientCertPattern"]["Subject"]["CommonName"]["DevicePolicy"]);
              A.store.Ref(ptr + 152 + 192 + 0 + 16, x["ClientCertPattern"]["Subject"]["CommonName"]["UserSetting"]);
              A.store.Ref(ptr + 152 + 192 + 0 + 20, x["ClientCertPattern"]["Subject"]["CommonName"]["SharedSetting"]);
              A.store.Bool(
                ptr + 152 + 192 + 0 + 26,
                "UserEditable" in x["ClientCertPattern"]["Subject"]["CommonName"] ? true : false
              );
              A.store.Bool(
                ptr + 152 + 192 + 0 + 24,
                x["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 152 + 192 + 0 + 27,
                "DeviceEditable" in x["ClientCertPattern"]["Subject"]["CommonName"] ? true : false
              );
              A.store.Bool(
                ptr + 152 + 192 + 0 + 25,
                x["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["ClientCertPattern"]["Subject"]["Locality"] === "undefined") {
              A.store.Bool(ptr + 152 + 192 + 32 + 28, false);
              A.store.Ref(ptr + 152 + 192 + 32 + 0, undefined);
              A.store.Ref(ptr + 152 + 192 + 32 + 4, undefined);
              A.store.Ref(ptr + 152 + 192 + 32 + 8, undefined);
              A.store.Ref(ptr + 152 + 192 + 32 + 12, undefined);
              A.store.Ref(ptr + 152 + 192 + 32 + 16, undefined);
              A.store.Ref(ptr + 152 + 192 + 32 + 20, undefined);
              A.store.Bool(ptr + 152 + 192 + 32 + 26, false);
              A.store.Bool(ptr + 152 + 192 + 32 + 24, false);
              A.store.Bool(ptr + 152 + 192 + 32 + 27, false);
              A.store.Bool(ptr + 152 + 192 + 32 + 25, false);
            } else {
              A.store.Bool(ptr + 152 + 192 + 32 + 28, true);
              A.store.Ref(ptr + 152 + 192 + 32 + 0, x["ClientCertPattern"]["Subject"]["Locality"]["Active"]);
              A.store.Ref(ptr + 152 + 192 + 32 + 4, x["ClientCertPattern"]["Subject"]["Locality"]["Effective"]);
              A.store.Ref(ptr + 152 + 192 + 32 + 8, x["ClientCertPattern"]["Subject"]["Locality"]["UserPolicy"]);
              A.store.Ref(ptr + 152 + 192 + 32 + 12, x["ClientCertPattern"]["Subject"]["Locality"]["DevicePolicy"]);
              A.store.Ref(ptr + 152 + 192 + 32 + 16, x["ClientCertPattern"]["Subject"]["Locality"]["UserSetting"]);
              A.store.Ref(ptr + 152 + 192 + 32 + 20, x["ClientCertPattern"]["Subject"]["Locality"]["SharedSetting"]);
              A.store.Bool(
                ptr + 152 + 192 + 32 + 26,
                "UserEditable" in x["ClientCertPattern"]["Subject"]["Locality"] ? true : false
              );
              A.store.Bool(
                ptr + 152 + 192 + 32 + 24,
                x["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 152 + 192 + 32 + 27,
                "DeviceEditable" in x["ClientCertPattern"]["Subject"]["Locality"] ? true : false
              );
              A.store.Bool(
                ptr + 152 + 192 + 32 + 25,
                x["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["ClientCertPattern"]["Subject"]["Organization"] === "undefined") {
              A.store.Bool(ptr + 152 + 192 + 64 + 28, false);
              A.store.Ref(ptr + 152 + 192 + 64 + 0, undefined);
              A.store.Ref(ptr + 152 + 192 + 64 + 4, undefined);
              A.store.Ref(ptr + 152 + 192 + 64 + 8, undefined);
              A.store.Ref(ptr + 152 + 192 + 64 + 12, undefined);
              A.store.Ref(ptr + 152 + 192 + 64 + 16, undefined);
              A.store.Ref(ptr + 152 + 192 + 64 + 20, undefined);
              A.store.Bool(ptr + 152 + 192 + 64 + 26, false);
              A.store.Bool(ptr + 152 + 192 + 64 + 24, false);
              A.store.Bool(ptr + 152 + 192 + 64 + 27, false);
              A.store.Bool(ptr + 152 + 192 + 64 + 25, false);
            } else {
              A.store.Bool(ptr + 152 + 192 + 64 + 28, true);
              A.store.Ref(ptr + 152 + 192 + 64 + 0, x["ClientCertPattern"]["Subject"]["Organization"]["Active"]);
              A.store.Ref(ptr + 152 + 192 + 64 + 4, x["ClientCertPattern"]["Subject"]["Organization"]["Effective"]);
              A.store.Ref(ptr + 152 + 192 + 64 + 8, x["ClientCertPattern"]["Subject"]["Organization"]["UserPolicy"]);
              A.store.Ref(ptr + 152 + 192 + 64 + 12, x["ClientCertPattern"]["Subject"]["Organization"]["DevicePolicy"]);
              A.store.Ref(ptr + 152 + 192 + 64 + 16, x["ClientCertPattern"]["Subject"]["Organization"]["UserSetting"]);
              A.store.Ref(
                ptr + 152 + 192 + 64 + 20,
                x["ClientCertPattern"]["Subject"]["Organization"]["SharedSetting"]
              );
              A.store.Bool(
                ptr + 152 + 192 + 64 + 26,
                "UserEditable" in x["ClientCertPattern"]["Subject"]["Organization"] ? true : false
              );
              A.store.Bool(
                ptr + 152 + 192 + 64 + 24,
                x["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 152 + 192 + 64 + 27,
                "DeviceEditable" in x["ClientCertPattern"]["Subject"]["Organization"] ? true : false
              );
              A.store.Bool(
                ptr + 152 + 192 + 64 + 25,
                x["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["ClientCertPattern"]["Subject"]["OrganizationalUnit"] === "undefined") {
              A.store.Bool(ptr + 152 + 192 + 96 + 28, false);
              A.store.Ref(ptr + 152 + 192 + 96 + 0, undefined);
              A.store.Ref(ptr + 152 + 192 + 96 + 4, undefined);
              A.store.Ref(ptr + 152 + 192 + 96 + 8, undefined);
              A.store.Ref(ptr + 152 + 192 + 96 + 12, undefined);
              A.store.Ref(ptr + 152 + 192 + 96 + 16, undefined);
              A.store.Ref(ptr + 152 + 192 + 96 + 20, undefined);
              A.store.Bool(ptr + 152 + 192 + 96 + 26, false);
              A.store.Bool(ptr + 152 + 192 + 96 + 24, false);
              A.store.Bool(ptr + 152 + 192 + 96 + 27, false);
              A.store.Bool(ptr + 152 + 192 + 96 + 25, false);
            } else {
              A.store.Bool(ptr + 152 + 192 + 96 + 28, true);
              A.store.Ref(ptr + 152 + 192 + 96 + 0, x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Active"]);
              A.store.Ref(
                ptr + 152 + 192 + 96 + 4,
                x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Effective"]
              );
              A.store.Ref(
                ptr + 152 + 192 + 96 + 8,
                x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserPolicy"]
              );
              A.store.Ref(
                ptr + 152 + 192 + 96 + 12,
                x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DevicePolicy"]
              );
              A.store.Ref(
                ptr + 152 + 192 + 96 + 16,
                x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserSetting"]
              );
              A.store.Ref(
                ptr + 152 + 192 + 96 + 20,
                x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["SharedSetting"]
              );
              A.store.Bool(
                ptr + 152 + 192 + 96 + 26,
                "UserEditable" in x["ClientCertPattern"]["Subject"]["OrganizationalUnit"] ? true : false
              );
              A.store.Bool(
                ptr + 152 + 192 + 96 + 24,
                x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 152 + 192 + 96 + 27,
                "DeviceEditable" in x["ClientCertPattern"]["Subject"]["OrganizationalUnit"] ? true : false
              );
              A.store.Bool(
                ptr + 152 + 192 + 96 + 25,
                x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"] ? true : false
              );
            }
          }
        }

        if (typeof x["ClientCertProvisioningProfileId"] === "undefined") {
          A.store.Bool(ptr + 472 + 28, false);
          A.store.Ref(ptr + 472 + 0, undefined);
          A.store.Ref(ptr + 472 + 4, undefined);
          A.store.Ref(ptr + 472 + 8, undefined);
          A.store.Ref(ptr + 472 + 12, undefined);
          A.store.Ref(ptr + 472 + 16, undefined);
          A.store.Ref(ptr + 472 + 20, undefined);
          A.store.Bool(ptr + 472 + 26, false);
          A.store.Bool(ptr + 472 + 24, false);
          A.store.Bool(ptr + 472 + 27, false);
          A.store.Bool(ptr + 472 + 25, false);
        } else {
          A.store.Bool(ptr + 472 + 28, true);
          A.store.Ref(ptr + 472 + 0, x["ClientCertProvisioningProfileId"]["Active"]);
          A.store.Ref(ptr + 472 + 4, x["ClientCertProvisioningProfileId"]["Effective"]);
          A.store.Ref(ptr + 472 + 8, x["ClientCertProvisioningProfileId"]["UserPolicy"]);
          A.store.Ref(ptr + 472 + 12, x["ClientCertProvisioningProfileId"]["DevicePolicy"]);
          A.store.Ref(ptr + 472 + 16, x["ClientCertProvisioningProfileId"]["UserSetting"]);
          A.store.Ref(ptr + 472 + 20, x["ClientCertProvisioningProfileId"]["SharedSetting"]);
          A.store.Bool(ptr + 472 + 26, "UserEditable" in x["ClientCertProvisioningProfileId"] ? true : false);
          A.store.Bool(ptr + 472 + 24, x["ClientCertProvisioningProfileId"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 472 + 27, "DeviceEditable" in x["ClientCertProvisioningProfileId"] ? true : false);
          A.store.Bool(ptr + 472 + 25, x["ClientCertProvisioningProfileId"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["ClientCertRef"] === "undefined") {
          A.store.Bool(ptr + 504 + 28, false);
          A.store.Ref(ptr + 504 + 0, undefined);
          A.store.Ref(ptr + 504 + 4, undefined);
          A.store.Ref(ptr + 504 + 8, undefined);
          A.store.Ref(ptr + 504 + 12, undefined);
          A.store.Ref(ptr + 504 + 16, undefined);
          A.store.Ref(ptr + 504 + 20, undefined);
          A.store.Bool(ptr + 504 + 26, false);
          A.store.Bool(ptr + 504 + 24, false);
          A.store.Bool(ptr + 504 + 27, false);
          A.store.Bool(ptr + 504 + 25, false);
        } else {
          A.store.Bool(ptr + 504 + 28, true);
          A.store.Ref(ptr + 504 + 0, x["ClientCertRef"]["Active"]);
          A.store.Ref(ptr + 504 + 4, x["ClientCertRef"]["Effective"]);
          A.store.Ref(ptr + 504 + 8, x["ClientCertRef"]["UserPolicy"]);
          A.store.Ref(ptr + 504 + 12, x["ClientCertRef"]["DevicePolicy"]);
          A.store.Ref(ptr + 504 + 16, x["ClientCertRef"]["UserSetting"]);
          A.store.Ref(ptr + 504 + 20, x["ClientCertRef"]["SharedSetting"]);
          A.store.Bool(ptr + 504 + 26, "UserEditable" in x["ClientCertRef"] ? true : false);
          A.store.Bool(ptr + 504 + 24, x["ClientCertRef"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 504 + 27, "DeviceEditable" in x["ClientCertRef"] ? true : false);
          A.store.Bool(ptr + 504 + 25, x["ClientCertRef"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["ClientCertType"] === "undefined") {
          A.store.Bool(ptr + 536 + 28, false);
          A.store.Ref(ptr + 536 + 0, undefined);
          A.store.Ref(ptr + 536 + 4, undefined);
          A.store.Ref(ptr + 536 + 8, undefined);
          A.store.Ref(ptr + 536 + 12, undefined);
          A.store.Ref(ptr + 536 + 16, undefined);
          A.store.Ref(ptr + 536 + 20, undefined);
          A.store.Bool(ptr + 536 + 26, false);
          A.store.Bool(ptr + 536 + 24, false);
          A.store.Bool(ptr + 536 + 27, false);
          A.store.Bool(ptr + 536 + 25, false);
        } else {
          A.store.Bool(ptr + 536 + 28, true);
          A.store.Ref(ptr + 536 + 0, x["ClientCertType"]["Active"]);
          A.store.Ref(ptr + 536 + 4, x["ClientCertType"]["Effective"]);
          A.store.Ref(ptr + 536 + 8, x["ClientCertType"]["UserPolicy"]);
          A.store.Ref(ptr + 536 + 12, x["ClientCertType"]["DevicePolicy"]);
          A.store.Ref(ptr + 536 + 16, x["ClientCertType"]["UserSetting"]);
          A.store.Ref(ptr + 536 + 20, x["ClientCertType"]["SharedSetting"]);
          A.store.Bool(ptr + 536 + 26, "UserEditable" in x["ClientCertType"] ? true : false);
          A.store.Bool(ptr + 536 + 24, x["ClientCertType"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 536 + 27, "DeviceEditable" in x["ClientCertType"] ? true : false);
          A.store.Bool(ptr + 536 + 25, x["ClientCertType"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["CompLZO"] === "undefined") {
          A.store.Bool(ptr + 568 + 28, false);
          A.store.Ref(ptr + 568 + 0, undefined);
          A.store.Ref(ptr + 568 + 4, undefined);
          A.store.Ref(ptr + 568 + 8, undefined);
          A.store.Ref(ptr + 568 + 12, undefined);
          A.store.Ref(ptr + 568 + 16, undefined);
          A.store.Ref(ptr + 568 + 20, undefined);
          A.store.Bool(ptr + 568 + 26, false);
          A.store.Bool(ptr + 568 + 24, false);
          A.store.Bool(ptr + 568 + 27, false);
          A.store.Bool(ptr + 568 + 25, false);
        } else {
          A.store.Bool(ptr + 568 + 28, true);
          A.store.Ref(ptr + 568 + 0, x["CompLZO"]["Active"]);
          A.store.Ref(ptr + 568 + 4, x["CompLZO"]["Effective"]);
          A.store.Ref(ptr + 568 + 8, x["CompLZO"]["UserPolicy"]);
          A.store.Ref(ptr + 568 + 12, x["CompLZO"]["DevicePolicy"]);
          A.store.Ref(ptr + 568 + 16, x["CompLZO"]["UserSetting"]);
          A.store.Ref(ptr + 568 + 20, x["CompLZO"]["SharedSetting"]);
          A.store.Bool(ptr + 568 + 26, "UserEditable" in x["CompLZO"] ? true : false);
          A.store.Bool(ptr + 568 + 24, x["CompLZO"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 568 + 27, "DeviceEditable" in x["CompLZO"] ? true : false);
          A.store.Bool(ptr + 568 + 25, x["CompLZO"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["CompNoAdapt"] === "undefined") {
          A.store.Bool(ptr + 600 + 21, false);
          A.store.Bool(ptr + 600 + 14, false);
          A.store.Bool(ptr + 600 + 0, false);
          A.store.Ref(ptr + 600 + 4, undefined);
          A.store.Bool(ptr + 600 + 15, false);
          A.store.Bool(ptr + 600 + 8, false);
          A.store.Bool(ptr + 600 + 16, false);
          A.store.Bool(ptr + 600 + 9, false);
          A.store.Bool(ptr + 600 + 17, false);
          A.store.Bool(ptr + 600 + 10, false);
          A.store.Bool(ptr + 600 + 18, false);
          A.store.Bool(ptr + 600 + 11, false);
          A.store.Bool(ptr + 600 + 19, false);
          A.store.Bool(ptr + 600 + 12, false);
          A.store.Bool(ptr + 600 + 20, false);
          A.store.Bool(ptr + 600 + 13, false);
        } else {
          A.store.Bool(ptr + 600 + 21, true);
          A.store.Bool(ptr + 600 + 14, "Active" in x["CompNoAdapt"] ? true : false);
          A.store.Bool(ptr + 600 + 0, x["CompNoAdapt"]["Active"] ? true : false);
          A.store.Ref(ptr + 600 + 4, x["CompNoAdapt"]["Effective"]);
          A.store.Bool(ptr + 600 + 15, "UserPolicy" in x["CompNoAdapt"] ? true : false);
          A.store.Bool(ptr + 600 + 8, x["CompNoAdapt"]["UserPolicy"] ? true : false);
          A.store.Bool(ptr + 600 + 16, "DevicePolicy" in x["CompNoAdapt"] ? true : false);
          A.store.Bool(ptr + 600 + 9, x["CompNoAdapt"]["DevicePolicy"] ? true : false);
          A.store.Bool(ptr + 600 + 17, "UserSetting" in x["CompNoAdapt"] ? true : false);
          A.store.Bool(ptr + 600 + 10, x["CompNoAdapt"]["UserSetting"] ? true : false);
          A.store.Bool(ptr + 600 + 18, "SharedSetting" in x["CompNoAdapt"] ? true : false);
          A.store.Bool(ptr + 600 + 11, x["CompNoAdapt"]["SharedSetting"] ? true : false);
          A.store.Bool(ptr + 600 + 19, "UserEditable" in x["CompNoAdapt"] ? true : false);
          A.store.Bool(ptr + 600 + 12, x["CompNoAdapt"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 600 + 20, "DeviceEditable" in x["CompNoAdapt"] ? true : false);
          A.store.Bool(ptr + 600 + 13, x["CompNoAdapt"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["ExtraHosts"] === "undefined") {
          A.store.Bool(ptr + 624 + 28, false);
          A.store.Ref(ptr + 624 + 0, undefined);
          A.store.Ref(ptr + 624 + 4, undefined);
          A.store.Ref(ptr + 624 + 8, undefined);
          A.store.Ref(ptr + 624 + 12, undefined);
          A.store.Ref(ptr + 624 + 16, undefined);
          A.store.Ref(ptr + 624 + 20, undefined);
          A.store.Bool(ptr + 624 + 26, false);
          A.store.Bool(ptr + 624 + 24, false);
          A.store.Bool(ptr + 624 + 27, false);
          A.store.Bool(ptr + 624 + 25, false);
        } else {
          A.store.Bool(ptr + 624 + 28, true);
          A.store.Ref(ptr + 624 + 0, x["ExtraHosts"]["Active"]);
          A.store.Ref(ptr + 624 + 4, x["ExtraHosts"]["Effective"]);
          A.store.Ref(ptr + 624 + 8, x["ExtraHosts"]["UserPolicy"]);
          A.store.Ref(ptr + 624 + 12, x["ExtraHosts"]["DevicePolicy"]);
          A.store.Ref(ptr + 624 + 16, x["ExtraHosts"]["UserSetting"]);
          A.store.Ref(ptr + 624 + 20, x["ExtraHosts"]["SharedSetting"]);
          A.store.Bool(ptr + 624 + 26, "UserEditable" in x["ExtraHosts"] ? true : false);
          A.store.Bool(ptr + 624 + 24, x["ExtraHosts"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 624 + 27, "DeviceEditable" in x["ExtraHosts"] ? true : false);
          A.store.Bool(ptr + 624 + 25, x["ExtraHosts"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["IgnoreDefaultRoute"] === "undefined") {
          A.store.Bool(ptr + 656 + 21, false);
          A.store.Bool(ptr + 656 + 14, false);
          A.store.Bool(ptr + 656 + 0, false);
          A.store.Ref(ptr + 656 + 4, undefined);
          A.store.Bool(ptr + 656 + 15, false);
          A.store.Bool(ptr + 656 + 8, false);
          A.store.Bool(ptr + 656 + 16, false);
          A.store.Bool(ptr + 656 + 9, false);
          A.store.Bool(ptr + 656 + 17, false);
          A.store.Bool(ptr + 656 + 10, false);
          A.store.Bool(ptr + 656 + 18, false);
          A.store.Bool(ptr + 656 + 11, false);
          A.store.Bool(ptr + 656 + 19, false);
          A.store.Bool(ptr + 656 + 12, false);
          A.store.Bool(ptr + 656 + 20, false);
          A.store.Bool(ptr + 656 + 13, false);
        } else {
          A.store.Bool(ptr + 656 + 21, true);
          A.store.Bool(ptr + 656 + 14, "Active" in x["IgnoreDefaultRoute"] ? true : false);
          A.store.Bool(ptr + 656 + 0, x["IgnoreDefaultRoute"]["Active"] ? true : false);
          A.store.Ref(ptr + 656 + 4, x["IgnoreDefaultRoute"]["Effective"]);
          A.store.Bool(ptr + 656 + 15, "UserPolicy" in x["IgnoreDefaultRoute"] ? true : false);
          A.store.Bool(ptr + 656 + 8, x["IgnoreDefaultRoute"]["UserPolicy"] ? true : false);
          A.store.Bool(ptr + 656 + 16, "DevicePolicy" in x["IgnoreDefaultRoute"] ? true : false);
          A.store.Bool(ptr + 656 + 9, x["IgnoreDefaultRoute"]["DevicePolicy"] ? true : false);
          A.store.Bool(ptr + 656 + 17, "UserSetting" in x["IgnoreDefaultRoute"] ? true : false);
          A.store.Bool(ptr + 656 + 10, x["IgnoreDefaultRoute"]["UserSetting"] ? true : false);
          A.store.Bool(ptr + 656 + 18, "SharedSetting" in x["IgnoreDefaultRoute"] ? true : false);
          A.store.Bool(ptr + 656 + 11, x["IgnoreDefaultRoute"]["SharedSetting"] ? true : false);
          A.store.Bool(ptr + 656 + 19, "UserEditable" in x["IgnoreDefaultRoute"] ? true : false);
          A.store.Bool(ptr + 656 + 12, x["IgnoreDefaultRoute"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 656 + 20, "DeviceEditable" in x["IgnoreDefaultRoute"] ? true : false);
          A.store.Bool(ptr + 656 + 13, x["IgnoreDefaultRoute"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["KeyDirection"] === "undefined") {
          A.store.Bool(ptr + 680 + 28, false);
          A.store.Ref(ptr + 680 + 0, undefined);
          A.store.Ref(ptr + 680 + 4, undefined);
          A.store.Ref(ptr + 680 + 8, undefined);
          A.store.Ref(ptr + 680 + 12, undefined);
          A.store.Ref(ptr + 680 + 16, undefined);
          A.store.Ref(ptr + 680 + 20, undefined);
          A.store.Bool(ptr + 680 + 26, false);
          A.store.Bool(ptr + 680 + 24, false);
          A.store.Bool(ptr + 680 + 27, false);
          A.store.Bool(ptr + 680 + 25, false);
        } else {
          A.store.Bool(ptr + 680 + 28, true);
          A.store.Ref(ptr + 680 + 0, x["KeyDirection"]["Active"]);
          A.store.Ref(ptr + 680 + 4, x["KeyDirection"]["Effective"]);
          A.store.Ref(ptr + 680 + 8, x["KeyDirection"]["UserPolicy"]);
          A.store.Ref(ptr + 680 + 12, x["KeyDirection"]["DevicePolicy"]);
          A.store.Ref(ptr + 680 + 16, x["KeyDirection"]["UserSetting"]);
          A.store.Ref(ptr + 680 + 20, x["KeyDirection"]["SharedSetting"]);
          A.store.Bool(ptr + 680 + 26, "UserEditable" in x["KeyDirection"] ? true : false);
          A.store.Bool(ptr + 680 + 24, x["KeyDirection"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 680 + 27, "DeviceEditable" in x["KeyDirection"] ? true : false);
          A.store.Bool(ptr + 680 + 25, x["KeyDirection"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["NsCertType"] === "undefined") {
          A.store.Bool(ptr + 712 + 28, false);
          A.store.Ref(ptr + 712 + 0, undefined);
          A.store.Ref(ptr + 712 + 4, undefined);
          A.store.Ref(ptr + 712 + 8, undefined);
          A.store.Ref(ptr + 712 + 12, undefined);
          A.store.Ref(ptr + 712 + 16, undefined);
          A.store.Ref(ptr + 712 + 20, undefined);
          A.store.Bool(ptr + 712 + 26, false);
          A.store.Bool(ptr + 712 + 24, false);
          A.store.Bool(ptr + 712 + 27, false);
          A.store.Bool(ptr + 712 + 25, false);
        } else {
          A.store.Bool(ptr + 712 + 28, true);
          A.store.Ref(ptr + 712 + 0, x["NsCertType"]["Active"]);
          A.store.Ref(ptr + 712 + 4, x["NsCertType"]["Effective"]);
          A.store.Ref(ptr + 712 + 8, x["NsCertType"]["UserPolicy"]);
          A.store.Ref(ptr + 712 + 12, x["NsCertType"]["DevicePolicy"]);
          A.store.Ref(ptr + 712 + 16, x["NsCertType"]["UserSetting"]);
          A.store.Ref(ptr + 712 + 20, x["NsCertType"]["SharedSetting"]);
          A.store.Bool(ptr + 712 + 26, "UserEditable" in x["NsCertType"] ? true : false);
          A.store.Bool(ptr + 712 + 24, x["NsCertType"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 712 + 27, "DeviceEditable" in x["NsCertType"] ? true : false);
          A.store.Bool(ptr + 712 + 25, x["NsCertType"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["OTP"] === "undefined") {
          A.store.Bool(ptr + 744 + 28, false);
          A.store.Ref(ptr + 744 + 0, undefined);
          A.store.Ref(ptr + 744 + 4, undefined);
          A.store.Ref(ptr + 744 + 8, undefined);
          A.store.Ref(ptr + 744 + 12, undefined);
          A.store.Ref(ptr + 744 + 16, undefined);
          A.store.Ref(ptr + 744 + 20, undefined);
          A.store.Bool(ptr + 744 + 26, false);
          A.store.Bool(ptr + 744 + 24, false);
          A.store.Bool(ptr + 744 + 27, false);
          A.store.Bool(ptr + 744 + 25, false);
        } else {
          A.store.Bool(ptr + 744 + 28, true);
          A.store.Ref(ptr + 744 + 0, x["OTP"]["Active"]);
          A.store.Ref(ptr + 744 + 4, x["OTP"]["Effective"]);
          A.store.Ref(ptr + 744 + 8, x["OTP"]["UserPolicy"]);
          A.store.Ref(ptr + 744 + 12, x["OTP"]["DevicePolicy"]);
          A.store.Ref(ptr + 744 + 16, x["OTP"]["UserSetting"]);
          A.store.Ref(ptr + 744 + 20, x["OTP"]["SharedSetting"]);
          A.store.Bool(ptr + 744 + 26, "UserEditable" in x["OTP"] ? true : false);
          A.store.Bool(ptr + 744 + 24, x["OTP"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 744 + 27, "DeviceEditable" in x["OTP"] ? true : false);
          A.store.Bool(ptr + 744 + 25, x["OTP"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["Password"] === "undefined") {
          A.store.Bool(ptr + 776 + 28, false);
          A.store.Ref(ptr + 776 + 0, undefined);
          A.store.Ref(ptr + 776 + 4, undefined);
          A.store.Ref(ptr + 776 + 8, undefined);
          A.store.Ref(ptr + 776 + 12, undefined);
          A.store.Ref(ptr + 776 + 16, undefined);
          A.store.Ref(ptr + 776 + 20, undefined);
          A.store.Bool(ptr + 776 + 26, false);
          A.store.Bool(ptr + 776 + 24, false);
          A.store.Bool(ptr + 776 + 27, false);
          A.store.Bool(ptr + 776 + 25, false);
        } else {
          A.store.Bool(ptr + 776 + 28, true);
          A.store.Ref(ptr + 776 + 0, x["Password"]["Active"]);
          A.store.Ref(ptr + 776 + 4, x["Password"]["Effective"]);
          A.store.Ref(ptr + 776 + 8, x["Password"]["UserPolicy"]);
          A.store.Ref(ptr + 776 + 12, x["Password"]["DevicePolicy"]);
          A.store.Ref(ptr + 776 + 16, x["Password"]["UserSetting"]);
          A.store.Ref(ptr + 776 + 20, x["Password"]["SharedSetting"]);
          A.store.Bool(ptr + 776 + 26, "UserEditable" in x["Password"] ? true : false);
          A.store.Bool(ptr + 776 + 24, x["Password"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 776 + 27, "DeviceEditable" in x["Password"] ? true : false);
          A.store.Bool(ptr + 776 + 25, x["Password"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["Port"] === "undefined") {
          A.store.Bool(ptr + 808 + 33, false);
          A.store.Bool(ptr + 808 + 26, false);
          A.store.Int32(ptr + 808 + 0, 0);
          A.store.Ref(ptr + 808 + 4, undefined);
          A.store.Bool(ptr + 808 + 27, false);
          A.store.Int32(ptr + 808 + 8, 0);
          A.store.Bool(ptr + 808 + 28, false);
          A.store.Int32(ptr + 808 + 12, 0);
          A.store.Bool(ptr + 808 + 29, false);
          A.store.Int32(ptr + 808 + 16, 0);
          A.store.Bool(ptr + 808 + 30, false);
          A.store.Int32(ptr + 808 + 20, 0);
          A.store.Bool(ptr + 808 + 31, false);
          A.store.Bool(ptr + 808 + 24, false);
          A.store.Bool(ptr + 808 + 32, false);
          A.store.Bool(ptr + 808 + 25, false);
        } else {
          A.store.Bool(ptr + 808 + 33, true);
          A.store.Bool(ptr + 808 + 26, "Active" in x["Port"] ? true : false);
          A.store.Int32(ptr + 808 + 0, x["Port"]["Active"] === undefined ? 0 : (x["Port"]["Active"] as number));
          A.store.Ref(ptr + 808 + 4, x["Port"]["Effective"]);
          A.store.Bool(ptr + 808 + 27, "UserPolicy" in x["Port"] ? true : false);
          A.store.Int32(ptr + 808 + 8, x["Port"]["UserPolicy"] === undefined ? 0 : (x["Port"]["UserPolicy"] as number));
          A.store.Bool(ptr + 808 + 28, "DevicePolicy" in x["Port"] ? true : false);
          A.store.Int32(
            ptr + 808 + 12,
            x["Port"]["DevicePolicy"] === undefined ? 0 : (x["Port"]["DevicePolicy"] as number)
          );
          A.store.Bool(ptr + 808 + 29, "UserSetting" in x["Port"] ? true : false);
          A.store.Int32(
            ptr + 808 + 16,
            x["Port"]["UserSetting"] === undefined ? 0 : (x["Port"]["UserSetting"] as number)
          );
          A.store.Bool(ptr + 808 + 30, "SharedSetting" in x["Port"] ? true : false);
          A.store.Int32(
            ptr + 808 + 20,
            x["Port"]["SharedSetting"] === undefined ? 0 : (x["Port"]["SharedSetting"] as number)
          );
          A.store.Bool(ptr + 808 + 31, "UserEditable" in x["Port"] ? true : false);
          A.store.Bool(ptr + 808 + 24, x["Port"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 808 + 32, "DeviceEditable" in x["Port"] ? true : false);
          A.store.Bool(ptr + 808 + 25, x["Port"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["Proto"] === "undefined") {
          A.store.Bool(ptr + 844 + 28, false);
          A.store.Ref(ptr + 844 + 0, undefined);
          A.store.Ref(ptr + 844 + 4, undefined);
          A.store.Ref(ptr + 844 + 8, undefined);
          A.store.Ref(ptr + 844 + 12, undefined);
          A.store.Ref(ptr + 844 + 16, undefined);
          A.store.Ref(ptr + 844 + 20, undefined);
          A.store.Bool(ptr + 844 + 26, false);
          A.store.Bool(ptr + 844 + 24, false);
          A.store.Bool(ptr + 844 + 27, false);
          A.store.Bool(ptr + 844 + 25, false);
        } else {
          A.store.Bool(ptr + 844 + 28, true);
          A.store.Ref(ptr + 844 + 0, x["Proto"]["Active"]);
          A.store.Ref(ptr + 844 + 4, x["Proto"]["Effective"]);
          A.store.Ref(ptr + 844 + 8, x["Proto"]["UserPolicy"]);
          A.store.Ref(ptr + 844 + 12, x["Proto"]["DevicePolicy"]);
          A.store.Ref(ptr + 844 + 16, x["Proto"]["UserSetting"]);
          A.store.Ref(ptr + 844 + 20, x["Proto"]["SharedSetting"]);
          A.store.Bool(ptr + 844 + 26, "UserEditable" in x["Proto"] ? true : false);
          A.store.Bool(ptr + 844 + 24, x["Proto"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 844 + 27, "DeviceEditable" in x["Proto"] ? true : false);
          A.store.Bool(ptr + 844 + 25, x["Proto"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["PushPeerInfo"] === "undefined") {
          A.store.Bool(ptr + 876 + 21, false);
          A.store.Bool(ptr + 876 + 14, false);
          A.store.Bool(ptr + 876 + 0, false);
          A.store.Ref(ptr + 876 + 4, undefined);
          A.store.Bool(ptr + 876 + 15, false);
          A.store.Bool(ptr + 876 + 8, false);
          A.store.Bool(ptr + 876 + 16, false);
          A.store.Bool(ptr + 876 + 9, false);
          A.store.Bool(ptr + 876 + 17, false);
          A.store.Bool(ptr + 876 + 10, false);
          A.store.Bool(ptr + 876 + 18, false);
          A.store.Bool(ptr + 876 + 11, false);
          A.store.Bool(ptr + 876 + 19, false);
          A.store.Bool(ptr + 876 + 12, false);
          A.store.Bool(ptr + 876 + 20, false);
          A.store.Bool(ptr + 876 + 13, false);
        } else {
          A.store.Bool(ptr + 876 + 21, true);
          A.store.Bool(ptr + 876 + 14, "Active" in x["PushPeerInfo"] ? true : false);
          A.store.Bool(ptr + 876 + 0, x["PushPeerInfo"]["Active"] ? true : false);
          A.store.Ref(ptr + 876 + 4, x["PushPeerInfo"]["Effective"]);
          A.store.Bool(ptr + 876 + 15, "UserPolicy" in x["PushPeerInfo"] ? true : false);
          A.store.Bool(ptr + 876 + 8, x["PushPeerInfo"]["UserPolicy"] ? true : false);
          A.store.Bool(ptr + 876 + 16, "DevicePolicy" in x["PushPeerInfo"] ? true : false);
          A.store.Bool(ptr + 876 + 9, x["PushPeerInfo"]["DevicePolicy"] ? true : false);
          A.store.Bool(ptr + 876 + 17, "UserSetting" in x["PushPeerInfo"] ? true : false);
          A.store.Bool(ptr + 876 + 10, x["PushPeerInfo"]["UserSetting"] ? true : false);
          A.store.Bool(ptr + 876 + 18, "SharedSetting" in x["PushPeerInfo"] ? true : false);
          A.store.Bool(ptr + 876 + 11, x["PushPeerInfo"]["SharedSetting"] ? true : false);
          A.store.Bool(ptr + 876 + 19, "UserEditable" in x["PushPeerInfo"] ? true : false);
          A.store.Bool(ptr + 876 + 12, x["PushPeerInfo"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 876 + 20, "DeviceEditable" in x["PushPeerInfo"] ? true : false);
          A.store.Bool(ptr + 876 + 13, x["PushPeerInfo"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["RemoteCertEKU"] === "undefined") {
          A.store.Bool(ptr + 900 + 28, false);
          A.store.Ref(ptr + 900 + 0, undefined);
          A.store.Ref(ptr + 900 + 4, undefined);
          A.store.Ref(ptr + 900 + 8, undefined);
          A.store.Ref(ptr + 900 + 12, undefined);
          A.store.Ref(ptr + 900 + 16, undefined);
          A.store.Ref(ptr + 900 + 20, undefined);
          A.store.Bool(ptr + 900 + 26, false);
          A.store.Bool(ptr + 900 + 24, false);
          A.store.Bool(ptr + 900 + 27, false);
          A.store.Bool(ptr + 900 + 25, false);
        } else {
          A.store.Bool(ptr + 900 + 28, true);
          A.store.Ref(ptr + 900 + 0, x["RemoteCertEKU"]["Active"]);
          A.store.Ref(ptr + 900 + 4, x["RemoteCertEKU"]["Effective"]);
          A.store.Ref(ptr + 900 + 8, x["RemoteCertEKU"]["UserPolicy"]);
          A.store.Ref(ptr + 900 + 12, x["RemoteCertEKU"]["DevicePolicy"]);
          A.store.Ref(ptr + 900 + 16, x["RemoteCertEKU"]["UserSetting"]);
          A.store.Ref(ptr + 900 + 20, x["RemoteCertEKU"]["SharedSetting"]);
          A.store.Bool(ptr + 900 + 26, "UserEditable" in x["RemoteCertEKU"] ? true : false);
          A.store.Bool(ptr + 900 + 24, x["RemoteCertEKU"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 900 + 27, "DeviceEditable" in x["RemoteCertEKU"] ? true : false);
          A.store.Bool(ptr + 900 + 25, x["RemoteCertEKU"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["RemoteCertKU"] === "undefined") {
          A.store.Bool(ptr + 932 + 28, false);
          A.store.Ref(ptr + 932 + 0, undefined);
          A.store.Ref(ptr + 932 + 4, undefined);
          A.store.Ref(ptr + 932 + 8, undefined);
          A.store.Ref(ptr + 932 + 12, undefined);
          A.store.Ref(ptr + 932 + 16, undefined);
          A.store.Ref(ptr + 932 + 20, undefined);
          A.store.Bool(ptr + 932 + 26, false);
          A.store.Bool(ptr + 932 + 24, false);
          A.store.Bool(ptr + 932 + 27, false);
          A.store.Bool(ptr + 932 + 25, false);
        } else {
          A.store.Bool(ptr + 932 + 28, true);
          A.store.Ref(ptr + 932 + 0, x["RemoteCertKU"]["Active"]);
          A.store.Ref(ptr + 932 + 4, x["RemoteCertKU"]["Effective"]);
          A.store.Ref(ptr + 932 + 8, x["RemoteCertKU"]["UserPolicy"]);
          A.store.Ref(ptr + 932 + 12, x["RemoteCertKU"]["DevicePolicy"]);
          A.store.Ref(ptr + 932 + 16, x["RemoteCertKU"]["UserSetting"]);
          A.store.Ref(ptr + 932 + 20, x["RemoteCertKU"]["SharedSetting"]);
          A.store.Bool(ptr + 932 + 26, "UserEditable" in x["RemoteCertKU"] ? true : false);
          A.store.Bool(ptr + 932 + 24, x["RemoteCertKU"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 932 + 27, "DeviceEditable" in x["RemoteCertKU"] ? true : false);
          A.store.Bool(ptr + 932 + 25, x["RemoteCertKU"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["RemoteCertTLS"] === "undefined") {
          A.store.Bool(ptr + 964 + 28, false);
          A.store.Ref(ptr + 964 + 0, undefined);
          A.store.Ref(ptr + 964 + 4, undefined);
          A.store.Ref(ptr + 964 + 8, undefined);
          A.store.Ref(ptr + 964 + 12, undefined);
          A.store.Ref(ptr + 964 + 16, undefined);
          A.store.Ref(ptr + 964 + 20, undefined);
          A.store.Bool(ptr + 964 + 26, false);
          A.store.Bool(ptr + 964 + 24, false);
          A.store.Bool(ptr + 964 + 27, false);
          A.store.Bool(ptr + 964 + 25, false);
        } else {
          A.store.Bool(ptr + 964 + 28, true);
          A.store.Ref(ptr + 964 + 0, x["RemoteCertTLS"]["Active"]);
          A.store.Ref(ptr + 964 + 4, x["RemoteCertTLS"]["Effective"]);
          A.store.Ref(ptr + 964 + 8, x["RemoteCertTLS"]["UserPolicy"]);
          A.store.Ref(ptr + 964 + 12, x["RemoteCertTLS"]["DevicePolicy"]);
          A.store.Ref(ptr + 964 + 16, x["RemoteCertTLS"]["UserSetting"]);
          A.store.Ref(ptr + 964 + 20, x["RemoteCertTLS"]["SharedSetting"]);
          A.store.Bool(ptr + 964 + 26, "UserEditable" in x["RemoteCertTLS"] ? true : false);
          A.store.Bool(ptr + 964 + 24, x["RemoteCertTLS"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 964 + 27, "DeviceEditable" in x["RemoteCertTLS"] ? true : false);
          A.store.Bool(ptr + 964 + 25, x["RemoteCertTLS"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["RenegSec"] === "undefined") {
          A.store.Bool(ptr + 996 + 33, false);
          A.store.Bool(ptr + 996 + 26, false);
          A.store.Int32(ptr + 996 + 0, 0);
          A.store.Ref(ptr + 996 + 4, undefined);
          A.store.Bool(ptr + 996 + 27, false);
          A.store.Int32(ptr + 996 + 8, 0);
          A.store.Bool(ptr + 996 + 28, false);
          A.store.Int32(ptr + 996 + 12, 0);
          A.store.Bool(ptr + 996 + 29, false);
          A.store.Int32(ptr + 996 + 16, 0);
          A.store.Bool(ptr + 996 + 30, false);
          A.store.Int32(ptr + 996 + 20, 0);
          A.store.Bool(ptr + 996 + 31, false);
          A.store.Bool(ptr + 996 + 24, false);
          A.store.Bool(ptr + 996 + 32, false);
          A.store.Bool(ptr + 996 + 25, false);
        } else {
          A.store.Bool(ptr + 996 + 33, true);
          A.store.Bool(ptr + 996 + 26, "Active" in x["RenegSec"] ? true : false);
          A.store.Int32(ptr + 996 + 0, x["RenegSec"]["Active"] === undefined ? 0 : (x["RenegSec"]["Active"] as number));
          A.store.Ref(ptr + 996 + 4, x["RenegSec"]["Effective"]);
          A.store.Bool(ptr + 996 + 27, "UserPolicy" in x["RenegSec"] ? true : false);
          A.store.Int32(
            ptr + 996 + 8,
            x["RenegSec"]["UserPolicy"] === undefined ? 0 : (x["RenegSec"]["UserPolicy"] as number)
          );
          A.store.Bool(ptr + 996 + 28, "DevicePolicy" in x["RenegSec"] ? true : false);
          A.store.Int32(
            ptr + 996 + 12,
            x["RenegSec"]["DevicePolicy"] === undefined ? 0 : (x["RenegSec"]["DevicePolicy"] as number)
          );
          A.store.Bool(ptr + 996 + 29, "UserSetting" in x["RenegSec"] ? true : false);
          A.store.Int32(
            ptr + 996 + 16,
            x["RenegSec"]["UserSetting"] === undefined ? 0 : (x["RenegSec"]["UserSetting"] as number)
          );
          A.store.Bool(ptr + 996 + 30, "SharedSetting" in x["RenegSec"] ? true : false);
          A.store.Int32(
            ptr + 996 + 20,
            x["RenegSec"]["SharedSetting"] === undefined ? 0 : (x["RenegSec"]["SharedSetting"] as number)
          );
          A.store.Bool(ptr + 996 + 31, "UserEditable" in x["RenegSec"] ? true : false);
          A.store.Bool(ptr + 996 + 24, x["RenegSec"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 996 + 32, "DeviceEditable" in x["RenegSec"] ? true : false);
          A.store.Bool(ptr + 996 + 25, x["RenegSec"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["SaveCredentials"] === "undefined") {
          A.store.Bool(ptr + 1032 + 21, false);
          A.store.Bool(ptr + 1032 + 14, false);
          A.store.Bool(ptr + 1032 + 0, false);
          A.store.Ref(ptr + 1032 + 4, undefined);
          A.store.Bool(ptr + 1032 + 15, false);
          A.store.Bool(ptr + 1032 + 8, false);
          A.store.Bool(ptr + 1032 + 16, false);
          A.store.Bool(ptr + 1032 + 9, false);
          A.store.Bool(ptr + 1032 + 17, false);
          A.store.Bool(ptr + 1032 + 10, false);
          A.store.Bool(ptr + 1032 + 18, false);
          A.store.Bool(ptr + 1032 + 11, false);
          A.store.Bool(ptr + 1032 + 19, false);
          A.store.Bool(ptr + 1032 + 12, false);
          A.store.Bool(ptr + 1032 + 20, false);
          A.store.Bool(ptr + 1032 + 13, false);
        } else {
          A.store.Bool(ptr + 1032 + 21, true);
          A.store.Bool(ptr + 1032 + 14, "Active" in x["SaveCredentials"] ? true : false);
          A.store.Bool(ptr + 1032 + 0, x["SaveCredentials"]["Active"] ? true : false);
          A.store.Ref(ptr + 1032 + 4, x["SaveCredentials"]["Effective"]);
          A.store.Bool(ptr + 1032 + 15, "UserPolicy" in x["SaveCredentials"] ? true : false);
          A.store.Bool(ptr + 1032 + 8, x["SaveCredentials"]["UserPolicy"] ? true : false);
          A.store.Bool(ptr + 1032 + 16, "DevicePolicy" in x["SaveCredentials"] ? true : false);
          A.store.Bool(ptr + 1032 + 9, x["SaveCredentials"]["DevicePolicy"] ? true : false);
          A.store.Bool(ptr + 1032 + 17, "UserSetting" in x["SaveCredentials"] ? true : false);
          A.store.Bool(ptr + 1032 + 10, x["SaveCredentials"]["UserSetting"] ? true : false);
          A.store.Bool(ptr + 1032 + 18, "SharedSetting" in x["SaveCredentials"] ? true : false);
          A.store.Bool(ptr + 1032 + 11, x["SaveCredentials"]["SharedSetting"] ? true : false);
          A.store.Bool(ptr + 1032 + 19, "UserEditable" in x["SaveCredentials"] ? true : false);
          A.store.Bool(ptr + 1032 + 12, x["SaveCredentials"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 1032 + 20, "DeviceEditable" in x["SaveCredentials"] ? true : false);
          A.store.Bool(ptr + 1032 + 13, x["SaveCredentials"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["ServerCAPEMs"] === "undefined") {
          A.store.Bool(ptr + 1056 + 28, false);
          A.store.Ref(ptr + 1056 + 0, undefined);
          A.store.Ref(ptr + 1056 + 4, undefined);
          A.store.Ref(ptr + 1056 + 8, undefined);
          A.store.Ref(ptr + 1056 + 12, undefined);
          A.store.Ref(ptr + 1056 + 16, undefined);
          A.store.Ref(ptr + 1056 + 20, undefined);
          A.store.Bool(ptr + 1056 + 26, false);
          A.store.Bool(ptr + 1056 + 24, false);
          A.store.Bool(ptr + 1056 + 27, false);
          A.store.Bool(ptr + 1056 + 25, false);
        } else {
          A.store.Bool(ptr + 1056 + 28, true);
          A.store.Ref(ptr + 1056 + 0, x["ServerCAPEMs"]["Active"]);
          A.store.Ref(ptr + 1056 + 4, x["ServerCAPEMs"]["Effective"]);
          A.store.Ref(ptr + 1056 + 8, x["ServerCAPEMs"]["UserPolicy"]);
          A.store.Ref(ptr + 1056 + 12, x["ServerCAPEMs"]["DevicePolicy"]);
          A.store.Ref(ptr + 1056 + 16, x["ServerCAPEMs"]["UserSetting"]);
          A.store.Ref(ptr + 1056 + 20, x["ServerCAPEMs"]["SharedSetting"]);
          A.store.Bool(ptr + 1056 + 26, "UserEditable" in x["ServerCAPEMs"] ? true : false);
          A.store.Bool(ptr + 1056 + 24, x["ServerCAPEMs"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 1056 + 27, "DeviceEditable" in x["ServerCAPEMs"] ? true : false);
          A.store.Bool(ptr + 1056 + 25, x["ServerCAPEMs"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["ServerCARefs"] === "undefined") {
          A.store.Bool(ptr + 1088 + 28, false);
          A.store.Ref(ptr + 1088 + 0, undefined);
          A.store.Ref(ptr + 1088 + 4, undefined);
          A.store.Ref(ptr + 1088 + 8, undefined);
          A.store.Ref(ptr + 1088 + 12, undefined);
          A.store.Ref(ptr + 1088 + 16, undefined);
          A.store.Ref(ptr + 1088 + 20, undefined);
          A.store.Bool(ptr + 1088 + 26, false);
          A.store.Bool(ptr + 1088 + 24, false);
          A.store.Bool(ptr + 1088 + 27, false);
          A.store.Bool(ptr + 1088 + 25, false);
        } else {
          A.store.Bool(ptr + 1088 + 28, true);
          A.store.Ref(ptr + 1088 + 0, x["ServerCARefs"]["Active"]);
          A.store.Ref(ptr + 1088 + 4, x["ServerCARefs"]["Effective"]);
          A.store.Ref(ptr + 1088 + 8, x["ServerCARefs"]["UserPolicy"]);
          A.store.Ref(ptr + 1088 + 12, x["ServerCARefs"]["DevicePolicy"]);
          A.store.Ref(ptr + 1088 + 16, x["ServerCARefs"]["UserSetting"]);
          A.store.Ref(ptr + 1088 + 20, x["ServerCARefs"]["SharedSetting"]);
          A.store.Bool(ptr + 1088 + 26, "UserEditable" in x["ServerCARefs"] ? true : false);
          A.store.Bool(ptr + 1088 + 24, x["ServerCARefs"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 1088 + 27, "DeviceEditable" in x["ServerCARefs"] ? true : false);
          A.store.Bool(ptr + 1088 + 25, x["ServerCARefs"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["ServerCertRef"] === "undefined") {
          A.store.Bool(ptr + 1120 + 28, false);
          A.store.Ref(ptr + 1120 + 0, undefined);
          A.store.Ref(ptr + 1120 + 4, undefined);
          A.store.Ref(ptr + 1120 + 8, undefined);
          A.store.Ref(ptr + 1120 + 12, undefined);
          A.store.Ref(ptr + 1120 + 16, undefined);
          A.store.Ref(ptr + 1120 + 20, undefined);
          A.store.Bool(ptr + 1120 + 26, false);
          A.store.Bool(ptr + 1120 + 24, false);
          A.store.Bool(ptr + 1120 + 27, false);
          A.store.Bool(ptr + 1120 + 25, false);
        } else {
          A.store.Bool(ptr + 1120 + 28, true);
          A.store.Ref(ptr + 1120 + 0, x["ServerCertRef"]["Active"]);
          A.store.Ref(ptr + 1120 + 4, x["ServerCertRef"]["Effective"]);
          A.store.Ref(ptr + 1120 + 8, x["ServerCertRef"]["UserPolicy"]);
          A.store.Ref(ptr + 1120 + 12, x["ServerCertRef"]["DevicePolicy"]);
          A.store.Ref(ptr + 1120 + 16, x["ServerCertRef"]["UserSetting"]);
          A.store.Ref(ptr + 1120 + 20, x["ServerCertRef"]["SharedSetting"]);
          A.store.Bool(ptr + 1120 + 26, "UserEditable" in x["ServerCertRef"] ? true : false);
          A.store.Bool(ptr + 1120 + 24, x["ServerCertRef"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 1120 + 27, "DeviceEditable" in x["ServerCertRef"] ? true : false);
          A.store.Bool(ptr + 1120 + 25, x["ServerCertRef"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["ServerPollTimeout"] === "undefined") {
          A.store.Bool(ptr + 1152 + 33, false);
          A.store.Bool(ptr + 1152 + 26, false);
          A.store.Int32(ptr + 1152 + 0, 0);
          A.store.Ref(ptr + 1152 + 4, undefined);
          A.store.Bool(ptr + 1152 + 27, false);
          A.store.Int32(ptr + 1152 + 8, 0);
          A.store.Bool(ptr + 1152 + 28, false);
          A.store.Int32(ptr + 1152 + 12, 0);
          A.store.Bool(ptr + 1152 + 29, false);
          A.store.Int32(ptr + 1152 + 16, 0);
          A.store.Bool(ptr + 1152 + 30, false);
          A.store.Int32(ptr + 1152 + 20, 0);
          A.store.Bool(ptr + 1152 + 31, false);
          A.store.Bool(ptr + 1152 + 24, false);
          A.store.Bool(ptr + 1152 + 32, false);
          A.store.Bool(ptr + 1152 + 25, false);
        } else {
          A.store.Bool(ptr + 1152 + 33, true);
          A.store.Bool(ptr + 1152 + 26, "Active" in x["ServerPollTimeout"] ? true : false);
          A.store.Int32(
            ptr + 1152 + 0,
            x["ServerPollTimeout"]["Active"] === undefined ? 0 : (x["ServerPollTimeout"]["Active"] as number)
          );
          A.store.Ref(ptr + 1152 + 4, x["ServerPollTimeout"]["Effective"]);
          A.store.Bool(ptr + 1152 + 27, "UserPolicy" in x["ServerPollTimeout"] ? true : false);
          A.store.Int32(
            ptr + 1152 + 8,
            x["ServerPollTimeout"]["UserPolicy"] === undefined ? 0 : (x["ServerPollTimeout"]["UserPolicy"] as number)
          );
          A.store.Bool(ptr + 1152 + 28, "DevicePolicy" in x["ServerPollTimeout"] ? true : false);
          A.store.Int32(
            ptr + 1152 + 12,
            x["ServerPollTimeout"]["DevicePolicy"] === undefined
              ? 0
              : (x["ServerPollTimeout"]["DevicePolicy"] as number)
          );
          A.store.Bool(ptr + 1152 + 29, "UserSetting" in x["ServerPollTimeout"] ? true : false);
          A.store.Int32(
            ptr + 1152 + 16,
            x["ServerPollTimeout"]["UserSetting"] === undefined ? 0 : (x["ServerPollTimeout"]["UserSetting"] as number)
          );
          A.store.Bool(ptr + 1152 + 30, "SharedSetting" in x["ServerPollTimeout"] ? true : false);
          A.store.Int32(
            ptr + 1152 + 20,
            x["ServerPollTimeout"]["SharedSetting"] === undefined
              ? 0
              : (x["ServerPollTimeout"]["SharedSetting"] as number)
          );
          A.store.Bool(ptr + 1152 + 31, "UserEditable" in x["ServerPollTimeout"] ? true : false);
          A.store.Bool(ptr + 1152 + 24, x["ServerPollTimeout"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 1152 + 32, "DeviceEditable" in x["ServerPollTimeout"] ? true : false);
          A.store.Bool(ptr + 1152 + 25, x["ServerPollTimeout"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["Shaper"] === "undefined") {
          A.store.Bool(ptr + 1188 + 33, false);
          A.store.Bool(ptr + 1188 + 26, false);
          A.store.Int32(ptr + 1188 + 0, 0);
          A.store.Ref(ptr + 1188 + 4, undefined);
          A.store.Bool(ptr + 1188 + 27, false);
          A.store.Int32(ptr + 1188 + 8, 0);
          A.store.Bool(ptr + 1188 + 28, false);
          A.store.Int32(ptr + 1188 + 12, 0);
          A.store.Bool(ptr + 1188 + 29, false);
          A.store.Int32(ptr + 1188 + 16, 0);
          A.store.Bool(ptr + 1188 + 30, false);
          A.store.Int32(ptr + 1188 + 20, 0);
          A.store.Bool(ptr + 1188 + 31, false);
          A.store.Bool(ptr + 1188 + 24, false);
          A.store.Bool(ptr + 1188 + 32, false);
          A.store.Bool(ptr + 1188 + 25, false);
        } else {
          A.store.Bool(ptr + 1188 + 33, true);
          A.store.Bool(ptr + 1188 + 26, "Active" in x["Shaper"] ? true : false);
          A.store.Int32(ptr + 1188 + 0, x["Shaper"]["Active"] === undefined ? 0 : (x["Shaper"]["Active"] as number));
          A.store.Ref(ptr + 1188 + 4, x["Shaper"]["Effective"]);
          A.store.Bool(ptr + 1188 + 27, "UserPolicy" in x["Shaper"] ? true : false);
          A.store.Int32(
            ptr + 1188 + 8,
            x["Shaper"]["UserPolicy"] === undefined ? 0 : (x["Shaper"]["UserPolicy"] as number)
          );
          A.store.Bool(ptr + 1188 + 28, "DevicePolicy" in x["Shaper"] ? true : false);
          A.store.Int32(
            ptr + 1188 + 12,
            x["Shaper"]["DevicePolicy"] === undefined ? 0 : (x["Shaper"]["DevicePolicy"] as number)
          );
          A.store.Bool(ptr + 1188 + 29, "UserSetting" in x["Shaper"] ? true : false);
          A.store.Int32(
            ptr + 1188 + 16,
            x["Shaper"]["UserSetting"] === undefined ? 0 : (x["Shaper"]["UserSetting"] as number)
          );
          A.store.Bool(ptr + 1188 + 30, "SharedSetting" in x["Shaper"] ? true : false);
          A.store.Int32(
            ptr + 1188 + 20,
            x["Shaper"]["SharedSetting"] === undefined ? 0 : (x["Shaper"]["SharedSetting"] as number)
          );
          A.store.Bool(ptr + 1188 + 31, "UserEditable" in x["Shaper"] ? true : false);
          A.store.Bool(ptr + 1188 + 24, x["Shaper"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 1188 + 32, "DeviceEditable" in x["Shaper"] ? true : false);
          A.store.Bool(ptr + 1188 + 25, x["Shaper"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["StaticChallenge"] === "undefined") {
          A.store.Bool(ptr + 1224 + 28, false);
          A.store.Ref(ptr + 1224 + 0, undefined);
          A.store.Ref(ptr + 1224 + 4, undefined);
          A.store.Ref(ptr + 1224 + 8, undefined);
          A.store.Ref(ptr + 1224 + 12, undefined);
          A.store.Ref(ptr + 1224 + 16, undefined);
          A.store.Ref(ptr + 1224 + 20, undefined);
          A.store.Bool(ptr + 1224 + 26, false);
          A.store.Bool(ptr + 1224 + 24, false);
          A.store.Bool(ptr + 1224 + 27, false);
          A.store.Bool(ptr + 1224 + 25, false);
        } else {
          A.store.Bool(ptr + 1224 + 28, true);
          A.store.Ref(ptr + 1224 + 0, x["StaticChallenge"]["Active"]);
          A.store.Ref(ptr + 1224 + 4, x["StaticChallenge"]["Effective"]);
          A.store.Ref(ptr + 1224 + 8, x["StaticChallenge"]["UserPolicy"]);
          A.store.Ref(ptr + 1224 + 12, x["StaticChallenge"]["DevicePolicy"]);
          A.store.Ref(ptr + 1224 + 16, x["StaticChallenge"]["UserSetting"]);
          A.store.Ref(ptr + 1224 + 20, x["StaticChallenge"]["SharedSetting"]);
          A.store.Bool(ptr + 1224 + 26, "UserEditable" in x["StaticChallenge"] ? true : false);
          A.store.Bool(ptr + 1224 + 24, x["StaticChallenge"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 1224 + 27, "DeviceEditable" in x["StaticChallenge"] ? true : false);
          A.store.Bool(ptr + 1224 + 25, x["StaticChallenge"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["TLSAuthContents"] === "undefined") {
          A.store.Bool(ptr + 1256 + 28, false);
          A.store.Ref(ptr + 1256 + 0, undefined);
          A.store.Ref(ptr + 1256 + 4, undefined);
          A.store.Ref(ptr + 1256 + 8, undefined);
          A.store.Ref(ptr + 1256 + 12, undefined);
          A.store.Ref(ptr + 1256 + 16, undefined);
          A.store.Ref(ptr + 1256 + 20, undefined);
          A.store.Bool(ptr + 1256 + 26, false);
          A.store.Bool(ptr + 1256 + 24, false);
          A.store.Bool(ptr + 1256 + 27, false);
          A.store.Bool(ptr + 1256 + 25, false);
        } else {
          A.store.Bool(ptr + 1256 + 28, true);
          A.store.Ref(ptr + 1256 + 0, x["TLSAuthContents"]["Active"]);
          A.store.Ref(ptr + 1256 + 4, x["TLSAuthContents"]["Effective"]);
          A.store.Ref(ptr + 1256 + 8, x["TLSAuthContents"]["UserPolicy"]);
          A.store.Ref(ptr + 1256 + 12, x["TLSAuthContents"]["DevicePolicy"]);
          A.store.Ref(ptr + 1256 + 16, x["TLSAuthContents"]["UserSetting"]);
          A.store.Ref(ptr + 1256 + 20, x["TLSAuthContents"]["SharedSetting"]);
          A.store.Bool(ptr + 1256 + 26, "UserEditable" in x["TLSAuthContents"] ? true : false);
          A.store.Bool(ptr + 1256 + 24, x["TLSAuthContents"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 1256 + 27, "DeviceEditable" in x["TLSAuthContents"] ? true : false);
          A.store.Bool(ptr + 1256 + 25, x["TLSAuthContents"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["TLSRemote"] === "undefined") {
          A.store.Bool(ptr + 1288 + 28, false);
          A.store.Ref(ptr + 1288 + 0, undefined);
          A.store.Ref(ptr + 1288 + 4, undefined);
          A.store.Ref(ptr + 1288 + 8, undefined);
          A.store.Ref(ptr + 1288 + 12, undefined);
          A.store.Ref(ptr + 1288 + 16, undefined);
          A.store.Ref(ptr + 1288 + 20, undefined);
          A.store.Bool(ptr + 1288 + 26, false);
          A.store.Bool(ptr + 1288 + 24, false);
          A.store.Bool(ptr + 1288 + 27, false);
          A.store.Bool(ptr + 1288 + 25, false);
        } else {
          A.store.Bool(ptr + 1288 + 28, true);
          A.store.Ref(ptr + 1288 + 0, x["TLSRemote"]["Active"]);
          A.store.Ref(ptr + 1288 + 4, x["TLSRemote"]["Effective"]);
          A.store.Ref(ptr + 1288 + 8, x["TLSRemote"]["UserPolicy"]);
          A.store.Ref(ptr + 1288 + 12, x["TLSRemote"]["DevicePolicy"]);
          A.store.Ref(ptr + 1288 + 16, x["TLSRemote"]["UserSetting"]);
          A.store.Ref(ptr + 1288 + 20, x["TLSRemote"]["SharedSetting"]);
          A.store.Bool(ptr + 1288 + 26, "UserEditable" in x["TLSRemote"] ? true : false);
          A.store.Bool(ptr + 1288 + 24, x["TLSRemote"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 1288 + 27, "DeviceEditable" in x["TLSRemote"] ? true : false);
          A.store.Bool(ptr + 1288 + 25, x["TLSRemote"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["TLSVersionMin"] === "undefined") {
          A.store.Bool(ptr + 1320 + 28, false);
          A.store.Ref(ptr + 1320 + 0, undefined);
          A.store.Ref(ptr + 1320 + 4, undefined);
          A.store.Ref(ptr + 1320 + 8, undefined);
          A.store.Ref(ptr + 1320 + 12, undefined);
          A.store.Ref(ptr + 1320 + 16, undefined);
          A.store.Ref(ptr + 1320 + 20, undefined);
          A.store.Bool(ptr + 1320 + 26, false);
          A.store.Bool(ptr + 1320 + 24, false);
          A.store.Bool(ptr + 1320 + 27, false);
          A.store.Bool(ptr + 1320 + 25, false);
        } else {
          A.store.Bool(ptr + 1320 + 28, true);
          A.store.Ref(ptr + 1320 + 0, x["TLSVersionMin"]["Active"]);
          A.store.Ref(ptr + 1320 + 4, x["TLSVersionMin"]["Effective"]);
          A.store.Ref(ptr + 1320 + 8, x["TLSVersionMin"]["UserPolicy"]);
          A.store.Ref(ptr + 1320 + 12, x["TLSVersionMin"]["DevicePolicy"]);
          A.store.Ref(ptr + 1320 + 16, x["TLSVersionMin"]["UserSetting"]);
          A.store.Ref(ptr + 1320 + 20, x["TLSVersionMin"]["SharedSetting"]);
          A.store.Bool(ptr + 1320 + 26, "UserEditable" in x["TLSVersionMin"] ? true : false);
          A.store.Bool(ptr + 1320 + 24, x["TLSVersionMin"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 1320 + 27, "DeviceEditable" in x["TLSVersionMin"] ? true : false);
          A.store.Bool(ptr + 1320 + 25, x["TLSVersionMin"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["UserAuthenticationType"] === "undefined") {
          A.store.Bool(ptr + 1352 + 28, false);
          A.store.Ref(ptr + 1352 + 0, undefined);
          A.store.Ref(ptr + 1352 + 4, undefined);
          A.store.Ref(ptr + 1352 + 8, undefined);
          A.store.Ref(ptr + 1352 + 12, undefined);
          A.store.Ref(ptr + 1352 + 16, undefined);
          A.store.Ref(ptr + 1352 + 20, undefined);
          A.store.Bool(ptr + 1352 + 26, false);
          A.store.Bool(ptr + 1352 + 24, false);
          A.store.Bool(ptr + 1352 + 27, false);
          A.store.Bool(ptr + 1352 + 25, false);
        } else {
          A.store.Bool(ptr + 1352 + 28, true);
          A.store.Ref(ptr + 1352 + 0, x["UserAuthenticationType"]["Active"]);
          A.store.Ref(ptr + 1352 + 4, x["UserAuthenticationType"]["Effective"]);
          A.store.Ref(ptr + 1352 + 8, x["UserAuthenticationType"]["UserPolicy"]);
          A.store.Ref(ptr + 1352 + 12, x["UserAuthenticationType"]["DevicePolicy"]);
          A.store.Ref(ptr + 1352 + 16, x["UserAuthenticationType"]["UserSetting"]);
          A.store.Ref(ptr + 1352 + 20, x["UserAuthenticationType"]["SharedSetting"]);
          A.store.Bool(ptr + 1352 + 26, "UserEditable" in x["UserAuthenticationType"] ? true : false);
          A.store.Bool(ptr + 1352 + 24, x["UserAuthenticationType"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 1352 + 27, "DeviceEditable" in x["UserAuthenticationType"] ? true : false);
          A.store.Bool(ptr + 1352 + 25, x["UserAuthenticationType"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["Username"] === "undefined") {
          A.store.Bool(ptr + 1384 + 28, false);
          A.store.Ref(ptr + 1384 + 0, undefined);
          A.store.Ref(ptr + 1384 + 4, undefined);
          A.store.Ref(ptr + 1384 + 8, undefined);
          A.store.Ref(ptr + 1384 + 12, undefined);
          A.store.Ref(ptr + 1384 + 16, undefined);
          A.store.Ref(ptr + 1384 + 20, undefined);
          A.store.Bool(ptr + 1384 + 26, false);
          A.store.Bool(ptr + 1384 + 24, false);
          A.store.Bool(ptr + 1384 + 27, false);
          A.store.Bool(ptr + 1384 + 25, false);
        } else {
          A.store.Bool(ptr + 1384 + 28, true);
          A.store.Ref(ptr + 1384 + 0, x["Username"]["Active"]);
          A.store.Ref(ptr + 1384 + 4, x["Username"]["Effective"]);
          A.store.Ref(ptr + 1384 + 8, x["Username"]["UserPolicy"]);
          A.store.Ref(ptr + 1384 + 12, x["Username"]["DevicePolicy"]);
          A.store.Ref(ptr + 1384 + 16, x["Username"]["UserSetting"]);
          A.store.Ref(ptr + 1384 + 20, x["Username"]["SharedSetting"]);
          A.store.Bool(ptr + 1384 + 26, "UserEditable" in x["Username"] ? true : false);
          A.store.Bool(ptr + 1384 + 24, x["Username"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 1384 + 27, "DeviceEditable" in x["Username"] ? true : false);
          A.store.Bool(ptr + 1384 + 25, x["Username"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["Verb"] === "undefined") {
          A.store.Bool(ptr + 1416 + 28, false);
          A.store.Ref(ptr + 1416 + 0, undefined);
          A.store.Ref(ptr + 1416 + 4, undefined);
          A.store.Ref(ptr + 1416 + 8, undefined);
          A.store.Ref(ptr + 1416 + 12, undefined);
          A.store.Ref(ptr + 1416 + 16, undefined);
          A.store.Ref(ptr + 1416 + 20, undefined);
          A.store.Bool(ptr + 1416 + 26, false);
          A.store.Bool(ptr + 1416 + 24, false);
          A.store.Bool(ptr + 1416 + 27, false);
          A.store.Bool(ptr + 1416 + 25, false);
        } else {
          A.store.Bool(ptr + 1416 + 28, true);
          A.store.Ref(ptr + 1416 + 0, x["Verb"]["Active"]);
          A.store.Ref(ptr + 1416 + 4, x["Verb"]["Effective"]);
          A.store.Ref(ptr + 1416 + 8, x["Verb"]["UserPolicy"]);
          A.store.Ref(ptr + 1416 + 12, x["Verb"]["DevicePolicy"]);
          A.store.Ref(ptr + 1416 + 16, x["Verb"]["UserSetting"]);
          A.store.Ref(ptr + 1416 + 20, x["Verb"]["SharedSetting"]);
          A.store.Bool(ptr + 1416 + 26, "UserEditable" in x["Verb"] ? true : false);
          A.store.Bool(ptr + 1416 + 24, x["Verb"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 1416 + 27, "DeviceEditable" in x["Verb"] ? true : false);
          A.store.Bool(ptr + 1416 + 25, x["Verb"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["VerifyHash"] === "undefined") {
          A.store.Bool(ptr + 1448 + 28, false);
          A.store.Ref(ptr + 1448 + 0, undefined);
          A.store.Ref(ptr + 1448 + 4, undefined);
          A.store.Ref(ptr + 1448 + 8, undefined);
          A.store.Ref(ptr + 1448 + 12, undefined);
          A.store.Ref(ptr + 1448 + 16, undefined);
          A.store.Ref(ptr + 1448 + 20, undefined);
          A.store.Bool(ptr + 1448 + 26, false);
          A.store.Bool(ptr + 1448 + 24, false);
          A.store.Bool(ptr + 1448 + 27, false);
          A.store.Bool(ptr + 1448 + 25, false);
        } else {
          A.store.Bool(ptr + 1448 + 28, true);
          A.store.Ref(ptr + 1448 + 0, x["VerifyHash"]["Active"]);
          A.store.Ref(ptr + 1448 + 4, x["VerifyHash"]["Effective"]);
          A.store.Ref(ptr + 1448 + 8, x["VerifyHash"]["UserPolicy"]);
          A.store.Ref(ptr + 1448 + 12, x["VerifyHash"]["DevicePolicy"]);
          A.store.Ref(ptr + 1448 + 16, x["VerifyHash"]["UserSetting"]);
          A.store.Ref(ptr + 1448 + 20, x["VerifyHash"]["SharedSetting"]);
          A.store.Bool(ptr + 1448 + 26, "UserEditable" in x["VerifyHash"] ? true : false);
          A.store.Bool(ptr + 1448 + 24, x["VerifyHash"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 1448 + 27, "DeviceEditable" in x["VerifyHash"] ? true : false);
          A.store.Bool(ptr + 1448 + 25, x["VerifyHash"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["VerifyX509"] === "undefined") {
          A.store.Bool(ptr + 1480 + 61, false);

          A.store.Bool(ptr + 1480 + 0 + 28, false);
          A.store.Ref(ptr + 1480 + 0 + 0, undefined);
          A.store.Ref(ptr + 1480 + 0 + 4, undefined);
          A.store.Ref(ptr + 1480 + 0 + 8, undefined);
          A.store.Ref(ptr + 1480 + 0 + 12, undefined);
          A.store.Ref(ptr + 1480 + 0 + 16, undefined);
          A.store.Ref(ptr + 1480 + 0 + 20, undefined);
          A.store.Bool(ptr + 1480 + 0 + 26, false);
          A.store.Bool(ptr + 1480 + 0 + 24, false);
          A.store.Bool(ptr + 1480 + 0 + 27, false);
          A.store.Bool(ptr + 1480 + 0 + 25, false);

          A.store.Bool(ptr + 1480 + 32 + 28, false);
          A.store.Ref(ptr + 1480 + 32 + 0, undefined);
          A.store.Ref(ptr + 1480 + 32 + 4, undefined);
          A.store.Ref(ptr + 1480 + 32 + 8, undefined);
          A.store.Ref(ptr + 1480 + 32 + 12, undefined);
          A.store.Ref(ptr + 1480 + 32 + 16, undefined);
          A.store.Ref(ptr + 1480 + 32 + 20, undefined);
          A.store.Bool(ptr + 1480 + 32 + 26, false);
          A.store.Bool(ptr + 1480 + 32 + 24, false);
          A.store.Bool(ptr + 1480 + 32 + 27, false);
          A.store.Bool(ptr + 1480 + 32 + 25, false);
        } else {
          A.store.Bool(ptr + 1480 + 61, true);

          if (typeof x["VerifyX509"]["Name"] === "undefined") {
            A.store.Bool(ptr + 1480 + 0 + 28, false);
            A.store.Ref(ptr + 1480 + 0 + 0, undefined);
            A.store.Ref(ptr + 1480 + 0 + 4, undefined);
            A.store.Ref(ptr + 1480 + 0 + 8, undefined);
            A.store.Ref(ptr + 1480 + 0 + 12, undefined);
            A.store.Ref(ptr + 1480 + 0 + 16, undefined);
            A.store.Ref(ptr + 1480 + 0 + 20, undefined);
            A.store.Bool(ptr + 1480 + 0 + 26, false);
            A.store.Bool(ptr + 1480 + 0 + 24, false);
            A.store.Bool(ptr + 1480 + 0 + 27, false);
            A.store.Bool(ptr + 1480 + 0 + 25, false);
          } else {
            A.store.Bool(ptr + 1480 + 0 + 28, true);
            A.store.Ref(ptr + 1480 + 0 + 0, x["VerifyX509"]["Name"]["Active"]);
            A.store.Ref(ptr + 1480 + 0 + 4, x["VerifyX509"]["Name"]["Effective"]);
            A.store.Ref(ptr + 1480 + 0 + 8, x["VerifyX509"]["Name"]["UserPolicy"]);
            A.store.Ref(ptr + 1480 + 0 + 12, x["VerifyX509"]["Name"]["DevicePolicy"]);
            A.store.Ref(ptr + 1480 + 0 + 16, x["VerifyX509"]["Name"]["UserSetting"]);
            A.store.Ref(ptr + 1480 + 0 + 20, x["VerifyX509"]["Name"]["SharedSetting"]);
            A.store.Bool(ptr + 1480 + 0 + 26, "UserEditable" in x["VerifyX509"]["Name"] ? true : false);
            A.store.Bool(ptr + 1480 + 0 + 24, x["VerifyX509"]["Name"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1480 + 0 + 27, "DeviceEditable" in x["VerifyX509"]["Name"] ? true : false);
            A.store.Bool(ptr + 1480 + 0 + 25, x["VerifyX509"]["Name"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["VerifyX509"]["Type"] === "undefined") {
            A.store.Bool(ptr + 1480 + 32 + 28, false);
            A.store.Ref(ptr + 1480 + 32 + 0, undefined);
            A.store.Ref(ptr + 1480 + 32 + 4, undefined);
            A.store.Ref(ptr + 1480 + 32 + 8, undefined);
            A.store.Ref(ptr + 1480 + 32 + 12, undefined);
            A.store.Ref(ptr + 1480 + 32 + 16, undefined);
            A.store.Ref(ptr + 1480 + 32 + 20, undefined);
            A.store.Bool(ptr + 1480 + 32 + 26, false);
            A.store.Bool(ptr + 1480 + 32 + 24, false);
            A.store.Bool(ptr + 1480 + 32 + 27, false);
            A.store.Bool(ptr + 1480 + 32 + 25, false);
          } else {
            A.store.Bool(ptr + 1480 + 32 + 28, true);
            A.store.Ref(ptr + 1480 + 32 + 0, x["VerifyX509"]["Type"]["Active"]);
            A.store.Ref(ptr + 1480 + 32 + 4, x["VerifyX509"]["Type"]["Effective"]);
            A.store.Ref(ptr + 1480 + 32 + 8, x["VerifyX509"]["Type"]["UserPolicy"]);
            A.store.Ref(ptr + 1480 + 32 + 12, x["VerifyX509"]["Type"]["DevicePolicy"]);
            A.store.Ref(ptr + 1480 + 32 + 16, x["VerifyX509"]["Type"]["UserSetting"]);
            A.store.Ref(ptr + 1480 + 32 + 20, x["VerifyX509"]["Type"]["SharedSetting"]);
            A.store.Bool(ptr + 1480 + 32 + 26, "UserEditable" in x["VerifyX509"]["Type"] ? true : false);
            A.store.Bool(ptr + 1480 + 32 + 24, x["VerifyX509"]["Type"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1480 + 32 + 27, "DeviceEditable" in x["VerifyX509"]["Type"] ? true : false);
            A.store.Bool(ptr + 1480 + 32 + 25, x["VerifyX509"]["Type"]["DeviceEditable"] ? true : false);
          }
        }
      }
    },
    "load_ManagedOpenVPNProperties": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      if (A.load.Bool(ptr + 0 + 28)) {
        x["Auth"] = {};
        x["Auth"]["Active"] = A.load.Ref(ptr + 0 + 0, undefined);
        x["Auth"]["Effective"] = A.load.Ref(ptr + 0 + 4, undefined);
        x["Auth"]["UserPolicy"] = A.load.Ref(ptr + 0 + 8, undefined);
        x["Auth"]["DevicePolicy"] = A.load.Ref(ptr + 0 + 12, undefined);
        x["Auth"]["UserSetting"] = A.load.Ref(ptr + 0 + 16, undefined);
        x["Auth"]["SharedSetting"] = A.load.Ref(ptr + 0 + 20, undefined);
        if (A.load.Bool(ptr + 0 + 26)) {
          x["Auth"]["UserEditable"] = A.load.Bool(ptr + 0 + 24);
        } else {
          delete x["Auth"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 0 + 27)) {
          x["Auth"]["DeviceEditable"] = A.load.Bool(ptr + 0 + 25);
        } else {
          delete x["Auth"]["DeviceEditable"];
        }
      } else {
        delete x["Auth"];
      }
      if (A.load.Bool(ptr + 32 + 28)) {
        x["AuthRetry"] = {};
        x["AuthRetry"]["Active"] = A.load.Ref(ptr + 32 + 0, undefined);
        x["AuthRetry"]["Effective"] = A.load.Ref(ptr + 32 + 4, undefined);
        x["AuthRetry"]["UserPolicy"] = A.load.Ref(ptr + 32 + 8, undefined);
        x["AuthRetry"]["DevicePolicy"] = A.load.Ref(ptr + 32 + 12, undefined);
        x["AuthRetry"]["UserSetting"] = A.load.Ref(ptr + 32 + 16, undefined);
        x["AuthRetry"]["SharedSetting"] = A.load.Ref(ptr + 32 + 20, undefined);
        if (A.load.Bool(ptr + 32 + 26)) {
          x["AuthRetry"]["UserEditable"] = A.load.Bool(ptr + 32 + 24);
        } else {
          delete x["AuthRetry"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 32 + 27)) {
          x["AuthRetry"]["DeviceEditable"] = A.load.Bool(ptr + 32 + 25);
        } else {
          delete x["AuthRetry"]["DeviceEditable"];
        }
      } else {
        delete x["AuthRetry"];
      }
      if (A.load.Bool(ptr + 64 + 21)) {
        x["AuthNoCache"] = {};
        if (A.load.Bool(ptr + 64 + 14)) {
          x["AuthNoCache"]["Active"] = A.load.Bool(ptr + 64 + 0);
        } else {
          delete x["AuthNoCache"]["Active"];
        }
        x["AuthNoCache"]["Effective"] = A.load.Ref(ptr + 64 + 4, undefined);
        if (A.load.Bool(ptr + 64 + 15)) {
          x["AuthNoCache"]["UserPolicy"] = A.load.Bool(ptr + 64 + 8);
        } else {
          delete x["AuthNoCache"]["UserPolicy"];
        }
        if (A.load.Bool(ptr + 64 + 16)) {
          x["AuthNoCache"]["DevicePolicy"] = A.load.Bool(ptr + 64 + 9);
        } else {
          delete x["AuthNoCache"]["DevicePolicy"];
        }
        if (A.load.Bool(ptr + 64 + 17)) {
          x["AuthNoCache"]["UserSetting"] = A.load.Bool(ptr + 64 + 10);
        } else {
          delete x["AuthNoCache"]["UserSetting"];
        }
        if (A.load.Bool(ptr + 64 + 18)) {
          x["AuthNoCache"]["SharedSetting"] = A.load.Bool(ptr + 64 + 11);
        } else {
          delete x["AuthNoCache"]["SharedSetting"];
        }
        if (A.load.Bool(ptr + 64 + 19)) {
          x["AuthNoCache"]["UserEditable"] = A.load.Bool(ptr + 64 + 12);
        } else {
          delete x["AuthNoCache"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 64 + 20)) {
          x["AuthNoCache"]["DeviceEditable"] = A.load.Bool(ptr + 64 + 13);
        } else {
          delete x["AuthNoCache"]["DeviceEditable"];
        }
      } else {
        delete x["AuthNoCache"];
      }
      if (A.load.Bool(ptr + 88 + 28)) {
        x["Cipher"] = {};
        x["Cipher"]["Active"] = A.load.Ref(ptr + 88 + 0, undefined);
        x["Cipher"]["Effective"] = A.load.Ref(ptr + 88 + 4, undefined);
        x["Cipher"]["UserPolicy"] = A.load.Ref(ptr + 88 + 8, undefined);
        x["Cipher"]["DevicePolicy"] = A.load.Ref(ptr + 88 + 12, undefined);
        x["Cipher"]["UserSetting"] = A.load.Ref(ptr + 88 + 16, undefined);
        x["Cipher"]["SharedSetting"] = A.load.Ref(ptr + 88 + 20, undefined);
        if (A.load.Bool(ptr + 88 + 26)) {
          x["Cipher"]["UserEditable"] = A.load.Bool(ptr + 88 + 24);
        } else {
          delete x["Cipher"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 88 + 27)) {
          x["Cipher"]["DeviceEditable"] = A.load.Bool(ptr + 88 + 25);
        } else {
          delete x["Cipher"]["DeviceEditable"];
        }
      } else {
        delete x["Cipher"];
      }
      if (A.load.Bool(ptr + 120 + 28)) {
        x["ClientCertPKCS11Id"] = {};
        x["ClientCertPKCS11Id"]["Active"] = A.load.Ref(ptr + 120 + 0, undefined);
        x["ClientCertPKCS11Id"]["Effective"] = A.load.Ref(ptr + 120 + 4, undefined);
        x["ClientCertPKCS11Id"]["UserPolicy"] = A.load.Ref(ptr + 120 + 8, undefined);
        x["ClientCertPKCS11Id"]["DevicePolicy"] = A.load.Ref(ptr + 120 + 12, undefined);
        x["ClientCertPKCS11Id"]["UserSetting"] = A.load.Ref(ptr + 120 + 16, undefined);
        x["ClientCertPKCS11Id"]["SharedSetting"] = A.load.Ref(ptr + 120 + 20, undefined);
        if (A.load.Bool(ptr + 120 + 26)) {
          x["ClientCertPKCS11Id"]["UserEditable"] = A.load.Bool(ptr + 120 + 24);
        } else {
          delete x["ClientCertPKCS11Id"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 120 + 27)) {
          x["ClientCertPKCS11Id"]["DeviceEditable"] = A.load.Bool(ptr + 120 + 25);
        } else {
          delete x["ClientCertPKCS11Id"]["DeviceEditable"];
        }
      } else {
        delete x["ClientCertPKCS11Id"];
      }
      if (A.load.Bool(ptr + 152 + 318)) {
        x["ClientCertPattern"] = {};
        if (A.load.Bool(ptr + 152 + 0 + 28)) {
          x["ClientCertPattern"]["EnrollmentURI"] = {};
          x["ClientCertPattern"]["EnrollmentURI"]["Active"] = A.load.Ref(ptr + 152 + 0 + 0, undefined);
          x["ClientCertPattern"]["EnrollmentURI"]["Effective"] = A.load.Ref(ptr + 152 + 0 + 4, undefined);
          x["ClientCertPattern"]["EnrollmentURI"]["UserPolicy"] = A.load.Ref(ptr + 152 + 0 + 8, undefined);
          x["ClientCertPattern"]["EnrollmentURI"]["DevicePolicy"] = A.load.Ref(ptr + 152 + 0 + 12, undefined);
          x["ClientCertPattern"]["EnrollmentURI"]["UserSetting"] = A.load.Ref(ptr + 152 + 0 + 16, undefined);
          x["ClientCertPattern"]["EnrollmentURI"]["SharedSetting"] = A.load.Ref(ptr + 152 + 0 + 20, undefined);
          if (A.load.Bool(ptr + 152 + 0 + 26)) {
            x["ClientCertPattern"]["EnrollmentURI"]["UserEditable"] = A.load.Bool(ptr + 152 + 0 + 24);
          } else {
            delete x["ClientCertPattern"]["EnrollmentURI"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 152 + 0 + 27)) {
            x["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"] = A.load.Bool(ptr + 152 + 0 + 25);
          } else {
            delete x["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"];
          }
        } else {
          delete x["ClientCertPattern"]["EnrollmentURI"];
        }
        if (A.load.Bool(ptr + 152 + 32 + 125)) {
          x["ClientCertPattern"]["Issuer"] = {};
          if (A.load.Bool(ptr + 152 + 32 + 0 + 28)) {
            x["ClientCertPattern"]["Issuer"]["CommonName"] = {};
            x["ClientCertPattern"]["Issuer"]["CommonName"]["Active"] = A.load.Ref(ptr + 152 + 32 + 0 + 0, undefined);
            x["ClientCertPattern"]["Issuer"]["CommonName"]["Effective"] = A.load.Ref(ptr + 152 + 32 + 0 + 4, undefined);
            x["ClientCertPattern"]["Issuer"]["CommonName"]["UserPolicy"] = A.load.Ref(
              ptr + 152 + 32 + 0 + 8,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["CommonName"]["DevicePolicy"] = A.load.Ref(
              ptr + 152 + 32 + 0 + 12,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["CommonName"]["UserSetting"] = A.load.Ref(
              ptr + 152 + 32 + 0 + 16,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["CommonName"]["SharedSetting"] = A.load.Ref(
              ptr + 152 + 32 + 0 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 152 + 32 + 0 + 26)) {
              x["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"] = A.load.Bool(ptr + 152 + 32 + 0 + 24);
            } else {
              delete x["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 152 + 32 + 0 + 27)) {
              x["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"] = A.load.Bool(ptr + 152 + 32 + 0 + 25);
            } else {
              delete x["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"];
            }
          } else {
            delete x["ClientCertPattern"]["Issuer"]["CommonName"];
          }
          if (A.load.Bool(ptr + 152 + 32 + 32 + 28)) {
            x["ClientCertPattern"]["Issuer"]["Locality"] = {};
            x["ClientCertPattern"]["Issuer"]["Locality"]["Active"] = A.load.Ref(ptr + 152 + 32 + 32 + 0, undefined);
            x["ClientCertPattern"]["Issuer"]["Locality"]["Effective"] = A.load.Ref(ptr + 152 + 32 + 32 + 4, undefined);
            x["ClientCertPattern"]["Issuer"]["Locality"]["UserPolicy"] = A.load.Ref(ptr + 152 + 32 + 32 + 8, undefined);
            x["ClientCertPattern"]["Issuer"]["Locality"]["DevicePolicy"] = A.load.Ref(
              ptr + 152 + 32 + 32 + 12,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["Locality"]["UserSetting"] = A.load.Ref(
              ptr + 152 + 32 + 32 + 16,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["Locality"]["SharedSetting"] = A.load.Ref(
              ptr + 152 + 32 + 32 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 152 + 32 + 32 + 26)) {
              x["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"] = A.load.Bool(ptr + 152 + 32 + 32 + 24);
            } else {
              delete x["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 152 + 32 + 32 + 27)) {
              x["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"] = A.load.Bool(ptr + 152 + 32 + 32 + 25);
            } else {
              delete x["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"];
            }
          } else {
            delete x["ClientCertPattern"]["Issuer"]["Locality"];
          }
          if (A.load.Bool(ptr + 152 + 32 + 64 + 28)) {
            x["ClientCertPattern"]["Issuer"]["Organization"] = {};
            x["ClientCertPattern"]["Issuer"]["Organization"]["Active"] = A.load.Ref(ptr + 152 + 32 + 64 + 0, undefined);
            x["ClientCertPattern"]["Issuer"]["Organization"]["Effective"] = A.load.Ref(
              ptr + 152 + 32 + 64 + 4,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["Organization"]["UserPolicy"] = A.load.Ref(
              ptr + 152 + 32 + 64 + 8,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["Organization"]["DevicePolicy"] = A.load.Ref(
              ptr + 152 + 32 + 64 + 12,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["Organization"]["UserSetting"] = A.load.Ref(
              ptr + 152 + 32 + 64 + 16,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["Organization"]["SharedSetting"] = A.load.Ref(
              ptr + 152 + 32 + 64 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 152 + 32 + 64 + 26)) {
              x["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"] = A.load.Bool(ptr + 152 + 32 + 64 + 24);
            } else {
              delete x["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 152 + 32 + 64 + 27)) {
              x["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"] = A.load.Bool(
                ptr + 152 + 32 + 64 + 25
              );
            } else {
              delete x["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"];
            }
          } else {
            delete x["ClientCertPattern"]["Issuer"]["Organization"];
          }
          if (A.load.Bool(ptr + 152 + 32 + 96 + 28)) {
            x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = {};
            x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Active"] = A.load.Ref(
              ptr + 152 + 32 + 96 + 0,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Effective"] = A.load.Ref(
              ptr + 152 + 32 + 96 + 4,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserPolicy"] = A.load.Ref(
              ptr + 152 + 32 + 96 + 8,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DevicePolicy"] = A.load.Ref(
              ptr + 152 + 32 + 96 + 12,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserSetting"] = A.load.Ref(
              ptr + 152 + 32 + 96 + 16,
              undefined
            );
            x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["SharedSetting"] = A.load.Ref(
              ptr + 152 + 32 + 96 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 152 + 32 + 96 + 26)) {
              x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"] = A.load.Bool(
                ptr + 152 + 32 + 96 + 24
              );
            } else {
              delete x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 152 + 32 + 96 + 27)) {
              x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"] = A.load.Bool(
                ptr + 152 + 32 + 96 + 25
              );
            } else {
              delete x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"];
            }
          } else {
            delete x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"];
          }
        } else {
          delete x["ClientCertPattern"]["Issuer"];
        }
        if (A.load.Bool(ptr + 152 + 160 + 28)) {
          x["ClientCertPattern"]["IssuerCARef"] = {};
          x["ClientCertPattern"]["IssuerCARef"]["Active"] = A.load.Ref(ptr + 152 + 160 + 0, undefined);
          x["ClientCertPattern"]["IssuerCARef"]["Effective"] = A.load.Ref(ptr + 152 + 160 + 4, undefined);
          x["ClientCertPattern"]["IssuerCARef"]["UserPolicy"] = A.load.Ref(ptr + 152 + 160 + 8, undefined);
          x["ClientCertPattern"]["IssuerCARef"]["DevicePolicy"] = A.load.Ref(ptr + 152 + 160 + 12, undefined);
          x["ClientCertPattern"]["IssuerCARef"]["UserSetting"] = A.load.Ref(ptr + 152 + 160 + 16, undefined);
          x["ClientCertPattern"]["IssuerCARef"]["SharedSetting"] = A.load.Ref(ptr + 152 + 160 + 20, undefined);
          if (A.load.Bool(ptr + 152 + 160 + 26)) {
            x["ClientCertPattern"]["IssuerCARef"]["UserEditable"] = A.load.Bool(ptr + 152 + 160 + 24);
          } else {
            delete x["ClientCertPattern"]["IssuerCARef"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 152 + 160 + 27)) {
            x["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"] = A.load.Bool(ptr + 152 + 160 + 25);
          } else {
            delete x["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"];
          }
        } else {
          delete x["ClientCertPattern"]["IssuerCARef"];
        }
        if (A.load.Bool(ptr + 152 + 192 + 125)) {
          x["ClientCertPattern"]["Subject"] = {};
          if (A.load.Bool(ptr + 152 + 192 + 0 + 28)) {
            x["ClientCertPattern"]["Subject"]["CommonName"] = {};
            x["ClientCertPattern"]["Subject"]["CommonName"]["Active"] = A.load.Ref(ptr + 152 + 192 + 0 + 0, undefined);
            x["ClientCertPattern"]["Subject"]["CommonName"]["Effective"] = A.load.Ref(
              ptr + 152 + 192 + 0 + 4,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["CommonName"]["UserPolicy"] = A.load.Ref(
              ptr + 152 + 192 + 0 + 8,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["CommonName"]["DevicePolicy"] = A.load.Ref(
              ptr + 152 + 192 + 0 + 12,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["CommonName"]["UserSetting"] = A.load.Ref(
              ptr + 152 + 192 + 0 + 16,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["CommonName"]["SharedSetting"] = A.load.Ref(
              ptr + 152 + 192 + 0 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 152 + 192 + 0 + 26)) {
              x["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"] = A.load.Bool(ptr + 152 + 192 + 0 + 24);
            } else {
              delete x["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 152 + 192 + 0 + 27)) {
              x["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"] = A.load.Bool(ptr + 152 + 192 + 0 + 25);
            } else {
              delete x["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"];
            }
          } else {
            delete x["ClientCertPattern"]["Subject"]["CommonName"];
          }
          if (A.load.Bool(ptr + 152 + 192 + 32 + 28)) {
            x["ClientCertPattern"]["Subject"]["Locality"] = {};
            x["ClientCertPattern"]["Subject"]["Locality"]["Active"] = A.load.Ref(ptr + 152 + 192 + 32 + 0, undefined);
            x["ClientCertPattern"]["Subject"]["Locality"]["Effective"] = A.load.Ref(
              ptr + 152 + 192 + 32 + 4,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["Locality"]["UserPolicy"] = A.load.Ref(
              ptr + 152 + 192 + 32 + 8,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["Locality"]["DevicePolicy"] = A.load.Ref(
              ptr + 152 + 192 + 32 + 12,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["Locality"]["UserSetting"] = A.load.Ref(
              ptr + 152 + 192 + 32 + 16,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["Locality"]["SharedSetting"] = A.load.Ref(
              ptr + 152 + 192 + 32 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 152 + 192 + 32 + 26)) {
              x["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"] = A.load.Bool(ptr + 152 + 192 + 32 + 24);
            } else {
              delete x["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 152 + 192 + 32 + 27)) {
              x["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"] = A.load.Bool(ptr + 152 + 192 + 32 + 25);
            } else {
              delete x["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"];
            }
          } else {
            delete x["ClientCertPattern"]["Subject"]["Locality"];
          }
          if (A.load.Bool(ptr + 152 + 192 + 64 + 28)) {
            x["ClientCertPattern"]["Subject"]["Organization"] = {};
            x["ClientCertPattern"]["Subject"]["Organization"]["Active"] = A.load.Ref(
              ptr + 152 + 192 + 64 + 0,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["Organization"]["Effective"] = A.load.Ref(
              ptr + 152 + 192 + 64 + 4,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["Organization"]["UserPolicy"] = A.load.Ref(
              ptr + 152 + 192 + 64 + 8,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["Organization"]["DevicePolicy"] = A.load.Ref(
              ptr + 152 + 192 + 64 + 12,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["Organization"]["UserSetting"] = A.load.Ref(
              ptr + 152 + 192 + 64 + 16,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["Organization"]["SharedSetting"] = A.load.Ref(
              ptr + 152 + 192 + 64 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 152 + 192 + 64 + 26)) {
              x["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"] = A.load.Bool(
                ptr + 152 + 192 + 64 + 24
              );
            } else {
              delete x["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 152 + 192 + 64 + 27)) {
              x["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"] = A.load.Bool(
                ptr + 152 + 192 + 64 + 25
              );
            } else {
              delete x["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"];
            }
          } else {
            delete x["ClientCertPattern"]["Subject"]["Organization"];
          }
          if (A.load.Bool(ptr + 152 + 192 + 96 + 28)) {
            x["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = {};
            x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Active"] = A.load.Ref(
              ptr + 152 + 192 + 96 + 0,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Effective"] = A.load.Ref(
              ptr + 152 + 192 + 96 + 4,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserPolicy"] = A.load.Ref(
              ptr + 152 + 192 + 96 + 8,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DevicePolicy"] = A.load.Ref(
              ptr + 152 + 192 + 96 + 12,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserSetting"] = A.load.Ref(
              ptr + 152 + 192 + 96 + 16,
              undefined
            );
            x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["SharedSetting"] = A.load.Ref(
              ptr + 152 + 192 + 96 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 152 + 192 + 96 + 26)) {
              x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"] = A.load.Bool(
                ptr + 152 + 192 + 96 + 24
              );
            } else {
              delete x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 152 + 192 + 96 + 27)) {
              x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"] = A.load.Bool(
                ptr + 152 + 192 + 96 + 25
              );
            } else {
              delete x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"];
            }
          } else {
            delete x["ClientCertPattern"]["Subject"]["OrganizationalUnit"];
          }
        } else {
          delete x["ClientCertPattern"]["Subject"];
        }
      } else {
        delete x["ClientCertPattern"];
      }
      if (A.load.Bool(ptr + 472 + 28)) {
        x["ClientCertProvisioningProfileId"] = {};
        x["ClientCertProvisioningProfileId"]["Active"] = A.load.Ref(ptr + 472 + 0, undefined);
        x["ClientCertProvisioningProfileId"]["Effective"] = A.load.Ref(ptr + 472 + 4, undefined);
        x["ClientCertProvisioningProfileId"]["UserPolicy"] = A.load.Ref(ptr + 472 + 8, undefined);
        x["ClientCertProvisioningProfileId"]["DevicePolicy"] = A.load.Ref(ptr + 472 + 12, undefined);
        x["ClientCertProvisioningProfileId"]["UserSetting"] = A.load.Ref(ptr + 472 + 16, undefined);
        x["ClientCertProvisioningProfileId"]["SharedSetting"] = A.load.Ref(ptr + 472 + 20, undefined);
        if (A.load.Bool(ptr + 472 + 26)) {
          x["ClientCertProvisioningProfileId"]["UserEditable"] = A.load.Bool(ptr + 472 + 24);
        } else {
          delete x["ClientCertProvisioningProfileId"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 472 + 27)) {
          x["ClientCertProvisioningProfileId"]["DeviceEditable"] = A.load.Bool(ptr + 472 + 25);
        } else {
          delete x["ClientCertProvisioningProfileId"]["DeviceEditable"];
        }
      } else {
        delete x["ClientCertProvisioningProfileId"];
      }
      if (A.load.Bool(ptr + 504 + 28)) {
        x["ClientCertRef"] = {};
        x["ClientCertRef"]["Active"] = A.load.Ref(ptr + 504 + 0, undefined);
        x["ClientCertRef"]["Effective"] = A.load.Ref(ptr + 504 + 4, undefined);
        x["ClientCertRef"]["UserPolicy"] = A.load.Ref(ptr + 504 + 8, undefined);
        x["ClientCertRef"]["DevicePolicy"] = A.load.Ref(ptr + 504 + 12, undefined);
        x["ClientCertRef"]["UserSetting"] = A.load.Ref(ptr + 504 + 16, undefined);
        x["ClientCertRef"]["SharedSetting"] = A.load.Ref(ptr + 504 + 20, undefined);
        if (A.load.Bool(ptr + 504 + 26)) {
          x["ClientCertRef"]["UserEditable"] = A.load.Bool(ptr + 504 + 24);
        } else {
          delete x["ClientCertRef"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 504 + 27)) {
          x["ClientCertRef"]["DeviceEditable"] = A.load.Bool(ptr + 504 + 25);
        } else {
          delete x["ClientCertRef"]["DeviceEditable"];
        }
      } else {
        delete x["ClientCertRef"];
      }
      if (A.load.Bool(ptr + 536 + 28)) {
        x["ClientCertType"] = {};
        x["ClientCertType"]["Active"] = A.load.Ref(ptr + 536 + 0, undefined);
        x["ClientCertType"]["Effective"] = A.load.Ref(ptr + 536 + 4, undefined);
        x["ClientCertType"]["UserPolicy"] = A.load.Ref(ptr + 536 + 8, undefined);
        x["ClientCertType"]["DevicePolicy"] = A.load.Ref(ptr + 536 + 12, undefined);
        x["ClientCertType"]["UserSetting"] = A.load.Ref(ptr + 536 + 16, undefined);
        x["ClientCertType"]["SharedSetting"] = A.load.Ref(ptr + 536 + 20, undefined);
        if (A.load.Bool(ptr + 536 + 26)) {
          x["ClientCertType"]["UserEditable"] = A.load.Bool(ptr + 536 + 24);
        } else {
          delete x["ClientCertType"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 536 + 27)) {
          x["ClientCertType"]["DeviceEditable"] = A.load.Bool(ptr + 536 + 25);
        } else {
          delete x["ClientCertType"]["DeviceEditable"];
        }
      } else {
        delete x["ClientCertType"];
      }
      if (A.load.Bool(ptr + 568 + 28)) {
        x["CompLZO"] = {};
        x["CompLZO"]["Active"] = A.load.Ref(ptr + 568 + 0, undefined);
        x["CompLZO"]["Effective"] = A.load.Ref(ptr + 568 + 4, undefined);
        x["CompLZO"]["UserPolicy"] = A.load.Ref(ptr + 568 + 8, undefined);
        x["CompLZO"]["DevicePolicy"] = A.load.Ref(ptr + 568 + 12, undefined);
        x["CompLZO"]["UserSetting"] = A.load.Ref(ptr + 568 + 16, undefined);
        x["CompLZO"]["SharedSetting"] = A.load.Ref(ptr + 568 + 20, undefined);
        if (A.load.Bool(ptr + 568 + 26)) {
          x["CompLZO"]["UserEditable"] = A.load.Bool(ptr + 568 + 24);
        } else {
          delete x["CompLZO"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 568 + 27)) {
          x["CompLZO"]["DeviceEditable"] = A.load.Bool(ptr + 568 + 25);
        } else {
          delete x["CompLZO"]["DeviceEditable"];
        }
      } else {
        delete x["CompLZO"];
      }
      if (A.load.Bool(ptr + 600 + 21)) {
        x["CompNoAdapt"] = {};
        if (A.load.Bool(ptr + 600 + 14)) {
          x["CompNoAdapt"]["Active"] = A.load.Bool(ptr + 600 + 0);
        } else {
          delete x["CompNoAdapt"]["Active"];
        }
        x["CompNoAdapt"]["Effective"] = A.load.Ref(ptr + 600 + 4, undefined);
        if (A.load.Bool(ptr + 600 + 15)) {
          x["CompNoAdapt"]["UserPolicy"] = A.load.Bool(ptr + 600 + 8);
        } else {
          delete x["CompNoAdapt"]["UserPolicy"];
        }
        if (A.load.Bool(ptr + 600 + 16)) {
          x["CompNoAdapt"]["DevicePolicy"] = A.load.Bool(ptr + 600 + 9);
        } else {
          delete x["CompNoAdapt"]["DevicePolicy"];
        }
        if (A.load.Bool(ptr + 600 + 17)) {
          x["CompNoAdapt"]["UserSetting"] = A.load.Bool(ptr + 600 + 10);
        } else {
          delete x["CompNoAdapt"]["UserSetting"];
        }
        if (A.load.Bool(ptr + 600 + 18)) {
          x["CompNoAdapt"]["SharedSetting"] = A.load.Bool(ptr + 600 + 11);
        } else {
          delete x["CompNoAdapt"]["SharedSetting"];
        }
        if (A.load.Bool(ptr + 600 + 19)) {
          x["CompNoAdapt"]["UserEditable"] = A.load.Bool(ptr + 600 + 12);
        } else {
          delete x["CompNoAdapt"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 600 + 20)) {
          x["CompNoAdapt"]["DeviceEditable"] = A.load.Bool(ptr + 600 + 13);
        } else {
          delete x["CompNoAdapt"]["DeviceEditable"];
        }
      } else {
        delete x["CompNoAdapt"];
      }
      if (A.load.Bool(ptr + 624 + 28)) {
        x["ExtraHosts"] = {};
        x["ExtraHosts"]["Active"] = A.load.Ref(ptr + 624 + 0, undefined);
        x["ExtraHosts"]["Effective"] = A.load.Ref(ptr + 624 + 4, undefined);
        x["ExtraHosts"]["UserPolicy"] = A.load.Ref(ptr + 624 + 8, undefined);
        x["ExtraHosts"]["DevicePolicy"] = A.load.Ref(ptr + 624 + 12, undefined);
        x["ExtraHosts"]["UserSetting"] = A.load.Ref(ptr + 624 + 16, undefined);
        x["ExtraHosts"]["SharedSetting"] = A.load.Ref(ptr + 624 + 20, undefined);
        if (A.load.Bool(ptr + 624 + 26)) {
          x["ExtraHosts"]["UserEditable"] = A.load.Bool(ptr + 624 + 24);
        } else {
          delete x["ExtraHosts"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 624 + 27)) {
          x["ExtraHosts"]["DeviceEditable"] = A.load.Bool(ptr + 624 + 25);
        } else {
          delete x["ExtraHosts"]["DeviceEditable"];
        }
      } else {
        delete x["ExtraHosts"];
      }
      if (A.load.Bool(ptr + 656 + 21)) {
        x["IgnoreDefaultRoute"] = {};
        if (A.load.Bool(ptr + 656 + 14)) {
          x["IgnoreDefaultRoute"]["Active"] = A.load.Bool(ptr + 656 + 0);
        } else {
          delete x["IgnoreDefaultRoute"]["Active"];
        }
        x["IgnoreDefaultRoute"]["Effective"] = A.load.Ref(ptr + 656 + 4, undefined);
        if (A.load.Bool(ptr + 656 + 15)) {
          x["IgnoreDefaultRoute"]["UserPolicy"] = A.load.Bool(ptr + 656 + 8);
        } else {
          delete x["IgnoreDefaultRoute"]["UserPolicy"];
        }
        if (A.load.Bool(ptr + 656 + 16)) {
          x["IgnoreDefaultRoute"]["DevicePolicy"] = A.load.Bool(ptr + 656 + 9);
        } else {
          delete x["IgnoreDefaultRoute"]["DevicePolicy"];
        }
        if (A.load.Bool(ptr + 656 + 17)) {
          x["IgnoreDefaultRoute"]["UserSetting"] = A.load.Bool(ptr + 656 + 10);
        } else {
          delete x["IgnoreDefaultRoute"]["UserSetting"];
        }
        if (A.load.Bool(ptr + 656 + 18)) {
          x["IgnoreDefaultRoute"]["SharedSetting"] = A.load.Bool(ptr + 656 + 11);
        } else {
          delete x["IgnoreDefaultRoute"]["SharedSetting"];
        }
        if (A.load.Bool(ptr + 656 + 19)) {
          x["IgnoreDefaultRoute"]["UserEditable"] = A.load.Bool(ptr + 656 + 12);
        } else {
          delete x["IgnoreDefaultRoute"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 656 + 20)) {
          x["IgnoreDefaultRoute"]["DeviceEditable"] = A.load.Bool(ptr + 656 + 13);
        } else {
          delete x["IgnoreDefaultRoute"]["DeviceEditable"];
        }
      } else {
        delete x["IgnoreDefaultRoute"];
      }
      if (A.load.Bool(ptr + 680 + 28)) {
        x["KeyDirection"] = {};
        x["KeyDirection"]["Active"] = A.load.Ref(ptr + 680 + 0, undefined);
        x["KeyDirection"]["Effective"] = A.load.Ref(ptr + 680 + 4, undefined);
        x["KeyDirection"]["UserPolicy"] = A.load.Ref(ptr + 680 + 8, undefined);
        x["KeyDirection"]["DevicePolicy"] = A.load.Ref(ptr + 680 + 12, undefined);
        x["KeyDirection"]["UserSetting"] = A.load.Ref(ptr + 680 + 16, undefined);
        x["KeyDirection"]["SharedSetting"] = A.load.Ref(ptr + 680 + 20, undefined);
        if (A.load.Bool(ptr + 680 + 26)) {
          x["KeyDirection"]["UserEditable"] = A.load.Bool(ptr + 680 + 24);
        } else {
          delete x["KeyDirection"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 680 + 27)) {
          x["KeyDirection"]["DeviceEditable"] = A.load.Bool(ptr + 680 + 25);
        } else {
          delete x["KeyDirection"]["DeviceEditable"];
        }
      } else {
        delete x["KeyDirection"];
      }
      if (A.load.Bool(ptr + 712 + 28)) {
        x["NsCertType"] = {};
        x["NsCertType"]["Active"] = A.load.Ref(ptr + 712 + 0, undefined);
        x["NsCertType"]["Effective"] = A.load.Ref(ptr + 712 + 4, undefined);
        x["NsCertType"]["UserPolicy"] = A.load.Ref(ptr + 712 + 8, undefined);
        x["NsCertType"]["DevicePolicy"] = A.load.Ref(ptr + 712 + 12, undefined);
        x["NsCertType"]["UserSetting"] = A.load.Ref(ptr + 712 + 16, undefined);
        x["NsCertType"]["SharedSetting"] = A.load.Ref(ptr + 712 + 20, undefined);
        if (A.load.Bool(ptr + 712 + 26)) {
          x["NsCertType"]["UserEditable"] = A.load.Bool(ptr + 712 + 24);
        } else {
          delete x["NsCertType"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 712 + 27)) {
          x["NsCertType"]["DeviceEditable"] = A.load.Bool(ptr + 712 + 25);
        } else {
          delete x["NsCertType"]["DeviceEditable"];
        }
      } else {
        delete x["NsCertType"];
      }
      if (A.load.Bool(ptr + 744 + 28)) {
        x["OTP"] = {};
        x["OTP"]["Active"] = A.load.Ref(ptr + 744 + 0, undefined);
        x["OTP"]["Effective"] = A.load.Ref(ptr + 744 + 4, undefined);
        x["OTP"]["UserPolicy"] = A.load.Ref(ptr + 744 + 8, undefined);
        x["OTP"]["DevicePolicy"] = A.load.Ref(ptr + 744 + 12, undefined);
        x["OTP"]["UserSetting"] = A.load.Ref(ptr + 744 + 16, undefined);
        x["OTP"]["SharedSetting"] = A.load.Ref(ptr + 744 + 20, undefined);
        if (A.load.Bool(ptr + 744 + 26)) {
          x["OTP"]["UserEditable"] = A.load.Bool(ptr + 744 + 24);
        } else {
          delete x["OTP"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 744 + 27)) {
          x["OTP"]["DeviceEditable"] = A.load.Bool(ptr + 744 + 25);
        } else {
          delete x["OTP"]["DeviceEditable"];
        }
      } else {
        delete x["OTP"];
      }
      if (A.load.Bool(ptr + 776 + 28)) {
        x["Password"] = {};
        x["Password"]["Active"] = A.load.Ref(ptr + 776 + 0, undefined);
        x["Password"]["Effective"] = A.load.Ref(ptr + 776 + 4, undefined);
        x["Password"]["UserPolicy"] = A.load.Ref(ptr + 776 + 8, undefined);
        x["Password"]["DevicePolicy"] = A.load.Ref(ptr + 776 + 12, undefined);
        x["Password"]["UserSetting"] = A.load.Ref(ptr + 776 + 16, undefined);
        x["Password"]["SharedSetting"] = A.load.Ref(ptr + 776 + 20, undefined);
        if (A.load.Bool(ptr + 776 + 26)) {
          x["Password"]["UserEditable"] = A.load.Bool(ptr + 776 + 24);
        } else {
          delete x["Password"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 776 + 27)) {
          x["Password"]["DeviceEditable"] = A.load.Bool(ptr + 776 + 25);
        } else {
          delete x["Password"]["DeviceEditable"];
        }
      } else {
        delete x["Password"];
      }
      if (A.load.Bool(ptr + 808 + 33)) {
        x["Port"] = {};
        if (A.load.Bool(ptr + 808 + 26)) {
          x["Port"]["Active"] = A.load.Int32(ptr + 808 + 0);
        } else {
          delete x["Port"]["Active"];
        }
        x["Port"]["Effective"] = A.load.Ref(ptr + 808 + 4, undefined);
        if (A.load.Bool(ptr + 808 + 27)) {
          x["Port"]["UserPolicy"] = A.load.Int32(ptr + 808 + 8);
        } else {
          delete x["Port"]["UserPolicy"];
        }
        if (A.load.Bool(ptr + 808 + 28)) {
          x["Port"]["DevicePolicy"] = A.load.Int32(ptr + 808 + 12);
        } else {
          delete x["Port"]["DevicePolicy"];
        }
        if (A.load.Bool(ptr + 808 + 29)) {
          x["Port"]["UserSetting"] = A.load.Int32(ptr + 808 + 16);
        } else {
          delete x["Port"]["UserSetting"];
        }
        if (A.load.Bool(ptr + 808 + 30)) {
          x["Port"]["SharedSetting"] = A.load.Int32(ptr + 808 + 20);
        } else {
          delete x["Port"]["SharedSetting"];
        }
        if (A.load.Bool(ptr + 808 + 31)) {
          x["Port"]["UserEditable"] = A.load.Bool(ptr + 808 + 24);
        } else {
          delete x["Port"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 808 + 32)) {
          x["Port"]["DeviceEditable"] = A.load.Bool(ptr + 808 + 25);
        } else {
          delete x["Port"]["DeviceEditable"];
        }
      } else {
        delete x["Port"];
      }
      if (A.load.Bool(ptr + 844 + 28)) {
        x["Proto"] = {};
        x["Proto"]["Active"] = A.load.Ref(ptr + 844 + 0, undefined);
        x["Proto"]["Effective"] = A.load.Ref(ptr + 844 + 4, undefined);
        x["Proto"]["UserPolicy"] = A.load.Ref(ptr + 844 + 8, undefined);
        x["Proto"]["DevicePolicy"] = A.load.Ref(ptr + 844 + 12, undefined);
        x["Proto"]["UserSetting"] = A.load.Ref(ptr + 844 + 16, undefined);
        x["Proto"]["SharedSetting"] = A.load.Ref(ptr + 844 + 20, undefined);
        if (A.load.Bool(ptr + 844 + 26)) {
          x["Proto"]["UserEditable"] = A.load.Bool(ptr + 844 + 24);
        } else {
          delete x["Proto"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 844 + 27)) {
          x["Proto"]["DeviceEditable"] = A.load.Bool(ptr + 844 + 25);
        } else {
          delete x["Proto"]["DeviceEditable"];
        }
      } else {
        delete x["Proto"];
      }
      if (A.load.Bool(ptr + 876 + 21)) {
        x["PushPeerInfo"] = {};
        if (A.load.Bool(ptr + 876 + 14)) {
          x["PushPeerInfo"]["Active"] = A.load.Bool(ptr + 876 + 0);
        } else {
          delete x["PushPeerInfo"]["Active"];
        }
        x["PushPeerInfo"]["Effective"] = A.load.Ref(ptr + 876 + 4, undefined);
        if (A.load.Bool(ptr + 876 + 15)) {
          x["PushPeerInfo"]["UserPolicy"] = A.load.Bool(ptr + 876 + 8);
        } else {
          delete x["PushPeerInfo"]["UserPolicy"];
        }
        if (A.load.Bool(ptr + 876 + 16)) {
          x["PushPeerInfo"]["DevicePolicy"] = A.load.Bool(ptr + 876 + 9);
        } else {
          delete x["PushPeerInfo"]["DevicePolicy"];
        }
        if (A.load.Bool(ptr + 876 + 17)) {
          x["PushPeerInfo"]["UserSetting"] = A.load.Bool(ptr + 876 + 10);
        } else {
          delete x["PushPeerInfo"]["UserSetting"];
        }
        if (A.load.Bool(ptr + 876 + 18)) {
          x["PushPeerInfo"]["SharedSetting"] = A.load.Bool(ptr + 876 + 11);
        } else {
          delete x["PushPeerInfo"]["SharedSetting"];
        }
        if (A.load.Bool(ptr + 876 + 19)) {
          x["PushPeerInfo"]["UserEditable"] = A.load.Bool(ptr + 876 + 12);
        } else {
          delete x["PushPeerInfo"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 876 + 20)) {
          x["PushPeerInfo"]["DeviceEditable"] = A.load.Bool(ptr + 876 + 13);
        } else {
          delete x["PushPeerInfo"]["DeviceEditable"];
        }
      } else {
        delete x["PushPeerInfo"];
      }
      if (A.load.Bool(ptr + 900 + 28)) {
        x["RemoteCertEKU"] = {};
        x["RemoteCertEKU"]["Active"] = A.load.Ref(ptr + 900 + 0, undefined);
        x["RemoteCertEKU"]["Effective"] = A.load.Ref(ptr + 900 + 4, undefined);
        x["RemoteCertEKU"]["UserPolicy"] = A.load.Ref(ptr + 900 + 8, undefined);
        x["RemoteCertEKU"]["DevicePolicy"] = A.load.Ref(ptr + 900 + 12, undefined);
        x["RemoteCertEKU"]["UserSetting"] = A.load.Ref(ptr + 900 + 16, undefined);
        x["RemoteCertEKU"]["SharedSetting"] = A.load.Ref(ptr + 900 + 20, undefined);
        if (A.load.Bool(ptr + 900 + 26)) {
          x["RemoteCertEKU"]["UserEditable"] = A.load.Bool(ptr + 900 + 24);
        } else {
          delete x["RemoteCertEKU"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 900 + 27)) {
          x["RemoteCertEKU"]["DeviceEditable"] = A.load.Bool(ptr + 900 + 25);
        } else {
          delete x["RemoteCertEKU"]["DeviceEditable"];
        }
      } else {
        delete x["RemoteCertEKU"];
      }
      if (A.load.Bool(ptr + 932 + 28)) {
        x["RemoteCertKU"] = {};
        x["RemoteCertKU"]["Active"] = A.load.Ref(ptr + 932 + 0, undefined);
        x["RemoteCertKU"]["Effective"] = A.load.Ref(ptr + 932 + 4, undefined);
        x["RemoteCertKU"]["UserPolicy"] = A.load.Ref(ptr + 932 + 8, undefined);
        x["RemoteCertKU"]["DevicePolicy"] = A.load.Ref(ptr + 932 + 12, undefined);
        x["RemoteCertKU"]["UserSetting"] = A.load.Ref(ptr + 932 + 16, undefined);
        x["RemoteCertKU"]["SharedSetting"] = A.load.Ref(ptr + 932 + 20, undefined);
        if (A.load.Bool(ptr + 932 + 26)) {
          x["RemoteCertKU"]["UserEditable"] = A.load.Bool(ptr + 932 + 24);
        } else {
          delete x["RemoteCertKU"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 932 + 27)) {
          x["RemoteCertKU"]["DeviceEditable"] = A.load.Bool(ptr + 932 + 25);
        } else {
          delete x["RemoteCertKU"]["DeviceEditable"];
        }
      } else {
        delete x["RemoteCertKU"];
      }
      if (A.load.Bool(ptr + 964 + 28)) {
        x["RemoteCertTLS"] = {};
        x["RemoteCertTLS"]["Active"] = A.load.Ref(ptr + 964 + 0, undefined);
        x["RemoteCertTLS"]["Effective"] = A.load.Ref(ptr + 964 + 4, undefined);
        x["RemoteCertTLS"]["UserPolicy"] = A.load.Ref(ptr + 964 + 8, undefined);
        x["RemoteCertTLS"]["DevicePolicy"] = A.load.Ref(ptr + 964 + 12, undefined);
        x["RemoteCertTLS"]["UserSetting"] = A.load.Ref(ptr + 964 + 16, undefined);
        x["RemoteCertTLS"]["SharedSetting"] = A.load.Ref(ptr + 964 + 20, undefined);
        if (A.load.Bool(ptr + 964 + 26)) {
          x["RemoteCertTLS"]["UserEditable"] = A.load.Bool(ptr + 964 + 24);
        } else {
          delete x["RemoteCertTLS"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 964 + 27)) {
          x["RemoteCertTLS"]["DeviceEditable"] = A.load.Bool(ptr + 964 + 25);
        } else {
          delete x["RemoteCertTLS"]["DeviceEditable"];
        }
      } else {
        delete x["RemoteCertTLS"];
      }
      if (A.load.Bool(ptr + 996 + 33)) {
        x["RenegSec"] = {};
        if (A.load.Bool(ptr + 996 + 26)) {
          x["RenegSec"]["Active"] = A.load.Int32(ptr + 996 + 0);
        } else {
          delete x["RenegSec"]["Active"];
        }
        x["RenegSec"]["Effective"] = A.load.Ref(ptr + 996 + 4, undefined);
        if (A.load.Bool(ptr + 996 + 27)) {
          x["RenegSec"]["UserPolicy"] = A.load.Int32(ptr + 996 + 8);
        } else {
          delete x["RenegSec"]["UserPolicy"];
        }
        if (A.load.Bool(ptr + 996 + 28)) {
          x["RenegSec"]["DevicePolicy"] = A.load.Int32(ptr + 996 + 12);
        } else {
          delete x["RenegSec"]["DevicePolicy"];
        }
        if (A.load.Bool(ptr + 996 + 29)) {
          x["RenegSec"]["UserSetting"] = A.load.Int32(ptr + 996 + 16);
        } else {
          delete x["RenegSec"]["UserSetting"];
        }
        if (A.load.Bool(ptr + 996 + 30)) {
          x["RenegSec"]["SharedSetting"] = A.load.Int32(ptr + 996 + 20);
        } else {
          delete x["RenegSec"]["SharedSetting"];
        }
        if (A.load.Bool(ptr + 996 + 31)) {
          x["RenegSec"]["UserEditable"] = A.load.Bool(ptr + 996 + 24);
        } else {
          delete x["RenegSec"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 996 + 32)) {
          x["RenegSec"]["DeviceEditable"] = A.load.Bool(ptr + 996 + 25);
        } else {
          delete x["RenegSec"]["DeviceEditable"];
        }
      } else {
        delete x["RenegSec"];
      }
      if (A.load.Bool(ptr + 1032 + 21)) {
        x["SaveCredentials"] = {};
        if (A.load.Bool(ptr + 1032 + 14)) {
          x["SaveCredentials"]["Active"] = A.load.Bool(ptr + 1032 + 0);
        } else {
          delete x["SaveCredentials"]["Active"];
        }
        x["SaveCredentials"]["Effective"] = A.load.Ref(ptr + 1032 + 4, undefined);
        if (A.load.Bool(ptr + 1032 + 15)) {
          x["SaveCredentials"]["UserPolicy"] = A.load.Bool(ptr + 1032 + 8);
        } else {
          delete x["SaveCredentials"]["UserPolicy"];
        }
        if (A.load.Bool(ptr + 1032 + 16)) {
          x["SaveCredentials"]["DevicePolicy"] = A.load.Bool(ptr + 1032 + 9);
        } else {
          delete x["SaveCredentials"]["DevicePolicy"];
        }
        if (A.load.Bool(ptr + 1032 + 17)) {
          x["SaveCredentials"]["UserSetting"] = A.load.Bool(ptr + 1032 + 10);
        } else {
          delete x["SaveCredentials"]["UserSetting"];
        }
        if (A.load.Bool(ptr + 1032 + 18)) {
          x["SaveCredentials"]["SharedSetting"] = A.load.Bool(ptr + 1032 + 11);
        } else {
          delete x["SaveCredentials"]["SharedSetting"];
        }
        if (A.load.Bool(ptr + 1032 + 19)) {
          x["SaveCredentials"]["UserEditable"] = A.load.Bool(ptr + 1032 + 12);
        } else {
          delete x["SaveCredentials"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 1032 + 20)) {
          x["SaveCredentials"]["DeviceEditable"] = A.load.Bool(ptr + 1032 + 13);
        } else {
          delete x["SaveCredentials"]["DeviceEditable"];
        }
      } else {
        delete x["SaveCredentials"];
      }
      if (A.load.Bool(ptr + 1056 + 28)) {
        x["ServerCAPEMs"] = {};
        x["ServerCAPEMs"]["Active"] = A.load.Ref(ptr + 1056 + 0, undefined);
        x["ServerCAPEMs"]["Effective"] = A.load.Ref(ptr + 1056 + 4, undefined);
        x["ServerCAPEMs"]["UserPolicy"] = A.load.Ref(ptr + 1056 + 8, undefined);
        x["ServerCAPEMs"]["DevicePolicy"] = A.load.Ref(ptr + 1056 + 12, undefined);
        x["ServerCAPEMs"]["UserSetting"] = A.load.Ref(ptr + 1056 + 16, undefined);
        x["ServerCAPEMs"]["SharedSetting"] = A.load.Ref(ptr + 1056 + 20, undefined);
        if (A.load.Bool(ptr + 1056 + 26)) {
          x["ServerCAPEMs"]["UserEditable"] = A.load.Bool(ptr + 1056 + 24);
        } else {
          delete x["ServerCAPEMs"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 1056 + 27)) {
          x["ServerCAPEMs"]["DeviceEditable"] = A.load.Bool(ptr + 1056 + 25);
        } else {
          delete x["ServerCAPEMs"]["DeviceEditable"];
        }
      } else {
        delete x["ServerCAPEMs"];
      }
      if (A.load.Bool(ptr + 1088 + 28)) {
        x["ServerCARefs"] = {};
        x["ServerCARefs"]["Active"] = A.load.Ref(ptr + 1088 + 0, undefined);
        x["ServerCARefs"]["Effective"] = A.load.Ref(ptr + 1088 + 4, undefined);
        x["ServerCARefs"]["UserPolicy"] = A.load.Ref(ptr + 1088 + 8, undefined);
        x["ServerCARefs"]["DevicePolicy"] = A.load.Ref(ptr + 1088 + 12, undefined);
        x["ServerCARefs"]["UserSetting"] = A.load.Ref(ptr + 1088 + 16, undefined);
        x["ServerCARefs"]["SharedSetting"] = A.load.Ref(ptr + 1088 + 20, undefined);
        if (A.load.Bool(ptr + 1088 + 26)) {
          x["ServerCARefs"]["UserEditable"] = A.load.Bool(ptr + 1088 + 24);
        } else {
          delete x["ServerCARefs"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 1088 + 27)) {
          x["ServerCARefs"]["DeviceEditable"] = A.load.Bool(ptr + 1088 + 25);
        } else {
          delete x["ServerCARefs"]["DeviceEditable"];
        }
      } else {
        delete x["ServerCARefs"];
      }
      if (A.load.Bool(ptr + 1120 + 28)) {
        x["ServerCertRef"] = {};
        x["ServerCertRef"]["Active"] = A.load.Ref(ptr + 1120 + 0, undefined);
        x["ServerCertRef"]["Effective"] = A.load.Ref(ptr + 1120 + 4, undefined);
        x["ServerCertRef"]["UserPolicy"] = A.load.Ref(ptr + 1120 + 8, undefined);
        x["ServerCertRef"]["DevicePolicy"] = A.load.Ref(ptr + 1120 + 12, undefined);
        x["ServerCertRef"]["UserSetting"] = A.load.Ref(ptr + 1120 + 16, undefined);
        x["ServerCertRef"]["SharedSetting"] = A.load.Ref(ptr + 1120 + 20, undefined);
        if (A.load.Bool(ptr + 1120 + 26)) {
          x["ServerCertRef"]["UserEditable"] = A.load.Bool(ptr + 1120 + 24);
        } else {
          delete x["ServerCertRef"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 1120 + 27)) {
          x["ServerCertRef"]["DeviceEditable"] = A.load.Bool(ptr + 1120 + 25);
        } else {
          delete x["ServerCertRef"]["DeviceEditable"];
        }
      } else {
        delete x["ServerCertRef"];
      }
      if (A.load.Bool(ptr + 1152 + 33)) {
        x["ServerPollTimeout"] = {};
        if (A.load.Bool(ptr + 1152 + 26)) {
          x["ServerPollTimeout"]["Active"] = A.load.Int32(ptr + 1152 + 0);
        } else {
          delete x["ServerPollTimeout"]["Active"];
        }
        x["ServerPollTimeout"]["Effective"] = A.load.Ref(ptr + 1152 + 4, undefined);
        if (A.load.Bool(ptr + 1152 + 27)) {
          x["ServerPollTimeout"]["UserPolicy"] = A.load.Int32(ptr + 1152 + 8);
        } else {
          delete x["ServerPollTimeout"]["UserPolicy"];
        }
        if (A.load.Bool(ptr + 1152 + 28)) {
          x["ServerPollTimeout"]["DevicePolicy"] = A.load.Int32(ptr + 1152 + 12);
        } else {
          delete x["ServerPollTimeout"]["DevicePolicy"];
        }
        if (A.load.Bool(ptr + 1152 + 29)) {
          x["ServerPollTimeout"]["UserSetting"] = A.load.Int32(ptr + 1152 + 16);
        } else {
          delete x["ServerPollTimeout"]["UserSetting"];
        }
        if (A.load.Bool(ptr + 1152 + 30)) {
          x["ServerPollTimeout"]["SharedSetting"] = A.load.Int32(ptr + 1152 + 20);
        } else {
          delete x["ServerPollTimeout"]["SharedSetting"];
        }
        if (A.load.Bool(ptr + 1152 + 31)) {
          x["ServerPollTimeout"]["UserEditable"] = A.load.Bool(ptr + 1152 + 24);
        } else {
          delete x["ServerPollTimeout"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 1152 + 32)) {
          x["ServerPollTimeout"]["DeviceEditable"] = A.load.Bool(ptr + 1152 + 25);
        } else {
          delete x["ServerPollTimeout"]["DeviceEditable"];
        }
      } else {
        delete x["ServerPollTimeout"];
      }
      if (A.load.Bool(ptr + 1188 + 33)) {
        x["Shaper"] = {};
        if (A.load.Bool(ptr + 1188 + 26)) {
          x["Shaper"]["Active"] = A.load.Int32(ptr + 1188 + 0);
        } else {
          delete x["Shaper"]["Active"];
        }
        x["Shaper"]["Effective"] = A.load.Ref(ptr + 1188 + 4, undefined);
        if (A.load.Bool(ptr + 1188 + 27)) {
          x["Shaper"]["UserPolicy"] = A.load.Int32(ptr + 1188 + 8);
        } else {
          delete x["Shaper"]["UserPolicy"];
        }
        if (A.load.Bool(ptr + 1188 + 28)) {
          x["Shaper"]["DevicePolicy"] = A.load.Int32(ptr + 1188 + 12);
        } else {
          delete x["Shaper"]["DevicePolicy"];
        }
        if (A.load.Bool(ptr + 1188 + 29)) {
          x["Shaper"]["UserSetting"] = A.load.Int32(ptr + 1188 + 16);
        } else {
          delete x["Shaper"]["UserSetting"];
        }
        if (A.load.Bool(ptr + 1188 + 30)) {
          x["Shaper"]["SharedSetting"] = A.load.Int32(ptr + 1188 + 20);
        } else {
          delete x["Shaper"]["SharedSetting"];
        }
        if (A.load.Bool(ptr + 1188 + 31)) {
          x["Shaper"]["UserEditable"] = A.load.Bool(ptr + 1188 + 24);
        } else {
          delete x["Shaper"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 1188 + 32)) {
          x["Shaper"]["DeviceEditable"] = A.load.Bool(ptr + 1188 + 25);
        } else {
          delete x["Shaper"]["DeviceEditable"];
        }
      } else {
        delete x["Shaper"];
      }
      if (A.load.Bool(ptr + 1224 + 28)) {
        x["StaticChallenge"] = {};
        x["StaticChallenge"]["Active"] = A.load.Ref(ptr + 1224 + 0, undefined);
        x["StaticChallenge"]["Effective"] = A.load.Ref(ptr + 1224 + 4, undefined);
        x["StaticChallenge"]["UserPolicy"] = A.load.Ref(ptr + 1224 + 8, undefined);
        x["StaticChallenge"]["DevicePolicy"] = A.load.Ref(ptr + 1224 + 12, undefined);
        x["StaticChallenge"]["UserSetting"] = A.load.Ref(ptr + 1224 + 16, undefined);
        x["StaticChallenge"]["SharedSetting"] = A.load.Ref(ptr + 1224 + 20, undefined);
        if (A.load.Bool(ptr + 1224 + 26)) {
          x["StaticChallenge"]["UserEditable"] = A.load.Bool(ptr + 1224 + 24);
        } else {
          delete x["StaticChallenge"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 1224 + 27)) {
          x["StaticChallenge"]["DeviceEditable"] = A.load.Bool(ptr + 1224 + 25);
        } else {
          delete x["StaticChallenge"]["DeviceEditable"];
        }
      } else {
        delete x["StaticChallenge"];
      }
      if (A.load.Bool(ptr + 1256 + 28)) {
        x["TLSAuthContents"] = {};
        x["TLSAuthContents"]["Active"] = A.load.Ref(ptr + 1256 + 0, undefined);
        x["TLSAuthContents"]["Effective"] = A.load.Ref(ptr + 1256 + 4, undefined);
        x["TLSAuthContents"]["UserPolicy"] = A.load.Ref(ptr + 1256 + 8, undefined);
        x["TLSAuthContents"]["DevicePolicy"] = A.load.Ref(ptr + 1256 + 12, undefined);
        x["TLSAuthContents"]["UserSetting"] = A.load.Ref(ptr + 1256 + 16, undefined);
        x["TLSAuthContents"]["SharedSetting"] = A.load.Ref(ptr + 1256 + 20, undefined);
        if (A.load.Bool(ptr + 1256 + 26)) {
          x["TLSAuthContents"]["UserEditable"] = A.load.Bool(ptr + 1256 + 24);
        } else {
          delete x["TLSAuthContents"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 1256 + 27)) {
          x["TLSAuthContents"]["DeviceEditable"] = A.load.Bool(ptr + 1256 + 25);
        } else {
          delete x["TLSAuthContents"]["DeviceEditable"];
        }
      } else {
        delete x["TLSAuthContents"];
      }
      if (A.load.Bool(ptr + 1288 + 28)) {
        x["TLSRemote"] = {};
        x["TLSRemote"]["Active"] = A.load.Ref(ptr + 1288 + 0, undefined);
        x["TLSRemote"]["Effective"] = A.load.Ref(ptr + 1288 + 4, undefined);
        x["TLSRemote"]["UserPolicy"] = A.load.Ref(ptr + 1288 + 8, undefined);
        x["TLSRemote"]["DevicePolicy"] = A.load.Ref(ptr + 1288 + 12, undefined);
        x["TLSRemote"]["UserSetting"] = A.load.Ref(ptr + 1288 + 16, undefined);
        x["TLSRemote"]["SharedSetting"] = A.load.Ref(ptr + 1288 + 20, undefined);
        if (A.load.Bool(ptr + 1288 + 26)) {
          x["TLSRemote"]["UserEditable"] = A.load.Bool(ptr + 1288 + 24);
        } else {
          delete x["TLSRemote"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 1288 + 27)) {
          x["TLSRemote"]["DeviceEditable"] = A.load.Bool(ptr + 1288 + 25);
        } else {
          delete x["TLSRemote"]["DeviceEditable"];
        }
      } else {
        delete x["TLSRemote"];
      }
      if (A.load.Bool(ptr + 1320 + 28)) {
        x["TLSVersionMin"] = {};
        x["TLSVersionMin"]["Active"] = A.load.Ref(ptr + 1320 + 0, undefined);
        x["TLSVersionMin"]["Effective"] = A.load.Ref(ptr + 1320 + 4, undefined);
        x["TLSVersionMin"]["UserPolicy"] = A.load.Ref(ptr + 1320 + 8, undefined);
        x["TLSVersionMin"]["DevicePolicy"] = A.load.Ref(ptr + 1320 + 12, undefined);
        x["TLSVersionMin"]["UserSetting"] = A.load.Ref(ptr + 1320 + 16, undefined);
        x["TLSVersionMin"]["SharedSetting"] = A.load.Ref(ptr + 1320 + 20, undefined);
        if (A.load.Bool(ptr + 1320 + 26)) {
          x["TLSVersionMin"]["UserEditable"] = A.load.Bool(ptr + 1320 + 24);
        } else {
          delete x["TLSVersionMin"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 1320 + 27)) {
          x["TLSVersionMin"]["DeviceEditable"] = A.load.Bool(ptr + 1320 + 25);
        } else {
          delete x["TLSVersionMin"]["DeviceEditable"];
        }
      } else {
        delete x["TLSVersionMin"];
      }
      if (A.load.Bool(ptr + 1352 + 28)) {
        x["UserAuthenticationType"] = {};
        x["UserAuthenticationType"]["Active"] = A.load.Ref(ptr + 1352 + 0, undefined);
        x["UserAuthenticationType"]["Effective"] = A.load.Ref(ptr + 1352 + 4, undefined);
        x["UserAuthenticationType"]["UserPolicy"] = A.load.Ref(ptr + 1352 + 8, undefined);
        x["UserAuthenticationType"]["DevicePolicy"] = A.load.Ref(ptr + 1352 + 12, undefined);
        x["UserAuthenticationType"]["UserSetting"] = A.load.Ref(ptr + 1352 + 16, undefined);
        x["UserAuthenticationType"]["SharedSetting"] = A.load.Ref(ptr + 1352 + 20, undefined);
        if (A.load.Bool(ptr + 1352 + 26)) {
          x["UserAuthenticationType"]["UserEditable"] = A.load.Bool(ptr + 1352 + 24);
        } else {
          delete x["UserAuthenticationType"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 1352 + 27)) {
          x["UserAuthenticationType"]["DeviceEditable"] = A.load.Bool(ptr + 1352 + 25);
        } else {
          delete x["UserAuthenticationType"]["DeviceEditable"];
        }
      } else {
        delete x["UserAuthenticationType"];
      }
      if (A.load.Bool(ptr + 1384 + 28)) {
        x["Username"] = {};
        x["Username"]["Active"] = A.load.Ref(ptr + 1384 + 0, undefined);
        x["Username"]["Effective"] = A.load.Ref(ptr + 1384 + 4, undefined);
        x["Username"]["UserPolicy"] = A.load.Ref(ptr + 1384 + 8, undefined);
        x["Username"]["DevicePolicy"] = A.load.Ref(ptr + 1384 + 12, undefined);
        x["Username"]["UserSetting"] = A.load.Ref(ptr + 1384 + 16, undefined);
        x["Username"]["SharedSetting"] = A.load.Ref(ptr + 1384 + 20, undefined);
        if (A.load.Bool(ptr + 1384 + 26)) {
          x["Username"]["UserEditable"] = A.load.Bool(ptr + 1384 + 24);
        } else {
          delete x["Username"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 1384 + 27)) {
          x["Username"]["DeviceEditable"] = A.load.Bool(ptr + 1384 + 25);
        } else {
          delete x["Username"]["DeviceEditable"];
        }
      } else {
        delete x["Username"];
      }
      if (A.load.Bool(ptr + 1416 + 28)) {
        x["Verb"] = {};
        x["Verb"]["Active"] = A.load.Ref(ptr + 1416 + 0, undefined);
        x["Verb"]["Effective"] = A.load.Ref(ptr + 1416 + 4, undefined);
        x["Verb"]["UserPolicy"] = A.load.Ref(ptr + 1416 + 8, undefined);
        x["Verb"]["DevicePolicy"] = A.load.Ref(ptr + 1416 + 12, undefined);
        x["Verb"]["UserSetting"] = A.load.Ref(ptr + 1416 + 16, undefined);
        x["Verb"]["SharedSetting"] = A.load.Ref(ptr + 1416 + 20, undefined);
        if (A.load.Bool(ptr + 1416 + 26)) {
          x["Verb"]["UserEditable"] = A.load.Bool(ptr + 1416 + 24);
        } else {
          delete x["Verb"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 1416 + 27)) {
          x["Verb"]["DeviceEditable"] = A.load.Bool(ptr + 1416 + 25);
        } else {
          delete x["Verb"]["DeviceEditable"];
        }
      } else {
        delete x["Verb"];
      }
      if (A.load.Bool(ptr + 1448 + 28)) {
        x["VerifyHash"] = {};
        x["VerifyHash"]["Active"] = A.load.Ref(ptr + 1448 + 0, undefined);
        x["VerifyHash"]["Effective"] = A.load.Ref(ptr + 1448 + 4, undefined);
        x["VerifyHash"]["UserPolicy"] = A.load.Ref(ptr + 1448 + 8, undefined);
        x["VerifyHash"]["DevicePolicy"] = A.load.Ref(ptr + 1448 + 12, undefined);
        x["VerifyHash"]["UserSetting"] = A.load.Ref(ptr + 1448 + 16, undefined);
        x["VerifyHash"]["SharedSetting"] = A.load.Ref(ptr + 1448 + 20, undefined);
        if (A.load.Bool(ptr + 1448 + 26)) {
          x["VerifyHash"]["UserEditable"] = A.load.Bool(ptr + 1448 + 24);
        } else {
          delete x["VerifyHash"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 1448 + 27)) {
          x["VerifyHash"]["DeviceEditable"] = A.load.Bool(ptr + 1448 + 25);
        } else {
          delete x["VerifyHash"]["DeviceEditable"];
        }
      } else {
        delete x["VerifyHash"];
      }
      if (A.load.Bool(ptr + 1480 + 61)) {
        x["VerifyX509"] = {};
        if (A.load.Bool(ptr + 1480 + 0 + 28)) {
          x["VerifyX509"]["Name"] = {};
          x["VerifyX509"]["Name"]["Active"] = A.load.Ref(ptr + 1480 + 0 + 0, undefined);
          x["VerifyX509"]["Name"]["Effective"] = A.load.Ref(ptr + 1480 + 0 + 4, undefined);
          x["VerifyX509"]["Name"]["UserPolicy"] = A.load.Ref(ptr + 1480 + 0 + 8, undefined);
          x["VerifyX509"]["Name"]["DevicePolicy"] = A.load.Ref(ptr + 1480 + 0 + 12, undefined);
          x["VerifyX509"]["Name"]["UserSetting"] = A.load.Ref(ptr + 1480 + 0 + 16, undefined);
          x["VerifyX509"]["Name"]["SharedSetting"] = A.load.Ref(ptr + 1480 + 0 + 20, undefined);
          if (A.load.Bool(ptr + 1480 + 0 + 26)) {
            x["VerifyX509"]["Name"]["UserEditable"] = A.load.Bool(ptr + 1480 + 0 + 24);
          } else {
            delete x["VerifyX509"]["Name"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1480 + 0 + 27)) {
            x["VerifyX509"]["Name"]["DeviceEditable"] = A.load.Bool(ptr + 1480 + 0 + 25);
          } else {
            delete x["VerifyX509"]["Name"]["DeviceEditable"];
          }
        } else {
          delete x["VerifyX509"]["Name"];
        }
        if (A.load.Bool(ptr + 1480 + 32 + 28)) {
          x["VerifyX509"]["Type"] = {};
          x["VerifyX509"]["Type"]["Active"] = A.load.Ref(ptr + 1480 + 32 + 0, undefined);
          x["VerifyX509"]["Type"]["Effective"] = A.load.Ref(ptr + 1480 + 32 + 4, undefined);
          x["VerifyX509"]["Type"]["UserPolicy"] = A.load.Ref(ptr + 1480 + 32 + 8, undefined);
          x["VerifyX509"]["Type"]["DevicePolicy"] = A.load.Ref(ptr + 1480 + 32 + 12, undefined);
          x["VerifyX509"]["Type"]["UserSetting"] = A.load.Ref(ptr + 1480 + 32 + 16, undefined);
          x["VerifyX509"]["Type"]["SharedSetting"] = A.load.Ref(ptr + 1480 + 32 + 20, undefined);
          if (A.load.Bool(ptr + 1480 + 32 + 26)) {
            x["VerifyX509"]["Type"]["UserEditable"] = A.load.Bool(ptr + 1480 + 32 + 24);
          } else {
            delete x["VerifyX509"]["Type"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1480 + 32 + 27)) {
            x["VerifyX509"]["Type"]["DeviceEditable"] = A.load.Bool(ptr + 1480 + 32 + 25);
          } else {
            delete x["VerifyX509"]["Type"]["DeviceEditable"];
          }
        } else {
          delete x["VerifyX509"]["Type"];
        }
      } else {
        delete x["VerifyX509"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_ManagedThirdPartyVPNProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 36, false);

        A.store.Bool(ptr + 0 + 28, false);
        A.store.Ref(ptr + 0 + 0, undefined);
        A.store.Ref(ptr + 0 + 4, undefined);
        A.store.Ref(ptr + 0 + 8, undefined);
        A.store.Ref(ptr + 0 + 12, undefined);
        A.store.Ref(ptr + 0 + 16, undefined);
        A.store.Ref(ptr + 0 + 20, undefined);
        A.store.Bool(ptr + 0 + 26, false);
        A.store.Bool(ptr + 0 + 24, false);
        A.store.Bool(ptr + 0 + 27, false);
        A.store.Bool(ptr + 0 + 25, false);
        A.store.Ref(ptr + 32, undefined);
      } else {
        A.store.Bool(ptr + 36, true);

        if (typeof x["ExtensionID"] === "undefined") {
          A.store.Bool(ptr + 0 + 28, false);
          A.store.Ref(ptr + 0 + 0, undefined);
          A.store.Ref(ptr + 0 + 4, undefined);
          A.store.Ref(ptr + 0 + 8, undefined);
          A.store.Ref(ptr + 0 + 12, undefined);
          A.store.Ref(ptr + 0 + 16, undefined);
          A.store.Ref(ptr + 0 + 20, undefined);
          A.store.Bool(ptr + 0 + 26, false);
          A.store.Bool(ptr + 0 + 24, false);
          A.store.Bool(ptr + 0 + 27, false);
          A.store.Bool(ptr + 0 + 25, false);
        } else {
          A.store.Bool(ptr + 0 + 28, true);
          A.store.Ref(ptr + 0 + 0, x["ExtensionID"]["Active"]);
          A.store.Ref(ptr + 0 + 4, x["ExtensionID"]["Effective"]);
          A.store.Ref(ptr + 0 + 8, x["ExtensionID"]["UserPolicy"]);
          A.store.Ref(ptr + 0 + 12, x["ExtensionID"]["DevicePolicy"]);
          A.store.Ref(ptr + 0 + 16, x["ExtensionID"]["UserSetting"]);
          A.store.Ref(ptr + 0 + 20, x["ExtensionID"]["SharedSetting"]);
          A.store.Bool(ptr + 0 + 26, "UserEditable" in x["ExtensionID"] ? true : false);
          A.store.Bool(ptr + 0 + 24, x["ExtensionID"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 0 + 27, "DeviceEditable" in x["ExtensionID"] ? true : false);
          A.store.Bool(ptr + 0 + 25, x["ExtensionID"]["DeviceEditable"] ? true : false);
        }
        A.store.Ref(ptr + 32, x["ProviderName"]);
      }
    },
    "load_ManagedThirdPartyVPNProperties": (
      ptr: Pointer,
      create: heap.Ref<boolean>,
      ref: heap.Ref<any>
    ): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      if (A.load.Bool(ptr + 0 + 28)) {
        x["ExtensionID"] = {};
        x["ExtensionID"]["Active"] = A.load.Ref(ptr + 0 + 0, undefined);
        x["ExtensionID"]["Effective"] = A.load.Ref(ptr + 0 + 4, undefined);
        x["ExtensionID"]["UserPolicy"] = A.load.Ref(ptr + 0 + 8, undefined);
        x["ExtensionID"]["DevicePolicy"] = A.load.Ref(ptr + 0 + 12, undefined);
        x["ExtensionID"]["UserSetting"] = A.load.Ref(ptr + 0 + 16, undefined);
        x["ExtensionID"]["SharedSetting"] = A.load.Ref(ptr + 0 + 20, undefined);
        if (A.load.Bool(ptr + 0 + 26)) {
          x["ExtensionID"]["UserEditable"] = A.load.Bool(ptr + 0 + 24);
        } else {
          delete x["ExtensionID"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 0 + 27)) {
          x["ExtensionID"]["DeviceEditable"] = A.load.Bool(ptr + 0 + 25);
        } else {
          delete x["ExtensionID"]["DeviceEditable"];
        }
      } else {
        delete x["ExtensionID"];
      }
      x["ProviderName"] = A.load.Ref(ptr + 32, undefined);
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_ManagedVPNProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 3345, false);

        A.store.Bool(ptr + 0 + 21, false);
        A.store.Bool(ptr + 0 + 14, false);
        A.store.Bool(ptr + 0 + 0, false);
        A.store.Ref(ptr + 0 + 4, undefined);
        A.store.Bool(ptr + 0 + 15, false);
        A.store.Bool(ptr + 0 + 8, false);
        A.store.Bool(ptr + 0 + 16, false);
        A.store.Bool(ptr + 0 + 9, false);
        A.store.Bool(ptr + 0 + 17, false);
        A.store.Bool(ptr + 0 + 10, false);
        A.store.Bool(ptr + 0 + 18, false);
        A.store.Bool(ptr + 0 + 11, false);
        A.store.Bool(ptr + 0 + 19, false);
        A.store.Bool(ptr + 0 + 12, false);
        A.store.Bool(ptr + 0 + 20, false);
        A.store.Bool(ptr + 0 + 13, false);

        A.store.Bool(ptr + 24 + 28, false);
        A.store.Ref(ptr + 24 + 0, undefined);
        A.store.Ref(ptr + 24 + 4, undefined);
        A.store.Ref(ptr + 24 + 8, undefined);
        A.store.Ref(ptr + 24 + 12, undefined);
        A.store.Ref(ptr + 24 + 16, undefined);
        A.store.Ref(ptr + 24 + 20, undefined);
        A.store.Bool(ptr + 24 + 26, false);
        A.store.Bool(ptr + 24 + 24, false);
        A.store.Bool(ptr + 24 + 27, false);
        A.store.Bool(ptr + 24 + 25, false);

        A.store.Bool(ptr + 56 + 1562, false);

        A.store.Bool(ptr + 56 + 0 + 28, false);
        A.store.Ref(ptr + 56 + 0 + 0, undefined);
        A.store.Ref(ptr + 56 + 0 + 4, undefined);
        A.store.Ref(ptr + 56 + 0 + 8, undefined);
        A.store.Ref(ptr + 56 + 0 + 12, undefined);
        A.store.Ref(ptr + 56 + 0 + 16, undefined);
        A.store.Ref(ptr + 56 + 0 + 20, undefined);
        A.store.Bool(ptr + 56 + 0 + 26, false);
        A.store.Bool(ptr + 56 + 0 + 24, false);
        A.store.Bool(ptr + 56 + 0 + 27, false);
        A.store.Bool(ptr + 56 + 0 + 25, false);

        A.store.Bool(ptr + 56 + 32 + 318, false);

        A.store.Bool(ptr + 56 + 32 + 0 + 28, false);
        A.store.Ref(ptr + 56 + 32 + 0 + 0, undefined);
        A.store.Ref(ptr + 56 + 32 + 0 + 4, undefined);
        A.store.Ref(ptr + 56 + 32 + 0 + 8, undefined);
        A.store.Ref(ptr + 56 + 32 + 0 + 12, undefined);
        A.store.Ref(ptr + 56 + 32 + 0 + 16, undefined);
        A.store.Ref(ptr + 56 + 32 + 0 + 20, undefined);
        A.store.Bool(ptr + 56 + 32 + 0 + 26, false);
        A.store.Bool(ptr + 56 + 32 + 0 + 24, false);
        A.store.Bool(ptr + 56 + 32 + 0 + 27, false);
        A.store.Bool(ptr + 56 + 32 + 0 + 25, false);

        A.store.Bool(ptr + 56 + 32 + 32 + 125, false);

        A.store.Bool(ptr + 56 + 32 + 32 + 0 + 28, false);
        A.store.Ref(ptr + 56 + 32 + 32 + 0 + 0, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 0 + 4, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 0 + 8, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 0 + 12, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 0 + 16, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 0 + 20, undefined);
        A.store.Bool(ptr + 56 + 32 + 32 + 0 + 26, false);
        A.store.Bool(ptr + 56 + 32 + 32 + 0 + 24, false);
        A.store.Bool(ptr + 56 + 32 + 32 + 0 + 27, false);
        A.store.Bool(ptr + 56 + 32 + 32 + 0 + 25, false);

        A.store.Bool(ptr + 56 + 32 + 32 + 32 + 28, false);
        A.store.Ref(ptr + 56 + 32 + 32 + 32 + 0, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 32 + 4, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 32 + 8, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 32 + 12, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 32 + 16, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 32 + 20, undefined);
        A.store.Bool(ptr + 56 + 32 + 32 + 32 + 26, false);
        A.store.Bool(ptr + 56 + 32 + 32 + 32 + 24, false);
        A.store.Bool(ptr + 56 + 32 + 32 + 32 + 27, false);
        A.store.Bool(ptr + 56 + 32 + 32 + 32 + 25, false);

        A.store.Bool(ptr + 56 + 32 + 32 + 64 + 28, false);
        A.store.Ref(ptr + 56 + 32 + 32 + 64 + 0, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 64 + 4, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 64 + 8, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 64 + 12, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 64 + 16, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 64 + 20, undefined);
        A.store.Bool(ptr + 56 + 32 + 32 + 64 + 26, false);
        A.store.Bool(ptr + 56 + 32 + 32 + 64 + 24, false);
        A.store.Bool(ptr + 56 + 32 + 32 + 64 + 27, false);
        A.store.Bool(ptr + 56 + 32 + 32 + 64 + 25, false);

        A.store.Bool(ptr + 56 + 32 + 32 + 96 + 28, false);
        A.store.Ref(ptr + 56 + 32 + 32 + 96 + 0, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 96 + 4, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 96 + 8, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 96 + 12, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 96 + 16, undefined);
        A.store.Ref(ptr + 56 + 32 + 32 + 96 + 20, undefined);
        A.store.Bool(ptr + 56 + 32 + 32 + 96 + 26, false);
        A.store.Bool(ptr + 56 + 32 + 32 + 96 + 24, false);
        A.store.Bool(ptr + 56 + 32 + 32 + 96 + 27, false);
        A.store.Bool(ptr + 56 + 32 + 32 + 96 + 25, false);

        A.store.Bool(ptr + 56 + 32 + 160 + 28, false);
        A.store.Ref(ptr + 56 + 32 + 160 + 0, undefined);
        A.store.Ref(ptr + 56 + 32 + 160 + 4, undefined);
        A.store.Ref(ptr + 56 + 32 + 160 + 8, undefined);
        A.store.Ref(ptr + 56 + 32 + 160 + 12, undefined);
        A.store.Ref(ptr + 56 + 32 + 160 + 16, undefined);
        A.store.Ref(ptr + 56 + 32 + 160 + 20, undefined);
        A.store.Bool(ptr + 56 + 32 + 160 + 26, false);
        A.store.Bool(ptr + 56 + 32 + 160 + 24, false);
        A.store.Bool(ptr + 56 + 32 + 160 + 27, false);
        A.store.Bool(ptr + 56 + 32 + 160 + 25, false);

        A.store.Bool(ptr + 56 + 32 + 192 + 125, false);

        A.store.Bool(ptr + 56 + 32 + 192 + 0 + 28, false);
        A.store.Ref(ptr + 56 + 32 + 192 + 0 + 0, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 0 + 4, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 0 + 8, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 0 + 12, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 0 + 16, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 0 + 20, undefined);
        A.store.Bool(ptr + 56 + 32 + 192 + 0 + 26, false);
        A.store.Bool(ptr + 56 + 32 + 192 + 0 + 24, false);
        A.store.Bool(ptr + 56 + 32 + 192 + 0 + 27, false);
        A.store.Bool(ptr + 56 + 32 + 192 + 0 + 25, false);

        A.store.Bool(ptr + 56 + 32 + 192 + 32 + 28, false);
        A.store.Ref(ptr + 56 + 32 + 192 + 32 + 0, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 32 + 4, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 32 + 8, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 32 + 12, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 32 + 16, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 32 + 20, undefined);
        A.store.Bool(ptr + 56 + 32 + 192 + 32 + 26, false);
        A.store.Bool(ptr + 56 + 32 + 192 + 32 + 24, false);
        A.store.Bool(ptr + 56 + 32 + 192 + 32 + 27, false);
        A.store.Bool(ptr + 56 + 32 + 192 + 32 + 25, false);

        A.store.Bool(ptr + 56 + 32 + 192 + 64 + 28, false);
        A.store.Ref(ptr + 56 + 32 + 192 + 64 + 0, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 64 + 4, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 64 + 8, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 64 + 12, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 64 + 16, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 64 + 20, undefined);
        A.store.Bool(ptr + 56 + 32 + 192 + 64 + 26, false);
        A.store.Bool(ptr + 56 + 32 + 192 + 64 + 24, false);
        A.store.Bool(ptr + 56 + 32 + 192 + 64 + 27, false);
        A.store.Bool(ptr + 56 + 32 + 192 + 64 + 25, false);

        A.store.Bool(ptr + 56 + 32 + 192 + 96 + 28, false);
        A.store.Ref(ptr + 56 + 32 + 192 + 96 + 0, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 96 + 4, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 96 + 8, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 96 + 12, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 96 + 16, undefined);
        A.store.Ref(ptr + 56 + 32 + 192 + 96 + 20, undefined);
        A.store.Bool(ptr + 56 + 32 + 192 + 96 + 26, false);
        A.store.Bool(ptr + 56 + 32 + 192 + 96 + 24, false);
        A.store.Bool(ptr + 56 + 32 + 192 + 96 + 27, false);
        A.store.Bool(ptr + 56 + 32 + 192 + 96 + 25, false);

        A.store.Bool(ptr + 56 + 352 + 28, false);
        A.store.Ref(ptr + 56 + 352 + 0, undefined);
        A.store.Ref(ptr + 56 + 352 + 4, undefined);
        A.store.Ref(ptr + 56 + 352 + 8, undefined);
        A.store.Ref(ptr + 56 + 352 + 12, undefined);
        A.store.Ref(ptr + 56 + 352 + 16, undefined);
        A.store.Ref(ptr + 56 + 352 + 20, undefined);
        A.store.Bool(ptr + 56 + 352 + 26, false);
        A.store.Bool(ptr + 56 + 352 + 24, false);
        A.store.Bool(ptr + 56 + 352 + 27, false);
        A.store.Bool(ptr + 56 + 352 + 25, false);

        A.store.Bool(ptr + 56 + 384 + 28, false);
        A.store.Ref(ptr + 56 + 384 + 0, undefined);
        A.store.Ref(ptr + 56 + 384 + 4, undefined);
        A.store.Ref(ptr + 56 + 384 + 8, undefined);
        A.store.Ref(ptr + 56 + 384 + 12, undefined);
        A.store.Ref(ptr + 56 + 384 + 16, undefined);
        A.store.Ref(ptr + 56 + 384 + 20, undefined);
        A.store.Bool(ptr + 56 + 384 + 26, false);
        A.store.Bool(ptr + 56 + 384 + 24, false);
        A.store.Bool(ptr + 56 + 384 + 27, false);
        A.store.Bool(ptr + 56 + 384 + 25, false);

        A.store.Bool(ptr + 56 + 416 + 28, false);
        A.store.Ref(ptr + 56 + 416 + 0, undefined);
        A.store.Ref(ptr + 56 + 416 + 4, undefined);
        A.store.Ref(ptr + 56 + 416 + 8, undefined);
        A.store.Ref(ptr + 56 + 416 + 12, undefined);
        A.store.Ref(ptr + 56 + 416 + 16, undefined);
        A.store.Ref(ptr + 56 + 416 + 20, undefined);
        A.store.Bool(ptr + 56 + 416 + 26, false);
        A.store.Bool(ptr + 56 + 416 + 24, false);
        A.store.Bool(ptr + 56 + 416 + 27, false);
        A.store.Bool(ptr + 56 + 416 + 25, false);

        A.store.Bool(ptr + 56 + 448 + 28, false);
        A.store.Ref(ptr + 56 + 448 + 0, undefined);
        A.store.Ref(ptr + 56 + 448 + 4, undefined);
        A.store.Ref(ptr + 56 + 448 + 8, undefined);
        A.store.Ref(ptr + 56 + 448 + 12, undefined);
        A.store.Ref(ptr + 56 + 448 + 16, undefined);
        A.store.Ref(ptr + 56 + 448 + 20, undefined);
        A.store.Bool(ptr + 56 + 448 + 26, false);
        A.store.Bool(ptr + 56 + 448 + 24, false);
        A.store.Bool(ptr + 56 + 448 + 27, false);
        A.store.Bool(ptr + 56 + 448 + 25, false);

        A.store.Bool(ptr + 56 + 480 + 806, false);

        A.store.Bool(ptr + 56 + 480 + 0 + 28, false);
        A.store.Ref(ptr + 56 + 480 + 0 + 0, undefined);
        A.store.Ref(ptr + 56 + 480 + 0 + 4, undefined);
        A.store.Ref(ptr + 56 + 480 + 0 + 8, undefined);
        A.store.Ref(ptr + 56 + 480 + 0 + 12, undefined);
        A.store.Ref(ptr + 56 + 480 + 0 + 16, undefined);
        A.store.Ref(ptr + 56 + 480 + 0 + 20, undefined);
        A.store.Bool(ptr + 56 + 480 + 0 + 26, false);
        A.store.Bool(ptr + 56 + 480 + 0 + 24, false);
        A.store.Bool(ptr + 56 + 480 + 0 + 27, false);
        A.store.Bool(ptr + 56 + 480 + 0 + 25, false);

        A.store.Bool(ptr + 56 + 480 + 32 + 318, false);

        A.store.Bool(ptr + 56 + 480 + 32 + 0 + 28, false);
        A.store.Ref(ptr + 56 + 480 + 32 + 0 + 0, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 0 + 4, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 0 + 8, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 0 + 12, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 0 + 16, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 0 + 20, undefined);
        A.store.Bool(ptr + 56 + 480 + 32 + 0 + 26, false);
        A.store.Bool(ptr + 56 + 480 + 32 + 0 + 24, false);
        A.store.Bool(ptr + 56 + 480 + 32 + 0 + 27, false);
        A.store.Bool(ptr + 56 + 480 + 32 + 0 + 25, false);

        A.store.Bool(ptr + 56 + 480 + 32 + 32 + 125, false);

        A.store.Bool(ptr + 56 + 480 + 32 + 32 + 0 + 28, false);
        A.store.Ref(ptr + 56 + 480 + 32 + 32 + 0 + 0, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 32 + 0 + 4, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 32 + 0 + 8, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 32 + 0 + 12, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 32 + 0 + 16, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 32 + 0 + 20, undefined);
        A.store.Bool(ptr + 56 + 480 + 32 + 32 + 0 + 26, false);
        A.store.Bool(ptr + 56 + 480 + 32 + 32 + 0 + 24, false);
        A.store.Bool(ptr + 56 + 480 + 32 + 32 + 0 + 27, false);
        A.store.Bool(ptr + 56 + 480 + 32 + 32 + 0 + 25, false);

        A.store.Bool(ptr + 56 + 480 + 32 + 32 + 32 + 28, false);
        A.store.Ref(ptr + 56 + 480 + 32 + 32 + 32 + 0, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 32 + 32 + 4, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 32 + 32 + 8, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 32 + 32 + 12, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 32 + 32 + 16, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 32 + 32 + 20, undefined);
        A.store.Bool(ptr + 56 + 480 + 32 + 32 + 32 + 26, false);
        A.store.Bool(ptr + 56 + 480 + 32 + 32 + 32 + 24, false);
        A.store.Bool(ptr + 56 + 480 + 32 + 32 + 32 + 27, false);
        A.store.Bool(ptr + 56 + 480 + 32 + 32 + 32 + 25, false);

        A.store.Bool(ptr + 56 + 480 + 32 + 32 + 64 + 28, false);
        A.store.Ref(ptr + 56 + 480 + 32 + 32 + 64 + 0, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 32 + 64 + 4, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 32 + 64 + 8, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 32 + 64 + 12, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 32 + 64 + 16, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 32 + 64 + 20, undefined);
        A.store.Bool(ptr + 56 + 480 + 32 + 32 + 64 + 26, false);
        A.store.Bool(ptr + 56 + 480 + 32 + 32 + 64 + 24, false);
        A.store.Bool(ptr + 56 + 480 + 32 + 32 + 64 + 27, false);
        A.store.Bool(ptr + 56 + 480 + 32 + 32 + 64 + 25, false);

        A.store.Bool(ptr + 56 + 480 + 32 + 32 + 96 + 28, false);
        A.store.Ref(ptr + 56 + 480 + 32 + 32 + 96 + 0, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 32 + 96 + 4, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 32 + 96 + 8, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 32 + 96 + 12, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 32 + 96 + 16, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 32 + 96 + 20, undefined);
        A.store.Bool(ptr + 56 + 480 + 32 + 32 + 96 + 26, false);
        A.store.Bool(ptr + 56 + 480 + 32 + 32 + 96 + 24, false);
        A.store.Bool(ptr + 56 + 480 + 32 + 32 + 96 + 27, false);
        A.store.Bool(ptr + 56 + 480 + 32 + 32 + 96 + 25, false);

        A.store.Bool(ptr + 56 + 480 + 32 + 160 + 28, false);
        A.store.Ref(ptr + 56 + 480 + 32 + 160 + 0, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 160 + 4, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 160 + 8, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 160 + 12, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 160 + 16, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 160 + 20, undefined);
        A.store.Bool(ptr + 56 + 480 + 32 + 160 + 26, false);
        A.store.Bool(ptr + 56 + 480 + 32 + 160 + 24, false);
        A.store.Bool(ptr + 56 + 480 + 32 + 160 + 27, false);
        A.store.Bool(ptr + 56 + 480 + 32 + 160 + 25, false);

        A.store.Bool(ptr + 56 + 480 + 32 + 192 + 125, false);

        A.store.Bool(ptr + 56 + 480 + 32 + 192 + 0 + 28, false);
        A.store.Ref(ptr + 56 + 480 + 32 + 192 + 0 + 0, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 192 + 0 + 4, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 192 + 0 + 8, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 192 + 0 + 12, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 192 + 0 + 16, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 192 + 0 + 20, undefined);
        A.store.Bool(ptr + 56 + 480 + 32 + 192 + 0 + 26, false);
        A.store.Bool(ptr + 56 + 480 + 32 + 192 + 0 + 24, false);
        A.store.Bool(ptr + 56 + 480 + 32 + 192 + 0 + 27, false);
        A.store.Bool(ptr + 56 + 480 + 32 + 192 + 0 + 25, false);

        A.store.Bool(ptr + 56 + 480 + 32 + 192 + 32 + 28, false);
        A.store.Ref(ptr + 56 + 480 + 32 + 192 + 32 + 0, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 192 + 32 + 4, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 192 + 32 + 8, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 192 + 32 + 12, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 192 + 32 + 16, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 192 + 32 + 20, undefined);
        A.store.Bool(ptr + 56 + 480 + 32 + 192 + 32 + 26, false);
        A.store.Bool(ptr + 56 + 480 + 32 + 192 + 32 + 24, false);
        A.store.Bool(ptr + 56 + 480 + 32 + 192 + 32 + 27, false);
        A.store.Bool(ptr + 56 + 480 + 32 + 192 + 32 + 25, false);

        A.store.Bool(ptr + 56 + 480 + 32 + 192 + 64 + 28, false);
        A.store.Ref(ptr + 56 + 480 + 32 + 192 + 64 + 0, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 192 + 64 + 4, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 192 + 64 + 8, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 192 + 64 + 12, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 192 + 64 + 16, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 192 + 64 + 20, undefined);
        A.store.Bool(ptr + 56 + 480 + 32 + 192 + 64 + 26, false);
        A.store.Bool(ptr + 56 + 480 + 32 + 192 + 64 + 24, false);
        A.store.Bool(ptr + 56 + 480 + 32 + 192 + 64 + 27, false);
        A.store.Bool(ptr + 56 + 480 + 32 + 192 + 64 + 25, false);

        A.store.Bool(ptr + 56 + 480 + 32 + 192 + 96 + 28, false);
        A.store.Ref(ptr + 56 + 480 + 32 + 192 + 96 + 0, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 192 + 96 + 4, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 192 + 96 + 8, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 192 + 96 + 12, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 192 + 96 + 16, undefined);
        A.store.Ref(ptr + 56 + 480 + 32 + 192 + 96 + 20, undefined);
        A.store.Bool(ptr + 56 + 480 + 32 + 192 + 96 + 26, false);
        A.store.Bool(ptr + 56 + 480 + 32 + 192 + 96 + 24, false);
        A.store.Bool(ptr + 56 + 480 + 32 + 192 + 96 + 27, false);
        A.store.Bool(ptr + 56 + 480 + 32 + 192 + 96 + 25, false);

        A.store.Bool(ptr + 56 + 480 + 352 + 28, false);
        A.store.Ref(ptr + 56 + 480 + 352 + 0, undefined);
        A.store.Ref(ptr + 56 + 480 + 352 + 4, undefined);
        A.store.Ref(ptr + 56 + 480 + 352 + 8, undefined);
        A.store.Ref(ptr + 56 + 480 + 352 + 12, undefined);
        A.store.Ref(ptr + 56 + 480 + 352 + 16, undefined);
        A.store.Ref(ptr + 56 + 480 + 352 + 20, undefined);
        A.store.Bool(ptr + 56 + 480 + 352 + 26, false);
        A.store.Bool(ptr + 56 + 480 + 352 + 24, false);
        A.store.Bool(ptr + 56 + 480 + 352 + 27, false);
        A.store.Bool(ptr + 56 + 480 + 352 + 25, false);

        A.store.Bool(ptr + 56 + 480 + 384 + 28, false);
        A.store.Ref(ptr + 56 + 480 + 384 + 0, undefined);
        A.store.Ref(ptr + 56 + 480 + 384 + 4, undefined);
        A.store.Ref(ptr + 56 + 480 + 384 + 8, undefined);
        A.store.Ref(ptr + 56 + 480 + 384 + 12, undefined);
        A.store.Ref(ptr + 56 + 480 + 384 + 16, undefined);
        A.store.Ref(ptr + 56 + 480 + 384 + 20, undefined);
        A.store.Bool(ptr + 56 + 480 + 384 + 26, false);
        A.store.Bool(ptr + 56 + 480 + 384 + 24, false);
        A.store.Bool(ptr + 56 + 480 + 384 + 27, false);
        A.store.Bool(ptr + 56 + 480 + 384 + 25, false);

        A.store.Bool(ptr + 56 + 480 + 416 + 28, false);
        A.store.Ref(ptr + 56 + 480 + 416 + 0, undefined);
        A.store.Ref(ptr + 56 + 480 + 416 + 4, undefined);
        A.store.Ref(ptr + 56 + 480 + 416 + 8, undefined);
        A.store.Ref(ptr + 56 + 480 + 416 + 12, undefined);
        A.store.Ref(ptr + 56 + 480 + 416 + 16, undefined);
        A.store.Ref(ptr + 56 + 480 + 416 + 20, undefined);
        A.store.Bool(ptr + 56 + 480 + 416 + 26, false);
        A.store.Bool(ptr + 56 + 480 + 416 + 24, false);
        A.store.Bool(ptr + 56 + 480 + 416 + 27, false);
        A.store.Bool(ptr + 56 + 480 + 416 + 25, false);

        A.store.Bool(ptr + 56 + 480 + 448 + 28, false);
        A.store.Ref(ptr + 56 + 480 + 448 + 0, undefined);
        A.store.Ref(ptr + 56 + 480 + 448 + 4, undefined);
        A.store.Ref(ptr + 56 + 480 + 448 + 8, undefined);
        A.store.Ref(ptr + 56 + 480 + 448 + 12, undefined);
        A.store.Ref(ptr + 56 + 480 + 448 + 16, undefined);
        A.store.Ref(ptr + 56 + 480 + 448 + 20, undefined);
        A.store.Bool(ptr + 56 + 480 + 448 + 26, false);
        A.store.Bool(ptr + 56 + 480 + 448 + 24, false);
        A.store.Bool(ptr + 56 + 480 + 448 + 27, false);
        A.store.Bool(ptr + 56 + 480 + 448 + 25, false);

        A.store.Bool(ptr + 56 + 480 + 480 + 28, false);
        A.store.Ref(ptr + 56 + 480 + 480 + 0, undefined);
        A.store.Ref(ptr + 56 + 480 + 480 + 4, undefined);
        A.store.Ref(ptr + 56 + 480 + 480 + 8, undefined);
        A.store.Ref(ptr + 56 + 480 + 480 + 12, undefined);
        A.store.Ref(ptr + 56 + 480 + 480 + 16, undefined);
        A.store.Ref(ptr + 56 + 480 + 480 + 20, undefined);
        A.store.Bool(ptr + 56 + 480 + 480 + 26, false);
        A.store.Bool(ptr + 56 + 480 + 480 + 24, false);
        A.store.Bool(ptr + 56 + 480 + 480 + 27, false);
        A.store.Bool(ptr + 56 + 480 + 480 + 25, false);

        A.store.Bool(ptr + 56 + 480 + 512 + 28, false);
        A.store.Ref(ptr + 56 + 480 + 512 + 0, undefined);
        A.store.Ref(ptr + 56 + 480 + 512 + 4, undefined);
        A.store.Ref(ptr + 56 + 480 + 512 + 8, undefined);
        A.store.Ref(ptr + 56 + 480 + 512 + 12, undefined);
        A.store.Ref(ptr + 56 + 480 + 512 + 16, undefined);
        A.store.Ref(ptr + 56 + 480 + 512 + 20, undefined);
        A.store.Bool(ptr + 56 + 480 + 512 + 26, false);
        A.store.Bool(ptr + 56 + 480 + 512 + 24, false);
        A.store.Bool(ptr + 56 + 480 + 512 + 27, false);
        A.store.Bool(ptr + 56 + 480 + 512 + 25, false);

        A.store.Bool(ptr + 56 + 480 + 544 + 28, false);
        A.store.Ref(ptr + 56 + 480 + 544 + 0, undefined);
        A.store.Ref(ptr + 56 + 480 + 544 + 4, undefined);
        A.store.Ref(ptr + 56 + 480 + 544 + 8, undefined);
        A.store.Ref(ptr + 56 + 480 + 544 + 12, undefined);
        A.store.Ref(ptr + 56 + 480 + 544 + 16, undefined);
        A.store.Ref(ptr + 56 + 480 + 544 + 20, undefined);
        A.store.Bool(ptr + 56 + 480 + 544 + 26, false);
        A.store.Bool(ptr + 56 + 480 + 544 + 24, false);
        A.store.Bool(ptr + 56 + 480 + 544 + 27, false);
        A.store.Bool(ptr + 56 + 480 + 544 + 25, false);

        A.store.Bool(ptr + 56 + 480 + 576 + 28, false);
        A.store.Ref(ptr + 56 + 480 + 576 + 0, undefined);
        A.store.Ref(ptr + 56 + 480 + 576 + 4, undefined);
        A.store.Ref(ptr + 56 + 480 + 576 + 8, undefined);
        A.store.Ref(ptr + 56 + 480 + 576 + 12, undefined);
        A.store.Ref(ptr + 56 + 480 + 576 + 16, undefined);
        A.store.Ref(ptr + 56 + 480 + 576 + 20, undefined);
        A.store.Bool(ptr + 56 + 480 + 576 + 26, false);
        A.store.Bool(ptr + 56 + 480 + 576 + 24, false);
        A.store.Bool(ptr + 56 + 480 + 576 + 27, false);
        A.store.Bool(ptr + 56 + 480 + 576 + 25, false);

        A.store.Bool(ptr + 56 + 480 + 608 + 21, false);
        A.store.Bool(ptr + 56 + 480 + 608 + 14, false);
        A.store.Bool(ptr + 56 + 480 + 608 + 0, false);
        A.store.Ref(ptr + 56 + 480 + 608 + 4, undefined);
        A.store.Bool(ptr + 56 + 480 + 608 + 15, false);
        A.store.Bool(ptr + 56 + 480 + 608 + 8, false);
        A.store.Bool(ptr + 56 + 480 + 608 + 16, false);
        A.store.Bool(ptr + 56 + 480 + 608 + 9, false);
        A.store.Bool(ptr + 56 + 480 + 608 + 17, false);
        A.store.Bool(ptr + 56 + 480 + 608 + 10, false);
        A.store.Bool(ptr + 56 + 480 + 608 + 18, false);
        A.store.Bool(ptr + 56 + 480 + 608 + 11, false);
        A.store.Bool(ptr + 56 + 480 + 608 + 19, false);
        A.store.Bool(ptr + 56 + 480 + 608 + 12, false);
        A.store.Bool(ptr + 56 + 480 + 608 + 20, false);
        A.store.Bool(ptr + 56 + 480 + 608 + 13, false);

        A.store.Bool(ptr + 56 + 480 + 632 + 28, false);
        A.store.Ref(ptr + 56 + 480 + 632 + 0, undefined);
        A.store.Ref(ptr + 56 + 480 + 632 + 4, undefined);
        A.store.Ref(ptr + 56 + 480 + 632 + 8, undefined);
        A.store.Ref(ptr + 56 + 480 + 632 + 12, undefined);
        A.store.Ref(ptr + 56 + 480 + 632 + 16, undefined);
        A.store.Ref(ptr + 56 + 480 + 632 + 20, undefined);
        A.store.Bool(ptr + 56 + 480 + 632 + 26, false);
        A.store.Bool(ptr + 56 + 480 + 632 + 24, false);
        A.store.Bool(ptr + 56 + 480 + 632 + 27, false);
        A.store.Bool(ptr + 56 + 480 + 632 + 25, false);

        A.store.Bool(ptr + 56 + 480 + 664 + 28, false);
        A.store.Ref(ptr + 56 + 480 + 664 + 0, undefined);
        A.store.Ref(ptr + 56 + 480 + 664 + 4, undefined);
        A.store.Ref(ptr + 56 + 480 + 664 + 8, undefined);
        A.store.Ref(ptr + 56 + 480 + 664 + 12, undefined);
        A.store.Ref(ptr + 56 + 480 + 664 + 16, undefined);
        A.store.Ref(ptr + 56 + 480 + 664 + 20, undefined);
        A.store.Bool(ptr + 56 + 480 + 664 + 26, false);
        A.store.Bool(ptr + 56 + 480 + 664 + 24, false);
        A.store.Bool(ptr + 56 + 480 + 664 + 27, false);
        A.store.Bool(ptr + 56 + 480 + 664 + 25, false);

        A.store.Bool(ptr + 56 + 480 + 696 + 28, false);
        A.store.Ref(ptr + 56 + 480 + 696 + 0, undefined);
        A.store.Ref(ptr + 56 + 480 + 696 + 4, undefined);
        A.store.Ref(ptr + 56 + 480 + 696 + 8, undefined);
        A.store.Ref(ptr + 56 + 480 + 696 + 12, undefined);
        A.store.Ref(ptr + 56 + 480 + 696 + 16, undefined);
        A.store.Ref(ptr + 56 + 480 + 696 + 20, undefined);
        A.store.Bool(ptr + 56 + 480 + 696 + 26, false);
        A.store.Bool(ptr + 56 + 480 + 696 + 24, false);
        A.store.Bool(ptr + 56 + 480 + 696 + 27, false);
        A.store.Bool(ptr + 56 + 480 + 696 + 25, false);

        A.store.Bool(ptr + 56 + 480 + 728 + 28, false);
        A.store.Ref(ptr + 56 + 480 + 728 + 0, undefined);
        A.store.Ref(ptr + 56 + 480 + 728 + 4, undefined);
        A.store.Ref(ptr + 56 + 480 + 728 + 8, undefined);
        A.store.Ref(ptr + 56 + 480 + 728 + 12, undefined);
        A.store.Ref(ptr + 56 + 480 + 728 + 16, undefined);
        A.store.Ref(ptr + 56 + 480 + 728 + 20, undefined);
        A.store.Bool(ptr + 56 + 480 + 728 + 26, false);
        A.store.Bool(ptr + 56 + 480 + 728 + 24, false);
        A.store.Bool(ptr + 56 + 480 + 728 + 27, false);
        A.store.Bool(ptr + 56 + 480 + 728 + 25, false);

        A.store.Bool(ptr + 56 + 480 + 760 + 21, false);
        A.store.Bool(ptr + 56 + 480 + 760 + 14, false);
        A.store.Bool(ptr + 56 + 480 + 760 + 0, false);
        A.store.Ref(ptr + 56 + 480 + 760 + 4, undefined);
        A.store.Bool(ptr + 56 + 480 + 760 + 15, false);
        A.store.Bool(ptr + 56 + 480 + 760 + 8, false);
        A.store.Bool(ptr + 56 + 480 + 760 + 16, false);
        A.store.Bool(ptr + 56 + 480 + 760 + 9, false);
        A.store.Bool(ptr + 56 + 480 + 760 + 17, false);
        A.store.Bool(ptr + 56 + 480 + 760 + 10, false);
        A.store.Bool(ptr + 56 + 480 + 760 + 18, false);
        A.store.Bool(ptr + 56 + 480 + 760 + 11, false);
        A.store.Bool(ptr + 56 + 480 + 760 + 19, false);
        A.store.Bool(ptr + 56 + 480 + 760 + 12, false);
        A.store.Bool(ptr + 56 + 480 + 760 + 20, false);
        A.store.Bool(ptr + 56 + 480 + 760 + 13, false);

        A.store.Bool(ptr + 56 + 480 + 784 + 21, false);
        A.store.Bool(ptr + 56 + 480 + 784 + 14, false);
        A.store.Bool(ptr + 56 + 480 + 784 + 0, false);
        A.store.Ref(ptr + 56 + 480 + 784 + 4, undefined);
        A.store.Bool(ptr + 56 + 480 + 784 + 15, false);
        A.store.Bool(ptr + 56 + 480 + 784 + 8, false);
        A.store.Bool(ptr + 56 + 480 + 784 + 16, false);
        A.store.Bool(ptr + 56 + 480 + 784 + 9, false);
        A.store.Bool(ptr + 56 + 480 + 784 + 17, false);
        A.store.Bool(ptr + 56 + 480 + 784 + 10, false);
        A.store.Bool(ptr + 56 + 480 + 784 + 18, false);
        A.store.Bool(ptr + 56 + 480 + 784 + 11, false);
        A.store.Bool(ptr + 56 + 480 + 784 + 19, false);
        A.store.Bool(ptr + 56 + 480 + 784 + 12, false);
        A.store.Bool(ptr + 56 + 480 + 784 + 20, false);
        A.store.Bool(ptr + 56 + 480 + 784 + 13, false);

        A.store.Bool(ptr + 56 + 1288 + 28, false);
        A.store.Ref(ptr + 56 + 1288 + 0, undefined);
        A.store.Ref(ptr + 56 + 1288 + 4, undefined);
        A.store.Ref(ptr + 56 + 1288 + 8, undefined);
        A.store.Ref(ptr + 56 + 1288 + 12, undefined);
        A.store.Ref(ptr + 56 + 1288 + 16, undefined);
        A.store.Ref(ptr + 56 + 1288 + 20, undefined);
        A.store.Bool(ptr + 56 + 1288 + 26, false);
        A.store.Bool(ptr + 56 + 1288 + 24, false);
        A.store.Bool(ptr + 56 + 1288 + 27, false);
        A.store.Bool(ptr + 56 + 1288 + 25, false);

        A.store.Bool(ptr + 56 + 1320 + 33, false);
        A.store.Bool(ptr + 56 + 1320 + 26, false);
        A.store.Int32(ptr + 56 + 1320 + 0, 0);
        A.store.Ref(ptr + 56 + 1320 + 4, undefined);
        A.store.Bool(ptr + 56 + 1320 + 27, false);
        A.store.Int32(ptr + 56 + 1320 + 8, 0);
        A.store.Bool(ptr + 56 + 1320 + 28, false);
        A.store.Int32(ptr + 56 + 1320 + 12, 0);
        A.store.Bool(ptr + 56 + 1320 + 29, false);
        A.store.Int32(ptr + 56 + 1320 + 16, 0);
        A.store.Bool(ptr + 56 + 1320 + 30, false);
        A.store.Int32(ptr + 56 + 1320 + 20, 0);
        A.store.Bool(ptr + 56 + 1320 + 31, false);
        A.store.Bool(ptr + 56 + 1320 + 24, false);
        A.store.Bool(ptr + 56 + 1320 + 32, false);
        A.store.Bool(ptr + 56 + 1320 + 25, false);

        A.store.Bool(ptr + 56 + 1356 + 28, false);
        A.store.Ref(ptr + 56 + 1356 + 0, undefined);
        A.store.Ref(ptr + 56 + 1356 + 4, undefined);
        A.store.Ref(ptr + 56 + 1356 + 8, undefined);
        A.store.Ref(ptr + 56 + 1356 + 12, undefined);
        A.store.Ref(ptr + 56 + 1356 + 16, undefined);
        A.store.Ref(ptr + 56 + 1356 + 20, undefined);
        A.store.Bool(ptr + 56 + 1356 + 26, false);
        A.store.Bool(ptr + 56 + 1356 + 24, false);
        A.store.Bool(ptr + 56 + 1356 + 27, false);
        A.store.Bool(ptr + 56 + 1356 + 25, false);

        A.store.Bool(ptr + 56 + 1388 + 21, false);
        A.store.Bool(ptr + 56 + 1388 + 14, false);
        A.store.Bool(ptr + 56 + 1388 + 0, false);
        A.store.Ref(ptr + 56 + 1388 + 4, undefined);
        A.store.Bool(ptr + 56 + 1388 + 15, false);
        A.store.Bool(ptr + 56 + 1388 + 8, false);
        A.store.Bool(ptr + 56 + 1388 + 16, false);
        A.store.Bool(ptr + 56 + 1388 + 9, false);
        A.store.Bool(ptr + 56 + 1388 + 17, false);
        A.store.Bool(ptr + 56 + 1388 + 10, false);
        A.store.Bool(ptr + 56 + 1388 + 18, false);
        A.store.Bool(ptr + 56 + 1388 + 11, false);
        A.store.Bool(ptr + 56 + 1388 + 19, false);
        A.store.Bool(ptr + 56 + 1388 + 12, false);
        A.store.Bool(ptr + 56 + 1388 + 20, false);
        A.store.Bool(ptr + 56 + 1388 + 13, false);

        A.store.Bool(ptr + 56 + 1412 + 28, false);
        A.store.Ref(ptr + 56 + 1412 + 0, undefined);
        A.store.Ref(ptr + 56 + 1412 + 4, undefined);
        A.store.Ref(ptr + 56 + 1412 + 8, undefined);
        A.store.Ref(ptr + 56 + 1412 + 12, undefined);
        A.store.Ref(ptr + 56 + 1412 + 16, undefined);
        A.store.Ref(ptr + 56 + 1412 + 20, undefined);
        A.store.Bool(ptr + 56 + 1412 + 26, false);
        A.store.Bool(ptr + 56 + 1412 + 24, false);
        A.store.Bool(ptr + 56 + 1412 + 27, false);
        A.store.Bool(ptr + 56 + 1412 + 25, false);

        A.store.Bool(ptr + 56 + 1444 + 28, false);
        A.store.Ref(ptr + 56 + 1444 + 0, undefined);
        A.store.Ref(ptr + 56 + 1444 + 4, undefined);
        A.store.Ref(ptr + 56 + 1444 + 8, undefined);
        A.store.Ref(ptr + 56 + 1444 + 12, undefined);
        A.store.Ref(ptr + 56 + 1444 + 16, undefined);
        A.store.Ref(ptr + 56 + 1444 + 20, undefined);
        A.store.Bool(ptr + 56 + 1444 + 26, false);
        A.store.Bool(ptr + 56 + 1444 + 24, false);
        A.store.Bool(ptr + 56 + 1444 + 27, false);
        A.store.Bool(ptr + 56 + 1444 + 25, false);

        A.store.Bool(ptr + 56 + 1476 + 85, false);

        A.store.Bool(ptr + 56 + 1476 + 0 + 28, false);
        A.store.Ref(ptr + 56 + 1476 + 0 + 0, undefined);
        A.store.Ref(ptr + 56 + 1476 + 0 + 4, undefined);
        A.store.Ref(ptr + 56 + 1476 + 0 + 8, undefined);
        A.store.Ref(ptr + 56 + 1476 + 0 + 12, undefined);
        A.store.Ref(ptr + 56 + 1476 + 0 + 16, undefined);
        A.store.Ref(ptr + 56 + 1476 + 0 + 20, undefined);
        A.store.Bool(ptr + 56 + 1476 + 0 + 26, false);
        A.store.Bool(ptr + 56 + 1476 + 0 + 24, false);
        A.store.Bool(ptr + 56 + 1476 + 0 + 27, false);
        A.store.Bool(ptr + 56 + 1476 + 0 + 25, false);

        A.store.Bool(ptr + 56 + 1476 + 32 + 21, false);
        A.store.Bool(ptr + 56 + 1476 + 32 + 14, false);
        A.store.Bool(ptr + 56 + 1476 + 32 + 0, false);
        A.store.Ref(ptr + 56 + 1476 + 32 + 4, undefined);
        A.store.Bool(ptr + 56 + 1476 + 32 + 15, false);
        A.store.Bool(ptr + 56 + 1476 + 32 + 8, false);
        A.store.Bool(ptr + 56 + 1476 + 32 + 16, false);
        A.store.Bool(ptr + 56 + 1476 + 32 + 9, false);
        A.store.Bool(ptr + 56 + 1476 + 32 + 17, false);
        A.store.Bool(ptr + 56 + 1476 + 32 + 10, false);
        A.store.Bool(ptr + 56 + 1476 + 32 + 18, false);
        A.store.Bool(ptr + 56 + 1476 + 32 + 11, false);
        A.store.Bool(ptr + 56 + 1476 + 32 + 19, false);
        A.store.Bool(ptr + 56 + 1476 + 32 + 12, false);
        A.store.Bool(ptr + 56 + 1476 + 32 + 20, false);
        A.store.Bool(ptr + 56 + 1476 + 32 + 13, false);

        A.store.Bool(ptr + 56 + 1476 + 56 + 28, false);
        A.store.Ref(ptr + 56 + 1476 + 56 + 0, undefined);
        A.store.Ref(ptr + 56 + 1476 + 56 + 4, undefined);
        A.store.Ref(ptr + 56 + 1476 + 56 + 8, undefined);
        A.store.Ref(ptr + 56 + 1476 + 56 + 12, undefined);
        A.store.Ref(ptr + 56 + 1476 + 56 + 16, undefined);
        A.store.Ref(ptr + 56 + 1476 + 56 + 20, undefined);
        A.store.Bool(ptr + 56 + 1476 + 56 + 26, false);
        A.store.Bool(ptr + 56 + 1476 + 56 + 24, false);
        A.store.Bool(ptr + 56 + 1476 + 56 + 27, false);
        A.store.Bool(ptr + 56 + 1476 + 56 + 25, false);

        A.store.Bool(ptr + 1620 + 109, false);

        A.store.Bool(ptr + 1620 + 0 + 21, false);
        A.store.Bool(ptr + 1620 + 0 + 14, false);
        A.store.Bool(ptr + 1620 + 0 + 0, false);
        A.store.Ref(ptr + 1620 + 0 + 4, undefined);
        A.store.Bool(ptr + 1620 + 0 + 15, false);
        A.store.Bool(ptr + 1620 + 0 + 8, false);
        A.store.Bool(ptr + 1620 + 0 + 16, false);
        A.store.Bool(ptr + 1620 + 0 + 9, false);
        A.store.Bool(ptr + 1620 + 0 + 17, false);
        A.store.Bool(ptr + 1620 + 0 + 10, false);
        A.store.Bool(ptr + 1620 + 0 + 18, false);
        A.store.Bool(ptr + 1620 + 0 + 11, false);
        A.store.Bool(ptr + 1620 + 0 + 19, false);
        A.store.Bool(ptr + 1620 + 0 + 12, false);
        A.store.Bool(ptr + 1620 + 0 + 20, false);
        A.store.Bool(ptr + 1620 + 0 + 13, false);

        A.store.Bool(ptr + 1620 + 24 + 28, false);
        A.store.Ref(ptr + 1620 + 24 + 0, undefined);
        A.store.Ref(ptr + 1620 + 24 + 4, undefined);
        A.store.Ref(ptr + 1620 + 24 + 8, undefined);
        A.store.Ref(ptr + 1620 + 24 + 12, undefined);
        A.store.Ref(ptr + 1620 + 24 + 16, undefined);
        A.store.Ref(ptr + 1620 + 24 + 20, undefined);
        A.store.Bool(ptr + 1620 + 24 + 26, false);
        A.store.Bool(ptr + 1620 + 24 + 24, false);
        A.store.Bool(ptr + 1620 + 24 + 27, false);
        A.store.Bool(ptr + 1620 + 24 + 25, false);

        A.store.Bool(ptr + 1620 + 56 + 21, false);
        A.store.Bool(ptr + 1620 + 56 + 14, false);
        A.store.Bool(ptr + 1620 + 56 + 0, false);
        A.store.Ref(ptr + 1620 + 56 + 4, undefined);
        A.store.Bool(ptr + 1620 + 56 + 15, false);
        A.store.Bool(ptr + 1620 + 56 + 8, false);
        A.store.Bool(ptr + 1620 + 56 + 16, false);
        A.store.Bool(ptr + 1620 + 56 + 9, false);
        A.store.Bool(ptr + 1620 + 56 + 17, false);
        A.store.Bool(ptr + 1620 + 56 + 10, false);
        A.store.Bool(ptr + 1620 + 56 + 18, false);
        A.store.Bool(ptr + 1620 + 56 + 11, false);
        A.store.Bool(ptr + 1620 + 56 + 19, false);
        A.store.Bool(ptr + 1620 + 56 + 12, false);
        A.store.Bool(ptr + 1620 + 56 + 20, false);
        A.store.Bool(ptr + 1620 + 56 + 13, false);

        A.store.Bool(ptr + 1620 + 80 + 28, false);
        A.store.Ref(ptr + 1620 + 80 + 0, undefined);
        A.store.Ref(ptr + 1620 + 80 + 4, undefined);
        A.store.Ref(ptr + 1620 + 80 + 8, undefined);
        A.store.Ref(ptr + 1620 + 80 + 12, undefined);
        A.store.Ref(ptr + 1620 + 80 + 16, undefined);
        A.store.Ref(ptr + 1620 + 80 + 20, undefined);
        A.store.Bool(ptr + 1620 + 80 + 26, false);
        A.store.Bool(ptr + 1620 + 80 + 24, false);
        A.store.Bool(ptr + 1620 + 80 + 27, false);
        A.store.Bool(ptr + 1620 + 80 + 25, false);

        A.store.Bool(ptr + 1732 + 1542, false);

        A.store.Bool(ptr + 1732 + 0 + 28, false);
        A.store.Ref(ptr + 1732 + 0 + 0, undefined);
        A.store.Ref(ptr + 1732 + 0 + 4, undefined);
        A.store.Ref(ptr + 1732 + 0 + 8, undefined);
        A.store.Ref(ptr + 1732 + 0 + 12, undefined);
        A.store.Ref(ptr + 1732 + 0 + 16, undefined);
        A.store.Ref(ptr + 1732 + 0 + 20, undefined);
        A.store.Bool(ptr + 1732 + 0 + 26, false);
        A.store.Bool(ptr + 1732 + 0 + 24, false);
        A.store.Bool(ptr + 1732 + 0 + 27, false);
        A.store.Bool(ptr + 1732 + 0 + 25, false);

        A.store.Bool(ptr + 1732 + 32 + 28, false);
        A.store.Ref(ptr + 1732 + 32 + 0, undefined);
        A.store.Ref(ptr + 1732 + 32 + 4, undefined);
        A.store.Ref(ptr + 1732 + 32 + 8, undefined);
        A.store.Ref(ptr + 1732 + 32 + 12, undefined);
        A.store.Ref(ptr + 1732 + 32 + 16, undefined);
        A.store.Ref(ptr + 1732 + 32 + 20, undefined);
        A.store.Bool(ptr + 1732 + 32 + 26, false);
        A.store.Bool(ptr + 1732 + 32 + 24, false);
        A.store.Bool(ptr + 1732 + 32 + 27, false);
        A.store.Bool(ptr + 1732 + 32 + 25, false);

        A.store.Bool(ptr + 1732 + 64 + 21, false);
        A.store.Bool(ptr + 1732 + 64 + 14, false);
        A.store.Bool(ptr + 1732 + 64 + 0, false);
        A.store.Ref(ptr + 1732 + 64 + 4, undefined);
        A.store.Bool(ptr + 1732 + 64 + 15, false);
        A.store.Bool(ptr + 1732 + 64 + 8, false);
        A.store.Bool(ptr + 1732 + 64 + 16, false);
        A.store.Bool(ptr + 1732 + 64 + 9, false);
        A.store.Bool(ptr + 1732 + 64 + 17, false);
        A.store.Bool(ptr + 1732 + 64 + 10, false);
        A.store.Bool(ptr + 1732 + 64 + 18, false);
        A.store.Bool(ptr + 1732 + 64 + 11, false);
        A.store.Bool(ptr + 1732 + 64 + 19, false);
        A.store.Bool(ptr + 1732 + 64 + 12, false);
        A.store.Bool(ptr + 1732 + 64 + 20, false);
        A.store.Bool(ptr + 1732 + 64 + 13, false);

        A.store.Bool(ptr + 1732 + 88 + 28, false);
        A.store.Ref(ptr + 1732 + 88 + 0, undefined);
        A.store.Ref(ptr + 1732 + 88 + 4, undefined);
        A.store.Ref(ptr + 1732 + 88 + 8, undefined);
        A.store.Ref(ptr + 1732 + 88 + 12, undefined);
        A.store.Ref(ptr + 1732 + 88 + 16, undefined);
        A.store.Ref(ptr + 1732 + 88 + 20, undefined);
        A.store.Bool(ptr + 1732 + 88 + 26, false);
        A.store.Bool(ptr + 1732 + 88 + 24, false);
        A.store.Bool(ptr + 1732 + 88 + 27, false);
        A.store.Bool(ptr + 1732 + 88 + 25, false);

        A.store.Bool(ptr + 1732 + 120 + 28, false);
        A.store.Ref(ptr + 1732 + 120 + 0, undefined);
        A.store.Ref(ptr + 1732 + 120 + 4, undefined);
        A.store.Ref(ptr + 1732 + 120 + 8, undefined);
        A.store.Ref(ptr + 1732 + 120 + 12, undefined);
        A.store.Ref(ptr + 1732 + 120 + 16, undefined);
        A.store.Ref(ptr + 1732 + 120 + 20, undefined);
        A.store.Bool(ptr + 1732 + 120 + 26, false);
        A.store.Bool(ptr + 1732 + 120 + 24, false);
        A.store.Bool(ptr + 1732 + 120 + 27, false);
        A.store.Bool(ptr + 1732 + 120 + 25, false);

        A.store.Bool(ptr + 1732 + 152 + 318, false);

        A.store.Bool(ptr + 1732 + 152 + 0 + 28, false);
        A.store.Ref(ptr + 1732 + 152 + 0 + 0, undefined);
        A.store.Ref(ptr + 1732 + 152 + 0 + 4, undefined);
        A.store.Ref(ptr + 1732 + 152 + 0 + 8, undefined);
        A.store.Ref(ptr + 1732 + 152 + 0 + 12, undefined);
        A.store.Ref(ptr + 1732 + 152 + 0 + 16, undefined);
        A.store.Ref(ptr + 1732 + 152 + 0 + 20, undefined);
        A.store.Bool(ptr + 1732 + 152 + 0 + 26, false);
        A.store.Bool(ptr + 1732 + 152 + 0 + 24, false);
        A.store.Bool(ptr + 1732 + 152 + 0 + 27, false);
        A.store.Bool(ptr + 1732 + 152 + 0 + 25, false);

        A.store.Bool(ptr + 1732 + 152 + 32 + 125, false);

        A.store.Bool(ptr + 1732 + 152 + 32 + 0 + 28, false);
        A.store.Ref(ptr + 1732 + 152 + 32 + 0 + 0, undefined);
        A.store.Ref(ptr + 1732 + 152 + 32 + 0 + 4, undefined);
        A.store.Ref(ptr + 1732 + 152 + 32 + 0 + 8, undefined);
        A.store.Ref(ptr + 1732 + 152 + 32 + 0 + 12, undefined);
        A.store.Ref(ptr + 1732 + 152 + 32 + 0 + 16, undefined);
        A.store.Ref(ptr + 1732 + 152 + 32 + 0 + 20, undefined);
        A.store.Bool(ptr + 1732 + 152 + 32 + 0 + 26, false);
        A.store.Bool(ptr + 1732 + 152 + 32 + 0 + 24, false);
        A.store.Bool(ptr + 1732 + 152 + 32 + 0 + 27, false);
        A.store.Bool(ptr + 1732 + 152 + 32 + 0 + 25, false);

        A.store.Bool(ptr + 1732 + 152 + 32 + 32 + 28, false);
        A.store.Ref(ptr + 1732 + 152 + 32 + 32 + 0, undefined);
        A.store.Ref(ptr + 1732 + 152 + 32 + 32 + 4, undefined);
        A.store.Ref(ptr + 1732 + 152 + 32 + 32 + 8, undefined);
        A.store.Ref(ptr + 1732 + 152 + 32 + 32 + 12, undefined);
        A.store.Ref(ptr + 1732 + 152 + 32 + 32 + 16, undefined);
        A.store.Ref(ptr + 1732 + 152 + 32 + 32 + 20, undefined);
        A.store.Bool(ptr + 1732 + 152 + 32 + 32 + 26, false);
        A.store.Bool(ptr + 1732 + 152 + 32 + 32 + 24, false);
        A.store.Bool(ptr + 1732 + 152 + 32 + 32 + 27, false);
        A.store.Bool(ptr + 1732 + 152 + 32 + 32 + 25, false);

        A.store.Bool(ptr + 1732 + 152 + 32 + 64 + 28, false);
        A.store.Ref(ptr + 1732 + 152 + 32 + 64 + 0, undefined);
        A.store.Ref(ptr + 1732 + 152 + 32 + 64 + 4, undefined);
        A.store.Ref(ptr + 1732 + 152 + 32 + 64 + 8, undefined);
        A.store.Ref(ptr + 1732 + 152 + 32 + 64 + 12, undefined);
        A.store.Ref(ptr + 1732 + 152 + 32 + 64 + 16, undefined);
        A.store.Ref(ptr + 1732 + 152 + 32 + 64 + 20, undefined);
        A.store.Bool(ptr + 1732 + 152 + 32 + 64 + 26, false);
        A.store.Bool(ptr + 1732 + 152 + 32 + 64 + 24, false);
        A.store.Bool(ptr + 1732 + 152 + 32 + 64 + 27, false);
        A.store.Bool(ptr + 1732 + 152 + 32 + 64 + 25, false);

        A.store.Bool(ptr + 1732 + 152 + 32 + 96 + 28, false);
        A.store.Ref(ptr + 1732 + 152 + 32 + 96 + 0, undefined);
        A.store.Ref(ptr + 1732 + 152 + 32 + 96 + 4, undefined);
        A.store.Ref(ptr + 1732 + 152 + 32 + 96 + 8, undefined);
        A.store.Ref(ptr + 1732 + 152 + 32 + 96 + 12, undefined);
        A.store.Ref(ptr + 1732 + 152 + 32 + 96 + 16, undefined);
        A.store.Ref(ptr + 1732 + 152 + 32 + 96 + 20, undefined);
        A.store.Bool(ptr + 1732 + 152 + 32 + 96 + 26, false);
        A.store.Bool(ptr + 1732 + 152 + 32 + 96 + 24, false);
        A.store.Bool(ptr + 1732 + 152 + 32 + 96 + 27, false);
        A.store.Bool(ptr + 1732 + 152 + 32 + 96 + 25, false);

        A.store.Bool(ptr + 1732 + 152 + 160 + 28, false);
        A.store.Ref(ptr + 1732 + 152 + 160 + 0, undefined);
        A.store.Ref(ptr + 1732 + 152 + 160 + 4, undefined);
        A.store.Ref(ptr + 1732 + 152 + 160 + 8, undefined);
        A.store.Ref(ptr + 1732 + 152 + 160 + 12, undefined);
        A.store.Ref(ptr + 1732 + 152 + 160 + 16, undefined);
        A.store.Ref(ptr + 1732 + 152 + 160 + 20, undefined);
        A.store.Bool(ptr + 1732 + 152 + 160 + 26, false);
        A.store.Bool(ptr + 1732 + 152 + 160 + 24, false);
        A.store.Bool(ptr + 1732 + 152 + 160 + 27, false);
        A.store.Bool(ptr + 1732 + 152 + 160 + 25, false);

        A.store.Bool(ptr + 1732 + 152 + 192 + 125, false);

        A.store.Bool(ptr + 1732 + 152 + 192 + 0 + 28, false);
        A.store.Ref(ptr + 1732 + 152 + 192 + 0 + 0, undefined);
        A.store.Ref(ptr + 1732 + 152 + 192 + 0 + 4, undefined);
        A.store.Ref(ptr + 1732 + 152 + 192 + 0 + 8, undefined);
        A.store.Ref(ptr + 1732 + 152 + 192 + 0 + 12, undefined);
        A.store.Ref(ptr + 1732 + 152 + 192 + 0 + 16, undefined);
        A.store.Ref(ptr + 1732 + 152 + 192 + 0 + 20, undefined);
        A.store.Bool(ptr + 1732 + 152 + 192 + 0 + 26, false);
        A.store.Bool(ptr + 1732 + 152 + 192 + 0 + 24, false);
        A.store.Bool(ptr + 1732 + 152 + 192 + 0 + 27, false);
        A.store.Bool(ptr + 1732 + 152 + 192 + 0 + 25, false);

        A.store.Bool(ptr + 1732 + 152 + 192 + 32 + 28, false);
        A.store.Ref(ptr + 1732 + 152 + 192 + 32 + 0, undefined);
        A.store.Ref(ptr + 1732 + 152 + 192 + 32 + 4, undefined);
        A.store.Ref(ptr + 1732 + 152 + 192 + 32 + 8, undefined);
        A.store.Ref(ptr + 1732 + 152 + 192 + 32 + 12, undefined);
        A.store.Ref(ptr + 1732 + 152 + 192 + 32 + 16, undefined);
        A.store.Ref(ptr + 1732 + 152 + 192 + 32 + 20, undefined);
        A.store.Bool(ptr + 1732 + 152 + 192 + 32 + 26, false);
        A.store.Bool(ptr + 1732 + 152 + 192 + 32 + 24, false);
        A.store.Bool(ptr + 1732 + 152 + 192 + 32 + 27, false);
        A.store.Bool(ptr + 1732 + 152 + 192 + 32 + 25, false);

        A.store.Bool(ptr + 1732 + 152 + 192 + 64 + 28, false);
        A.store.Ref(ptr + 1732 + 152 + 192 + 64 + 0, undefined);
        A.store.Ref(ptr + 1732 + 152 + 192 + 64 + 4, undefined);
        A.store.Ref(ptr + 1732 + 152 + 192 + 64 + 8, undefined);
        A.store.Ref(ptr + 1732 + 152 + 192 + 64 + 12, undefined);
        A.store.Ref(ptr + 1732 + 152 + 192 + 64 + 16, undefined);
        A.store.Ref(ptr + 1732 + 152 + 192 + 64 + 20, undefined);
        A.store.Bool(ptr + 1732 + 152 + 192 + 64 + 26, false);
        A.store.Bool(ptr + 1732 + 152 + 192 + 64 + 24, false);
        A.store.Bool(ptr + 1732 + 152 + 192 + 64 + 27, false);
        A.store.Bool(ptr + 1732 + 152 + 192 + 64 + 25, false);

        A.store.Bool(ptr + 1732 + 152 + 192 + 96 + 28, false);
        A.store.Ref(ptr + 1732 + 152 + 192 + 96 + 0, undefined);
        A.store.Ref(ptr + 1732 + 152 + 192 + 96 + 4, undefined);
        A.store.Ref(ptr + 1732 + 152 + 192 + 96 + 8, undefined);
        A.store.Ref(ptr + 1732 + 152 + 192 + 96 + 12, undefined);
        A.store.Ref(ptr + 1732 + 152 + 192 + 96 + 16, undefined);
        A.store.Ref(ptr + 1732 + 152 + 192 + 96 + 20, undefined);
        A.store.Bool(ptr + 1732 + 152 + 192 + 96 + 26, false);
        A.store.Bool(ptr + 1732 + 152 + 192 + 96 + 24, false);
        A.store.Bool(ptr + 1732 + 152 + 192 + 96 + 27, false);
        A.store.Bool(ptr + 1732 + 152 + 192 + 96 + 25, false);

        A.store.Bool(ptr + 1732 + 472 + 28, false);
        A.store.Ref(ptr + 1732 + 472 + 0, undefined);
        A.store.Ref(ptr + 1732 + 472 + 4, undefined);
        A.store.Ref(ptr + 1732 + 472 + 8, undefined);
        A.store.Ref(ptr + 1732 + 472 + 12, undefined);
        A.store.Ref(ptr + 1732 + 472 + 16, undefined);
        A.store.Ref(ptr + 1732 + 472 + 20, undefined);
        A.store.Bool(ptr + 1732 + 472 + 26, false);
        A.store.Bool(ptr + 1732 + 472 + 24, false);
        A.store.Bool(ptr + 1732 + 472 + 27, false);
        A.store.Bool(ptr + 1732 + 472 + 25, false);

        A.store.Bool(ptr + 1732 + 504 + 28, false);
        A.store.Ref(ptr + 1732 + 504 + 0, undefined);
        A.store.Ref(ptr + 1732 + 504 + 4, undefined);
        A.store.Ref(ptr + 1732 + 504 + 8, undefined);
        A.store.Ref(ptr + 1732 + 504 + 12, undefined);
        A.store.Ref(ptr + 1732 + 504 + 16, undefined);
        A.store.Ref(ptr + 1732 + 504 + 20, undefined);
        A.store.Bool(ptr + 1732 + 504 + 26, false);
        A.store.Bool(ptr + 1732 + 504 + 24, false);
        A.store.Bool(ptr + 1732 + 504 + 27, false);
        A.store.Bool(ptr + 1732 + 504 + 25, false);

        A.store.Bool(ptr + 1732 + 536 + 28, false);
        A.store.Ref(ptr + 1732 + 536 + 0, undefined);
        A.store.Ref(ptr + 1732 + 536 + 4, undefined);
        A.store.Ref(ptr + 1732 + 536 + 8, undefined);
        A.store.Ref(ptr + 1732 + 536 + 12, undefined);
        A.store.Ref(ptr + 1732 + 536 + 16, undefined);
        A.store.Ref(ptr + 1732 + 536 + 20, undefined);
        A.store.Bool(ptr + 1732 + 536 + 26, false);
        A.store.Bool(ptr + 1732 + 536 + 24, false);
        A.store.Bool(ptr + 1732 + 536 + 27, false);
        A.store.Bool(ptr + 1732 + 536 + 25, false);

        A.store.Bool(ptr + 1732 + 568 + 28, false);
        A.store.Ref(ptr + 1732 + 568 + 0, undefined);
        A.store.Ref(ptr + 1732 + 568 + 4, undefined);
        A.store.Ref(ptr + 1732 + 568 + 8, undefined);
        A.store.Ref(ptr + 1732 + 568 + 12, undefined);
        A.store.Ref(ptr + 1732 + 568 + 16, undefined);
        A.store.Ref(ptr + 1732 + 568 + 20, undefined);
        A.store.Bool(ptr + 1732 + 568 + 26, false);
        A.store.Bool(ptr + 1732 + 568 + 24, false);
        A.store.Bool(ptr + 1732 + 568 + 27, false);
        A.store.Bool(ptr + 1732 + 568 + 25, false);

        A.store.Bool(ptr + 1732 + 600 + 21, false);
        A.store.Bool(ptr + 1732 + 600 + 14, false);
        A.store.Bool(ptr + 1732 + 600 + 0, false);
        A.store.Ref(ptr + 1732 + 600 + 4, undefined);
        A.store.Bool(ptr + 1732 + 600 + 15, false);
        A.store.Bool(ptr + 1732 + 600 + 8, false);
        A.store.Bool(ptr + 1732 + 600 + 16, false);
        A.store.Bool(ptr + 1732 + 600 + 9, false);
        A.store.Bool(ptr + 1732 + 600 + 17, false);
        A.store.Bool(ptr + 1732 + 600 + 10, false);
        A.store.Bool(ptr + 1732 + 600 + 18, false);
        A.store.Bool(ptr + 1732 + 600 + 11, false);
        A.store.Bool(ptr + 1732 + 600 + 19, false);
        A.store.Bool(ptr + 1732 + 600 + 12, false);
        A.store.Bool(ptr + 1732 + 600 + 20, false);
        A.store.Bool(ptr + 1732 + 600 + 13, false);

        A.store.Bool(ptr + 1732 + 624 + 28, false);
        A.store.Ref(ptr + 1732 + 624 + 0, undefined);
        A.store.Ref(ptr + 1732 + 624 + 4, undefined);
        A.store.Ref(ptr + 1732 + 624 + 8, undefined);
        A.store.Ref(ptr + 1732 + 624 + 12, undefined);
        A.store.Ref(ptr + 1732 + 624 + 16, undefined);
        A.store.Ref(ptr + 1732 + 624 + 20, undefined);
        A.store.Bool(ptr + 1732 + 624 + 26, false);
        A.store.Bool(ptr + 1732 + 624 + 24, false);
        A.store.Bool(ptr + 1732 + 624 + 27, false);
        A.store.Bool(ptr + 1732 + 624 + 25, false);

        A.store.Bool(ptr + 1732 + 656 + 21, false);
        A.store.Bool(ptr + 1732 + 656 + 14, false);
        A.store.Bool(ptr + 1732 + 656 + 0, false);
        A.store.Ref(ptr + 1732 + 656 + 4, undefined);
        A.store.Bool(ptr + 1732 + 656 + 15, false);
        A.store.Bool(ptr + 1732 + 656 + 8, false);
        A.store.Bool(ptr + 1732 + 656 + 16, false);
        A.store.Bool(ptr + 1732 + 656 + 9, false);
        A.store.Bool(ptr + 1732 + 656 + 17, false);
        A.store.Bool(ptr + 1732 + 656 + 10, false);
        A.store.Bool(ptr + 1732 + 656 + 18, false);
        A.store.Bool(ptr + 1732 + 656 + 11, false);
        A.store.Bool(ptr + 1732 + 656 + 19, false);
        A.store.Bool(ptr + 1732 + 656 + 12, false);
        A.store.Bool(ptr + 1732 + 656 + 20, false);
        A.store.Bool(ptr + 1732 + 656 + 13, false);

        A.store.Bool(ptr + 1732 + 680 + 28, false);
        A.store.Ref(ptr + 1732 + 680 + 0, undefined);
        A.store.Ref(ptr + 1732 + 680 + 4, undefined);
        A.store.Ref(ptr + 1732 + 680 + 8, undefined);
        A.store.Ref(ptr + 1732 + 680 + 12, undefined);
        A.store.Ref(ptr + 1732 + 680 + 16, undefined);
        A.store.Ref(ptr + 1732 + 680 + 20, undefined);
        A.store.Bool(ptr + 1732 + 680 + 26, false);
        A.store.Bool(ptr + 1732 + 680 + 24, false);
        A.store.Bool(ptr + 1732 + 680 + 27, false);
        A.store.Bool(ptr + 1732 + 680 + 25, false);

        A.store.Bool(ptr + 1732 + 712 + 28, false);
        A.store.Ref(ptr + 1732 + 712 + 0, undefined);
        A.store.Ref(ptr + 1732 + 712 + 4, undefined);
        A.store.Ref(ptr + 1732 + 712 + 8, undefined);
        A.store.Ref(ptr + 1732 + 712 + 12, undefined);
        A.store.Ref(ptr + 1732 + 712 + 16, undefined);
        A.store.Ref(ptr + 1732 + 712 + 20, undefined);
        A.store.Bool(ptr + 1732 + 712 + 26, false);
        A.store.Bool(ptr + 1732 + 712 + 24, false);
        A.store.Bool(ptr + 1732 + 712 + 27, false);
        A.store.Bool(ptr + 1732 + 712 + 25, false);

        A.store.Bool(ptr + 1732 + 744 + 28, false);
        A.store.Ref(ptr + 1732 + 744 + 0, undefined);
        A.store.Ref(ptr + 1732 + 744 + 4, undefined);
        A.store.Ref(ptr + 1732 + 744 + 8, undefined);
        A.store.Ref(ptr + 1732 + 744 + 12, undefined);
        A.store.Ref(ptr + 1732 + 744 + 16, undefined);
        A.store.Ref(ptr + 1732 + 744 + 20, undefined);
        A.store.Bool(ptr + 1732 + 744 + 26, false);
        A.store.Bool(ptr + 1732 + 744 + 24, false);
        A.store.Bool(ptr + 1732 + 744 + 27, false);
        A.store.Bool(ptr + 1732 + 744 + 25, false);

        A.store.Bool(ptr + 1732 + 776 + 28, false);
        A.store.Ref(ptr + 1732 + 776 + 0, undefined);
        A.store.Ref(ptr + 1732 + 776 + 4, undefined);
        A.store.Ref(ptr + 1732 + 776 + 8, undefined);
        A.store.Ref(ptr + 1732 + 776 + 12, undefined);
        A.store.Ref(ptr + 1732 + 776 + 16, undefined);
        A.store.Ref(ptr + 1732 + 776 + 20, undefined);
        A.store.Bool(ptr + 1732 + 776 + 26, false);
        A.store.Bool(ptr + 1732 + 776 + 24, false);
        A.store.Bool(ptr + 1732 + 776 + 27, false);
        A.store.Bool(ptr + 1732 + 776 + 25, false);

        A.store.Bool(ptr + 1732 + 808 + 33, false);
        A.store.Bool(ptr + 1732 + 808 + 26, false);
        A.store.Int32(ptr + 1732 + 808 + 0, 0);
        A.store.Ref(ptr + 1732 + 808 + 4, undefined);
        A.store.Bool(ptr + 1732 + 808 + 27, false);
        A.store.Int32(ptr + 1732 + 808 + 8, 0);
        A.store.Bool(ptr + 1732 + 808 + 28, false);
        A.store.Int32(ptr + 1732 + 808 + 12, 0);
        A.store.Bool(ptr + 1732 + 808 + 29, false);
        A.store.Int32(ptr + 1732 + 808 + 16, 0);
        A.store.Bool(ptr + 1732 + 808 + 30, false);
        A.store.Int32(ptr + 1732 + 808 + 20, 0);
        A.store.Bool(ptr + 1732 + 808 + 31, false);
        A.store.Bool(ptr + 1732 + 808 + 24, false);
        A.store.Bool(ptr + 1732 + 808 + 32, false);
        A.store.Bool(ptr + 1732 + 808 + 25, false);

        A.store.Bool(ptr + 1732 + 844 + 28, false);
        A.store.Ref(ptr + 1732 + 844 + 0, undefined);
        A.store.Ref(ptr + 1732 + 844 + 4, undefined);
        A.store.Ref(ptr + 1732 + 844 + 8, undefined);
        A.store.Ref(ptr + 1732 + 844 + 12, undefined);
        A.store.Ref(ptr + 1732 + 844 + 16, undefined);
        A.store.Ref(ptr + 1732 + 844 + 20, undefined);
        A.store.Bool(ptr + 1732 + 844 + 26, false);
        A.store.Bool(ptr + 1732 + 844 + 24, false);
        A.store.Bool(ptr + 1732 + 844 + 27, false);
        A.store.Bool(ptr + 1732 + 844 + 25, false);

        A.store.Bool(ptr + 1732 + 876 + 21, false);
        A.store.Bool(ptr + 1732 + 876 + 14, false);
        A.store.Bool(ptr + 1732 + 876 + 0, false);
        A.store.Ref(ptr + 1732 + 876 + 4, undefined);
        A.store.Bool(ptr + 1732 + 876 + 15, false);
        A.store.Bool(ptr + 1732 + 876 + 8, false);
        A.store.Bool(ptr + 1732 + 876 + 16, false);
        A.store.Bool(ptr + 1732 + 876 + 9, false);
        A.store.Bool(ptr + 1732 + 876 + 17, false);
        A.store.Bool(ptr + 1732 + 876 + 10, false);
        A.store.Bool(ptr + 1732 + 876 + 18, false);
        A.store.Bool(ptr + 1732 + 876 + 11, false);
        A.store.Bool(ptr + 1732 + 876 + 19, false);
        A.store.Bool(ptr + 1732 + 876 + 12, false);
        A.store.Bool(ptr + 1732 + 876 + 20, false);
        A.store.Bool(ptr + 1732 + 876 + 13, false);

        A.store.Bool(ptr + 1732 + 900 + 28, false);
        A.store.Ref(ptr + 1732 + 900 + 0, undefined);
        A.store.Ref(ptr + 1732 + 900 + 4, undefined);
        A.store.Ref(ptr + 1732 + 900 + 8, undefined);
        A.store.Ref(ptr + 1732 + 900 + 12, undefined);
        A.store.Ref(ptr + 1732 + 900 + 16, undefined);
        A.store.Ref(ptr + 1732 + 900 + 20, undefined);
        A.store.Bool(ptr + 1732 + 900 + 26, false);
        A.store.Bool(ptr + 1732 + 900 + 24, false);
        A.store.Bool(ptr + 1732 + 900 + 27, false);
        A.store.Bool(ptr + 1732 + 900 + 25, false);

        A.store.Bool(ptr + 1732 + 932 + 28, false);
        A.store.Ref(ptr + 1732 + 932 + 0, undefined);
        A.store.Ref(ptr + 1732 + 932 + 4, undefined);
        A.store.Ref(ptr + 1732 + 932 + 8, undefined);
        A.store.Ref(ptr + 1732 + 932 + 12, undefined);
        A.store.Ref(ptr + 1732 + 932 + 16, undefined);
        A.store.Ref(ptr + 1732 + 932 + 20, undefined);
        A.store.Bool(ptr + 1732 + 932 + 26, false);
        A.store.Bool(ptr + 1732 + 932 + 24, false);
        A.store.Bool(ptr + 1732 + 932 + 27, false);
        A.store.Bool(ptr + 1732 + 932 + 25, false);

        A.store.Bool(ptr + 1732 + 964 + 28, false);
        A.store.Ref(ptr + 1732 + 964 + 0, undefined);
        A.store.Ref(ptr + 1732 + 964 + 4, undefined);
        A.store.Ref(ptr + 1732 + 964 + 8, undefined);
        A.store.Ref(ptr + 1732 + 964 + 12, undefined);
        A.store.Ref(ptr + 1732 + 964 + 16, undefined);
        A.store.Ref(ptr + 1732 + 964 + 20, undefined);
        A.store.Bool(ptr + 1732 + 964 + 26, false);
        A.store.Bool(ptr + 1732 + 964 + 24, false);
        A.store.Bool(ptr + 1732 + 964 + 27, false);
        A.store.Bool(ptr + 1732 + 964 + 25, false);

        A.store.Bool(ptr + 1732 + 996 + 33, false);
        A.store.Bool(ptr + 1732 + 996 + 26, false);
        A.store.Int32(ptr + 1732 + 996 + 0, 0);
        A.store.Ref(ptr + 1732 + 996 + 4, undefined);
        A.store.Bool(ptr + 1732 + 996 + 27, false);
        A.store.Int32(ptr + 1732 + 996 + 8, 0);
        A.store.Bool(ptr + 1732 + 996 + 28, false);
        A.store.Int32(ptr + 1732 + 996 + 12, 0);
        A.store.Bool(ptr + 1732 + 996 + 29, false);
        A.store.Int32(ptr + 1732 + 996 + 16, 0);
        A.store.Bool(ptr + 1732 + 996 + 30, false);
        A.store.Int32(ptr + 1732 + 996 + 20, 0);
        A.store.Bool(ptr + 1732 + 996 + 31, false);
        A.store.Bool(ptr + 1732 + 996 + 24, false);
        A.store.Bool(ptr + 1732 + 996 + 32, false);
        A.store.Bool(ptr + 1732 + 996 + 25, false);

        A.store.Bool(ptr + 1732 + 1032 + 21, false);
        A.store.Bool(ptr + 1732 + 1032 + 14, false);
        A.store.Bool(ptr + 1732 + 1032 + 0, false);
        A.store.Ref(ptr + 1732 + 1032 + 4, undefined);
        A.store.Bool(ptr + 1732 + 1032 + 15, false);
        A.store.Bool(ptr + 1732 + 1032 + 8, false);
        A.store.Bool(ptr + 1732 + 1032 + 16, false);
        A.store.Bool(ptr + 1732 + 1032 + 9, false);
        A.store.Bool(ptr + 1732 + 1032 + 17, false);
        A.store.Bool(ptr + 1732 + 1032 + 10, false);
        A.store.Bool(ptr + 1732 + 1032 + 18, false);
        A.store.Bool(ptr + 1732 + 1032 + 11, false);
        A.store.Bool(ptr + 1732 + 1032 + 19, false);
        A.store.Bool(ptr + 1732 + 1032 + 12, false);
        A.store.Bool(ptr + 1732 + 1032 + 20, false);
        A.store.Bool(ptr + 1732 + 1032 + 13, false);

        A.store.Bool(ptr + 1732 + 1056 + 28, false);
        A.store.Ref(ptr + 1732 + 1056 + 0, undefined);
        A.store.Ref(ptr + 1732 + 1056 + 4, undefined);
        A.store.Ref(ptr + 1732 + 1056 + 8, undefined);
        A.store.Ref(ptr + 1732 + 1056 + 12, undefined);
        A.store.Ref(ptr + 1732 + 1056 + 16, undefined);
        A.store.Ref(ptr + 1732 + 1056 + 20, undefined);
        A.store.Bool(ptr + 1732 + 1056 + 26, false);
        A.store.Bool(ptr + 1732 + 1056 + 24, false);
        A.store.Bool(ptr + 1732 + 1056 + 27, false);
        A.store.Bool(ptr + 1732 + 1056 + 25, false);

        A.store.Bool(ptr + 1732 + 1088 + 28, false);
        A.store.Ref(ptr + 1732 + 1088 + 0, undefined);
        A.store.Ref(ptr + 1732 + 1088 + 4, undefined);
        A.store.Ref(ptr + 1732 + 1088 + 8, undefined);
        A.store.Ref(ptr + 1732 + 1088 + 12, undefined);
        A.store.Ref(ptr + 1732 + 1088 + 16, undefined);
        A.store.Ref(ptr + 1732 + 1088 + 20, undefined);
        A.store.Bool(ptr + 1732 + 1088 + 26, false);
        A.store.Bool(ptr + 1732 + 1088 + 24, false);
        A.store.Bool(ptr + 1732 + 1088 + 27, false);
        A.store.Bool(ptr + 1732 + 1088 + 25, false);

        A.store.Bool(ptr + 1732 + 1120 + 28, false);
        A.store.Ref(ptr + 1732 + 1120 + 0, undefined);
        A.store.Ref(ptr + 1732 + 1120 + 4, undefined);
        A.store.Ref(ptr + 1732 + 1120 + 8, undefined);
        A.store.Ref(ptr + 1732 + 1120 + 12, undefined);
        A.store.Ref(ptr + 1732 + 1120 + 16, undefined);
        A.store.Ref(ptr + 1732 + 1120 + 20, undefined);
        A.store.Bool(ptr + 1732 + 1120 + 26, false);
        A.store.Bool(ptr + 1732 + 1120 + 24, false);
        A.store.Bool(ptr + 1732 + 1120 + 27, false);
        A.store.Bool(ptr + 1732 + 1120 + 25, false);

        A.store.Bool(ptr + 1732 + 1152 + 33, false);
        A.store.Bool(ptr + 1732 + 1152 + 26, false);
        A.store.Int32(ptr + 1732 + 1152 + 0, 0);
        A.store.Ref(ptr + 1732 + 1152 + 4, undefined);
        A.store.Bool(ptr + 1732 + 1152 + 27, false);
        A.store.Int32(ptr + 1732 + 1152 + 8, 0);
        A.store.Bool(ptr + 1732 + 1152 + 28, false);
        A.store.Int32(ptr + 1732 + 1152 + 12, 0);
        A.store.Bool(ptr + 1732 + 1152 + 29, false);
        A.store.Int32(ptr + 1732 + 1152 + 16, 0);
        A.store.Bool(ptr + 1732 + 1152 + 30, false);
        A.store.Int32(ptr + 1732 + 1152 + 20, 0);
        A.store.Bool(ptr + 1732 + 1152 + 31, false);
        A.store.Bool(ptr + 1732 + 1152 + 24, false);
        A.store.Bool(ptr + 1732 + 1152 + 32, false);
        A.store.Bool(ptr + 1732 + 1152 + 25, false);

        A.store.Bool(ptr + 1732 + 1188 + 33, false);
        A.store.Bool(ptr + 1732 + 1188 + 26, false);
        A.store.Int32(ptr + 1732 + 1188 + 0, 0);
        A.store.Ref(ptr + 1732 + 1188 + 4, undefined);
        A.store.Bool(ptr + 1732 + 1188 + 27, false);
        A.store.Int32(ptr + 1732 + 1188 + 8, 0);
        A.store.Bool(ptr + 1732 + 1188 + 28, false);
        A.store.Int32(ptr + 1732 + 1188 + 12, 0);
        A.store.Bool(ptr + 1732 + 1188 + 29, false);
        A.store.Int32(ptr + 1732 + 1188 + 16, 0);
        A.store.Bool(ptr + 1732 + 1188 + 30, false);
        A.store.Int32(ptr + 1732 + 1188 + 20, 0);
        A.store.Bool(ptr + 1732 + 1188 + 31, false);
        A.store.Bool(ptr + 1732 + 1188 + 24, false);
        A.store.Bool(ptr + 1732 + 1188 + 32, false);
        A.store.Bool(ptr + 1732 + 1188 + 25, false);

        A.store.Bool(ptr + 1732 + 1224 + 28, false);
        A.store.Ref(ptr + 1732 + 1224 + 0, undefined);
        A.store.Ref(ptr + 1732 + 1224 + 4, undefined);
        A.store.Ref(ptr + 1732 + 1224 + 8, undefined);
        A.store.Ref(ptr + 1732 + 1224 + 12, undefined);
        A.store.Ref(ptr + 1732 + 1224 + 16, undefined);
        A.store.Ref(ptr + 1732 + 1224 + 20, undefined);
        A.store.Bool(ptr + 1732 + 1224 + 26, false);
        A.store.Bool(ptr + 1732 + 1224 + 24, false);
        A.store.Bool(ptr + 1732 + 1224 + 27, false);
        A.store.Bool(ptr + 1732 + 1224 + 25, false);

        A.store.Bool(ptr + 1732 + 1256 + 28, false);
        A.store.Ref(ptr + 1732 + 1256 + 0, undefined);
        A.store.Ref(ptr + 1732 + 1256 + 4, undefined);
        A.store.Ref(ptr + 1732 + 1256 + 8, undefined);
        A.store.Ref(ptr + 1732 + 1256 + 12, undefined);
        A.store.Ref(ptr + 1732 + 1256 + 16, undefined);
        A.store.Ref(ptr + 1732 + 1256 + 20, undefined);
        A.store.Bool(ptr + 1732 + 1256 + 26, false);
        A.store.Bool(ptr + 1732 + 1256 + 24, false);
        A.store.Bool(ptr + 1732 + 1256 + 27, false);
        A.store.Bool(ptr + 1732 + 1256 + 25, false);

        A.store.Bool(ptr + 1732 + 1288 + 28, false);
        A.store.Ref(ptr + 1732 + 1288 + 0, undefined);
        A.store.Ref(ptr + 1732 + 1288 + 4, undefined);
        A.store.Ref(ptr + 1732 + 1288 + 8, undefined);
        A.store.Ref(ptr + 1732 + 1288 + 12, undefined);
        A.store.Ref(ptr + 1732 + 1288 + 16, undefined);
        A.store.Ref(ptr + 1732 + 1288 + 20, undefined);
        A.store.Bool(ptr + 1732 + 1288 + 26, false);
        A.store.Bool(ptr + 1732 + 1288 + 24, false);
        A.store.Bool(ptr + 1732 + 1288 + 27, false);
        A.store.Bool(ptr + 1732 + 1288 + 25, false);

        A.store.Bool(ptr + 1732 + 1320 + 28, false);
        A.store.Ref(ptr + 1732 + 1320 + 0, undefined);
        A.store.Ref(ptr + 1732 + 1320 + 4, undefined);
        A.store.Ref(ptr + 1732 + 1320 + 8, undefined);
        A.store.Ref(ptr + 1732 + 1320 + 12, undefined);
        A.store.Ref(ptr + 1732 + 1320 + 16, undefined);
        A.store.Ref(ptr + 1732 + 1320 + 20, undefined);
        A.store.Bool(ptr + 1732 + 1320 + 26, false);
        A.store.Bool(ptr + 1732 + 1320 + 24, false);
        A.store.Bool(ptr + 1732 + 1320 + 27, false);
        A.store.Bool(ptr + 1732 + 1320 + 25, false);

        A.store.Bool(ptr + 1732 + 1352 + 28, false);
        A.store.Ref(ptr + 1732 + 1352 + 0, undefined);
        A.store.Ref(ptr + 1732 + 1352 + 4, undefined);
        A.store.Ref(ptr + 1732 + 1352 + 8, undefined);
        A.store.Ref(ptr + 1732 + 1352 + 12, undefined);
        A.store.Ref(ptr + 1732 + 1352 + 16, undefined);
        A.store.Ref(ptr + 1732 + 1352 + 20, undefined);
        A.store.Bool(ptr + 1732 + 1352 + 26, false);
        A.store.Bool(ptr + 1732 + 1352 + 24, false);
        A.store.Bool(ptr + 1732 + 1352 + 27, false);
        A.store.Bool(ptr + 1732 + 1352 + 25, false);

        A.store.Bool(ptr + 1732 + 1384 + 28, false);
        A.store.Ref(ptr + 1732 + 1384 + 0, undefined);
        A.store.Ref(ptr + 1732 + 1384 + 4, undefined);
        A.store.Ref(ptr + 1732 + 1384 + 8, undefined);
        A.store.Ref(ptr + 1732 + 1384 + 12, undefined);
        A.store.Ref(ptr + 1732 + 1384 + 16, undefined);
        A.store.Ref(ptr + 1732 + 1384 + 20, undefined);
        A.store.Bool(ptr + 1732 + 1384 + 26, false);
        A.store.Bool(ptr + 1732 + 1384 + 24, false);
        A.store.Bool(ptr + 1732 + 1384 + 27, false);
        A.store.Bool(ptr + 1732 + 1384 + 25, false);

        A.store.Bool(ptr + 1732 + 1416 + 28, false);
        A.store.Ref(ptr + 1732 + 1416 + 0, undefined);
        A.store.Ref(ptr + 1732 + 1416 + 4, undefined);
        A.store.Ref(ptr + 1732 + 1416 + 8, undefined);
        A.store.Ref(ptr + 1732 + 1416 + 12, undefined);
        A.store.Ref(ptr + 1732 + 1416 + 16, undefined);
        A.store.Ref(ptr + 1732 + 1416 + 20, undefined);
        A.store.Bool(ptr + 1732 + 1416 + 26, false);
        A.store.Bool(ptr + 1732 + 1416 + 24, false);
        A.store.Bool(ptr + 1732 + 1416 + 27, false);
        A.store.Bool(ptr + 1732 + 1416 + 25, false);

        A.store.Bool(ptr + 1732 + 1448 + 28, false);
        A.store.Ref(ptr + 1732 + 1448 + 0, undefined);
        A.store.Ref(ptr + 1732 + 1448 + 4, undefined);
        A.store.Ref(ptr + 1732 + 1448 + 8, undefined);
        A.store.Ref(ptr + 1732 + 1448 + 12, undefined);
        A.store.Ref(ptr + 1732 + 1448 + 16, undefined);
        A.store.Ref(ptr + 1732 + 1448 + 20, undefined);
        A.store.Bool(ptr + 1732 + 1448 + 26, false);
        A.store.Bool(ptr + 1732 + 1448 + 24, false);
        A.store.Bool(ptr + 1732 + 1448 + 27, false);
        A.store.Bool(ptr + 1732 + 1448 + 25, false);

        A.store.Bool(ptr + 1732 + 1480 + 61, false);

        A.store.Bool(ptr + 1732 + 1480 + 0 + 28, false);
        A.store.Ref(ptr + 1732 + 1480 + 0 + 0, undefined);
        A.store.Ref(ptr + 1732 + 1480 + 0 + 4, undefined);
        A.store.Ref(ptr + 1732 + 1480 + 0 + 8, undefined);
        A.store.Ref(ptr + 1732 + 1480 + 0 + 12, undefined);
        A.store.Ref(ptr + 1732 + 1480 + 0 + 16, undefined);
        A.store.Ref(ptr + 1732 + 1480 + 0 + 20, undefined);
        A.store.Bool(ptr + 1732 + 1480 + 0 + 26, false);
        A.store.Bool(ptr + 1732 + 1480 + 0 + 24, false);
        A.store.Bool(ptr + 1732 + 1480 + 0 + 27, false);
        A.store.Bool(ptr + 1732 + 1480 + 0 + 25, false);

        A.store.Bool(ptr + 1732 + 1480 + 32 + 28, false);
        A.store.Ref(ptr + 1732 + 1480 + 32 + 0, undefined);
        A.store.Ref(ptr + 1732 + 1480 + 32 + 4, undefined);
        A.store.Ref(ptr + 1732 + 1480 + 32 + 8, undefined);
        A.store.Ref(ptr + 1732 + 1480 + 32 + 12, undefined);
        A.store.Ref(ptr + 1732 + 1480 + 32 + 16, undefined);
        A.store.Ref(ptr + 1732 + 1480 + 32 + 20, undefined);
        A.store.Bool(ptr + 1732 + 1480 + 32 + 26, false);
        A.store.Bool(ptr + 1732 + 1480 + 32 + 24, false);
        A.store.Bool(ptr + 1732 + 1480 + 32 + 27, false);
        A.store.Bool(ptr + 1732 + 1480 + 32 + 25, false);

        A.store.Bool(ptr + 3276 + 36, false);

        A.store.Bool(ptr + 3276 + 0 + 28, false);
        A.store.Ref(ptr + 3276 + 0 + 0, undefined);
        A.store.Ref(ptr + 3276 + 0 + 4, undefined);
        A.store.Ref(ptr + 3276 + 0 + 8, undefined);
        A.store.Ref(ptr + 3276 + 0 + 12, undefined);
        A.store.Ref(ptr + 3276 + 0 + 16, undefined);
        A.store.Ref(ptr + 3276 + 0 + 20, undefined);
        A.store.Bool(ptr + 3276 + 0 + 26, false);
        A.store.Bool(ptr + 3276 + 0 + 24, false);
        A.store.Bool(ptr + 3276 + 0 + 27, false);
        A.store.Bool(ptr + 3276 + 0 + 25, false);
        A.store.Ref(ptr + 3276 + 32, undefined);

        A.store.Bool(ptr + 3316 + 28, false);
        A.store.Ref(ptr + 3316 + 0, undefined);
        A.store.Ref(ptr + 3316 + 4, undefined);
        A.store.Ref(ptr + 3316 + 8, undefined);
        A.store.Ref(ptr + 3316 + 12, undefined);
        A.store.Ref(ptr + 3316 + 16, undefined);
        A.store.Ref(ptr + 3316 + 20, undefined);
        A.store.Bool(ptr + 3316 + 26, false);
        A.store.Bool(ptr + 3316 + 24, false);
        A.store.Bool(ptr + 3316 + 27, false);
        A.store.Bool(ptr + 3316 + 25, false);
      } else {
        A.store.Bool(ptr + 3345, true);

        if (typeof x["AutoConnect"] === "undefined") {
          A.store.Bool(ptr + 0 + 21, false);
          A.store.Bool(ptr + 0 + 14, false);
          A.store.Bool(ptr + 0 + 0, false);
          A.store.Ref(ptr + 0 + 4, undefined);
          A.store.Bool(ptr + 0 + 15, false);
          A.store.Bool(ptr + 0 + 8, false);
          A.store.Bool(ptr + 0 + 16, false);
          A.store.Bool(ptr + 0 + 9, false);
          A.store.Bool(ptr + 0 + 17, false);
          A.store.Bool(ptr + 0 + 10, false);
          A.store.Bool(ptr + 0 + 18, false);
          A.store.Bool(ptr + 0 + 11, false);
          A.store.Bool(ptr + 0 + 19, false);
          A.store.Bool(ptr + 0 + 12, false);
          A.store.Bool(ptr + 0 + 20, false);
          A.store.Bool(ptr + 0 + 13, false);
        } else {
          A.store.Bool(ptr + 0 + 21, true);
          A.store.Bool(ptr + 0 + 14, "Active" in x["AutoConnect"] ? true : false);
          A.store.Bool(ptr + 0 + 0, x["AutoConnect"]["Active"] ? true : false);
          A.store.Ref(ptr + 0 + 4, x["AutoConnect"]["Effective"]);
          A.store.Bool(ptr + 0 + 15, "UserPolicy" in x["AutoConnect"] ? true : false);
          A.store.Bool(ptr + 0 + 8, x["AutoConnect"]["UserPolicy"] ? true : false);
          A.store.Bool(ptr + 0 + 16, "DevicePolicy" in x["AutoConnect"] ? true : false);
          A.store.Bool(ptr + 0 + 9, x["AutoConnect"]["DevicePolicy"] ? true : false);
          A.store.Bool(ptr + 0 + 17, "UserSetting" in x["AutoConnect"] ? true : false);
          A.store.Bool(ptr + 0 + 10, x["AutoConnect"]["UserSetting"] ? true : false);
          A.store.Bool(ptr + 0 + 18, "SharedSetting" in x["AutoConnect"] ? true : false);
          A.store.Bool(ptr + 0 + 11, x["AutoConnect"]["SharedSetting"] ? true : false);
          A.store.Bool(ptr + 0 + 19, "UserEditable" in x["AutoConnect"] ? true : false);
          A.store.Bool(ptr + 0 + 12, x["AutoConnect"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 0 + 20, "DeviceEditable" in x["AutoConnect"] ? true : false);
          A.store.Bool(ptr + 0 + 13, x["AutoConnect"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["Host"] === "undefined") {
          A.store.Bool(ptr + 24 + 28, false);
          A.store.Ref(ptr + 24 + 0, undefined);
          A.store.Ref(ptr + 24 + 4, undefined);
          A.store.Ref(ptr + 24 + 8, undefined);
          A.store.Ref(ptr + 24 + 12, undefined);
          A.store.Ref(ptr + 24 + 16, undefined);
          A.store.Ref(ptr + 24 + 20, undefined);
          A.store.Bool(ptr + 24 + 26, false);
          A.store.Bool(ptr + 24 + 24, false);
          A.store.Bool(ptr + 24 + 27, false);
          A.store.Bool(ptr + 24 + 25, false);
        } else {
          A.store.Bool(ptr + 24 + 28, true);
          A.store.Ref(ptr + 24 + 0, x["Host"]["Active"]);
          A.store.Ref(ptr + 24 + 4, x["Host"]["Effective"]);
          A.store.Ref(ptr + 24 + 8, x["Host"]["UserPolicy"]);
          A.store.Ref(ptr + 24 + 12, x["Host"]["DevicePolicy"]);
          A.store.Ref(ptr + 24 + 16, x["Host"]["UserSetting"]);
          A.store.Ref(ptr + 24 + 20, x["Host"]["SharedSetting"]);
          A.store.Bool(ptr + 24 + 26, "UserEditable" in x["Host"] ? true : false);
          A.store.Bool(ptr + 24 + 24, x["Host"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 24 + 27, "DeviceEditable" in x["Host"] ? true : false);
          A.store.Bool(ptr + 24 + 25, x["Host"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["IPsec"] === "undefined") {
          A.store.Bool(ptr + 56 + 1562, false);

          A.store.Bool(ptr + 56 + 0 + 28, false);
          A.store.Ref(ptr + 56 + 0 + 0, undefined);
          A.store.Ref(ptr + 56 + 0 + 4, undefined);
          A.store.Ref(ptr + 56 + 0 + 8, undefined);
          A.store.Ref(ptr + 56 + 0 + 12, undefined);
          A.store.Ref(ptr + 56 + 0 + 16, undefined);
          A.store.Ref(ptr + 56 + 0 + 20, undefined);
          A.store.Bool(ptr + 56 + 0 + 26, false);
          A.store.Bool(ptr + 56 + 0 + 24, false);
          A.store.Bool(ptr + 56 + 0 + 27, false);
          A.store.Bool(ptr + 56 + 0 + 25, false);

          A.store.Bool(ptr + 56 + 32 + 318, false);

          A.store.Bool(ptr + 56 + 32 + 0 + 28, false);
          A.store.Ref(ptr + 56 + 32 + 0 + 0, undefined);
          A.store.Ref(ptr + 56 + 32 + 0 + 4, undefined);
          A.store.Ref(ptr + 56 + 32 + 0 + 8, undefined);
          A.store.Ref(ptr + 56 + 32 + 0 + 12, undefined);
          A.store.Ref(ptr + 56 + 32 + 0 + 16, undefined);
          A.store.Ref(ptr + 56 + 32 + 0 + 20, undefined);
          A.store.Bool(ptr + 56 + 32 + 0 + 26, false);
          A.store.Bool(ptr + 56 + 32 + 0 + 24, false);
          A.store.Bool(ptr + 56 + 32 + 0 + 27, false);
          A.store.Bool(ptr + 56 + 32 + 0 + 25, false);

          A.store.Bool(ptr + 56 + 32 + 32 + 125, false);

          A.store.Bool(ptr + 56 + 32 + 32 + 0 + 28, false);
          A.store.Ref(ptr + 56 + 32 + 32 + 0 + 0, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 0 + 4, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 0 + 8, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 0 + 12, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 0 + 16, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 0 + 20, undefined);
          A.store.Bool(ptr + 56 + 32 + 32 + 0 + 26, false);
          A.store.Bool(ptr + 56 + 32 + 32 + 0 + 24, false);
          A.store.Bool(ptr + 56 + 32 + 32 + 0 + 27, false);
          A.store.Bool(ptr + 56 + 32 + 32 + 0 + 25, false);

          A.store.Bool(ptr + 56 + 32 + 32 + 32 + 28, false);
          A.store.Ref(ptr + 56 + 32 + 32 + 32 + 0, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 32 + 4, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 32 + 8, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 32 + 12, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 32 + 16, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 32 + 20, undefined);
          A.store.Bool(ptr + 56 + 32 + 32 + 32 + 26, false);
          A.store.Bool(ptr + 56 + 32 + 32 + 32 + 24, false);
          A.store.Bool(ptr + 56 + 32 + 32 + 32 + 27, false);
          A.store.Bool(ptr + 56 + 32 + 32 + 32 + 25, false);

          A.store.Bool(ptr + 56 + 32 + 32 + 64 + 28, false);
          A.store.Ref(ptr + 56 + 32 + 32 + 64 + 0, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 64 + 4, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 64 + 8, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 64 + 12, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 64 + 16, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 64 + 20, undefined);
          A.store.Bool(ptr + 56 + 32 + 32 + 64 + 26, false);
          A.store.Bool(ptr + 56 + 32 + 32 + 64 + 24, false);
          A.store.Bool(ptr + 56 + 32 + 32 + 64 + 27, false);
          A.store.Bool(ptr + 56 + 32 + 32 + 64 + 25, false);

          A.store.Bool(ptr + 56 + 32 + 32 + 96 + 28, false);
          A.store.Ref(ptr + 56 + 32 + 32 + 96 + 0, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 96 + 4, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 96 + 8, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 96 + 12, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 96 + 16, undefined);
          A.store.Ref(ptr + 56 + 32 + 32 + 96 + 20, undefined);
          A.store.Bool(ptr + 56 + 32 + 32 + 96 + 26, false);
          A.store.Bool(ptr + 56 + 32 + 32 + 96 + 24, false);
          A.store.Bool(ptr + 56 + 32 + 32 + 96 + 27, false);
          A.store.Bool(ptr + 56 + 32 + 32 + 96 + 25, false);

          A.store.Bool(ptr + 56 + 32 + 160 + 28, false);
          A.store.Ref(ptr + 56 + 32 + 160 + 0, undefined);
          A.store.Ref(ptr + 56 + 32 + 160 + 4, undefined);
          A.store.Ref(ptr + 56 + 32 + 160 + 8, undefined);
          A.store.Ref(ptr + 56 + 32 + 160 + 12, undefined);
          A.store.Ref(ptr + 56 + 32 + 160 + 16, undefined);
          A.store.Ref(ptr + 56 + 32 + 160 + 20, undefined);
          A.store.Bool(ptr + 56 + 32 + 160 + 26, false);
          A.store.Bool(ptr + 56 + 32 + 160 + 24, false);
          A.store.Bool(ptr + 56 + 32 + 160 + 27, false);
          A.store.Bool(ptr + 56 + 32 + 160 + 25, false);

          A.store.Bool(ptr + 56 + 32 + 192 + 125, false);

          A.store.Bool(ptr + 56 + 32 + 192 + 0 + 28, false);
          A.store.Ref(ptr + 56 + 32 + 192 + 0 + 0, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 0 + 4, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 0 + 8, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 0 + 12, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 0 + 16, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 0 + 20, undefined);
          A.store.Bool(ptr + 56 + 32 + 192 + 0 + 26, false);
          A.store.Bool(ptr + 56 + 32 + 192 + 0 + 24, false);
          A.store.Bool(ptr + 56 + 32 + 192 + 0 + 27, false);
          A.store.Bool(ptr + 56 + 32 + 192 + 0 + 25, false);

          A.store.Bool(ptr + 56 + 32 + 192 + 32 + 28, false);
          A.store.Ref(ptr + 56 + 32 + 192 + 32 + 0, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 32 + 4, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 32 + 8, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 32 + 12, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 32 + 16, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 32 + 20, undefined);
          A.store.Bool(ptr + 56 + 32 + 192 + 32 + 26, false);
          A.store.Bool(ptr + 56 + 32 + 192 + 32 + 24, false);
          A.store.Bool(ptr + 56 + 32 + 192 + 32 + 27, false);
          A.store.Bool(ptr + 56 + 32 + 192 + 32 + 25, false);

          A.store.Bool(ptr + 56 + 32 + 192 + 64 + 28, false);
          A.store.Ref(ptr + 56 + 32 + 192 + 64 + 0, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 64 + 4, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 64 + 8, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 64 + 12, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 64 + 16, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 64 + 20, undefined);
          A.store.Bool(ptr + 56 + 32 + 192 + 64 + 26, false);
          A.store.Bool(ptr + 56 + 32 + 192 + 64 + 24, false);
          A.store.Bool(ptr + 56 + 32 + 192 + 64 + 27, false);
          A.store.Bool(ptr + 56 + 32 + 192 + 64 + 25, false);

          A.store.Bool(ptr + 56 + 32 + 192 + 96 + 28, false);
          A.store.Ref(ptr + 56 + 32 + 192 + 96 + 0, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 96 + 4, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 96 + 8, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 96 + 12, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 96 + 16, undefined);
          A.store.Ref(ptr + 56 + 32 + 192 + 96 + 20, undefined);
          A.store.Bool(ptr + 56 + 32 + 192 + 96 + 26, false);
          A.store.Bool(ptr + 56 + 32 + 192 + 96 + 24, false);
          A.store.Bool(ptr + 56 + 32 + 192 + 96 + 27, false);
          A.store.Bool(ptr + 56 + 32 + 192 + 96 + 25, false);

          A.store.Bool(ptr + 56 + 352 + 28, false);
          A.store.Ref(ptr + 56 + 352 + 0, undefined);
          A.store.Ref(ptr + 56 + 352 + 4, undefined);
          A.store.Ref(ptr + 56 + 352 + 8, undefined);
          A.store.Ref(ptr + 56 + 352 + 12, undefined);
          A.store.Ref(ptr + 56 + 352 + 16, undefined);
          A.store.Ref(ptr + 56 + 352 + 20, undefined);
          A.store.Bool(ptr + 56 + 352 + 26, false);
          A.store.Bool(ptr + 56 + 352 + 24, false);
          A.store.Bool(ptr + 56 + 352 + 27, false);
          A.store.Bool(ptr + 56 + 352 + 25, false);

          A.store.Bool(ptr + 56 + 384 + 28, false);
          A.store.Ref(ptr + 56 + 384 + 0, undefined);
          A.store.Ref(ptr + 56 + 384 + 4, undefined);
          A.store.Ref(ptr + 56 + 384 + 8, undefined);
          A.store.Ref(ptr + 56 + 384 + 12, undefined);
          A.store.Ref(ptr + 56 + 384 + 16, undefined);
          A.store.Ref(ptr + 56 + 384 + 20, undefined);
          A.store.Bool(ptr + 56 + 384 + 26, false);
          A.store.Bool(ptr + 56 + 384 + 24, false);
          A.store.Bool(ptr + 56 + 384 + 27, false);
          A.store.Bool(ptr + 56 + 384 + 25, false);

          A.store.Bool(ptr + 56 + 416 + 28, false);
          A.store.Ref(ptr + 56 + 416 + 0, undefined);
          A.store.Ref(ptr + 56 + 416 + 4, undefined);
          A.store.Ref(ptr + 56 + 416 + 8, undefined);
          A.store.Ref(ptr + 56 + 416 + 12, undefined);
          A.store.Ref(ptr + 56 + 416 + 16, undefined);
          A.store.Ref(ptr + 56 + 416 + 20, undefined);
          A.store.Bool(ptr + 56 + 416 + 26, false);
          A.store.Bool(ptr + 56 + 416 + 24, false);
          A.store.Bool(ptr + 56 + 416 + 27, false);
          A.store.Bool(ptr + 56 + 416 + 25, false);

          A.store.Bool(ptr + 56 + 448 + 28, false);
          A.store.Ref(ptr + 56 + 448 + 0, undefined);
          A.store.Ref(ptr + 56 + 448 + 4, undefined);
          A.store.Ref(ptr + 56 + 448 + 8, undefined);
          A.store.Ref(ptr + 56 + 448 + 12, undefined);
          A.store.Ref(ptr + 56 + 448 + 16, undefined);
          A.store.Ref(ptr + 56 + 448 + 20, undefined);
          A.store.Bool(ptr + 56 + 448 + 26, false);
          A.store.Bool(ptr + 56 + 448 + 24, false);
          A.store.Bool(ptr + 56 + 448 + 27, false);
          A.store.Bool(ptr + 56 + 448 + 25, false);

          A.store.Bool(ptr + 56 + 480 + 806, false);

          A.store.Bool(ptr + 56 + 480 + 0 + 28, false);
          A.store.Ref(ptr + 56 + 480 + 0 + 0, undefined);
          A.store.Ref(ptr + 56 + 480 + 0 + 4, undefined);
          A.store.Ref(ptr + 56 + 480 + 0 + 8, undefined);
          A.store.Ref(ptr + 56 + 480 + 0 + 12, undefined);
          A.store.Ref(ptr + 56 + 480 + 0 + 16, undefined);
          A.store.Ref(ptr + 56 + 480 + 0 + 20, undefined);
          A.store.Bool(ptr + 56 + 480 + 0 + 26, false);
          A.store.Bool(ptr + 56 + 480 + 0 + 24, false);
          A.store.Bool(ptr + 56 + 480 + 0 + 27, false);
          A.store.Bool(ptr + 56 + 480 + 0 + 25, false);

          A.store.Bool(ptr + 56 + 480 + 32 + 318, false);

          A.store.Bool(ptr + 56 + 480 + 32 + 0 + 28, false);
          A.store.Ref(ptr + 56 + 480 + 32 + 0 + 0, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 0 + 4, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 0 + 8, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 0 + 12, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 0 + 16, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 0 + 20, undefined);
          A.store.Bool(ptr + 56 + 480 + 32 + 0 + 26, false);
          A.store.Bool(ptr + 56 + 480 + 32 + 0 + 24, false);
          A.store.Bool(ptr + 56 + 480 + 32 + 0 + 27, false);
          A.store.Bool(ptr + 56 + 480 + 32 + 0 + 25, false);

          A.store.Bool(ptr + 56 + 480 + 32 + 32 + 125, false);

          A.store.Bool(ptr + 56 + 480 + 32 + 32 + 0 + 28, false);
          A.store.Ref(ptr + 56 + 480 + 32 + 32 + 0 + 0, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 32 + 0 + 4, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 32 + 0 + 8, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 32 + 0 + 12, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 32 + 0 + 16, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 32 + 0 + 20, undefined);
          A.store.Bool(ptr + 56 + 480 + 32 + 32 + 0 + 26, false);
          A.store.Bool(ptr + 56 + 480 + 32 + 32 + 0 + 24, false);
          A.store.Bool(ptr + 56 + 480 + 32 + 32 + 0 + 27, false);
          A.store.Bool(ptr + 56 + 480 + 32 + 32 + 0 + 25, false);

          A.store.Bool(ptr + 56 + 480 + 32 + 32 + 32 + 28, false);
          A.store.Ref(ptr + 56 + 480 + 32 + 32 + 32 + 0, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 32 + 32 + 4, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 32 + 32 + 8, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 32 + 32 + 12, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 32 + 32 + 16, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 32 + 32 + 20, undefined);
          A.store.Bool(ptr + 56 + 480 + 32 + 32 + 32 + 26, false);
          A.store.Bool(ptr + 56 + 480 + 32 + 32 + 32 + 24, false);
          A.store.Bool(ptr + 56 + 480 + 32 + 32 + 32 + 27, false);
          A.store.Bool(ptr + 56 + 480 + 32 + 32 + 32 + 25, false);

          A.store.Bool(ptr + 56 + 480 + 32 + 32 + 64 + 28, false);
          A.store.Ref(ptr + 56 + 480 + 32 + 32 + 64 + 0, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 32 + 64 + 4, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 32 + 64 + 8, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 32 + 64 + 12, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 32 + 64 + 16, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 32 + 64 + 20, undefined);
          A.store.Bool(ptr + 56 + 480 + 32 + 32 + 64 + 26, false);
          A.store.Bool(ptr + 56 + 480 + 32 + 32 + 64 + 24, false);
          A.store.Bool(ptr + 56 + 480 + 32 + 32 + 64 + 27, false);
          A.store.Bool(ptr + 56 + 480 + 32 + 32 + 64 + 25, false);

          A.store.Bool(ptr + 56 + 480 + 32 + 32 + 96 + 28, false);
          A.store.Ref(ptr + 56 + 480 + 32 + 32 + 96 + 0, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 32 + 96 + 4, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 32 + 96 + 8, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 32 + 96 + 12, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 32 + 96 + 16, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 32 + 96 + 20, undefined);
          A.store.Bool(ptr + 56 + 480 + 32 + 32 + 96 + 26, false);
          A.store.Bool(ptr + 56 + 480 + 32 + 32 + 96 + 24, false);
          A.store.Bool(ptr + 56 + 480 + 32 + 32 + 96 + 27, false);
          A.store.Bool(ptr + 56 + 480 + 32 + 32 + 96 + 25, false);

          A.store.Bool(ptr + 56 + 480 + 32 + 160 + 28, false);
          A.store.Ref(ptr + 56 + 480 + 32 + 160 + 0, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 160 + 4, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 160 + 8, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 160 + 12, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 160 + 16, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 160 + 20, undefined);
          A.store.Bool(ptr + 56 + 480 + 32 + 160 + 26, false);
          A.store.Bool(ptr + 56 + 480 + 32 + 160 + 24, false);
          A.store.Bool(ptr + 56 + 480 + 32 + 160 + 27, false);
          A.store.Bool(ptr + 56 + 480 + 32 + 160 + 25, false);

          A.store.Bool(ptr + 56 + 480 + 32 + 192 + 125, false);

          A.store.Bool(ptr + 56 + 480 + 32 + 192 + 0 + 28, false);
          A.store.Ref(ptr + 56 + 480 + 32 + 192 + 0 + 0, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 192 + 0 + 4, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 192 + 0 + 8, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 192 + 0 + 12, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 192 + 0 + 16, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 192 + 0 + 20, undefined);
          A.store.Bool(ptr + 56 + 480 + 32 + 192 + 0 + 26, false);
          A.store.Bool(ptr + 56 + 480 + 32 + 192 + 0 + 24, false);
          A.store.Bool(ptr + 56 + 480 + 32 + 192 + 0 + 27, false);
          A.store.Bool(ptr + 56 + 480 + 32 + 192 + 0 + 25, false);

          A.store.Bool(ptr + 56 + 480 + 32 + 192 + 32 + 28, false);
          A.store.Ref(ptr + 56 + 480 + 32 + 192 + 32 + 0, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 192 + 32 + 4, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 192 + 32 + 8, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 192 + 32 + 12, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 192 + 32 + 16, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 192 + 32 + 20, undefined);
          A.store.Bool(ptr + 56 + 480 + 32 + 192 + 32 + 26, false);
          A.store.Bool(ptr + 56 + 480 + 32 + 192 + 32 + 24, false);
          A.store.Bool(ptr + 56 + 480 + 32 + 192 + 32 + 27, false);
          A.store.Bool(ptr + 56 + 480 + 32 + 192 + 32 + 25, false);

          A.store.Bool(ptr + 56 + 480 + 32 + 192 + 64 + 28, false);
          A.store.Ref(ptr + 56 + 480 + 32 + 192 + 64 + 0, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 192 + 64 + 4, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 192 + 64 + 8, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 192 + 64 + 12, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 192 + 64 + 16, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 192 + 64 + 20, undefined);
          A.store.Bool(ptr + 56 + 480 + 32 + 192 + 64 + 26, false);
          A.store.Bool(ptr + 56 + 480 + 32 + 192 + 64 + 24, false);
          A.store.Bool(ptr + 56 + 480 + 32 + 192 + 64 + 27, false);
          A.store.Bool(ptr + 56 + 480 + 32 + 192 + 64 + 25, false);

          A.store.Bool(ptr + 56 + 480 + 32 + 192 + 96 + 28, false);
          A.store.Ref(ptr + 56 + 480 + 32 + 192 + 96 + 0, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 192 + 96 + 4, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 192 + 96 + 8, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 192 + 96 + 12, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 192 + 96 + 16, undefined);
          A.store.Ref(ptr + 56 + 480 + 32 + 192 + 96 + 20, undefined);
          A.store.Bool(ptr + 56 + 480 + 32 + 192 + 96 + 26, false);
          A.store.Bool(ptr + 56 + 480 + 32 + 192 + 96 + 24, false);
          A.store.Bool(ptr + 56 + 480 + 32 + 192 + 96 + 27, false);
          A.store.Bool(ptr + 56 + 480 + 32 + 192 + 96 + 25, false);

          A.store.Bool(ptr + 56 + 480 + 352 + 28, false);
          A.store.Ref(ptr + 56 + 480 + 352 + 0, undefined);
          A.store.Ref(ptr + 56 + 480 + 352 + 4, undefined);
          A.store.Ref(ptr + 56 + 480 + 352 + 8, undefined);
          A.store.Ref(ptr + 56 + 480 + 352 + 12, undefined);
          A.store.Ref(ptr + 56 + 480 + 352 + 16, undefined);
          A.store.Ref(ptr + 56 + 480 + 352 + 20, undefined);
          A.store.Bool(ptr + 56 + 480 + 352 + 26, false);
          A.store.Bool(ptr + 56 + 480 + 352 + 24, false);
          A.store.Bool(ptr + 56 + 480 + 352 + 27, false);
          A.store.Bool(ptr + 56 + 480 + 352 + 25, false);

          A.store.Bool(ptr + 56 + 480 + 384 + 28, false);
          A.store.Ref(ptr + 56 + 480 + 384 + 0, undefined);
          A.store.Ref(ptr + 56 + 480 + 384 + 4, undefined);
          A.store.Ref(ptr + 56 + 480 + 384 + 8, undefined);
          A.store.Ref(ptr + 56 + 480 + 384 + 12, undefined);
          A.store.Ref(ptr + 56 + 480 + 384 + 16, undefined);
          A.store.Ref(ptr + 56 + 480 + 384 + 20, undefined);
          A.store.Bool(ptr + 56 + 480 + 384 + 26, false);
          A.store.Bool(ptr + 56 + 480 + 384 + 24, false);
          A.store.Bool(ptr + 56 + 480 + 384 + 27, false);
          A.store.Bool(ptr + 56 + 480 + 384 + 25, false);

          A.store.Bool(ptr + 56 + 480 + 416 + 28, false);
          A.store.Ref(ptr + 56 + 480 + 416 + 0, undefined);
          A.store.Ref(ptr + 56 + 480 + 416 + 4, undefined);
          A.store.Ref(ptr + 56 + 480 + 416 + 8, undefined);
          A.store.Ref(ptr + 56 + 480 + 416 + 12, undefined);
          A.store.Ref(ptr + 56 + 480 + 416 + 16, undefined);
          A.store.Ref(ptr + 56 + 480 + 416 + 20, undefined);
          A.store.Bool(ptr + 56 + 480 + 416 + 26, false);
          A.store.Bool(ptr + 56 + 480 + 416 + 24, false);
          A.store.Bool(ptr + 56 + 480 + 416 + 27, false);
          A.store.Bool(ptr + 56 + 480 + 416 + 25, false);

          A.store.Bool(ptr + 56 + 480 + 448 + 28, false);
          A.store.Ref(ptr + 56 + 480 + 448 + 0, undefined);
          A.store.Ref(ptr + 56 + 480 + 448 + 4, undefined);
          A.store.Ref(ptr + 56 + 480 + 448 + 8, undefined);
          A.store.Ref(ptr + 56 + 480 + 448 + 12, undefined);
          A.store.Ref(ptr + 56 + 480 + 448 + 16, undefined);
          A.store.Ref(ptr + 56 + 480 + 448 + 20, undefined);
          A.store.Bool(ptr + 56 + 480 + 448 + 26, false);
          A.store.Bool(ptr + 56 + 480 + 448 + 24, false);
          A.store.Bool(ptr + 56 + 480 + 448 + 27, false);
          A.store.Bool(ptr + 56 + 480 + 448 + 25, false);

          A.store.Bool(ptr + 56 + 480 + 480 + 28, false);
          A.store.Ref(ptr + 56 + 480 + 480 + 0, undefined);
          A.store.Ref(ptr + 56 + 480 + 480 + 4, undefined);
          A.store.Ref(ptr + 56 + 480 + 480 + 8, undefined);
          A.store.Ref(ptr + 56 + 480 + 480 + 12, undefined);
          A.store.Ref(ptr + 56 + 480 + 480 + 16, undefined);
          A.store.Ref(ptr + 56 + 480 + 480 + 20, undefined);
          A.store.Bool(ptr + 56 + 480 + 480 + 26, false);
          A.store.Bool(ptr + 56 + 480 + 480 + 24, false);
          A.store.Bool(ptr + 56 + 480 + 480 + 27, false);
          A.store.Bool(ptr + 56 + 480 + 480 + 25, false);

          A.store.Bool(ptr + 56 + 480 + 512 + 28, false);
          A.store.Ref(ptr + 56 + 480 + 512 + 0, undefined);
          A.store.Ref(ptr + 56 + 480 + 512 + 4, undefined);
          A.store.Ref(ptr + 56 + 480 + 512 + 8, undefined);
          A.store.Ref(ptr + 56 + 480 + 512 + 12, undefined);
          A.store.Ref(ptr + 56 + 480 + 512 + 16, undefined);
          A.store.Ref(ptr + 56 + 480 + 512 + 20, undefined);
          A.store.Bool(ptr + 56 + 480 + 512 + 26, false);
          A.store.Bool(ptr + 56 + 480 + 512 + 24, false);
          A.store.Bool(ptr + 56 + 480 + 512 + 27, false);
          A.store.Bool(ptr + 56 + 480 + 512 + 25, false);

          A.store.Bool(ptr + 56 + 480 + 544 + 28, false);
          A.store.Ref(ptr + 56 + 480 + 544 + 0, undefined);
          A.store.Ref(ptr + 56 + 480 + 544 + 4, undefined);
          A.store.Ref(ptr + 56 + 480 + 544 + 8, undefined);
          A.store.Ref(ptr + 56 + 480 + 544 + 12, undefined);
          A.store.Ref(ptr + 56 + 480 + 544 + 16, undefined);
          A.store.Ref(ptr + 56 + 480 + 544 + 20, undefined);
          A.store.Bool(ptr + 56 + 480 + 544 + 26, false);
          A.store.Bool(ptr + 56 + 480 + 544 + 24, false);
          A.store.Bool(ptr + 56 + 480 + 544 + 27, false);
          A.store.Bool(ptr + 56 + 480 + 544 + 25, false);

          A.store.Bool(ptr + 56 + 480 + 576 + 28, false);
          A.store.Ref(ptr + 56 + 480 + 576 + 0, undefined);
          A.store.Ref(ptr + 56 + 480 + 576 + 4, undefined);
          A.store.Ref(ptr + 56 + 480 + 576 + 8, undefined);
          A.store.Ref(ptr + 56 + 480 + 576 + 12, undefined);
          A.store.Ref(ptr + 56 + 480 + 576 + 16, undefined);
          A.store.Ref(ptr + 56 + 480 + 576 + 20, undefined);
          A.store.Bool(ptr + 56 + 480 + 576 + 26, false);
          A.store.Bool(ptr + 56 + 480 + 576 + 24, false);
          A.store.Bool(ptr + 56 + 480 + 576 + 27, false);
          A.store.Bool(ptr + 56 + 480 + 576 + 25, false);

          A.store.Bool(ptr + 56 + 480 + 608 + 21, false);
          A.store.Bool(ptr + 56 + 480 + 608 + 14, false);
          A.store.Bool(ptr + 56 + 480 + 608 + 0, false);
          A.store.Ref(ptr + 56 + 480 + 608 + 4, undefined);
          A.store.Bool(ptr + 56 + 480 + 608 + 15, false);
          A.store.Bool(ptr + 56 + 480 + 608 + 8, false);
          A.store.Bool(ptr + 56 + 480 + 608 + 16, false);
          A.store.Bool(ptr + 56 + 480 + 608 + 9, false);
          A.store.Bool(ptr + 56 + 480 + 608 + 17, false);
          A.store.Bool(ptr + 56 + 480 + 608 + 10, false);
          A.store.Bool(ptr + 56 + 480 + 608 + 18, false);
          A.store.Bool(ptr + 56 + 480 + 608 + 11, false);
          A.store.Bool(ptr + 56 + 480 + 608 + 19, false);
          A.store.Bool(ptr + 56 + 480 + 608 + 12, false);
          A.store.Bool(ptr + 56 + 480 + 608 + 20, false);
          A.store.Bool(ptr + 56 + 480 + 608 + 13, false);

          A.store.Bool(ptr + 56 + 480 + 632 + 28, false);
          A.store.Ref(ptr + 56 + 480 + 632 + 0, undefined);
          A.store.Ref(ptr + 56 + 480 + 632 + 4, undefined);
          A.store.Ref(ptr + 56 + 480 + 632 + 8, undefined);
          A.store.Ref(ptr + 56 + 480 + 632 + 12, undefined);
          A.store.Ref(ptr + 56 + 480 + 632 + 16, undefined);
          A.store.Ref(ptr + 56 + 480 + 632 + 20, undefined);
          A.store.Bool(ptr + 56 + 480 + 632 + 26, false);
          A.store.Bool(ptr + 56 + 480 + 632 + 24, false);
          A.store.Bool(ptr + 56 + 480 + 632 + 27, false);
          A.store.Bool(ptr + 56 + 480 + 632 + 25, false);

          A.store.Bool(ptr + 56 + 480 + 664 + 28, false);
          A.store.Ref(ptr + 56 + 480 + 664 + 0, undefined);
          A.store.Ref(ptr + 56 + 480 + 664 + 4, undefined);
          A.store.Ref(ptr + 56 + 480 + 664 + 8, undefined);
          A.store.Ref(ptr + 56 + 480 + 664 + 12, undefined);
          A.store.Ref(ptr + 56 + 480 + 664 + 16, undefined);
          A.store.Ref(ptr + 56 + 480 + 664 + 20, undefined);
          A.store.Bool(ptr + 56 + 480 + 664 + 26, false);
          A.store.Bool(ptr + 56 + 480 + 664 + 24, false);
          A.store.Bool(ptr + 56 + 480 + 664 + 27, false);
          A.store.Bool(ptr + 56 + 480 + 664 + 25, false);

          A.store.Bool(ptr + 56 + 480 + 696 + 28, false);
          A.store.Ref(ptr + 56 + 480 + 696 + 0, undefined);
          A.store.Ref(ptr + 56 + 480 + 696 + 4, undefined);
          A.store.Ref(ptr + 56 + 480 + 696 + 8, undefined);
          A.store.Ref(ptr + 56 + 480 + 696 + 12, undefined);
          A.store.Ref(ptr + 56 + 480 + 696 + 16, undefined);
          A.store.Ref(ptr + 56 + 480 + 696 + 20, undefined);
          A.store.Bool(ptr + 56 + 480 + 696 + 26, false);
          A.store.Bool(ptr + 56 + 480 + 696 + 24, false);
          A.store.Bool(ptr + 56 + 480 + 696 + 27, false);
          A.store.Bool(ptr + 56 + 480 + 696 + 25, false);

          A.store.Bool(ptr + 56 + 480 + 728 + 28, false);
          A.store.Ref(ptr + 56 + 480 + 728 + 0, undefined);
          A.store.Ref(ptr + 56 + 480 + 728 + 4, undefined);
          A.store.Ref(ptr + 56 + 480 + 728 + 8, undefined);
          A.store.Ref(ptr + 56 + 480 + 728 + 12, undefined);
          A.store.Ref(ptr + 56 + 480 + 728 + 16, undefined);
          A.store.Ref(ptr + 56 + 480 + 728 + 20, undefined);
          A.store.Bool(ptr + 56 + 480 + 728 + 26, false);
          A.store.Bool(ptr + 56 + 480 + 728 + 24, false);
          A.store.Bool(ptr + 56 + 480 + 728 + 27, false);
          A.store.Bool(ptr + 56 + 480 + 728 + 25, false);

          A.store.Bool(ptr + 56 + 480 + 760 + 21, false);
          A.store.Bool(ptr + 56 + 480 + 760 + 14, false);
          A.store.Bool(ptr + 56 + 480 + 760 + 0, false);
          A.store.Ref(ptr + 56 + 480 + 760 + 4, undefined);
          A.store.Bool(ptr + 56 + 480 + 760 + 15, false);
          A.store.Bool(ptr + 56 + 480 + 760 + 8, false);
          A.store.Bool(ptr + 56 + 480 + 760 + 16, false);
          A.store.Bool(ptr + 56 + 480 + 760 + 9, false);
          A.store.Bool(ptr + 56 + 480 + 760 + 17, false);
          A.store.Bool(ptr + 56 + 480 + 760 + 10, false);
          A.store.Bool(ptr + 56 + 480 + 760 + 18, false);
          A.store.Bool(ptr + 56 + 480 + 760 + 11, false);
          A.store.Bool(ptr + 56 + 480 + 760 + 19, false);
          A.store.Bool(ptr + 56 + 480 + 760 + 12, false);
          A.store.Bool(ptr + 56 + 480 + 760 + 20, false);
          A.store.Bool(ptr + 56 + 480 + 760 + 13, false);

          A.store.Bool(ptr + 56 + 480 + 784 + 21, false);
          A.store.Bool(ptr + 56 + 480 + 784 + 14, false);
          A.store.Bool(ptr + 56 + 480 + 784 + 0, false);
          A.store.Ref(ptr + 56 + 480 + 784 + 4, undefined);
          A.store.Bool(ptr + 56 + 480 + 784 + 15, false);
          A.store.Bool(ptr + 56 + 480 + 784 + 8, false);
          A.store.Bool(ptr + 56 + 480 + 784 + 16, false);
          A.store.Bool(ptr + 56 + 480 + 784 + 9, false);
          A.store.Bool(ptr + 56 + 480 + 784 + 17, false);
          A.store.Bool(ptr + 56 + 480 + 784 + 10, false);
          A.store.Bool(ptr + 56 + 480 + 784 + 18, false);
          A.store.Bool(ptr + 56 + 480 + 784 + 11, false);
          A.store.Bool(ptr + 56 + 480 + 784 + 19, false);
          A.store.Bool(ptr + 56 + 480 + 784 + 12, false);
          A.store.Bool(ptr + 56 + 480 + 784 + 20, false);
          A.store.Bool(ptr + 56 + 480 + 784 + 13, false);

          A.store.Bool(ptr + 56 + 1288 + 28, false);
          A.store.Ref(ptr + 56 + 1288 + 0, undefined);
          A.store.Ref(ptr + 56 + 1288 + 4, undefined);
          A.store.Ref(ptr + 56 + 1288 + 8, undefined);
          A.store.Ref(ptr + 56 + 1288 + 12, undefined);
          A.store.Ref(ptr + 56 + 1288 + 16, undefined);
          A.store.Ref(ptr + 56 + 1288 + 20, undefined);
          A.store.Bool(ptr + 56 + 1288 + 26, false);
          A.store.Bool(ptr + 56 + 1288 + 24, false);
          A.store.Bool(ptr + 56 + 1288 + 27, false);
          A.store.Bool(ptr + 56 + 1288 + 25, false);

          A.store.Bool(ptr + 56 + 1320 + 33, false);
          A.store.Bool(ptr + 56 + 1320 + 26, false);
          A.store.Int32(ptr + 56 + 1320 + 0, 0);
          A.store.Ref(ptr + 56 + 1320 + 4, undefined);
          A.store.Bool(ptr + 56 + 1320 + 27, false);
          A.store.Int32(ptr + 56 + 1320 + 8, 0);
          A.store.Bool(ptr + 56 + 1320 + 28, false);
          A.store.Int32(ptr + 56 + 1320 + 12, 0);
          A.store.Bool(ptr + 56 + 1320 + 29, false);
          A.store.Int32(ptr + 56 + 1320 + 16, 0);
          A.store.Bool(ptr + 56 + 1320 + 30, false);
          A.store.Int32(ptr + 56 + 1320 + 20, 0);
          A.store.Bool(ptr + 56 + 1320 + 31, false);
          A.store.Bool(ptr + 56 + 1320 + 24, false);
          A.store.Bool(ptr + 56 + 1320 + 32, false);
          A.store.Bool(ptr + 56 + 1320 + 25, false);

          A.store.Bool(ptr + 56 + 1356 + 28, false);
          A.store.Ref(ptr + 56 + 1356 + 0, undefined);
          A.store.Ref(ptr + 56 + 1356 + 4, undefined);
          A.store.Ref(ptr + 56 + 1356 + 8, undefined);
          A.store.Ref(ptr + 56 + 1356 + 12, undefined);
          A.store.Ref(ptr + 56 + 1356 + 16, undefined);
          A.store.Ref(ptr + 56 + 1356 + 20, undefined);
          A.store.Bool(ptr + 56 + 1356 + 26, false);
          A.store.Bool(ptr + 56 + 1356 + 24, false);
          A.store.Bool(ptr + 56 + 1356 + 27, false);
          A.store.Bool(ptr + 56 + 1356 + 25, false);

          A.store.Bool(ptr + 56 + 1388 + 21, false);
          A.store.Bool(ptr + 56 + 1388 + 14, false);
          A.store.Bool(ptr + 56 + 1388 + 0, false);
          A.store.Ref(ptr + 56 + 1388 + 4, undefined);
          A.store.Bool(ptr + 56 + 1388 + 15, false);
          A.store.Bool(ptr + 56 + 1388 + 8, false);
          A.store.Bool(ptr + 56 + 1388 + 16, false);
          A.store.Bool(ptr + 56 + 1388 + 9, false);
          A.store.Bool(ptr + 56 + 1388 + 17, false);
          A.store.Bool(ptr + 56 + 1388 + 10, false);
          A.store.Bool(ptr + 56 + 1388 + 18, false);
          A.store.Bool(ptr + 56 + 1388 + 11, false);
          A.store.Bool(ptr + 56 + 1388 + 19, false);
          A.store.Bool(ptr + 56 + 1388 + 12, false);
          A.store.Bool(ptr + 56 + 1388 + 20, false);
          A.store.Bool(ptr + 56 + 1388 + 13, false);

          A.store.Bool(ptr + 56 + 1412 + 28, false);
          A.store.Ref(ptr + 56 + 1412 + 0, undefined);
          A.store.Ref(ptr + 56 + 1412 + 4, undefined);
          A.store.Ref(ptr + 56 + 1412 + 8, undefined);
          A.store.Ref(ptr + 56 + 1412 + 12, undefined);
          A.store.Ref(ptr + 56 + 1412 + 16, undefined);
          A.store.Ref(ptr + 56 + 1412 + 20, undefined);
          A.store.Bool(ptr + 56 + 1412 + 26, false);
          A.store.Bool(ptr + 56 + 1412 + 24, false);
          A.store.Bool(ptr + 56 + 1412 + 27, false);
          A.store.Bool(ptr + 56 + 1412 + 25, false);

          A.store.Bool(ptr + 56 + 1444 + 28, false);
          A.store.Ref(ptr + 56 + 1444 + 0, undefined);
          A.store.Ref(ptr + 56 + 1444 + 4, undefined);
          A.store.Ref(ptr + 56 + 1444 + 8, undefined);
          A.store.Ref(ptr + 56 + 1444 + 12, undefined);
          A.store.Ref(ptr + 56 + 1444 + 16, undefined);
          A.store.Ref(ptr + 56 + 1444 + 20, undefined);
          A.store.Bool(ptr + 56 + 1444 + 26, false);
          A.store.Bool(ptr + 56 + 1444 + 24, false);
          A.store.Bool(ptr + 56 + 1444 + 27, false);
          A.store.Bool(ptr + 56 + 1444 + 25, false);

          A.store.Bool(ptr + 56 + 1476 + 85, false);

          A.store.Bool(ptr + 56 + 1476 + 0 + 28, false);
          A.store.Ref(ptr + 56 + 1476 + 0 + 0, undefined);
          A.store.Ref(ptr + 56 + 1476 + 0 + 4, undefined);
          A.store.Ref(ptr + 56 + 1476 + 0 + 8, undefined);
          A.store.Ref(ptr + 56 + 1476 + 0 + 12, undefined);
          A.store.Ref(ptr + 56 + 1476 + 0 + 16, undefined);
          A.store.Ref(ptr + 56 + 1476 + 0 + 20, undefined);
          A.store.Bool(ptr + 56 + 1476 + 0 + 26, false);
          A.store.Bool(ptr + 56 + 1476 + 0 + 24, false);
          A.store.Bool(ptr + 56 + 1476 + 0 + 27, false);
          A.store.Bool(ptr + 56 + 1476 + 0 + 25, false);

          A.store.Bool(ptr + 56 + 1476 + 32 + 21, false);
          A.store.Bool(ptr + 56 + 1476 + 32 + 14, false);
          A.store.Bool(ptr + 56 + 1476 + 32 + 0, false);
          A.store.Ref(ptr + 56 + 1476 + 32 + 4, undefined);
          A.store.Bool(ptr + 56 + 1476 + 32 + 15, false);
          A.store.Bool(ptr + 56 + 1476 + 32 + 8, false);
          A.store.Bool(ptr + 56 + 1476 + 32 + 16, false);
          A.store.Bool(ptr + 56 + 1476 + 32 + 9, false);
          A.store.Bool(ptr + 56 + 1476 + 32 + 17, false);
          A.store.Bool(ptr + 56 + 1476 + 32 + 10, false);
          A.store.Bool(ptr + 56 + 1476 + 32 + 18, false);
          A.store.Bool(ptr + 56 + 1476 + 32 + 11, false);
          A.store.Bool(ptr + 56 + 1476 + 32 + 19, false);
          A.store.Bool(ptr + 56 + 1476 + 32 + 12, false);
          A.store.Bool(ptr + 56 + 1476 + 32 + 20, false);
          A.store.Bool(ptr + 56 + 1476 + 32 + 13, false);

          A.store.Bool(ptr + 56 + 1476 + 56 + 28, false);
          A.store.Ref(ptr + 56 + 1476 + 56 + 0, undefined);
          A.store.Ref(ptr + 56 + 1476 + 56 + 4, undefined);
          A.store.Ref(ptr + 56 + 1476 + 56 + 8, undefined);
          A.store.Ref(ptr + 56 + 1476 + 56 + 12, undefined);
          A.store.Ref(ptr + 56 + 1476 + 56 + 16, undefined);
          A.store.Ref(ptr + 56 + 1476 + 56 + 20, undefined);
          A.store.Bool(ptr + 56 + 1476 + 56 + 26, false);
          A.store.Bool(ptr + 56 + 1476 + 56 + 24, false);
          A.store.Bool(ptr + 56 + 1476 + 56 + 27, false);
          A.store.Bool(ptr + 56 + 1476 + 56 + 25, false);
        } else {
          A.store.Bool(ptr + 56 + 1562, true);

          if (typeof x["IPsec"]["AuthenticationType"] === "undefined") {
            A.store.Bool(ptr + 56 + 0 + 28, false);
            A.store.Ref(ptr + 56 + 0 + 0, undefined);
            A.store.Ref(ptr + 56 + 0 + 4, undefined);
            A.store.Ref(ptr + 56 + 0 + 8, undefined);
            A.store.Ref(ptr + 56 + 0 + 12, undefined);
            A.store.Ref(ptr + 56 + 0 + 16, undefined);
            A.store.Ref(ptr + 56 + 0 + 20, undefined);
            A.store.Bool(ptr + 56 + 0 + 26, false);
            A.store.Bool(ptr + 56 + 0 + 24, false);
            A.store.Bool(ptr + 56 + 0 + 27, false);
            A.store.Bool(ptr + 56 + 0 + 25, false);
          } else {
            A.store.Bool(ptr + 56 + 0 + 28, true);
            A.store.Ref(ptr + 56 + 0 + 0, x["IPsec"]["AuthenticationType"]["Active"]);
            A.store.Ref(ptr + 56 + 0 + 4, x["IPsec"]["AuthenticationType"]["Effective"]);
            A.store.Ref(ptr + 56 + 0 + 8, x["IPsec"]["AuthenticationType"]["UserPolicy"]);
            A.store.Ref(ptr + 56 + 0 + 12, x["IPsec"]["AuthenticationType"]["DevicePolicy"]);
            A.store.Ref(ptr + 56 + 0 + 16, x["IPsec"]["AuthenticationType"]["UserSetting"]);
            A.store.Ref(ptr + 56 + 0 + 20, x["IPsec"]["AuthenticationType"]["SharedSetting"]);
            A.store.Bool(ptr + 56 + 0 + 26, "UserEditable" in x["IPsec"]["AuthenticationType"] ? true : false);
            A.store.Bool(ptr + 56 + 0 + 24, x["IPsec"]["AuthenticationType"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 56 + 0 + 27, "DeviceEditable" in x["IPsec"]["AuthenticationType"] ? true : false);
            A.store.Bool(ptr + 56 + 0 + 25, x["IPsec"]["AuthenticationType"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["IPsec"]["ClientCertPattern"] === "undefined") {
            A.store.Bool(ptr + 56 + 32 + 318, false);

            A.store.Bool(ptr + 56 + 32 + 0 + 28, false);
            A.store.Ref(ptr + 56 + 32 + 0 + 0, undefined);
            A.store.Ref(ptr + 56 + 32 + 0 + 4, undefined);
            A.store.Ref(ptr + 56 + 32 + 0 + 8, undefined);
            A.store.Ref(ptr + 56 + 32 + 0 + 12, undefined);
            A.store.Ref(ptr + 56 + 32 + 0 + 16, undefined);
            A.store.Ref(ptr + 56 + 32 + 0 + 20, undefined);
            A.store.Bool(ptr + 56 + 32 + 0 + 26, false);
            A.store.Bool(ptr + 56 + 32 + 0 + 24, false);
            A.store.Bool(ptr + 56 + 32 + 0 + 27, false);
            A.store.Bool(ptr + 56 + 32 + 0 + 25, false);

            A.store.Bool(ptr + 56 + 32 + 32 + 125, false);

            A.store.Bool(ptr + 56 + 32 + 32 + 0 + 28, false);
            A.store.Ref(ptr + 56 + 32 + 32 + 0 + 0, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 0 + 4, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 0 + 8, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 0 + 12, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 0 + 16, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 0 + 20, undefined);
            A.store.Bool(ptr + 56 + 32 + 32 + 0 + 26, false);
            A.store.Bool(ptr + 56 + 32 + 32 + 0 + 24, false);
            A.store.Bool(ptr + 56 + 32 + 32 + 0 + 27, false);
            A.store.Bool(ptr + 56 + 32 + 32 + 0 + 25, false);

            A.store.Bool(ptr + 56 + 32 + 32 + 32 + 28, false);
            A.store.Ref(ptr + 56 + 32 + 32 + 32 + 0, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 32 + 4, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 32 + 8, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 32 + 12, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 32 + 16, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 32 + 20, undefined);
            A.store.Bool(ptr + 56 + 32 + 32 + 32 + 26, false);
            A.store.Bool(ptr + 56 + 32 + 32 + 32 + 24, false);
            A.store.Bool(ptr + 56 + 32 + 32 + 32 + 27, false);
            A.store.Bool(ptr + 56 + 32 + 32 + 32 + 25, false);

            A.store.Bool(ptr + 56 + 32 + 32 + 64 + 28, false);
            A.store.Ref(ptr + 56 + 32 + 32 + 64 + 0, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 64 + 4, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 64 + 8, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 64 + 12, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 64 + 16, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 64 + 20, undefined);
            A.store.Bool(ptr + 56 + 32 + 32 + 64 + 26, false);
            A.store.Bool(ptr + 56 + 32 + 32 + 64 + 24, false);
            A.store.Bool(ptr + 56 + 32 + 32 + 64 + 27, false);
            A.store.Bool(ptr + 56 + 32 + 32 + 64 + 25, false);

            A.store.Bool(ptr + 56 + 32 + 32 + 96 + 28, false);
            A.store.Ref(ptr + 56 + 32 + 32 + 96 + 0, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 96 + 4, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 96 + 8, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 96 + 12, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 96 + 16, undefined);
            A.store.Ref(ptr + 56 + 32 + 32 + 96 + 20, undefined);
            A.store.Bool(ptr + 56 + 32 + 32 + 96 + 26, false);
            A.store.Bool(ptr + 56 + 32 + 32 + 96 + 24, false);
            A.store.Bool(ptr + 56 + 32 + 32 + 96 + 27, false);
            A.store.Bool(ptr + 56 + 32 + 32 + 96 + 25, false);

            A.store.Bool(ptr + 56 + 32 + 160 + 28, false);
            A.store.Ref(ptr + 56 + 32 + 160 + 0, undefined);
            A.store.Ref(ptr + 56 + 32 + 160 + 4, undefined);
            A.store.Ref(ptr + 56 + 32 + 160 + 8, undefined);
            A.store.Ref(ptr + 56 + 32 + 160 + 12, undefined);
            A.store.Ref(ptr + 56 + 32 + 160 + 16, undefined);
            A.store.Ref(ptr + 56 + 32 + 160 + 20, undefined);
            A.store.Bool(ptr + 56 + 32 + 160 + 26, false);
            A.store.Bool(ptr + 56 + 32 + 160 + 24, false);
            A.store.Bool(ptr + 56 + 32 + 160 + 27, false);
            A.store.Bool(ptr + 56 + 32 + 160 + 25, false);

            A.store.Bool(ptr + 56 + 32 + 192 + 125, false);

            A.store.Bool(ptr + 56 + 32 + 192 + 0 + 28, false);
            A.store.Ref(ptr + 56 + 32 + 192 + 0 + 0, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 0 + 4, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 0 + 8, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 0 + 12, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 0 + 16, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 0 + 20, undefined);
            A.store.Bool(ptr + 56 + 32 + 192 + 0 + 26, false);
            A.store.Bool(ptr + 56 + 32 + 192 + 0 + 24, false);
            A.store.Bool(ptr + 56 + 32 + 192 + 0 + 27, false);
            A.store.Bool(ptr + 56 + 32 + 192 + 0 + 25, false);

            A.store.Bool(ptr + 56 + 32 + 192 + 32 + 28, false);
            A.store.Ref(ptr + 56 + 32 + 192 + 32 + 0, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 32 + 4, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 32 + 8, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 32 + 12, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 32 + 16, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 32 + 20, undefined);
            A.store.Bool(ptr + 56 + 32 + 192 + 32 + 26, false);
            A.store.Bool(ptr + 56 + 32 + 192 + 32 + 24, false);
            A.store.Bool(ptr + 56 + 32 + 192 + 32 + 27, false);
            A.store.Bool(ptr + 56 + 32 + 192 + 32 + 25, false);

            A.store.Bool(ptr + 56 + 32 + 192 + 64 + 28, false);
            A.store.Ref(ptr + 56 + 32 + 192 + 64 + 0, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 64 + 4, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 64 + 8, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 64 + 12, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 64 + 16, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 64 + 20, undefined);
            A.store.Bool(ptr + 56 + 32 + 192 + 64 + 26, false);
            A.store.Bool(ptr + 56 + 32 + 192 + 64 + 24, false);
            A.store.Bool(ptr + 56 + 32 + 192 + 64 + 27, false);
            A.store.Bool(ptr + 56 + 32 + 192 + 64 + 25, false);

            A.store.Bool(ptr + 56 + 32 + 192 + 96 + 28, false);
            A.store.Ref(ptr + 56 + 32 + 192 + 96 + 0, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 96 + 4, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 96 + 8, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 96 + 12, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 96 + 16, undefined);
            A.store.Ref(ptr + 56 + 32 + 192 + 96 + 20, undefined);
            A.store.Bool(ptr + 56 + 32 + 192 + 96 + 26, false);
            A.store.Bool(ptr + 56 + 32 + 192 + 96 + 24, false);
            A.store.Bool(ptr + 56 + 32 + 192 + 96 + 27, false);
            A.store.Bool(ptr + 56 + 32 + 192 + 96 + 25, false);
          } else {
            A.store.Bool(ptr + 56 + 32 + 318, true);

            if (typeof x["IPsec"]["ClientCertPattern"]["EnrollmentURI"] === "undefined") {
              A.store.Bool(ptr + 56 + 32 + 0 + 28, false);
              A.store.Ref(ptr + 56 + 32 + 0 + 0, undefined);
              A.store.Ref(ptr + 56 + 32 + 0 + 4, undefined);
              A.store.Ref(ptr + 56 + 32 + 0 + 8, undefined);
              A.store.Ref(ptr + 56 + 32 + 0 + 12, undefined);
              A.store.Ref(ptr + 56 + 32 + 0 + 16, undefined);
              A.store.Ref(ptr + 56 + 32 + 0 + 20, undefined);
              A.store.Bool(ptr + 56 + 32 + 0 + 26, false);
              A.store.Bool(ptr + 56 + 32 + 0 + 24, false);
              A.store.Bool(ptr + 56 + 32 + 0 + 27, false);
              A.store.Bool(ptr + 56 + 32 + 0 + 25, false);
            } else {
              A.store.Bool(ptr + 56 + 32 + 0 + 28, true);
              A.store.Ref(ptr + 56 + 32 + 0 + 0, x["IPsec"]["ClientCertPattern"]["EnrollmentURI"]["Active"]);
              A.store.Ref(ptr + 56 + 32 + 0 + 4, x["IPsec"]["ClientCertPattern"]["EnrollmentURI"]["Effective"]);
              A.store.Ref(ptr + 56 + 32 + 0 + 8, x["IPsec"]["ClientCertPattern"]["EnrollmentURI"]["UserPolicy"]);
              A.store.Ref(ptr + 56 + 32 + 0 + 12, x["IPsec"]["ClientCertPattern"]["EnrollmentURI"]["DevicePolicy"]);
              A.store.Ref(ptr + 56 + 32 + 0 + 16, x["IPsec"]["ClientCertPattern"]["EnrollmentURI"]["UserSetting"]);
              A.store.Ref(ptr + 56 + 32 + 0 + 20, x["IPsec"]["ClientCertPattern"]["EnrollmentURI"]["SharedSetting"]);
              A.store.Bool(
                ptr + 56 + 32 + 0 + 26,
                "UserEditable" in x["IPsec"]["ClientCertPattern"]["EnrollmentURI"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 32 + 0 + 24,
                x["IPsec"]["ClientCertPattern"]["EnrollmentURI"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 32 + 0 + 27,
                "DeviceEditable" in x["IPsec"]["ClientCertPattern"]["EnrollmentURI"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 32 + 0 + 25,
                x["IPsec"]["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["IPsec"]["ClientCertPattern"]["Issuer"] === "undefined") {
              A.store.Bool(ptr + 56 + 32 + 32 + 125, false);

              A.store.Bool(ptr + 56 + 32 + 32 + 0 + 28, false);
              A.store.Ref(ptr + 56 + 32 + 32 + 0 + 0, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 0 + 4, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 0 + 8, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 0 + 12, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 0 + 16, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 0 + 20, undefined);
              A.store.Bool(ptr + 56 + 32 + 32 + 0 + 26, false);
              A.store.Bool(ptr + 56 + 32 + 32 + 0 + 24, false);
              A.store.Bool(ptr + 56 + 32 + 32 + 0 + 27, false);
              A.store.Bool(ptr + 56 + 32 + 32 + 0 + 25, false);

              A.store.Bool(ptr + 56 + 32 + 32 + 32 + 28, false);
              A.store.Ref(ptr + 56 + 32 + 32 + 32 + 0, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 32 + 4, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 32 + 8, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 32 + 12, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 32 + 16, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 32 + 20, undefined);
              A.store.Bool(ptr + 56 + 32 + 32 + 32 + 26, false);
              A.store.Bool(ptr + 56 + 32 + 32 + 32 + 24, false);
              A.store.Bool(ptr + 56 + 32 + 32 + 32 + 27, false);
              A.store.Bool(ptr + 56 + 32 + 32 + 32 + 25, false);

              A.store.Bool(ptr + 56 + 32 + 32 + 64 + 28, false);
              A.store.Ref(ptr + 56 + 32 + 32 + 64 + 0, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 64 + 4, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 64 + 8, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 64 + 12, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 64 + 16, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 64 + 20, undefined);
              A.store.Bool(ptr + 56 + 32 + 32 + 64 + 26, false);
              A.store.Bool(ptr + 56 + 32 + 32 + 64 + 24, false);
              A.store.Bool(ptr + 56 + 32 + 32 + 64 + 27, false);
              A.store.Bool(ptr + 56 + 32 + 32 + 64 + 25, false);

              A.store.Bool(ptr + 56 + 32 + 32 + 96 + 28, false);
              A.store.Ref(ptr + 56 + 32 + 32 + 96 + 0, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 96 + 4, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 96 + 8, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 96 + 12, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 96 + 16, undefined);
              A.store.Ref(ptr + 56 + 32 + 32 + 96 + 20, undefined);
              A.store.Bool(ptr + 56 + 32 + 32 + 96 + 26, false);
              A.store.Bool(ptr + 56 + 32 + 32 + 96 + 24, false);
              A.store.Bool(ptr + 56 + 32 + 32 + 96 + 27, false);
              A.store.Bool(ptr + 56 + 32 + 32 + 96 + 25, false);
            } else {
              A.store.Bool(ptr + 56 + 32 + 32 + 125, true);

              if (typeof x["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"] === "undefined") {
                A.store.Bool(ptr + 56 + 32 + 32 + 0 + 28, false);
                A.store.Ref(ptr + 56 + 32 + 32 + 0 + 0, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 0 + 4, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 0 + 8, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 0 + 12, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 0 + 16, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 0 + 20, undefined);
                A.store.Bool(ptr + 56 + 32 + 32 + 0 + 26, false);
                A.store.Bool(ptr + 56 + 32 + 32 + 0 + 24, false);
                A.store.Bool(ptr + 56 + 32 + 32 + 0 + 27, false);
                A.store.Bool(ptr + 56 + 32 + 32 + 0 + 25, false);
              } else {
                A.store.Bool(ptr + 56 + 32 + 32 + 0 + 28, true);
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 0 + 0,
                  x["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]["Active"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 0 + 4,
                  x["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]["Effective"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 0 + 8,
                  x["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 0 + 12,
                  x["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 0 + 16,
                  x["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 0 + 20,
                  x["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 56 + 32 + 32 + 0 + 26,
                  "UserEditable" in x["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 32 + 0 + 24,
                  x["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 32 + 0 + 27,
                  "DeviceEditable" in x["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 32 + 0 + 25,
                  x["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"] === "undefined") {
                A.store.Bool(ptr + 56 + 32 + 32 + 32 + 28, false);
                A.store.Ref(ptr + 56 + 32 + 32 + 32 + 0, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 32 + 4, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 32 + 8, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 32 + 12, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 32 + 16, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 32 + 20, undefined);
                A.store.Bool(ptr + 56 + 32 + 32 + 32 + 26, false);
                A.store.Bool(ptr + 56 + 32 + 32 + 32 + 24, false);
                A.store.Bool(ptr + 56 + 32 + 32 + 32 + 27, false);
                A.store.Bool(ptr + 56 + 32 + 32 + 32 + 25, false);
              } else {
                A.store.Bool(ptr + 56 + 32 + 32 + 32 + 28, true);
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 32 + 0,
                  x["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]["Active"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 32 + 4,
                  x["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]["Effective"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 32 + 8,
                  x["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 32 + 12,
                  x["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 32 + 16,
                  x["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 32 + 20,
                  x["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 56 + 32 + 32 + 32 + 26,
                  "UserEditable" in x["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 32 + 32 + 24,
                  x["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 32 + 32 + 27,
                  "DeviceEditable" in x["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 32 + 32 + 25,
                  x["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"] === "undefined") {
                A.store.Bool(ptr + 56 + 32 + 32 + 64 + 28, false);
                A.store.Ref(ptr + 56 + 32 + 32 + 64 + 0, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 64 + 4, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 64 + 8, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 64 + 12, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 64 + 16, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 64 + 20, undefined);
                A.store.Bool(ptr + 56 + 32 + 32 + 64 + 26, false);
                A.store.Bool(ptr + 56 + 32 + 32 + 64 + 24, false);
                A.store.Bool(ptr + 56 + 32 + 32 + 64 + 27, false);
                A.store.Bool(ptr + 56 + 32 + 32 + 64 + 25, false);
              } else {
                A.store.Bool(ptr + 56 + 32 + 32 + 64 + 28, true);
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 64 + 0,
                  x["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]["Active"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 64 + 4,
                  x["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]["Effective"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 64 + 8,
                  x["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 64 + 12,
                  x["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 64 + 16,
                  x["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 64 + 20,
                  x["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 56 + 32 + 32 + 64 + 26,
                  "UserEditable" in x["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 32 + 64 + 24,
                  x["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 32 + 64 + 27,
                  "DeviceEditable" in x["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 32 + 64 + 25,
                  x["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] === "undefined") {
                A.store.Bool(ptr + 56 + 32 + 32 + 96 + 28, false);
                A.store.Ref(ptr + 56 + 32 + 32 + 96 + 0, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 96 + 4, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 96 + 8, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 96 + 12, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 96 + 16, undefined);
                A.store.Ref(ptr + 56 + 32 + 32 + 96 + 20, undefined);
                A.store.Bool(ptr + 56 + 32 + 32 + 96 + 26, false);
                A.store.Bool(ptr + 56 + 32 + 32 + 96 + 24, false);
                A.store.Bool(ptr + 56 + 32 + 32 + 96 + 27, false);
                A.store.Bool(ptr + 56 + 32 + 32 + 96 + 25, false);
              } else {
                A.store.Bool(ptr + 56 + 32 + 32 + 96 + 28, true);
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 96 + 0,
                  x["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Active"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 96 + 4,
                  x["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Effective"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 96 + 8,
                  x["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 96 + 12,
                  x["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 96 + 16,
                  x["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 32 + 96 + 20,
                  x["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 56 + 32 + 32 + 96 + 26,
                  "UserEditable" in x["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 32 + 96 + 24,
                  x["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 32 + 96 + 27,
                  "DeviceEditable" in x["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 32 + 96 + 25,
                  x["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"] ? true : false
                );
              }
            }

            if (typeof x["IPsec"]["ClientCertPattern"]["IssuerCARef"] === "undefined") {
              A.store.Bool(ptr + 56 + 32 + 160 + 28, false);
              A.store.Ref(ptr + 56 + 32 + 160 + 0, undefined);
              A.store.Ref(ptr + 56 + 32 + 160 + 4, undefined);
              A.store.Ref(ptr + 56 + 32 + 160 + 8, undefined);
              A.store.Ref(ptr + 56 + 32 + 160 + 12, undefined);
              A.store.Ref(ptr + 56 + 32 + 160 + 16, undefined);
              A.store.Ref(ptr + 56 + 32 + 160 + 20, undefined);
              A.store.Bool(ptr + 56 + 32 + 160 + 26, false);
              A.store.Bool(ptr + 56 + 32 + 160 + 24, false);
              A.store.Bool(ptr + 56 + 32 + 160 + 27, false);
              A.store.Bool(ptr + 56 + 32 + 160 + 25, false);
            } else {
              A.store.Bool(ptr + 56 + 32 + 160 + 28, true);
              A.store.Ref(ptr + 56 + 32 + 160 + 0, x["IPsec"]["ClientCertPattern"]["IssuerCARef"]["Active"]);
              A.store.Ref(ptr + 56 + 32 + 160 + 4, x["IPsec"]["ClientCertPattern"]["IssuerCARef"]["Effective"]);
              A.store.Ref(ptr + 56 + 32 + 160 + 8, x["IPsec"]["ClientCertPattern"]["IssuerCARef"]["UserPolicy"]);
              A.store.Ref(ptr + 56 + 32 + 160 + 12, x["IPsec"]["ClientCertPattern"]["IssuerCARef"]["DevicePolicy"]);
              A.store.Ref(ptr + 56 + 32 + 160 + 16, x["IPsec"]["ClientCertPattern"]["IssuerCARef"]["UserSetting"]);
              A.store.Ref(ptr + 56 + 32 + 160 + 20, x["IPsec"]["ClientCertPattern"]["IssuerCARef"]["SharedSetting"]);
              A.store.Bool(
                ptr + 56 + 32 + 160 + 26,
                "UserEditable" in x["IPsec"]["ClientCertPattern"]["IssuerCARef"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 32 + 160 + 24,
                x["IPsec"]["ClientCertPattern"]["IssuerCARef"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 32 + 160 + 27,
                "DeviceEditable" in x["IPsec"]["ClientCertPattern"]["IssuerCARef"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 32 + 160 + 25,
                x["IPsec"]["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["IPsec"]["ClientCertPattern"]["Subject"] === "undefined") {
              A.store.Bool(ptr + 56 + 32 + 192 + 125, false);

              A.store.Bool(ptr + 56 + 32 + 192 + 0 + 28, false);
              A.store.Ref(ptr + 56 + 32 + 192 + 0 + 0, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 0 + 4, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 0 + 8, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 0 + 12, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 0 + 16, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 0 + 20, undefined);
              A.store.Bool(ptr + 56 + 32 + 192 + 0 + 26, false);
              A.store.Bool(ptr + 56 + 32 + 192 + 0 + 24, false);
              A.store.Bool(ptr + 56 + 32 + 192 + 0 + 27, false);
              A.store.Bool(ptr + 56 + 32 + 192 + 0 + 25, false);

              A.store.Bool(ptr + 56 + 32 + 192 + 32 + 28, false);
              A.store.Ref(ptr + 56 + 32 + 192 + 32 + 0, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 32 + 4, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 32 + 8, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 32 + 12, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 32 + 16, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 32 + 20, undefined);
              A.store.Bool(ptr + 56 + 32 + 192 + 32 + 26, false);
              A.store.Bool(ptr + 56 + 32 + 192 + 32 + 24, false);
              A.store.Bool(ptr + 56 + 32 + 192 + 32 + 27, false);
              A.store.Bool(ptr + 56 + 32 + 192 + 32 + 25, false);

              A.store.Bool(ptr + 56 + 32 + 192 + 64 + 28, false);
              A.store.Ref(ptr + 56 + 32 + 192 + 64 + 0, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 64 + 4, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 64 + 8, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 64 + 12, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 64 + 16, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 64 + 20, undefined);
              A.store.Bool(ptr + 56 + 32 + 192 + 64 + 26, false);
              A.store.Bool(ptr + 56 + 32 + 192 + 64 + 24, false);
              A.store.Bool(ptr + 56 + 32 + 192 + 64 + 27, false);
              A.store.Bool(ptr + 56 + 32 + 192 + 64 + 25, false);

              A.store.Bool(ptr + 56 + 32 + 192 + 96 + 28, false);
              A.store.Ref(ptr + 56 + 32 + 192 + 96 + 0, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 96 + 4, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 96 + 8, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 96 + 12, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 96 + 16, undefined);
              A.store.Ref(ptr + 56 + 32 + 192 + 96 + 20, undefined);
              A.store.Bool(ptr + 56 + 32 + 192 + 96 + 26, false);
              A.store.Bool(ptr + 56 + 32 + 192 + 96 + 24, false);
              A.store.Bool(ptr + 56 + 32 + 192 + 96 + 27, false);
              A.store.Bool(ptr + 56 + 32 + 192 + 96 + 25, false);
            } else {
              A.store.Bool(ptr + 56 + 32 + 192 + 125, true);

              if (typeof x["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"] === "undefined") {
                A.store.Bool(ptr + 56 + 32 + 192 + 0 + 28, false);
                A.store.Ref(ptr + 56 + 32 + 192 + 0 + 0, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 0 + 4, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 0 + 8, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 0 + 12, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 0 + 16, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 0 + 20, undefined);
                A.store.Bool(ptr + 56 + 32 + 192 + 0 + 26, false);
                A.store.Bool(ptr + 56 + 32 + 192 + 0 + 24, false);
                A.store.Bool(ptr + 56 + 32 + 192 + 0 + 27, false);
                A.store.Bool(ptr + 56 + 32 + 192 + 0 + 25, false);
              } else {
                A.store.Bool(ptr + 56 + 32 + 192 + 0 + 28, true);
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 0 + 0,
                  x["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]["Active"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 0 + 4,
                  x["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]["Effective"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 0 + 8,
                  x["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 0 + 12,
                  x["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 0 + 16,
                  x["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 0 + 20,
                  x["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 56 + 32 + 192 + 0 + 26,
                  "UserEditable" in x["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 192 + 0 + 24,
                  x["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 192 + 0 + 27,
                  "DeviceEditable" in x["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 192 + 0 + 25,
                  x["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["IPsec"]["ClientCertPattern"]["Subject"]["Locality"] === "undefined") {
                A.store.Bool(ptr + 56 + 32 + 192 + 32 + 28, false);
                A.store.Ref(ptr + 56 + 32 + 192 + 32 + 0, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 32 + 4, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 32 + 8, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 32 + 12, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 32 + 16, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 32 + 20, undefined);
                A.store.Bool(ptr + 56 + 32 + 192 + 32 + 26, false);
                A.store.Bool(ptr + 56 + 32 + 192 + 32 + 24, false);
                A.store.Bool(ptr + 56 + 32 + 192 + 32 + 27, false);
                A.store.Bool(ptr + 56 + 32 + 192 + 32 + 25, false);
              } else {
                A.store.Bool(ptr + 56 + 32 + 192 + 32 + 28, true);
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 32 + 0,
                  x["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]["Active"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 32 + 4,
                  x["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]["Effective"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 32 + 8,
                  x["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 32 + 12,
                  x["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 32 + 16,
                  x["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 32 + 20,
                  x["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 56 + 32 + 192 + 32 + 26,
                  "UserEditable" in x["IPsec"]["ClientCertPattern"]["Subject"]["Locality"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 192 + 32 + 24,
                  x["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 192 + 32 + 27,
                  "DeviceEditable" in x["IPsec"]["ClientCertPattern"]["Subject"]["Locality"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 192 + 32 + 25,
                  x["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["IPsec"]["ClientCertPattern"]["Subject"]["Organization"] === "undefined") {
                A.store.Bool(ptr + 56 + 32 + 192 + 64 + 28, false);
                A.store.Ref(ptr + 56 + 32 + 192 + 64 + 0, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 64 + 4, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 64 + 8, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 64 + 12, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 64 + 16, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 64 + 20, undefined);
                A.store.Bool(ptr + 56 + 32 + 192 + 64 + 26, false);
                A.store.Bool(ptr + 56 + 32 + 192 + 64 + 24, false);
                A.store.Bool(ptr + 56 + 32 + 192 + 64 + 27, false);
                A.store.Bool(ptr + 56 + 32 + 192 + 64 + 25, false);
              } else {
                A.store.Bool(ptr + 56 + 32 + 192 + 64 + 28, true);
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 64 + 0,
                  x["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]["Active"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 64 + 4,
                  x["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]["Effective"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 64 + 8,
                  x["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 64 + 12,
                  x["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 64 + 16,
                  x["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 64 + 20,
                  x["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 56 + 32 + 192 + 64 + 26,
                  "UserEditable" in x["IPsec"]["ClientCertPattern"]["Subject"]["Organization"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 192 + 64 + 24,
                  x["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 192 + 64 + 27,
                  "DeviceEditable" in x["IPsec"]["ClientCertPattern"]["Subject"]["Organization"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 192 + 64 + 25,
                  x["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] === "undefined") {
                A.store.Bool(ptr + 56 + 32 + 192 + 96 + 28, false);
                A.store.Ref(ptr + 56 + 32 + 192 + 96 + 0, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 96 + 4, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 96 + 8, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 96 + 12, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 96 + 16, undefined);
                A.store.Ref(ptr + 56 + 32 + 192 + 96 + 20, undefined);
                A.store.Bool(ptr + 56 + 32 + 192 + 96 + 26, false);
                A.store.Bool(ptr + 56 + 32 + 192 + 96 + 24, false);
                A.store.Bool(ptr + 56 + 32 + 192 + 96 + 27, false);
                A.store.Bool(ptr + 56 + 32 + 192 + 96 + 25, false);
              } else {
                A.store.Bool(ptr + 56 + 32 + 192 + 96 + 28, true);
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 96 + 0,
                  x["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Active"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 96 + 4,
                  x["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Effective"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 96 + 8,
                  x["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 96 + 12,
                  x["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 96 + 16,
                  x["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 56 + 32 + 192 + 96 + 20,
                  x["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 56 + 32 + 192 + 96 + 26,
                  "UserEditable" in x["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 192 + 96 + 24,
                  x["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 192 + 96 + 27,
                  "DeviceEditable" in x["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 32 + 192 + 96 + 25,
                  x["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"] ? true : false
                );
              }
            }
          }

          if (typeof x["IPsec"]["ClientCertPKCS11Id"] === "undefined") {
            A.store.Bool(ptr + 56 + 352 + 28, false);
            A.store.Ref(ptr + 56 + 352 + 0, undefined);
            A.store.Ref(ptr + 56 + 352 + 4, undefined);
            A.store.Ref(ptr + 56 + 352 + 8, undefined);
            A.store.Ref(ptr + 56 + 352 + 12, undefined);
            A.store.Ref(ptr + 56 + 352 + 16, undefined);
            A.store.Ref(ptr + 56 + 352 + 20, undefined);
            A.store.Bool(ptr + 56 + 352 + 26, false);
            A.store.Bool(ptr + 56 + 352 + 24, false);
            A.store.Bool(ptr + 56 + 352 + 27, false);
            A.store.Bool(ptr + 56 + 352 + 25, false);
          } else {
            A.store.Bool(ptr + 56 + 352 + 28, true);
            A.store.Ref(ptr + 56 + 352 + 0, x["IPsec"]["ClientCertPKCS11Id"]["Active"]);
            A.store.Ref(ptr + 56 + 352 + 4, x["IPsec"]["ClientCertPKCS11Id"]["Effective"]);
            A.store.Ref(ptr + 56 + 352 + 8, x["IPsec"]["ClientCertPKCS11Id"]["UserPolicy"]);
            A.store.Ref(ptr + 56 + 352 + 12, x["IPsec"]["ClientCertPKCS11Id"]["DevicePolicy"]);
            A.store.Ref(ptr + 56 + 352 + 16, x["IPsec"]["ClientCertPKCS11Id"]["UserSetting"]);
            A.store.Ref(ptr + 56 + 352 + 20, x["IPsec"]["ClientCertPKCS11Id"]["SharedSetting"]);
            A.store.Bool(ptr + 56 + 352 + 26, "UserEditable" in x["IPsec"]["ClientCertPKCS11Id"] ? true : false);
            A.store.Bool(ptr + 56 + 352 + 24, x["IPsec"]["ClientCertPKCS11Id"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 56 + 352 + 27, "DeviceEditable" in x["IPsec"]["ClientCertPKCS11Id"] ? true : false);
            A.store.Bool(ptr + 56 + 352 + 25, x["IPsec"]["ClientCertPKCS11Id"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["IPsec"]["ClientCertProvisioningProfileId"] === "undefined") {
            A.store.Bool(ptr + 56 + 384 + 28, false);
            A.store.Ref(ptr + 56 + 384 + 0, undefined);
            A.store.Ref(ptr + 56 + 384 + 4, undefined);
            A.store.Ref(ptr + 56 + 384 + 8, undefined);
            A.store.Ref(ptr + 56 + 384 + 12, undefined);
            A.store.Ref(ptr + 56 + 384 + 16, undefined);
            A.store.Ref(ptr + 56 + 384 + 20, undefined);
            A.store.Bool(ptr + 56 + 384 + 26, false);
            A.store.Bool(ptr + 56 + 384 + 24, false);
            A.store.Bool(ptr + 56 + 384 + 27, false);
            A.store.Bool(ptr + 56 + 384 + 25, false);
          } else {
            A.store.Bool(ptr + 56 + 384 + 28, true);
            A.store.Ref(ptr + 56 + 384 + 0, x["IPsec"]["ClientCertProvisioningProfileId"]["Active"]);
            A.store.Ref(ptr + 56 + 384 + 4, x["IPsec"]["ClientCertProvisioningProfileId"]["Effective"]);
            A.store.Ref(ptr + 56 + 384 + 8, x["IPsec"]["ClientCertProvisioningProfileId"]["UserPolicy"]);
            A.store.Ref(ptr + 56 + 384 + 12, x["IPsec"]["ClientCertProvisioningProfileId"]["DevicePolicy"]);
            A.store.Ref(ptr + 56 + 384 + 16, x["IPsec"]["ClientCertProvisioningProfileId"]["UserSetting"]);
            A.store.Ref(ptr + 56 + 384 + 20, x["IPsec"]["ClientCertProvisioningProfileId"]["SharedSetting"]);
            A.store.Bool(
              ptr + 56 + 384 + 26,
              "UserEditable" in x["IPsec"]["ClientCertProvisioningProfileId"] ? true : false
            );
            A.store.Bool(
              ptr + 56 + 384 + 24,
              x["IPsec"]["ClientCertProvisioningProfileId"]["UserEditable"] ? true : false
            );
            A.store.Bool(
              ptr + 56 + 384 + 27,
              "DeviceEditable" in x["IPsec"]["ClientCertProvisioningProfileId"] ? true : false
            );
            A.store.Bool(
              ptr + 56 + 384 + 25,
              x["IPsec"]["ClientCertProvisioningProfileId"]["DeviceEditable"] ? true : false
            );
          }

          if (typeof x["IPsec"]["ClientCertRef"] === "undefined") {
            A.store.Bool(ptr + 56 + 416 + 28, false);
            A.store.Ref(ptr + 56 + 416 + 0, undefined);
            A.store.Ref(ptr + 56 + 416 + 4, undefined);
            A.store.Ref(ptr + 56 + 416 + 8, undefined);
            A.store.Ref(ptr + 56 + 416 + 12, undefined);
            A.store.Ref(ptr + 56 + 416 + 16, undefined);
            A.store.Ref(ptr + 56 + 416 + 20, undefined);
            A.store.Bool(ptr + 56 + 416 + 26, false);
            A.store.Bool(ptr + 56 + 416 + 24, false);
            A.store.Bool(ptr + 56 + 416 + 27, false);
            A.store.Bool(ptr + 56 + 416 + 25, false);
          } else {
            A.store.Bool(ptr + 56 + 416 + 28, true);
            A.store.Ref(ptr + 56 + 416 + 0, x["IPsec"]["ClientCertRef"]["Active"]);
            A.store.Ref(ptr + 56 + 416 + 4, x["IPsec"]["ClientCertRef"]["Effective"]);
            A.store.Ref(ptr + 56 + 416 + 8, x["IPsec"]["ClientCertRef"]["UserPolicy"]);
            A.store.Ref(ptr + 56 + 416 + 12, x["IPsec"]["ClientCertRef"]["DevicePolicy"]);
            A.store.Ref(ptr + 56 + 416 + 16, x["IPsec"]["ClientCertRef"]["UserSetting"]);
            A.store.Ref(ptr + 56 + 416 + 20, x["IPsec"]["ClientCertRef"]["SharedSetting"]);
            A.store.Bool(ptr + 56 + 416 + 26, "UserEditable" in x["IPsec"]["ClientCertRef"] ? true : false);
            A.store.Bool(ptr + 56 + 416 + 24, x["IPsec"]["ClientCertRef"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 56 + 416 + 27, "DeviceEditable" in x["IPsec"]["ClientCertRef"] ? true : false);
            A.store.Bool(ptr + 56 + 416 + 25, x["IPsec"]["ClientCertRef"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["IPsec"]["ClientCertType"] === "undefined") {
            A.store.Bool(ptr + 56 + 448 + 28, false);
            A.store.Ref(ptr + 56 + 448 + 0, undefined);
            A.store.Ref(ptr + 56 + 448 + 4, undefined);
            A.store.Ref(ptr + 56 + 448 + 8, undefined);
            A.store.Ref(ptr + 56 + 448 + 12, undefined);
            A.store.Ref(ptr + 56 + 448 + 16, undefined);
            A.store.Ref(ptr + 56 + 448 + 20, undefined);
            A.store.Bool(ptr + 56 + 448 + 26, false);
            A.store.Bool(ptr + 56 + 448 + 24, false);
            A.store.Bool(ptr + 56 + 448 + 27, false);
            A.store.Bool(ptr + 56 + 448 + 25, false);
          } else {
            A.store.Bool(ptr + 56 + 448 + 28, true);
            A.store.Ref(ptr + 56 + 448 + 0, x["IPsec"]["ClientCertType"]["Active"]);
            A.store.Ref(ptr + 56 + 448 + 4, x["IPsec"]["ClientCertType"]["Effective"]);
            A.store.Ref(ptr + 56 + 448 + 8, x["IPsec"]["ClientCertType"]["UserPolicy"]);
            A.store.Ref(ptr + 56 + 448 + 12, x["IPsec"]["ClientCertType"]["DevicePolicy"]);
            A.store.Ref(ptr + 56 + 448 + 16, x["IPsec"]["ClientCertType"]["UserSetting"]);
            A.store.Ref(ptr + 56 + 448 + 20, x["IPsec"]["ClientCertType"]["SharedSetting"]);
            A.store.Bool(ptr + 56 + 448 + 26, "UserEditable" in x["IPsec"]["ClientCertType"] ? true : false);
            A.store.Bool(ptr + 56 + 448 + 24, x["IPsec"]["ClientCertType"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 56 + 448 + 27, "DeviceEditable" in x["IPsec"]["ClientCertType"] ? true : false);
            A.store.Bool(ptr + 56 + 448 + 25, x["IPsec"]["ClientCertType"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["IPsec"]["EAP"] === "undefined") {
            A.store.Bool(ptr + 56 + 480 + 806, false);

            A.store.Bool(ptr + 56 + 480 + 0 + 28, false);
            A.store.Ref(ptr + 56 + 480 + 0 + 0, undefined);
            A.store.Ref(ptr + 56 + 480 + 0 + 4, undefined);
            A.store.Ref(ptr + 56 + 480 + 0 + 8, undefined);
            A.store.Ref(ptr + 56 + 480 + 0 + 12, undefined);
            A.store.Ref(ptr + 56 + 480 + 0 + 16, undefined);
            A.store.Ref(ptr + 56 + 480 + 0 + 20, undefined);
            A.store.Bool(ptr + 56 + 480 + 0 + 26, false);
            A.store.Bool(ptr + 56 + 480 + 0 + 24, false);
            A.store.Bool(ptr + 56 + 480 + 0 + 27, false);
            A.store.Bool(ptr + 56 + 480 + 0 + 25, false);

            A.store.Bool(ptr + 56 + 480 + 32 + 318, false);

            A.store.Bool(ptr + 56 + 480 + 32 + 0 + 28, false);
            A.store.Ref(ptr + 56 + 480 + 32 + 0 + 0, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 0 + 4, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 0 + 8, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 0 + 12, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 0 + 16, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 0 + 20, undefined);
            A.store.Bool(ptr + 56 + 480 + 32 + 0 + 26, false);
            A.store.Bool(ptr + 56 + 480 + 32 + 0 + 24, false);
            A.store.Bool(ptr + 56 + 480 + 32 + 0 + 27, false);
            A.store.Bool(ptr + 56 + 480 + 32 + 0 + 25, false);

            A.store.Bool(ptr + 56 + 480 + 32 + 32 + 125, false);

            A.store.Bool(ptr + 56 + 480 + 32 + 32 + 0 + 28, false);
            A.store.Ref(ptr + 56 + 480 + 32 + 32 + 0 + 0, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 32 + 0 + 4, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 32 + 0 + 8, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 32 + 0 + 12, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 32 + 0 + 16, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 32 + 0 + 20, undefined);
            A.store.Bool(ptr + 56 + 480 + 32 + 32 + 0 + 26, false);
            A.store.Bool(ptr + 56 + 480 + 32 + 32 + 0 + 24, false);
            A.store.Bool(ptr + 56 + 480 + 32 + 32 + 0 + 27, false);
            A.store.Bool(ptr + 56 + 480 + 32 + 32 + 0 + 25, false);

            A.store.Bool(ptr + 56 + 480 + 32 + 32 + 32 + 28, false);
            A.store.Ref(ptr + 56 + 480 + 32 + 32 + 32 + 0, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 32 + 32 + 4, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 32 + 32 + 8, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 32 + 32 + 12, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 32 + 32 + 16, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 32 + 32 + 20, undefined);
            A.store.Bool(ptr + 56 + 480 + 32 + 32 + 32 + 26, false);
            A.store.Bool(ptr + 56 + 480 + 32 + 32 + 32 + 24, false);
            A.store.Bool(ptr + 56 + 480 + 32 + 32 + 32 + 27, false);
            A.store.Bool(ptr + 56 + 480 + 32 + 32 + 32 + 25, false);

            A.store.Bool(ptr + 56 + 480 + 32 + 32 + 64 + 28, false);
            A.store.Ref(ptr + 56 + 480 + 32 + 32 + 64 + 0, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 32 + 64 + 4, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 32 + 64 + 8, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 32 + 64 + 12, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 32 + 64 + 16, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 32 + 64 + 20, undefined);
            A.store.Bool(ptr + 56 + 480 + 32 + 32 + 64 + 26, false);
            A.store.Bool(ptr + 56 + 480 + 32 + 32 + 64 + 24, false);
            A.store.Bool(ptr + 56 + 480 + 32 + 32 + 64 + 27, false);
            A.store.Bool(ptr + 56 + 480 + 32 + 32 + 64 + 25, false);

            A.store.Bool(ptr + 56 + 480 + 32 + 32 + 96 + 28, false);
            A.store.Ref(ptr + 56 + 480 + 32 + 32 + 96 + 0, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 32 + 96 + 4, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 32 + 96 + 8, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 32 + 96 + 12, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 32 + 96 + 16, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 32 + 96 + 20, undefined);
            A.store.Bool(ptr + 56 + 480 + 32 + 32 + 96 + 26, false);
            A.store.Bool(ptr + 56 + 480 + 32 + 32 + 96 + 24, false);
            A.store.Bool(ptr + 56 + 480 + 32 + 32 + 96 + 27, false);
            A.store.Bool(ptr + 56 + 480 + 32 + 32 + 96 + 25, false);

            A.store.Bool(ptr + 56 + 480 + 32 + 160 + 28, false);
            A.store.Ref(ptr + 56 + 480 + 32 + 160 + 0, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 160 + 4, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 160 + 8, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 160 + 12, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 160 + 16, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 160 + 20, undefined);
            A.store.Bool(ptr + 56 + 480 + 32 + 160 + 26, false);
            A.store.Bool(ptr + 56 + 480 + 32 + 160 + 24, false);
            A.store.Bool(ptr + 56 + 480 + 32 + 160 + 27, false);
            A.store.Bool(ptr + 56 + 480 + 32 + 160 + 25, false);

            A.store.Bool(ptr + 56 + 480 + 32 + 192 + 125, false);

            A.store.Bool(ptr + 56 + 480 + 32 + 192 + 0 + 28, false);
            A.store.Ref(ptr + 56 + 480 + 32 + 192 + 0 + 0, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 192 + 0 + 4, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 192 + 0 + 8, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 192 + 0 + 12, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 192 + 0 + 16, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 192 + 0 + 20, undefined);
            A.store.Bool(ptr + 56 + 480 + 32 + 192 + 0 + 26, false);
            A.store.Bool(ptr + 56 + 480 + 32 + 192 + 0 + 24, false);
            A.store.Bool(ptr + 56 + 480 + 32 + 192 + 0 + 27, false);
            A.store.Bool(ptr + 56 + 480 + 32 + 192 + 0 + 25, false);

            A.store.Bool(ptr + 56 + 480 + 32 + 192 + 32 + 28, false);
            A.store.Ref(ptr + 56 + 480 + 32 + 192 + 32 + 0, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 192 + 32 + 4, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 192 + 32 + 8, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 192 + 32 + 12, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 192 + 32 + 16, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 192 + 32 + 20, undefined);
            A.store.Bool(ptr + 56 + 480 + 32 + 192 + 32 + 26, false);
            A.store.Bool(ptr + 56 + 480 + 32 + 192 + 32 + 24, false);
            A.store.Bool(ptr + 56 + 480 + 32 + 192 + 32 + 27, false);
            A.store.Bool(ptr + 56 + 480 + 32 + 192 + 32 + 25, false);

            A.store.Bool(ptr + 56 + 480 + 32 + 192 + 64 + 28, false);
            A.store.Ref(ptr + 56 + 480 + 32 + 192 + 64 + 0, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 192 + 64 + 4, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 192 + 64 + 8, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 192 + 64 + 12, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 192 + 64 + 16, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 192 + 64 + 20, undefined);
            A.store.Bool(ptr + 56 + 480 + 32 + 192 + 64 + 26, false);
            A.store.Bool(ptr + 56 + 480 + 32 + 192 + 64 + 24, false);
            A.store.Bool(ptr + 56 + 480 + 32 + 192 + 64 + 27, false);
            A.store.Bool(ptr + 56 + 480 + 32 + 192 + 64 + 25, false);

            A.store.Bool(ptr + 56 + 480 + 32 + 192 + 96 + 28, false);
            A.store.Ref(ptr + 56 + 480 + 32 + 192 + 96 + 0, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 192 + 96 + 4, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 192 + 96 + 8, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 192 + 96 + 12, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 192 + 96 + 16, undefined);
            A.store.Ref(ptr + 56 + 480 + 32 + 192 + 96 + 20, undefined);
            A.store.Bool(ptr + 56 + 480 + 32 + 192 + 96 + 26, false);
            A.store.Bool(ptr + 56 + 480 + 32 + 192 + 96 + 24, false);
            A.store.Bool(ptr + 56 + 480 + 32 + 192 + 96 + 27, false);
            A.store.Bool(ptr + 56 + 480 + 32 + 192 + 96 + 25, false);

            A.store.Bool(ptr + 56 + 480 + 352 + 28, false);
            A.store.Ref(ptr + 56 + 480 + 352 + 0, undefined);
            A.store.Ref(ptr + 56 + 480 + 352 + 4, undefined);
            A.store.Ref(ptr + 56 + 480 + 352 + 8, undefined);
            A.store.Ref(ptr + 56 + 480 + 352 + 12, undefined);
            A.store.Ref(ptr + 56 + 480 + 352 + 16, undefined);
            A.store.Ref(ptr + 56 + 480 + 352 + 20, undefined);
            A.store.Bool(ptr + 56 + 480 + 352 + 26, false);
            A.store.Bool(ptr + 56 + 480 + 352 + 24, false);
            A.store.Bool(ptr + 56 + 480 + 352 + 27, false);
            A.store.Bool(ptr + 56 + 480 + 352 + 25, false);

            A.store.Bool(ptr + 56 + 480 + 384 + 28, false);
            A.store.Ref(ptr + 56 + 480 + 384 + 0, undefined);
            A.store.Ref(ptr + 56 + 480 + 384 + 4, undefined);
            A.store.Ref(ptr + 56 + 480 + 384 + 8, undefined);
            A.store.Ref(ptr + 56 + 480 + 384 + 12, undefined);
            A.store.Ref(ptr + 56 + 480 + 384 + 16, undefined);
            A.store.Ref(ptr + 56 + 480 + 384 + 20, undefined);
            A.store.Bool(ptr + 56 + 480 + 384 + 26, false);
            A.store.Bool(ptr + 56 + 480 + 384 + 24, false);
            A.store.Bool(ptr + 56 + 480 + 384 + 27, false);
            A.store.Bool(ptr + 56 + 480 + 384 + 25, false);

            A.store.Bool(ptr + 56 + 480 + 416 + 28, false);
            A.store.Ref(ptr + 56 + 480 + 416 + 0, undefined);
            A.store.Ref(ptr + 56 + 480 + 416 + 4, undefined);
            A.store.Ref(ptr + 56 + 480 + 416 + 8, undefined);
            A.store.Ref(ptr + 56 + 480 + 416 + 12, undefined);
            A.store.Ref(ptr + 56 + 480 + 416 + 16, undefined);
            A.store.Ref(ptr + 56 + 480 + 416 + 20, undefined);
            A.store.Bool(ptr + 56 + 480 + 416 + 26, false);
            A.store.Bool(ptr + 56 + 480 + 416 + 24, false);
            A.store.Bool(ptr + 56 + 480 + 416 + 27, false);
            A.store.Bool(ptr + 56 + 480 + 416 + 25, false);

            A.store.Bool(ptr + 56 + 480 + 448 + 28, false);
            A.store.Ref(ptr + 56 + 480 + 448 + 0, undefined);
            A.store.Ref(ptr + 56 + 480 + 448 + 4, undefined);
            A.store.Ref(ptr + 56 + 480 + 448 + 8, undefined);
            A.store.Ref(ptr + 56 + 480 + 448 + 12, undefined);
            A.store.Ref(ptr + 56 + 480 + 448 + 16, undefined);
            A.store.Ref(ptr + 56 + 480 + 448 + 20, undefined);
            A.store.Bool(ptr + 56 + 480 + 448 + 26, false);
            A.store.Bool(ptr + 56 + 480 + 448 + 24, false);
            A.store.Bool(ptr + 56 + 480 + 448 + 27, false);
            A.store.Bool(ptr + 56 + 480 + 448 + 25, false);

            A.store.Bool(ptr + 56 + 480 + 480 + 28, false);
            A.store.Ref(ptr + 56 + 480 + 480 + 0, undefined);
            A.store.Ref(ptr + 56 + 480 + 480 + 4, undefined);
            A.store.Ref(ptr + 56 + 480 + 480 + 8, undefined);
            A.store.Ref(ptr + 56 + 480 + 480 + 12, undefined);
            A.store.Ref(ptr + 56 + 480 + 480 + 16, undefined);
            A.store.Ref(ptr + 56 + 480 + 480 + 20, undefined);
            A.store.Bool(ptr + 56 + 480 + 480 + 26, false);
            A.store.Bool(ptr + 56 + 480 + 480 + 24, false);
            A.store.Bool(ptr + 56 + 480 + 480 + 27, false);
            A.store.Bool(ptr + 56 + 480 + 480 + 25, false);

            A.store.Bool(ptr + 56 + 480 + 512 + 28, false);
            A.store.Ref(ptr + 56 + 480 + 512 + 0, undefined);
            A.store.Ref(ptr + 56 + 480 + 512 + 4, undefined);
            A.store.Ref(ptr + 56 + 480 + 512 + 8, undefined);
            A.store.Ref(ptr + 56 + 480 + 512 + 12, undefined);
            A.store.Ref(ptr + 56 + 480 + 512 + 16, undefined);
            A.store.Ref(ptr + 56 + 480 + 512 + 20, undefined);
            A.store.Bool(ptr + 56 + 480 + 512 + 26, false);
            A.store.Bool(ptr + 56 + 480 + 512 + 24, false);
            A.store.Bool(ptr + 56 + 480 + 512 + 27, false);
            A.store.Bool(ptr + 56 + 480 + 512 + 25, false);

            A.store.Bool(ptr + 56 + 480 + 544 + 28, false);
            A.store.Ref(ptr + 56 + 480 + 544 + 0, undefined);
            A.store.Ref(ptr + 56 + 480 + 544 + 4, undefined);
            A.store.Ref(ptr + 56 + 480 + 544 + 8, undefined);
            A.store.Ref(ptr + 56 + 480 + 544 + 12, undefined);
            A.store.Ref(ptr + 56 + 480 + 544 + 16, undefined);
            A.store.Ref(ptr + 56 + 480 + 544 + 20, undefined);
            A.store.Bool(ptr + 56 + 480 + 544 + 26, false);
            A.store.Bool(ptr + 56 + 480 + 544 + 24, false);
            A.store.Bool(ptr + 56 + 480 + 544 + 27, false);
            A.store.Bool(ptr + 56 + 480 + 544 + 25, false);

            A.store.Bool(ptr + 56 + 480 + 576 + 28, false);
            A.store.Ref(ptr + 56 + 480 + 576 + 0, undefined);
            A.store.Ref(ptr + 56 + 480 + 576 + 4, undefined);
            A.store.Ref(ptr + 56 + 480 + 576 + 8, undefined);
            A.store.Ref(ptr + 56 + 480 + 576 + 12, undefined);
            A.store.Ref(ptr + 56 + 480 + 576 + 16, undefined);
            A.store.Ref(ptr + 56 + 480 + 576 + 20, undefined);
            A.store.Bool(ptr + 56 + 480 + 576 + 26, false);
            A.store.Bool(ptr + 56 + 480 + 576 + 24, false);
            A.store.Bool(ptr + 56 + 480 + 576 + 27, false);
            A.store.Bool(ptr + 56 + 480 + 576 + 25, false);

            A.store.Bool(ptr + 56 + 480 + 608 + 21, false);
            A.store.Bool(ptr + 56 + 480 + 608 + 14, false);
            A.store.Bool(ptr + 56 + 480 + 608 + 0, false);
            A.store.Ref(ptr + 56 + 480 + 608 + 4, undefined);
            A.store.Bool(ptr + 56 + 480 + 608 + 15, false);
            A.store.Bool(ptr + 56 + 480 + 608 + 8, false);
            A.store.Bool(ptr + 56 + 480 + 608 + 16, false);
            A.store.Bool(ptr + 56 + 480 + 608 + 9, false);
            A.store.Bool(ptr + 56 + 480 + 608 + 17, false);
            A.store.Bool(ptr + 56 + 480 + 608 + 10, false);
            A.store.Bool(ptr + 56 + 480 + 608 + 18, false);
            A.store.Bool(ptr + 56 + 480 + 608 + 11, false);
            A.store.Bool(ptr + 56 + 480 + 608 + 19, false);
            A.store.Bool(ptr + 56 + 480 + 608 + 12, false);
            A.store.Bool(ptr + 56 + 480 + 608 + 20, false);
            A.store.Bool(ptr + 56 + 480 + 608 + 13, false);

            A.store.Bool(ptr + 56 + 480 + 632 + 28, false);
            A.store.Ref(ptr + 56 + 480 + 632 + 0, undefined);
            A.store.Ref(ptr + 56 + 480 + 632 + 4, undefined);
            A.store.Ref(ptr + 56 + 480 + 632 + 8, undefined);
            A.store.Ref(ptr + 56 + 480 + 632 + 12, undefined);
            A.store.Ref(ptr + 56 + 480 + 632 + 16, undefined);
            A.store.Ref(ptr + 56 + 480 + 632 + 20, undefined);
            A.store.Bool(ptr + 56 + 480 + 632 + 26, false);
            A.store.Bool(ptr + 56 + 480 + 632 + 24, false);
            A.store.Bool(ptr + 56 + 480 + 632 + 27, false);
            A.store.Bool(ptr + 56 + 480 + 632 + 25, false);

            A.store.Bool(ptr + 56 + 480 + 664 + 28, false);
            A.store.Ref(ptr + 56 + 480 + 664 + 0, undefined);
            A.store.Ref(ptr + 56 + 480 + 664 + 4, undefined);
            A.store.Ref(ptr + 56 + 480 + 664 + 8, undefined);
            A.store.Ref(ptr + 56 + 480 + 664 + 12, undefined);
            A.store.Ref(ptr + 56 + 480 + 664 + 16, undefined);
            A.store.Ref(ptr + 56 + 480 + 664 + 20, undefined);
            A.store.Bool(ptr + 56 + 480 + 664 + 26, false);
            A.store.Bool(ptr + 56 + 480 + 664 + 24, false);
            A.store.Bool(ptr + 56 + 480 + 664 + 27, false);
            A.store.Bool(ptr + 56 + 480 + 664 + 25, false);

            A.store.Bool(ptr + 56 + 480 + 696 + 28, false);
            A.store.Ref(ptr + 56 + 480 + 696 + 0, undefined);
            A.store.Ref(ptr + 56 + 480 + 696 + 4, undefined);
            A.store.Ref(ptr + 56 + 480 + 696 + 8, undefined);
            A.store.Ref(ptr + 56 + 480 + 696 + 12, undefined);
            A.store.Ref(ptr + 56 + 480 + 696 + 16, undefined);
            A.store.Ref(ptr + 56 + 480 + 696 + 20, undefined);
            A.store.Bool(ptr + 56 + 480 + 696 + 26, false);
            A.store.Bool(ptr + 56 + 480 + 696 + 24, false);
            A.store.Bool(ptr + 56 + 480 + 696 + 27, false);
            A.store.Bool(ptr + 56 + 480 + 696 + 25, false);

            A.store.Bool(ptr + 56 + 480 + 728 + 28, false);
            A.store.Ref(ptr + 56 + 480 + 728 + 0, undefined);
            A.store.Ref(ptr + 56 + 480 + 728 + 4, undefined);
            A.store.Ref(ptr + 56 + 480 + 728 + 8, undefined);
            A.store.Ref(ptr + 56 + 480 + 728 + 12, undefined);
            A.store.Ref(ptr + 56 + 480 + 728 + 16, undefined);
            A.store.Ref(ptr + 56 + 480 + 728 + 20, undefined);
            A.store.Bool(ptr + 56 + 480 + 728 + 26, false);
            A.store.Bool(ptr + 56 + 480 + 728 + 24, false);
            A.store.Bool(ptr + 56 + 480 + 728 + 27, false);
            A.store.Bool(ptr + 56 + 480 + 728 + 25, false);

            A.store.Bool(ptr + 56 + 480 + 760 + 21, false);
            A.store.Bool(ptr + 56 + 480 + 760 + 14, false);
            A.store.Bool(ptr + 56 + 480 + 760 + 0, false);
            A.store.Ref(ptr + 56 + 480 + 760 + 4, undefined);
            A.store.Bool(ptr + 56 + 480 + 760 + 15, false);
            A.store.Bool(ptr + 56 + 480 + 760 + 8, false);
            A.store.Bool(ptr + 56 + 480 + 760 + 16, false);
            A.store.Bool(ptr + 56 + 480 + 760 + 9, false);
            A.store.Bool(ptr + 56 + 480 + 760 + 17, false);
            A.store.Bool(ptr + 56 + 480 + 760 + 10, false);
            A.store.Bool(ptr + 56 + 480 + 760 + 18, false);
            A.store.Bool(ptr + 56 + 480 + 760 + 11, false);
            A.store.Bool(ptr + 56 + 480 + 760 + 19, false);
            A.store.Bool(ptr + 56 + 480 + 760 + 12, false);
            A.store.Bool(ptr + 56 + 480 + 760 + 20, false);
            A.store.Bool(ptr + 56 + 480 + 760 + 13, false);

            A.store.Bool(ptr + 56 + 480 + 784 + 21, false);
            A.store.Bool(ptr + 56 + 480 + 784 + 14, false);
            A.store.Bool(ptr + 56 + 480 + 784 + 0, false);
            A.store.Ref(ptr + 56 + 480 + 784 + 4, undefined);
            A.store.Bool(ptr + 56 + 480 + 784 + 15, false);
            A.store.Bool(ptr + 56 + 480 + 784 + 8, false);
            A.store.Bool(ptr + 56 + 480 + 784 + 16, false);
            A.store.Bool(ptr + 56 + 480 + 784 + 9, false);
            A.store.Bool(ptr + 56 + 480 + 784 + 17, false);
            A.store.Bool(ptr + 56 + 480 + 784 + 10, false);
            A.store.Bool(ptr + 56 + 480 + 784 + 18, false);
            A.store.Bool(ptr + 56 + 480 + 784 + 11, false);
            A.store.Bool(ptr + 56 + 480 + 784 + 19, false);
            A.store.Bool(ptr + 56 + 480 + 784 + 12, false);
            A.store.Bool(ptr + 56 + 480 + 784 + 20, false);
            A.store.Bool(ptr + 56 + 480 + 784 + 13, false);
          } else {
            A.store.Bool(ptr + 56 + 480 + 806, true);

            if (typeof x["IPsec"]["EAP"]["AnonymousIdentity"] === "undefined") {
              A.store.Bool(ptr + 56 + 480 + 0 + 28, false);
              A.store.Ref(ptr + 56 + 480 + 0 + 0, undefined);
              A.store.Ref(ptr + 56 + 480 + 0 + 4, undefined);
              A.store.Ref(ptr + 56 + 480 + 0 + 8, undefined);
              A.store.Ref(ptr + 56 + 480 + 0 + 12, undefined);
              A.store.Ref(ptr + 56 + 480 + 0 + 16, undefined);
              A.store.Ref(ptr + 56 + 480 + 0 + 20, undefined);
              A.store.Bool(ptr + 56 + 480 + 0 + 26, false);
              A.store.Bool(ptr + 56 + 480 + 0 + 24, false);
              A.store.Bool(ptr + 56 + 480 + 0 + 27, false);
              A.store.Bool(ptr + 56 + 480 + 0 + 25, false);
            } else {
              A.store.Bool(ptr + 56 + 480 + 0 + 28, true);
              A.store.Ref(ptr + 56 + 480 + 0 + 0, x["IPsec"]["EAP"]["AnonymousIdentity"]["Active"]);
              A.store.Ref(ptr + 56 + 480 + 0 + 4, x["IPsec"]["EAP"]["AnonymousIdentity"]["Effective"]);
              A.store.Ref(ptr + 56 + 480 + 0 + 8, x["IPsec"]["EAP"]["AnonymousIdentity"]["UserPolicy"]);
              A.store.Ref(ptr + 56 + 480 + 0 + 12, x["IPsec"]["EAP"]["AnonymousIdentity"]["DevicePolicy"]);
              A.store.Ref(ptr + 56 + 480 + 0 + 16, x["IPsec"]["EAP"]["AnonymousIdentity"]["UserSetting"]);
              A.store.Ref(ptr + 56 + 480 + 0 + 20, x["IPsec"]["EAP"]["AnonymousIdentity"]["SharedSetting"]);
              A.store.Bool(
                ptr + 56 + 480 + 0 + 26,
                "UserEditable" in x["IPsec"]["EAP"]["AnonymousIdentity"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 0 + 24,
                x["IPsec"]["EAP"]["AnonymousIdentity"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 0 + 27,
                "DeviceEditable" in x["IPsec"]["EAP"]["AnonymousIdentity"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 0 + 25,
                x["IPsec"]["EAP"]["AnonymousIdentity"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["IPsec"]["EAP"]["ClientCertPattern"] === "undefined") {
              A.store.Bool(ptr + 56 + 480 + 32 + 318, false);

              A.store.Bool(ptr + 56 + 480 + 32 + 0 + 28, false);
              A.store.Ref(ptr + 56 + 480 + 32 + 0 + 0, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 0 + 4, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 0 + 8, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 0 + 12, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 0 + 16, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 0 + 20, undefined);
              A.store.Bool(ptr + 56 + 480 + 32 + 0 + 26, false);
              A.store.Bool(ptr + 56 + 480 + 32 + 0 + 24, false);
              A.store.Bool(ptr + 56 + 480 + 32 + 0 + 27, false);
              A.store.Bool(ptr + 56 + 480 + 32 + 0 + 25, false);

              A.store.Bool(ptr + 56 + 480 + 32 + 32 + 125, false);

              A.store.Bool(ptr + 56 + 480 + 32 + 32 + 0 + 28, false);
              A.store.Ref(ptr + 56 + 480 + 32 + 32 + 0 + 0, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 32 + 0 + 4, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 32 + 0 + 8, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 32 + 0 + 12, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 32 + 0 + 16, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 32 + 0 + 20, undefined);
              A.store.Bool(ptr + 56 + 480 + 32 + 32 + 0 + 26, false);
              A.store.Bool(ptr + 56 + 480 + 32 + 32 + 0 + 24, false);
              A.store.Bool(ptr + 56 + 480 + 32 + 32 + 0 + 27, false);
              A.store.Bool(ptr + 56 + 480 + 32 + 32 + 0 + 25, false);

              A.store.Bool(ptr + 56 + 480 + 32 + 32 + 32 + 28, false);
              A.store.Ref(ptr + 56 + 480 + 32 + 32 + 32 + 0, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 32 + 32 + 4, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 32 + 32 + 8, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 32 + 32 + 12, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 32 + 32 + 16, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 32 + 32 + 20, undefined);
              A.store.Bool(ptr + 56 + 480 + 32 + 32 + 32 + 26, false);
              A.store.Bool(ptr + 56 + 480 + 32 + 32 + 32 + 24, false);
              A.store.Bool(ptr + 56 + 480 + 32 + 32 + 32 + 27, false);
              A.store.Bool(ptr + 56 + 480 + 32 + 32 + 32 + 25, false);

              A.store.Bool(ptr + 56 + 480 + 32 + 32 + 64 + 28, false);
              A.store.Ref(ptr + 56 + 480 + 32 + 32 + 64 + 0, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 32 + 64 + 4, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 32 + 64 + 8, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 32 + 64 + 12, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 32 + 64 + 16, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 32 + 64 + 20, undefined);
              A.store.Bool(ptr + 56 + 480 + 32 + 32 + 64 + 26, false);
              A.store.Bool(ptr + 56 + 480 + 32 + 32 + 64 + 24, false);
              A.store.Bool(ptr + 56 + 480 + 32 + 32 + 64 + 27, false);
              A.store.Bool(ptr + 56 + 480 + 32 + 32 + 64 + 25, false);

              A.store.Bool(ptr + 56 + 480 + 32 + 32 + 96 + 28, false);
              A.store.Ref(ptr + 56 + 480 + 32 + 32 + 96 + 0, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 32 + 96 + 4, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 32 + 96 + 8, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 32 + 96 + 12, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 32 + 96 + 16, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 32 + 96 + 20, undefined);
              A.store.Bool(ptr + 56 + 480 + 32 + 32 + 96 + 26, false);
              A.store.Bool(ptr + 56 + 480 + 32 + 32 + 96 + 24, false);
              A.store.Bool(ptr + 56 + 480 + 32 + 32 + 96 + 27, false);
              A.store.Bool(ptr + 56 + 480 + 32 + 32 + 96 + 25, false);

              A.store.Bool(ptr + 56 + 480 + 32 + 160 + 28, false);
              A.store.Ref(ptr + 56 + 480 + 32 + 160 + 0, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 160 + 4, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 160 + 8, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 160 + 12, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 160 + 16, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 160 + 20, undefined);
              A.store.Bool(ptr + 56 + 480 + 32 + 160 + 26, false);
              A.store.Bool(ptr + 56 + 480 + 32 + 160 + 24, false);
              A.store.Bool(ptr + 56 + 480 + 32 + 160 + 27, false);
              A.store.Bool(ptr + 56 + 480 + 32 + 160 + 25, false);

              A.store.Bool(ptr + 56 + 480 + 32 + 192 + 125, false);

              A.store.Bool(ptr + 56 + 480 + 32 + 192 + 0 + 28, false);
              A.store.Ref(ptr + 56 + 480 + 32 + 192 + 0 + 0, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 192 + 0 + 4, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 192 + 0 + 8, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 192 + 0 + 12, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 192 + 0 + 16, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 192 + 0 + 20, undefined);
              A.store.Bool(ptr + 56 + 480 + 32 + 192 + 0 + 26, false);
              A.store.Bool(ptr + 56 + 480 + 32 + 192 + 0 + 24, false);
              A.store.Bool(ptr + 56 + 480 + 32 + 192 + 0 + 27, false);
              A.store.Bool(ptr + 56 + 480 + 32 + 192 + 0 + 25, false);

              A.store.Bool(ptr + 56 + 480 + 32 + 192 + 32 + 28, false);
              A.store.Ref(ptr + 56 + 480 + 32 + 192 + 32 + 0, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 192 + 32 + 4, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 192 + 32 + 8, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 192 + 32 + 12, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 192 + 32 + 16, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 192 + 32 + 20, undefined);
              A.store.Bool(ptr + 56 + 480 + 32 + 192 + 32 + 26, false);
              A.store.Bool(ptr + 56 + 480 + 32 + 192 + 32 + 24, false);
              A.store.Bool(ptr + 56 + 480 + 32 + 192 + 32 + 27, false);
              A.store.Bool(ptr + 56 + 480 + 32 + 192 + 32 + 25, false);

              A.store.Bool(ptr + 56 + 480 + 32 + 192 + 64 + 28, false);
              A.store.Ref(ptr + 56 + 480 + 32 + 192 + 64 + 0, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 192 + 64 + 4, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 192 + 64 + 8, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 192 + 64 + 12, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 192 + 64 + 16, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 192 + 64 + 20, undefined);
              A.store.Bool(ptr + 56 + 480 + 32 + 192 + 64 + 26, false);
              A.store.Bool(ptr + 56 + 480 + 32 + 192 + 64 + 24, false);
              A.store.Bool(ptr + 56 + 480 + 32 + 192 + 64 + 27, false);
              A.store.Bool(ptr + 56 + 480 + 32 + 192 + 64 + 25, false);

              A.store.Bool(ptr + 56 + 480 + 32 + 192 + 96 + 28, false);
              A.store.Ref(ptr + 56 + 480 + 32 + 192 + 96 + 0, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 192 + 96 + 4, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 192 + 96 + 8, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 192 + 96 + 12, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 192 + 96 + 16, undefined);
              A.store.Ref(ptr + 56 + 480 + 32 + 192 + 96 + 20, undefined);
              A.store.Bool(ptr + 56 + 480 + 32 + 192 + 96 + 26, false);
              A.store.Bool(ptr + 56 + 480 + 32 + 192 + 96 + 24, false);
              A.store.Bool(ptr + 56 + 480 + 32 + 192 + 96 + 27, false);
              A.store.Bool(ptr + 56 + 480 + 32 + 192 + 96 + 25, false);
            } else {
              A.store.Bool(ptr + 56 + 480 + 32 + 318, true);

              if (typeof x["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] === "undefined") {
                A.store.Bool(ptr + 56 + 480 + 32 + 0 + 28, false);
                A.store.Ref(ptr + 56 + 480 + 32 + 0 + 0, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 0 + 4, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 0 + 8, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 0 + 12, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 0 + 16, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 0 + 20, undefined);
                A.store.Bool(ptr + 56 + 480 + 32 + 0 + 26, false);
                A.store.Bool(ptr + 56 + 480 + 32 + 0 + 24, false);
                A.store.Bool(ptr + 56 + 480 + 32 + 0 + 27, false);
                A.store.Bool(ptr + 56 + 480 + 32 + 0 + 25, false);
              } else {
                A.store.Bool(ptr + 56 + 480 + 32 + 0 + 28, true);
                A.store.Ref(
                  ptr + 56 + 480 + 32 + 0 + 0,
                  x["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["Active"]
                );
                A.store.Ref(
                  ptr + 56 + 480 + 32 + 0 + 4,
                  x["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["Effective"]
                );
                A.store.Ref(
                  ptr + 56 + 480 + 32 + 0 + 8,
                  x["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 56 + 480 + 32 + 0 + 12,
                  x["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 56 + 480 + 32 + 0 + 16,
                  x["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 56 + 480 + 32 + 0 + 20,
                  x["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 56 + 480 + 32 + 0 + 26,
                  "UserEditable" in x["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 480 + 32 + 0 + 24,
                  x["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 480 + 32 + 0 + 27,
                  "DeviceEditable" in x["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 480 + 32 + 0 + 25,
                  x["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"] === "undefined") {
                A.store.Bool(ptr + 56 + 480 + 32 + 32 + 125, false);

                A.store.Bool(ptr + 56 + 480 + 32 + 32 + 0 + 28, false);
                A.store.Ref(ptr + 56 + 480 + 32 + 32 + 0 + 0, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 32 + 0 + 4, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 32 + 0 + 8, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 32 + 0 + 12, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 32 + 0 + 16, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 32 + 0 + 20, undefined);
                A.store.Bool(ptr + 56 + 480 + 32 + 32 + 0 + 26, false);
                A.store.Bool(ptr + 56 + 480 + 32 + 32 + 0 + 24, false);
                A.store.Bool(ptr + 56 + 480 + 32 + 32 + 0 + 27, false);
                A.store.Bool(ptr + 56 + 480 + 32 + 32 + 0 + 25, false);

                A.store.Bool(ptr + 56 + 480 + 32 + 32 + 32 + 28, false);
                A.store.Ref(ptr + 56 + 480 + 32 + 32 + 32 + 0, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 32 + 32 + 4, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 32 + 32 + 8, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 32 + 32 + 12, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 32 + 32 + 16, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 32 + 32 + 20, undefined);
                A.store.Bool(ptr + 56 + 480 + 32 + 32 + 32 + 26, false);
                A.store.Bool(ptr + 56 + 480 + 32 + 32 + 32 + 24, false);
                A.store.Bool(ptr + 56 + 480 + 32 + 32 + 32 + 27, false);
                A.store.Bool(ptr + 56 + 480 + 32 + 32 + 32 + 25, false);

                A.store.Bool(ptr + 56 + 480 + 32 + 32 + 64 + 28, false);
                A.store.Ref(ptr + 56 + 480 + 32 + 32 + 64 + 0, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 32 + 64 + 4, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 32 + 64 + 8, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 32 + 64 + 12, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 32 + 64 + 16, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 32 + 64 + 20, undefined);
                A.store.Bool(ptr + 56 + 480 + 32 + 32 + 64 + 26, false);
                A.store.Bool(ptr + 56 + 480 + 32 + 32 + 64 + 24, false);
                A.store.Bool(ptr + 56 + 480 + 32 + 32 + 64 + 27, false);
                A.store.Bool(ptr + 56 + 480 + 32 + 32 + 64 + 25, false);

                A.store.Bool(ptr + 56 + 480 + 32 + 32 + 96 + 28, false);
                A.store.Ref(ptr + 56 + 480 + 32 + 32 + 96 + 0, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 32 + 96 + 4, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 32 + 96 + 8, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 32 + 96 + 12, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 32 + 96 + 16, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 32 + 96 + 20, undefined);
                A.store.Bool(ptr + 56 + 480 + 32 + 32 + 96 + 26, false);
                A.store.Bool(ptr + 56 + 480 + 32 + 32 + 96 + 24, false);
                A.store.Bool(ptr + 56 + 480 + 32 + 32 + 96 + 27, false);
                A.store.Bool(ptr + 56 + 480 + 32 + 32 + 96 + 25, false);
              } else {
                A.store.Bool(ptr + 56 + 480 + 32 + 32 + 125, true);

                if (typeof x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] === "undefined") {
                  A.store.Bool(ptr + 56 + 480 + 32 + 32 + 0 + 28, false);
                  A.store.Ref(ptr + 56 + 480 + 32 + 32 + 0 + 0, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 32 + 0 + 4, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 32 + 0 + 8, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 32 + 0 + 12, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 32 + 0 + 16, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 32 + 0 + 20, undefined);
                  A.store.Bool(ptr + 56 + 480 + 32 + 32 + 0 + 26, false);
                  A.store.Bool(ptr + 56 + 480 + 32 + 32 + 0 + 24, false);
                  A.store.Bool(ptr + 56 + 480 + 32 + 32 + 0 + 27, false);
                  A.store.Bool(ptr + 56 + 480 + 32 + 32 + 0 + 25, false);
                } else {
                  A.store.Bool(ptr + 56 + 480 + 32 + 32 + 0 + 28, true);
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 32 + 0 + 0,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 32 + 0 + 4,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 32 + 0 + 8,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 32 + 0 + 12,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 32 + 0 + 16,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 32 + 0 + 20,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 56 + 480 + 32 + 32 + 0 + 26,
                    "UserEditable" in x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 56 + 480 + 32 + 32 + 0 + 24,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 56 + 480 + 32 + 32 + 0 + 27,
                    "DeviceEditable" in x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 56 + 480 + 32 + 32 + 0 + 25,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"] ? true : false
                  );
                }

                if (typeof x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] === "undefined") {
                  A.store.Bool(ptr + 56 + 480 + 32 + 32 + 32 + 28, false);
                  A.store.Ref(ptr + 56 + 480 + 32 + 32 + 32 + 0, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 32 + 32 + 4, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 32 + 32 + 8, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 32 + 32 + 12, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 32 + 32 + 16, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 32 + 32 + 20, undefined);
                  A.store.Bool(ptr + 56 + 480 + 32 + 32 + 32 + 26, false);
                  A.store.Bool(ptr + 56 + 480 + 32 + 32 + 32 + 24, false);
                  A.store.Bool(ptr + 56 + 480 + 32 + 32 + 32 + 27, false);
                  A.store.Bool(ptr + 56 + 480 + 32 + 32 + 32 + 25, false);
                } else {
                  A.store.Bool(ptr + 56 + 480 + 32 + 32 + 32 + 28, true);
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 32 + 32 + 0,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 32 + 32 + 4,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 32 + 32 + 8,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 32 + 32 + 12,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 32 + 32 + 16,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 32 + 32 + 20,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 56 + 480 + 32 + 32 + 32 + 26,
                    "UserEditable" in x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 56 + 480 + 32 + 32 + 32 + 24,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 56 + 480 + 32 + 32 + 32 + 27,
                    "DeviceEditable" in x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 56 + 480 + 32 + 32 + 32 + 25,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"] ? true : false
                  );
                }

                if (typeof x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] === "undefined") {
                  A.store.Bool(ptr + 56 + 480 + 32 + 32 + 64 + 28, false);
                  A.store.Ref(ptr + 56 + 480 + 32 + 32 + 64 + 0, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 32 + 64 + 4, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 32 + 64 + 8, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 32 + 64 + 12, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 32 + 64 + 16, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 32 + 64 + 20, undefined);
                  A.store.Bool(ptr + 56 + 480 + 32 + 32 + 64 + 26, false);
                  A.store.Bool(ptr + 56 + 480 + 32 + 32 + 64 + 24, false);
                  A.store.Bool(ptr + 56 + 480 + 32 + 32 + 64 + 27, false);
                  A.store.Bool(ptr + 56 + 480 + 32 + 32 + 64 + 25, false);
                } else {
                  A.store.Bool(ptr + 56 + 480 + 32 + 32 + 64 + 28, true);
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 32 + 64 + 0,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 32 + 64 + 4,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 32 + 64 + 8,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 32 + 64 + 12,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 32 + 64 + 16,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 32 + 64 + 20,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 56 + 480 + 32 + 32 + 64 + 26,
                    "UserEditable" in x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 56 + 480 + 32 + 32 + 64 + 24,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 56 + 480 + 32 + 32 + 64 + 27,
                    "DeviceEditable" in x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 56 + 480 + 32 + 32 + 64 + 25,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"] ? true : false
                  );
                }

                if (typeof x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] === "undefined") {
                  A.store.Bool(ptr + 56 + 480 + 32 + 32 + 96 + 28, false);
                  A.store.Ref(ptr + 56 + 480 + 32 + 32 + 96 + 0, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 32 + 96 + 4, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 32 + 96 + 8, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 32 + 96 + 12, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 32 + 96 + 16, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 32 + 96 + 20, undefined);
                  A.store.Bool(ptr + 56 + 480 + 32 + 32 + 96 + 26, false);
                  A.store.Bool(ptr + 56 + 480 + 32 + 32 + 96 + 24, false);
                  A.store.Bool(ptr + 56 + 480 + 32 + 32 + 96 + 27, false);
                  A.store.Bool(ptr + 56 + 480 + 32 + 32 + 96 + 25, false);
                } else {
                  A.store.Bool(ptr + 56 + 480 + 32 + 32 + 96 + 28, true);
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 32 + 96 + 0,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 32 + 96 + 4,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 32 + 96 + 8,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 32 + 96 + 12,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 32 + 96 + 16,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 32 + 96 + 20,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 56 + 480 + 32 + 32 + 96 + 26,
                    "UserEditable" in x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]
                      ? true
                      : false
                  );
                  A.store.Bool(
                    ptr + 56 + 480 + 32 + 32 + 96 + 24,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"]
                      ? true
                      : false
                  );
                  A.store.Bool(
                    ptr + 56 + 480 + 32 + 32 + 96 + 27,
                    "DeviceEditable" in x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]
                      ? true
                      : false
                  );
                  A.store.Bool(
                    ptr + 56 + 480 + 32 + 32 + 96 + 25,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"]
                      ? true
                      : false
                  );
                }
              }

              if (typeof x["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"] === "undefined") {
                A.store.Bool(ptr + 56 + 480 + 32 + 160 + 28, false);
                A.store.Ref(ptr + 56 + 480 + 32 + 160 + 0, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 160 + 4, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 160 + 8, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 160 + 12, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 160 + 16, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 160 + 20, undefined);
                A.store.Bool(ptr + 56 + 480 + 32 + 160 + 26, false);
                A.store.Bool(ptr + 56 + 480 + 32 + 160 + 24, false);
                A.store.Bool(ptr + 56 + 480 + 32 + 160 + 27, false);
                A.store.Bool(ptr + 56 + 480 + 32 + 160 + 25, false);
              } else {
                A.store.Bool(ptr + 56 + 480 + 32 + 160 + 28, true);
                A.store.Ref(
                  ptr + 56 + 480 + 32 + 160 + 0,
                  x["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["Active"]
                );
                A.store.Ref(
                  ptr + 56 + 480 + 32 + 160 + 4,
                  x["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["Effective"]
                );
                A.store.Ref(
                  ptr + 56 + 480 + 32 + 160 + 8,
                  x["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 56 + 480 + 32 + 160 + 12,
                  x["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 56 + 480 + 32 + 160 + 16,
                  x["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 56 + 480 + 32 + 160 + 20,
                  x["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 56 + 480 + 32 + 160 + 26,
                  "UserEditable" in x["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 480 + 32 + 160 + 24,
                  x["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 480 + 32 + 160 + 27,
                  "DeviceEditable" in x["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"] ? true : false
                );
                A.store.Bool(
                  ptr + 56 + 480 + 32 + 160 + 25,
                  x["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"] === "undefined") {
                A.store.Bool(ptr + 56 + 480 + 32 + 192 + 125, false);

                A.store.Bool(ptr + 56 + 480 + 32 + 192 + 0 + 28, false);
                A.store.Ref(ptr + 56 + 480 + 32 + 192 + 0 + 0, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 192 + 0 + 4, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 192 + 0 + 8, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 192 + 0 + 12, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 192 + 0 + 16, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 192 + 0 + 20, undefined);
                A.store.Bool(ptr + 56 + 480 + 32 + 192 + 0 + 26, false);
                A.store.Bool(ptr + 56 + 480 + 32 + 192 + 0 + 24, false);
                A.store.Bool(ptr + 56 + 480 + 32 + 192 + 0 + 27, false);
                A.store.Bool(ptr + 56 + 480 + 32 + 192 + 0 + 25, false);

                A.store.Bool(ptr + 56 + 480 + 32 + 192 + 32 + 28, false);
                A.store.Ref(ptr + 56 + 480 + 32 + 192 + 32 + 0, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 192 + 32 + 4, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 192 + 32 + 8, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 192 + 32 + 12, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 192 + 32 + 16, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 192 + 32 + 20, undefined);
                A.store.Bool(ptr + 56 + 480 + 32 + 192 + 32 + 26, false);
                A.store.Bool(ptr + 56 + 480 + 32 + 192 + 32 + 24, false);
                A.store.Bool(ptr + 56 + 480 + 32 + 192 + 32 + 27, false);
                A.store.Bool(ptr + 56 + 480 + 32 + 192 + 32 + 25, false);

                A.store.Bool(ptr + 56 + 480 + 32 + 192 + 64 + 28, false);
                A.store.Ref(ptr + 56 + 480 + 32 + 192 + 64 + 0, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 192 + 64 + 4, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 192 + 64 + 8, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 192 + 64 + 12, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 192 + 64 + 16, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 192 + 64 + 20, undefined);
                A.store.Bool(ptr + 56 + 480 + 32 + 192 + 64 + 26, false);
                A.store.Bool(ptr + 56 + 480 + 32 + 192 + 64 + 24, false);
                A.store.Bool(ptr + 56 + 480 + 32 + 192 + 64 + 27, false);
                A.store.Bool(ptr + 56 + 480 + 32 + 192 + 64 + 25, false);

                A.store.Bool(ptr + 56 + 480 + 32 + 192 + 96 + 28, false);
                A.store.Ref(ptr + 56 + 480 + 32 + 192 + 96 + 0, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 192 + 96 + 4, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 192 + 96 + 8, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 192 + 96 + 12, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 192 + 96 + 16, undefined);
                A.store.Ref(ptr + 56 + 480 + 32 + 192 + 96 + 20, undefined);
                A.store.Bool(ptr + 56 + 480 + 32 + 192 + 96 + 26, false);
                A.store.Bool(ptr + 56 + 480 + 32 + 192 + 96 + 24, false);
                A.store.Bool(ptr + 56 + 480 + 32 + 192 + 96 + 27, false);
                A.store.Bool(ptr + 56 + 480 + 32 + 192 + 96 + 25, false);
              } else {
                A.store.Bool(ptr + 56 + 480 + 32 + 192 + 125, true);

                if (typeof x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] === "undefined") {
                  A.store.Bool(ptr + 56 + 480 + 32 + 192 + 0 + 28, false);
                  A.store.Ref(ptr + 56 + 480 + 32 + 192 + 0 + 0, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 192 + 0 + 4, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 192 + 0 + 8, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 192 + 0 + 12, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 192 + 0 + 16, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 192 + 0 + 20, undefined);
                  A.store.Bool(ptr + 56 + 480 + 32 + 192 + 0 + 26, false);
                  A.store.Bool(ptr + 56 + 480 + 32 + 192 + 0 + 24, false);
                  A.store.Bool(ptr + 56 + 480 + 32 + 192 + 0 + 27, false);
                  A.store.Bool(ptr + 56 + 480 + 32 + 192 + 0 + 25, false);
                } else {
                  A.store.Bool(ptr + 56 + 480 + 32 + 192 + 0 + 28, true);
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 192 + 0 + 0,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 192 + 0 + 4,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 192 + 0 + 8,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 192 + 0 + 12,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 192 + 0 + 16,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 192 + 0 + 20,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 56 + 480 + 32 + 192 + 0 + 26,
                    "UserEditable" in x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 56 + 480 + 32 + 192 + 0 + 24,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 56 + 480 + 32 + 192 + 0 + 27,
                    "DeviceEditable" in x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 56 + 480 + 32 + 192 + 0 + 25,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"] ? true : false
                  );
                }

                if (typeof x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"] === "undefined") {
                  A.store.Bool(ptr + 56 + 480 + 32 + 192 + 32 + 28, false);
                  A.store.Ref(ptr + 56 + 480 + 32 + 192 + 32 + 0, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 192 + 32 + 4, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 192 + 32 + 8, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 192 + 32 + 12, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 192 + 32 + 16, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 192 + 32 + 20, undefined);
                  A.store.Bool(ptr + 56 + 480 + 32 + 192 + 32 + 26, false);
                  A.store.Bool(ptr + 56 + 480 + 32 + 192 + 32 + 24, false);
                  A.store.Bool(ptr + 56 + 480 + 32 + 192 + 32 + 27, false);
                  A.store.Bool(ptr + 56 + 480 + 32 + 192 + 32 + 25, false);
                } else {
                  A.store.Bool(ptr + 56 + 480 + 32 + 192 + 32 + 28, true);
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 192 + 32 + 0,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 192 + 32 + 4,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 192 + 32 + 8,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 192 + 32 + 12,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 192 + 32 + 16,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 192 + 32 + 20,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 56 + 480 + 32 + 192 + 32 + 26,
                    "UserEditable" in x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 56 + 480 + 32 + 192 + 32 + 24,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 56 + 480 + 32 + 192 + 32 + 27,
                    "DeviceEditable" in x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 56 + 480 + 32 + 192 + 32 + 25,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"] ? true : false
                  );
                }

                if (typeof x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"] === "undefined") {
                  A.store.Bool(ptr + 56 + 480 + 32 + 192 + 64 + 28, false);
                  A.store.Ref(ptr + 56 + 480 + 32 + 192 + 64 + 0, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 192 + 64 + 4, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 192 + 64 + 8, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 192 + 64 + 12, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 192 + 64 + 16, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 192 + 64 + 20, undefined);
                  A.store.Bool(ptr + 56 + 480 + 32 + 192 + 64 + 26, false);
                  A.store.Bool(ptr + 56 + 480 + 32 + 192 + 64 + 24, false);
                  A.store.Bool(ptr + 56 + 480 + 32 + 192 + 64 + 27, false);
                  A.store.Bool(ptr + 56 + 480 + 32 + 192 + 64 + 25, false);
                } else {
                  A.store.Bool(ptr + 56 + 480 + 32 + 192 + 64 + 28, true);
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 192 + 64 + 0,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 192 + 64 + 4,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 192 + 64 + 8,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 192 + 64 + 12,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 192 + 64 + 16,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 192 + 64 + 20,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 56 + 480 + 32 + 192 + 64 + 26,
                    "UserEditable" in x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 56 + 480 + 32 + 192 + 64 + 24,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 56 + 480 + 32 + 192 + 64 + 27,
                    "DeviceEditable" in x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 56 + 480 + 32 + 192 + 64 + 25,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"] ? true : false
                  );
                }

                if (typeof x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] === "undefined") {
                  A.store.Bool(ptr + 56 + 480 + 32 + 192 + 96 + 28, false);
                  A.store.Ref(ptr + 56 + 480 + 32 + 192 + 96 + 0, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 192 + 96 + 4, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 192 + 96 + 8, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 192 + 96 + 12, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 192 + 96 + 16, undefined);
                  A.store.Ref(ptr + 56 + 480 + 32 + 192 + 96 + 20, undefined);
                  A.store.Bool(ptr + 56 + 480 + 32 + 192 + 96 + 26, false);
                  A.store.Bool(ptr + 56 + 480 + 32 + 192 + 96 + 24, false);
                  A.store.Bool(ptr + 56 + 480 + 32 + 192 + 96 + 27, false);
                  A.store.Bool(ptr + 56 + 480 + 32 + 192 + 96 + 25, false);
                } else {
                  A.store.Bool(ptr + 56 + 480 + 32 + 192 + 96 + 28, true);
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 192 + 96 + 0,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 192 + 96 + 4,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 192 + 96 + 8,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 192 + 96 + 12,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 192 + 96 + 16,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 56 + 480 + 32 + 192 + 96 + 20,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 56 + 480 + 32 + 192 + 96 + 26,
                    "UserEditable" in x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]
                      ? true
                      : false
                  );
                  A.store.Bool(
                    ptr + 56 + 480 + 32 + 192 + 96 + 24,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"]
                      ? true
                      : false
                  );
                  A.store.Bool(
                    ptr + 56 + 480 + 32 + 192 + 96 + 27,
                    "DeviceEditable" in x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]
                      ? true
                      : false
                  );
                  A.store.Bool(
                    ptr + 56 + 480 + 32 + 192 + 96 + 25,
                    x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"]
                      ? true
                      : false
                  );
                }
              }
            }

            if (typeof x["IPsec"]["EAP"]["ClientCertPKCS11Id"] === "undefined") {
              A.store.Bool(ptr + 56 + 480 + 352 + 28, false);
              A.store.Ref(ptr + 56 + 480 + 352 + 0, undefined);
              A.store.Ref(ptr + 56 + 480 + 352 + 4, undefined);
              A.store.Ref(ptr + 56 + 480 + 352 + 8, undefined);
              A.store.Ref(ptr + 56 + 480 + 352 + 12, undefined);
              A.store.Ref(ptr + 56 + 480 + 352 + 16, undefined);
              A.store.Ref(ptr + 56 + 480 + 352 + 20, undefined);
              A.store.Bool(ptr + 56 + 480 + 352 + 26, false);
              A.store.Bool(ptr + 56 + 480 + 352 + 24, false);
              A.store.Bool(ptr + 56 + 480 + 352 + 27, false);
              A.store.Bool(ptr + 56 + 480 + 352 + 25, false);
            } else {
              A.store.Bool(ptr + 56 + 480 + 352 + 28, true);
              A.store.Ref(ptr + 56 + 480 + 352 + 0, x["IPsec"]["EAP"]["ClientCertPKCS11Id"]["Active"]);
              A.store.Ref(ptr + 56 + 480 + 352 + 4, x["IPsec"]["EAP"]["ClientCertPKCS11Id"]["Effective"]);
              A.store.Ref(ptr + 56 + 480 + 352 + 8, x["IPsec"]["EAP"]["ClientCertPKCS11Id"]["UserPolicy"]);
              A.store.Ref(ptr + 56 + 480 + 352 + 12, x["IPsec"]["EAP"]["ClientCertPKCS11Id"]["DevicePolicy"]);
              A.store.Ref(ptr + 56 + 480 + 352 + 16, x["IPsec"]["EAP"]["ClientCertPKCS11Id"]["UserSetting"]);
              A.store.Ref(ptr + 56 + 480 + 352 + 20, x["IPsec"]["EAP"]["ClientCertPKCS11Id"]["SharedSetting"]);
              A.store.Bool(
                ptr + 56 + 480 + 352 + 26,
                "UserEditable" in x["IPsec"]["EAP"]["ClientCertPKCS11Id"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 352 + 24,
                x["IPsec"]["EAP"]["ClientCertPKCS11Id"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 352 + 27,
                "DeviceEditable" in x["IPsec"]["EAP"]["ClientCertPKCS11Id"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 352 + 25,
                x["IPsec"]["EAP"]["ClientCertPKCS11Id"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["IPsec"]["EAP"]["ClientCertProvisioningProfileId"] === "undefined") {
              A.store.Bool(ptr + 56 + 480 + 384 + 28, false);
              A.store.Ref(ptr + 56 + 480 + 384 + 0, undefined);
              A.store.Ref(ptr + 56 + 480 + 384 + 4, undefined);
              A.store.Ref(ptr + 56 + 480 + 384 + 8, undefined);
              A.store.Ref(ptr + 56 + 480 + 384 + 12, undefined);
              A.store.Ref(ptr + 56 + 480 + 384 + 16, undefined);
              A.store.Ref(ptr + 56 + 480 + 384 + 20, undefined);
              A.store.Bool(ptr + 56 + 480 + 384 + 26, false);
              A.store.Bool(ptr + 56 + 480 + 384 + 24, false);
              A.store.Bool(ptr + 56 + 480 + 384 + 27, false);
              A.store.Bool(ptr + 56 + 480 + 384 + 25, false);
            } else {
              A.store.Bool(ptr + 56 + 480 + 384 + 28, true);
              A.store.Ref(ptr + 56 + 480 + 384 + 0, x["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]["Active"]);
              A.store.Ref(ptr + 56 + 480 + 384 + 4, x["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]["Effective"]);
              A.store.Ref(ptr + 56 + 480 + 384 + 8, x["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]["UserPolicy"]);
              A.store.Ref(
                ptr + 56 + 480 + 384 + 12,
                x["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]["DevicePolicy"]
              );
              A.store.Ref(
                ptr + 56 + 480 + 384 + 16,
                x["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]["UserSetting"]
              );
              A.store.Ref(
                ptr + 56 + 480 + 384 + 20,
                x["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]["SharedSetting"]
              );
              A.store.Bool(
                ptr + 56 + 480 + 384 + 26,
                "UserEditable" in x["IPsec"]["EAP"]["ClientCertProvisioningProfileId"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 384 + 24,
                x["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 384 + 27,
                "DeviceEditable" in x["IPsec"]["EAP"]["ClientCertProvisioningProfileId"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 384 + 25,
                x["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["IPsec"]["EAP"]["ClientCertRef"] === "undefined") {
              A.store.Bool(ptr + 56 + 480 + 416 + 28, false);
              A.store.Ref(ptr + 56 + 480 + 416 + 0, undefined);
              A.store.Ref(ptr + 56 + 480 + 416 + 4, undefined);
              A.store.Ref(ptr + 56 + 480 + 416 + 8, undefined);
              A.store.Ref(ptr + 56 + 480 + 416 + 12, undefined);
              A.store.Ref(ptr + 56 + 480 + 416 + 16, undefined);
              A.store.Ref(ptr + 56 + 480 + 416 + 20, undefined);
              A.store.Bool(ptr + 56 + 480 + 416 + 26, false);
              A.store.Bool(ptr + 56 + 480 + 416 + 24, false);
              A.store.Bool(ptr + 56 + 480 + 416 + 27, false);
              A.store.Bool(ptr + 56 + 480 + 416 + 25, false);
            } else {
              A.store.Bool(ptr + 56 + 480 + 416 + 28, true);
              A.store.Ref(ptr + 56 + 480 + 416 + 0, x["IPsec"]["EAP"]["ClientCertRef"]["Active"]);
              A.store.Ref(ptr + 56 + 480 + 416 + 4, x["IPsec"]["EAP"]["ClientCertRef"]["Effective"]);
              A.store.Ref(ptr + 56 + 480 + 416 + 8, x["IPsec"]["EAP"]["ClientCertRef"]["UserPolicy"]);
              A.store.Ref(ptr + 56 + 480 + 416 + 12, x["IPsec"]["EAP"]["ClientCertRef"]["DevicePolicy"]);
              A.store.Ref(ptr + 56 + 480 + 416 + 16, x["IPsec"]["EAP"]["ClientCertRef"]["UserSetting"]);
              A.store.Ref(ptr + 56 + 480 + 416 + 20, x["IPsec"]["EAP"]["ClientCertRef"]["SharedSetting"]);
              A.store.Bool(
                ptr + 56 + 480 + 416 + 26,
                "UserEditable" in x["IPsec"]["EAP"]["ClientCertRef"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 416 + 24,
                x["IPsec"]["EAP"]["ClientCertRef"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 416 + 27,
                "DeviceEditable" in x["IPsec"]["EAP"]["ClientCertRef"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 416 + 25,
                x["IPsec"]["EAP"]["ClientCertRef"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["IPsec"]["EAP"]["ClientCertType"] === "undefined") {
              A.store.Bool(ptr + 56 + 480 + 448 + 28, false);
              A.store.Ref(ptr + 56 + 480 + 448 + 0, undefined);
              A.store.Ref(ptr + 56 + 480 + 448 + 4, undefined);
              A.store.Ref(ptr + 56 + 480 + 448 + 8, undefined);
              A.store.Ref(ptr + 56 + 480 + 448 + 12, undefined);
              A.store.Ref(ptr + 56 + 480 + 448 + 16, undefined);
              A.store.Ref(ptr + 56 + 480 + 448 + 20, undefined);
              A.store.Bool(ptr + 56 + 480 + 448 + 26, false);
              A.store.Bool(ptr + 56 + 480 + 448 + 24, false);
              A.store.Bool(ptr + 56 + 480 + 448 + 27, false);
              A.store.Bool(ptr + 56 + 480 + 448 + 25, false);
            } else {
              A.store.Bool(ptr + 56 + 480 + 448 + 28, true);
              A.store.Ref(ptr + 56 + 480 + 448 + 0, x["IPsec"]["EAP"]["ClientCertType"]["Active"]);
              A.store.Ref(ptr + 56 + 480 + 448 + 4, x["IPsec"]["EAP"]["ClientCertType"]["Effective"]);
              A.store.Ref(ptr + 56 + 480 + 448 + 8, x["IPsec"]["EAP"]["ClientCertType"]["UserPolicy"]);
              A.store.Ref(ptr + 56 + 480 + 448 + 12, x["IPsec"]["EAP"]["ClientCertType"]["DevicePolicy"]);
              A.store.Ref(ptr + 56 + 480 + 448 + 16, x["IPsec"]["EAP"]["ClientCertType"]["UserSetting"]);
              A.store.Ref(ptr + 56 + 480 + 448 + 20, x["IPsec"]["EAP"]["ClientCertType"]["SharedSetting"]);
              A.store.Bool(
                ptr + 56 + 480 + 448 + 26,
                "UserEditable" in x["IPsec"]["EAP"]["ClientCertType"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 448 + 24,
                x["IPsec"]["EAP"]["ClientCertType"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 448 + 27,
                "DeviceEditable" in x["IPsec"]["EAP"]["ClientCertType"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 448 + 25,
                x["IPsec"]["EAP"]["ClientCertType"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["IPsec"]["EAP"]["Identity"] === "undefined") {
              A.store.Bool(ptr + 56 + 480 + 480 + 28, false);
              A.store.Ref(ptr + 56 + 480 + 480 + 0, undefined);
              A.store.Ref(ptr + 56 + 480 + 480 + 4, undefined);
              A.store.Ref(ptr + 56 + 480 + 480 + 8, undefined);
              A.store.Ref(ptr + 56 + 480 + 480 + 12, undefined);
              A.store.Ref(ptr + 56 + 480 + 480 + 16, undefined);
              A.store.Ref(ptr + 56 + 480 + 480 + 20, undefined);
              A.store.Bool(ptr + 56 + 480 + 480 + 26, false);
              A.store.Bool(ptr + 56 + 480 + 480 + 24, false);
              A.store.Bool(ptr + 56 + 480 + 480 + 27, false);
              A.store.Bool(ptr + 56 + 480 + 480 + 25, false);
            } else {
              A.store.Bool(ptr + 56 + 480 + 480 + 28, true);
              A.store.Ref(ptr + 56 + 480 + 480 + 0, x["IPsec"]["EAP"]["Identity"]["Active"]);
              A.store.Ref(ptr + 56 + 480 + 480 + 4, x["IPsec"]["EAP"]["Identity"]["Effective"]);
              A.store.Ref(ptr + 56 + 480 + 480 + 8, x["IPsec"]["EAP"]["Identity"]["UserPolicy"]);
              A.store.Ref(ptr + 56 + 480 + 480 + 12, x["IPsec"]["EAP"]["Identity"]["DevicePolicy"]);
              A.store.Ref(ptr + 56 + 480 + 480 + 16, x["IPsec"]["EAP"]["Identity"]["UserSetting"]);
              A.store.Ref(ptr + 56 + 480 + 480 + 20, x["IPsec"]["EAP"]["Identity"]["SharedSetting"]);
              A.store.Bool(ptr + 56 + 480 + 480 + 26, "UserEditable" in x["IPsec"]["EAP"]["Identity"] ? true : false);
              A.store.Bool(ptr + 56 + 480 + 480 + 24, x["IPsec"]["EAP"]["Identity"]["UserEditable"] ? true : false);
              A.store.Bool(ptr + 56 + 480 + 480 + 27, "DeviceEditable" in x["IPsec"]["EAP"]["Identity"] ? true : false);
              A.store.Bool(ptr + 56 + 480 + 480 + 25, x["IPsec"]["EAP"]["Identity"]["DeviceEditable"] ? true : false);
            }

            if (typeof x["IPsec"]["EAP"]["Inner"] === "undefined") {
              A.store.Bool(ptr + 56 + 480 + 512 + 28, false);
              A.store.Ref(ptr + 56 + 480 + 512 + 0, undefined);
              A.store.Ref(ptr + 56 + 480 + 512 + 4, undefined);
              A.store.Ref(ptr + 56 + 480 + 512 + 8, undefined);
              A.store.Ref(ptr + 56 + 480 + 512 + 12, undefined);
              A.store.Ref(ptr + 56 + 480 + 512 + 16, undefined);
              A.store.Ref(ptr + 56 + 480 + 512 + 20, undefined);
              A.store.Bool(ptr + 56 + 480 + 512 + 26, false);
              A.store.Bool(ptr + 56 + 480 + 512 + 24, false);
              A.store.Bool(ptr + 56 + 480 + 512 + 27, false);
              A.store.Bool(ptr + 56 + 480 + 512 + 25, false);
            } else {
              A.store.Bool(ptr + 56 + 480 + 512 + 28, true);
              A.store.Ref(ptr + 56 + 480 + 512 + 0, x["IPsec"]["EAP"]["Inner"]["Active"]);
              A.store.Ref(ptr + 56 + 480 + 512 + 4, x["IPsec"]["EAP"]["Inner"]["Effective"]);
              A.store.Ref(ptr + 56 + 480 + 512 + 8, x["IPsec"]["EAP"]["Inner"]["UserPolicy"]);
              A.store.Ref(ptr + 56 + 480 + 512 + 12, x["IPsec"]["EAP"]["Inner"]["DevicePolicy"]);
              A.store.Ref(ptr + 56 + 480 + 512 + 16, x["IPsec"]["EAP"]["Inner"]["UserSetting"]);
              A.store.Ref(ptr + 56 + 480 + 512 + 20, x["IPsec"]["EAP"]["Inner"]["SharedSetting"]);
              A.store.Bool(ptr + 56 + 480 + 512 + 26, "UserEditable" in x["IPsec"]["EAP"]["Inner"] ? true : false);
              A.store.Bool(ptr + 56 + 480 + 512 + 24, x["IPsec"]["EAP"]["Inner"]["UserEditable"] ? true : false);
              A.store.Bool(ptr + 56 + 480 + 512 + 27, "DeviceEditable" in x["IPsec"]["EAP"]["Inner"] ? true : false);
              A.store.Bool(ptr + 56 + 480 + 512 + 25, x["IPsec"]["EAP"]["Inner"]["DeviceEditable"] ? true : false);
            }

            if (typeof x["IPsec"]["EAP"]["Outer"] === "undefined") {
              A.store.Bool(ptr + 56 + 480 + 544 + 28, false);
              A.store.Ref(ptr + 56 + 480 + 544 + 0, undefined);
              A.store.Ref(ptr + 56 + 480 + 544 + 4, undefined);
              A.store.Ref(ptr + 56 + 480 + 544 + 8, undefined);
              A.store.Ref(ptr + 56 + 480 + 544 + 12, undefined);
              A.store.Ref(ptr + 56 + 480 + 544 + 16, undefined);
              A.store.Ref(ptr + 56 + 480 + 544 + 20, undefined);
              A.store.Bool(ptr + 56 + 480 + 544 + 26, false);
              A.store.Bool(ptr + 56 + 480 + 544 + 24, false);
              A.store.Bool(ptr + 56 + 480 + 544 + 27, false);
              A.store.Bool(ptr + 56 + 480 + 544 + 25, false);
            } else {
              A.store.Bool(ptr + 56 + 480 + 544 + 28, true);
              A.store.Ref(ptr + 56 + 480 + 544 + 0, x["IPsec"]["EAP"]["Outer"]["Active"]);
              A.store.Ref(ptr + 56 + 480 + 544 + 4, x["IPsec"]["EAP"]["Outer"]["Effective"]);
              A.store.Ref(ptr + 56 + 480 + 544 + 8, x["IPsec"]["EAP"]["Outer"]["UserPolicy"]);
              A.store.Ref(ptr + 56 + 480 + 544 + 12, x["IPsec"]["EAP"]["Outer"]["DevicePolicy"]);
              A.store.Ref(ptr + 56 + 480 + 544 + 16, x["IPsec"]["EAP"]["Outer"]["UserSetting"]);
              A.store.Ref(ptr + 56 + 480 + 544 + 20, x["IPsec"]["EAP"]["Outer"]["SharedSetting"]);
              A.store.Bool(ptr + 56 + 480 + 544 + 26, "UserEditable" in x["IPsec"]["EAP"]["Outer"] ? true : false);
              A.store.Bool(ptr + 56 + 480 + 544 + 24, x["IPsec"]["EAP"]["Outer"]["UserEditable"] ? true : false);
              A.store.Bool(ptr + 56 + 480 + 544 + 27, "DeviceEditable" in x["IPsec"]["EAP"]["Outer"] ? true : false);
              A.store.Bool(ptr + 56 + 480 + 544 + 25, x["IPsec"]["EAP"]["Outer"]["DeviceEditable"] ? true : false);
            }

            if (typeof x["IPsec"]["EAP"]["Password"] === "undefined") {
              A.store.Bool(ptr + 56 + 480 + 576 + 28, false);
              A.store.Ref(ptr + 56 + 480 + 576 + 0, undefined);
              A.store.Ref(ptr + 56 + 480 + 576 + 4, undefined);
              A.store.Ref(ptr + 56 + 480 + 576 + 8, undefined);
              A.store.Ref(ptr + 56 + 480 + 576 + 12, undefined);
              A.store.Ref(ptr + 56 + 480 + 576 + 16, undefined);
              A.store.Ref(ptr + 56 + 480 + 576 + 20, undefined);
              A.store.Bool(ptr + 56 + 480 + 576 + 26, false);
              A.store.Bool(ptr + 56 + 480 + 576 + 24, false);
              A.store.Bool(ptr + 56 + 480 + 576 + 27, false);
              A.store.Bool(ptr + 56 + 480 + 576 + 25, false);
            } else {
              A.store.Bool(ptr + 56 + 480 + 576 + 28, true);
              A.store.Ref(ptr + 56 + 480 + 576 + 0, x["IPsec"]["EAP"]["Password"]["Active"]);
              A.store.Ref(ptr + 56 + 480 + 576 + 4, x["IPsec"]["EAP"]["Password"]["Effective"]);
              A.store.Ref(ptr + 56 + 480 + 576 + 8, x["IPsec"]["EAP"]["Password"]["UserPolicy"]);
              A.store.Ref(ptr + 56 + 480 + 576 + 12, x["IPsec"]["EAP"]["Password"]["DevicePolicy"]);
              A.store.Ref(ptr + 56 + 480 + 576 + 16, x["IPsec"]["EAP"]["Password"]["UserSetting"]);
              A.store.Ref(ptr + 56 + 480 + 576 + 20, x["IPsec"]["EAP"]["Password"]["SharedSetting"]);
              A.store.Bool(ptr + 56 + 480 + 576 + 26, "UserEditable" in x["IPsec"]["EAP"]["Password"] ? true : false);
              A.store.Bool(ptr + 56 + 480 + 576 + 24, x["IPsec"]["EAP"]["Password"]["UserEditable"] ? true : false);
              A.store.Bool(ptr + 56 + 480 + 576 + 27, "DeviceEditable" in x["IPsec"]["EAP"]["Password"] ? true : false);
              A.store.Bool(ptr + 56 + 480 + 576 + 25, x["IPsec"]["EAP"]["Password"]["DeviceEditable"] ? true : false);
            }

            if (typeof x["IPsec"]["EAP"]["SaveCredentials"] === "undefined") {
              A.store.Bool(ptr + 56 + 480 + 608 + 21, false);
              A.store.Bool(ptr + 56 + 480 + 608 + 14, false);
              A.store.Bool(ptr + 56 + 480 + 608 + 0, false);
              A.store.Ref(ptr + 56 + 480 + 608 + 4, undefined);
              A.store.Bool(ptr + 56 + 480 + 608 + 15, false);
              A.store.Bool(ptr + 56 + 480 + 608 + 8, false);
              A.store.Bool(ptr + 56 + 480 + 608 + 16, false);
              A.store.Bool(ptr + 56 + 480 + 608 + 9, false);
              A.store.Bool(ptr + 56 + 480 + 608 + 17, false);
              A.store.Bool(ptr + 56 + 480 + 608 + 10, false);
              A.store.Bool(ptr + 56 + 480 + 608 + 18, false);
              A.store.Bool(ptr + 56 + 480 + 608 + 11, false);
              A.store.Bool(ptr + 56 + 480 + 608 + 19, false);
              A.store.Bool(ptr + 56 + 480 + 608 + 12, false);
              A.store.Bool(ptr + 56 + 480 + 608 + 20, false);
              A.store.Bool(ptr + 56 + 480 + 608 + 13, false);
            } else {
              A.store.Bool(ptr + 56 + 480 + 608 + 21, true);
              A.store.Bool(ptr + 56 + 480 + 608 + 14, "Active" in x["IPsec"]["EAP"]["SaveCredentials"] ? true : false);
              A.store.Bool(ptr + 56 + 480 + 608 + 0, x["IPsec"]["EAP"]["SaveCredentials"]["Active"] ? true : false);
              A.store.Ref(ptr + 56 + 480 + 608 + 4, x["IPsec"]["EAP"]["SaveCredentials"]["Effective"]);
              A.store.Bool(
                ptr + 56 + 480 + 608 + 15,
                "UserPolicy" in x["IPsec"]["EAP"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(ptr + 56 + 480 + 608 + 8, x["IPsec"]["EAP"]["SaveCredentials"]["UserPolicy"] ? true : false);
              A.store.Bool(
                ptr + 56 + 480 + 608 + 16,
                "DevicePolicy" in x["IPsec"]["EAP"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 608 + 9,
                x["IPsec"]["EAP"]["SaveCredentials"]["DevicePolicy"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 608 + 17,
                "UserSetting" in x["IPsec"]["EAP"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 608 + 10,
                x["IPsec"]["EAP"]["SaveCredentials"]["UserSetting"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 608 + 18,
                "SharedSetting" in x["IPsec"]["EAP"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 608 + 11,
                x["IPsec"]["EAP"]["SaveCredentials"]["SharedSetting"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 608 + 19,
                "UserEditable" in x["IPsec"]["EAP"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 608 + 12,
                x["IPsec"]["EAP"]["SaveCredentials"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 608 + 20,
                "DeviceEditable" in x["IPsec"]["EAP"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 608 + 13,
                x["IPsec"]["EAP"]["SaveCredentials"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["IPsec"]["EAP"]["ServerCAPEMs"] === "undefined") {
              A.store.Bool(ptr + 56 + 480 + 632 + 28, false);
              A.store.Ref(ptr + 56 + 480 + 632 + 0, undefined);
              A.store.Ref(ptr + 56 + 480 + 632 + 4, undefined);
              A.store.Ref(ptr + 56 + 480 + 632 + 8, undefined);
              A.store.Ref(ptr + 56 + 480 + 632 + 12, undefined);
              A.store.Ref(ptr + 56 + 480 + 632 + 16, undefined);
              A.store.Ref(ptr + 56 + 480 + 632 + 20, undefined);
              A.store.Bool(ptr + 56 + 480 + 632 + 26, false);
              A.store.Bool(ptr + 56 + 480 + 632 + 24, false);
              A.store.Bool(ptr + 56 + 480 + 632 + 27, false);
              A.store.Bool(ptr + 56 + 480 + 632 + 25, false);
            } else {
              A.store.Bool(ptr + 56 + 480 + 632 + 28, true);
              A.store.Ref(ptr + 56 + 480 + 632 + 0, x["IPsec"]["EAP"]["ServerCAPEMs"]["Active"]);
              A.store.Ref(ptr + 56 + 480 + 632 + 4, x["IPsec"]["EAP"]["ServerCAPEMs"]["Effective"]);
              A.store.Ref(ptr + 56 + 480 + 632 + 8, x["IPsec"]["EAP"]["ServerCAPEMs"]["UserPolicy"]);
              A.store.Ref(ptr + 56 + 480 + 632 + 12, x["IPsec"]["EAP"]["ServerCAPEMs"]["DevicePolicy"]);
              A.store.Ref(ptr + 56 + 480 + 632 + 16, x["IPsec"]["EAP"]["ServerCAPEMs"]["UserSetting"]);
              A.store.Ref(ptr + 56 + 480 + 632 + 20, x["IPsec"]["EAP"]["ServerCAPEMs"]["SharedSetting"]);
              A.store.Bool(
                ptr + 56 + 480 + 632 + 26,
                "UserEditable" in x["IPsec"]["EAP"]["ServerCAPEMs"] ? true : false
              );
              A.store.Bool(ptr + 56 + 480 + 632 + 24, x["IPsec"]["EAP"]["ServerCAPEMs"]["UserEditable"] ? true : false);
              A.store.Bool(
                ptr + 56 + 480 + 632 + 27,
                "DeviceEditable" in x["IPsec"]["EAP"]["ServerCAPEMs"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 632 + 25,
                x["IPsec"]["EAP"]["ServerCAPEMs"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["IPsec"]["EAP"]["ServerCARefs"] === "undefined") {
              A.store.Bool(ptr + 56 + 480 + 664 + 28, false);
              A.store.Ref(ptr + 56 + 480 + 664 + 0, undefined);
              A.store.Ref(ptr + 56 + 480 + 664 + 4, undefined);
              A.store.Ref(ptr + 56 + 480 + 664 + 8, undefined);
              A.store.Ref(ptr + 56 + 480 + 664 + 12, undefined);
              A.store.Ref(ptr + 56 + 480 + 664 + 16, undefined);
              A.store.Ref(ptr + 56 + 480 + 664 + 20, undefined);
              A.store.Bool(ptr + 56 + 480 + 664 + 26, false);
              A.store.Bool(ptr + 56 + 480 + 664 + 24, false);
              A.store.Bool(ptr + 56 + 480 + 664 + 27, false);
              A.store.Bool(ptr + 56 + 480 + 664 + 25, false);
            } else {
              A.store.Bool(ptr + 56 + 480 + 664 + 28, true);
              A.store.Ref(ptr + 56 + 480 + 664 + 0, x["IPsec"]["EAP"]["ServerCARefs"]["Active"]);
              A.store.Ref(ptr + 56 + 480 + 664 + 4, x["IPsec"]["EAP"]["ServerCARefs"]["Effective"]);
              A.store.Ref(ptr + 56 + 480 + 664 + 8, x["IPsec"]["EAP"]["ServerCARefs"]["UserPolicy"]);
              A.store.Ref(ptr + 56 + 480 + 664 + 12, x["IPsec"]["EAP"]["ServerCARefs"]["DevicePolicy"]);
              A.store.Ref(ptr + 56 + 480 + 664 + 16, x["IPsec"]["EAP"]["ServerCARefs"]["UserSetting"]);
              A.store.Ref(ptr + 56 + 480 + 664 + 20, x["IPsec"]["EAP"]["ServerCARefs"]["SharedSetting"]);
              A.store.Bool(
                ptr + 56 + 480 + 664 + 26,
                "UserEditable" in x["IPsec"]["EAP"]["ServerCARefs"] ? true : false
              );
              A.store.Bool(ptr + 56 + 480 + 664 + 24, x["IPsec"]["EAP"]["ServerCARefs"]["UserEditable"] ? true : false);
              A.store.Bool(
                ptr + 56 + 480 + 664 + 27,
                "DeviceEditable" in x["IPsec"]["EAP"]["ServerCARefs"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 664 + 25,
                x["IPsec"]["EAP"]["ServerCARefs"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["IPsec"]["EAP"]["SubjectMatch"] === "undefined") {
              A.store.Bool(ptr + 56 + 480 + 696 + 28, false);
              A.store.Ref(ptr + 56 + 480 + 696 + 0, undefined);
              A.store.Ref(ptr + 56 + 480 + 696 + 4, undefined);
              A.store.Ref(ptr + 56 + 480 + 696 + 8, undefined);
              A.store.Ref(ptr + 56 + 480 + 696 + 12, undefined);
              A.store.Ref(ptr + 56 + 480 + 696 + 16, undefined);
              A.store.Ref(ptr + 56 + 480 + 696 + 20, undefined);
              A.store.Bool(ptr + 56 + 480 + 696 + 26, false);
              A.store.Bool(ptr + 56 + 480 + 696 + 24, false);
              A.store.Bool(ptr + 56 + 480 + 696 + 27, false);
              A.store.Bool(ptr + 56 + 480 + 696 + 25, false);
            } else {
              A.store.Bool(ptr + 56 + 480 + 696 + 28, true);
              A.store.Ref(ptr + 56 + 480 + 696 + 0, x["IPsec"]["EAP"]["SubjectMatch"]["Active"]);
              A.store.Ref(ptr + 56 + 480 + 696 + 4, x["IPsec"]["EAP"]["SubjectMatch"]["Effective"]);
              A.store.Ref(ptr + 56 + 480 + 696 + 8, x["IPsec"]["EAP"]["SubjectMatch"]["UserPolicy"]);
              A.store.Ref(ptr + 56 + 480 + 696 + 12, x["IPsec"]["EAP"]["SubjectMatch"]["DevicePolicy"]);
              A.store.Ref(ptr + 56 + 480 + 696 + 16, x["IPsec"]["EAP"]["SubjectMatch"]["UserSetting"]);
              A.store.Ref(ptr + 56 + 480 + 696 + 20, x["IPsec"]["EAP"]["SubjectMatch"]["SharedSetting"]);
              A.store.Bool(
                ptr + 56 + 480 + 696 + 26,
                "UserEditable" in x["IPsec"]["EAP"]["SubjectMatch"] ? true : false
              );
              A.store.Bool(ptr + 56 + 480 + 696 + 24, x["IPsec"]["EAP"]["SubjectMatch"]["UserEditable"] ? true : false);
              A.store.Bool(
                ptr + 56 + 480 + 696 + 27,
                "DeviceEditable" in x["IPsec"]["EAP"]["SubjectMatch"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 696 + 25,
                x["IPsec"]["EAP"]["SubjectMatch"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["IPsec"]["EAP"]["TLSVersionMax"] === "undefined") {
              A.store.Bool(ptr + 56 + 480 + 728 + 28, false);
              A.store.Ref(ptr + 56 + 480 + 728 + 0, undefined);
              A.store.Ref(ptr + 56 + 480 + 728 + 4, undefined);
              A.store.Ref(ptr + 56 + 480 + 728 + 8, undefined);
              A.store.Ref(ptr + 56 + 480 + 728 + 12, undefined);
              A.store.Ref(ptr + 56 + 480 + 728 + 16, undefined);
              A.store.Ref(ptr + 56 + 480 + 728 + 20, undefined);
              A.store.Bool(ptr + 56 + 480 + 728 + 26, false);
              A.store.Bool(ptr + 56 + 480 + 728 + 24, false);
              A.store.Bool(ptr + 56 + 480 + 728 + 27, false);
              A.store.Bool(ptr + 56 + 480 + 728 + 25, false);
            } else {
              A.store.Bool(ptr + 56 + 480 + 728 + 28, true);
              A.store.Ref(ptr + 56 + 480 + 728 + 0, x["IPsec"]["EAP"]["TLSVersionMax"]["Active"]);
              A.store.Ref(ptr + 56 + 480 + 728 + 4, x["IPsec"]["EAP"]["TLSVersionMax"]["Effective"]);
              A.store.Ref(ptr + 56 + 480 + 728 + 8, x["IPsec"]["EAP"]["TLSVersionMax"]["UserPolicy"]);
              A.store.Ref(ptr + 56 + 480 + 728 + 12, x["IPsec"]["EAP"]["TLSVersionMax"]["DevicePolicy"]);
              A.store.Ref(ptr + 56 + 480 + 728 + 16, x["IPsec"]["EAP"]["TLSVersionMax"]["UserSetting"]);
              A.store.Ref(ptr + 56 + 480 + 728 + 20, x["IPsec"]["EAP"]["TLSVersionMax"]["SharedSetting"]);
              A.store.Bool(
                ptr + 56 + 480 + 728 + 26,
                "UserEditable" in x["IPsec"]["EAP"]["TLSVersionMax"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 728 + 24,
                x["IPsec"]["EAP"]["TLSVersionMax"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 728 + 27,
                "DeviceEditable" in x["IPsec"]["EAP"]["TLSVersionMax"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 728 + 25,
                x["IPsec"]["EAP"]["TLSVersionMax"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["IPsec"]["EAP"]["UseProactiveKeyCaching"] === "undefined") {
              A.store.Bool(ptr + 56 + 480 + 760 + 21, false);
              A.store.Bool(ptr + 56 + 480 + 760 + 14, false);
              A.store.Bool(ptr + 56 + 480 + 760 + 0, false);
              A.store.Ref(ptr + 56 + 480 + 760 + 4, undefined);
              A.store.Bool(ptr + 56 + 480 + 760 + 15, false);
              A.store.Bool(ptr + 56 + 480 + 760 + 8, false);
              A.store.Bool(ptr + 56 + 480 + 760 + 16, false);
              A.store.Bool(ptr + 56 + 480 + 760 + 9, false);
              A.store.Bool(ptr + 56 + 480 + 760 + 17, false);
              A.store.Bool(ptr + 56 + 480 + 760 + 10, false);
              A.store.Bool(ptr + 56 + 480 + 760 + 18, false);
              A.store.Bool(ptr + 56 + 480 + 760 + 11, false);
              A.store.Bool(ptr + 56 + 480 + 760 + 19, false);
              A.store.Bool(ptr + 56 + 480 + 760 + 12, false);
              A.store.Bool(ptr + 56 + 480 + 760 + 20, false);
              A.store.Bool(ptr + 56 + 480 + 760 + 13, false);
            } else {
              A.store.Bool(ptr + 56 + 480 + 760 + 21, true);
              A.store.Bool(
                ptr + 56 + 480 + 760 + 14,
                "Active" in x["IPsec"]["EAP"]["UseProactiveKeyCaching"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 760 + 0,
                x["IPsec"]["EAP"]["UseProactiveKeyCaching"]["Active"] ? true : false
              );
              A.store.Ref(ptr + 56 + 480 + 760 + 4, x["IPsec"]["EAP"]["UseProactiveKeyCaching"]["Effective"]);
              A.store.Bool(
                ptr + 56 + 480 + 760 + 15,
                "UserPolicy" in x["IPsec"]["EAP"]["UseProactiveKeyCaching"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 760 + 8,
                x["IPsec"]["EAP"]["UseProactiveKeyCaching"]["UserPolicy"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 760 + 16,
                "DevicePolicy" in x["IPsec"]["EAP"]["UseProactiveKeyCaching"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 760 + 9,
                x["IPsec"]["EAP"]["UseProactiveKeyCaching"]["DevicePolicy"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 760 + 17,
                "UserSetting" in x["IPsec"]["EAP"]["UseProactiveKeyCaching"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 760 + 10,
                x["IPsec"]["EAP"]["UseProactiveKeyCaching"]["UserSetting"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 760 + 18,
                "SharedSetting" in x["IPsec"]["EAP"]["UseProactiveKeyCaching"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 760 + 11,
                x["IPsec"]["EAP"]["UseProactiveKeyCaching"]["SharedSetting"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 760 + 19,
                "UserEditable" in x["IPsec"]["EAP"]["UseProactiveKeyCaching"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 760 + 12,
                x["IPsec"]["EAP"]["UseProactiveKeyCaching"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 760 + 20,
                "DeviceEditable" in x["IPsec"]["EAP"]["UseProactiveKeyCaching"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 760 + 13,
                x["IPsec"]["EAP"]["UseProactiveKeyCaching"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["IPsec"]["EAP"]["UseSystemCAs"] === "undefined") {
              A.store.Bool(ptr + 56 + 480 + 784 + 21, false);
              A.store.Bool(ptr + 56 + 480 + 784 + 14, false);
              A.store.Bool(ptr + 56 + 480 + 784 + 0, false);
              A.store.Ref(ptr + 56 + 480 + 784 + 4, undefined);
              A.store.Bool(ptr + 56 + 480 + 784 + 15, false);
              A.store.Bool(ptr + 56 + 480 + 784 + 8, false);
              A.store.Bool(ptr + 56 + 480 + 784 + 16, false);
              A.store.Bool(ptr + 56 + 480 + 784 + 9, false);
              A.store.Bool(ptr + 56 + 480 + 784 + 17, false);
              A.store.Bool(ptr + 56 + 480 + 784 + 10, false);
              A.store.Bool(ptr + 56 + 480 + 784 + 18, false);
              A.store.Bool(ptr + 56 + 480 + 784 + 11, false);
              A.store.Bool(ptr + 56 + 480 + 784 + 19, false);
              A.store.Bool(ptr + 56 + 480 + 784 + 12, false);
              A.store.Bool(ptr + 56 + 480 + 784 + 20, false);
              A.store.Bool(ptr + 56 + 480 + 784 + 13, false);
            } else {
              A.store.Bool(ptr + 56 + 480 + 784 + 21, true);
              A.store.Bool(ptr + 56 + 480 + 784 + 14, "Active" in x["IPsec"]["EAP"]["UseSystemCAs"] ? true : false);
              A.store.Bool(ptr + 56 + 480 + 784 + 0, x["IPsec"]["EAP"]["UseSystemCAs"]["Active"] ? true : false);
              A.store.Ref(ptr + 56 + 480 + 784 + 4, x["IPsec"]["EAP"]["UseSystemCAs"]["Effective"]);
              A.store.Bool(ptr + 56 + 480 + 784 + 15, "UserPolicy" in x["IPsec"]["EAP"]["UseSystemCAs"] ? true : false);
              A.store.Bool(ptr + 56 + 480 + 784 + 8, x["IPsec"]["EAP"]["UseSystemCAs"]["UserPolicy"] ? true : false);
              A.store.Bool(
                ptr + 56 + 480 + 784 + 16,
                "DevicePolicy" in x["IPsec"]["EAP"]["UseSystemCAs"] ? true : false
              );
              A.store.Bool(ptr + 56 + 480 + 784 + 9, x["IPsec"]["EAP"]["UseSystemCAs"]["DevicePolicy"] ? true : false);
              A.store.Bool(
                ptr + 56 + 480 + 784 + 17,
                "UserSetting" in x["IPsec"]["EAP"]["UseSystemCAs"] ? true : false
              );
              A.store.Bool(ptr + 56 + 480 + 784 + 10, x["IPsec"]["EAP"]["UseSystemCAs"]["UserSetting"] ? true : false);
              A.store.Bool(
                ptr + 56 + 480 + 784 + 18,
                "SharedSetting" in x["IPsec"]["EAP"]["UseSystemCAs"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 784 + 11,
                x["IPsec"]["EAP"]["UseSystemCAs"]["SharedSetting"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 784 + 19,
                "UserEditable" in x["IPsec"]["EAP"]["UseSystemCAs"] ? true : false
              );
              A.store.Bool(ptr + 56 + 480 + 784 + 12, x["IPsec"]["EAP"]["UseSystemCAs"]["UserEditable"] ? true : false);
              A.store.Bool(
                ptr + 56 + 480 + 784 + 20,
                "DeviceEditable" in x["IPsec"]["EAP"]["UseSystemCAs"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 480 + 784 + 13,
                x["IPsec"]["EAP"]["UseSystemCAs"]["DeviceEditable"] ? true : false
              );
            }
          }

          if (typeof x["IPsec"]["Group"] === "undefined") {
            A.store.Bool(ptr + 56 + 1288 + 28, false);
            A.store.Ref(ptr + 56 + 1288 + 0, undefined);
            A.store.Ref(ptr + 56 + 1288 + 4, undefined);
            A.store.Ref(ptr + 56 + 1288 + 8, undefined);
            A.store.Ref(ptr + 56 + 1288 + 12, undefined);
            A.store.Ref(ptr + 56 + 1288 + 16, undefined);
            A.store.Ref(ptr + 56 + 1288 + 20, undefined);
            A.store.Bool(ptr + 56 + 1288 + 26, false);
            A.store.Bool(ptr + 56 + 1288 + 24, false);
            A.store.Bool(ptr + 56 + 1288 + 27, false);
            A.store.Bool(ptr + 56 + 1288 + 25, false);
          } else {
            A.store.Bool(ptr + 56 + 1288 + 28, true);
            A.store.Ref(ptr + 56 + 1288 + 0, x["IPsec"]["Group"]["Active"]);
            A.store.Ref(ptr + 56 + 1288 + 4, x["IPsec"]["Group"]["Effective"]);
            A.store.Ref(ptr + 56 + 1288 + 8, x["IPsec"]["Group"]["UserPolicy"]);
            A.store.Ref(ptr + 56 + 1288 + 12, x["IPsec"]["Group"]["DevicePolicy"]);
            A.store.Ref(ptr + 56 + 1288 + 16, x["IPsec"]["Group"]["UserSetting"]);
            A.store.Ref(ptr + 56 + 1288 + 20, x["IPsec"]["Group"]["SharedSetting"]);
            A.store.Bool(ptr + 56 + 1288 + 26, "UserEditable" in x["IPsec"]["Group"] ? true : false);
            A.store.Bool(ptr + 56 + 1288 + 24, x["IPsec"]["Group"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 56 + 1288 + 27, "DeviceEditable" in x["IPsec"]["Group"] ? true : false);
            A.store.Bool(ptr + 56 + 1288 + 25, x["IPsec"]["Group"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["IPsec"]["IKEVersion"] === "undefined") {
            A.store.Bool(ptr + 56 + 1320 + 33, false);
            A.store.Bool(ptr + 56 + 1320 + 26, false);
            A.store.Int32(ptr + 56 + 1320 + 0, 0);
            A.store.Ref(ptr + 56 + 1320 + 4, undefined);
            A.store.Bool(ptr + 56 + 1320 + 27, false);
            A.store.Int32(ptr + 56 + 1320 + 8, 0);
            A.store.Bool(ptr + 56 + 1320 + 28, false);
            A.store.Int32(ptr + 56 + 1320 + 12, 0);
            A.store.Bool(ptr + 56 + 1320 + 29, false);
            A.store.Int32(ptr + 56 + 1320 + 16, 0);
            A.store.Bool(ptr + 56 + 1320 + 30, false);
            A.store.Int32(ptr + 56 + 1320 + 20, 0);
            A.store.Bool(ptr + 56 + 1320 + 31, false);
            A.store.Bool(ptr + 56 + 1320 + 24, false);
            A.store.Bool(ptr + 56 + 1320 + 32, false);
            A.store.Bool(ptr + 56 + 1320 + 25, false);
          } else {
            A.store.Bool(ptr + 56 + 1320 + 33, true);
            A.store.Bool(ptr + 56 + 1320 + 26, "Active" in x["IPsec"]["IKEVersion"] ? true : false);
            A.store.Int32(
              ptr + 56 + 1320 + 0,
              x["IPsec"]["IKEVersion"]["Active"] === undefined ? 0 : (x["IPsec"]["IKEVersion"]["Active"] as number)
            );
            A.store.Ref(ptr + 56 + 1320 + 4, x["IPsec"]["IKEVersion"]["Effective"]);
            A.store.Bool(ptr + 56 + 1320 + 27, "UserPolicy" in x["IPsec"]["IKEVersion"] ? true : false);
            A.store.Int32(
              ptr + 56 + 1320 + 8,
              x["IPsec"]["IKEVersion"]["UserPolicy"] === undefined
                ? 0
                : (x["IPsec"]["IKEVersion"]["UserPolicy"] as number)
            );
            A.store.Bool(ptr + 56 + 1320 + 28, "DevicePolicy" in x["IPsec"]["IKEVersion"] ? true : false);
            A.store.Int32(
              ptr + 56 + 1320 + 12,
              x["IPsec"]["IKEVersion"]["DevicePolicy"] === undefined
                ? 0
                : (x["IPsec"]["IKEVersion"]["DevicePolicy"] as number)
            );
            A.store.Bool(ptr + 56 + 1320 + 29, "UserSetting" in x["IPsec"]["IKEVersion"] ? true : false);
            A.store.Int32(
              ptr + 56 + 1320 + 16,
              x["IPsec"]["IKEVersion"]["UserSetting"] === undefined
                ? 0
                : (x["IPsec"]["IKEVersion"]["UserSetting"] as number)
            );
            A.store.Bool(ptr + 56 + 1320 + 30, "SharedSetting" in x["IPsec"]["IKEVersion"] ? true : false);
            A.store.Int32(
              ptr + 56 + 1320 + 20,
              x["IPsec"]["IKEVersion"]["SharedSetting"] === undefined
                ? 0
                : (x["IPsec"]["IKEVersion"]["SharedSetting"] as number)
            );
            A.store.Bool(ptr + 56 + 1320 + 31, "UserEditable" in x["IPsec"]["IKEVersion"] ? true : false);
            A.store.Bool(ptr + 56 + 1320 + 24, x["IPsec"]["IKEVersion"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 56 + 1320 + 32, "DeviceEditable" in x["IPsec"]["IKEVersion"] ? true : false);
            A.store.Bool(ptr + 56 + 1320 + 25, x["IPsec"]["IKEVersion"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["IPsec"]["PSK"] === "undefined") {
            A.store.Bool(ptr + 56 + 1356 + 28, false);
            A.store.Ref(ptr + 56 + 1356 + 0, undefined);
            A.store.Ref(ptr + 56 + 1356 + 4, undefined);
            A.store.Ref(ptr + 56 + 1356 + 8, undefined);
            A.store.Ref(ptr + 56 + 1356 + 12, undefined);
            A.store.Ref(ptr + 56 + 1356 + 16, undefined);
            A.store.Ref(ptr + 56 + 1356 + 20, undefined);
            A.store.Bool(ptr + 56 + 1356 + 26, false);
            A.store.Bool(ptr + 56 + 1356 + 24, false);
            A.store.Bool(ptr + 56 + 1356 + 27, false);
            A.store.Bool(ptr + 56 + 1356 + 25, false);
          } else {
            A.store.Bool(ptr + 56 + 1356 + 28, true);
            A.store.Ref(ptr + 56 + 1356 + 0, x["IPsec"]["PSK"]["Active"]);
            A.store.Ref(ptr + 56 + 1356 + 4, x["IPsec"]["PSK"]["Effective"]);
            A.store.Ref(ptr + 56 + 1356 + 8, x["IPsec"]["PSK"]["UserPolicy"]);
            A.store.Ref(ptr + 56 + 1356 + 12, x["IPsec"]["PSK"]["DevicePolicy"]);
            A.store.Ref(ptr + 56 + 1356 + 16, x["IPsec"]["PSK"]["UserSetting"]);
            A.store.Ref(ptr + 56 + 1356 + 20, x["IPsec"]["PSK"]["SharedSetting"]);
            A.store.Bool(ptr + 56 + 1356 + 26, "UserEditable" in x["IPsec"]["PSK"] ? true : false);
            A.store.Bool(ptr + 56 + 1356 + 24, x["IPsec"]["PSK"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 56 + 1356 + 27, "DeviceEditable" in x["IPsec"]["PSK"] ? true : false);
            A.store.Bool(ptr + 56 + 1356 + 25, x["IPsec"]["PSK"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["IPsec"]["SaveCredentials"] === "undefined") {
            A.store.Bool(ptr + 56 + 1388 + 21, false);
            A.store.Bool(ptr + 56 + 1388 + 14, false);
            A.store.Bool(ptr + 56 + 1388 + 0, false);
            A.store.Ref(ptr + 56 + 1388 + 4, undefined);
            A.store.Bool(ptr + 56 + 1388 + 15, false);
            A.store.Bool(ptr + 56 + 1388 + 8, false);
            A.store.Bool(ptr + 56 + 1388 + 16, false);
            A.store.Bool(ptr + 56 + 1388 + 9, false);
            A.store.Bool(ptr + 56 + 1388 + 17, false);
            A.store.Bool(ptr + 56 + 1388 + 10, false);
            A.store.Bool(ptr + 56 + 1388 + 18, false);
            A.store.Bool(ptr + 56 + 1388 + 11, false);
            A.store.Bool(ptr + 56 + 1388 + 19, false);
            A.store.Bool(ptr + 56 + 1388 + 12, false);
            A.store.Bool(ptr + 56 + 1388 + 20, false);
            A.store.Bool(ptr + 56 + 1388 + 13, false);
          } else {
            A.store.Bool(ptr + 56 + 1388 + 21, true);
            A.store.Bool(ptr + 56 + 1388 + 14, "Active" in x["IPsec"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 56 + 1388 + 0, x["IPsec"]["SaveCredentials"]["Active"] ? true : false);
            A.store.Ref(ptr + 56 + 1388 + 4, x["IPsec"]["SaveCredentials"]["Effective"]);
            A.store.Bool(ptr + 56 + 1388 + 15, "UserPolicy" in x["IPsec"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 56 + 1388 + 8, x["IPsec"]["SaveCredentials"]["UserPolicy"] ? true : false);
            A.store.Bool(ptr + 56 + 1388 + 16, "DevicePolicy" in x["IPsec"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 56 + 1388 + 9, x["IPsec"]["SaveCredentials"]["DevicePolicy"] ? true : false);
            A.store.Bool(ptr + 56 + 1388 + 17, "UserSetting" in x["IPsec"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 56 + 1388 + 10, x["IPsec"]["SaveCredentials"]["UserSetting"] ? true : false);
            A.store.Bool(ptr + 56 + 1388 + 18, "SharedSetting" in x["IPsec"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 56 + 1388 + 11, x["IPsec"]["SaveCredentials"]["SharedSetting"] ? true : false);
            A.store.Bool(ptr + 56 + 1388 + 19, "UserEditable" in x["IPsec"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 56 + 1388 + 12, x["IPsec"]["SaveCredentials"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 56 + 1388 + 20, "DeviceEditable" in x["IPsec"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 56 + 1388 + 13, x["IPsec"]["SaveCredentials"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["IPsec"]["ServerCAPEMs"] === "undefined") {
            A.store.Bool(ptr + 56 + 1412 + 28, false);
            A.store.Ref(ptr + 56 + 1412 + 0, undefined);
            A.store.Ref(ptr + 56 + 1412 + 4, undefined);
            A.store.Ref(ptr + 56 + 1412 + 8, undefined);
            A.store.Ref(ptr + 56 + 1412 + 12, undefined);
            A.store.Ref(ptr + 56 + 1412 + 16, undefined);
            A.store.Ref(ptr + 56 + 1412 + 20, undefined);
            A.store.Bool(ptr + 56 + 1412 + 26, false);
            A.store.Bool(ptr + 56 + 1412 + 24, false);
            A.store.Bool(ptr + 56 + 1412 + 27, false);
            A.store.Bool(ptr + 56 + 1412 + 25, false);
          } else {
            A.store.Bool(ptr + 56 + 1412 + 28, true);
            A.store.Ref(ptr + 56 + 1412 + 0, x["IPsec"]["ServerCAPEMs"]["Active"]);
            A.store.Ref(ptr + 56 + 1412 + 4, x["IPsec"]["ServerCAPEMs"]["Effective"]);
            A.store.Ref(ptr + 56 + 1412 + 8, x["IPsec"]["ServerCAPEMs"]["UserPolicy"]);
            A.store.Ref(ptr + 56 + 1412 + 12, x["IPsec"]["ServerCAPEMs"]["DevicePolicy"]);
            A.store.Ref(ptr + 56 + 1412 + 16, x["IPsec"]["ServerCAPEMs"]["UserSetting"]);
            A.store.Ref(ptr + 56 + 1412 + 20, x["IPsec"]["ServerCAPEMs"]["SharedSetting"]);
            A.store.Bool(ptr + 56 + 1412 + 26, "UserEditable" in x["IPsec"]["ServerCAPEMs"] ? true : false);
            A.store.Bool(ptr + 56 + 1412 + 24, x["IPsec"]["ServerCAPEMs"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 56 + 1412 + 27, "DeviceEditable" in x["IPsec"]["ServerCAPEMs"] ? true : false);
            A.store.Bool(ptr + 56 + 1412 + 25, x["IPsec"]["ServerCAPEMs"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["IPsec"]["ServerCARefs"] === "undefined") {
            A.store.Bool(ptr + 56 + 1444 + 28, false);
            A.store.Ref(ptr + 56 + 1444 + 0, undefined);
            A.store.Ref(ptr + 56 + 1444 + 4, undefined);
            A.store.Ref(ptr + 56 + 1444 + 8, undefined);
            A.store.Ref(ptr + 56 + 1444 + 12, undefined);
            A.store.Ref(ptr + 56 + 1444 + 16, undefined);
            A.store.Ref(ptr + 56 + 1444 + 20, undefined);
            A.store.Bool(ptr + 56 + 1444 + 26, false);
            A.store.Bool(ptr + 56 + 1444 + 24, false);
            A.store.Bool(ptr + 56 + 1444 + 27, false);
            A.store.Bool(ptr + 56 + 1444 + 25, false);
          } else {
            A.store.Bool(ptr + 56 + 1444 + 28, true);
            A.store.Ref(ptr + 56 + 1444 + 0, x["IPsec"]["ServerCARefs"]["Active"]);
            A.store.Ref(ptr + 56 + 1444 + 4, x["IPsec"]["ServerCARefs"]["Effective"]);
            A.store.Ref(ptr + 56 + 1444 + 8, x["IPsec"]["ServerCARefs"]["UserPolicy"]);
            A.store.Ref(ptr + 56 + 1444 + 12, x["IPsec"]["ServerCARefs"]["DevicePolicy"]);
            A.store.Ref(ptr + 56 + 1444 + 16, x["IPsec"]["ServerCARefs"]["UserSetting"]);
            A.store.Ref(ptr + 56 + 1444 + 20, x["IPsec"]["ServerCARefs"]["SharedSetting"]);
            A.store.Bool(ptr + 56 + 1444 + 26, "UserEditable" in x["IPsec"]["ServerCARefs"] ? true : false);
            A.store.Bool(ptr + 56 + 1444 + 24, x["IPsec"]["ServerCARefs"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 56 + 1444 + 27, "DeviceEditable" in x["IPsec"]["ServerCARefs"] ? true : false);
            A.store.Bool(ptr + 56 + 1444 + 25, x["IPsec"]["ServerCARefs"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["IPsec"]["XAUTH"] === "undefined") {
            A.store.Bool(ptr + 56 + 1476 + 85, false);

            A.store.Bool(ptr + 56 + 1476 + 0 + 28, false);
            A.store.Ref(ptr + 56 + 1476 + 0 + 0, undefined);
            A.store.Ref(ptr + 56 + 1476 + 0 + 4, undefined);
            A.store.Ref(ptr + 56 + 1476 + 0 + 8, undefined);
            A.store.Ref(ptr + 56 + 1476 + 0 + 12, undefined);
            A.store.Ref(ptr + 56 + 1476 + 0 + 16, undefined);
            A.store.Ref(ptr + 56 + 1476 + 0 + 20, undefined);
            A.store.Bool(ptr + 56 + 1476 + 0 + 26, false);
            A.store.Bool(ptr + 56 + 1476 + 0 + 24, false);
            A.store.Bool(ptr + 56 + 1476 + 0 + 27, false);
            A.store.Bool(ptr + 56 + 1476 + 0 + 25, false);

            A.store.Bool(ptr + 56 + 1476 + 32 + 21, false);
            A.store.Bool(ptr + 56 + 1476 + 32 + 14, false);
            A.store.Bool(ptr + 56 + 1476 + 32 + 0, false);
            A.store.Ref(ptr + 56 + 1476 + 32 + 4, undefined);
            A.store.Bool(ptr + 56 + 1476 + 32 + 15, false);
            A.store.Bool(ptr + 56 + 1476 + 32 + 8, false);
            A.store.Bool(ptr + 56 + 1476 + 32 + 16, false);
            A.store.Bool(ptr + 56 + 1476 + 32 + 9, false);
            A.store.Bool(ptr + 56 + 1476 + 32 + 17, false);
            A.store.Bool(ptr + 56 + 1476 + 32 + 10, false);
            A.store.Bool(ptr + 56 + 1476 + 32 + 18, false);
            A.store.Bool(ptr + 56 + 1476 + 32 + 11, false);
            A.store.Bool(ptr + 56 + 1476 + 32 + 19, false);
            A.store.Bool(ptr + 56 + 1476 + 32 + 12, false);
            A.store.Bool(ptr + 56 + 1476 + 32 + 20, false);
            A.store.Bool(ptr + 56 + 1476 + 32 + 13, false);

            A.store.Bool(ptr + 56 + 1476 + 56 + 28, false);
            A.store.Ref(ptr + 56 + 1476 + 56 + 0, undefined);
            A.store.Ref(ptr + 56 + 1476 + 56 + 4, undefined);
            A.store.Ref(ptr + 56 + 1476 + 56 + 8, undefined);
            A.store.Ref(ptr + 56 + 1476 + 56 + 12, undefined);
            A.store.Ref(ptr + 56 + 1476 + 56 + 16, undefined);
            A.store.Ref(ptr + 56 + 1476 + 56 + 20, undefined);
            A.store.Bool(ptr + 56 + 1476 + 56 + 26, false);
            A.store.Bool(ptr + 56 + 1476 + 56 + 24, false);
            A.store.Bool(ptr + 56 + 1476 + 56 + 27, false);
            A.store.Bool(ptr + 56 + 1476 + 56 + 25, false);
          } else {
            A.store.Bool(ptr + 56 + 1476 + 85, true);

            if (typeof x["IPsec"]["XAUTH"]["Password"] === "undefined") {
              A.store.Bool(ptr + 56 + 1476 + 0 + 28, false);
              A.store.Ref(ptr + 56 + 1476 + 0 + 0, undefined);
              A.store.Ref(ptr + 56 + 1476 + 0 + 4, undefined);
              A.store.Ref(ptr + 56 + 1476 + 0 + 8, undefined);
              A.store.Ref(ptr + 56 + 1476 + 0 + 12, undefined);
              A.store.Ref(ptr + 56 + 1476 + 0 + 16, undefined);
              A.store.Ref(ptr + 56 + 1476 + 0 + 20, undefined);
              A.store.Bool(ptr + 56 + 1476 + 0 + 26, false);
              A.store.Bool(ptr + 56 + 1476 + 0 + 24, false);
              A.store.Bool(ptr + 56 + 1476 + 0 + 27, false);
              A.store.Bool(ptr + 56 + 1476 + 0 + 25, false);
            } else {
              A.store.Bool(ptr + 56 + 1476 + 0 + 28, true);
              A.store.Ref(ptr + 56 + 1476 + 0 + 0, x["IPsec"]["XAUTH"]["Password"]["Active"]);
              A.store.Ref(ptr + 56 + 1476 + 0 + 4, x["IPsec"]["XAUTH"]["Password"]["Effective"]);
              A.store.Ref(ptr + 56 + 1476 + 0 + 8, x["IPsec"]["XAUTH"]["Password"]["UserPolicy"]);
              A.store.Ref(ptr + 56 + 1476 + 0 + 12, x["IPsec"]["XAUTH"]["Password"]["DevicePolicy"]);
              A.store.Ref(ptr + 56 + 1476 + 0 + 16, x["IPsec"]["XAUTH"]["Password"]["UserSetting"]);
              A.store.Ref(ptr + 56 + 1476 + 0 + 20, x["IPsec"]["XAUTH"]["Password"]["SharedSetting"]);
              A.store.Bool(ptr + 56 + 1476 + 0 + 26, "UserEditable" in x["IPsec"]["XAUTH"]["Password"] ? true : false);
              A.store.Bool(ptr + 56 + 1476 + 0 + 24, x["IPsec"]["XAUTH"]["Password"]["UserEditable"] ? true : false);
              A.store.Bool(
                ptr + 56 + 1476 + 0 + 27,
                "DeviceEditable" in x["IPsec"]["XAUTH"]["Password"] ? true : false
              );
              A.store.Bool(ptr + 56 + 1476 + 0 + 25, x["IPsec"]["XAUTH"]["Password"]["DeviceEditable"] ? true : false);
            }

            if (typeof x["IPsec"]["XAUTH"]["SaveCredentials"] === "undefined") {
              A.store.Bool(ptr + 56 + 1476 + 32 + 21, false);
              A.store.Bool(ptr + 56 + 1476 + 32 + 14, false);
              A.store.Bool(ptr + 56 + 1476 + 32 + 0, false);
              A.store.Ref(ptr + 56 + 1476 + 32 + 4, undefined);
              A.store.Bool(ptr + 56 + 1476 + 32 + 15, false);
              A.store.Bool(ptr + 56 + 1476 + 32 + 8, false);
              A.store.Bool(ptr + 56 + 1476 + 32 + 16, false);
              A.store.Bool(ptr + 56 + 1476 + 32 + 9, false);
              A.store.Bool(ptr + 56 + 1476 + 32 + 17, false);
              A.store.Bool(ptr + 56 + 1476 + 32 + 10, false);
              A.store.Bool(ptr + 56 + 1476 + 32 + 18, false);
              A.store.Bool(ptr + 56 + 1476 + 32 + 11, false);
              A.store.Bool(ptr + 56 + 1476 + 32 + 19, false);
              A.store.Bool(ptr + 56 + 1476 + 32 + 12, false);
              A.store.Bool(ptr + 56 + 1476 + 32 + 20, false);
              A.store.Bool(ptr + 56 + 1476 + 32 + 13, false);
            } else {
              A.store.Bool(ptr + 56 + 1476 + 32 + 21, true);
              A.store.Bool(
                ptr + 56 + 1476 + 32 + 14,
                "Active" in x["IPsec"]["XAUTH"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(ptr + 56 + 1476 + 32 + 0, x["IPsec"]["XAUTH"]["SaveCredentials"]["Active"] ? true : false);
              A.store.Ref(ptr + 56 + 1476 + 32 + 4, x["IPsec"]["XAUTH"]["SaveCredentials"]["Effective"]);
              A.store.Bool(
                ptr + 56 + 1476 + 32 + 15,
                "UserPolicy" in x["IPsec"]["XAUTH"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 1476 + 32 + 8,
                x["IPsec"]["XAUTH"]["SaveCredentials"]["UserPolicy"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 1476 + 32 + 16,
                "DevicePolicy" in x["IPsec"]["XAUTH"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 1476 + 32 + 9,
                x["IPsec"]["XAUTH"]["SaveCredentials"]["DevicePolicy"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 1476 + 32 + 17,
                "UserSetting" in x["IPsec"]["XAUTH"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 1476 + 32 + 10,
                x["IPsec"]["XAUTH"]["SaveCredentials"]["UserSetting"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 1476 + 32 + 18,
                "SharedSetting" in x["IPsec"]["XAUTH"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 1476 + 32 + 11,
                x["IPsec"]["XAUTH"]["SaveCredentials"]["SharedSetting"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 1476 + 32 + 19,
                "UserEditable" in x["IPsec"]["XAUTH"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 1476 + 32 + 12,
                x["IPsec"]["XAUTH"]["SaveCredentials"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 1476 + 32 + 20,
                "DeviceEditable" in x["IPsec"]["XAUTH"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 56 + 1476 + 32 + 13,
                x["IPsec"]["XAUTH"]["SaveCredentials"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["IPsec"]["XAUTH"]["Username"] === "undefined") {
              A.store.Bool(ptr + 56 + 1476 + 56 + 28, false);
              A.store.Ref(ptr + 56 + 1476 + 56 + 0, undefined);
              A.store.Ref(ptr + 56 + 1476 + 56 + 4, undefined);
              A.store.Ref(ptr + 56 + 1476 + 56 + 8, undefined);
              A.store.Ref(ptr + 56 + 1476 + 56 + 12, undefined);
              A.store.Ref(ptr + 56 + 1476 + 56 + 16, undefined);
              A.store.Ref(ptr + 56 + 1476 + 56 + 20, undefined);
              A.store.Bool(ptr + 56 + 1476 + 56 + 26, false);
              A.store.Bool(ptr + 56 + 1476 + 56 + 24, false);
              A.store.Bool(ptr + 56 + 1476 + 56 + 27, false);
              A.store.Bool(ptr + 56 + 1476 + 56 + 25, false);
            } else {
              A.store.Bool(ptr + 56 + 1476 + 56 + 28, true);
              A.store.Ref(ptr + 56 + 1476 + 56 + 0, x["IPsec"]["XAUTH"]["Username"]["Active"]);
              A.store.Ref(ptr + 56 + 1476 + 56 + 4, x["IPsec"]["XAUTH"]["Username"]["Effective"]);
              A.store.Ref(ptr + 56 + 1476 + 56 + 8, x["IPsec"]["XAUTH"]["Username"]["UserPolicy"]);
              A.store.Ref(ptr + 56 + 1476 + 56 + 12, x["IPsec"]["XAUTH"]["Username"]["DevicePolicy"]);
              A.store.Ref(ptr + 56 + 1476 + 56 + 16, x["IPsec"]["XAUTH"]["Username"]["UserSetting"]);
              A.store.Ref(ptr + 56 + 1476 + 56 + 20, x["IPsec"]["XAUTH"]["Username"]["SharedSetting"]);
              A.store.Bool(ptr + 56 + 1476 + 56 + 26, "UserEditable" in x["IPsec"]["XAUTH"]["Username"] ? true : false);
              A.store.Bool(ptr + 56 + 1476 + 56 + 24, x["IPsec"]["XAUTH"]["Username"]["UserEditable"] ? true : false);
              A.store.Bool(
                ptr + 56 + 1476 + 56 + 27,
                "DeviceEditable" in x["IPsec"]["XAUTH"]["Username"] ? true : false
              );
              A.store.Bool(ptr + 56 + 1476 + 56 + 25, x["IPsec"]["XAUTH"]["Username"]["DeviceEditable"] ? true : false);
            }
          }
        }

        if (typeof x["L2TP"] === "undefined") {
          A.store.Bool(ptr + 1620 + 109, false);

          A.store.Bool(ptr + 1620 + 0 + 21, false);
          A.store.Bool(ptr + 1620 + 0 + 14, false);
          A.store.Bool(ptr + 1620 + 0 + 0, false);
          A.store.Ref(ptr + 1620 + 0 + 4, undefined);
          A.store.Bool(ptr + 1620 + 0 + 15, false);
          A.store.Bool(ptr + 1620 + 0 + 8, false);
          A.store.Bool(ptr + 1620 + 0 + 16, false);
          A.store.Bool(ptr + 1620 + 0 + 9, false);
          A.store.Bool(ptr + 1620 + 0 + 17, false);
          A.store.Bool(ptr + 1620 + 0 + 10, false);
          A.store.Bool(ptr + 1620 + 0 + 18, false);
          A.store.Bool(ptr + 1620 + 0 + 11, false);
          A.store.Bool(ptr + 1620 + 0 + 19, false);
          A.store.Bool(ptr + 1620 + 0 + 12, false);
          A.store.Bool(ptr + 1620 + 0 + 20, false);
          A.store.Bool(ptr + 1620 + 0 + 13, false);

          A.store.Bool(ptr + 1620 + 24 + 28, false);
          A.store.Ref(ptr + 1620 + 24 + 0, undefined);
          A.store.Ref(ptr + 1620 + 24 + 4, undefined);
          A.store.Ref(ptr + 1620 + 24 + 8, undefined);
          A.store.Ref(ptr + 1620 + 24 + 12, undefined);
          A.store.Ref(ptr + 1620 + 24 + 16, undefined);
          A.store.Ref(ptr + 1620 + 24 + 20, undefined);
          A.store.Bool(ptr + 1620 + 24 + 26, false);
          A.store.Bool(ptr + 1620 + 24 + 24, false);
          A.store.Bool(ptr + 1620 + 24 + 27, false);
          A.store.Bool(ptr + 1620 + 24 + 25, false);

          A.store.Bool(ptr + 1620 + 56 + 21, false);
          A.store.Bool(ptr + 1620 + 56 + 14, false);
          A.store.Bool(ptr + 1620 + 56 + 0, false);
          A.store.Ref(ptr + 1620 + 56 + 4, undefined);
          A.store.Bool(ptr + 1620 + 56 + 15, false);
          A.store.Bool(ptr + 1620 + 56 + 8, false);
          A.store.Bool(ptr + 1620 + 56 + 16, false);
          A.store.Bool(ptr + 1620 + 56 + 9, false);
          A.store.Bool(ptr + 1620 + 56 + 17, false);
          A.store.Bool(ptr + 1620 + 56 + 10, false);
          A.store.Bool(ptr + 1620 + 56 + 18, false);
          A.store.Bool(ptr + 1620 + 56 + 11, false);
          A.store.Bool(ptr + 1620 + 56 + 19, false);
          A.store.Bool(ptr + 1620 + 56 + 12, false);
          A.store.Bool(ptr + 1620 + 56 + 20, false);
          A.store.Bool(ptr + 1620 + 56 + 13, false);

          A.store.Bool(ptr + 1620 + 80 + 28, false);
          A.store.Ref(ptr + 1620 + 80 + 0, undefined);
          A.store.Ref(ptr + 1620 + 80 + 4, undefined);
          A.store.Ref(ptr + 1620 + 80 + 8, undefined);
          A.store.Ref(ptr + 1620 + 80 + 12, undefined);
          A.store.Ref(ptr + 1620 + 80 + 16, undefined);
          A.store.Ref(ptr + 1620 + 80 + 20, undefined);
          A.store.Bool(ptr + 1620 + 80 + 26, false);
          A.store.Bool(ptr + 1620 + 80 + 24, false);
          A.store.Bool(ptr + 1620 + 80 + 27, false);
          A.store.Bool(ptr + 1620 + 80 + 25, false);
        } else {
          A.store.Bool(ptr + 1620 + 109, true);

          if (typeof x["L2TP"]["LcpEchoDisabled"] === "undefined") {
            A.store.Bool(ptr + 1620 + 0 + 21, false);
            A.store.Bool(ptr + 1620 + 0 + 14, false);
            A.store.Bool(ptr + 1620 + 0 + 0, false);
            A.store.Ref(ptr + 1620 + 0 + 4, undefined);
            A.store.Bool(ptr + 1620 + 0 + 15, false);
            A.store.Bool(ptr + 1620 + 0 + 8, false);
            A.store.Bool(ptr + 1620 + 0 + 16, false);
            A.store.Bool(ptr + 1620 + 0 + 9, false);
            A.store.Bool(ptr + 1620 + 0 + 17, false);
            A.store.Bool(ptr + 1620 + 0 + 10, false);
            A.store.Bool(ptr + 1620 + 0 + 18, false);
            A.store.Bool(ptr + 1620 + 0 + 11, false);
            A.store.Bool(ptr + 1620 + 0 + 19, false);
            A.store.Bool(ptr + 1620 + 0 + 12, false);
            A.store.Bool(ptr + 1620 + 0 + 20, false);
            A.store.Bool(ptr + 1620 + 0 + 13, false);
          } else {
            A.store.Bool(ptr + 1620 + 0 + 21, true);
            A.store.Bool(ptr + 1620 + 0 + 14, "Active" in x["L2TP"]["LcpEchoDisabled"] ? true : false);
            A.store.Bool(ptr + 1620 + 0 + 0, x["L2TP"]["LcpEchoDisabled"]["Active"] ? true : false);
            A.store.Ref(ptr + 1620 + 0 + 4, x["L2TP"]["LcpEchoDisabled"]["Effective"]);
            A.store.Bool(ptr + 1620 + 0 + 15, "UserPolicy" in x["L2TP"]["LcpEchoDisabled"] ? true : false);
            A.store.Bool(ptr + 1620 + 0 + 8, x["L2TP"]["LcpEchoDisabled"]["UserPolicy"] ? true : false);
            A.store.Bool(ptr + 1620 + 0 + 16, "DevicePolicy" in x["L2TP"]["LcpEchoDisabled"] ? true : false);
            A.store.Bool(ptr + 1620 + 0 + 9, x["L2TP"]["LcpEchoDisabled"]["DevicePolicy"] ? true : false);
            A.store.Bool(ptr + 1620 + 0 + 17, "UserSetting" in x["L2TP"]["LcpEchoDisabled"] ? true : false);
            A.store.Bool(ptr + 1620 + 0 + 10, x["L2TP"]["LcpEchoDisabled"]["UserSetting"] ? true : false);
            A.store.Bool(ptr + 1620 + 0 + 18, "SharedSetting" in x["L2TP"]["LcpEchoDisabled"] ? true : false);
            A.store.Bool(ptr + 1620 + 0 + 11, x["L2TP"]["LcpEchoDisabled"]["SharedSetting"] ? true : false);
            A.store.Bool(ptr + 1620 + 0 + 19, "UserEditable" in x["L2TP"]["LcpEchoDisabled"] ? true : false);
            A.store.Bool(ptr + 1620 + 0 + 12, x["L2TP"]["LcpEchoDisabled"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1620 + 0 + 20, "DeviceEditable" in x["L2TP"]["LcpEchoDisabled"] ? true : false);
            A.store.Bool(ptr + 1620 + 0 + 13, x["L2TP"]["LcpEchoDisabled"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["L2TP"]["Password"] === "undefined") {
            A.store.Bool(ptr + 1620 + 24 + 28, false);
            A.store.Ref(ptr + 1620 + 24 + 0, undefined);
            A.store.Ref(ptr + 1620 + 24 + 4, undefined);
            A.store.Ref(ptr + 1620 + 24 + 8, undefined);
            A.store.Ref(ptr + 1620 + 24 + 12, undefined);
            A.store.Ref(ptr + 1620 + 24 + 16, undefined);
            A.store.Ref(ptr + 1620 + 24 + 20, undefined);
            A.store.Bool(ptr + 1620 + 24 + 26, false);
            A.store.Bool(ptr + 1620 + 24 + 24, false);
            A.store.Bool(ptr + 1620 + 24 + 27, false);
            A.store.Bool(ptr + 1620 + 24 + 25, false);
          } else {
            A.store.Bool(ptr + 1620 + 24 + 28, true);
            A.store.Ref(ptr + 1620 + 24 + 0, x["L2TP"]["Password"]["Active"]);
            A.store.Ref(ptr + 1620 + 24 + 4, x["L2TP"]["Password"]["Effective"]);
            A.store.Ref(ptr + 1620 + 24 + 8, x["L2TP"]["Password"]["UserPolicy"]);
            A.store.Ref(ptr + 1620 + 24 + 12, x["L2TP"]["Password"]["DevicePolicy"]);
            A.store.Ref(ptr + 1620 + 24 + 16, x["L2TP"]["Password"]["UserSetting"]);
            A.store.Ref(ptr + 1620 + 24 + 20, x["L2TP"]["Password"]["SharedSetting"]);
            A.store.Bool(ptr + 1620 + 24 + 26, "UserEditable" in x["L2TP"]["Password"] ? true : false);
            A.store.Bool(ptr + 1620 + 24 + 24, x["L2TP"]["Password"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1620 + 24 + 27, "DeviceEditable" in x["L2TP"]["Password"] ? true : false);
            A.store.Bool(ptr + 1620 + 24 + 25, x["L2TP"]["Password"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["L2TP"]["SaveCredentials"] === "undefined") {
            A.store.Bool(ptr + 1620 + 56 + 21, false);
            A.store.Bool(ptr + 1620 + 56 + 14, false);
            A.store.Bool(ptr + 1620 + 56 + 0, false);
            A.store.Ref(ptr + 1620 + 56 + 4, undefined);
            A.store.Bool(ptr + 1620 + 56 + 15, false);
            A.store.Bool(ptr + 1620 + 56 + 8, false);
            A.store.Bool(ptr + 1620 + 56 + 16, false);
            A.store.Bool(ptr + 1620 + 56 + 9, false);
            A.store.Bool(ptr + 1620 + 56 + 17, false);
            A.store.Bool(ptr + 1620 + 56 + 10, false);
            A.store.Bool(ptr + 1620 + 56 + 18, false);
            A.store.Bool(ptr + 1620 + 56 + 11, false);
            A.store.Bool(ptr + 1620 + 56 + 19, false);
            A.store.Bool(ptr + 1620 + 56 + 12, false);
            A.store.Bool(ptr + 1620 + 56 + 20, false);
            A.store.Bool(ptr + 1620 + 56 + 13, false);
          } else {
            A.store.Bool(ptr + 1620 + 56 + 21, true);
            A.store.Bool(ptr + 1620 + 56 + 14, "Active" in x["L2TP"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 1620 + 56 + 0, x["L2TP"]["SaveCredentials"]["Active"] ? true : false);
            A.store.Ref(ptr + 1620 + 56 + 4, x["L2TP"]["SaveCredentials"]["Effective"]);
            A.store.Bool(ptr + 1620 + 56 + 15, "UserPolicy" in x["L2TP"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 1620 + 56 + 8, x["L2TP"]["SaveCredentials"]["UserPolicy"] ? true : false);
            A.store.Bool(ptr + 1620 + 56 + 16, "DevicePolicy" in x["L2TP"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 1620 + 56 + 9, x["L2TP"]["SaveCredentials"]["DevicePolicy"] ? true : false);
            A.store.Bool(ptr + 1620 + 56 + 17, "UserSetting" in x["L2TP"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 1620 + 56 + 10, x["L2TP"]["SaveCredentials"]["UserSetting"] ? true : false);
            A.store.Bool(ptr + 1620 + 56 + 18, "SharedSetting" in x["L2TP"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 1620 + 56 + 11, x["L2TP"]["SaveCredentials"]["SharedSetting"] ? true : false);
            A.store.Bool(ptr + 1620 + 56 + 19, "UserEditable" in x["L2TP"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 1620 + 56 + 12, x["L2TP"]["SaveCredentials"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1620 + 56 + 20, "DeviceEditable" in x["L2TP"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 1620 + 56 + 13, x["L2TP"]["SaveCredentials"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["L2TP"]["Username"] === "undefined") {
            A.store.Bool(ptr + 1620 + 80 + 28, false);
            A.store.Ref(ptr + 1620 + 80 + 0, undefined);
            A.store.Ref(ptr + 1620 + 80 + 4, undefined);
            A.store.Ref(ptr + 1620 + 80 + 8, undefined);
            A.store.Ref(ptr + 1620 + 80 + 12, undefined);
            A.store.Ref(ptr + 1620 + 80 + 16, undefined);
            A.store.Ref(ptr + 1620 + 80 + 20, undefined);
            A.store.Bool(ptr + 1620 + 80 + 26, false);
            A.store.Bool(ptr + 1620 + 80 + 24, false);
            A.store.Bool(ptr + 1620 + 80 + 27, false);
            A.store.Bool(ptr + 1620 + 80 + 25, false);
          } else {
            A.store.Bool(ptr + 1620 + 80 + 28, true);
            A.store.Ref(ptr + 1620 + 80 + 0, x["L2TP"]["Username"]["Active"]);
            A.store.Ref(ptr + 1620 + 80 + 4, x["L2TP"]["Username"]["Effective"]);
            A.store.Ref(ptr + 1620 + 80 + 8, x["L2TP"]["Username"]["UserPolicy"]);
            A.store.Ref(ptr + 1620 + 80 + 12, x["L2TP"]["Username"]["DevicePolicy"]);
            A.store.Ref(ptr + 1620 + 80 + 16, x["L2TP"]["Username"]["UserSetting"]);
            A.store.Ref(ptr + 1620 + 80 + 20, x["L2TP"]["Username"]["SharedSetting"]);
            A.store.Bool(ptr + 1620 + 80 + 26, "UserEditable" in x["L2TP"]["Username"] ? true : false);
            A.store.Bool(ptr + 1620 + 80 + 24, x["L2TP"]["Username"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1620 + 80 + 27, "DeviceEditable" in x["L2TP"]["Username"] ? true : false);
            A.store.Bool(ptr + 1620 + 80 + 25, x["L2TP"]["Username"]["DeviceEditable"] ? true : false);
          }
        }

        if (typeof x["OpenVPN"] === "undefined") {
          A.store.Bool(ptr + 1732 + 1542, false);

          A.store.Bool(ptr + 1732 + 0 + 28, false);
          A.store.Ref(ptr + 1732 + 0 + 0, undefined);
          A.store.Ref(ptr + 1732 + 0 + 4, undefined);
          A.store.Ref(ptr + 1732 + 0 + 8, undefined);
          A.store.Ref(ptr + 1732 + 0 + 12, undefined);
          A.store.Ref(ptr + 1732 + 0 + 16, undefined);
          A.store.Ref(ptr + 1732 + 0 + 20, undefined);
          A.store.Bool(ptr + 1732 + 0 + 26, false);
          A.store.Bool(ptr + 1732 + 0 + 24, false);
          A.store.Bool(ptr + 1732 + 0 + 27, false);
          A.store.Bool(ptr + 1732 + 0 + 25, false);

          A.store.Bool(ptr + 1732 + 32 + 28, false);
          A.store.Ref(ptr + 1732 + 32 + 0, undefined);
          A.store.Ref(ptr + 1732 + 32 + 4, undefined);
          A.store.Ref(ptr + 1732 + 32 + 8, undefined);
          A.store.Ref(ptr + 1732 + 32 + 12, undefined);
          A.store.Ref(ptr + 1732 + 32 + 16, undefined);
          A.store.Ref(ptr + 1732 + 32 + 20, undefined);
          A.store.Bool(ptr + 1732 + 32 + 26, false);
          A.store.Bool(ptr + 1732 + 32 + 24, false);
          A.store.Bool(ptr + 1732 + 32 + 27, false);
          A.store.Bool(ptr + 1732 + 32 + 25, false);

          A.store.Bool(ptr + 1732 + 64 + 21, false);
          A.store.Bool(ptr + 1732 + 64 + 14, false);
          A.store.Bool(ptr + 1732 + 64 + 0, false);
          A.store.Ref(ptr + 1732 + 64 + 4, undefined);
          A.store.Bool(ptr + 1732 + 64 + 15, false);
          A.store.Bool(ptr + 1732 + 64 + 8, false);
          A.store.Bool(ptr + 1732 + 64 + 16, false);
          A.store.Bool(ptr + 1732 + 64 + 9, false);
          A.store.Bool(ptr + 1732 + 64 + 17, false);
          A.store.Bool(ptr + 1732 + 64 + 10, false);
          A.store.Bool(ptr + 1732 + 64 + 18, false);
          A.store.Bool(ptr + 1732 + 64 + 11, false);
          A.store.Bool(ptr + 1732 + 64 + 19, false);
          A.store.Bool(ptr + 1732 + 64 + 12, false);
          A.store.Bool(ptr + 1732 + 64 + 20, false);
          A.store.Bool(ptr + 1732 + 64 + 13, false);

          A.store.Bool(ptr + 1732 + 88 + 28, false);
          A.store.Ref(ptr + 1732 + 88 + 0, undefined);
          A.store.Ref(ptr + 1732 + 88 + 4, undefined);
          A.store.Ref(ptr + 1732 + 88 + 8, undefined);
          A.store.Ref(ptr + 1732 + 88 + 12, undefined);
          A.store.Ref(ptr + 1732 + 88 + 16, undefined);
          A.store.Ref(ptr + 1732 + 88 + 20, undefined);
          A.store.Bool(ptr + 1732 + 88 + 26, false);
          A.store.Bool(ptr + 1732 + 88 + 24, false);
          A.store.Bool(ptr + 1732 + 88 + 27, false);
          A.store.Bool(ptr + 1732 + 88 + 25, false);

          A.store.Bool(ptr + 1732 + 120 + 28, false);
          A.store.Ref(ptr + 1732 + 120 + 0, undefined);
          A.store.Ref(ptr + 1732 + 120 + 4, undefined);
          A.store.Ref(ptr + 1732 + 120 + 8, undefined);
          A.store.Ref(ptr + 1732 + 120 + 12, undefined);
          A.store.Ref(ptr + 1732 + 120 + 16, undefined);
          A.store.Ref(ptr + 1732 + 120 + 20, undefined);
          A.store.Bool(ptr + 1732 + 120 + 26, false);
          A.store.Bool(ptr + 1732 + 120 + 24, false);
          A.store.Bool(ptr + 1732 + 120 + 27, false);
          A.store.Bool(ptr + 1732 + 120 + 25, false);

          A.store.Bool(ptr + 1732 + 152 + 318, false);

          A.store.Bool(ptr + 1732 + 152 + 0 + 28, false);
          A.store.Ref(ptr + 1732 + 152 + 0 + 0, undefined);
          A.store.Ref(ptr + 1732 + 152 + 0 + 4, undefined);
          A.store.Ref(ptr + 1732 + 152 + 0 + 8, undefined);
          A.store.Ref(ptr + 1732 + 152 + 0 + 12, undefined);
          A.store.Ref(ptr + 1732 + 152 + 0 + 16, undefined);
          A.store.Ref(ptr + 1732 + 152 + 0 + 20, undefined);
          A.store.Bool(ptr + 1732 + 152 + 0 + 26, false);
          A.store.Bool(ptr + 1732 + 152 + 0 + 24, false);
          A.store.Bool(ptr + 1732 + 152 + 0 + 27, false);
          A.store.Bool(ptr + 1732 + 152 + 0 + 25, false);

          A.store.Bool(ptr + 1732 + 152 + 32 + 125, false);

          A.store.Bool(ptr + 1732 + 152 + 32 + 0 + 28, false);
          A.store.Ref(ptr + 1732 + 152 + 32 + 0 + 0, undefined);
          A.store.Ref(ptr + 1732 + 152 + 32 + 0 + 4, undefined);
          A.store.Ref(ptr + 1732 + 152 + 32 + 0 + 8, undefined);
          A.store.Ref(ptr + 1732 + 152 + 32 + 0 + 12, undefined);
          A.store.Ref(ptr + 1732 + 152 + 32 + 0 + 16, undefined);
          A.store.Ref(ptr + 1732 + 152 + 32 + 0 + 20, undefined);
          A.store.Bool(ptr + 1732 + 152 + 32 + 0 + 26, false);
          A.store.Bool(ptr + 1732 + 152 + 32 + 0 + 24, false);
          A.store.Bool(ptr + 1732 + 152 + 32 + 0 + 27, false);
          A.store.Bool(ptr + 1732 + 152 + 32 + 0 + 25, false);

          A.store.Bool(ptr + 1732 + 152 + 32 + 32 + 28, false);
          A.store.Ref(ptr + 1732 + 152 + 32 + 32 + 0, undefined);
          A.store.Ref(ptr + 1732 + 152 + 32 + 32 + 4, undefined);
          A.store.Ref(ptr + 1732 + 152 + 32 + 32 + 8, undefined);
          A.store.Ref(ptr + 1732 + 152 + 32 + 32 + 12, undefined);
          A.store.Ref(ptr + 1732 + 152 + 32 + 32 + 16, undefined);
          A.store.Ref(ptr + 1732 + 152 + 32 + 32 + 20, undefined);
          A.store.Bool(ptr + 1732 + 152 + 32 + 32 + 26, false);
          A.store.Bool(ptr + 1732 + 152 + 32 + 32 + 24, false);
          A.store.Bool(ptr + 1732 + 152 + 32 + 32 + 27, false);
          A.store.Bool(ptr + 1732 + 152 + 32 + 32 + 25, false);

          A.store.Bool(ptr + 1732 + 152 + 32 + 64 + 28, false);
          A.store.Ref(ptr + 1732 + 152 + 32 + 64 + 0, undefined);
          A.store.Ref(ptr + 1732 + 152 + 32 + 64 + 4, undefined);
          A.store.Ref(ptr + 1732 + 152 + 32 + 64 + 8, undefined);
          A.store.Ref(ptr + 1732 + 152 + 32 + 64 + 12, undefined);
          A.store.Ref(ptr + 1732 + 152 + 32 + 64 + 16, undefined);
          A.store.Ref(ptr + 1732 + 152 + 32 + 64 + 20, undefined);
          A.store.Bool(ptr + 1732 + 152 + 32 + 64 + 26, false);
          A.store.Bool(ptr + 1732 + 152 + 32 + 64 + 24, false);
          A.store.Bool(ptr + 1732 + 152 + 32 + 64 + 27, false);
          A.store.Bool(ptr + 1732 + 152 + 32 + 64 + 25, false);

          A.store.Bool(ptr + 1732 + 152 + 32 + 96 + 28, false);
          A.store.Ref(ptr + 1732 + 152 + 32 + 96 + 0, undefined);
          A.store.Ref(ptr + 1732 + 152 + 32 + 96 + 4, undefined);
          A.store.Ref(ptr + 1732 + 152 + 32 + 96 + 8, undefined);
          A.store.Ref(ptr + 1732 + 152 + 32 + 96 + 12, undefined);
          A.store.Ref(ptr + 1732 + 152 + 32 + 96 + 16, undefined);
          A.store.Ref(ptr + 1732 + 152 + 32 + 96 + 20, undefined);
          A.store.Bool(ptr + 1732 + 152 + 32 + 96 + 26, false);
          A.store.Bool(ptr + 1732 + 152 + 32 + 96 + 24, false);
          A.store.Bool(ptr + 1732 + 152 + 32 + 96 + 27, false);
          A.store.Bool(ptr + 1732 + 152 + 32 + 96 + 25, false);

          A.store.Bool(ptr + 1732 + 152 + 160 + 28, false);
          A.store.Ref(ptr + 1732 + 152 + 160 + 0, undefined);
          A.store.Ref(ptr + 1732 + 152 + 160 + 4, undefined);
          A.store.Ref(ptr + 1732 + 152 + 160 + 8, undefined);
          A.store.Ref(ptr + 1732 + 152 + 160 + 12, undefined);
          A.store.Ref(ptr + 1732 + 152 + 160 + 16, undefined);
          A.store.Ref(ptr + 1732 + 152 + 160 + 20, undefined);
          A.store.Bool(ptr + 1732 + 152 + 160 + 26, false);
          A.store.Bool(ptr + 1732 + 152 + 160 + 24, false);
          A.store.Bool(ptr + 1732 + 152 + 160 + 27, false);
          A.store.Bool(ptr + 1732 + 152 + 160 + 25, false);

          A.store.Bool(ptr + 1732 + 152 + 192 + 125, false);

          A.store.Bool(ptr + 1732 + 152 + 192 + 0 + 28, false);
          A.store.Ref(ptr + 1732 + 152 + 192 + 0 + 0, undefined);
          A.store.Ref(ptr + 1732 + 152 + 192 + 0 + 4, undefined);
          A.store.Ref(ptr + 1732 + 152 + 192 + 0 + 8, undefined);
          A.store.Ref(ptr + 1732 + 152 + 192 + 0 + 12, undefined);
          A.store.Ref(ptr + 1732 + 152 + 192 + 0 + 16, undefined);
          A.store.Ref(ptr + 1732 + 152 + 192 + 0 + 20, undefined);
          A.store.Bool(ptr + 1732 + 152 + 192 + 0 + 26, false);
          A.store.Bool(ptr + 1732 + 152 + 192 + 0 + 24, false);
          A.store.Bool(ptr + 1732 + 152 + 192 + 0 + 27, false);
          A.store.Bool(ptr + 1732 + 152 + 192 + 0 + 25, false);

          A.store.Bool(ptr + 1732 + 152 + 192 + 32 + 28, false);
          A.store.Ref(ptr + 1732 + 152 + 192 + 32 + 0, undefined);
          A.store.Ref(ptr + 1732 + 152 + 192 + 32 + 4, undefined);
          A.store.Ref(ptr + 1732 + 152 + 192 + 32 + 8, undefined);
          A.store.Ref(ptr + 1732 + 152 + 192 + 32 + 12, undefined);
          A.store.Ref(ptr + 1732 + 152 + 192 + 32 + 16, undefined);
          A.store.Ref(ptr + 1732 + 152 + 192 + 32 + 20, undefined);
          A.store.Bool(ptr + 1732 + 152 + 192 + 32 + 26, false);
          A.store.Bool(ptr + 1732 + 152 + 192 + 32 + 24, false);
          A.store.Bool(ptr + 1732 + 152 + 192 + 32 + 27, false);
          A.store.Bool(ptr + 1732 + 152 + 192 + 32 + 25, false);

          A.store.Bool(ptr + 1732 + 152 + 192 + 64 + 28, false);
          A.store.Ref(ptr + 1732 + 152 + 192 + 64 + 0, undefined);
          A.store.Ref(ptr + 1732 + 152 + 192 + 64 + 4, undefined);
          A.store.Ref(ptr + 1732 + 152 + 192 + 64 + 8, undefined);
          A.store.Ref(ptr + 1732 + 152 + 192 + 64 + 12, undefined);
          A.store.Ref(ptr + 1732 + 152 + 192 + 64 + 16, undefined);
          A.store.Ref(ptr + 1732 + 152 + 192 + 64 + 20, undefined);
          A.store.Bool(ptr + 1732 + 152 + 192 + 64 + 26, false);
          A.store.Bool(ptr + 1732 + 152 + 192 + 64 + 24, false);
          A.store.Bool(ptr + 1732 + 152 + 192 + 64 + 27, false);
          A.store.Bool(ptr + 1732 + 152 + 192 + 64 + 25, false);

          A.store.Bool(ptr + 1732 + 152 + 192 + 96 + 28, false);
          A.store.Ref(ptr + 1732 + 152 + 192 + 96 + 0, undefined);
          A.store.Ref(ptr + 1732 + 152 + 192 + 96 + 4, undefined);
          A.store.Ref(ptr + 1732 + 152 + 192 + 96 + 8, undefined);
          A.store.Ref(ptr + 1732 + 152 + 192 + 96 + 12, undefined);
          A.store.Ref(ptr + 1732 + 152 + 192 + 96 + 16, undefined);
          A.store.Ref(ptr + 1732 + 152 + 192 + 96 + 20, undefined);
          A.store.Bool(ptr + 1732 + 152 + 192 + 96 + 26, false);
          A.store.Bool(ptr + 1732 + 152 + 192 + 96 + 24, false);
          A.store.Bool(ptr + 1732 + 152 + 192 + 96 + 27, false);
          A.store.Bool(ptr + 1732 + 152 + 192 + 96 + 25, false);

          A.store.Bool(ptr + 1732 + 472 + 28, false);
          A.store.Ref(ptr + 1732 + 472 + 0, undefined);
          A.store.Ref(ptr + 1732 + 472 + 4, undefined);
          A.store.Ref(ptr + 1732 + 472 + 8, undefined);
          A.store.Ref(ptr + 1732 + 472 + 12, undefined);
          A.store.Ref(ptr + 1732 + 472 + 16, undefined);
          A.store.Ref(ptr + 1732 + 472 + 20, undefined);
          A.store.Bool(ptr + 1732 + 472 + 26, false);
          A.store.Bool(ptr + 1732 + 472 + 24, false);
          A.store.Bool(ptr + 1732 + 472 + 27, false);
          A.store.Bool(ptr + 1732 + 472 + 25, false);

          A.store.Bool(ptr + 1732 + 504 + 28, false);
          A.store.Ref(ptr + 1732 + 504 + 0, undefined);
          A.store.Ref(ptr + 1732 + 504 + 4, undefined);
          A.store.Ref(ptr + 1732 + 504 + 8, undefined);
          A.store.Ref(ptr + 1732 + 504 + 12, undefined);
          A.store.Ref(ptr + 1732 + 504 + 16, undefined);
          A.store.Ref(ptr + 1732 + 504 + 20, undefined);
          A.store.Bool(ptr + 1732 + 504 + 26, false);
          A.store.Bool(ptr + 1732 + 504 + 24, false);
          A.store.Bool(ptr + 1732 + 504 + 27, false);
          A.store.Bool(ptr + 1732 + 504 + 25, false);

          A.store.Bool(ptr + 1732 + 536 + 28, false);
          A.store.Ref(ptr + 1732 + 536 + 0, undefined);
          A.store.Ref(ptr + 1732 + 536 + 4, undefined);
          A.store.Ref(ptr + 1732 + 536 + 8, undefined);
          A.store.Ref(ptr + 1732 + 536 + 12, undefined);
          A.store.Ref(ptr + 1732 + 536 + 16, undefined);
          A.store.Ref(ptr + 1732 + 536 + 20, undefined);
          A.store.Bool(ptr + 1732 + 536 + 26, false);
          A.store.Bool(ptr + 1732 + 536 + 24, false);
          A.store.Bool(ptr + 1732 + 536 + 27, false);
          A.store.Bool(ptr + 1732 + 536 + 25, false);

          A.store.Bool(ptr + 1732 + 568 + 28, false);
          A.store.Ref(ptr + 1732 + 568 + 0, undefined);
          A.store.Ref(ptr + 1732 + 568 + 4, undefined);
          A.store.Ref(ptr + 1732 + 568 + 8, undefined);
          A.store.Ref(ptr + 1732 + 568 + 12, undefined);
          A.store.Ref(ptr + 1732 + 568 + 16, undefined);
          A.store.Ref(ptr + 1732 + 568 + 20, undefined);
          A.store.Bool(ptr + 1732 + 568 + 26, false);
          A.store.Bool(ptr + 1732 + 568 + 24, false);
          A.store.Bool(ptr + 1732 + 568 + 27, false);
          A.store.Bool(ptr + 1732 + 568 + 25, false);

          A.store.Bool(ptr + 1732 + 600 + 21, false);
          A.store.Bool(ptr + 1732 + 600 + 14, false);
          A.store.Bool(ptr + 1732 + 600 + 0, false);
          A.store.Ref(ptr + 1732 + 600 + 4, undefined);
          A.store.Bool(ptr + 1732 + 600 + 15, false);
          A.store.Bool(ptr + 1732 + 600 + 8, false);
          A.store.Bool(ptr + 1732 + 600 + 16, false);
          A.store.Bool(ptr + 1732 + 600 + 9, false);
          A.store.Bool(ptr + 1732 + 600 + 17, false);
          A.store.Bool(ptr + 1732 + 600 + 10, false);
          A.store.Bool(ptr + 1732 + 600 + 18, false);
          A.store.Bool(ptr + 1732 + 600 + 11, false);
          A.store.Bool(ptr + 1732 + 600 + 19, false);
          A.store.Bool(ptr + 1732 + 600 + 12, false);
          A.store.Bool(ptr + 1732 + 600 + 20, false);
          A.store.Bool(ptr + 1732 + 600 + 13, false);

          A.store.Bool(ptr + 1732 + 624 + 28, false);
          A.store.Ref(ptr + 1732 + 624 + 0, undefined);
          A.store.Ref(ptr + 1732 + 624 + 4, undefined);
          A.store.Ref(ptr + 1732 + 624 + 8, undefined);
          A.store.Ref(ptr + 1732 + 624 + 12, undefined);
          A.store.Ref(ptr + 1732 + 624 + 16, undefined);
          A.store.Ref(ptr + 1732 + 624 + 20, undefined);
          A.store.Bool(ptr + 1732 + 624 + 26, false);
          A.store.Bool(ptr + 1732 + 624 + 24, false);
          A.store.Bool(ptr + 1732 + 624 + 27, false);
          A.store.Bool(ptr + 1732 + 624 + 25, false);

          A.store.Bool(ptr + 1732 + 656 + 21, false);
          A.store.Bool(ptr + 1732 + 656 + 14, false);
          A.store.Bool(ptr + 1732 + 656 + 0, false);
          A.store.Ref(ptr + 1732 + 656 + 4, undefined);
          A.store.Bool(ptr + 1732 + 656 + 15, false);
          A.store.Bool(ptr + 1732 + 656 + 8, false);
          A.store.Bool(ptr + 1732 + 656 + 16, false);
          A.store.Bool(ptr + 1732 + 656 + 9, false);
          A.store.Bool(ptr + 1732 + 656 + 17, false);
          A.store.Bool(ptr + 1732 + 656 + 10, false);
          A.store.Bool(ptr + 1732 + 656 + 18, false);
          A.store.Bool(ptr + 1732 + 656 + 11, false);
          A.store.Bool(ptr + 1732 + 656 + 19, false);
          A.store.Bool(ptr + 1732 + 656 + 12, false);
          A.store.Bool(ptr + 1732 + 656 + 20, false);
          A.store.Bool(ptr + 1732 + 656 + 13, false);

          A.store.Bool(ptr + 1732 + 680 + 28, false);
          A.store.Ref(ptr + 1732 + 680 + 0, undefined);
          A.store.Ref(ptr + 1732 + 680 + 4, undefined);
          A.store.Ref(ptr + 1732 + 680 + 8, undefined);
          A.store.Ref(ptr + 1732 + 680 + 12, undefined);
          A.store.Ref(ptr + 1732 + 680 + 16, undefined);
          A.store.Ref(ptr + 1732 + 680 + 20, undefined);
          A.store.Bool(ptr + 1732 + 680 + 26, false);
          A.store.Bool(ptr + 1732 + 680 + 24, false);
          A.store.Bool(ptr + 1732 + 680 + 27, false);
          A.store.Bool(ptr + 1732 + 680 + 25, false);

          A.store.Bool(ptr + 1732 + 712 + 28, false);
          A.store.Ref(ptr + 1732 + 712 + 0, undefined);
          A.store.Ref(ptr + 1732 + 712 + 4, undefined);
          A.store.Ref(ptr + 1732 + 712 + 8, undefined);
          A.store.Ref(ptr + 1732 + 712 + 12, undefined);
          A.store.Ref(ptr + 1732 + 712 + 16, undefined);
          A.store.Ref(ptr + 1732 + 712 + 20, undefined);
          A.store.Bool(ptr + 1732 + 712 + 26, false);
          A.store.Bool(ptr + 1732 + 712 + 24, false);
          A.store.Bool(ptr + 1732 + 712 + 27, false);
          A.store.Bool(ptr + 1732 + 712 + 25, false);

          A.store.Bool(ptr + 1732 + 744 + 28, false);
          A.store.Ref(ptr + 1732 + 744 + 0, undefined);
          A.store.Ref(ptr + 1732 + 744 + 4, undefined);
          A.store.Ref(ptr + 1732 + 744 + 8, undefined);
          A.store.Ref(ptr + 1732 + 744 + 12, undefined);
          A.store.Ref(ptr + 1732 + 744 + 16, undefined);
          A.store.Ref(ptr + 1732 + 744 + 20, undefined);
          A.store.Bool(ptr + 1732 + 744 + 26, false);
          A.store.Bool(ptr + 1732 + 744 + 24, false);
          A.store.Bool(ptr + 1732 + 744 + 27, false);
          A.store.Bool(ptr + 1732 + 744 + 25, false);

          A.store.Bool(ptr + 1732 + 776 + 28, false);
          A.store.Ref(ptr + 1732 + 776 + 0, undefined);
          A.store.Ref(ptr + 1732 + 776 + 4, undefined);
          A.store.Ref(ptr + 1732 + 776 + 8, undefined);
          A.store.Ref(ptr + 1732 + 776 + 12, undefined);
          A.store.Ref(ptr + 1732 + 776 + 16, undefined);
          A.store.Ref(ptr + 1732 + 776 + 20, undefined);
          A.store.Bool(ptr + 1732 + 776 + 26, false);
          A.store.Bool(ptr + 1732 + 776 + 24, false);
          A.store.Bool(ptr + 1732 + 776 + 27, false);
          A.store.Bool(ptr + 1732 + 776 + 25, false);

          A.store.Bool(ptr + 1732 + 808 + 33, false);
          A.store.Bool(ptr + 1732 + 808 + 26, false);
          A.store.Int32(ptr + 1732 + 808 + 0, 0);
          A.store.Ref(ptr + 1732 + 808 + 4, undefined);
          A.store.Bool(ptr + 1732 + 808 + 27, false);
          A.store.Int32(ptr + 1732 + 808 + 8, 0);
          A.store.Bool(ptr + 1732 + 808 + 28, false);
          A.store.Int32(ptr + 1732 + 808 + 12, 0);
          A.store.Bool(ptr + 1732 + 808 + 29, false);
          A.store.Int32(ptr + 1732 + 808 + 16, 0);
          A.store.Bool(ptr + 1732 + 808 + 30, false);
          A.store.Int32(ptr + 1732 + 808 + 20, 0);
          A.store.Bool(ptr + 1732 + 808 + 31, false);
          A.store.Bool(ptr + 1732 + 808 + 24, false);
          A.store.Bool(ptr + 1732 + 808 + 32, false);
          A.store.Bool(ptr + 1732 + 808 + 25, false);

          A.store.Bool(ptr + 1732 + 844 + 28, false);
          A.store.Ref(ptr + 1732 + 844 + 0, undefined);
          A.store.Ref(ptr + 1732 + 844 + 4, undefined);
          A.store.Ref(ptr + 1732 + 844 + 8, undefined);
          A.store.Ref(ptr + 1732 + 844 + 12, undefined);
          A.store.Ref(ptr + 1732 + 844 + 16, undefined);
          A.store.Ref(ptr + 1732 + 844 + 20, undefined);
          A.store.Bool(ptr + 1732 + 844 + 26, false);
          A.store.Bool(ptr + 1732 + 844 + 24, false);
          A.store.Bool(ptr + 1732 + 844 + 27, false);
          A.store.Bool(ptr + 1732 + 844 + 25, false);

          A.store.Bool(ptr + 1732 + 876 + 21, false);
          A.store.Bool(ptr + 1732 + 876 + 14, false);
          A.store.Bool(ptr + 1732 + 876 + 0, false);
          A.store.Ref(ptr + 1732 + 876 + 4, undefined);
          A.store.Bool(ptr + 1732 + 876 + 15, false);
          A.store.Bool(ptr + 1732 + 876 + 8, false);
          A.store.Bool(ptr + 1732 + 876 + 16, false);
          A.store.Bool(ptr + 1732 + 876 + 9, false);
          A.store.Bool(ptr + 1732 + 876 + 17, false);
          A.store.Bool(ptr + 1732 + 876 + 10, false);
          A.store.Bool(ptr + 1732 + 876 + 18, false);
          A.store.Bool(ptr + 1732 + 876 + 11, false);
          A.store.Bool(ptr + 1732 + 876 + 19, false);
          A.store.Bool(ptr + 1732 + 876 + 12, false);
          A.store.Bool(ptr + 1732 + 876 + 20, false);
          A.store.Bool(ptr + 1732 + 876 + 13, false);

          A.store.Bool(ptr + 1732 + 900 + 28, false);
          A.store.Ref(ptr + 1732 + 900 + 0, undefined);
          A.store.Ref(ptr + 1732 + 900 + 4, undefined);
          A.store.Ref(ptr + 1732 + 900 + 8, undefined);
          A.store.Ref(ptr + 1732 + 900 + 12, undefined);
          A.store.Ref(ptr + 1732 + 900 + 16, undefined);
          A.store.Ref(ptr + 1732 + 900 + 20, undefined);
          A.store.Bool(ptr + 1732 + 900 + 26, false);
          A.store.Bool(ptr + 1732 + 900 + 24, false);
          A.store.Bool(ptr + 1732 + 900 + 27, false);
          A.store.Bool(ptr + 1732 + 900 + 25, false);

          A.store.Bool(ptr + 1732 + 932 + 28, false);
          A.store.Ref(ptr + 1732 + 932 + 0, undefined);
          A.store.Ref(ptr + 1732 + 932 + 4, undefined);
          A.store.Ref(ptr + 1732 + 932 + 8, undefined);
          A.store.Ref(ptr + 1732 + 932 + 12, undefined);
          A.store.Ref(ptr + 1732 + 932 + 16, undefined);
          A.store.Ref(ptr + 1732 + 932 + 20, undefined);
          A.store.Bool(ptr + 1732 + 932 + 26, false);
          A.store.Bool(ptr + 1732 + 932 + 24, false);
          A.store.Bool(ptr + 1732 + 932 + 27, false);
          A.store.Bool(ptr + 1732 + 932 + 25, false);

          A.store.Bool(ptr + 1732 + 964 + 28, false);
          A.store.Ref(ptr + 1732 + 964 + 0, undefined);
          A.store.Ref(ptr + 1732 + 964 + 4, undefined);
          A.store.Ref(ptr + 1732 + 964 + 8, undefined);
          A.store.Ref(ptr + 1732 + 964 + 12, undefined);
          A.store.Ref(ptr + 1732 + 964 + 16, undefined);
          A.store.Ref(ptr + 1732 + 964 + 20, undefined);
          A.store.Bool(ptr + 1732 + 964 + 26, false);
          A.store.Bool(ptr + 1732 + 964 + 24, false);
          A.store.Bool(ptr + 1732 + 964 + 27, false);
          A.store.Bool(ptr + 1732 + 964 + 25, false);

          A.store.Bool(ptr + 1732 + 996 + 33, false);
          A.store.Bool(ptr + 1732 + 996 + 26, false);
          A.store.Int32(ptr + 1732 + 996 + 0, 0);
          A.store.Ref(ptr + 1732 + 996 + 4, undefined);
          A.store.Bool(ptr + 1732 + 996 + 27, false);
          A.store.Int32(ptr + 1732 + 996 + 8, 0);
          A.store.Bool(ptr + 1732 + 996 + 28, false);
          A.store.Int32(ptr + 1732 + 996 + 12, 0);
          A.store.Bool(ptr + 1732 + 996 + 29, false);
          A.store.Int32(ptr + 1732 + 996 + 16, 0);
          A.store.Bool(ptr + 1732 + 996 + 30, false);
          A.store.Int32(ptr + 1732 + 996 + 20, 0);
          A.store.Bool(ptr + 1732 + 996 + 31, false);
          A.store.Bool(ptr + 1732 + 996 + 24, false);
          A.store.Bool(ptr + 1732 + 996 + 32, false);
          A.store.Bool(ptr + 1732 + 996 + 25, false);

          A.store.Bool(ptr + 1732 + 1032 + 21, false);
          A.store.Bool(ptr + 1732 + 1032 + 14, false);
          A.store.Bool(ptr + 1732 + 1032 + 0, false);
          A.store.Ref(ptr + 1732 + 1032 + 4, undefined);
          A.store.Bool(ptr + 1732 + 1032 + 15, false);
          A.store.Bool(ptr + 1732 + 1032 + 8, false);
          A.store.Bool(ptr + 1732 + 1032 + 16, false);
          A.store.Bool(ptr + 1732 + 1032 + 9, false);
          A.store.Bool(ptr + 1732 + 1032 + 17, false);
          A.store.Bool(ptr + 1732 + 1032 + 10, false);
          A.store.Bool(ptr + 1732 + 1032 + 18, false);
          A.store.Bool(ptr + 1732 + 1032 + 11, false);
          A.store.Bool(ptr + 1732 + 1032 + 19, false);
          A.store.Bool(ptr + 1732 + 1032 + 12, false);
          A.store.Bool(ptr + 1732 + 1032 + 20, false);
          A.store.Bool(ptr + 1732 + 1032 + 13, false);

          A.store.Bool(ptr + 1732 + 1056 + 28, false);
          A.store.Ref(ptr + 1732 + 1056 + 0, undefined);
          A.store.Ref(ptr + 1732 + 1056 + 4, undefined);
          A.store.Ref(ptr + 1732 + 1056 + 8, undefined);
          A.store.Ref(ptr + 1732 + 1056 + 12, undefined);
          A.store.Ref(ptr + 1732 + 1056 + 16, undefined);
          A.store.Ref(ptr + 1732 + 1056 + 20, undefined);
          A.store.Bool(ptr + 1732 + 1056 + 26, false);
          A.store.Bool(ptr + 1732 + 1056 + 24, false);
          A.store.Bool(ptr + 1732 + 1056 + 27, false);
          A.store.Bool(ptr + 1732 + 1056 + 25, false);

          A.store.Bool(ptr + 1732 + 1088 + 28, false);
          A.store.Ref(ptr + 1732 + 1088 + 0, undefined);
          A.store.Ref(ptr + 1732 + 1088 + 4, undefined);
          A.store.Ref(ptr + 1732 + 1088 + 8, undefined);
          A.store.Ref(ptr + 1732 + 1088 + 12, undefined);
          A.store.Ref(ptr + 1732 + 1088 + 16, undefined);
          A.store.Ref(ptr + 1732 + 1088 + 20, undefined);
          A.store.Bool(ptr + 1732 + 1088 + 26, false);
          A.store.Bool(ptr + 1732 + 1088 + 24, false);
          A.store.Bool(ptr + 1732 + 1088 + 27, false);
          A.store.Bool(ptr + 1732 + 1088 + 25, false);

          A.store.Bool(ptr + 1732 + 1120 + 28, false);
          A.store.Ref(ptr + 1732 + 1120 + 0, undefined);
          A.store.Ref(ptr + 1732 + 1120 + 4, undefined);
          A.store.Ref(ptr + 1732 + 1120 + 8, undefined);
          A.store.Ref(ptr + 1732 + 1120 + 12, undefined);
          A.store.Ref(ptr + 1732 + 1120 + 16, undefined);
          A.store.Ref(ptr + 1732 + 1120 + 20, undefined);
          A.store.Bool(ptr + 1732 + 1120 + 26, false);
          A.store.Bool(ptr + 1732 + 1120 + 24, false);
          A.store.Bool(ptr + 1732 + 1120 + 27, false);
          A.store.Bool(ptr + 1732 + 1120 + 25, false);

          A.store.Bool(ptr + 1732 + 1152 + 33, false);
          A.store.Bool(ptr + 1732 + 1152 + 26, false);
          A.store.Int32(ptr + 1732 + 1152 + 0, 0);
          A.store.Ref(ptr + 1732 + 1152 + 4, undefined);
          A.store.Bool(ptr + 1732 + 1152 + 27, false);
          A.store.Int32(ptr + 1732 + 1152 + 8, 0);
          A.store.Bool(ptr + 1732 + 1152 + 28, false);
          A.store.Int32(ptr + 1732 + 1152 + 12, 0);
          A.store.Bool(ptr + 1732 + 1152 + 29, false);
          A.store.Int32(ptr + 1732 + 1152 + 16, 0);
          A.store.Bool(ptr + 1732 + 1152 + 30, false);
          A.store.Int32(ptr + 1732 + 1152 + 20, 0);
          A.store.Bool(ptr + 1732 + 1152 + 31, false);
          A.store.Bool(ptr + 1732 + 1152 + 24, false);
          A.store.Bool(ptr + 1732 + 1152 + 32, false);
          A.store.Bool(ptr + 1732 + 1152 + 25, false);

          A.store.Bool(ptr + 1732 + 1188 + 33, false);
          A.store.Bool(ptr + 1732 + 1188 + 26, false);
          A.store.Int32(ptr + 1732 + 1188 + 0, 0);
          A.store.Ref(ptr + 1732 + 1188 + 4, undefined);
          A.store.Bool(ptr + 1732 + 1188 + 27, false);
          A.store.Int32(ptr + 1732 + 1188 + 8, 0);
          A.store.Bool(ptr + 1732 + 1188 + 28, false);
          A.store.Int32(ptr + 1732 + 1188 + 12, 0);
          A.store.Bool(ptr + 1732 + 1188 + 29, false);
          A.store.Int32(ptr + 1732 + 1188 + 16, 0);
          A.store.Bool(ptr + 1732 + 1188 + 30, false);
          A.store.Int32(ptr + 1732 + 1188 + 20, 0);
          A.store.Bool(ptr + 1732 + 1188 + 31, false);
          A.store.Bool(ptr + 1732 + 1188 + 24, false);
          A.store.Bool(ptr + 1732 + 1188 + 32, false);
          A.store.Bool(ptr + 1732 + 1188 + 25, false);

          A.store.Bool(ptr + 1732 + 1224 + 28, false);
          A.store.Ref(ptr + 1732 + 1224 + 0, undefined);
          A.store.Ref(ptr + 1732 + 1224 + 4, undefined);
          A.store.Ref(ptr + 1732 + 1224 + 8, undefined);
          A.store.Ref(ptr + 1732 + 1224 + 12, undefined);
          A.store.Ref(ptr + 1732 + 1224 + 16, undefined);
          A.store.Ref(ptr + 1732 + 1224 + 20, undefined);
          A.store.Bool(ptr + 1732 + 1224 + 26, false);
          A.store.Bool(ptr + 1732 + 1224 + 24, false);
          A.store.Bool(ptr + 1732 + 1224 + 27, false);
          A.store.Bool(ptr + 1732 + 1224 + 25, false);

          A.store.Bool(ptr + 1732 + 1256 + 28, false);
          A.store.Ref(ptr + 1732 + 1256 + 0, undefined);
          A.store.Ref(ptr + 1732 + 1256 + 4, undefined);
          A.store.Ref(ptr + 1732 + 1256 + 8, undefined);
          A.store.Ref(ptr + 1732 + 1256 + 12, undefined);
          A.store.Ref(ptr + 1732 + 1256 + 16, undefined);
          A.store.Ref(ptr + 1732 + 1256 + 20, undefined);
          A.store.Bool(ptr + 1732 + 1256 + 26, false);
          A.store.Bool(ptr + 1732 + 1256 + 24, false);
          A.store.Bool(ptr + 1732 + 1256 + 27, false);
          A.store.Bool(ptr + 1732 + 1256 + 25, false);

          A.store.Bool(ptr + 1732 + 1288 + 28, false);
          A.store.Ref(ptr + 1732 + 1288 + 0, undefined);
          A.store.Ref(ptr + 1732 + 1288 + 4, undefined);
          A.store.Ref(ptr + 1732 + 1288 + 8, undefined);
          A.store.Ref(ptr + 1732 + 1288 + 12, undefined);
          A.store.Ref(ptr + 1732 + 1288 + 16, undefined);
          A.store.Ref(ptr + 1732 + 1288 + 20, undefined);
          A.store.Bool(ptr + 1732 + 1288 + 26, false);
          A.store.Bool(ptr + 1732 + 1288 + 24, false);
          A.store.Bool(ptr + 1732 + 1288 + 27, false);
          A.store.Bool(ptr + 1732 + 1288 + 25, false);

          A.store.Bool(ptr + 1732 + 1320 + 28, false);
          A.store.Ref(ptr + 1732 + 1320 + 0, undefined);
          A.store.Ref(ptr + 1732 + 1320 + 4, undefined);
          A.store.Ref(ptr + 1732 + 1320 + 8, undefined);
          A.store.Ref(ptr + 1732 + 1320 + 12, undefined);
          A.store.Ref(ptr + 1732 + 1320 + 16, undefined);
          A.store.Ref(ptr + 1732 + 1320 + 20, undefined);
          A.store.Bool(ptr + 1732 + 1320 + 26, false);
          A.store.Bool(ptr + 1732 + 1320 + 24, false);
          A.store.Bool(ptr + 1732 + 1320 + 27, false);
          A.store.Bool(ptr + 1732 + 1320 + 25, false);

          A.store.Bool(ptr + 1732 + 1352 + 28, false);
          A.store.Ref(ptr + 1732 + 1352 + 0, undefined);
          A.store.Ref(ptr + 1732 + 1352 + 4, undefined);
          A.store.Ref(ptr + 1732 + 1352 + 8, undefined);
          A.store.Ref(ptr + 1732 + 1352 + 12, undefined);
          A.store.Ref(ptr + 1732 + 1352 + 16, undefined);
          A.store.Ref(ptr + 1732 + 1352 + 20, undefined);
          A.store.Bool(ptr + 1732 + 1352 + 26, false);
          A.store.Bool(ptr + 1732 + 1352 + 24, false);
          A.store.Bool(ptr + 1732 + 1352 + 27, false);
          A.store.Bool(ptr + 1732 + 1352 + 25, false);

          A.store.Bool(ptr + 1732 + 1384 + 28, false);
          A.store.Ref(ptr + 1732 + 1384 + 0, undefined);
          A.store.Ref(ptr + 1732 + 1384 + 4, undefined);
          A.store.Ref(ptr + 1732 + 1384 + 8, undefined);
          A.store.Ref(ptr + 1732 + 1384 + 12, undefined);
          A.store.Ref(ptr + 1732 + 1384 + 16, undefined);
          A.store.Ref(ptr + 1732 + 1384 + 20, undefined);
          A.store.Bool(ptr + 1732 + 1384 + 26, false);
          A.store.Bool(ptr + 1732 + 1384 + 24, false);
          A.store.Bool(ptr + 1732 + 1384 + 27, false);
          A.store.Bool(ptr + 1732 + 1384 + 25, false);

          A.store.Bool(ptr + 1732 + 1416 + 28, false);
          A.store.Ref(ptr + 1732 + 1416 + 0, undefined);
          A.store.Ref(ptr + 1732 + 1416 + 4, undefined);
          A.store.Ref(ptr + 1732 + 1416 + 8, undefined);
          A.store.Ref(ptr + 1732 + 1416 + 12, undefined);
          A.store.Ref(ptr + 1732 + 1416 + 16, undefined);
          A.store.Ref(ptr + 1732 + 1416 + 20, undefined);
          A.store.Bool(ptr + 1732 + 1416 + 26, false);
          A.store.Bool(ptr + 1732 + 1416 + 24, false);
          A.store.Bool(ptr + 1732 + 1416 + 27, false);
          A.store.Bool(ptr + 1732 + 1416 + 25, false);

          A.store.Bool(ptr + 1732 + 1448 + 28, false);
          A.store.Ref(ptr + 1732 + 1448 + 0, undefined);
          A.store.Ref(ptr + 1732 + 1448 + 4, undefined);
          A.store.Ref(ptr + 1732 + 1448 + 8, undefined);
          A.store.Ref(ptr + 1732 + 1448 + 12, undefined);
          A.store.Ref(ptr + 1732 + 1448 + 16, undefined);
          A.store.Ref(ptr + 1732 + 1448 + 20, undefined);
          A.store.Bool(ptr + 1732 + 1448 + 26, false);
          A.store.Bool(ptr + 1732 + 1448 + 24, false);
          A.store.Bool(ptr + 1732 + 1448 + 27, false);
          A.store.Bool(ptr + 1732 + 1448 + 25, false);

          A.store.Bool(ptr + 1732 + 1480 + 61, false);

          A.store.Bool(ptr + 1732 + 1480 + 0 + 28, false);
          A.store.Ref(ptr + 1732 + 1480 + 0 + 0, undefined);
          A.store.Ref(ptr + 1732 + 1480 + 0 + 4, undefined);
          A.store.Ref(ptr + 1732 + 1480 + 0 + 8, undefined);
          A.store.Ref(ptr + 1732 + 1480 + 0 + 12, undefined);
          A.store.Ref(ptr + 1732 + 1480 + 0 + 16, undefined);
          A.store.Ref(ptr + 1732 + 1480 + 0 + 20, undefined);
          A.store.Bool(ptr + 1732 + 1480 + 0 + 26, false);
          A.store.Bool(ptr + 1732 + 1480 + 0 + 24, false);
          A.store.Bool(ptr + 1732 + 1480 + 0 + 27, false);
          A.store.Bool(ptr + 1732 + 1480 + 0 + 25, false);

          A.store.Bool(ptr + 1732 + 1480 + 32 + 28, false);
          A.store.Ref(ptr + 1732 + 1480 + 32 + 0, undefined);
          A.store.Ref(ptr + 1732 + 1480 + 32 + 4, undefined);
          A.store.Ref(ptr + 1732 + 1480 + 32 + 8, undefined);
          A.store.Ref(ptr + 1732 + 1480 + 32 + 12, undefined);
          A.store.Ref(ptr + 1732 + 1480 + 32 + 16, undefined);
          A.store.Ref(ptr + 1732 + 1480 + 32 + 20, undefined);
          A.store.Bool(ptr + 1732 + 1480 + 32 + 26, false);
          A.store.Bool(ptr + 1732 + 1480 + 32 + 24, false);
          A.store.Bool(ptr + 1732 + 1480 + 32 + 27, false);
          A.store.Bool(ptr + 1732 + 1480 + 32 + 25, false);
        } else {
          A.store.Bool(ptr + 1732 + 1542, true);

          if (typeof x["OpenVPN"]["Auth"] === "undefined") {
            A.store.Bool(ptr + 1732 + 0 + 28, false);
            A.store.Ref(ptr + 1732 + 0 + 0, undefined);
            A.store.Ref(ptr + 1732 + 0 + 4, undefined);
            A.store.Ref(ptr + 1732 + 0 + 8, undefined);
            A.store.Ref(ptr + 1732 + 0 + 12, undefined);
            A.store.Ref(ptr + 1732 + 0 + 16, undefined);
            A.store.Ref(ptr + 1732 + 0 + 20, undefined);
            A.store.Bool(ptr + 1732 + 0 + 26, false);
            A.store.Bool(ptr + 1732 + 0 + 24, false);
            A.store.Bool(ptr + 1732 + 0 + 27, false);
            A.store.Bool(ptr + 1732 + 0 + 25, false);
          } else {
            A.store.Bool(ptr + 1732 + 0 + 28, true);
            A.store.Ref(ptr + 1732 + 0 + 0, x["OpenVPN"]["Auth"]["Active"]);
            A.store.Ref(ptr + 1732 + 0 + 4, x["OpenVPN"]["Auth"]["Effective"]);
            A.store.Ref(ptr + 1732 + 0 + 8, x["OpenVPN"]["Auth"]["UserPolicy"]);
            A.store.Ref(ptr + 1732 + 0 + 12, x["OpenVPN"]["Auth"]["DevicePolicy"]);
            A.store.Ref(ptr + 1732 + 0 + 16, x["OpenVPN"]["Auth"]["UserSetting"]);
            A.store.Ref(ptr + 1732 + 0 + 20, x["OpenVPN"]["Auth"]["SharedSetting"]);
            A.store.Bool(ptr + 1732 + 0 + 26, "UserEditable" in x["OpenVPN"]["Auth"] ? true : false);
            A.store.Bool(ptr + 1732 + 0 + 24, x["OpenVPN"]["Auth"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1732 + 0 + 27, "DeviceEditable" in x["OpenVPN"]["Auth"] ? true : false);
            A.store.Bool(ptr + 1732 + 0 + 25, x["OpenVPN"]["Auth"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["OpenVPN"]["AuthRetry"] === "undefined") {
            A.store.Bool(ptr + 1732 + 32 + 28, false);
            A.store.Ref(ptr + 1732 + 32 + 0, undefined);
            A.store.Ref(ptr + 1732 + 32 + 4, undefined);
            A.store.Ref(ptr + 1732 + 32 + 8, undefined);
            A.store.Ref(ptr + 1732 + 32 + 12, undefined);
            A.store.Ref(ptr + 1732 + 32 + 16, undefined);
            A.store.Ref(ptr + 1732 + 32 + 20, undefined);
            A.store.Bool(ptr + 1732 + 32 + 26, false);
            A.store.Bool(ptr + 1732 + 32 + 24, false);
            A.store.Bool(ptr + 1732 + 32 + 27, false);
            A.store.Bool(ptr + 1732 + 32 + 25, false);
          } else {
            A.store.Bool(ptr + 1732 + 32 + 28, true);
            A.store.Ref(ptr + 1732 + 32 + 0, x["OpenVPN"]["AuthRetry"]["Active"]);
            A.store.Ref(ptr + 1732 + 32 + 4, x["OpenVPN"]["AuthRetry"]["Effective"]);
            A.store.Ref(ptr + 1732 + 32 + 8, x["OpenVPN"]["AuthRetry"]["UserPolicy"]);
            A.store.Ref(ptr + 1732 + 32 + 12, x["OpenVPN"]["AuthRetry"]["DevicePolicy"]);
            A.store.Ref(ptr + 1732 + 32 + 16, x["OpenVPN"]["AuthRetry"]["UserSetting"]);
            A.store.Ref(ptr + 1732 + 32 + 20, x["OpenVPN"]["AuthRetry"]["SharedSetting"]);
            A.store.Bool(ptr + 1732 + 32 + 26, "UserEditable" in x["OpenVPN"]["AuthRetry"] ? true : false);
            A.store.Bool(ptr + 1732 + 32 + 24, x["OpenVPN"]["AuthRetry"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1732 + 32 + 27, "DeviceEditable" in x["OpenVPN"]["AuthRetry"] ? true : false);
            A.store.Bool(ptr + 1732 + 32 + 25, x["OpenVPN"]["AuthRetry"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["OpenVPN"]["AuthNoCache"] === "undefined") {
            A.store.Bool(ptr + 1732 + 64 + 21, false);
            A.store.Bool(ptr + 1732 + 64 + 14, false);
            A.store.Bool(ptr + 1732 + 64 + 0, false);
            A.store.Ref(ptr + 1732 + 64 + 4, undefined);
            A.store.Bool(ptr + 1732 + 64 + 15, false);
            A.store.Bool(ptr + 1732 + 64 + 8, false);
            A.store.Bool(ptr + 1732 + 64 + 16, false);
            A.store.Bool(ptr + 1732 + 64 + 9, false);
            A.store.Bool(ptr + 1732 + 64 + 17, false);
            A.store.Bool(ptr + 1732 + 64 + 10, false);
            A.store.Bool(ptr + 1732 + 64 + 18, false);
            A.store.Bool(ptr + 1732 + 64 + 11, false);
            A.store.Bool(ptr + 1732 + 64 + 19, false);
            A.store.Bool(ptr + 1732 + 64 + 12, false);
            A.store.Bool(ptr + 1732 + 64 + 20, false);
            A.store.Bool(ptr + 1732 + 64 + 13, false);
          } else {
            A.store.Bool(ptr + 1732 + 64 + 21, true);
            A.store.Bool(ptr + 1732 + 64 + 14, "Active" in x["OpenVPN"]["AuthNoCache"] ? true : false);
            A.store.Bool(ptr + 1732 + 64 + 0, x["OpenVPN"]["AuthNoCache"]["Active"] ? true : false);
            A.store.Ref(ptr + 1732 + 64 + 4, x["OpenVPN"]["AuthNoCache"]["Effective"]);
            A.store.Bool(ptr + 1732 + 64 + 15, "UserPolicy" in x["OpenVPN"]["AuthNoCache"] ? true : false);
            A.store.Bool(ptr + 1732 + 64 + 8, x["OpenVPN"]["AuthNoCache"]["UserPolicy"] ? true : false);
            A.store.Bool(ptr + 1732 + 64 + 16, "DevicePolicy" in x["OpenVPN"]["AuthNoCache"] ? true : false);
            A.store.Bool(ptr + 1732 + 64 + 9, x["OpenVPN"]["AuthNoCache"]["DevicePolicy"] ? true : false);
            A.store.Bool(ptr + 1732 + 64 + 17, "UserSetting" in x["OpenVPN"]["AuthNoCache"] ? true : false);
            A.store.Bool(ptr + 1732 + 64 + 10, x["OpenVPN"]["AuthNoCache"]["UserSetting"] ? true : false);
            A.store.Bool(ptr + 1732 + 64 + 18, "SharedSetting" in x["OpenVPN"]["AuthNoCache"] ? true : false);
            A.store.Bool(ptr + 1732 + 64 + 11, x["OpenVPN"]["AuthNoCache"]["SharedSetting"] ? true : false);
            A.store.Bool(ptr + 1732 + 64 + 19, "UserEditable" in x["OpenVPN"]["AuthNoCache"] ? true : false);
            A.store.Bool(ptr + 1732 + 64 + 12, x["OpenVPN"]["AuthNoCache"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1732 + 64 + 20, "DeviceEditable" in x["OpenVPN"]["AuthNoCache"] ? true : false);
            A.store.Bool(ptr + 1732 + 64 + 13, x["OpenVPN"]["AuthNoCache"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["OpenVPN"]["Cipher"] === "undefined") {
            A.store.Bool(ptr + 1732 + 88 + 28, false);
            A.store.Ref(ptr + 1732 + 88 + 0, undefined);
            A.store.Ref(ptr + 1732 + 88 + 4, undefined);
            A.store.Ref(ptr + 1732 + 88 + 8, undefined);
            A.store.Ref(ptr + 1732 + 88 + 12, undefined);
            A.store.Ref(ptr + 1732 + 88 + 16, undefined);
            A.store.Ref(ptr + 1732 + 88 + 20, undefined);
            A.store.Bool(ptr + 1732 + 88 + 26, false);
            A.store.Bool(ptr + 1732 + 88 + 24, false);
            A.store.Bool(ptr + 1732 + 88 + 27, false);
            A.store.Bool(ptr + 1732 + 88 + 25, false);
          } else {
            A.store.Bool(ptr + 1732 + 88 + 28, true);
            A.store.Ref(ptr + 1732 + 88 + 0, x["OpenVPN"]["Cipher"]["Active"]);
            A.store.Ref(ptr + 1732 + 88 + 4, x["OpenVPN"]["Cipher"]["Effective"]);
            A.store.Ref(ptr + 1732 + 88 + 8, x["OpenVPN"]["Cipher"]["UserPolicy"]);
            A.store.Ref(ptr + 1732 + 88 + 12, x["OpenVPN"]["Cipher"]["DevicePolicy"]);
            A.store.Ref(ptr + 1732 + 88 + 16, x["OpenVPN"]["Cipher"]["UserSetting"]);
            A.store.Ref(ptr + 1732 + 88 + 20, x["OpenVPN"]["Cipher"]["SharedSetting"]);
            A.store.Bool(ptr + 1732 + 88 + 26, "UserEditable" in x["OpenVPN"]["Cipher"] ? true : false);
            A.store.Bool(ptr + 1732 + 88 + 24, x["OpenVPN"]["Cipher"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1732 + 88 + 27, "DeviceEditable" in x["OpenVPN"]["Cipher"] ? true : false);
            A.store.Bool(ptr + 1732 + 88 + 25, x["OpenVPN"]["Cipher"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["OpenVPN"]["ClientCertPKCS11Id"] === "undefined") {
            A.store.Bool(ptr + 1732 + 120 + 28, false);
            A.store.Ref(ptr + 1732 + 120 + 0, undefined);
            A.store.Ref(ptr + 1732 + 120 + 4, undefined);
            A.store.Ref(ptr + 1732 + 120 + 8, undefined);
            A.store.Ref(ptr + 1732 + 120 + 12, undefined);
            A.store.Ref(ptr + 1732 + 120 + 16, undefined);
            A.store.Ref(ptr + 1732 + 120 + 20, undefined);
            A.store.Bool(ptr + 1732 + 120 + 26, false);
            A.store.Bool(ptr + 1732 + 120 + 24, false);
            A.store.Bool(ptr + 1732 + 120 + 27, false);
            A.store.Bool(ptr + 1732 + 120 + 25, false);
          } else {
            A.store.Bool(ptr + 1732 + 120 + 28, true);
            A.store.Ref(ptr + 1732 + 120 + 0, x["OpenVPN"]["ClientCertPKCS11Id"]["Active"]);
            A.store.Ref(ptr + 1732 + 120 + 4, x["OpenVPN"]["ClientCertPKCS11Id"]["Effective"]);
            A.store.Ref(ptr + 1732 + 120 + 8, x["OpenVPN"]["ClientCertPKCS11Id"]["UserPolicy"]);
            A.store.Ref(ptr + 1732 + 120 + 12, x["OpenVPN"]["ClientCertPKCS11Id"]["DevicePolicy"]);
            A.store.Ref(ptr + 1732 + 120 + 16, x["OpenVPN"]["ClientCertPKCS11Id"]["UserSetting"]);
            A.store.Ref(ptr + 1732 + 120 + 20, x["OpenVPN"]["ClientCertPKCS11Id"]["SharedSetting"]);
            A.store.Bool(ptr + 1732 + 120 + 26, "UserEditable" in x["OpenVPN"]["ClientCertPKCS11Id"] ? true : false);
            A.store.Bool(ptr + 1732 + 120 + 24, x["OpenVPN"]["ClientCertPKCS11Id"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1732 + 120 + 27, "DeviceEditable" in x["OpenVPN"]["ClientCertPKCS11Id"] ? true : false);
            A.store.Bool(ptr + 1732 + 120 + 25, x["OpenVPN"]["ClientCertPKCS11Id"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["OpenVPN"]["ClientCertPattern"] === "undefined") {
            A.store.Bool(ptr + 1732 + 152 + 318, false);

            A.store.Bool(ptr + 1732 + 152 + 0 + 28, false);
            A.store.Ref(ptr + 1732 + 152 + 0 + 0, undefined);
            A.store.Ref(ptr + 1732 + 152 + 0 + 4, undefined);
            A.store.Ref(ptr + 1732 + 152 + 0 + 8, undefined);
            A.store.Ref(ptr + 1732 + 152 + 0 + 12, undefined);
            A.store.Ref(ptr + 1732 + 152 + 0 + 16, undefined);
            A.store.Ref(ptr + 1732 + 152 + 0 + 20, undefined);
            A.store.Bool(ptr + 1732 + 152 + 0 + 26, false);
            A.store.Bool(ptr + 1732 + 152 + 0 + 24, false);
            A.store.Bool(ptr + 1732 + 152 + 0 + 27, false);
            A.store.Bool(ptr + 1732 + 152 + 0 + 25, false);

            A.store.Bool(ptr + 1732 + 152 + 32 + 125, false);

            A.store.Bool(ptr + 1732 + 152 + 32 + 0 + 28, false);
            A.store.Ref(ptr + 1732 + 152 + 32 + 0 + 0, undefined);
            A.store.Ref(ptr + 1732 + 152 + 32 + 0 + 4, undefined);
            A.store.Ref(ptr + 1732 + 152 + 32 + 0 + 8, undefined);
            A.store.Ref(ptr + 1732 + 152 + 32 + 0 + 12, undefined);
            A.store.Ref(ptr + 1732 + 152 + 32 + 0 + 16, undefined);
            A.store.Ref(ptr + 1732 + 152 + 32 + 0 + 20, undefined);
            A.store.Bool(ptr + 1732 + 152 + 32 + 0 + 26, false);
            A.store.Bool(ptr + 1732 + 152 + 32 + 0 + 24, false);
            A.store.Bool(ptr + 1732 + 152 + 32 + 0 + 27, false);
            A.store.Bool(ptr + 1732 + 152 + 32 + 0 + 25, false);

            A.store.Bool(ptr + 1732 + 152 + 32 + 32 + 28, false);
            A.store.Ref(ptr + 1732 + 152 + 32 + 32 + 0, undefined);
            A.store.Ref(ptr + 1732 + 152 + 32 + 32 + 4, undefined);
            A.store.Ref(ptr + 1732 + 152 + 32 + 32 + 8, undefined);
            A.store.Ref(ptr + 1732 + 152 + 32 + 32 + 12, undefined);
            A.store.Ref(ptr + 1732 + 152 + 32 + 32 + 16, undefined);
            A.store.Ref(ptr + 1732 + 152 + 32 + 32 + 20, undefined);
            A.store.Bool(ptr + 1732 + 152 + 32 + 32 + 26, false);
            A.store.Bool(ptr + 1732 + 152 + 32 + 32 + 24, false);
            A.store.Bool(ptr + 1732 + 152 + 32 + 32 + 27, false);
            A.store.Bool(ptr + 1732 + 152 + 32 + 32 + 25, false);

            A.store.Bool(ptr + 1732 + 152 + 32 + 64 + 28, false);
            A.store.Ref(ptr + 1732 + 152 + 32 + 64 + 0, undefined);
            A.store.Ref(ptr + 1732 + 152 + 32 + 64 + 4, undefined);
            A.store.Ref(ptr + 1732 + 152 + 32 + 64 + 8, undefined);
            A.store.Ref(ptr + 1732 + 152 + 32 + 64 + 12, undefined);
            A.store.Ref(ptr + 1732 + 152 + 32 + 64 + 16, undefined);
            A.store.Ref(ptr + 1732 + 152 + 32 + 64 + 20, undefined);
            A.store.Bool(ptr + 1732 + 152 + 32 + 64 + 26, false);
            A.store.Bool(ptr + 1732 + 152 + 32 + 64 + 24, false);
            A.store.Bool(ptr + 1732 + 152 + 32 + 64 + 27, false);
            A.store.Bool(ptr + 1732 + 152 + 32 + 64 + 25, false);

            A.store.Bool(ptr + 1732 + 152 + 32 + 96 + 28, false);
            A.store.Ref(ptr + 1732 + 152 + 32 + 96 + 0, undefined);
            A.store.Ref(ptr + 1732 + 152 + 32 + 96 + 4, undefined);
            A.store.Ref(ptr + 1732 + 152 + 32 + 96 + 8, undefined);
            A.store.Ref(ptr + 1732 + 152 + 32 + 96 + 12, undefined);
            A.store.Ref(ptr + 1732 + 152 + 32 + 96 + 16, undefined);
            A.store.Ref(ptr + 1732 + 152 + 32 + 96 + 20, undefined);
            A.store.Bool(ptr + 1732 + 152 + 32 + 96 + 26, false);
            A.store.Bool(ptr + 1732 + 152 + 32 + 96 + 24, false);
            A.store.Bool(ptr + 1732 + 152 + 32 + 96 + 27, false);
            A.store.Bool(ptr + 1732 + 152 + 32 + 96 + 25, false);

            A.store.Bool(ptr + 1732 + 152 + 160 + 28, false);
            A.store.Ref(ptr + 1732 + 152 + 160 + 0, undefined);
            A.store.Ref(ptr + 1732 + 152 + 160 + 4, undefined);
            A.store.Ref(ptr + 1732 + 152 + 160 + 8, undefined);
            A.store.Ref(ptr + 1732 + 152 + 160 + 12, undefined);
            A.store.Ref(ptr + 1732 + 152 + 160 + 16, undefined);
            A.store.Ref(ptr + 1732 + 152 + 160 + 20, undefined);
            A.store.Bool(ptr + 1732 + 152 + 160 + 26, false);
            A.store.Bool(ptr + 1732 + 152 + 160 + 24, false);
            A.store.Bool(ptr + 1732 + 152 + 160 + 27, false);
            A.store.Bool(ptr + 1732 + 152 + 160 + 25, false);

            A.store.Bool(ptr + 1732 + 152 + 192 + 125, false);

            A.store.Bool(ptr + 1732 + 152 + 192 + 0 + 28, false);
            A.store.Ref(ptr + 1732 + 152 + 192 + 0 + 0, undefined);
            A.store.Ref(ptr + 1732 + 152 + 192 + 0 + 4, undefined);
            A.store.Ref(ptr + 1732 + 152 + 192 + 0 + 8, undefined);
            A.store.Ref(ptr + 1732 + 152 + 192 + 0 + 12, undefined);
            A.store.Ref(ptr + 1732 + 152 + 192 + 0 + 16, undefined);
            A.store.Ref(ptr + 1732 + 152 + 192 + 0 + 20, undefined);
            A.store.Bool(ptr + 1732 + 152 + 192 + 0 + 26, false);
            A.store.Bool(ptr + 1732 + 152 + 192 + 0 + 24, false);
            A.store.Bool(ptr + 1732 + 152 + 192 + 0 + 27, false);
            A.store.Bool(ptr + 1732 + 152 + 192 + 0 + 25, false);

            A.store.Bool(ptr + 1732 + 152 + 192 + 32 + 28, false);
            A.store.Ref(ptr + 1732 + 152 + 192 + 32 + 0, undefined);
            A.store.Ref(ptr + 1732 + 152 + 192 + 32 + 4, undefined);
            A.store.Ref(ptr + 1732 + 152 + 192 + 32 + 8, undefined);
            A.store.Ref(ptr + 1732 + 152 + 192 + 32 + 12, undefined);
            A.store.Ref(ptr + 1732 + 152 + 192 + 32 + 16, undefined);
            A.store.Ref(ptr + 1732 + 152 + 192 + 32 + 20, undefined);
            A.store.Bool(ptr + 1732 + 152 + 192 + 32 + 26, false);
            A.store.Bool(ptr + 1732 + 152 + 192 + 32 + 24, false);
            A.store.Bool(ptr + 1732 + 152 + 192 + 32 + 27, false);
            A.store.Bool(ptr + 1732 + 152 + 192 + 32 + 25, false);

            A.store.Bool(ptr + 1732 + 152 + 192 + 64 + 28, false);
            A.store.Ref(ptr + 1732 + 152 + 192 + 64 + 0, undefined);
            A.store.Ref(ptr + 1732 + 152 + 192 + 64 + 4, undefined);
            A.store.Ref(ptr + 1732 + 152 + 192 + 64 + 8, undefined);
            A.store.Ref(ptr + 1732 + 152 + 192 + 64 + 12, undefined);
            A.store.Ref(ptr + 1732 + 152 + 192 + 64 + 16, undefined);
            A.store.Ref(ptr + 1732 + 152 + 192 + 64 + 20, undefined);
            A.store.Bool(ptr + 1732 + 152 + 192 + 64 + 26, false);
            A.store.Bool(ptr + 1732 + 152 + 192 + 64 + 24, false);
            A.store.Bool(ptr + 1732 + 152 + 192 + 64 + 27, false);
            A.store.Bool(ptr + 1732 + 152 + 192 + 64 + 25, false);

            A.store.Bool(ptr + 1732 + 152 + 192 + 96 + 28, false);
            A.store.Ref(ptr + 1732 + 152 + 192 + 96 + 0, undefined);
            A.store.Ref(ptr + 1732 + 152 + 192 + 96 + 4, undefined);
            A.store.Ref(ptr + 1732 + 152 + 192 + 96 + 8, undefined);
            A.store.Ref(ptr + 1732 + 152 + 192 + 96 + 12, undefined);
            A.store.Ref(ptr + 1732 + 152 + 192 + 96 + 16, undefined);
            A.store.Ref(ptr + 1732 + 152 + 192 + 96 + 20, undefined);
            A.store.Bool(ptr + 1732 + 152 + 192 + 96 + 26, false);
            A.store.Bool(ptr + 1732 + 152 + 192 + 96 + 24, false);
            A.store.Bool(ptr + 1732 + 152 + 192 + 96 + 27, false);
            A.store.Bool(ptr + 1732 + 152 + 192 + 96 + 25, false);
          } else {
            A.store.Bool(ptr + 1732 + 152 + 318, true);

            if (typeof x["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"] === "undefined") {
              A.store.Bool(ptr + 1732 + 152 + 0 + 28, false);
              A.store.Ref(ptr + 1732 + 152 + 0 + 0, undefined);
              A.store.Ref(ptr + 1732 + 152 + 0 + 4, undefined);
              A.store.Ref(ptr + 1732 + 152 + 0 + 8, undefined);
              A.store.Ref(ptr + 1732 + 152 + 0 + 12, undefined);
              A.store.Ref(ptr + 1732 + 152 + 0 + 16, undefined);
              A.store.Ref(ptr + 1732 + 152 + 0 + 20, undefined);
              A.store.Bool(ptr + 1732 + 152 + 0 + 26, false);
              A.store.Bool(ptr + 1732 + 152 + 0 + 24, false);
              A.store.Bool(ptr + 1732 + 152 + 0 + 27, false);
              A.store.Bool(ptr + 1732 + 152 + 0 + 25, false);
            } else {
              A.store.Bool(ptr + 1732 + 152 + 0 + 28, true);
              A.store.Ref(ptr + 1732 + 152 + 0 + 0, x["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]["Active"]);
              A.store.Ref(ptr + 1732 + 152 + 0 + 4, x["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]["Effective"]);
              A.store.Ref(ptr + 1732 + 152 + 0 + 8, x["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]["UserPolicy"]);
              A.store.Ref(
                ptr + 1732 + 152 + 0 + 12,
                x["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]["DevicePolicy"]
              );
              A.store.Ref(ptr + 1732 + 152 + 0 + 16, x["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]["UserSetting"]);
              A.store.Ref(
                ptr + 1732 + 152 + 0 + 20,
                x["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]["SharedSetting"]
              );
              A.store.Bool(
                ptr + 1732 + 152 + 0 + 26,
                "UserEditable" in x["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"] ? true : false
              );
              A.store.Bool(
                ptr + 1732 + 152 + 0 + 24,
                x["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 1732 + 152 + 0 + 27,
                "DeviceEditable" in x["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"] ? true : false
              );
              A.store.Bool(
                ptr + 1732 + 152 + 0 + 25,
                x["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["OpenVPN"]["ClientCertPattern"]["Issuer"] === "undefined") {
              A.store.Bool(ptr + 1732 + 152 + 32 + 125, false);

              A.store.Bool(ptr + 1732 + 152 + 32 + 0 + 28, false);
              A.store.Ref(ptr + 1732 + 152 + 32 + 0 + 0, undefined);
              A.store.Ref(ptr + 1732 + 152 + 32 + 0 + 4, undefined);
              A.store.Ref(ptr + 1732 + 152 + 32 + 0 + 8, undefined);
              A.store.Ref(ptr + 1732 + 152 + 32 + 0 + 12, undefined);
              A.store.Ref(ptr + 1732 + 152 + 32 + 0 + 16, undefined);
              A.store.Ref(ptr + 1732 + 152 + 32 + 0 + 20, undefined);
              A.store.Bool(ptr + 1732 + 152 + 32 + 0 + 26, false);
              A.store.Bool(ptr + 1732 + 152 + 32 + 0 + 24, false);
              A.store.Bool(ptr + 1732 + 152 + 32 + 0 + 27, false);
              A.store.Bool(ptr + 1732 + 152 + 32 + 0 + 25, false);

              A.store.Bool(ptr + 1732 + 152 + 32 + 32 + 28, false);
              A.store.Ref(ptr + 1732 + 152 + 32 + 32 + 0, undefined);
              A.store.Ref(ptr + 1732 + 152 + 32 + 32 + 4, undefined);
              A.store.Ref(ptr + 1732 + 152 + 32 + 32 + 8, undefined);
              A.store.Ref(ptr + 1732 + 152 + 32 + 32 + 12, undefined);
              A.store.Ref(ptr + 1732 + 152 + 32 + 32 + 16, undefined);
              A.store.Ref(ptr + 1732 + 152 + 32 + 32 + 20, undefined);
              A.store.Bool(ptr + 1732 + 152 + 32 + 32 + 26, false);
              A.store.Bool(ptr + 1732 + 152 + 32 + 32 + 24, false);
              A.store.Bool(ptr + 1732 + 152 + 32 + 32 + 27, false);
              A.store.Bool(ptr + 1732 + 152 + 32 + 32 + 25, false);

              A.store.Bool(ptr + 1732 + 152 + 32 + 64 + 28, false);
              A.store.Ref(ptr + 1732 + 152 + 32 + 64 + 0, undefined);
              A.store.Ref(ptr + 1732 + 152 + 32 + 64 + 4, undefined);
              A.store.Ref(ptr + 1732 + 152 + 32 + 64 + 8, undefined);
              A.store.Ref(ptr + 1732 + 152 + 32 + 64 + 12, undefined);
              A.store.Ref(ptr + 1732 + 152 + 32 + 64 + 16, undefined);
              A.store.Ref(ptr + 1732 + 152 + 32 + 64 + 20, undefined);
              A.store.Bool(ptr + 1732 + 152 + 32 + 64 + 26, false);
              A.store.Bool(ptr + 1732 + 152 + 32 + 64 + 24, false);
              A.store.Bool(ptr + 1732 + 152 + 32 + 64 + 27, false);
              A.store.Bool(ptr + 1732 + 152 + 32 + 64 + 25, false);

              A.store.Bool(ptr + 1732 + 152 + 32 + 96 + 28, false);
              A.store.Ref(ptr + 1732 + 152 + 32 + 96 + 0, undefined);
              A.store.Ref(ptr + 1732 + 152 + 32 + 96 + 4, undefined);
              A.store.Ref(ptr + 1732 + 152 + 32 + 96 + 8, undefined);
              A.store.Ref(ptr + 1732 + 152 + 32 + 96 + 12, undefined);
              A.store.Ref(ptr + 1732 + 152 + 32 + 96 + 16, undefined);
              A.store.Ref(ptr + 1732 + 152 + 32 + 96 + 20, undefined);
              A.store.Bool(ptr + 1732 + 152 + 32 + 96 + 26, false);
              A.store.Bool(ptr + 1732 + 152 + 32 + 96 + 24, false);
              A.store.Bool(ptr + 1732 + 152 + 32 + 96 + 27, false);
              A.store.Bool(ptr + 1732 + 152 + 32 + 96 + 25, false);
            } else {
              A.store.Bool(ptr + 1732 + 152 + 32 + 125, true);

              if (typeof x["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"] === "undefined") {
                A.store.Bool(ptr + 1732 + 152 + 32 + 0 + 28, false);
                A.store.Ref(ptr + 1732 + 152 + 32 + 0 + 0, undefined);
                A.store.Ref(ptr + 1732 + 152 + 32 + 0 + 4, undefined);
                A.store.Ref(ptr + 1732 + 152 + 32 + 0 + 8, undefined);
                A.store.Ref(ptr + 1732 + 152 + 32 + 0 + 12, undefined);
                A.store.Ref(ptr + 1732 + 152 + 32 + 0 + 16, undefined);
                A.store.Ref(ptr + 1732 + 152 + 32 + 0 + 20, undefined);
                A.store.Bool(ptr + 1732 + 152 + 32 + 0 + 26, false);
                A.store.Bool(ptr + 1732 + 152 + 32 + 0 + 24, false);
                A.store.Bool(ptr + 1732 + 152 + 32 + 0 + 27, false);
                A.store.Bool(ptr + 1732 + 152 + 32 + 0 + 25, false);
              } else {
                A.store.Bool(ptr + 1732 + 152 + 32 + 0 + 28, true);
                A.store.Ref(
                  ptr + 1732 + 152 + 32 + 0 + 0,
                  x["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]["Active"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 32 + 0 + 4,
                  x["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]["Effective"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 32 + 0 + 8,
                  x["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 32 + 0 + 12,
                  x["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 32 + 0 + 16,
                  x["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 32 + 0 + 20,
                  x["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 1732 + 152 + 32 + 0 + 26,
                  "UserEditable" in x["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"] ? true : false
                );
                A.store.Bool(
                  ptr + 1732 + 152 + 32 + 0 + 24,
                  x["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 1732 + 152 + 32 + 0 + 27,
                  "DeviceEditable" in x["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"] ? true : false
                );
                A.store.Bool(
                  ptr + 1732 + 152 + 32 + 0 + 25,
                  x["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"] === "undefined") {
                A.store.Bool(ptr + 1732 + 152 + 32 + 32 + 28, false);
                A.store.Ref(ptr + 1732 + 152 + 32 + 32 + 0, undefined);
                A.store.Ref(ptr + 1732 + 152 + 32 + 32 + 4, undefined);
                A.store.Ref(ptr + 1732 + 152 + 32 + 32 + 8, undefined);
                A.store.Ref(ptr + 1732 + 152 + 32 + 32 + 12, undefined);
                A.store.Ref(ptr + 1732 + 152 + 32 + 32 + 16, undefined);
                A.store.Ref(ptr + 1732 + 152 + 32 + 32 + 20, undefined);
                A.store.Bool(ptr + 1732 + 152 + 32 + 32 + 26, false);
                A.store.Bool(ptr + 1732 + 152 + 32 + 32 + 24, false);
                A.store.Bool(ptr + 1732 + 152 + 32 + 32 + 27, false);
                A.store.Bool(ptr + 1732 + 152 + 32 + 32 + 25, false);
              } else {
                A.store.Bool(ptr + 1732 + 152 + 32 + 32 + 28, true);
                A.store.Ref(
                  ptr + 1732 + 152 + 32 + 32 + 0,
                  x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]["Active"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 32 + 32 + 4,
                  x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]["Effective"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 32 + 32 + 8,
                  x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 32 + 32 + 12,
                  x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 32 + 32 + 16,
                  x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 32 + 32 + 20,
                  x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 1732 + 152 + 32 + 32 + 26,
                  "UserEditable" in x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"] ? true : false
                );
                A.store.Bool(
                  ptr + 1732 + 152 + 32 + 32 + 24,
                  x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 1732 + 152 + 32 + 32 + 27,
                  "DeviceEditable" in x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"] ? true : false
                );
                A.store.Bool(
                  ptr + 1732 + 152 + 32 + 32 + 25,
                  x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"] === "undefined") {
                A.store.Bool(ptr + 1732 + 152 + 32 + 64 + 28, false);
                A.store.Ref(ptr + 1732 + 152 + 32 + 64 + 0, undefined);
                A.store.Ref(ptr + 1732 + 152 + 32 + 64 + 4, undefined);
                A.store.Ref(ptr + 1732 + 152 + 32 + 64 + 8, undefined);
                A.store.Ref(ptr + 1732 + 152 + 32 + 64 + 12, undefined);
                A.store.Ref(ptr + 1732 + 152 + 32 + 64 + 16, undefined);
                A.store.Ref(ptr + 1732 + 152 + 32 + 64 + 20, undefined);
                A.store.Bool(ptr + 1732 + 152 + 32 + 64 + 26, false);
                A.store.Bool(ptr + 1732 + 152 + 32 + 64 + 24, false);
                A.store.Bool(ptr + 1732 + 152 + 32 + 64 + 27, false);
                A.store.Bool(ptr + 1732 + 152 + 32 + 64 + 25, false);
              } else {
                A.store.Bool(ptr + 1732 + 152 + 32 + 64 + 28, true);
                A.store.Ref(
                  ptr + 1732 + 152 + 32 + 64 + 0,
                  x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]["Active"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 32 + 64 + 4,
                  x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]["Effective"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 32 + 64 + 8,
                  x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 32 + 64 + 12,
                  x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 32 + 64 + 16,
                  x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 32 + 64 + 20,
                  x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 1732 + 152 + 32 + 64 + 26,
                  "UserEditable" in x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"] ? true : false
                );
                A.store.Bool(
                  ptr + 1732 + 152 + 32 + 64 + 24,
                  x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 1732 + 152 + 32 + 64 + 27,
                  "DeviceEditable" in x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"] ? true : false
                );
                A.store.Bool(
                  ptr + 1732 + 152 + 32 + 64 + 25,
                  x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] === "undefined") {
                A.store.Bool(ptr + 1732 + 152 + 32 + 96 + 28, false);
                A.store.Ref(ptr + 1732 + 152 + 32 + 96 + 0, undefined);
                A.store.Ref(ptr + 1732 + 152 + 32 + 96 + 4, undefined);
                A.store.Ref(ptr + 1732 + 152 + 32 + 96 + 8, undefined);
                A.store.Ref(ptr + 1732 + 152 + 32 + 96 + 12, undefined);
                A.store.Ref(ptr + 1732 + 152 + 32 + 96 + 16, undefined);
                A.store.Ref(ptr + 1732 + 152 + 32 + 96 + 20, undefined);
                A.store.Bool(ptr + 1732 + 152 + 32 + 96 + 26, false);
                A.store.Bool(ptr + 1732 + 152 + 32 + 96 + 24, false);
                A.store.Bool(ptr + 1732 + 152 + 32 + 96 + 27, false);
                A.store.Bool(ptr + 1732 + 152 + 32 + 96 + 25, false);
              } else {
                A.store.Bool(ptr + 1732 + 152 + 32 + 96 + 28, true);
                A.store.Ref(
                  ptr + 1732 + 152 + 32 + 96 + 0,
                  x["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Active"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 32 + 96 + 4,
                  x["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Effective"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 32 + 96 + 8,
                  x["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 32 + 96 + 12,
                  x["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 32 + 96 + 16,
                  x["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 32 + 96 + 20,
                  x["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 1732 + 152 + 32 + 96 + 26,
                  "UserEditable" in x["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] ? true : false
                );
                A.store.Bool(
                  ptr + 1732 + 152 + 32 + 96 + 24,
                  x["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 1732 + 152 + 32 + 96 + 27,
                  "DeviceEditable" in x["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] ? true : false
                );
                A.store.Bool(
                  ptr + 1732 + 152 + 32 + 96 + 25,
                  x["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"] ? true : false
                );
              }
            }

            if (typeof x["OpenVPN"]["ClientCertPattern"]["IssuerCARef"] === "undefined") {
              A.store.Bool(ptr + 1732 + 152 + 160 + 28, false);
              A.store.Ref(ptr + 1732 + 152 + 160 + 0, undefined);
              A.store.Ref(ptr + 1732 + 152 + 160 + 4, undefined);
              A.store.Ref(ptr + 1732 + 152 + 160 + 8, undefined);
              A.store.Ref(ptr + 1732 + 152 + 160 + 12, undefined);
              A.store.Ref(ptr + 1732 + 152 + 160 + 16, undefined);
              A.store.Ref(ptr + 1732 + 152 + 160 + 20, undefined);
              A.store.Bool(ptr + 1732 + 152 + 160 + 26, false);
              A.store.Bool(ptr + 1732 + 152 + 160 + 24, false);
              A.store.Bool(ptr + 1732 + 152 + 160 + 27, false);
              A.store.Bool(ptr + 1732 + 152 + 160 + 25, false);
            } else {
              A.store.Bool(ptr + 1732 + 152 + 160 + 28, true);
              A.store.Ref(ptr + 1732 + 152 + 160 + 0, x["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]["Active"]);
              A.store.Ref(ptr + 1732 + 152 + 160 + 4, x["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]["Effective"]);
              A.store.Ref(ptr + 1732 + 152 + 160 + 8, x["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]["UserPolicy"]);
              A.store.Ref(
                ptr + 1732 + 152 + 160 + 12,
                x["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]["DevicePolicy"]
              );
              A.store.Ref(ptr + 1732 + 152 + 160 + 16, x["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]["UserSetting"]);
              A.store.Ref(
                ptr + 1732 + 152 + 160 + 20,
                x["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]["SharedSetting"]
              );
              A.store.Bool(
                ptr + 1732 + 152 + 160 + 26,
                "UserEditable" in x["OpenVPN"]["ClientCertPattern"]["IssuerCARef"] ? true : false
              );
              A.store.Bool(
                ptr + 1732 + 152 + 160 + 24,
                x["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 1732 + 152 + 160 + 27,
                "DeviceEditable" in x["OpenVPN"]["ClientCertPattern"]["IssuerCARef"] ? true : false
              );
              A.store.Bool(
                ptr + 1732 + 152 + 160 + 25,
                x["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["OpenVPN"]["ClientCertPattern"]["Subject"] === "undefined") {
              A.store.Bool(ptr + 1732 + 152 + 192 + 125, false);

              A.store.Bool(ptr + 1732 + 152 + 192 + 0 + 28, false);
              A.store.Ref(ptr + 1732 + 152 + 192 + 0 + 0, undefined);
              A.store.Ref(ptr + 1732 + 152 + 192 + 0 + 4, undefined);
              A.store.Ref(ptr + 1732 + 152 + 192 + 0 + 8, undefined);
              A.store.Ref(ptr + 1732 + 152 + 192 + 0 + 12, undefined);
              A.store.Ref(ptr + 1732 + 152 + 192 + 0 + 16, undefined);
              A.store.Ref(ptr + 1732 + 152 + 192 + 0 + 20, undefined);
              A.store.Bool(ptr + 1732 + 152 + 192 + 0 + 26, false);
              A.store.Bool(ptr + 1732 + 152 + 192 + 0 + 24, false);
              A.store.Bool(ptr + 1732 + 152 + 192 + 0 + 27, false);
              A.store.Bool(ptr + 1732 + 152 + 192 + 0 + 25, false);

              A.store.Bool(ptr + 1732 + 152 + 192 + 32 + 28, false);
              A.store.Ref(ptr + 1732 + 152 + 192 + 32 + 0, undefined);
              A.store.Ref(ptr + 1732 + 152 + 192 + 32 + 4, undefined);
              A.store.Ref(ptr + 1732 + 152 + 192 + 32 + 8, undefined);
              A.store.Ref(ptr + 1732 + 152 + 192 + 32 + 12, undefined);
              A.store.Ref(ptr + 1732 + 152 + 192 + 32 + 16, undefined);
              A.store.Ref(ptr + 1732 + 152 + 192 + 32 + 20, undefined);
              A.store.Bool(ptr + 1732 + 152 + 192 + 32 + 26, false);
              A.store.Bool(ptr + 1732 + 152 + 192 + 32 + 24, false);
              A.store.Bool(ptr + 1732 + 152 + 192 + 32 + 27, false);
              A.store.Bool(ptr + 1732 + 152 + 192 + 32 + 25, false);

              A.store.Bool(ptr + 1732 + 152 + 192 + 64 + 28, false);
              A.store.Ref(ptr + 1732 + 152 + 192 + 64 + 0, undefined);
              A.store.Ref(ptr + 1732 + 152 + 192 + 64 + 4, undefined);
              A.store.Ref(ptr + 1732 + 152 + 192 + 64 + 8, undefined);
              A.store.Ref(ptr + 1732 + 152 + 192 + 64 + 12, undefined);
              A.store.Ref(ptr + 1732 + 152 + 192 + 64 + 16, undefined);
              A.store.Ref(ptr + 1732 + 152 + 192 + 64 + 20, undefined);
              A.store.Bool(ptr + 1732 + 152 + 192 + 64 + 26, false);
              A.store.Bool(ptr + 1732 + 152 + 192 + 64 + 24, false);
              A.store.Bool(ptr + 1732 + 152 + 192 + 64 + 27, false);
              A.store.Bool(ptr + 1732 + 152 + 192 + 64 + 25, false);

              A.store.Bool(ptr + 1732 + 152 + 192 + 96 + 28, false);
              A.store.Ref(ptr + 1732 + 152 + 192 + 96 + 0, undefined);
              A.store.Ref(ptr + 1732 + 152 + 192 + 96 + 4, undefined);
              A.store.Ref(ptr + 1732 + 152 + 192 + 96 + 8, undefined);
              A.store.Ref(ptr + 1732 + 152 + 192 + 96 + 12, undefined);
              A.store.Ref(ptr + 1732 + 152 + 192 + 96 + 16, undefined);
              A.store.Ref(ptr + 1732 + 152 + 192 + 96 + 20, undefined);
              A.store.Bool(ptr + 1732 + 152 + 192 + 96 + 26, false);
              A.store.Bool(ptr + 1732 + 152 + 192 + 96 + 24, false);
              A.store.Bool(ptr + 1732 + 152 + 192 + 96 + 27, false);
              A.store.Bool(ptr + 1732 + 152 + 192 + 96 + 25, false);
            } else {
              A.store.Bool(ptr + 1732 + 152 + 192 + 125, true);

              if (typeof x["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"] === "undefined") {
                A.store.Bool(ptr + 1732 + 152 + 192 + 0 + 28, false);
                A.store.Ref(ptr + 1732 + 152 + 192 + 0 + 0, undefined);
                A.store.Ref(ptr + 1732 + 152 + 192 + 0 + 4, undefined);
                A.store.Ref(ptr + 1732 + 152 + 192 + 0 + 8, undefined);
                A.store.Ref(ptr + 1732 + 152 + 192 + 0 + 12, undefined);
                A.store.Ref(ptr + 1732 + 152 + 192 + 0 + 16, undefined);
                A.store.Ref(ptr + 1732 + 152 + 192 + 0 + 20, undefined);
                A.store.Bool(ptr + 1732 + 152 + 192 + 0 + 26, false);
                A.store.Bool(ptr + 1732 + 152 + 192 + 0 + 24, false);
                A.store.Bool(ptr + 1732 + 152 + 192 + 0 + 27, false);
                A.store.Bool(ptr + 1732 + 152 + 192 + 0 + 25, false);
              } else {
                A.store.Bool(ptr + 1732 + 152 + 192 + 0 + 28, true);
                A.store.Ref(
                  ptr + 1732 + 152 + 192 + 0 + 0,
                  x["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]["Active"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 192 + 0 + 4,
                  x["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]["Effective"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 192 + 0 + 8,
                  x["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 192 + 0 + 12,
                  x["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 192 + 0 + 16,
                  x["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 192 + 0 + 20,
                  x["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 1732 + 152 + 192 + 0 + 26,
                  "UserEditable" in x["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"] ? true : false
                );
                A.store.Bool(
                  ptr + 1732 + 152 + 192 + 0 + 24,
                  x["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 1732 + 152 + 192 + 0 + 27,
                  "DeviceEditable" in x["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"] ? true : false
                );
                A.store.Bool(
                  ptr + 1732 + 152 + 192 + 0 + 25,
                  x["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"] === "undefined") {
                A.store.Bool(ptr + 1732 + 152 + 192 + 32 + 28, false);
                A.store.Ref(ptr + 1732 + 152 + 192 + 32 + 0, undefined);
                A.store.Ref(ptr + 1732 + 152 + 192 + 32 + 4, undefined);
                A.store.Ref(ptr + 1732 + 152 + 192 + 32 + 8, undefined);
                A.store.Ref(ptr + 1732 + 152 + 192 + 32 + 12, undefined);
                A.store.Ref(ptr + 1732 + 152 + 192 + 32 + 16, undefined);
                A.store.Ref(ptr + 1732 + 152 + 192 + 32 + 20, undefined);
                A.store.Bool(ptr + 1732 + 152 + 192 + 32 + 26, false);
                A.store.Bool(ptr + 1732 + 152 + 192 + 32 + 24, false);
                A.store.Bool(ptr + 1732 + 152 + 192 + 32 + 27, false);
                A.store.Bool(ptr + 1732 + 152 + 192 + 32 + 25, false);
              } else {
                A.store.Bool(ptr + 1732 + 152 + 192 + 32 + 28, true);
                A.store.Ref(
                  ptr + 1732 + 152 + 192 + 32 + 0,
                  x["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]["Active"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 192 + 32 + 4,
                  x["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]["Effective"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 192 + 32 + 8,
                  x["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 192 + 32 + 12,
                  x["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 192 + 32 + 16,
                  x["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 192 + 32 + 20,
                  x["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 1732 + 152 + 192 + 32 + 26,
                  "UserEditable" in x["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"] ? true : false
                );
                A.store.Bool(
                  ptr + 1732 + 152 + 192 + 32 + 24,
                  x["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 1732 + 152 + 192 + 32 + 27,
                  "DeviceEditable" in x["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"] ? true : false
                );
                A.store.Bool(
                  ptr + 1732 + 152 + 192 + 32 + 25,
                  x["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"] === "undefined") {
                A.store.Bool(ptr + 1732 + 152 + 192 + 64 + 28, false);
                A.store.Ref(ptr + 1732 + 152 + 192 + 64 + 0, undefined);
                A.store.Ref(ptr + 1732 + 152 + 192 + 64 + 4, undefined);
                A.store.Ref(ptr + 1732 + 152 + 192 + 64 + 8, undefined);
                A.store.Ref(ptr + 1732 + 152 + 192 + 64 + 12, undefined);
                A.store.Ref(ptr + 1732 + 152 + 192 + 64 + 16, undefined);
                A.store.Ref(ptr + 1732 + 152 + 192 + 64 + 20, undefined);
                A.store.Bool(ptr + 1732 + 152 + 192 + 64 + 26, false);
                A.store.Bool(ptr + 1732 + 152 + 192 + 64 + 24, false);
                A.store.Bool(ptr + 1732 + 152 + 192 + 64 + 27, false);
                A.store.Bool(ptr + 1732 + 152 + 192 + 64 + 25, false);
              } else {
                A.store.Bool(ptr + 1732 + 152 + 192 + 64 + 28, true);
                A.store.Ref(
                  ptr + 1732 + 152 + 192 + 64 + 0,
                  x["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]["Active"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 192 + 64 + 4,
                  x["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]["Effective"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 192 + 64 + 8,
                  x["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 192 + 64 + 12,
                  x["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 192 + 64 + 16,
                  x["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 192 + 64 + 20,
                  x["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 1732 + 152 + 192 + 64 + 26,
                  "UserEditable" in x["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"] ? true : false
                );
                A.store.Bool(
                  ptr + 1732 + 152 + 192 + 64 + 24,
                  x["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 1732 + 152 + 192 + 64 + 27,
                  "DeviceEditable" in x["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"] ? true : false
                );
                A.store.Bool(
                  ptr + 1732 + 152 + 192 + 64 + 25,
                  x["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] === "undefined") {
                A.store.Bool(ptr + 1732 + 152 + 192 + 96 + 28, false);
                A.store.Ref(ptr + 1732 + 152 + 192 + 96 + 0, undefined);
                A.store.Ref(ptr + 1732 + 152 + 192 + 96 + 4, undefined);
                A.store.Ref(ptr + 1732 + 152 + 192 + 96 + 8, undefined);
                A.store.Ref(ptr + 1732 + 152 + 192 + 96 + 12, undefined);
                A.store.Ref(ptr + 1732 + 152 + 192 + 96 + 16, undefined);
                A.store.Ref(ptr + 1732 + 152 + 192 + 96 + 20, undefined);
                A.store.Bool(ptr + 1732 + 152 + 192 + 96 + 26, false);
                A.store.Bool(ptr + 1732 + 152 + 192 + 96 + 24, false);
                A.store.Bool(ptr + 1732 + 152 + 192 + 96 + 27, false);
                A.store.Bool(ptr + 1732 + 152 + 192 + 96 + 25, false);
              } else {
                A.store.Bool(ptr + 1732 + 152 + 192 + 96 + 28, true);
                A.store.Ref(
                  ptr + 1732 + 152 + 192 + 96 + 0,
                  x["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Active"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 192 + 96 + 4,
                  x["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Effective"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 192 + 96 + 8,
                  x["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 192 + 96 + 12,
                  x["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 192 + 96 + 16,
                  x["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 1732 + 152 + 192 + 96 + 20,
                  x["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 1732 + 152 + 192 + 96 + 26,
                  "UserEditable" in x["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] ? true : false
                );
                A.store.Bool(
                  ptr + 1732 + 152 + 192 + 96 + 24,
                  x["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 1732 + 152 + 192 + 96 + 27,
                  "DeviceEditable" in x["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] ? true : false
                );
                A.store.Bool(
                  ptr + 1732 + 152 + 192 + 96 + 25,
                  x["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"] ? true : false
                );
              }
            }
          }

          if (typeof x["OpenVPN"]["ClientCertProvisioningProfileId"] === "undefined") {
            A.store.Bool(ptr + 1732 + 472 + 28, false);
            A.store.Ref(ptr + 1732 + 472 + 0, undefined);
            A.store.Ref(ptr + 1732 + 472 + 4, undefined);
            A.store.Ref(ptr + 1732 + 472 + 8, undefined);
            A.store.Ref(ptr + 1732 + 472 + 12, undefined);
            A.store.Ref(ptr + 1732 + 472 + 16, undefined);
            A.store.Ref(ptr + 1732 + 472 + 20, undefined);
            A.store.Bool(ptr + 1732 + 472 + 26, false);
            A.store.Bool(ptr + 1732 + 472 + 24, false);
            A.store.Bool(ptr + 1732 + 472 + 27, false);
            A.store.Bool(ptr + 1732 + 472 + 25, false);
          } else {
            A.store.Bool(ptr + 1732 + 472 + 28, true);
            A.store.Ref(ptr + 1732 + 472 + 0, x["OpenVPN"]["ClientCertProvisioningProfileId"]["Active"]);
            A.store.Ref(ptr + 1732 + 472 + 4, x["OpenVPN"]["ClientCertProvisioningProfileId"]["Effective"]);
            A.store.Ref(ptr + 1732 + 472 + 8, x["OpenVPN"]["ClientCertProvisioningProfileId"]["UserPolicy"]);
            A.store.Ref(ptr + 1732 + 472 + 12, x["OpenVPN"]["ClientCertProvisioningProfileId"]["DevicePolicy"]);
            A.store.Ref(ptr + 1732 + 472 + 16, x["OpenVPN"]["ClientCertProvisioningProfileId"]["UserSetting"]);
            A.store.Ref(ptr + 1732 + 472 + 20, x["OpenVPN"]["ClientCertProvisioningProfileId"]["SharedSetting"]);
            A.store.Bool(
              ptr + 1732 + 472 + 26,
              "UserEditable" in x["OpenVPN"]["ClientCertProvisioningProfileId"] ? true : false
            );
            A.store.Bool(
              ptr + 1732 + 472 + 24,
              x["OpenVPN"]["ClientCertProvisioningProfileId"]["UserEditable"] ? true : false
            );
            A.store.Bool(
              ptr + 1732 + 472 + 27,
              "DeviceEditable" in x["OpenVPN"]["ClientCertProvisioningProfileId"] ? true : false
            );
            A.store.Bool(
              ptr + 1732 + 472 + 25,
              x["OpenVPN"]["ClientCertProvisioningProfileId"]["DeviceEditable"] ? true : false
            );
          }

          if (typeof x["OpenVPN"]["ClientCertRef"] === "undefined") {
            A.store.Bool(ptr + 1732 + 504 + 28, false);
            A.store.Ref(ptr + 1732 + 504 + 0, undefined);
            A.store.Ref(ptr + 1732 + 504 + 4, undefined);
            A.store.Ref(ptr + 1732 + 504 + 8, undefined);
            A.store.Ref(ptr + 1732 + 504 + 12, undefined);
            A.store.Ref(ptr + 1732 + 504 + 16, undefined);
            A.store.Ref(ptr + 1732 + 504 + 20, undefined);
            A.store.Bool(ptr + 1732 + 504 + 26, false);
            A.store.Bool(ptr + 1732 + 504 + 24, false);
            A.store.Bool(ptr + 1732 + 504 + 27, false);
            A.store.Bool(ptr + 1732 + 504 + 25, false);
          } else {
            A.store.Bool(ptr + 1732 + 504 + 28, true);
            A.store.Ref(ptr + 1732 + 504 + 0, x["OpenVPN"]["ClientCertRef"]["Active"]);
            A.store.Ref(ptr + 1732 + 504 + 4, x["OpenVPN"]["ClientCertRef"]["Effective"]);
            A.store.Ref(ptr + 1732 + 504 + 8, x["OpenVPN"]["ClientCertRef"]["UserPolicy"]);
            A.store.Ref(ptr + 1732 + 504 + 12, x["OpenVPN"]["ClientCertRef"]["DevicePolicy"]);
            A.store.Ref(ptr + 1732 + 504 + 16, x["OpenVPN"]["ClientCertRef"]["UserSetting"]);
            A.store.Ref(ptr + 1732 + 504 + 20, x["OpenVPN"]["ClientCertRef"]["SharedSetting"]);
            A.store.Bool(ptr + 1732 + 504 + 26, "UserEditable" in x["OpenVPN"]["ClientCertRef"] ? true : false);
            A.store.Bool(ptr + 1732 + 504 + 24, x["OpenVPN"]["ClientCertRef"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1732 + 504 + 27, "DeviceEditable" in x["OpenVPN"]["ClientCertRef"] ? true : false);
            A.store.Bool(ptr + 1732 + 504 + 25, x["OpenVPN"]["ClientCertRef"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["OpenVPN"]["ClientCertType"] === "undefined") {
            A.store.Bool(ptr + 1732 + 536 + 28, false);
            A.store.Ref(ptr + 1732 + 536 + 0, undefined);
            A.store.Ref(ptr + 1732 + 536 + 4, undefined);
            A.store.Ref(ptr + 1732 + 536 + 8, undefined);
            A.store.Ref(ptr + 1732 + 536 + 12, undefined);
            A.store.Ref(ptr + 1732 + 536 + 16, undefined);
            A.store.Ref(ptr + 1732 + 536 + 20, undefined);
            A.store.Bool(ptr + 1732 + 536 + 26, false);
            A.store.Bool(ptr + 1732 + 536 + 24, false);
            A.store.Bool(ptr + 1732 + 536 + 27, false);
            A.store.Bool(ptr + 1732 + 536 + 25, false);
          } else {
            A.store.Bool(ptr + 1732 + 536 + 28, true);
            A.store.Ref(ptr + 1732 + 536 + 0, x["OpenVPN"]["ClientCertType"]["Active"]);
            A.store.Ref(ptr + 1732 + 536 + 4, x["OpenVPN"]["ClientCertType"]["Effective"]);
            A.store.Ref(ptr + 1732 + 536 + 8, x["OpenVPN"]["ClientCertType"]["UserPolicy"]);
            A.store.Ref(ptr + 1732 + 536 + 12, x["OpenVPN"]["ClientCertType"]["DevicePolicy"]);
            A.store.Ref(ptr + 1732 + 536 + 16, x["OpenVPN"]["ClientCertType"]["UserSetting"]);
            A.store.Ref(ptr + 1732 + 536 + 20, x["OpenVPN"]["ClientCertType"]["SharedSetting"]);
            A.store.Bool(ptr + 1732 + 536 + 26, "UserEditable" in x["OpenVPN"]["ClientCertType"] ? true : false);
            A.store.Bool(ptr + 1732 + 536 + 24, x["OpenVPN"]["ClientCertType"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1732 + 536 + 27, "DeviceEditable" in x["OpenVPN"]["ClientCertType"] ? true : false);
            A.store.Bool(ptr + 1732 + 536 + 25, x["OpenVPN"]["ClientCertType"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["OpenVPN"]["CompLZO"] === "undefined") {
            A.store.Bool(ptr + 1732 + 568 + 28, false);
            A.store.Ref(ptr + 1732 + 568 + 0, undefined);
            A.store.Ref(ptr + 1732 + 568 + 4, undefined);
            A.store.Ref(ptr + 1732 + 568 + 8, undefined);
            A.store.Ref(ptr + 1732 + 568 + 12, undefined);
            A.store.Ref(ptr + 1732 + 568 + 16, undefined);
            A.store.Ref(ptr + 1732 + 568 + 20, undefined);
            A.store.Bool(ptr + 1732 + 568 + 26, false);
            A.store.Bool(ptr + 1732 + 568 + 24, false);
            A.store.Bool(ptr + 1732 + 568 + 27, false);
            A.store.Bool(ptr + 1732 + 568 + 25, false);
          } else {
            A.store.Bool(ptr + 1732 + 568 + 28, true);
            A.store.Ref(ptr + 1732 + 568 + 0, x["OpenVPN"]["CompLZO"]["Active"]);
            A.store.Ref(ptr + 1732 + 568 + 4, x["OpenVPN"]["CompLZO"]["Effective"]);
            A.store.Ref(ptr + 1732 + 568 + 8, x["OpenVPN"]["CompLZO"]["UserPolicy"]);
            A.store.Ref(ptr + 1732 + 568 + 12, x["OpenVPN"]["CompLZO"]["DevicePolicy"]);
            A.store.Ref(ptr + 1732 + 568 + 16, x["OpenVPN"]["CompLZO"]["UserSetting"]);
            A.store.Ref(ptr + 1732 + 568 + 20, x["OpenVPN"]["CompLZO"]["SharedSetting"]);
            A.store.Bool(ptr + 1732 + 568 + 26, "UserEditable" in x["OpenVPN"]["CompLZO"] ? true : false);
            A.store.Bool(ptr + 1732 + 568 + 24, x["OpenVPN"]["CompLZO"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1732 + 568 + 27, "DeviceEditable" in x["OpenVPN"]["CompLZO"] ? true : false);
            A.store.Bool(ptr + 1732 + 568 + 25, x["OpenVPN"]["CompLZO"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["OpenVPN"]["CompNoAdapt"] === "undefined") {
            A.store.Bool(ptr + 1732 + 600 + 21, false);
            A.store.Bool(ptr + 1732 + 600 + 14, false);
            A.store.Bool(ptr + 1732 + 600 + 0, false);
            A.store.Ref(ptr + 1732 + 600 + 4, undefined);
            A.store.Bool(ptr + 1732 + 600 + 15, false);
            A.store.Bool(ptr + 1732 + 600 + 8, false);
            A.store.Bool(ptr + 1732 + 600 + 16, false);
            A.store.Bool(ptr + 1732 + 600 + 9, false);
            A.store.Bool(ptr + 1732 + 600 + 17, false);
            A.store.Bool(ptr + 1732 + 600 + 10, false);
            A.store.Bool(ptr + 1732 + 600 + 18, false);
            A.store.Bool(ptr + 1732 + 600 + 11, false);
            A.store.Bool(ptr + 1732 + 600 + 19, false);
            A.store.Bool(ptr + 1732 + 600 + 12, false);
            A.store.Bool(ptr + 1732 + 600 + 20, false);
            A.store.Bool(ptr + 1732 + 600 + 13, false);
          } else {
            A.store.Bool(ptr + 1732 + 600 + 21, true);
            A.store.Bool(ptr + 1732 + 600 + 14, "Active" in x["OpenVPN"]["CompNoAdapt"] ? true : false);
            A.store.Bool(ptr + 1732 + 600 + 0, x["OpenVPN"]["CompNoAdapt"]["Active"] ? true : false);
            A.store.Ref(ptr + 1732 + 600 + 4, x["OpenVPN"]["CompNoAdapt"]["Effective"]);
            A.store.Bool(ptr + 1732 + 600 + 15, "UserPolicy" in x["OpenVPN"]["CompNoAdapt"] ? true : false);
            A.store.Bool(ptr + 1732 + 600 + 8, x["OpenVPN"]["CompNoAdapt"]["UserPolicy"] ? true : false);
            A.store.Bool(ptr + 1732 + 600 + 16, "DevicePolicy" in x["OpenVPN"]["CompNoAdapt"] ? true : false);
            A.store.Bool(ptr + 1732 + 600 + 9, x["OpenVPN"]["CompNoAdapt"]["DevicePolicy"] ? true : false);
            A.store.Bool(ptr + 1732 + 600 + 17, "UserSetting" in x["OpenVPN"]["CompNoAdapt"] ? true : false);
            A.store.Bool(ptr + 1732 + 600 + 10, x["OpenVPN"]["CompNoAdapt"]["UserSetting"] ? true : false);
            A.store.Bool(ptr + 1732 + 600 + 18, "SharedSetting" in x["OpenVPN"]["CompNoAdapt"] ? true : false);
            A.store.Bool(ptr + 1732 + 600 + 11, x["OpenVPN"]["CompNoAdapt"]["SharedSetting"] ? true : false);
            A.store.Bool(ptr + 1732 + 600 + 19, "UserEditable" in x["OpenVPN"]["CompNoAdapt"] ? true : false);
            A.store.Bool(ptr + 1732 + 600 + 12, x["OpenVPN"]["CompNoAdapt"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1732 + 600 + 20, "DeviceEditable" in x["OpenVPN"]["CompNoAdapt"] ? true : false);
            A.store.Bool(ptr + 1732 + 600 + 13, x["OpenVPN"]["CompNoAdapt"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["OpenVPN"]["ExtraHosts"] === "undefined") {
            A.store.Bool(ptr + 1732 + 624 + 28, false);
            A.store.Ref(ptr + 1732 + 624 + 0, undefined);
            A.store.Ref(ptr + 1732 + 624 + 4, undefined);
            A.store.Ref(ptr + 1732 + 624 + 8, undefined);
            A.store.Ref(ptr + 1732 + 624 + 12, undefined);
            A.store.Ref(ptr + 1732 + 624 + 16, undefined);
            A.store.Ref(ptr + 1732 + 624 + 20, undefined);
            A.store.Bool(ptr + 1732 + 624 + 26, false);
            A.store.Bool(ptr + 1732 + 624 + 24, false);
            A.store.Bool(ptr + 1732 + 624 + 27, false);
            A.store.Bool(ptr + 1732 + 624 + 25, false);
          } else {
            A.store.Bool(ptr + 1732 + 624 + 28, true);
            A.store.Ref(ptr + 1732 + 624 + 0, x["OpenVPN"]["ExtraHosts"]["Active"]);
            A.store.Ref(ptr + 1732 + 624 + 4, x["OpenVPN"]["ExtraHosts"]["Effective"]);
            A.store.Ref(ptr + 1732 + 624 + 8, x["OpenVPN"]["ExtraHosts"]["UserPolicy"]);
            A.store.Ref(ptr + 1732 + 624 + 12, x["OpenVPN"]["ExtraHosts"]["DevicePolicy"]);
            A.store.Ref(ptr + 1732 + 624 + 16, x["OpenVPN"]["ExtraHosts"]["UserSetting"]);
            A.store.Ref(ptr + 1732 + 624 + 20, x["OpenVPN"]["ExtraHosts"]["SharedSetting"]);
            A.store.Bool(ptr + 1732 + 624 + 26, "UserEditable" in x["OpenVPN"]["ExtraHosts"] ? true : false);
            A.store.Bool(ptr + 1732 + 624 + 24, x["OpenVPN"]["ExtraHosts"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1732 + 624 + 27, "DeviceEditable" in x["OpenVPN"]["ExtraHosts"] ? true : false);
            A.store.Bool(ptr + 1732 + 624 + 25, x["OpenVPN"]["ExtraHosts"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["OpenVPN"]["IgnoreDefaultRoute"] === "undefined") {
            A.store.Bool(ptr + 1732 + 656 + 21, false);
            A.store.Bool(ptr + 1732 + 656 + 14, false);
            A.store.Bool(ptr + 1732 + 656 + 0, false);
            A.store.Ref(ptr + 1732 + 656 + 4, undefined);
            A.store.Bool(ptr + 1732 + 656 + 15, false);
            A.store.Bool(ptr + 1732 + 656 + 8, false);
            A.store.Bool(ptr + 1732 + 656 + 16, false);
            A.store.Bool(ptr + 1732 + 656 + 9, false);
            A.store.Bool(ptr + 1732 + 656 + 17, false);
            A.store.Bool(ptr + 1732 + 656 + 10, false);
            A.store.Bool(ptr + 1732 + 656 + 18, false);
            A.store.Bool(ptr + 1732 + 656 + 11, false);
            A.store.Bool(ptr + 1732 + 656 + 19, false);
            A.store.Bool(ptr + 1732 + 656 + 12, false);
            A.store.Bool(ptr + 1732 + 656 + 20, false);
            A.store.Bool(ptr + 1732 + 656 + 13, false);
          } else {
            A.store.Bool(ptr + 1732 + 656 + 21, true);
            A.store.Bool(ptr + 1732 + 656 + 14, "Active" in x["OpenVPN"]["IgnoreDefaultRoute"] ? true : false);
            A.store.Bool(ptr + 1732 + 656 + 0, x["OpenVPN"]["IgnoreDefaultRoute"]["Active"] ? true : false);
            A.store.Ref(ptr + 1732 + 656 + 4, x["OpenVPN"]["IgnoreDefaultRoute"]["Effective"]);
            A.store.Bool(ptr + 1732 + 656 + 15, "UserPolicy" in x["OpenVPN"]["IgnoreDefaultRoute"] ? true : false);
            A.store.Bool(ptr + 1732 + 656 + 8, x["OpenVPN"]["IgnoreDefaultRoute"]["UserPolicy"] ? true : false);
            A.store.Bool(ptr + 1732 + 656 + 16, "DevicePolicy" in x["OpenVPN"]["IgnoreDefaultRoute"] ? true : false);
            A.store.Bool(ptr + 1732 + 656 + 9, x["OpenVPN"]["IgnoreDefaultRoute"]["DevicePolicy"] ? true : false);
            A.store.Bool(ptr + 1732 + 656 + 17, "UserSetting" in x["OpenVPN"]["IgnoreDefaultRoute"] ? true : false);
            A.store.Bool(ptr + 1732 + 656 + 10, x["OpenVPN"]["IgnoreDefaultRoute"]["UserSetting"] ? true : false);
            A.store.Bool(ptr + 1732 + 656 + 18, "SharedSetting" in x["OpenVPN"]["IgnoreDefaultRoute"] ? true : false);
            A.store.Bool(ptr + 1732 + 656 + 11, x["OpenVPN"]["IgnoreDefaultRoute"]["SharedSetting"] ? true : false);
            A.store.Bool(ptr + 1732 + 656 + 19, "UserEditable" in x["OpenVPN"]["IgnoreDefaultRoute"] ? true : false);
            A.store.Bool(ptr + 1732 + 656 + 12, x["OpenVPN"]["IgnoreDefaultRoute"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1732 + 656 + 20, "DeviceEditable" in x["OpenVPN"]["IgnoreDefaultRoute"] ? true : false);
            A.store.Bool(ptr + 1732 + 656 + 13, x["OpenVPN"]["IgnoreDefaultRoute"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["OpenVPN"]["KeyDirection"] === "undefined") {
            A.store.Bool(ptr + 1732 + 680 + 28, false);
            A.store.Ref(ptr + 1732 + 680 + 0, undefined);
            A.store.Ref(ptr + 1732 + 680 + 4, undefined);
            A.store.Ref(ptr + 1732 + 680 + 8, undefined);
            A.store.Ref(ptr + 1732 + 680 + 12, undefined);
            A.store.Ref(ptr + 1732 + 680 + 16, undefined);
            A.store.Ref(ptr + 1732 + 680 + 20, undefined);
            A.store.Bool(ptr + 1732 + 680 + 26, false);
            A.store.Bool(ptr + 1732 + 680 + 24, false);
            A.store.Bool(ptr + 1732 + 680 + 27, false);
            A.store.Bool(ptr + 1732 + 680 + 25, false);
          } else {
            A.store.Bool(ptr + 1732 + 680 + 28, true);
            A.store.Ref(ptr + 1732 + 680 + 0, x["OpenVPN"]["KeyDirection"]["Active"]);
            A.store.Ref(ptr + 1732 + 680 + 4, x["OpenVPN"]["KeyDirection"]["Effective"]);
            A.store.Ref(ptr + 1732 + 680 + 8, x["OpenVPN"]["KeyDirection"]["UserPolicy"]);
            A.store.Ref(ptr + 1732 + 680 + 12, x["OpenVPN"]["KeyDirection"]["DevicePolicy"]);
            A.store.Ref(ptr + 1732 + 680 + 16, x["OpenVPN"]["KeyDirection"]["UserSetting"]);
            A.store.Ref(ptr + 1732 + 680 + 20, x["OpenVPN"]["KeyDirection"]["SharedSetting"]);
            A.store.Bool(ptr + 1732 + 680 + 26, "UserEditable" in x["OpenVPN"]["KeyDirection"] ? true : false);
            A.store.Bool(ptr + 1732 + 680 + 24, x["OpenVPN"]["KeyDirection"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1732 + 680 + 27, "DeviceEditable" in x["OpenVPN"]["KeyDirection"] ? true : false);
            A.store.Bool(ptr + 1732 + 680 + 25, x["OpenVPN"]["KeyDirection"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["OpenVPN"]["NsCertType"] === "undefined") {
            A.store.Bool(ptr + 1732 + 712 + 28, false);
            A.store.Ref(ptr + 1732 + 712 + 0, undefined);
            A.store.Ref(ptr + 1732 + 712 + 4, undefined);
            A.store.Ref(ptr + 1732 + 712 + 8, undefined);
            A.store.Ref(ptr + 1732 + 712 + 12, undefined);
            A.store.Ref(ptr + 1732 + 712 + 16, undefined);
            A.store.Ref(ptr + 1732 + 712 + 20, undefined);
            A.store.Bool(ptr + 1732 + 712 + 26, false);
            A.store.Bool(ptr + 1732 + 712 + 24, false);
            A.store.Bool(ptr + 1732 + 712 + 27, false);
            A.store.Bool(ptr + 1732 + 712 + 25, false);
          } else {
            A.store.Bool(ptr + 1732 + 712 + 28, true);
            A.store.Ref(ptr + 1732 + 712 + 0, x["OpenVPN"]["NsCertType"]["Active"]);
            A.store.Ref(ptr + 1732 + 712 + 4, x["OpenVPN"]["NsCertType"]["Effective"]);
            A.store.Ref(ptr + 1732 + 712 + 8, x["OpenVPN"]["NsCertType"]["UserPolicy"]);
            A.store.Ref(ptr + 1732 + 712 + 12, x["OpenVPN"]["NsCertType"]["DevicePolicy"]);
            A.store.Ref(ptr + 1732 + 712 + 16, x["OpenVPN"]["NsCertType"]["UserSetting"]);
            A.store.Ref(ptr + 1732 + 712 + 20, x["OpenVPN"]["NsCertType"]["SharedSetting"]);
            A.store.Bool(ptr + 1732 + 712 + 26, "UserEditable" in x["OpenVPN"]["NsCertType"] ? true : false);
            A.store.Bool(ptr + 1732 + 712 + 24, x["OpenVPN"]["NsCertType"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1732 + 712 + 27, "DeviceEditable" in x["OpenVPN"]["NsCertType"] ? true : false);
            A.store.Bool(ptr + 1732 + 712 + 25, x["OpenVPN"]["NsCertType"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["OpenVPN"]["OTP"] === "undefined") {
            A.store.Bool(ptr + 1732 + 744 + 28, false);
            A.store.Ref(ptr + 1732 + 744 + 0, undefined);
            A.store.Ref(ptr + 1732 + 744 + 4, undefined);
            A.store.Ref(ptr + 1732 + 744 + 8, undefined);
            A.store.Ref(ptr + 1732 + 744 + 12, undefined);
            A.store.Ref(ptr + 1732 + 744 + 16, undefined);
            A.store.Ref(ptr + 1732 + 744 + 20, undefined);
            A.store.Bool(ptr + 1732 + 744 + 26, false);
            A.store.Bool(ptr + 1732 + 744 + 24, false);
            A.store.Bool(ptr + 1732 + 744 + 27, false);
            A.store.Bool(ptr + 1732 + 744 + 25, false);
          } else {
            A.store.Bool(ptr + 1732 + 744 + 28, true);
            A.store.Ref(ptr + 1732 + 744 + 0, x["OpenVPN"]["OTP"]["Active"]);
            A.store.Ref(ptr + 1732 + 744 + 4, x["OpenVPN"]["OTP"]["Effective"]);
            A.store.Ref(ptr + 1732 + 744 + 8, x["OpenVPN"]["OTP"]["UserPolicy"]);
            A.store.Ref(ptr + 1732 + 744 + 12, x["OpenVPN"]["OTP"]["DevicePolicy"]);
            A.store.Ref(ptr + 1732 + 744 + 16, x["OpenVPN"]["OTP"]["UserSetting"]);
            A.store.Ref(ptr + 1732 + 744 + 20, x["OpenVPN"]["OTP"]["SharedSetting"]);
            A.store.Bool(ptr + 1732 + 744 + 26, "UserEditable" in x["OpenVPN"]["OTP"] ? true : false);
            A.store.Bool(ptr + 1732 + 744 + 24, x["OpenVPN"]["OTP"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1732 + 744 + 27, "DeviceEditable" in x["OpenVPN"]["OTP"] ? true : false);
            A.store.Bool(ptr + 1732 + 744 + 25, x["OpenVPN"]["OTP"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["OpenVPN"]["Password"] === "undefined") {
            A.store.Bool(ptr + 1732 + 776 + 28, false);
            A.store.Ref(ptr + 1732 + 776 + 0, undefined);
            A.store.Ref(ptr + 1732 + 776 + 4, undefined);
            A.store.Ref(ptr + 1732 + 776 + 8, undefined);
            A.store.Ref(ptr + 1732 + 776 + 12, undefined);
            A.store.Ref(ptr + 1732 + 776 + 16, undefined);
            A.store.Ref(ptr + 1732 + 776 + 20, undefined);
            A.store.Bool(ptr + 1732 + 776 + 26, false);
            A.store.Bool(ptr + 1732 + 776 + 24, false);
            A.store.Bool(ptr + 1732 + 776 + 27, false);
            A.store.Bool(ptr + 1732 + 776 + 25, false);
          } else {
            A.store.Bool(ptr + 1732 + 776 + 28, true);
            A.store.Ref(ptr + 1732 + 776 + 0, x["OpenVPN"]["Password"]["Active"]);
            A.store.Ref(ptr + 1732 + 776 + 4, x["OpenVPN"]["Password"]["Effective"]);
            A.store.Ref(ptr + 1732 + 776 + 8, x["OpenVPN"]["Password"]["UserPolicy"]);
            A.store.Ref(ptr + 1732 + 776 + 12, x["OpenVPN"]["Password"]["DevicePolicy"]);
            A.store.Ref(ptr + 1732 + 776 + 16, x["OpenVPN"]["Password"]["UserSetting"]);
            A.store.Ref(ptr + 1732 + 776 + 20, x["OpenVPN"]["Password"]["SharedSetting"]);
            A.store.Bool(ptr + 1732 + 776 + 26, "UserEditable" in x["OpenVPN"]["Password"] ? true : false);
            A.store.Bool(ptr + 1732 + 776 + 24, x["OpenVPN"]["Password"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1732 + 776 + 27, "DeviceEditable" in x["OpenVPN"]["Password"] ? true : false);
            A.store.Bool(ptr + 1732 + 776 + 25, x["OpenVPN"]["Password"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["OpenVPN"]["Port"] === "undefined") {
            A.store.Bool(ptr + 1732 + 808 + 33, false);
            A.store.Bool(ptr + 1732 + 808 + 26, false);
            A.store.Int32(ptr + 1732 + 808 + 0, 0);
            A.store.Ref(ptr + 1732 + 808 + 4, undefined);
            A.store.Bool(ptr + 1732 + 808 + 27, false);
            A.store.Int32(ptr + 1732 + 808 + 8, 0);
            A.store.Bool(ptr + 1732 + 808 + 28, false);
            A.store.Int32(ptr + 1732 + 808 + 12, 0);
            A.store.Bool(ptr + 1732 + 808 + 29, false);
            A.store.Int32(ptr + 1732 + 808 + 16, 0);
            A.store.Bool(ptr + 1732 + 808 + 30, false);
            A.store.Int32(ptr + 1732 + 808 + 20, 0);
            A.store.Bool(ptr + 1732 + 808 + 31, false);
            A.store.Bool(ptr + 1732 + 808 + 24, false);
            A.store.Bool(ptr + 1732 + 808 + 32, false);
            A.store.Bool(ptr + 1732 + 808 + 25, false);
          } else {
            A.store.Bool(ptr + 1732 + 808 + 33, true);
            A.store.Bool(ptr + 1732 + 808 + 26, "Active" in x["OpenVPN"]["Port"] ? true : false);
            A.store.Int32(
              ptr + 1732 + 808 + 0,
              x["OpenVPN"]["Port"]["Active"] === undefined ? 0 : (x["OpenVPN"]["Port"]["Active"] as number)
            );
            A.store.Ref(ptr + 1732 + 808 + 4, x["OpenVPN"]["Port"]["Effective"]);
            A.store.Bool(ptr + 1732 + 808 + 27, "UserPolicy" in x["OpenVPN"]["Port"] ? true : false);
            A.store.Int32(
              ptr + 1732 + 808 + 8,
              x["OpenVPN"]["Port"]["UserPolicy"] === undefined ? 0 : (x["OpenVPN"]["Port"]["UserPolicy"] as number)
            );
            A.store.Bool(ptr + 1732 + 808 + 28, "DevicePolicy" in x["OpenVPN"]["Port"] ? true : false);
            A.store.Int32(
              ptr + 1732 + 808 + 12,
              x["OpenVPN"]["Port"]["DevicePolicy"] === undefined ? 0 : (x["OpenVPN"]["Port"]["DevicePolicy"] as number)
            );
            A.store.Bool(ptr + 1732 + 808 + 29, "UserSetting" in x["OpenVPN"]["Port"] ? true : false);
            A.store.Int32(
              ptr + 1732 + 808 + 16,
              x["OpenVPN"]["Port"]["UserSetting"] === undefined ? 0 : (x["OpenVPN"]["Port"]["UserSetting"] as number)
            );
            A.store.Bool(ptr + 1732 + 808 + 30, "SharedSetting" in x["OpenVPN"]["Port"] ? true : false);
            A.store.Int32(
              ptr + 1732 + 808 + 20,
              x["OpenVPN"]["Port"]["SharedSetting"] === undefined
                ? 0
                : (x["OpenVPN"]["Port"]["SharedSetting"] as number)
            );
            A.store.Bool(ptr + 1732 + 808 + 31, "UserEditable" in x["OpenVPN"]["Port"] ? true : false);
            A.store.Bool(ptr + 1732 + 808 + 24, x["OpenVPN"]["Port"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1732 + 808 + 32, "DeviceEditable" in x["OpenVPN"]["Port"] ? true : false);
            A.store.Bool(ptr + 1732 + 808 + 25, x["OpenVPN"]["Port"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["OpenVPN"]["Proto"] === "undefined") {
            A.store.Bool(ptr + 1732 + 844 + 28, false);
            A.store.Ref(ptr + 1732 + 844 + 0, undefined);
            A.store.Ref(ptr + 1732 + 844 + 4, undefined);
            A.store.Ref(ptr + 1732 + 844 + 8, undefined);
            A.store.Ref(ptr + 1732 + 844 + 12, undefined);
            A.store.Ref(ptr + 1732 + 844 + 16, undefined);
            A.store.Ref(ptr + 1732 + 844 + 20, undefined);
            A.store.Bool(ptr + 1732 + 844 + 26, false);
            A.store.Bool(ptr + 1732 + 844 + 24, false);
            A.store.Bool(ptr + 1732 + 844 + 27, false);
            A.store.Bool(ptr + 1732 + 844 + 25, false);
          } else {
            A.store.Bool(ptr + 1732 + 844 + 28, true);
            A.store.Ref(ptr + 1732 + 844 + 0, x["OpenVPN"]["Proto"]["Active"]);
            A.store.Ref(ptr + 1732 + 844 + 4, x["OpenVPN"]["Proto"]["Effective"]);
            A.store.Ref(ptr + 1732 + 844 + 8, x["OpenVPN"]["Proto"]["UserPolicy"]);
            A.store.Ref(ptr + 1732 + 844 + 12, x["OpenVPN"]["Proto"]["DevicePolicy"]);
            A.store.Ref(ptr + 1732 + 844 + 16, x["OpenVPN"]["Proto"]["UserSetting"]);
            A.store.Ref(ptr + 1732 + 844 + 20, x["OpenVPN"]["Proto"]["SharedSetting"]);
            A.store.Bool(ptr + 1732 + 844 + 26, "UserEditable" in x["OpenVPN"]["Proto"] ? true : false);
            A.store.Bool(ptr + 1732 + 844 + 24, x["OpenVPN"]["Proto"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1732 + 844 + 27, "DeviceEditable" in x["OpenVPN"]["Proto"] ? true : false);
            A.store.Bool(ptr + 1732 + 844 + 25, x["OpenVPN"]["Proto"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["OpenVPN"]["PushPeerInfo"] === "undefined") {
            A.store.Bool(ptr + 1732 + 876 + 21, false);
            A.store.Bool(ptr + 1732 + 876 + 14, false);
            A.store.Bool(ptr + 1732 + 876 + 0, false);
            A.store.Ref(ptr + 1732 + 876 + 4, undefined);
            A.store.Bool(ptr + 1732 + 876 + 15, false);
            A.store.Bool(ptr + 1732 + 876 + 8, false);
            A.store.Bool(ptr + 1732 + 876 + 16, false);
            A.store.Bool(ptr + 1732 + 876 + 9, false);
            A.store.Bool(ptr + 1732 + 876 + 17, false);
            A.store.Bool(ptr + 1732 + 876 + 10, false);
            A.store.Bool(ptr + 1732 + 876 + 18, false);
            A.store.Bool(ptr + 1732 + 876 + 11, false);
            A.store.Bool(ptr + 1732 + 876 + 19, false);
            A.store.Bool(ptr + 1732 + 876 + 12, false);
            A.store.Bool(ptr + 1732 + 876 + 20, false);
            A.store.Bool(ptr + 1732 + 876 + 13, false);
          } else {
            A.store.Bool(ptr + 1732 + 876 + 21, true);
            A.store.Bool(ptr + 1732 + 876 + 14, "Active" in x["OpenVPN"]["PushPeerInfo"] ? true : false);
            A.store.Bool(ptr + 1732 + 876 + 0, x["OpenVPN"]["PushPeerInfo"]["Active"] ? true : false);
            A.store.Ref(ptr + 1732 + 876 + 4, x["OpenVPN"]["PushPeerInfo"]["Effective"]);
            A.store.Bool(ptr + 1732 + 876 + 15, "UserPolicy" in x["OpenVPN"]["PushPeerInfo"] ? true : false);
            A.store.Bool(ptr + 1732 + 876 + 8, x["OpenVPN"]["PushPeerInfo"]["UserPolicy"] ? true : false);
            A.store.Bool(ptr + 1732 + 876 + 16, "DevicePolicy" in x["OpenVPN"]["PushPeerInfo"] ? true : false);
            A.store.Bool(ptr + 1732 + 876 + 9, x["OpenVPN"]["PushPeerInfo"]["DevicePolicy"] ? true : false);
            A.store.Bool(ptr + 1732 + 876 + 17, "UserSetting" in x["OpenVPN"]["PushPeerInfo"] ? true : false);
            A.store.Bool(ptr + 1732 + 876 + 10, x["OpenVPN"]["PushPeerInfo"]["UserSetting"] ? true : false);
            A.store.Bool(ptr + 1732 + 876 + 18, "SharedSetting" in x["OpenVPN"]["PushPeerInfo"] ? true : false);
            A.store.Bool(ptr + 1732 + 876 + 11, x["OpenVPN"]["PushPeerInfo"]["SharedSetting"] ? true : false);
            A.store.Bool(ptr + 1732 + 876 + 19, "UserEditable" in x["OpenVPN"]["PushPeerInfo"] ? true : false);
            A.store.Bool(ptr + 1732 + 876 + 12, x["OpenVPN"]["PushPeerInfo"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1732 + 876 + 20, "DeviceEditable" in x["OpenVPN"]["PushPeerInfo"] ? true : false);
            A.store.Bool(ptr + 1732 + 876 + 13, x["OpenVPN"]["PushPeerInfo"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["OpenVPN"]["RemoteCertEKU"] === "undefined") {
            A.store.Bool(ptr + 1732 + 900 + 28, false);
            A.store.Ref(ptr + 1732 + 900 + 0, undefined);
            A.store.Ref(ptr + 1732 + 900 + 4, undefined);
            A.store.Ref(ptr + 1732 + 900 + 8, undefined);
            A.store.Ref(ptr + 1732 + 900 + 12, undefined);
            A.store.Ref(ptr + 1732 + 900 + 16, undefined);
            A.store.Ref(ptr + 1732 + 900 + 20, undefined);
            A.store.Bool(ptr + 1732 + 900 + 26, false);
            A.store.Bool(ptr + 1732 + 900 + 24, false);
            A.store.Bool(ptr + 1732 + 900 + 27, false);
            A.store.Bool(ptr + 1732 + 900 + 25, false);
          } else {
            A.store.Bool(ptr + 1732 + 900 + 28, true);
            A.store.Ref(ptr + 1732 + 900 + 0, x["OpenVPN"]["RemoteCertEKU"]["Active"]);
            A.store.Ref(ptr + 1732 + 900 + 4, x["OpenVPN"]["RemoteCertEKU"]["Effective"]);
            A.store.Ref(ptr + 1732 + 900 + 8, x["OpenVPN"]["RemoteCertEKU"]["UserPolicy"]);
            A.store.Ref(ptr + 1732 + 900 + 12, x["OpenVPN"]["RemoteCertEKU"]["DevicePolicy"]);
            A.store.Ref(ptr + 1732 + 900 + 16, x["OpenVPN"]["RemoteCertEKU"]["UserSetting"]);
            A.store.Ref(ptr + 1732 + 900 + 20, x["OpenVPN"]["RemoteCertEKU"]["SharedSetting"]);
            A.store.Bool(ptr + 1732 + 900 + 26, "UserEditable" in x["OpenVPN"]["RemoteCertEKU"] ? true : false);
            A.store.Bool(ptr + 1732 + 900 + 24, x["OpenVPN"]["RemoteCertEKU"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1732 + 900 + 27, "DeviceEditable" in x["OpenVPN"]["RemoteCertEKU"] ? true : false);
            A.store.Bool(ptr + 1732 + 900 + 25, x["OpenVPN"]["RemoteCertEKU"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["OpenVPN"]["RemoteCertKU"] === "undefined") {
            A.store.Bool(ptr + 1732 + 932 + 28, false);
            A.store.Ref(ptr + 1732 + 932 + 0, undefined);
            A.store.Ref(ptr + 1732 + 932 + 4, undefined);
            A.store.Ref(ptr + 1732 + 932 + 8, undefined);
            A.store.Ref(ptr + 1732 + 932 + 12, undefined);
            A.store.Ref(ptr + 1732 + 932 + 16, undefined);
            A.store.Ref(ptr + 1732 + 932 + 20, undefined);
            A.store.Bool(ptr + 1732 + 932 + 26, false);
            A.store.Bool(ptr + 1732 + 932 + 24, false);
            A.store.Bool(ptr + 1732 + 932 + 27, false);
            A.store.Bool(ptr + 1732 + 932 + 25, false);
          } else {
            A.store.Bool(ptr + 1732 + 932 + 28, true);
            A.store.Ref(ptr + 1732 + 932 + 0, x["OpenVPN"]["RemoteCertKU"]["Active"]);
            A.store.Ref(ptr + 1732 + 932 + 4, x["OpenVPN"]["RemoteCertKU"]["Effective"]);
            A.store.Ref(ptr + 1732 + 932 + 8, x["OpenVPN"]["RemoteCertKU"]["UserPolicy"]);
            A.store.Ref(ptr + 1732 + 932 + 12, x["OpenVPN"]["RemoteCertKU"]["DevicePolicy"]);
            A.store.Ref(ptr + 1732 + 932 + 16, x["OpenVPN"]["RemoteCertKU"]["UserSetting"]);
            A.store.Ref(ptr + 1732 + 932 + 20, x["OpenVPN"]["RemoteCertKU"]["SharedSetting"]);
            A.store.Bool(ptr + 1732 + 932 + 26, "UserEditable" in x["OpenVPN"]["RemoteCertKU"] ? true : false);
            A.store.Bool(ptr + 1732 + 932 + 24, x["OpenVPN"]["RemoteCertKU"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1732 + 932 + 27, "DeviceEditable" in x["OpenVPN"]["RemoteCertKU"] ? true : false);
            A.store.Bool(ptr + 1732 + 932 + 25, x["OpenVPN"]["RemoteCertKU"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["OpenVPN"]["RemoteCertTLS"] === "undefined") {
            A.store.Bool(ptr + 1732 + 964 + 28, false);
            A.store.Ref(ptr + 1732 + 964 + 0, undefined);
            A.store.Ref(ptr + 1732 + 964 + 4, undefined);
            A.store.Ref(ptr + 1732 + 964 + 8, undefined);
            A.store.Ref(ptr + 1732 + 964 + 12, undefined);
            A.store.Ref(ptr + 1732 + 964 + 16, undefined);
            A.store.Ref(ptr + 1732 + 964 + 20, undefined);
            A.store.Bool(ptr + 1732 + 964 + 26, false);
            A.store.Bool(ptr + 1732 + 964 + 24, false);
            A.store.Bool(ptr + 1732 + 964 + 27, false);
            A.store.Bool(ptr + 1732 + 964 + 25, false);
          } else {
            A.store.Bool(ptr + 1732 + 964 + 28, true);
            A.store.Ref(ptr + 1732 + 964 + 0, x["OpenVPN"]["RemoteCertTLS"]["Active"]);
            A.store.Ref(ptr + 1732 + 964 + 4, x["OpenVPN"]["RemoteCertTLS"]["Effective"]);
            A.store.Ref(ptr + 1732 + 964 + 8, x["OpenVPN"]["RemoteCertTLS"]["UserPolicy"]);
            A.store.Ref(ptr + 1732 + 964 + 12, x["OpenVPN"]["RemoteCertTLS"]["DevicePolicy"]);
            A.store.Ref(ptr + 1732 + 964 + 16, x["OpenVPN"]["RemoteCertTLS"]["UserSetting"]);
            A.store.Ref(ptr + 1732 + 964 + 20, x["OpenVPN"]["RemoteCertTLS"]["SharedSetting"]);
            A.store.Bool(ptr + 1732 + 964 + 26, "UserEditable" in x["OpenVPN"]["RemoteCertTLS"] ? true : false);
            A.store.Bool(ptr + 1732 + 964 + 24, x["OpenVPN"]["RemoteCertTLS"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1732 + 964 + 27, "DeviceEditable" in x["OpenVPN"]["RemoteCertTLS"] ? true : false);
            A.store.Bool(ptr + 1732 + 964 + 25, x["OpenVPN"]["RemoteCertTLS"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["OpenVPN"]["RenegSec"] === "undefined") {
            A.store.Bool(ptr + 1732 + 996 + 33, false);
            A.store.Bool(ptr + 1732 + 996 + 26, false);
            A.store.Int32(ptr + 1732 + 996 + 0, 0);
            A.store.Ref(ptr + 1732 + 996 + 4, undefined);
            A.store.Bool(ptr + 1732 + 996 + 27, false);
            A.store.Int32(ptr + 1732 + 996 + 8, 0);
            A.store.Bool(ptr + 1732 + 996 + 28, false);
            A.store.Int32(ptr + 1732 + 996 + 12, 0);
            A.store.Bool(ptr + 1732 + 996 + 29, false);
            A.store.Int32(ptr + 1732 + 996 + 16, 0);
            A.store.Bool(ptr + 1732 + 996 + 30, false);
            A.store.Int32(ptr + 1732 + 996 + 20, 0);
            A.store.Bool(ptr + 1732 + 996 + 31, false);
            A.store.Bool(ptr + 1732 + 996 + 24, false);
            A.store.Bool(ptr + 1732 + 996 + 32, false);
            A.store.Bool(ptr + 1732 + 996 + 25, false);
          } else {
            A.store.Bool(ptr + 1732 + 996 + 33, true);
            A.store.Bool(ptr + 1732 + 996 + 26, "Active" in x["OpenVPN"]["RenegSec"] ? true : false);
            A.store.Int32(
              ptr + 1732 + 996 + 0,
              x["OpenVPN"]["RenegSec"]["Active"] === undefined ? 0 : (x["OpenVPN"]["RenegSec"]["Active"] as number)
            );
            A.store.Ref(ptr + 1732 + 996 + 4, x["OpenVPN"]["RenegSec"]["Effective"]);
            A.store.Bool(ptr + 1732 + 996 + 27, "UserPolicy" in x["OpenVPN"]["RenegSec"] ? true : false);
            A.store.Int32(
              ptr + 1732 + 996 + 8,
              x["OpenVPN"]["RenegSec"]["UserPolicy"] === undefined
                ? 0
                : (x["OpenVPN"]["RenegSec"]["UserPolicy"] as number)
            );
            A.store.Bool(ptr + 1732 + 996 + 28, "DevicePolicy" in x["OpenVPN"]["RenegSec"] ? true : false);
            A.store.Int32(
              ptr + 1732 + 996 + 12,
              x["OpenVPN"]["RenegSec"]["DevicePolicy"] === undefined
                ? 0
                : (x["OpenVPN"]["RenegSec"]["DevicePolicy"] as number)
            );
            A.store.Bool(ptr + 1732 + 996 + 29, "UserSetting" in x["OpenVPN"]["RenegSec"] ? true : false);
            A.store.Int32(
              ptr + 1732 + 996 + 16,
              x["OpenVPN"]["RenegSec"]["UserSetting"] === undefined
                ? 0
                : (x["OpenVPN"]["RenegSec"]["UserSetting"] as number)
            );
            A.store.Bool(ptr + 1732 + 996 + 30, "SharedSetting" in x["OpenVPN"]["RenegSec"] ? true : false);
            A.store.Int32(
              ptr + 1732 + 996 + 20,
              x["OpenVPN"]["RenegSec"]["SharedSetting"] === undefined
                ? 0
                : (x["OpenVPN"]["RenegSec"]["SharedSetting"] as number)
            );
            A.store.Bool(ptr + 1732 + 996 + 31, "UserEditable" in x["OpenVPN"]["RenegSec"] ? true : false);
            A.store.Bool(ptr + 1732 + 996 + 24, x["OpenVPN"]["RenegSec"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1732 + 996 + 32, "DeviceEditable" in x["OpenVPN"]["RenegSec"] ? true : false);
            A.store.Bool(ptr + 1732 + 996 + 25, x["OpenVPN"]["RenegSec"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["OpenVPN"]["SaveCredentials"] === "undefined") {
            A.store.Bool(ptr + 1732 + 1032 + 21, false);
            A.store.Bool(ptr + 1732 + 1032 + 14, false);
            A.store.Bool(ptr + 1732 + 1032 + 0, false);
            A.store.Ref(ptr + 1732 + 1032 + 4, undefined);
            A.store.Bool(ptr + 1732 + 1032 + 15, false);
            A.store.Bool(ptr + 1732 + 1032 + 8, false);
            A.store.Bool(ptr + 1732 + 1032 + 16, false);
            A.store.Bool(ptr + 1732 + 1032 + 9, false);
            A.store.Bool(ptr + 1732 + 1032 + 17, false);
            A.store.Bool(ptr + 1732 + 1032 + 10, false);
            A.store.Bool(ptr + 1732 + 1032 + 18, false);
            A.store.Bool(ptr + 1732 + 1032 + 11, false);
            A.store.Bool(ptr + 1732 + 1032 + 19, false);
            A.store.Bool(ptr + 1732 + 1032 + 12, false);
            A.store.Bool(ptr + 1732 + 1032 + 20, false);
            A.store.Bool(ptr + 1732 + 1032 + 13, false);
          } else {
            A.store.Bool(ptr + 1732 + 1032 + 21, true);
            A.store.Bool(ptr + 1732 + 1032 + 14, "Active" in x["OpenVPN"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 1732 + 1032 + 0, x["OpenVPN"]["SaveCredentials"]["Active"] ? true : false);
            A.store.Ref(ptr + 1732 + 1032 + 4, x["OpenVPN"]["SaveCredentials"]["Effective"]);
            A.store.Bool(ptr + 1732 + 1032 + 15, "UserPolicy" in x["OpenVPN"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 1732 + 1032 + 8, x["OpenVPN"]["SaveCredentials"]["UserPolicy"] ? true : false);
            A.store.Bool(ptr + 1732 + 1032 + 16, "DevicePolicy" in x["OpenVPN"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 1732 + 1032 + 9, x["OpenVPN"]["SaveCredentials"]["DevicePolicy"] ? true : false);
            A.store.Bool(ptr + 1732 + 1032 + 17, "UserSetting" in x["OpenVPN"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 1732 + 1032 + 10, x["OpenVPN"]["SaveCredentials"]["UserSetting"] ? true : false);
            A.store.Bool(ptr + 1732 + 1032 + 18, "SharedSetting" in x["OpenVPN"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 1732 + 1032 + 11, x["OpenVPN"]["SaveCredentials"]["SharedSetting"] ? true : false);
            A.store.Bool(ptr + 1732 + 1032 + 19, "UserEditable" in x["OpenVPN"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 1732 + 1032 + 12, x["OpenVPN"]["SaveCredentials"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1732 + 1032 + 20, "DeviceEditable" in x["OpenVPN"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 1732 + 1032 + 13, x["OpenVPN"]["SaveCredentials"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["OpenVPN"]["ServerCAPEMs"] === "undefined") {
            A.store.Bool(ptr + 1732 + 1056 + 28, false);
            A.store.Ref(ptr + 1732 + 1056 + 0, undefined);
            A.store.Ref(ptr + 1732 + 1056 + 4, undefined);
            A.store.Ref(ptr + 1732 + 1056 + 8, undefined);
            A.store.Ref(ptr + 1732 + 1056 + 12, undefined);
            A.store.Ref(ptr + 1732 + 1056 + 16, undefined);
            A.store.Ref(ptr + 1732 + 1056 + 20, undefined);
            A.store.Bool(ptr + 1732 + 1056 + 26, false);
            A.store.Bool(ptr + 1732 + 1056 + 24, false);
            A.store.Bool(ptr + 1732 + 1056 + 27, false);
            A.store.Bool(ptr + 1732 + 1056 + 25, false);
          } else {
            A.store.Bool(ptr + 1732 + 1056 + 28, true);
            A.store.Ref(ptr + 1732 + 1056 + 0, x["OpenVPN"]["ServerCAPEMs"]["Active"]);
            A.store.Ref(ptr + 1732 + 1056 + 4, x["OpenVPN"]["ServerCAPEMs"]["Effective"]);
            A.store.Ref(ptr + 1732 + 1056 + 8, x["OpenVPN"]["ServerCAPEMs"]["UserPolicy"]);
            A.store.Ref(ptr + 1732 + 1056 + 12, x["OpenVPN"]["ServerCAPEMs"]["DevicePolicy"]);
            A.store.Ref(ptr + 1732 + 1056 + 16, x["OpenVPN"]["ServerCAPEMs"]["UserSetting"]);
            A.store.Ref(ptr + 1732 + 1056 + 20, x["OpenVPN"]["ServerCAPEMs"]["SharedSetting"]);
            A.store.Bool(ptr + 1732 + 1056 + 26, "UserEditable" in x["OpenVPN"]["ServerCAPEMs"] ? true : false);
            A.store.Bool(ptr + 1732 + 1056 + 24, x["OpenVPN"]["ServerCAPEMs"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1732 + 1056 + 27, "DeviceEditable" in x["OpenVPN"]["ServerCAPEMs"] ? true : false);
            A.store.Bool(ptr + 1732 + 1056 + 25, x["OpenVPN"]["ServerCAPEMs"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["OpenVPN"]["ServerCARefs"] === "undefined") {
            A.store.Bool(ptr + 1732 + 1088 + 28, false);
            A.store.Ref(ptr + 1732 + 1088 + 0, undefined);
            A.store.Ref(ptr + 1732 + 1088 + 4, undefined);
            A.store.Ref(ptr + 1732 + 1088 + 8, undefined);
            A.store.Ref(ptr + 1732 + 1088 + 12, undefined);
            A.store.Ref(ptr + 1732 + 1088 + 16, undefined);
            A.store.Ref(ptr + 1732 + 1088 + 20, undefined);
            A.store.Bool(ptr + 1732 + 1088 + 26, false);
            A.store.Bool(ptr + 1732 + 1088 + 24, false);
            A.store.Bool(ptr + 1732 + 1088 + 27, false);
            A.store.Bool(ptr + 1732 + 1088 + 25, false);
          } else {
            A.store.Bool(ptr + 1732 + 1088 + 28, true);
            A.store.Ref(ptr + 1732 + 1088 + 0, x["OpenVPN"]["ServerCARefs"]["Active"]);
            A.store.Ref(ptr + 1732 + 1088 + 4, x["OpenVPN"]["ServerCARefs"]["Effective"]);
            A.store.Ref(ptr + 1732 + 1088 + 8, x["OpenVPN"]["ServerCARefs"]["UserPolicy"]);
            A.store.Ref(ptr + 1732 + 1088 + 12, x["OpenVPN"]["ServerCARefs"]["DevicePolicy"]);
            A.store.Ref(ptr + 1732 + 1088 + 16, x["OpenVPN"]["ServerCARefs"]["UserSetting"]);
            A.store.Ref(ptr + 1732 + 1088 + 20, x["OpenVPN"]["ServerCARefs"]["SharedSetting"]);
            A.store.Bool(ptr + 1732 + 1088 + 26, "UserEditable" in x["OpenVPN"]["ServerCARefs"] ? true : false);
            A.store.Bool(ptr + 1732 + 1088 + 24, x["OpenVPN"]["ServerCARefs"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1732 + 1088 + 27, "DeviceEditable" in x["OpenVPN"]["ServerCARefs"] ? true : false);
            A.store.Bool(ptr + 1732 + 1088 + 25, x["OpenVPN"]["ServerCARefs"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["OpenVPN"]["ServerCertRef"] === "undefined") {
            A.store.Bool(ptr + 1732 + 1120 + 28, false);
            A.store.Ref(ptr + 1732 + 1120 + 0, undefined);
            A.store.Ref(ptr + 1732 + 1120 + 4, undefined);
            A.store.Ref(ptr + 1732 + 1120 + 8, undefined);
            A.store.Ref(ptr + 1732 + 1120 + 12, undefined);
            A.store.Ref(ptr + 1732 + 1120 + 16, undefined);
            A.store.Ref(ptr + 1732 + 1120 + 20, undefined);
            A.store.Bool(ptr + 1732 + 1120 + 26, false);
            A.store.Bool(ptr + 1732 + 1120 + 24, false);
            A.store.Bool(ptr + 1732 + 1120 + 27, false);
            A.store.Bool(ptr + 1732 + 1120 + 25, false);
          } else {
            A.store.Bool(ptr + 1732 + 1120 + 28, true);
            A.store.Ref(ptr + 1732 + 1120 + 0, x["OpenVPN"]["ServerCertRef"]["Active"]);
            A.store.Ref(ptr + 1732 + 1120 + 4, x["OpenVPN"]["ServerCertRef"]["Effective"]);
            A.store.Ref(ptr + 1732 + 1120 + 8, x["OpenVPN"]["ServerCertRef"]["UserPolicy"]);
            A.store.Ref(ptr + 1732 + 1120 + 12, x["OpenVPN"]["ServerCertRef"]["DevicePolicy"]);
            A.store.Ref(ptr + 1732 + 1120 + 16, x["OpenVPN"]["ServerCertRef"]["UserSetting"]);
            A.store.Ref(ptr + 1732 + 1120 + 20, x["OpenVPN"]["ServerCertRef"]["SharedSetting"]);
            A.store.Bool(ptr + 1732 + 1120 + 26, "UserEditable" in x["OpenVPN"]["ServerCertRef"] ? true : false);
            A.store.Bool(ptr + 1732 + 1120 + 24, x["OpenVPN"]["ServerCertRef"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1732 + 1120 + 27, "DeviceEditable" in x["OpenVPN"]["ServerCertRef"] ? true : false);
            A.store.Bool(ptr + 1732 + 1120 + 25, x["OpenVPN"]["ServerCertRef"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["OpenVPN"]["ServerPollTimeout"] === "undefined") {
            A.store.Bool(ptr + 1732 + 1152 + 33, false);
            A.store.Bool(ptr + 1732 + 1152 + 26, false);
            A.store.Int32(ptr + 1732 + 1152 + 0, 0);
            A.store.Ref(ptr + 1732 + 1152 + 4, undefined);
            A.store.Bool(ptr + 1732 + 1152 + 27, false);
            A.store.Int32(ptr + 1732 + 1152 + 8, 0);
            A.store.Bool(ptr + 1732 + 1152 + 28, false);
            A.store.Int32(ptr + 1732 + 1152 + 12, 0);
            A.store.Bool(ptr + 1732 + 1152 + 29, false);
            A.store.Int32(ptr + 1732 + 1152 + 16, 0);
            A.store.Bool(ptr + 1732 + 1152 + 30, false);
            A.store.Int32(ptr + 1732 + 1152 + 20, 0);
            A.store.Bool(ptr + 1732 + 1152 + 31, false);
            A.store.Bool(ptr + 1732 + 1152 + 24, false);
            A.store.Bool(ptr + 1732 + 1152 + 32, false);
            A.store.Bool(ptr + 1732 + 1152 + 25, false);
          } else {
            A.store.Bool(ptr + 1732 + 1152 + 33, true);
            A.store.Bool(ptr + 1732 + 1152 + 26, "Active" in x["OpenVPN"]["ServerPollTimeout"] ? true : false);
            A.store.Int32(
              ptr + 1732 + 1152 + 0,
              x["OpenVPN"]["ServerPollTimeout"]["Active"] === undefined
                ? 0
                : (x["OpenVPN"]["ServerPollTimeout"]["Active"] as number)
            );
            A.store.Ref(ptr + 1732 + 1152 + 4, x["OpenVPN"]["ServerPollTimeout"]["Effective"]);
            A.store.Bool(ptr + 1732 + 1152 + 27, "UserPolicy" in x["OpenVPN"]["ServerPollTimeout"] ? true : false);
            A.store.Int32(
              ptr + 1732 + 1152 + 8,
              x["OpenVPN"]["ServerPollTimeout"]["UserPolicy"] === undefined
                ? 0
                : (x["OpenVPN"]["ServerPollTimeout"]["UserPolicy"] as number)
            );
            A.store.Bool(ptr + 1732 + 1152 + 28, "DevicePolicy" in x["OpenVPN"]["ServerPollTimeout"] ? true : false);
            A.store.Int32(
              ptr + 1732 + 1152 + 12,
              x["OpenVPN"]["ServerPollTimeout"]["DevicePolicy"] === undefined
                ? 0
                : (x["OpenVPN"]["ServerPollTimeout"]["DevicePolicy"] as number)
            );
            A.store.Bool(ptr + 1732 + 1152 + 29, "UserSetting" in x["OpenVPN"]["ServerPollTimeout"] ? true : false);
            A.store.Int32(
              ptr + 1732 + 1152 + 16,
              x["OpenVPN"]["ServerPollTimeout"]["UserSetting"] === undefined
                ? 0
                : (x["OpenVPN"]["ServerPollTimeout"]["UserSetting"] as number)
            );
            A.store.Bool(ptr + 1732 + 1152 + 30, "SharedSetting" in x["OpenVPN"]["ServerPollTimeout"] ? true : false);
            A.store.Int32(
              ptr + 1732 + 1152 + 20,
              x["OpenVPN"]["ServerPollTimeout"]["SharedSetting"] === undefined
                ? 0
                : (x["OpenVPN"]["ServerPollTimeout"]["SharedSetting"] as number)
            );
            A.store.Bool(ptr + 1732 + 1152 + 31, "UserEditable" in x["OpenVPN"]["ServerPollTimeout"] ? true : false);
            A.store.Bool(ptr + 1732 + 1152 + 24, x["OpenVPN"]["ServerPollTimeout"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1732 + 1152 + 32, "DeviceEditable" in x["OpenVPN"]["ServerPollTimeout"] ? true : false);
            A.store.Bool(ptr + 1732 + 1152 + 25, x["OpenVPN"]["ServerPollTimeout"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["OpenVPN"]["Shaper"] === "undefined") {
            A.store.Bool(ptr + 1732 + 1188 + 33, false);
            A.store.Bool(ptr + 1732 + 1188 + 26, false);
            A.store.Int32(ptr + 1732 + 1188 + 0, 0);
            A.store.Ref(ptr + 1732 + 1188 + 4, undefined);
            A.store.Bool(ptr + 1732 + 1188 + 27, false);
            A.store.Int32(ptr + 1732 + 1188 + 8, 0);
            A.store.Bool(ptr + 1732 + 1188 + 28, false);
            A.store.Int32(ptr + 1732 + 1188 + 12, 0);
            A.store.Bool(ptr + 1732 + 1188 + 29, false);
            A.store.Int32(ptr + 1732 + 1188 + 16, 0);
            A.store.Bool(ptr + 1732 + 1188 + 30, false);
            A.store.Int32(ptr + 1732 + 1188 + 20, 0);
            A.store.Bool(ptr + 1732 + 1188 + 31, false);
            A.store.Bool(ptr + 1732 + 1188 + 24, false);
            A.store.Bool(ptr + 1732 + 1188 + 32, false);
            A.store.Bool(ptr + 1732 + 1188 + 25, false);
          } else {
            A.store.Bool(ptr + 1732 + 1188 + 33, true);
            A.store.Bool(ptr + 1732 + 1188 + 26, "Active" in x["OpenVPN"]["Shaper"] ? true : false);
            A.store.Int32(
              ptr + 1732 + 1188 + 0,
              x["OpenVPN"]["Shaper"]["Active"] === undefined ? 0 : (x["OpenVPN"]["Shaper"]["Active"] as number)
            );
            A.store.Ref(ptr + 1732 + 1188 + 4, x["OpenVPN"]["Shaper"]["Effective"]);
            A.store.Bool(ptr + 1732 + 1188 + 27, "UserPolicy" in x["OpenVPN"]["Shaper"] ? true : false);
            A.store.Int32(
              ptr + 1732 + 1188 + 8,
              x["OpenVPN"]["Shaper"]["UserPolicy"] === undefined ? 0 : (x["OpenVPN"]["Shaper"]["UserPolicy"] as number)
            );
            A.store.Bool(ptr + 1732 + 1188 + 28, "DevicePolicy" in x["OpenVPN"]["Shaper"] ? true : false);
            A.store.Int32(
              ptr + 1732 + 1188 + 12,
              x["OpenVPN"]["Shaper"]["DevicePolicy"] === undefined
                ? 0
                : (x["OpenVPN"]["Shaper"]["DevicePolicy"] as number)
            );
            A.store.Bool(ptr + 1732 + 1188 + 29, "UserSetting" in x["OpenVPN"]["Shaper"] ? true : false);
            A.store.Int32(
              ptr + 1732 + 1188 + 16,
              x["OpenVPN"]["Shaper"]["UserSetting"] === undefined
                ? 0
                : (x["OpenVPN"]["Shaper"]["UserSetting"] as number)
            );
            A.store.Bool(ptr + 1732 + 1188 + 30, "SharedSetting" in x["OpenVPN"]["Shaper"] ? true : false);
            A.store.Int32(
              ptr + 1732 + 1188 + 20,
              x["OpenVPN"]["Shaper"]["SharedSetting"] === undefined
                ? 0
                : (x["OpenVPN"]["Shaper"]["SharedSetting"] as number)
            );
            A.store.Bool(ptr + 1732 + 1188 + 31, "UserEditable" in x["OpenVPN"]["Shaper"] ? true : false);
            A.store.Bool(ptr + 1732 + 1188 + 24, x["OpenVPN"]["Shaper"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1732 + 1188 + 32, "DeviceEditable" in x["OpenVPN"]["Shaper"] ? true : false);
            A.store.Bool(ptr + 1732 + 1188 + 25, x["OpenVPN"]["Shaper"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["OpenVPN"]["StaticChallenge"] === "undefined") {
            A.store.Bool(ptr + 1732 + 1224 + 28, false);
            A.store.Ref(ptr + 1732 + 1224 + 0, undefined);
            A.store.Ref(ptr + 1732 + 1224 + 4, undefined);
            A.store.Ref(ptr + 1732 + 1224 + 8, undefined);
            A.store.Ref(ptr + 1732 + 1224 + 12, undefined);
            A.store.Ref(ptr + 1732 + 1224 + 16, undefined);
            A.store.Ref(ptr + 1732 + 1224 + 20, undefined);
            A.store.Bool(ptr + 1732 + 1224 + 26, false);
            A.store.Bool(ptr + 1732 + 1224 + 24, false);
            A.store.Bool(ptr + 1732 + 1224 + 27, false);
            A.store.Bool(ptr + 1732 + 1224 + 25, false);
          } else {
            A.store.Bool(ptr + 1732 + 1224 + 28, true);
            A.store.Ref(ptr + 1732 + 1224 + 0, x["OpenVPN"]["StaticChallenge"]["Active"]);
            A.store.Ref(ptr + 1732 + 1224 + 4, x["OpenVPN"]["StaticChallenge"]["Effective"]);
            A.store.Ref(ptr + 1732 + 1224 + 8, x["OpenVPN"]["StaticChallenge"]["UserPolicy"]);
            A.store.Ref(ptr + 1732 + 1224 + 12, x["OpenVPN"]["StaticChallenge"]["DevicePolicy"]);
            A.store.Ref(ptr + 1732 + 1224 + 16, x["OpenVPN"]["StaticChallenge"]["UserSetting"]);
            A.store.Ref(ptr + 1732 + 1224 + 20, x["OpenVPN"]["StaticChallenge"]["SharedSetting"]);
            A.store.Bool(ptr + 1732 + 1224 + 26, "UserEditable" in x["OpenVPN"]["StaticChallenge"] ? true : false);
            A.store.Bool(ptr + 1732 + 1224 + 24, x["OpenVPN"]["StaticChallenge"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1732 + 1224 + 27, "DeviceEditable" in x["OpenVPN"]["StaticChallenge"] ? true : false);
            A.store.Bool(ptr + 1732 + 1224 + 25, x["OpenVPN"]["StaticChallenge"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["OpenVPN"]["TLSAuthContents"] === "undefined") {
            A.store.Bool(ptr + 1732 + 1256 + 28, false);
            A.store.Ref(ptr + 1732 + 1256 + 0, undefined);
            A.store.Ref(ptr + 1732 + 1256 + 4, undefined);
            A.store.Ref(ptr + 1732 + 1256 + 8, undefined);
            A.store.Ref(ptr + 1732 + 1256 + 12, undefined);
            A.store.Ref(ptr + 1732 + 1256 + 16, undefined);
            A.store.Ref(ptr + 1732 + 1256 + 20, undefined);
            A.store.Bool(ptr + 1732 + 1256 + 26, false);
            A.store.Bool(ptr + 1732 + 1256 + 24, false);
            A.store.Bool(ptr + 1732 + 1256 + 27, false);
            A.store.Bool(ptr + 1732 + 1256 + 25, false);
          } else {
            A.store.Bool(ptr + 1732 + 1256 + 28, true);
            A.store.Ref(ptr + 1732 + 1256 + 0, x["OpenVPN"]["TLSAuthContents"]["Active"]);
            A.store.Ref(ptr + 1732 + 1256 + 4, x["OpenVPN"]["TLSAuthContents"]["Effective"]);
            A.store.Ref(ptr + 1732 + 1256 + 8, x["OpenVPN"]["TLSAuthContents"]["UserPolicy"]);
            A.store.Ref(ptr + 1732 + 1256 + 12, x["OpenVPN"]["TLSAuthContents"]["DevicePolicy"]);
            A.store.Ref(ptr + 1732 + 1256 + 16, x["OpenVPN"]["TLSAuthContents"]["UserSetting"]);
            A.store.Ref(ptr + 1732 + 1256 + 20, x["OpenVPN"]["TLSAuthContents"]["SharedSetting"]);
            A.store.Bool(ptr + 1732 + 1256 + 26, "UserEditable" in x["OpenVPN"]["TLSAuthContents"] ? true : false);
            A.store.Bool(ptr + 1732 + 1256 + 24, x["OpenVPN"]["TLSAuthContents"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1732 + 1256 + 27, "DeviceEditable" in x["OpenVPN"]["TLSAuthContents"] ? true : false);
            A.store.Bool(ptr + 1732 + 1256 + 25, x["OpenVPN"]["TLSAuthContents"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["OpenVPN"]["TLSRemote"] === "undefined") {
            A.store.Bool(ptr + 1732 + 1288 + 28, false);
            A.store.Ref(ptr + 1732 + 1288 + 0, undefined);
            A.store.Ref(ptr + 1732 + 1288 + 4, undefined);
            A.store.Ref(ptr + 1732 + 1288 + 8, undefined);
            A.store.Ref(ptr + 1732 + 1288 + 12, undefined);
            A.store.Ref(ptr + 1732 + 1288 + 16, undefined);
            A.store.Ref(ptr + 1732 + 1288 + 20, undefined);
            A.store.Bool(ptr + 1732 + 1288 + 26, false);
            A.store.Bool(ptr + 1732 + 1288 + 24, false);
            A.store.Bool(ptr + 1732 + 1288 + 27, false);
            A.store.Bool(ptr + 1732 + 1288 + 25, false);
          } else {
            A.store.Bool(ptr + 1732 + 1288 + 28, true);
            A.store.Ref(ptr + 1732 + 1288 + 0, x["OpenVPN"]["TLSRemote"]["Active"]);
            A.store.Ref(ptr + 1732 + 1288 + 4, x["OpenVPN"]["TLSRemote"]["Effective"]);
            A.store.Ref(ptr + 1732 + 1288 + 8, x["OpenVPN"]["TLSRemote"]["UserPolicy"]);
            A.store.Ref(ptr + 1732 + 1288 + 12, x["OpenVPN"]["TLSRemote"]["DevicePolicy"]);
            A.store.Ref(ptr + 1732 + 1288 + 16, x["OpenVPN"]["TLSRemote"]["UserSetting"]);
            A.store.Ref(ptr + 1732 + 1288 + 20, x["OpenVPN"]["TLSRemote"]["SharedSetting"]);
            A.store.Bool(ptr + 1732 + 1288 + 26, "UserEditable" in x["OpenVPN"]["TLSRemote"] ? true : false);
            A.store.Bool(ptr + 1732 + 1288 + 24, x["OpenVPN"]["TLSRemote"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1732 + 1288 + 27, "DeviceEditable" in x["OpenVPN"]["TLSRemote"] ? true : false);
            A.store.Bool(ptr + 1732 + 1288 + 25, x["OpenVPN"]["TLSRemote"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["OpenVPN"]["TLSVersionMin"] === "undefined") {
            A.store.Bool(ptr + 1732 + 1320 + 28, false);
            A.store.Ref(ptr + 1732 + 1320 + 0, undefined);
            A.store.Ref(ptr + 1732 + 1320 + 4, undefined);
            A.store.Ref(ptr + 1732 + 1320 + 8, undefined);
            A.store.Ref(ptr + 1732 + 1320 + 12, undefined);
            A.store.Ref(ptr + 1732 + 1320 + 16, undefined);
            A.store.Ref(ptr + 1732 + 1320 + 20, undefined);
            A.store.Bool(ptr + 1732 + 1320 + 26, false);
            A.store.Bool(ptr + 1732 + 1320 + 24, false);
            A.store.Bool(ptr + 1732 + 1320 + 27, false);
            A.store.Bool(ptr + 1732 + 1320 + 25, false);
          } else {
            A.store.Bool(ptr + 1732 + 1320 + 28, true);
            A.store.Ref(ptr + 1732 + 1320 + 0, x["OpenVPN"]["TLSVersionMin"]["Active"]);
            A.store.Ref(ptr + 1732 + 1320 + 4, x["OpenVPN"]["TLSVersionMin"]["Effective"]);
            A.store.Ref(ptr + 1732 + 1320 + 8, x["OpenVPN"]["TLSVersionMin"]["UserPolicy"]);
            A.store.Ref(ptr + 1732 + 1320 + 12, x["OpenVPN"]["TLSVersionMin"]["DevicePolicy"]);
            A.store.Ref(ptr + 1732 + 1320 + 16, x["OpenVPN"]["TLSVersionMin"]["UserSetting"]);
            A.store.Ref(ptr + 1732 + 1320 + 20, x["OpenVPN"]["TLSVersionMin"]["SharedSetting"]);
            A.store.Bool(ptr + 1732 + 1320 + 26, "UserEditable" in x["OpenVPN"]["TLSVersionMin"] ? true : false);
            A.store.Bool(ptr + 1732 + 1320 + 24, x["OpenVPN"]["TLSVersionMin"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1732 + 1320 + 27, "DeviceEditable" in x["OpenVPN"]["TLSVersionMin"] ? true : false);
            A.store.Bool(ptr + 1732 + 1320 + 25, x["OpenVPN"]["TLSVersionMin"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["OpenVPN"]["UserAuthenticationType"] === "undefined") {
            A.store.Bool(ptr + 1732 + 1352 + 28, false);
            A.store.Ref(ptr + 1732 + 1352 + 0, undefined);
            A.store.Ref(ptr + 1732 + 1352 + 4, undefined);
            A.store.Ref(ptr + 1732 + 1352 + 8, undefined);
            A.store.Ref(ptr + 1732 + 1352 + 12, undefined);
            A.store.Ref(ptr + 1732 + 1352 + 16, undefined);
            A.store.Ref(ptr + 1732 + 1352 + 20, undefined);
            A.store.Bool(ptr + 1732 + 1352 + 26, false);
            A.store.Bool(ptr + 1732 + 1352 + 24, false);
            A.store.Bool(ptr + 1732 + 1352 + 27, false);
            A.store.Bool(ptr + 1732 + 1352 + 25, false);
          } else {
            A.store.Bool(ptr + 1732 + 1352 + 28, true);
            A.store.Ref(ptr + 1732 + 1352 + 0, x["OpenVPN"]["UserAuthenticationType"]["Active"]);
            A.store.Ref(ptr + 1732 + 1352 + 4, x["OpenVPN"]["UserAuthenticationType"]["Effective"]);
            A.store.Ref(ptr + 1732 + 1352 + 8, x["OpenVPN"]["UserAuthenticationType"]["UserPolicy"]);
            A.store.Ref(ptr + 1732 + 1352 + 12, x["OpenVPN"]["UserAuthenticationType"]["DevicePolicy"]);
            A.store.Ref(ptr + 1732 + 1352 + 16, x["OpenVPN"]["UserAuthenticationType"]["UserSetting"]);
            A.store.Ref(ptr + 1732 + 1352 + 20, x["OpenVPN"]["UserAuthenticationType"]["SharedSetting"]);
            A.store.Bool(
              ptr + 1732 + 1352 + 26,
              "UserEditable" in x["OpenVPN"]["UserAuthenticationType"] ? true : false
            );
            A.store.Bool(ptr + 1732 + 1352 + 24, x["OpenVPN"]["UserAuthenticationType"]["UserEditable"] ? true : false);
            A.store.Bool(
              ptr + 1732 + 1352 + 27,
              "DeviceEditable" in x["OpenVPN"]["UserAuthenticationType"] ? true : false
            );
            A.store.Bool(
              ptr + 1732 + 1352 + 25,
              x["OpenVPN"]["UserAuthenticationType"]["DeviceEditable"] ? true : false
            );
          }

          if (typeof x["OpenVPN"]["Username"] === "undefined") {
            A.store.Bool(ptr + 1732 + 1384 + 28, false);
            A.store.Ref(ptr + 1732 + 1384 + 0, undefined);
            A.store.Ref(ptr + 1732 + 1384 + 4, undefined);
            A.store.Ref(ptr + 1732 + 1384 + 8, undefined);
            A.store.Ref(ptr + 1732 + 1384 + 12, undefined);
            A.store.Ref(ptr + 1732 + 1384 + 16, undefined);
            A.store.Ref(ptr + 1732 + 1384 + 20, undefined);
            A.store.Bool(ptr + 1732 + 1384 + 26, false);
            A.store.Bool(ptr + 1732 + 1384 + 24, false);
            A.store.Bool(ptr + 1732 + 1384 + 27, false);
            A.store.Bool(ptr + 1732 + 1384 + 25, false);
          } else {
            A.store.Bool(ptr + 1732 + 1384 + 28, true);
            A.store.Ref(ptr + 1732 + 1384 + 0, x["OpenVPN"]["Username"]["Active"]);
            A.store.Ref(ptr + 1732 + 1384 + 4, x["OpenVPN"]["Username"]["Effective"]);
            A.store.Ref(ptr + 1732 + 1384 + 8, x["OpenVPN"]["Username"]["UserPolicy"]);
            A.store.Ref(ptr + 1732 + 1384 + 12, x["OpenVPN"]["Username"]["DevicePolicy"]);
            A.store.Ref(ptr + 1732 + 1384 + 16, x["OpenVPN"]["Username"]["UserSetting"]);
            A.store.Ref(ptr + 1732 + 1384 + 20, x["OpenVPN"]["Username"]["SharedSetting"]);
            A.store.Bool(ptr + 1732 + 1384 + 26, "UserEditable" in x["OpenVPN"]["Username"] ? true : false);
            A.store.Bool(ptr + 1732 + 1384 + 24, x["OpenVPN"]["Username"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1732 + 1384 + 27, "DeviceEditable" in x["OpenVPN"]["Username"] ? true : false);
            A.store.Bool(ptr + 1732 + 1384 + 25, x["OpenVPN"]["Username"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["OpenVPN"]["Verb"] === "undefined") {
            A.store.Bool(ptr + 1732 + 1416 + 28, false);
            A.store.Ref(ptr + 1732 + 1416 + 0, undefined);
            A.store.Ref(ptr + 1732 + 1416 + 4, undefined);
            A.store.Ref(ptr + 1732 + 1416 + 8, undefined);
            A.store.Ref(ptr + 1732 + 1416 + 12, undefined);
            A.store.Ref(ptr + 1732 + 1416 + 16, undefined);
            A.store.Ref(ptr + 1732 + 1416 + 20, undefined);
            A.store.Bool(ptr + 1732 + 1416 + 26, false);
            A.store.Bool(ptr + 1732 + 1416 + 24, false);
            A.store.Bool(ptr + 1732 + 1416 + 27, false);
            A.store.Bool(ptr + 1732 + 1416 + 25, false);
          } else {
            A.store.Bool(ptr + 1732 + 1416 + 28, true);
            A.store.Ref(ptr + 1732 + 1416 + 0, x["OpenVPN"]["Verb"]["Active"]);
            A.store.Ref(ptr + 1732 + 1416 + 4, x["OpenVPN"]["Verb"]["Effective"]);
            A.store.Ref(ptr + 1732 + 1416 + 8, x["OpenVPN"]["Verb"]["UserPolicy"]);
            A.store.Ref(ptr + 1732 + 1416 + 12, x["OpenVPN"]["Verb"]["DevicePolicy"]);
            A.store.Ref(ptr + 1732 + 1416 + 16, x["OpenVPN"]["Verb"]["UserSetting"]);
            A.store.Ref(ptr + 1732 + 1416 + 20, x["OpenVPN"]["Verb"]["SharedSetting"]);
            A.store.Bool(ptr + 1732 + 1416 + 26, "UserEditable" in x["OpenVPN"]["Verb"] ? true : false);
            A.store.Bool(ptr + 1732 + 1416 + 24, x["OpenVPN"]["Verb"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1732 + 1416 + 27, "DeviceEditable" in x["OpenVPN"]["Verb"] ? true : false);
            A.store.Bool(ptr + 1732 + 1416 + 25, x["OpenVPN"]["Verb"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["OpenVPN"]["VerifyHash"] === "undefined") {
            A.store.Bool(ptr + 1732 + 1448 + 28, false);
            A.store.Ref(ptr + 1732 + 1448 + 0, undefined);
            A.store.Ref(ptr + 1732 + 1448 + 4, undefined);
            A.store.Ref(ptr + 1732 + 1448 + 8, undefined);
            A.store.Ref(ptr + 1732 + 1448 + 12, undefined);
            A.store.Ref(ptr + 1732 + 1448 + 16, undefined);
            A.store.Ref(ptr + 1732 + 1448 + 20, undefined);
            A.store.Bool(ptr + 1732 + 1448 + 26, false);
            A.store.Bool(ptr + 1732 + 1448 + 24, false);
            A.store.Bool(ptr + 1732 + 1448 + 27, false);
            A.store.Bool(ptr + 1732 + 1448 + 25, false);
          } else {
            A.store.Bool(ptr + 1732 + 1448 + 28, true);
            A.store.Ref(ptr + 1732 + 1448 + 0, x["OpenVPN"]["VerifyHash"]["Active"]);
            A.store.Ref(ptr + 1732 + 1448 + 4, x["OpenVPN"]["VerifyHash"]["Effective"]);
            A.store.Ref(ptr + 1732 + 1448 + 8, x["OpenVPN"]["VerifyHash"]["UserPolicy"]);
            A.store.Ref(ptr + 1732 + 1448 + 12, x["OpenVPN"]["VerifyHash"]["DevicePolicy"]);
            A.store.Ref(ptr + 1732 + 1448 + 16, x["OpenVPN"]["VerifyHash"]["UserSetting"]);
            A.store.Ref(ptr + 1732 + 1448 + 20, x["OpenVPN"]["VerifyHash"]["SharedSetting"]);
            A.store.Bool(ptr + 1732 + 1448 + 26, "UserEditable" in x["OpenVPN"]["VerifyHash"] ? true : false);
            A.store.Bool(ptr + 1732 + 1448 + 24, x["OpenVPN"]["VerifyHash"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1732 + 1448 + 27, "DeviceEditable" in x["OpenVPN"]["VerifyHash"] ? true : false);
            A.store.Bool(ptr + 1732 + 1448 + 25, x["OpenVPN"]["VerifyHash"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["OpenVPN"]["VerifyX509"] === "undefined") {
            A.store.Bool(ptr + 1732 + 1480 + 61, false);

            A.store.Bool(ptr + 1732 + 1480 + 0 + 28, false);
            A.store.Ref(ptr + 1732 + 1480 + 0 + 0, undefined);
            A.store.Ref(ptr + 1732 + 1480 + 0 + 4, undefined);
            A.store.Ref(ptr + 1732 + 1480 + 0 + 8, undefined);
            A.store.Ref(ptr + 1732 + 1480 + 0 + 12, undefined);
            A.store.Ref(ptr + 1732 + 1480 + 0 + 16, undefined);
            A.store.Ref(ptr + 1732 + 1480 + 0 + 20, undefined);
            A.store.Bool(ptr + 1732 + 1480 + 0 + 26, false);
            A.store.Bool(ptr + 1732 + 1480 + 0 + 24, false);
            A.store.Bool(ptr + 1732 + 1480 + 0 + 27, false);
            A.store.Bool(ptr + 1732 + 1480 + 0 + 25, false);

            A.store.Bool(ptr + 1732 + 1480 + 32 + 28, false);
            A.store.Ref(ptr + 1732 + 1480 + 32 + 0, undefined);
            A.store.Ref(ptr + 1732 + 1480 + 32 + 4, undefined);
            A.store.Ref(ptr + 1732 + 1480 + 32 + 8, undefined);
            A.store.Ref(ptr + 1732 + 1480 + 32 + 12, undefined);
            A.store.Ref(ptr + 1732 + 1480 + 32 + 16, undefined);
            A.store.Ref(ptr + 1732 + 1480 + 32 + 20, undefined);
            A.store.Bool(ptr + 1732 + 1480 + 32 + 26, false);
            A.store.Bool(ptr + 1732 + 1480 + 32 + 24, false);
            A.store.Bool(ptr + 1732 + 1480 + 32 + 27, false);
            A.store.Bool(ptr + 1732 + 1480 + 32 + 25, false);
          } else {
            A.store.Bool(ptr + 1732 + 1480 + 61, true);

            if (typeof x["OpenVPN"]["VerifyX509"]["Name"] === "undefined") {
              A.store.Bool(ptr + 1732 + 1480 + 0 + 28, false);
              A.store.Ref(ptr + 1732 + 1480 + 0 + 0, undefined);
              A.store.Ref(ptr + 1732 + 1480 + 0 + 4, undefined);
              A.store.Ref(ptr + 1732 + 1480 + 0 + 8, undefined);
              A.store.Ref(ptr + 1732 + 1480 + 0 + 12, undefined);
              A.store.Ref(ptr + 1732 + 1480 + 0 + 16, undefined);
              A.store.Ref(ptr + 1732 + 1480 + 0 + 20, undefined);
              A.store.Bool(ptr + 1732 + 1480 + 0 + 26, false);
              A.store.Bool(ptr + 1732 + 1480 + 0 + 24, false);
              A.store.Bool(ptr + 1732 + 1480 + 0 + 27, false);
              A.store.Bool(ptr + 1732 + 1480 + 0 + 25, false);
            } else {
              A.store.Bool(ptr + 1732 + 1480 + 0 + 28, true);
              A.store.Ref(ptr + 1732 + 1480 + 0 + 0, x["OpenVPN"]["VerifyX509"]["Name"]["Active"]);
              A.store.Ref(ptr + 1732 + 1480 + 0 + 4, x["OpenVPN"]["VerifyX509"]["Name"]["Effective"]);
              A.store.Ref(ptr + 1732 + 1480 + 0 + 8, x["OpenVPN"]["VerifyX509"]["Name"]["UserPolicy"]);
              A.store.Ref(ptr + 1732 + 1480 + 0 + 12, x["OpenVPN"]["VerifyX509"]["Name"]["DevicePolicy"]);
              A.store.Ref(ptr + 1732 + 1480 + 0 + 16, x["OpenVPN"]["VerifyX509"]["Name"]["UserSetting"]);
              A.store.Ref(ptr + 1732 + 1480 + 0 + 20, x["OpenVPN"]["VerifyX509"]["Name"]["SharedSetting"]);
              A.store.Bool(
                ptr + 1732 + 1480 + 0 + 26,
                "UserEditable" in x["OpenVPN"]["VerifyX509"]["Name"] ? true : false
              );
              A.store.Bool(
                ptr + 1732 + 1480 + 0 + 24,
                x["OpenVPN"]["VerifyX509"]["Name"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 1732 + 1480 + 0 + 27,
                "DeviceEditable" in x["OpenVPN"]["VerifyX509"]["Name"] ? true : false
              );
              A.store.Bool(
                ptr + 1732 + 1480 + 0 + 25,
                x["OpenVPN"]["VerifyX509"]["Name"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["OpenVPN"]["VerifyX509"]["Type"] === "undefined") {
              A.store.Bool(ptr + 1732 + 1480 + 32 + 28, false);
              A.store.Ref(ptr + 1732 + 1480 + 32 + 0, undefined);
              A.store.Ref(ptr + 1732 + 1480 + 32 + 4, undefined);
              A.store.Ref(ptr + 1732 + 1480 + 32 + 8, undefined);
              A.store.Ref(ptr + 1732 + 1480 + 32 + 12, undefined);
              A.store.Ref(ptr + 1732 + 1480 + 32 + 16, undefined);
              A.store.Ref(ptr + 1732 + 1480 + 32 + 20, undefined);
              A.store.Bool(ptr + 1732 + 1480 + 32 + 26, false);
              A.store.Bool(ptr + 1732 + 1480 + 32 + 24, false);
              A.store.Bool(ptr + 1732 + 1480 + 32 + 27, false);
              A.store.Bool(ptr + 1732 + 1480 + 32 + 25, false);
            } else {
              A.store.Bool(ptr + 1732 + 1480 + 32 + 28, true);
              A.store.Ref(ptr + 1732 + 1480 + 32 + 0, x["OpenVPN"]["VerifyX509"]["Type"]["Active"]);
              A.store.Ref(ptr + 1732 + 1480 + 32 + 4, x["OpenVPN"]["VerifyX509"]["Type"]["Effective"]);
              A.store.Ref(ptr + 1732 + 1480 + 32 + 8, x["OpenVPN"]["VerifyX509"]["Type"]["UserPolicy"]);
              A.store.Ref(ptr + 1732 + 1480 + 32 + 12, x["OpenVPN"]["VerifyX509"]["Type"]["DevicePolicy"]);
              A.store.Ref(ptr + 1732 + 1480 + 32 + 16, x["OpenVPN"]["VerifyX509"]["Type"]["UserSetting"]);
              A.store.Ref(ptr + 1732 + 1480 + 32 + 20, x["OpenVPN"]["VerifyX509"]["Type"]["SharedSetting"]);
              A.store.Bool(
                ptr + 1732 + 1480 + 32 + 26,
                "UserEditable" in x["OpenVPN"]["VerifyX509"]["Type"] ? true : false
              );
              A.store.Bool(
                ptr + 1732 + 1480 + 32 + 24,
                x["OpenVPN"]["VerifyX509"]["Type"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 1732 + 1480 + 32 + 27,
                "DeviceEditable" in x["OpenVPN"]["VerifyX509"]["Type"] ? true : false
              );
              A.store.Bool(
                ptr + 1732 + 1480 + 32 + 25,
                x["OpenVPN"]["VerifyX509"]["Type"]["DeviceEditable"] ? true : false
              );
            }
          }
        }

        if (typeof x["ThirdPartyVPN"] === "undefined") {
          A.store.Bool(ptr + 3276 + 36, false);

          A.store.Bool(ptr + 3276 + 0 + 28, false);
          A.store.Ref(ptr + 3276 + 0 + 0, undefined);
          A.store.Ref(ptr + 3276 + 0 + 4, undefined);
          A.store.Ref(ptr + 3276 + 0 + 8, undefined);
          A.store.Ref(ptr + 3276 + 0 + 12, undefined);
          A.store.Ref(ptr + 3276 + 0 + 16, undefined);
          A.store.Ref(ptr + 3276 + 0 + 20, undefined);
          A.store.Bool(ptr + 3276 + 0 + 26, false);
          A.store.Bool(ptr + 3276 + 0 + 24, false);
          A.store.Bool(ptr + 3276 + 0 + 27, false);
          A.store.Bool(ptr + 3276 + 0 + 25, false);
          A.store.Ref(ptr + 3276 + 32, undefined);
        } else {
          A.store.Bool(ptr + 3276 + 36, true);

          if (typeof x["ThirdPartyVPN"]["ExtensionID"] === "undefined") {
            A.store.Bool(ptr + 3276 + 0 + 28, false);
            A.store.Ref(ptr + 3276 + 0 + 0, undefined);
            A.store.Ref(ptr + 3276 + 0 + 4, undefined);
            A.store.Ref(ptr + 3276 + 0 + 8, undefined);
            A.store.Ref(ptr + 3276 + 0 + 12, undefined);
            A.store.Ref(ptr + 3276 + 0 + 16, undefined);
            A.store.Ref(ptr + 3276 + 0 + 20, undefined);
            A.store.Bool(ptr + 3276 + 0 + 26, false);
            A.store.Bool(ptr + 3276 + 0 + 24, false);
            A.store.Bool(ptr + 3276 + 0 + 27, false);
            A.store.Bool(ptr + 3276 + 0 + 25, false);
          } else {
            A.store.Bool(ptr + 3276 + 0 + 28, true);
            A.store.Ref(ptr + 3276 + 0 + 0, x["ThirdPartyVPN"]["ExtensionID"]["Active"]);
            A.store.Ref(ptr + 3276 + 0 + 4, x["ThirdPartyVPN"]["ExtensionID"]["Effective"]);
            A.store.Ref(ptr + 3276 + 0 + 8, x["ThirdPartyVPN"]["ExtensionID"]["UserPolicy"]);
            A.store.Ref(ptr + 3276 + 0 + 12, x["ThirdPartyVPN"]["ExtensionID"]["DevicePolicy"]);
            A.store.Ref(ptr + 3276 + 0 + 16, x["ThirdPartyVPN"]["ExtensionID"]["UserSetting"]);
            A.store.Ref(ptr + 3276 + 0 + 20, x["ThirdPartyVPN"]["ExtensionID"]["SharedSetting"]);
            A.store.Bool(ptr + 3276 + 0 + 26, "UserEditable" in x["ThirdPartyVPN"]["ExtensionID"] ? true : false);
            A.store.Bool(ptr + 3276 + 0 + 24, x["ThirdPartyVPN"]["ExtensionID"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 3276 + 0 + 27, "DeviceEditable" in x["ThirdPartyVPN"]["ExtensionID"] ? true : false);
            A.store.Bool(ptr + 3276 + 0 + 25, x["ThirdPartyVPN"]["ExtensionID"]["DeviceEditable"] ? true : false);
          }
          A.store.Ref(ptr + 3276 + 32, x["ThirdPartyVPN"]["ProviderName"]);
        }

        if (typeof x["Type"] === "undefined") {
          A.store.Bool(ptr + 3316 + 28, false);
          A.store.Ref(ptr + 3316 + 0, undefined);
          A.store.Ref(ptr + 3316 + 4, undefined);
          A.store.Ref(ptr + 3316 + 8, undefined);
          A.store.Ref(ptr + 3316 + 12, undefined);
          A.store.Ref(ptr + 3316 + 16, undefined);
          A.store.Ref(ptr + 3316 + 20, undefined);
          A.store.Bool(ptr + 3316 + 26, false);
          A.store.Bool(ptr + 3316 + 24, false);
          A.store.Bool(ptr + 3316 + 27, false);
          A.store.Bool(ptr + 3316 + 25, false);
        } else {
          A.store.Bool(ptr + 3316 + 28, true);
          A.store.Ref(ptr + 3316 + 0, x["Type"]["Active"]);
          A.store.Ref(ptr + 3316 + 4, x["Type"]["Effective"]);
          A.store.Ref(ptr + 3316 + 8, x["Type"]["UserPolicy"]);
          A.store.Ref(ptr + 3316 + 12, x["Type"]["DevicePolicy"]);
          A.store.Ref(ptr + 3316 + 16, x["Type"]["UserSetting"]);
          A.store.Ref(ptr + 3316 + 20, x["Type"]["SharedSetting"]);
          A.store.Bool(ptr + 3316 + 26, "UserEditable" in x["Type"] ? true : false);
          A.store.Bool(ptr + 3316 + 24, x["Type"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 3316 + 27, "DeviceEditable" in x["Type"] ? true : false);
          A.store.Bool(ptr + 3316 + 25, x["Type"]["DeviceEditable"] ? true : false);
        }
      }
    },
    "load_ManagedVPNProperties": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      if (A.load.Bool(ptr + 0 + 21)) {
        x["AutoConnect"] = {};
        if (A.load.Bool(ptr + 0 + 14)) {
          x["AutoConnect"]["Active"] = A.load.Bool(ptr + 0 + 0);
        } else {
          delete x["AutoConnect"]["Active"];
        }
        x["AutoConnect"]["Effective"] = A.load.Ref(ptr + 0 + 4, undefined);
        if (A.load.Bool(ptr + 0 + 15)) {
          x["AutoConnect"]["UserPolicy"] = A.load.Bool(ptr + 0 + 8);
        } else {
          delete x["AutoConnect"]["UserPolicy"];
        }
        if (A.load.Bool(ptr + 0 + 16)) {
          x["AutoConnect"]["DevicePolicy"] = A.load.Bool(ptr + 0 + 9);
        } else {
          delete x["AutoConnect"]["DevicePolicy"];
        }
        if (A.load.Bool(ptr + 0 + 17)) {
          x["AutoConnect"]["UserSetting"] = A.load.Bool(ptr + 0 + 10);
        } else {
          delete x["AutoConnect"]["UserSetting"];
        }
        if (A.load.Bool(ptr + 0 + 18)) {
          x["AutoConnect"]["SharedSetting"] = A.load.Bool(ptr + 0 + 11);
        } else {
          delete x["AutoConnect"]["SharedSetting"];
        }
        if (A.load.Bool(ptr + 0 + 19)) {
          x["AutoConnect"]["UserEditable"] = A.load.Bool(ptr + 0 + 12);
        } else {
          delete x["AutoConnect"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 0 + 20)) {
          x["AutoConnect"]["DeviceEditable"] = A.load.Bool(ptr + 0 + 13);
        } else {
          delete x["AutoConnect"]["DeviceEditable"];
        }
      } else {
        delete x["AutoConnect"];
      }
      if (A.load.Bool(ptr + 24 + 28)) {
        x["Host"] = {};
        x["Host"]["Active"] = A.load.Ref(ptr + 24 + 0, undefined);
        x["Host"]["Effective"] = A.load.Ref(ptr + 24 + 4, undefined);
        x["Host"]["UserPolicy"] = A.load.Ref(ptr + 24 + 8, undefined);
        x["Host"]["DevicePolicy"] = A.load.Ref(ptr + 24 + 12, undefined);
        x["Host"]["UserSetting"] = A.load.Ref(ptr + 24 + 16, undefined);
        x["Host"]["SharedSetting"] = A.load.Ref(ptr + 24 + 20, undefined);
        if (A.load.Bool(ptr + 24 + 26)) {
          x["Host"]["UserEditable"] = A.load.Bool(ptr + 24 + 24);
        } else {
          delete x["Host"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 24 + 27)) {
          x["Host"]["DeviceEditable"] = A.load.Bool(ptr + 24 + 25);
        } else {
          delete x["Host"]["DeviceEditable"];
        }
      } else {
        delete x["Host"];
      }
      if (A.load.Bool(ptr + 56 + 1562)) {
        x["IPsec"] = {};
        if (A.load.Bool(ptr + 56 + 0 + 28)) {
          x["IPsec"]["AuthenticationType"] = {};
          x["IPsec"]["AuthenticationType"]["Active"] = A.load.Ref(ptr + 56 + 0 + 0, undefined);
          x["IPsec"]["AuthenticationType"]["Effective"] = A.load.Ref(ptr + 56 + 0 + 4, undefined);
          x["IPsec"]["AuthenticationType"]["UserPolicy"] = A.load.Ref(ptr + 56 + 0 + 8, undefined);
          x["IPsec"]["AuthenticationType"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 0 + 12, undefined);
          x["IPsec"]["AuthenticationType"]["UserSetting"] = A.load.Ref(ptr + 56 + 0 + 16, undefined);
          x["IPsec"]["AuthenticationType"]["SharedSetting"] = A.load.Ref(ptr + 56 + 0 + 20, undefined);
          if (A.load.Bool(ptr + 56 + 0 + 26)) {
            x["IPsec"]["AuthenticationType"]["UserEditable"] = A.load.Bool(ptr + 56 + 0 + 24);
          } else {
            delete x["IPsec"]["AuthenticationType"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 56 + 0 + 27)) {
            x["IPsec"]["AuthenticationType"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 0 + 25);
          } else {
            delete x["IPsec"]["AuthenticationType"]["DeviceEditable"];
          }
        } else {
          delete x["IPsec"]["AuthenticationType"];
        }
        if (A.load.Bool(ptr + 56 + 32 + 318)) {
          x["IPsec"]["ClientCertPattern"] = {};
          if (A.load.Bool(ptr + 56 + 32 + 0 + 28)) {
            x["IPsec"]["ClientCertPattern"]["EnrollmentURI"] = {};
            x["IPsec"]["ClientCertPattern"]["EnrollmentURI"]["Active"] = A.load.Ref(ptr + 56 + 32 + 0 + 0, undefined);
            x["IPsec"]["ClientCertPattern"]["EnrollmentURI"]["Effective"] = A.load.Ref(
              ptr + 56 + 32 + 0 + 4,
              undefined
            );
            x["IPsec"]["ClientCertPattern"]["EnrollmentURI"]["UserPolicy"] = A.load.Ref(
              ptr + 56 + 32 + 0 + 8,
              undefined
            );
            x["IPsec"]["ClientCertPattern"]["EnrollmentURI"]["DevicePolicy"] = A.load.Ref(
              ptr + 56 + 32 + 0 + 12,
              undefined
            );
            x["IPsec"]["ClientCertPattern"]["EnrollmentURI"]["UserSetting"] = A.load.Ref(
              ptr + 56 + 32 + 0 + 16,
              undefined
            );
            x["IPsec"]["ClientCertPattern"]["EnrollmentURI"]["SharedSetting"] = A.load.Ref(
              ptr + 56 + 32 + 0 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 56 + 32 + 0 + 26)) {
              x["IPsec"]["ClientCertPattern"]["EnrollmentURI"]["UserEditable"] = A.load.Bool(ptr + 56 + 32 + 0 + 24);
            } else {
              delete x["IPsec"]["ClientCertPattern"]["EnrollmentURI"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 56 + 32 + 0 + 27)) {
              x["IPsec"]["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 32 + 0 + 25);
            } else {
              delete x["IPsec"]["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"];
            }
          } else {
            delete x["IPsec"]["ClientCertPattern"]["EnrollmentURI"];
          }
          if (A.load.Bool(ptr + 56 + 32 + 32 + 125)) {
            x["IPsec"]["ClientCertPattern"]["Issuer"] = {};
            if (A.load.Bool(ptr + 56 + 32 + 32 + 0 + 28)) {
              x["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"] = {};
              x["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]["Active"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 0 + 0,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]["Effective"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 0 + 4,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserPolicy"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 0 + 8,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]["DevicePolicy"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 0 + 12,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserSetting"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 0 + 16,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]["SharedSetting"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 0 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 56 + 32 + 32 + 0 + 26)) {
                x["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"] = A.load.Bool(
                  ptr + 56 + 32 + 32 + 0 + 24
                );
              } else {
                delete x["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 56 + 32 + 32 + 0 + 27)) {
                x["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"] = A.load.Bool(
                  ptr + 56 + 32 + 32 + 0 + 25
                );
              } else {
                delete x["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"];
              }
            } else {
              delete x["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"];
            }
            if (A.load.Bool(ptr + 56 + 32 + 32 + 32 + 28)) {
              x["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"] = {};
              x["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]["Active"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 32 + 0,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]["Effective"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 32 + 4,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]["UserPolicy"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 32 + 8,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]["DevicePolicy"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 32 + 12,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]["UserSetting"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 32 + 16,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]["SharedSetting"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 32 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 56 + 32 + 32 + 32 + 26)) {
                x["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"] = A.load.Bool(
                  ptr + 56 + 32 + 32 + 32 + 24
                );
              } else {
                delete x["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 56 + 32 + 32 + 32 + 27)) {
                x["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"] = A.load.Bool(
                  ptr + 56 + 32 + 32 + 32 + 25
                );
              } else {
                delete x["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"];
              }
            } else {
              delete x["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"];
            }
            if (A.load.Bool(ptr + 56 + 32 + 32 + 64 + 28)) {
              x["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"] = {};
              x["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]["Active"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 64 + 0,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]["Effective"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 64 + 4,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]["UserPolicy"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 64 + 8,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]["DevicePolicy"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 64 + 12,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]["UserSetting"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 64 + 16,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]["SharedSetting"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 64 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 56 + 32 + 32 + 64 + 26)) {
                x["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"] = A.load.Bool(
                  ptr + 56 + 32 + 32 + 64 + 24
                );
              } else {
                delete x["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 56 + 32 + 32 + 64 + 27)) {
                x["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"] = A.load.Bool(
                  ptr + 56 + 32 + 32 + 64 + 25
                );
              } else {
                delete x["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"];
              }
            } else {
              delete x["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"];
            }
            if (A.load.Bool(ptr + 56 + 32 + 32 + 96 + 28)) {
              x["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = {};
              x["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Active"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 96 + 0,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Effective"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 96 + 4,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserPolicy"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 96 + 8,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DevicePolicy"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 96 + 12,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserSetting"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 96 + 16,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["SharedSetting"] = A.load.Ref(
                ptr + 56 + 32 + 32 + 96 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 56 + 32 + 32 + 96 + 26)) {
                x["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"] = A.load.Bool(
                  ptr + 56 + 32 + 32 + 96 + 24
                );
              } else {
                delete x["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 56 + 32 + 32 + 96 + 27)) {
                x["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"] = A.load.Bool(
                  ptr + 56 + 32 + 32 + 96 + 25
                );
              } else {
                delete x["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"];
              }
            } else {
              delete x["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"];
            }
          } else {
            delete x["IPsec"]["ClientCertPattern"]["Issuer"];
          }
          if (A.load.Bool(ptr + 56 + 32 + 160 + 28)) {
            x["IPsec"]["ClientCertPattern"]["IssuerCARef"] = {};
            x["IPsec"]["ClientCertPattern"]["IssuerCARef"]["Active"] = A.load.Ref(ptr + 56 + 32 + 160 + 0, undefined);
            x["IPsec"]["ClientCertPattern"]["IssuerCARef"]["Effective"] = A.load.Ref(
              ptr + 56 + 32 + 160 + 4,
              undefined
            );
            x["IPsec"]["ClientCertPattern"]["IssuerCARef"]["UserPolicy"] = A.load.Ref(
              ptr + 56 + 32 + 160 + 8,
              undefined
            );
            x["IPsec"]["ClientCertPattern"]["IssuerCARef"]["DevicePolicy"] = A.load.Ref(
              ptr + 56 + 32 + 160 + 12,
              undefined
            );
            x["IPsec"]["ClientCertPattern"]["IssuerCARef"]["UserSetting"] = A.load.Ref(
              ptr + 56 + 32 + 160 + 16,
              undefined
            );
            x["IPsec"]["ClientCertPattern"]["IssuerCARef"]["SharedSetting"] = A.load.Ref(
              ptr + 56 + 32 + 160 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 56 + 32 + 160 + 26)) {
              x["IPsec"]["ClientCertPattern"]["IssuerCARef"]["UserEditable"] = A.load.Bool(ptr + 56 + 32 + 160 + 24);
            } else {
              delete x["IPsec"]["ClientCertPattern"]["IssuerCARef"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 56 + 32 + 160 + 27)) {
              x["IPsec"]["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 32 + 160 + 25);
            } else {
              delete x["IPsec"]["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"];
            }
          } else {
            delete x["IPsec"]["ClientCertPattern"]["IssuerCARef"];
          }
          if (A.load.Bool(ptr + 56 + 32 + 192 + 125)) {
            x["IPsec"]["ClientCertPattern"]["Subject"] = {};
            if (A.load.Bool(ptr + 56 + 32 + 192 + 0 + 28)) {
              x["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"] = {};
              x["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]["Active"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 0 + 0,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]["Effective"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 0 + 4,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]["UserPolicy"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 0 + 8,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]["DevicePolicy"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 0 + 12,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]["UserSetting"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 0 + 16,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]["SharedSetting"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 0 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 56 + 32 + 192 + 0 + 26)) {
                x["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"] = A.load.Bool(
                  ptr + 56 + 32 + 192 + 0 + 24
                );
              } else {
                delete x["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 56 + 32 + 192 + 0 + 27)) {
                x["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"] = A.load.Bool(
                  ptr + 56 + 32 + 192 + 0 + 25
                );
              } else {
                delete x["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"];
              }
            } else {
              delete x["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"];
            }
            if (A.load.Bool(ptr + 56 + 32 + 192 + 32 + 28)) {
              x["IPsec"]["ClientCertPattern"]["Subject"]["Locality"] = {};
              x["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]["Active"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 32 + 0,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]["Effective"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 32 + 4,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]["UserPolicy"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 32 + 8,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]["DevicePolicy"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 32 + 12,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]["UserSetting"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 32 + 16,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]["SharedSetting"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 32 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 56 + 32 + 192 + 32 + 26)) {
                x["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"] = A.load.Bool(
                  ptr + 56 + 32 + 192 + 32 + 24
                );
              } else {
                delete x["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 56 + 32 + 192 + 32 + 27)) {
                x["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"] = A.load.Bool(
                  ptr + 56 + 32 + 192 + 32 + 25
                );
              } else {
                delete x["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"];
              }
            } else {
              delete x["IPsec"]["ClientCertPattern"]["Subject"]["Locality"];
            }
            if (A.load.Bool(ptr + 56 + 32 + 192 + 64 + 28)) {
              x["IPsec"]["ClientCertPattern"]["Subject"]["Organization"] = {};
              x["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]["Active"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 64 + 0,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]["Effective"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 64 + 4,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]["UserPolicy"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 64 + 8,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]["DevicePolicy"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 64 + 12,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]["UserSetting"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 64 + 16,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]["SharedSetting"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 64 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 56 + 32 + 192 + 64 + 26)) {
                x["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"] = A.load.Bool(
                  ptr + 56 + 32 + 192 + 64 + 24
                );
              } else {
                delete x["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 56 + 32 + 192 + 64 + 27)) {
                x["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"] = A.load.Bool(
                  ptr + 56 + 32 + 192 + 64 + 25
                );
              } else {
                delete x["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"];
              }
            } else {
              delete x["IPsec"]["ClientCertPattern"]["Subject"]["Organization"];
            }
            if (A.load.Bool(ptr + 56 + 32 + 192 + 96 + 28)) {
              x["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = {};
              x["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Active"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 96 + 0,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Effective"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 96 + 4,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserPolicy"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 96 + 8,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DevicePolicy"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 96 + 12,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserSetting"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 96 + 16,
                undefined
              );
              x["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["SharedSetting"] = A.load.Ref(
                ptr + 56 + 32 + 192 + 96 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 56 + 32 + 192 + 96 + 26)) {
                x["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"] = A.load.Bool(
                  ptr + 56 + 32 + 192 + 96 + 24
                );
              } else {
                delete x["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 56 + 32 + 192 + 96 + 27)) {
                x["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"] = A.load.Bool(
                  ptr + 56 + 32 + 192 + 96 + 25
                );
              } else {
                delete x["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"];
              }
            } else {
              delete x["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"];
            }
          } else {
            delete x["IPsec"]["ClientCertPattern"]["Subject"];
          }
        } else {
          delete x["IPsec"]["ClientCertPattern"];
        }
        if (A.load.Bool(ptr + 56 + 352 + 28)) {
          x["IPsec"]["ClientCertPKCS11Id"] = {};
          x["IPsec"]["ClientCertPKCS11Id"]["Active"] = A.load.Ref(ptr + 56 + 352 + 0, undefined);
          x["IPsec"]["ClientCertPKCS11Id"]["Effective"] = A.load.Ref(ptr + 56 + 352 + 4, undefined);
          x["IPsec"]["ClientCertPKCS11Id"]["UserPolicy"] = A.load.Ref(ptr + 56 + 352 + 8, undefined);
          x["IPsec"]["ClientCertPKCS11Id"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 352 + 12, undefined);
          x["IPsec"]["ClientCertPKCS11Id"]["UserSetting"] = A.load.Ref(ptr + 56 + 352 + 16, undefined);
          x["IPsec"]["ClientCertPKCS11Id"]["SharedSetting"] = A.load.Ref(ptr + 56 + 352 + 20, undefined);
          if (A.load.Bool(ptr + 56 + 352 + 26)) {
            x["IPsec"]["ClientCertPKCS11Id"]["UserEditable"] = A.load.Bool(ptr + 56 + 352 + 24);
          } else {
            delete x["IPsec"]["ClientCertPKCS11Id"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 56 + 352 + 27)) {
            x["IPsec"]["ClientCertPKCS11Id"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 352 + 25);
          } else {
            delete x["IPsec"]["ClientCertPKCS11Id"]["DeviceEditable"];
          }
        } else {
          delete x["IPsec"]["ClientCertPKCS11Id"];
        }
        if (A.load.Bool(ptr + 56 + 384 + 28)) {
          x["IPsec"]["ClientCertProvisioningProfileId"] = {};
          x["IPsec"]["ClientCertProvisioningProfileId"]["Active"] = A.load.Ref(ptr + 56 + 384 + 0, undefined);
          x["IPsec"]["ClientCertProvisioningProfileId"]["Effective"] = A.load.Ref(ptr + 56 + 384 + 4, undefined);
          x["IPsec"]["ClientCertProvisioningProfileId"]["UserPolicy"] = A.load.Ref(ptr + 56 + 384 + 8, undefined);
          x["IPsec"]["ClientCertProvisioningProfileId"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 384 + 12, undefined);
          x["IPsec"]["ClientCertProvisioningProfileId"]["UserSetting"] = A.load.Ref(ptr + 56 + 384 + 16, undefined);
          x["IPsec"]["ClientCertProvisioningProfileId"]["SharedSetting"] = A.load.Ref(ptr + 56 + 384 + 20, undefined);
          if (A.load.Bool(ptr + 56 + 384 + 26)) {
            x["IPsec"]["ClientCertProvisioningProfileId"]["UserEditable"] = A.load.Bool(ptr + 56 + 384 + 24);
          } else {
            delete x["IPsec"]["ClientCertProvisioningProfileId"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 56 + 384 + 27)) {
            x["IPsec"]["ClientCertProvisioningProfileId"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 384 + 25);
          } else {
            delete x["IPsec"]["ClientCertProvisioningProfileId"]["DeviceEditable"];
          }
        } else {
          delete x["IPsec"]["ClientCertProvisioningProfileId"];
        }
        if (A.load.Bool(ptr + 56 + 416 + 28)) {
          x["IPsec"]["ClientCertRef"] = {};
          x["IPsec"]["ClientCertRef"]["Active"] = A.load.Ref(ptr + 56 + 416 + 0, undefined);
          x["IPsec"]["ClientCertRef"]["Effective"] = A.load.Ref(ptr + 56 + 416 + 4, undefined);
          x["IPsec"]["ClientCertRef"]["UserPolicy"] = A.load.Ref(ptr + 56 + 416 + 8, undefined);
          x["IPsec"]["ClientCertRef"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 416 + 12, undefined);
          x["IPsec"]["ClientCertRef"]["UserSetting"] = A.load.Ref(ptr + 56 + 416 + 16, undefined);
          x["IPsec"]["ClientCertRef"]["SharedSetting"] = A.load.Ref(ptr + 56 + 416 + 20, undefined);
          if (A.load.Bool(ptr + 56 + 416 + 26)) {
            x["IPsec"]["ClientCertRef"]["UserEditable"] = A.load.Bool(ptr + 56 + 416 + 24);
          } else {
            delete x["IPsec"]["ClientCertRef"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 56 + 416 + 27)) {
            x["IPsec"]["ClientCertRef"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 416 + 25);
          } else {
            delete x["IPsec"]["ClientCertRef"]["DeviceEditable"];
          }
        } else {
          delete x["IPsec"]["ClientCertRef"];
        }
        if (A.load.Bool(ptr + 56 + 448 + 28)) {
          x["IPsec"]["ClientCertType"] = {};
          x["IPsec"]["ClientCertType"]["Active"] = A.load.Ref(ptr + 56 + 448 + 0, undefined);
          x["IPsec"]["ClientCertType"]["Effective"] = A.load.Ref(ptr + 56 + 448 + 4, undefined);
          x["IPsec"]["ClientCertType"]["UserPolicy"] = A.load.Ref(ptr + 56 + 448 + 8, undefined);
          x["IPsec"]["ClientCertType"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 448 + 12, undefined);
          x["IPsec"]["ClientCertType"]["UserSetting"] = A.load.Ref(ptr + 56 + 448 + 16, undefined);
          x["IPsec"]["ClientCertType"]["SharedSetting"] = A.load.Ref(ptr + 56 + 448 + 20, undefined);
          if (A.load.Bool(ptr + 56 + 448 + 26)) {
            x["IPsec"]["ClientCertType"]["UserEditable"] = A.load.Bool(ptr + 56 + 448 + 24);
          } else {
            delete x["IPsec"]["ClientCertType"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 56 + 448 + 27)) {
            x["IPsec"]["ClientCertType"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 448 + 25);
          } else {
            delete x["IPsec"]["ClientCertType"]["DeviceEditable"];
          }
        } else {
          delete x["IPsec"]["ClientCertType"];
        }
        if (A.load.Bool(ptr + 56 + 480 + 806)) {
          x["IPsec"]["EAP"] = {};
          if (A.load.Bool(ptr + 56 + 480 + 0 + 28)) {
            x["IPsec"]["EAP"]["AnonymousIdentity"] = {};
            x["IPsec"]["EAP"]["AnonymousIdentity"]["Active"] = A.load.Ref(ptr + 56 + 480 + 0 + 0, undefined);
            x["IPsec"]["EAP"]["AnonymousIdentity"]["Effective"] = A.load.Ref(ptr + 56 + 480 + 0 + 4, undefined);
            x["IPsec"]["EAP"]["AnonymousIdentity"]["UserPolicy"] = A.load.Ref(ptr + 56 + 480 + 0 + 8, undefined);
            x["IPsec"]["EAP"]["AnonymousIdentity"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 480 + 0 + 12, undefined);
            x["IPsec"]["EAP"]["AnonymousIdentity"]["UserSetting"] = A.load.Ref(ptr + 56 + 480 + 0 + 16, undefined);
            x["IPsec"]["EAP"]["AnonymousIdentity"]["SharedSetting"] = A.load.Ref(ptr + 56 + 480 + 0 + 20, undefined);
            if (A.load.Bool(ptr + 56 + 480 + 0 + 26)) {
              x["IPsec"]["EAP"]["AnonymousIdentity"]["UserEditable"] = A.load.Bool(ptr + 56 + 480 + 0 + 24);
            } else {
              delete x["IPsec"]["EAP"]["AnonymousIdentity"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 56 + 480 + 0 + 27)) {
              x["IPsec"]["EAP"]["AnonymousIdentity"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 480 + 0 + 25);
            } else {
              delete x["IPsec"]["EAP"]["AnonymousIdentity"]["DeviceEditable"];
            }
          } else {
            delete x["IPsec"]["EAP"]["AnonymousIdentity"];
          }
          if (A.load.Bool(ptr + 56 + 480 + 32 + 318)) {
            x["IPsec"]["EAP"]["ClientCertPattern"] = {};
            if (A.load.Bool(ptr + 56 + 480 + 32 + 0 + 28)) {
              x["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] = {};
              x["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["Active"] = A.load.Ref(
                ptr + 56 + 480 + 32 + 0 + 0,
                undefined
              );
              x["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["Effective"] = A.load.Ref(
                ptr + 56 + 480 + 32 + 0 + 4,
                undefined
              );
              x["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserPolicy"] = A.load.Ref(
                ptr + 56 + 480 + 32 + 0 + 8,
                undefined
              );
              x["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["DevicePolicy"] = A.load.Ref(
                ptr + 56 + 480 + 32 + 0 + 12,
                undefined
              );
              x["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserSetting"] = A.load.Ref(
                ptr + 56 + 480 + 32 + 0 + 16,
                undefined
              );
              x["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["SharedSetting"] = A.load.Ref(
                ptr + 56 + 480 + 32 + 0 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 56 + 480 + 32 + 0 + 26)) {
                x["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserEditable"] = A.load.Bool(
                  ptr + 56 + 480 + 32 + 0 + 24
                );
              } else {
                delete x["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 56 + 480 + 32 + 0 + 27)) {
                x["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"] = A.load.Bool(
                  ptr + 56 + 480 + 32 + 0 + 25
                );
              } else {
                delete x["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"];
              }
            } else {
              delete x["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"];
            }
            if (A.load.Bool(ptr + 56 + 480 + 32 + 32 + 125)) {
              x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"] = {};
              if (A.load.Bool(ptr + 56 + 480 + 32 + 32 + 0 + 28)) {
                x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] = {};
                x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["Active"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 32 + 0 + 0,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["Effective"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 32 + 0 + 4,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserPolicy"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 32 + 0 + 8,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["DevicePolicy"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 32 + 0 + 12,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserSetting"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 32 + 0 + 16,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["SharedSetting"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 32 + 0 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 56 + 480 + 32 + 32 + 0 + 26)) {
                  x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"] = A.load.Bool(
                    ptr + 56 + 480 + 32 + 32 + 0 + 24
                  );
                } else {
                  delete x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 56 + 480 + 32 + 32 + 0 + 27)) {
                  x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"] = A.load.Bool(
                    ptr + 56 + 480 + 32 + 32 + 0 + 25
                  );
                } else {
                  delete x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"];
                }
              } else {
                delete x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"];
              }
              if (A.load.Bool(ptr + 56 + 480 + 32 + 32 + 32 + 28)) {
                x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] = {};
                x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["Active"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 32 + 32 + 0,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["Effective"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 32 + 32 + 4,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserPolicy"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 32 + 32 + 8,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["DevicePolicy"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 32 + 32 + 12,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserSetting"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 32 + 32 + 16,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["SharedSetting"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 32 + 32 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 56 + 480 + 32 + 32 + 32 + 26)) {
                  x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"] = A.load.Bool(
                    ptr + 56 + 480 + 32 + 32 + 32 + 24
                  );
                } else {
                  delete x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 56 + 480 + 32 + 32 + 32 + 27)) {
                  x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"] = A.load.Bool(
                    ptr + 56 + 480 + 32 + 32 + 32 + 25
                  );
                } else {
                  delete x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"];
                }
              } else {
                delete x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"];
              }
              if (A.load.Bool(ptr + 56 + 480 + 32 + 32 + 64 + 28)) {
                x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] = {};
                x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["Active"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 32 + 64 + 0,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["Effective"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 32 + 64 + 4,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserPolicy"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 32 + 64 + 8,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["DevicePolicy"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 32 + 64 + 12,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserSetting"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 32 + 64 + 16,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["SharedSetting"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 32 + 64 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 56 + 480 + 32 + 32 + 64 + 26)) {
                  x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"] = A.load.Bool(
                    ptr + 56 + 480 + 32 + 32 + 64 + 24
                  );
                } else {
                  delete x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 56 + 480 + 32 + 32 + 64 + 27)) {
                  x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"] = A.load.Bool(
                    ptr + 56 + 480 + 32 + 32 + 64 + 25
                  );
                } else {
                  delete x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"];
                }
              } else {
                delete x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"];
              }
              if (A.load.Bool(ptr + 56 + 480 + 32 + 32 + 96 + 28)) {
                x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = {};
                x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Active"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 32 + 96 + 0,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Effective"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 32 + 96 + 4,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserPolicy"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 32 + 96 + 8,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DevicePolicy"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 32 + 96 + 12,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserSetting"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 32 + 96 + 16,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["SharedSetting"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 32 + 96 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 56 + 480 + 32 + 32 + 96 + 26)) {
                  x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"] = A.load.Bool(
                    ptr + 56 + 480 + 32 + 32 + 96 + 24
                  );
                } else {
                  delete x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 56 + 480 + 32 + 32 + 96 + 27)) {
                  x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"] =
                    A.load.Bool(ptr + 56 + 480 + 32 + 32 + 96 + 25);
                } else {
                  delete x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"];
                }
              } else {
                delete x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"];
              }
            } else {
              delete x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"];
            }
            if (A.load.Bool(ptr + 56 + 480 + 32 + 160 + 28)) {
              x["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"] = {};
              x["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["Active"] = A.load.Ref(
                ptr + 56 + 480 + 32 + 160 + 0,
                undefined
              );
              x["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["Effective"] = A.load.Ref(
                ptr + 56 + 480 + 32 + 160 + 4,
                undefined
              );
              x["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserPolicy"] = A.load.Ref(
                ptr + 56 + 480 + 32 + 160 + 8,
                undefined
              );
              x["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["DevicePolicy"] = A.load.Ref(
                ptr + 56 + 480 + 32 + 160 + 12,
                undefined
              );
              x["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserSetting"] = A.load.Ref(
                ptr + 56 + 480 + 32 + 160 + 16,
                undefined
              );
              x["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["SharedSetting"] = A.load.Ref(
                ptr + 56 + 480 + 32 + 160 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 56 + 480 + 32 + 160 + 26)) {
                x["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserEditable"] = A.load.Bool(
                  ptr + 56 + 480 + 32 + 160 + 24
                );
              } else {
                delete x["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 56 + 480 + 32 + 160 + 27)) {
                x["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"] = A.load.Bool(
                  ptr + 56 + 480 + 32 + 160 + 25
                );
              } else {
                delete x["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"];
              }
            } else {
              delete x["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"];
            }
            if (A.load.Bool(ptr + 56 + 480 + 32 + 192 + 125)) {
              x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"] = {};
              if (A.load.Bool(ptr + 56 + 480 + 32 + 192 + 0 + 28)) {
                x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] = {};
                x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["Active"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 192 + 0 + 0,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["Effective"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 192 + 0 + 4,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserPolicy"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 192 + 0 + 8,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["DevicePolicy"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 192 + 0 + 12,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserSetting"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 192 + 0 + 16,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["SharedSetting"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 192 + 0 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 56 + 480 + 32 + 192 + 0 + 26)) {
                  x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"] = A.load.Bool(
                    ptr + 56 + 480 + 32 + 192 + 0 + 24
                  );
                } else {
                  delete x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 56 + 480 + 32 + 192 + 0 + 27)) {
                  x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"] = A.load.Bool(
                    ptr + 56 + 480 + 32 + 192 + 0 + 25
                  );
                } else {
                  delete x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"];
                }
              } else {
                delete x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"];
              }
              if (A.load.Bool(ptr + 56 + 480 + 32 + 192 + 32 + 28)) {
                x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"] = {};
                x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["Active"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 192 + 32 + 0,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["Effective"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 192 + 32 + 4,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserPolicy"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 192 + 32 + 8,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["DevicePolicy"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 192 + 32 + 12,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserSetting"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 192 + 32 + 16,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["SharedSetting"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 192 + 32 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 56 + 480 + 32 + 192 + 32 + 26)) {
                  x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"] = A.load.Bool(
                    ptr + 56 + 480 + 32 + 192 + 32 + 24
                  );
                } else {
                  delete x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 56 + 480 + 32 + 192 + 32 + 27)) {
                  x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"] = A.load.Bool(
                    ptr + 56 + 480 + 32 + 192 + 32 + 25
                  );
                } else {
                  delete x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"];
                }
              } else {
                delete x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"];
              }
              if (A.load.Bool(ptr + 56 + 480 + 32 + 192 + 64 + 28)) {
                x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"] = {};
                x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["Active"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 192 + 64 + 0,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["Effective"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 192 + 64 + 4,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserPolicy"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 192 + 64 + 8,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["DevicePolicy"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 192 + 64 + 12,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserSetting"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 192 + 64 + 16,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["SharedSetting"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 192 + 64 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 56 + 480 + 32 + 192 + 64 + 26)) {
                  x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"] = A.load.Bool(
                    ptr + 56 + 480 + 32 + 192 + 64 + 24
                  );
                } else {
                  delete x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 56 + 480 + 32 + 192 + 64 + 27)) {
                  x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"] = A.load.Bool(
                    ptr + 56 + 480 + 32 + 192 + 64 + 25
                  );
                } else {
                  delete x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"];
                }
              } else {
                delete x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"];
              }
              if (A.load.Bool(ptr + 56 + 480 + 32 + 192 + 96 + 28)) {
                x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = {};
                x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Active"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 192 + 96 + 0,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Effective"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 192 + 96 + 4,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserPolicy"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 192 + 96 + 8,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DevicePolicy"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 192 + 96 + 12,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserSetting"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 192 + 96 + 16,
                  undefined
                );
                x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["SharedSetting"] = A.load.Ref(
                  ptr + 56 + 480 + 32 + 192 + 96 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 56 + 480 + 32 + 192 + 96 + 26)) {
                  x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"] = A.load.Bool(
                    ptr + 56 + 480 + 32 + 192 + 96 + 24
                  );
                } else {
                  delete x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 56 + 480 + 32 + 192 + 96 + 27)) {
                  x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"] =
                    A.load.Bool(ptr + 56 + 480 + 32 + 192 + 96 + 25);
                } else {
                  delete x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"];
                }
              } else {
                delete x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"];
              }
            } else {
              delete x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"];
            }
          } else {
            delete x["IPsec"]["EAP"]["ClientCertPattern"];
          }
          if (A.load.Bool(ptr + 56 + 480 + 352 + 28)) {
            x["IPsec"]["EAP"]["ClientCertPKCS11Id"] = {};
            x["IPsec"]["EAP"]["ClientCertPKCS11Id"]["Active"] = A.load.Ref(ptr + 56 + 480 + 352 + 0, undefined);
            x["IPsec"]["EAP"]["ClientCertPKCS11Id"]["Effective"] = A.load.Ref(ptr + 56 + 480 + 352 + 4, undefined);
            x["IPsec"]["EAP"]["ClientCertPKCS11Id"]["UserPolicy"] = A.load.Ref(ptr + 56 + 480 + 352 + 8, undefined);
            x["IPsec"]["EAP"]["ClientCertPKCS11Id"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 480 + 352 + 12, undefined);
            x["IPsec"]["EAP"]["ClientCertPKCS11Id"]["UserSetting"] = A.load.Ref(ptr + 56 + 480 + 352 + 16, undefined);
            x["IPsec"]["EAP"]["ClientCertPKCS11Id"]["SharedSetting"] = A.load.Ref(ptr + 56 + 480 + 352 + 20, undefined);
            if (A.load.Bool(ptr + 56 + 480 + 352 + 26)) {
              x["IPsec"]["EAP"]["ClientCertPKCS11Id"]["UserEditable"] = A.load.Bool(ptr + 56 + 480 + 352 + 24);
            } else {
              delete x["IPsec"]["EAP"]["ClientCertPKCS11Id"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 56 + 480 + 352 + 27)) {
              x["IPsec"]["EAP"]["ClientCertPKCS11Id"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 480 + 352 + 25);
            } else {
              delete x["IPsec"]["EAP"]["ClientCertPKCS11Id"]["DeviceEditable"];
            }
          } else {
            delete x["IPsec"]["EAP"]["ClientCertPKCS11Id"];
          }
          if (A.load.Bool(ptr + 56 + 480 + 384 + 28)) {
            x["IPsec"]["EAP"]["ClientCertProvisioningProfileId"] = {};
            x["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]["Active"] = A.load.Ref(
              ptr + 56 + 480 + 384 + 0,
              undefined
            );
            x["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]["Effective"] = A.load.Ref(
              ptr + 56 + 480 + 384 + 4,
              undefined
            );
            x["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]["UserPolicy"] = A.load.Ref(
              ptr + 56 + 480 + 384 + 8,
              undefined
            );
            x["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]["DevicePolicy"] = A.load.Ref(
              ptr + 56 + 480 + 384 + 12,
              undefined
            );
            x["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]["UserSetting"] = A.load.Ref(
              ptr + 56 + 480 + 384 + 16,
              undefined
            );
            x["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]["SharedSetting"] = A.load.Ref(
              ptr + 56 + 480 + 384 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 56 + 480 + 384 + 26)) {
              x["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]["UserEditable"] = A.load.Bool(
                ptr + 56 + 480 + 384 + 24
              );
            } else {
              delete x["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 56 + 480 + 384 + 27)) {
              x["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]["DeviceEditable"] = A.load.Bool(
                ptr + 56 + 480 + 384 + 25
              );
            } else {
              delete x["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]["DeviceEditable"];
            }
          } else {
            delete x["IPsec"]["EAP"]["ClientCertProvisioningProfileId"];
          }
          if (A.load.Bool(ptr + 56 + 480 + 416 + 28)) {
            x["IPsec"]["EAP"]["ClientCertRef"] = {};
            x["IPsec"]["EAP"]["ClientCertRef"]["Active"] = A.load.Ref(ptr + 56 + 480 + 416 + 0, undefined);
            x["IPsec"]["EAP"]["ClientCertRef"]["Effective"] = A.load.Ref(ptr + 56 + 480 + 416 + 4, undefined);
            x["IPsec"]["EAP"]["ClientCertRef"]["UserPolicy"] = A.load.Ref(ptr + 56 + 480 + 416 + 8, undefined);
            x["IPsec"]["EAP"]["ClientCertRef"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 480 + 416 + 12, undefined);
            x["IPsec"]["EAP"]["ClientCertRef"]["UserSetting"] = A.load.Ref(ptr + 56 + 480 + 416 + 16, undefined);
            x["IPsec"]["EAP"]["ClientCertRef"]["SharedSetting"] = A.load.Ref(ptr + 56 + 480 + 416 + 20, undefined);
            if (A.load.Bool(ptr + 56 + 480 + 416 + 26)) {
              x["IPsec"]["EAP"]["ClientCertRef"]["UserEditable"] = A.load.Bool(ptr + 56 + 480 + 416 + 24);
            } else {
              delete x["IPsec"]["EAP"]["ClientCertRef"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 56 + 480 + 416 + 27)) {
              x["IPsec"]["EAP"]["ClientCertRef"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 480 + 416 + 25);
            } else {
              delete x["IPsec"]["EAP"]["ClientCertRef"]["DeviceEditable"];
            }
          } else {
            delete x["IPsec"]["EAP"]["ClientCertRef"];
          }
          if (A.load.Bool(ptr + 56 + 480 + 448 + 28)) {
            x["IPsec"]["EAP"]["ClientCertType"] = {};
            x["IPsec"]["EAP"]["ClientCertType"]["Active"] = A.load.Ref(ptr + 56 + 480 + 448 + 0, undefined);
            x["IPsec"]["EAP"]["ClientCertType"]["Effective"] = A.load.Ref(ptr + 56 + 480 + 448 + 4, undefined);
            x["IPsec"]["EAP"]["ClientCertType"]["UserPolicy"] = A.load.Ref(ptr + 56 + 480 + 448 + 8, undefined);
            x["IPsec"]["EAP"]["ClientCertType"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 480 + 448 + 12, undefined);
            x["IPsec"]["EAP"]["ClientCertType"]["UserSetting"] = A.load.Ref(ptr + 56 + 480 + 448 + 16, undefined);
            x["IPsec"]["EAP"]["ClientCertType"]["SharedSetting"] = A.load.Ref(ptr + 56 + 480 + 448 + 20, undefined);
            if (A.load.Bool(ptr + 56 + 480 + 448 + 26)) {
              x["IPsec"]["EAP"]["ClientCertType"]["UserEditable"] = A.load.Bool(ptr + 56 + 480 + 448 + 24);
            } else {
              delete x["IPsec"]["EAP"]["ClientCertType"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 56 + 480 + 448 + 27)) {
              x["IPsec"]["EAP"]["ClientCertType"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 480 + 448 + 25);
            } else {
              delete x["IPsec"]["EAP"]["ClientCertType"]["DeviceEditable"];
            }
          } else {
            delete x["IPsec"]["EAP"]["ClientCertType"];
          }
          if (A.load.Bool(ptr + 56 + 480 + 480 + 28)) {
            x["IPsec"]["EAP"]["Identity"] = {};
            x["IPsec"]["EAP"]["Identity"]["Active"] = A.load.Ref(ptr + 56 + 480 + 480 + 0, undefined);
            x["IPsec"]["EAP"]["Identity"]["Effective"] = A.load.Ref(ptr + 56 + 480 + 480 + 4, undefined);
            x["IPsec"]["EAP"]["Identity"]["UserPolicy"] = A.load.Ref(ptr + 56 + 480 + 480 + 8, undefined);
            x["IPsec"]["EAP"]["Identity"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 480 + 480 + 12, undefined);
            x["IPsec"]["EAP"]["Identity"]["UserSetting"] = A.load.Ref(ptr + 56 + 480 + 480 + 16, undefined);
            x["IPsec"]["EAP"]["Identity"]["SharedSetting"] = A.load.Ref(ptr + 56 + 480 + 480 + 20, undefined);
            if (A.load.Bool(ptr + 56 + 480 + 480 + 26)) {
              x["IPsec"]["EAP"]["Identity"]["UserEditable"] = A.load.Bool(ptr + 56 + 480 + 480 + 24);
            } else {
              delete x["IPsec"]["EAP"]["Identity"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 56 + 480 + 480 + 27)) {
              x["IPsec"]["EAP"]["Identity"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 480 + 480 + 25);
            } else {
              delete x["IPsec"]["EAP"]["Identity"]["DeviceEditable"];
            }
          } else {
            delete x["IPsec"]["EAP"]["Identity"];
          }
          if (A.load.Bool(ptr + 56 + 480 + 512 + 28)) {
            x["IPsec"]["EAP"]["Inner"] = {};
            x["IPsec"]["EAP"]["Inner"]["Active"] = A.load.Ref(ptr + 56 + 480 + 512 + 0, undefined);
            x["IPsec"]["EAP"]["Inner"]["Effective"] = A.load.Ref(ptr + 56 + 480 + 512 + 4, undefined);
            x["IPsec"]["EAP"]["Inner"]["UserPolicy"] = A.load.Ref(ptr + 56 + 480 + 512 + 8, undefined);
            x["IPsec"]["EAP"]["Inner"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 480 + 512 + 12, undefined);
            x["IPsec"]["EAP"]["Inner"]["UserSetting"] = A.load.Ref(ptr + 56 + 480 + 512 + 16, undefined);
            x["IPsec"]["EAP"]["Inner"]["SharedSetting"] = A.load.Ref(ptr + 56 + 480 + 512 + 20, undefined);
            if (A.load.Bool(ptr + 56 + 480 + 512 + 26)) {
              x["IPsec"]["EAP"]["Inner"]["UserEditable"] = A.load.Bool(ptr + 56 + 480 + 512 + 24);
            } else {
              delete x["IPsec"]["EAP"]["Inner"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 56 + 480 + 512 + 27)) {
              x["IPsec"]["EAP"]["Inner"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 480 + 512 + 25);
            } else {
              delete x["IPsec"]["EAP"]["Inner"]["DeviceEditable"];
            }
          } else {
            delete x["IPsec"]["EAP"]["Inner"];
          }
          if (A.load.Bool(ptr + 56 + 480 + 544 + 28)) {
            x["IPsec"]["EAP"]["Outer"] = {};
            x["IPsec"]["EAP"]["Outer"]["Active"] = A.load.Ref(ptr + 56 + 480 + 544 + 0, undefined);
            x["IPsec"]["EAP"]["Outer"]["Effective"] = A.load.Ref(ptr + 56 + 480 + 544 + 4, undefined);
            x["IPsec"]["EAP"]["Outer"]["UserPolicy"] = A.load.Ref(ptr + 56 + 480 + 544 + 8, undefined);
            x["IPsec"]["EAP"]["Outer"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 480 + 544 + 12, undefined);
            x["IPsec"]["EAP"]["Outer"]["UserSetting"] = A.load.Ref(ptr + 56 + 480 + 544 + 16, undefined);
            x["IPsec"]["EAP"]["Outer"]["SharedSetting"] = A.load.Ref(ptr + 56 + 480 + 544 + 20, undefined);
            if (A.load.Bool(ptr + 56 + 480 + 544 + 26)) {
              x["IPsec"]["EAP"]["Outer"]["UserEditable"] = A.load.Bool(ptr + 56 + 480 + 544 + 24);
            } else {
              delete x["IPsec"]["EAP"]["Outer"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 56 + 480 + 544 + 27)) {
              x["IPsec"]["EAP"]["Outer"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 480 + 544 + 25);
            } else {
              delete x["IPsec"]["EAP"]["Outer"]["DeviceEditable"];
            }
          } else {
            delete x["IPsec"]["EAP"]["Outer"];
          }
          if (A.load.Bool(ptr + 56 + 480 + 576 + 28)) {
            x["IPsec"]["EAP"]["Password"] = {};
            x["IPsec"]["EAP"]["Password"]["Active"] = A.load.Ref(ptr + 56 + 480 + 576 + 0, undefined);
            x["IPsec"]["EAP"]["Password"]["Effective"] = A.load.Ref(ptr + 56 + 480 + 576 + 4, undefined);
            x["IPsec"]["EAP"]["Password"]["UserPolicy"] = A.load.Ref(ptr + 56 + 480 + 576 + 8, undefined);
            x["IPsec"]["EAP"]["Password"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 480 + 576 + 12, undefined);
            x["IPsec"]["EAP"]["Password"]["UserSetting"] = A.load.Ref(ptr + 56 + 480 + 576 + 16, undefined);
            x["IPsec"]["EAP"]["Password"]["SharedSetting"] = A.load.Ref(ptr + 56 + 480 + 576 + 20, undefined);
            if (A.load.Bool(ptr + 56 + 480 + 576 + 26)) {
              x["IPsec"]["EAP"]["Password"]["UserEditable"] = A.load.Bool(ptr + 56 + 480 + 576 + 24);
            } else {
              delete x["IPsec"]["EAP"]["Password"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 56 + 480 + 576 + 27)) {
              x["IPsec"]["EAP"]["Password"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 480 + 576 + 25);
            } else {
              delete x["IPsec"]["EAP"]["Password"]["DeviceEditable"];
            }
          } else {
            delete x["IPsec"]["EAP"]["Password"];
          }
          if (A.load.Bool(ptr + 56 + 480 + 608 + 21)) {
            x["IPsec"]["EAP"]["SaveCredentials"] = {};
            if (A.load.Bool(ptr + 56 + 480 + 608 + 14)) {
              x["IPsec"]["EAP"]["SaveCredentials"]["Active"] = A.load.Bool(ptr + 56 + 480 + 608 + 0);
            } else {
              delete x["IPsec"]["EAP"]["SaveCredentials"]["Active"];
            }
            x["IPsec"]["EAP"]["SaveCredentials"]["Effective"] = A.load.Ref(ptr + 56 + 480 + 608 + 4, undefined);
            if (A.load.Bool(ptr + 56 + 480 + 608 + 15)) {
              x["IPsec"]["EAP"]["SaveCredentials"]["UserPolicy"] = A.load.Bool(ptr + 56 + 480 + 608 + 8);
            } else {
              delete x["IPsec"]["EAP"]["SaveCredentials"]["UserPolicy"];
            }
            if (A.load.Bool(ptr + 56 + 480 + 608 + 16)) {
              x["IPsec"]["EAP"]["SaveCredentials"]["DevicePolicy"] = A.load.Bool(ptr + 56 + 480 + 608 + 9);
            } else {
              delete x["IPsec"]["EAP"]["SaveCredentials"]["DevicePolicy"];
            }
            if (A.load.Bool(ptr + 56 + 480 + 608 + 17)) {
              x["IPsec"]["EAP"]["SaveCredentials"]["UserSetting"] = A.load.Bool(ptr + 56 + 480 + 608 + 10);
            } else {
              delete x["IPsec"]["EAP"]["SaveCredentials"]["UserSetting"];
            }
            if (A.load.Bool(ptr + 56 + 480 + 608 + 18)) {
              x["IPsec"]["EAP"]["SaveCredentials"]["SharedSetting"] = A.load.Bool(ptr + 56 + 480 + 608 + 11);
            } else {
              delete x["IPsec"]["EAP"]["SaveCredentials"]["SharedSetting"];
            }
            if (A.load.Bool(ptr + 56 + 480 + 608 + 19)) {
              x["IPsec"]["EAP"]["SaveCredentials"]["UserEditable"] = A.load.Bool(ptr + 56 + 480 + 608 + 12);
            } else {
              delete x["IPsec"]["EAP"]["SaveCredentials"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 56 + 480 + 608 + 20)) {
              x["IPsec"]["EAP"]["SaveCredentials"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 480 + 608 + 13);
            } else {
              delete x["IPsec"]["EAP"]["SaveCredentials"]["DeviceEditable"];
            }
          } else {
            delete x["IPsec"]["EAP"]["SaveCredentials"];
          }
          if (A.load.Bool(ptr + 56 + 480 + 632 + 28)) {
            x["IPsec"]["EAP"]["ServerCAPEMs"] = {};
            x["IPsec"]["EAP"]["ServerCAPEMs"]["Active"] = A.load.Ref(ptr + 56 + 480 + 632 + 0, undefined);
            x["IPsec"]["EAP"]["ServerCAPEMs"]["Effective"] = A.load.Ref(ptr + 56 + 480 + 632 + 4, undefined);
            x["IPsec"]["EAP"]["ServerCAPEMs"]["UserPolicy"] = A.load.Ref(ptr + 56 + 480 + 632 + 8, undefined);
            x["IPsec"]["EAP"]["ServerCAPEMs"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 480 + 632 + 12, undefined);
            x["IPsec"]["EAP"]["ServerCAPEMs"]["UserSetting"] = A.load.Ref(ptr + 56 + 480 + 632 + 16, undefined);
            x["IPsec"]["EAP"]["ServerCAPEMs"]["SharedSetting"] = A.load.Ref(ptr + 56 + 480 + 632 + 20, undefined);
            if (A.load.Bool(ptr + 56 + 480 + 632 + 26)) {
              x["IPsec"]["EAP"]["ServerCAPEMs"]["UserEditable"] = A.load.Bool(ptr + 56 + 480 + 632 + 24);
            } else {
              delete x["IPsec"]["EAP"]["ServerCAPEMs"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 56 + 480 + 632 + 27)) {
              x["IPsec"]["EAP"]["ServerCAPEMs"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 480 + 632 + 25);
            } else {
              delete x["IPsec"]["EAP"]["ServerCAPEMs"]["DeviceEditable"];
            }
          } else {
            delete x["IPsec"]["EAP"]["ServerCAPEMs"];
          }
          if (A.load.Bool(ptr + 56 + 480 + 664 + 28)) {
            x["IPsec"]["EAP"]["ServerCARefs"] = {};
            x["IPsec"]["EAP"]["ServerCARefs"]["Active"] = A.load.Ref(ptr + 56 + 480 + 664 + 0, undefined);
            x["IPsec"]["EAP"]["ServerCARefs"]["Effective"] = A.load.Ref(ptr + 56 + 480 + 664 + 4, undefined);
            x["IPsec"]["EAP"]["ServerCARefs"]["UserPolicy"] = A.load.Ref(ptr + 56 + 480 + 664 + 8, undefined);
            x["IPsec"]["EAP"]["ServerCARefs"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 480 + 664 + 12, undefined);
            x["IPsec"]["EAP"]["ServerCARefs"]["UserSetting"] = A.load.Ref(ptr + 56 + 480 + 664 + 16, undefined);
            x["IPsec"]["EAP"]["ServerCARefs"]["SharedSetting"] = A.load.Ref(ptr + 56 + 480 + 664 + 20, undefined);
            if (A.load.Bool(ptr + 56 + 480 + 664 + 26)) {
              x["IPsec"]["EAP"]["ServerCARefs"]["UserEditable"] = A.load.Bool(ptr + 56 + 480 + 664 + 24);
            } else {
              delete x["IPsec"]["EAP"]["ServerCARefs"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 56 + 480 + 664 + 27)) {
              x["IPsec"]["EAP"]["ServerCARefs"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 480 + 664 + 25);
            } else {
              delete x["IPsec"]["EAP"]["ServerCARefs"]["DeviceEditable"];
            }
          } else {
            delete x["IPsec"]["EAP"]["ServerCARefs"];
          }
          if (A.load.Bool(ptr + 56 + 480 + 696 + 28)) {
            x["IPsec"]["EAP"]["SubjectMatch"] = {};
            x["IPsec"]["EAP"]["SubjectMatch"]["Active"] = A.load.Ref(ptr + 56 + 480 + 696 + 0, undefined);
            x["IPsec"]["EAP"]["SubjectMatch"]["Effective"] = A.load.Ref(ptr + 56 + 480 + 696 + 4, undefined);
            x["IPsec"]["EAP"]["SubjectMatch"]["UserPolicy"] = A.load.Ref(ptr + 56 + 480 + 696 + 8, undefined);
            x["IPsec"]["EAP"]["SubjectMatch"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 480 + 696 + 12, undefined);
            x["IPsec"]["EAP"]["SubjectMatch"]["UserSetting"] = A.load.Ref(ptr + 56 + 480 + 696 + 16, undefined);
            x["IPsec"]["EAP"]["SubjectMatch"]["SharedSetting"] = A.load.Ref(ptr + 56 + 480 + 696 + 20, undefined);
            if (A.load.Bool(ptr + 56 + 480 + 696 + 26)) {
              x["IPsec"]["EAP"]["SubjectMatch"]["UserEditable"] = A.load.Bool(ptr + 56 + 480 + 696 + 24);
            } else {
              delete x["IPsec"]["EAP"]["SubjectMatch"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 56 + 480 + 696 + 27)) {
              x["IPsec"]["EAP"]["SubjectMatch"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 480 + 696 + 25);
            } else {
              delete x["IPsec"]["EAP"]["SubjectMatch"]["DeviceEditable"];
            }
          } else {
            delete x["IPsec"]["EAP"]["SubjectMatch"];
          }
          if (A.load.Bool(ptr + 56 + 480 + 728 + 28)) {
            x["IPsec"]["EAP"]["TLSVersionMax"] = {};
            x["IPsec"]["EAP"]["TLSVersionMax"]["Active"] = A.load.Ref(ptr + 56 + 480 + 728 + 0, undefined);
            x["IPsec"]["EAP"]["TLSVersionMax"]["Effective"] = A.load.Ref(ptr + 56 + 480 + 728 + 4, undefined);
            x["IPsec"]["EAP"]["TLSVersionMax"]["UserPolicy"] = A.load.Ref(ptr + 56 + 480 + 728 + 8, undefined);
            x["IPsec"]["EAP"]["TLSVersionMax"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 480 + 728 + 12, undefined);
            x["IPsec"]["EAP"]["TLSVersionMax"]["UserSetting"] = A.load.Ref(ptr + 56 + 480 + 728 + 16, undefined);
            x["IPsec"]["EAP"]["TLSVersionMax"]["SharedSetting"] = A.load.Ref(ptr + 56 + 480 + 728 + 20, undefined);
            if (A.load.Bool(ptr + 56 + 480 + 728 + 26)) {
              x["IPsec"]["EAP"]["TLSVersionMax"]["UserEditable"] = A.load.Bool(ptr + 56 + 480 + 728 + 24);
            } else {
              delete x["IPsec"]["EAP"]["TLSVersionMax"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 56 + 480 + 728 + 27)) {
              x["IPsec"]["EAP"]["TLSVersionMax"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 480 + 728 + 25);
            } else {
              delete x["IPsec"]["EAP"]["TLSVersionMax"]["DeviceEditable"];
            }
          } else {
            delete x["IPsec"]["EAP"]["TLSVersionMax"];
          }
          if (A.load.Bool(ptr + 56 + 480 + 760 + 21)) {
            x["IPsec"]["EAP"]["UseProactiveKeyCaching"] = {};
            if (A.load.Bool(ptr + 56 + 480 + 760 + 14)) {
              x["IPsec"]["EAP"]["UseProactiveKeyCaching"]["Active"] = A.load.Bool(ptr + 56 + 480 + 760 + 0);
            } else {
              delete x["IPsec"]["EAP"]["UseProactiveKeyCaching"]["Active"];
            }
            x["IPsec"]["EAP"]["UseProactiveKeyCaching"]["Effective"] = A.load.Ref(ptr + 56 + 480 + 760 + 4, undefined);
            if (A.load.Bool(ptr + 56 + 480 + 760 + 15)) {
              x["IPsec"]["EAP"]["UseProactiveKeyCaching"]["UserPolicy"] = A.load.Bool(ptr + 56 + 480 + 760 + 8);
            } else {
              delete x["IPsec"]["EAP"]["UseProactiveKeyCaching"]["UserPolicy"];
            }
            if (A.load.Bool(ptr + 56 + 480 + 760 + 16)) {
              x["IPsec"]["EAP"]["UseProactiveKeyCaching"]["DevicePolicy"] = A.load.Bool(ptr + 56 + 480 + 760 + 9);
            } else {
              delete x["IPsec"]["EAP"]["UseProactiveKeyCaching"]["DevicePolicy"];
            }
            if (A.load.Bool(ptr + 56 + 480 + 760 + 17)) {
              x["IPsec"]["EAP"]["UseProactiveKeyCaching"]["UserSetting"] = A.load.Bool(ptr + 56 + 480 + 760 + 10);
            } else {
              delete x["IPsec"]["EAP"]["UseProactiveKeyCaching"]["UserSetting"];
            }
            if (A.load.Bool(ptr + 56 + 480 + 760 + 18)) {
              x["IPsec"]["EAP"]["UseProactiveKeyCaching"]["SharedSetting"] = A.load.Bool(ptr + 56 + 480 + 760 + 11);
            } else {
              delete x["IPsec"]["EAP"]["UseProactiveKeyCaching"]["SharedSetting"];
            }
            if (A.load.Bool(ptr + 56 + 480 + 760 + 19)) {
              x["IPsec"]["EAP"]["UseProactiveKeyCaching"]["UserEditable"] = A.load.Bool(ptr + 56 + 480 + 760 + 12);
            } else {
              delete x["IPsec"]["EAP"]["UseProactiveKeyCaching"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 56 + 480 + 760 + 20)) {
              x["IPsec"]["EAP"]["UseProactiveKeyCaching"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 480 + 760 + 13);
            } else {
              delete x["IPsec"]["EAP"]["UseProactiveKeyCaching"]["DeviceEditable"];
            }
          } else {
            delete x["IPsec"]["EAP"]["UseProactiveKeyCaching"];
          }
          if (A.load.Bool(ptr + 56 + 480 + 784 + 21)) {
            x["IPsec"]["EAP"]["UseSystemCAs"] = {};
            if (A.load.Bool(ptr + 56 + 480 + 784 + 14)) {
              x["IPsec"]["EAP"]["UseSystemCAs"]["Active"] = A.load.Bool(ptr + 56 + 480 + 784 + 0);
            } else {
              delete x["IPsec"]["EAP"]["UseSystemCAs"]["Active"];
            }
            x["IPsec"]["EAP"]["UseSystemCAs"]["Effective"] = A.load.Ref(ptr + 56 + 480 + 784 + 4, undefined);
            if (A.load.Bool(ptr + 56 + 480 + 784 + 15)) {
              x["IPsec"]["EAP"]["UseSystemCAs"]["UserPolicy"] = A.load.Bool(ptr + 56 + 480 + 784 + 8);
            } else {
              delete x["IPsec"]["EAP"]["UseSystemCAs"]["UserPolicy"];
            }
            if (A.load.Bool(ptr + 56 + 480 + 784 + 16)) {
              x["IPsec"]["EAP"]["UseSystemCAs"]["DevicePolicy"] = A.load.Bool(ptr + 56 + 480 + 784 + 9);
            } else {
              delete x["IPsec"]["EAP"]["UseSystemCAs"]["DevicePolicy"];
            }
            if (A.load.Bool(ptr + 56 + 480 + 784 + 17)) {
              x["IPsec"]["EAP"]["UseSystemCAs"]["UserSetting"] = A.load.Bool(ptr + 56 + 480 + 784 + 10);
            } else {
              delete x["IPsec"]["EAP"]["UseSystemCAs"]["UserSetting"];
            }
            if (A.load.Bool(ptr + 56 + 480 + 784 + 18)) {
              x["IPsec"]["EAP"]["UseSystemCAs"]["SharedSetting"] = A.load.Bool(ptr + 56 + 480 + 784 + 11);
            } else {
              delete x["IPsec"]["EAP"]["UseSystemCAs"]["SharedSetting"];
            }
            if (A.load.Bool(ptr + 56 + 480 + 784 + 19)) {
              x["IPsec"]["EAP"]["UseSystemCAs"]["UserEditable"] = A.load.Bool(ptr + 56 + 480 + 784 + 12);
            } else {
              delete x["IPsec"]["EAP"]["UseSystemCAs"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 56 + 480 + 784 + 20)) {
              x["IPsec"]["EAP"]["UseSystemCAs"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 480 + 784 + 13);
            } else {
              delete x["IPsec"]["EAP"]["UseSystemCAs"]["DeviceEditable"];
            }
          } else {
            delete x["IPsec"]["EAP"]["UseSystemCAs"];
          }
        } else {
          delete x["IPsec"]["EAP"];
        }
        if (A.load.Bool(ptr + 56 + 1288 + 28)) {
          x["IPsec"]["Group"] = {};
          x["IPsec"]["Group"]["Active"] = A.load.Ref(ptr + 56 + 1288 + 0, undefined);
          x["IPsec"]["Group"]["Effective"] = A.load.Ref(ptr + 56 + 1288 + 4, undefined);
          x["IPsec"]["Group"]["UserPolicy"] = A.load.Ref(ptr + 56 + 1288 + 8, undefined);
          x["IPsec"]["Group"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 1288 + 12, undefined);
          x["IPsec"]["Group"]["UserSetting"] = A.load.Ref(ptr + 56 + 1288 + 16, undefined);
          x["IPsec"]["Group"]["SharedSetting"] = A.load.Ref(ptr + 56 + 1288 + 20, undefined);
          if (A.load.Bool(ptr + 56 + 1288 + 26)) {
            x["IPsec"]["Group"]["UserEditable"] = A.load.Bool(ptr + 56 + 1288 + 24);
          } else {
            delete x["IPsec"]["Group"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 56 + 1288 + 27)) {
            x["IPsec"]["Group"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 1288 + 25);
          } else {
            delete x["IPsec"]["Group"]["DeviceEditable"];
          }
        } else {
          delete x["IPsec"]["Group"];
        }
        if (A.load.Bool(ptr + 56 + 1320 + 33)) {
          x["IPsec"]["IKEVersion"] = {};
          if (A.load.Bool(ptr + 56 + 1320 + 26)) {
            x["IPsec"]["IKEVersion"]["Active"] = A.load.Int32(ptr + 56 + 1320 + 0);
          } else {
            delete x["IPsec"]["IKEVersion"]["Active"];
          }
          x["IPsec"]["IKEVersion"]["Effective"] = A.load.Ref(ptr + 56 + 1320 + 4, undefined);
          if (A.load.Bool(ptr + 56 + 1320 + 27)) {
            x["IPsec"]["IKEVersion"]["UserPolicy"] = A.load.Int32(ptr + 56 + 1320 + 8);
          } else {
            delete x["IPsec"]["IKEVersion"]["UserPolicy"];
          }
          if (A.load.Bool(ptr + 56 + 1320 + 28)) {
            x["IPsec"]["IKEVersion"]["DevicePolicy"] = A.load.Int32(ptr + 56 + 1320 + 12);
          } else {
            delete x["IPsec"]["IKEVersion"]["DevicePolicy"];
          }
          if (A.load.Bool(ptr + 56 + 1320 + 29)) {
            x["IPsec"]["IKEVersion"]["UserSetting"] = A.load.Int32(ptr + 56 + 1320 + 16);
          } else {
            delete x["IPsec"]["IKEVersion"]["UserSetting"];
          }
          if (A.load.Bool(ptr + 56 + 1320 + 30)) {
            x["IPsec"]["IKEVersion"]["SharedSetting"] = A.load.Int32(ptr + 56 + 1320 + 20);
          } else {
            delete x["IPsec"]["IKEVersion"]["SharedSetting"];
          }
          if (A.load.Bool(ptr + 56 + 1320 + 31)) {
            x["IPsec"]["IKEVersion"]["UserEditable"] = A.load.Bool(ptr + 56 + 1320 + 24);
          } else {
            delete x["IPsec"]["IKEVersion"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 56 + 1320 + 32)) {
            x["IPsec"]["IKEVersion"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 1320 + 25);
          } else {
            delete x["IPsec"]["IKEVersion"]["DeviceEditable"];
          }
        } else {
          delete x["IPsec"]["IKEVersion"];
        }
        if (A.load.Bool(ptr + 56 + 1356 + 28)) {
          x["IPsec"]["PSK"] = {};
          x["IPsec"]["PSK"]["Active"] = A.load.Ref(ptr + 56 + 1356 + 0, undefined);
          x["IPsec"]["PSK"]["Effective"] = A.load.Ref(ptr + 56 + 1356 + 4, undefined);
          x["IPsec"]["PSK"]["UserPolicy"] = A.load.Ref(ptr + 56 + 1356 + 8, undefined);
          x["IPsec"]["PSK"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 1356 + 12, undefined);
          x["IPsec"]["PSK"]["UserSetting"] = A.load.Ref(ptr + 56 + 1356 + 16, undefined);
          x["IPsec"]["PSK"]["SharedSetting"] = A.load.Ref(ptr + 56 + 1356 + 20, undefined);
          if (A.load.Bool(ptr + 56 + 1356 + 26)) {
            x["IPsec"]["PSK"]["UserEditable"] = A.load.Bool(ptr + 56 + 1356 + 24);
          } else {
            delete x["IPsec"]["PSK"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 56 + 1356 + 27)) {
            x["IPsec"]["PSK"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 1356 + 25);
          } else {
            delete x["IPsec"]["PSK"]["DeviceEditable"];
          }
        } else {
          delete x["IPsec"]["PSK"];
        }
        if (A.load.Bool(ptr + 56 + 1388 + 21)) {
          x["IPsec"]["SaveCredentials"] = {};
          if (A.load.Bool(ptr + 56 + 1388 + 14)) {
            x["IPsec"]["SaveCredentials"]["Active"] = A.load.Bool(ptr + 56 + 1388 + 0);
          } else {
            delete x["IPsec"]["SaveCredentials"]["Active"];
          }
          x["IPsec"]["SaveCredentials"]["Effective"] = A.load.Ref(ptr + 56 + 1388 + 4, undefined);
          if (A.load.Bool(ptr + 56 + 1388 + 15)) {
            x["IPsec"]["SaveCredentials"]["UserPolicy"] = A.load.Bool(ptr + 56 + 1388 + 8);
          } else {
            delete x["IPsec"]["SaveCredentials"]["UserPolicy"];
          }
          if (A.load.Bool(ptr + 56 + 1388 + 16)) {
            x["IPsec"]["SaveCredentials"]["DevicePolicy"] = A.load.Bool(ptr + 56 + 1388 + 9);
          } else {
            delete x["IPsec"]["SaveCredentials"]["DevicePolicy"];
          }
          if (A.load.Bool(ptr + 56 + 1388 + 17)) {
            x["IPsec"]["SaveCredentials"]["UserSetting"] = A.load.Bool(ptr + 56 + 1388 + 10);
          } else {
            delete x["IPsec"]["SaveCredentials"]["UserSetting"];
          }
          if (A.load.Bool(ptr + 56 + 1388 + 18)) {
            x["IPsec"]["SaveCredentials"]["SharedSetting"] = A.load.Bool(ptr + 56 + 1388 + 11);
          } else {
            delete x["IPsec"]["SaveCredentials"]["SharedSetting"];
          }
          if (A.load.Bool(ptr + 56 + 1388 + 19)) {
            x["IPsec"]["SaveCredentials"]["UserEditable"] = A.load.Bool(ptr + 56 + 1388 + 12);
          } else {
            delete x["IPsec"]["SaveCredentials"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 56 + 1388 + 20)) {
            x["IPsec"]["SaveCredentials"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 1388 + 13);
          } else {
            delete x["IPsec"]["SaveCredentials"]["DeviceEditable"];
          }
        } else {
          delete x["IPsec"]["SaveCredentials"];
        }
        if (A.load.Bool(ptr + 56 + 1412 + 28)) {
          x["IPsec"]["ServerCAPEMs"] = {};
          x["IPsec"]["ServerCAPEMs"]["Active"] = A.load.Ref(ptr + 56 + 1412 + 0, undefined);
          x["IPsec"]["ServerCAPEMs"]["Effective"] = A.load.Ref(ptr + 56 + 1412 + 4, undefined);
          x["IPsec"]["ServerCAPEMs"]["UserPolicy"] = A.load.Ref(ptr + 56 + 1412 + 8, undefined);
          x["IPsec"]["ServerCAPEMs"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 1412 + 12, undefined);
          x["IPsec"]["ServerCAPEMs"]["UserSetting"] = A.load.Ref(ptr + 56 + 1412 + 16, undefined);
          x["IPsec"]["ServerCAPEMs"]["SharedSetting"] = A.load.Ref(ptr + 56 + 1412 + 20, undefined);
          if (A.load.Bool(ptr + 56 + 1412 + 26)) {
            x["IPsec"]["ServerCAPEMs"]["UserEditable"] = A.load.Bool(ptr + 56 + 1412 + 24);
          } else {
            delete x["IPsec"]["ServerCAPEMs"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 56 + 1412 + 27)) {
            x["IPsec"]["ServerCAPEMs"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 1412 + 25);
          } else {
            delete x["IPsec"]["ServerCAPEMs"]["DeviceEditable"];
          }
        } else {
          delete x["IPsec"]["ServerCAPEMs"];
        }
        if (A.load.Bool(ptr + 56 + 1444 + 28)) {
          x["IPsec"]["ServerCARefs"] = {};
          x["IPsec"]["ServerCARefs"]["Active"] = A.load.Ref(ptr + 56 + 1444 + 0, undefined);
          x["IPsec"]["ServerCARefs"]["Effective"] = A.load.Ref(ptr + 56 + 1444 + 4, undefined);
          x["IPsec"]["ServerCARefs"]["UserPolicy"] = A.load.Ref(ptr + 56 + 1444 + 8, undefined);
          x["IPsec"]["ServerCARefs"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 1444 + 12, undefined);
          x["IPsec"]["ServerCARefs"]["UserSetting"] = A.load.Ref(ptr + 56 + 1444 + 16, undefined);
          x["IPsec"]["ServerCARefs"]["SharedSetting"] = A.load.Ref(ptr + 56 + 1444 + 20, undefined);
          if (A.load.Bool(ptr + 56 + 1444 + 26)) {
            x["IPsec"]["ServerCARefs"]["UserEditable"] = A.load.Bool(ptr + 56 + 1444 + 24);
          } else {
            delete x["IPsec"]["ServerCARefs"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 56 + 1444 + 27)) {
            x["IPsec"]["ServerCARefs"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 1444 + 25);
          } else {
            delete x["IPsec"]["ServerCARefs"]["DeviceEditable"];
          }
        } else {
          delete x["IPsec"]["ServerCARefs"];
        }
        if (A.load.Bool(ptr + 56 + 1476 + 85)) {
          x["IPsec"]["XAUTH"] = {};
          if (A.load.Bool(ptr + 56 + 1476 + 0 + 28)) {
            x["IPsec"]["XAUTH"]["Password"] = {};
            x["IPsec"]["XAUTH"]["Password"]["Active"] = A.load.Ref(ptr + 56 + 1476 + 0 + 0, undefined);
            x["IPsec"]["XAUTH"]["Password"]["Effective"] = A.load.Ref(ptr + 56 + 1476 + 0 + 4, undefined);
            x["IPsec"]["XAUTH"]["Password"]["UserPolicy"] = A.load.Ref(ptr + 56 + 1476 + 0 + 8, undefined);
            x["IPsec"]["XAUTH"]["Password"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 1476 + 0 + 12, undefined);
            x["IPsec"]["XAUTH"]["Password"]["UserSetting"] = A.load.Ref(ptr + 56 + 1476 + 0 + 16, undefined);
            x["IPsec"]["XAUTH"]["Password"]["SharedSetting"] = A.load.Ref(ptr + 56 + 1476 + 0 + 20, undefined);
            if (A.load.Bool(ptr + 56 + 1476 + 0 + 26)) {
              x["IPsec"]["XAUTH"]["Password"]["UserEditable"] = A.load.Bool(ptr + 56 + 1476 + 0 + 24);
            } else {
              delete x["IPsec"]["XAUTH"]["Password"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 56 + 1476 + 0 + 27)) {
              x["IPsec"]["XAUTH"]["Password"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 1476 + 0 + 25);
            } else {
              delete x["IPsec"]["XAUTH"]["Password"]["DeviceEditable"];
            }
          } else {
            delete x["IPsec"]["XAUTH"]["Password"];
          }
          if (A.load.Bool(ptr + 56 + 1476 + 32 + 21)) {
            x["IPsec"]["XAUTH"]["SaveCredentials"] = {};
            if (A.load.Bool(ptr + 56 + 1476 + 32 + 14)) {
              x["IPsec"]["XAUTH"]["SaveCredentials"]["Active"] = A.load.Bool(ptr + 56 + 1476 + 32 + 0);
            } else {
              delete x["IPsec"]["XAUTH"]["SaveCredentials"]["Active"];
            }
            x["IPsec"]["XAUTH"]["SaveCredentials"]["Effective"] = A.load.Ref(ptr + 56 + 1476 + 32 + 4, undefined);
            if (A.load.Bool(ptr + 56 + 1476 + 32 + 15)) {
              x["IPsec"]["XAUTH"]["SaveCredentials"]["UserPolicy"] = A.load.Bool(ptr + 56 + 1476 + 32 + 8);
            } else {
              delete x["IPsec"]["XAUTH"]["SaveCredentials"]["UserPolicy"];
            }
            if (A.load.Bool(ptr + 56 + 1476 + 32 + 16)) {
              x["IPsec"]["XAUTH"]["SaveCredentials"]["DevicePolicy"] = A.load.Bool(ptr + 56 + 1476 + 32 + 9);
            } else {
              delete x["IPsec"]["XAUTH"]["SaveCredentials"]["DevicePolicy"];
            }
            if (A.load.Bool(ptr + 56 + 1476 + 32 + 17)) {
              x["IPsec"]["XAUTH"]["SaveCredentials"]["UserSetting"] = A.load.Bool(ptr + 56 + 1476 + 32 + 10);
            } else {
              delete x["IPsec"]["XAUTH"]["SaveCredentials"]["UserSetting"];
            }
            if (A.load.Bool(ptr + 56 + 1476 + 32 + 18)) {
              x["IPsec"]["XAUTH"]["SaveCredentials"]["SharedSetting"] = A.load.Bool(ptr + 56 + 1476 + 32 + 11);
            } else {
              delete x["IPsec"]["XAUTH"]["SaveCredentials"]["SharedSetting"];
            }
            if (A.load.Bool(ptr + 56 + 1476 + 32 + 19)) {
              x["IPsec"]["XAUTH"]["SaveCredentials"]["UserEditable"] = A.load.Bool(ptr + 56 + 1476 + 32 + 12);
            } else {
              delete x["IPsec"]["XAUTH"]["SaveCredentials"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 56 + 1476 + 32 + 20)) {
              x["IPsec"]["XAUTH"]["SaveCredentials"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 1476 + 32 + 13);
            } else {
              delete x["IPsec"]["XAUTH"]["SaveCredentials"]["DeviceEditable"];
            }
          } else {
            delete x["IPsec"]["XAUTH"]["SaveCredentials"];
          }
          if (A.load.Bool(ptr + 56 + 1476 + 56 + 28)) {
            x["IPsec"]["XAUTH"]["Username"] = {};
            x["IPsec"]["XAUTH"]["Username"]["Active"] = A.load.Ref(ptr + 56 + 1476 + 56 + 0, undefined);
            x["IPsec"]["XAUTH"]["Username"]["Effective"] = A.load.Ref(ptr + 56 + 1476 + 56 + 4, undefined);
            x["IPsec"]["XAUTH"]["Username"]["UserPolicy"] = A.load.Ref(ptr + 56 + 1476 + 56 + 8, undefined);
            x["IPsec"]["XAUTH"]["Username"]["DevicePolicy"] = A.load.Ref(ptr + 56 + 1476 + 56 + 12, undefined);
            x["IPsec"]["XAUTH"]["Username"]["UserSetting"] = A.load.Ref(ptr + 56 + 1476 + 56 + 16, undefined);
            x["IPsec"]["XAUTH"]["Username"]["SharedSetting"] = A.load.Ref(ptr + 56 + 1476 + 56 + 20, undefined);
            if (A.load.Bool(ptr + 56 + 1476 + 56 + 26)) {
              x["IPsec"]["XAUTH"]["Username"]["UserEditable"] = A.load.Bool(ptr + 56 + 1476 + 56 + 24);
            } else {
              delete x["IPsec"]["XAUTH"]["Username"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 56 + 1476 + 56 + 27)) {
              x["IPsec"]["XAUTH"]["Username"]["DeviceEditable"] = A.load.Bool(ptr + 56 + 1476 + 56 + 25);
            } else {
              delete x["IPsec"]["XAUTH"]["Username"]["DeviceEditable"];
            }
          } else {
            delete x["IPsec"]["XAUTH"]["Username"];
          }
        } else {
          delete x["IPsec"]["XAUTH"];
        }
      } else {
        delete x["IPsec"];
      }
      if (A.load.Bool(ptr + 1620 + 109)) {
        x["L2TP"] = {};
        if (A.load.Bool(ptr + 1620 + 0 + 21)) {
          x["L2TP"]["LcpEchoDisabled"] = {};
          if (A.load.Bool(ptr + 1620 + 0 + 14)) {
            x["L2TP"]["LcpEchoDisabled"]["Active"] = A.load.Bool(ptr + 1620 + 0 + 0);
          } else {
            delete x["L2TP"]["LcpEchoDisabled"]["Active"];
          }
          x["L2TP"]["LcpEchoDisabled"]["Effective"] = A.load.Ref(ptr + 1620 + 0 + 4, undefined);
          if (A.load.Bool(ptr + 1620 + 0 + 15)) {
            x["L2TP"]["LcpEchoDisabled"]["UserPolicy"] = A.load.Bool(ptr + 1620 + 0 + 8);
          } else {
            delete x["L2TP"]["LcpEchoDisabled"]["UserPolicy"];
          }
          if (A.load.Bool(ptr + 1620 + 0 + 16)) {
            x["L2TP"]["LcpEchoDisabled"]["DevicePolicy"] = A.load.Bool(ptr + 1620 + 0 + 9);
          } else {
            delete x["L2TP"]["LcpEchoDisabled"]["DevicePolicy"];
          }
          if (A.load.Bool(ptr + 1620 + 0 + 17)) {
            x["L2TP"]["LcpEchoDisabled"]["UserSetting"] = A.load.Bool(ptr + 1620 + 0 + 10);
          } else {
            delete x["L2TP"]["LcpEchoDisabled"]["UserSetting"];
          }
          if (A.load.Bool(ptr + 1620 + 0 + 18)) {
            x["L2TP"]["LcpEchoDisabled"]["SharedSetting"] = A.load.Bool(ptr + 1620 + 0 + 11);
          } else {
            delete x["L2TP"]["LcpEchoDisabled"]["SharedSetting"];
          }
          if (A.load.Bool(ptr + 1620 + 0 + 19)) {
            x["L2TP"]["LcpEchoDisabled"]["UserEditable"] = A.load.Bool(ptr + 1620 + 0 + 12);
          } else {
            delete x["L2TP"]["LcpEchoDisabled"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1620 + 0 + 20)) {
            x["L2TP"]["LcpEchoDisabled"]["DeviceEditable"] = A.load.Bool(ptr + 1620 + 0 + 13);
          } else {
            delete x["L2TP"]["LcpEchoDisabled"]["DeviceEditable"];
          }
        } else {
          delete x["L2TP"]["LcpEchoDisabled"];
        }
        if (A.load.Bool(ptr + 1620 + 24 + 28)) {
          x["L2TP"]["Password"] = {};
          x["L2TP"]["Password"]["Active"] = A.load.Ref(ptr + 1620 + 24 + 0, undefined);
          x["L2TP"]["Password"]["Effective"] = A.load.Ref(ptr + 1620 + 24 + 4, undefined);
          x["L2TP"]["Password"]["UserPolicy"] = A.load.Ref(ptr + 1620 + 24 + 8, undefined);
          x["L2TP"]["Password"]["DevicePolicy"] = A.load.Ref(ptr + 1620 + 24 + 12, undefined);
          x["L2TP"]["Password"]["UserSetting"] = A.load.Ref(ptr + 1620 + 24 + 16, undefined);
          x["L2TP"]["Password"]["SharedSetting"] = A.load.Ref(ptr + 1620 + 24 + 20, undefined);
          if (A.load.Bool(ptr + 1620 + 24 + 26)) {
            x["L2TP"]["Password"]["UserEditable"] = A.load.Bool(ptr + 1620 + 24 + 24);
          } else {
            delete x["L2TP"]["Password"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1620 + 24 + 27)) {
            x["L2TP"]["Password"]["DeviceEditable"] = A.load.Bool(ptr + 1620 + 24 + 25);
          } else {
            delete x["L2TP"]["Password"]["DeviceEditable"];
          }
        } else {
          delete x["L2TP"]["Password"];
        }
        if (A.load.Bool(ptr + 1620 + 56 + 21)) {
          x["L2TP"]["SaveCredentials"] = {};
          if (A.load.Bool(ptr + 1620 + 56 + 14)) {
            x["L2TP"]["SaveCredentials"]["Active"] = A.load.Bool(ptr + 1620 + 56 + 0);
          } else {
            delete x["L2TP"]["SaveCredentials"]["Active"];
          }
          x["L2TP"]["SaveCredentials"]["Effective"] = A.load.Ref(ptr + 1620 + 56 + 4, undefined);
          if (A.load.Bool(ptr + 1620 + 56 + 15)) {
            x["L2TP"]["SaveCredentials"]["UserPolicy"] = A.load.Bool(ptr + 1620 + 56 + 8);
          } else {
            delete x["L2TP"]["SaveCredentials"]["UserPolicy"];
          }
          if (A.load.Bool(ptr + 1620 + 56 + 16)) {
            x["L2TP"]["SaveCredentials"]["DevicePolicy"] = A.load.Bool(ptr + 1620 + 56 + 9);
          } else {
            delete x["L2TP"]["SaveCredentials"]["DevicePolicy"];
          }
          if (A.load.Bool(ptr + 1620 + 56 + 17)) {
            x["L2TP"]["SaveCredentials"]["UserSetting"] = A.load.Bool(ptr + 1620 + 56 + 10);
          } else {
            delete x["L2TP"]["SaveCredentials"]["UserSetting"];
          }
          if (A.load.Bool(ptr + 1620 + 56 + 18)) {
            x["L2TP"]["SaveCredentials"]["SharedSetting"] = A.load.Bool(ptr + 1620 + 56 + 11);
          } else {
            delete x["L2TP"]["SaveCredentials"]["SharedSetting"];
          }
          if (A.load.Bool(ptr + 1620 + 56 + 19)) {
            x["L2TP"]["SaveCredentials"]["UserEditable"] = A.load.Bool(ptr + 1620 + 56 + 12);
          } else {
            delete x["L2TP"]["SaveCredentials"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1620 + 56 + 20)) {
            x["L2TP"]["SaveCredentials"]["DeviceEditable"] = A.load.Bool(ptr + 1620 + 56 + 13);
          } else {
            delete x["L2TP"]["SaveCredentials"]["DeviceEditable"];
          }
        } else {
          delete x["L2TP"]["SaveCredentials"];
        }
        if (A.load.Bool(ptr + 1620 + 80 + 28)) {
          x["L2TP"]["Username"] = {};
          x["L2TP"]["Username"]["Active"] = A.load.Ref(ptr + 1620 + 80 + 0, undefined);
          x["L2TP"]["Username"]["Effective"] = A.load.Ref(ptr + 1620 + 80 + 4, undefined);
          x["L2TP"]["Username"]["UserPolicy"] = A.load.Ref(ptr + 1620 + 80 + 8, undefined);
          x["L2TP"]["Username"]["DevicePolicy"] = A.load.Ref(ptr + 1620 + 80 + 12, undefined);
          x["L2TP"]["Username"]["UserSetting"] = A.load.Ref(ptr + 1620 + 80 + 16, undefined);
          x["L2TP"]["Username"]["SharedSetting"] = A.load.Ref(ptr + 1620 + 80 + 20, undefined);
          if (A.load.Bool(ptr + 1620 + 80 + 26)) {
            x["L2TP"]["Username"]["UserEditable"] = A.load.Bool(ptr + 1620 + 80 + 24);
          } else {
            delete x["L2TP"]["Username"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1620 + 80 + 27)) {
            x["L2TP"]["Username"]["DeviceEditable"] = A.load.Bool(ptr + 1620 + 80 + 25);
          } else {
            delete x["L2TP"]["Username"]["DeviceEditable"];
          }
        } else {
          delete x["L2TP"]["Username"];
        }
      } else {
        delete x["L2TP"];
      }
      if (A.load.Bool(ptr + 1732 + 1542)) {
        x["OpenVPN"] = {};
        if (A.load.Bool(ptr + 1732 + 0 + 28)) {
          x["OpenVPN"]["Auth"] = {};
          x["OpenVPN"]["Auth"]["Active"] = A.load.Ref(ptr + 1732 + 0 + 0, undefined);
          x["OpenVPN"]["Auth"]["Effective"] = A.load.Ref(ptr + 1732 + 0 + 4, undefined);
          x["OpenVPN"]["Auth"]["UserPolicy"] = A.load.Ref(ptr + 1732 + 0 + 8, undefined);
          x["OpenVPN"]["Auth"]["DevicePolicy"] = A.load.Ref(ptr + 1732 + 0 + 12, undefined);
          x["OpenVPN"]["Auth"]["UserSetting"] = A.load.Ref(ptr + 1732 + 0 + 16, undefined);
          x["OpenVPN"]["Auth"]["SharedSetting"] = A.load.Ref(ptr + 1732 + 0 + 20, undefined);
          if (A.load.Bool(ptr + 1732 + 0 + 26)) {
            x["OpenVPN"]["Auth"]["UserEditable"] = A.load.Bool(ptr + 1732 + 0 + 24);
          } else {
            delete x["OpenVPN"]["Auth"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 0 + 27)) {
            x["OpenVPN"]["Auth"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 0 + 25);
          } else {
            delete x["OpenVPN"]["Auth"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["Auth"];
        }
        if (A.load.Bool(ptr + 1732 + 32 + 28)) {
          x["OpenVPN"]["AuthRetry"] = {};
          x["OpenVPN"]["AuthRetry"]["Active"] = A.load.Ref(ptr + 1732 + 32 + 0, undefined);
          x["OpenVPN"]["AuthRetry"]["Effective"] = A.load.Ref(ptr + 1732 + 32 + 4, undefined);
          x["OpenVPN"]["AuthRetry"]["UserPolicy"] = A.load.Ref(ptr + 1732 + 32 + 8, undefined);
          x["OpenVPN"]["AuthRetry"]["DevicePolicy"] = A.load.Ref(ptr + 1732 + 32 + 12, undefined);
          x["OpenVPN"]["AuthRetry"]["UserSetting"] = A.load.Ref(ptr + 1732 + 32 + 16, undefined);
          x["OpenVPN"]["AuthRetry"]["SharedSetting"] = A.load.Ref(ptr + 1732 + 32 + 20, undefined);
          if (A.load.Bool(ptr + 1732 + 32 + 26)) {
            x["OpenVPN"]["AuthRetry"]["UserEditable"] = A.load.Bool(ptr + 1732 + 32 + 24);
          } else {
            delete x["OpenVPN"]["AuthRetry"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 32 + 27)) {
            x["OpenVPN"]["AuthRetry"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 32 + 25);
          } else {
            delete x["OpenVPN"]["AuthRetry"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["AuthRetry"];
        }
        if (A.load.Bool(ptr + 1732 + 64 + 21)) {
          x["OpenVPN"]["AuthNoCache"] = {};
          if (A.load.Bool(ptr + 1732 + 64 + 14)) {
            x["OpenVPN"]["AuthNoCache"]["Active"] = A.load.Bool(ptr + 1732 + 64 + 0);
          } else {
            delete x["OpenVPN"]["AuthNoCache"]["Active"];
          }
          x["OpenVPN"]["AuthNoCache"]["Effective"] = A.load.Ref(ptr + 1732 + 64 + 4, undefined);
          if (A.load.Bool(ptr + 1732 + 64 + 15)) {
            x["OpenVPN"]["AuthNoCache"]["UserPolicy"] = A.load.Bool(ptr + 1732 + 64 + 8);
          } else {
            delete x["OpenVPN"]["AuthNoCache"]["UserPolicy"];
          }
          if (A.load.Bool(ptr + 1732 + 64 + 16)) {
            x["OpenVPN"]["AuthNoCache"]["DevicePolicy"] = A.load.Bool(ptr + 1732 + 64 + 9);
          } else {
            delete x["OpenVPN"]["AuthNoCache"]["DevicePolicy"];
          }
          if (A.load.Bool(ptr + 1732 + 64 + 17)) {
            x["OpenVPN"]["AuthNoCache"]["UserSetting"] = A.load.Bool(ptr + 1732 + 64 + 10);
          } else {
            delete x["OpenVPN"]["AuthNoCache"]["UserSetting"];
          }
          if (A.load.Bool(ptr + 1732 + 64 + 18)) {
            x["OpenVPN"]["AuthNoCache"]["SharedSetting"] = A.load.Bool(ptr + 1732 + 64 + 11);
          } else {
            delete x["OpenVPN"]["AuthNoCache"]["SharedSetting"];
          }
          if (A.load.Bool(ptr + 1732 + 64 + 19)) {
            x["OpenVPN"]["AuthNoCache"]["UserEditable"] = A.load.Bool(ptr + 1732 + 64 + 12);
          } else {
            delete x["OpenVPN"]["AuthNoCache"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 64 + 20)) {
            x["OpenVPN"]["AuthNoCache"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 64 + 13);
          } else {
            delete x["OpenVPN"]["AuthNoCache"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["AuthNoCache"];
        }
        if (A.load.Bool(ptr + 1732 + 88 + 28)) {
          x["OpenVPN"]["Cipher"] = {};
          x["OpenVPN"]["Cipher"]["Active"] = A.load.Ref(ptr + 1732 + 88 + 0, undefined);
          x["OpenVPN"]["Cipher"]["Effective"] = A.load.Ref(ptr + 1732 + 88 + 4, undefined);
          x["OpenVPN"]["Cipher"]["UserPolicy"] = A.load.Ref(ptr + 1732 + 88 + 8, undefined);
          x["OpenVPN"]["Cipher"]["DevicePolicy"] = A.load.Ref(ptr + 1732 + 88 + 12, undefined);
          x["OpenVPN"]["Cipher"]["UserSetting"] = A.load.Ref(ptr + 1732 + 88 + 16, undefined);
          x["OpenVPN"]["Cipher"]["SharedSetting"] = A.load.Ref(ptr + 1732 + 88 + 20, undefined);
          if (A.load.Bool(ptr + 1732 + 88 + 26)) {
            x["OpenVPN"]["Cipher"]["UserEditable"] = A.load.Bool(ptr + 1732 + 88 + 24);
          } else {
            delete x["OpenVPN"]["Cipher"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 88 + 27)) {
            x["OpenVPN"]["Cipher"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 88 + 25);
          } else {
            delete x["OpenVPN"]["Cipher"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["Cipher"];
        }
        if (A.load.Bool(ptr + 1732 + 120 + 28)) {
          x["OpenVPN"]["ClientCertPKCS11Id"] = {};
          x["OpenVPN"]["ClientCertPKCS11Id"]["Active"] = A.load.Ref(ptr + 1732 + 120 + 0, undefined);
          x["OpenVPN"]["ClientCertPKCS11Id"]["Effective"] = A.load.Ref(ptr + 1732 + 120 + 4, undefined);
          x["OpenVPN"]["ClientCertPKCS11Id"]["UserPolicy"] = A.load.Ref(ptr + 1732 + 120 + 8, undefined);
          x["OpenVPN"]["ClientCertPKCS11Id"]["DevicePolicy"] = A.load.Ref(ptr + 1732 + 120 + 12, undefined);
          x["OpenVPN"]["ClientCertPKCS11Id"]["UserSetting"] = A.load.Ref(ptr + 1732 + 120 + 16, undefined);
          x["OpenVPN"]["ClientCertPKCS11Id"]["SharedSetting"] = A.load.Ref(ptr + 1732 + 120 + 20, undefined);
          if (A.load.Bool(ptr + 1732 + 120 + 26)) {
            x["OpenVPN"]["ClientCertPKCS11Id"]["UserEditable"] = A.load.Bool(ptr + 1732 + 120 + 24);
          } else {
            delete x["OpenVPN"]["ClientCertPKCS11Id"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 120 + 27)) {
            x["OpenVPN"]["ClientCertPKCS11Id"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 120 + 25);
          } else {
            delete x["OpenVPN"]["ClientCertPKCS11Id"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["ClientCertPKCS11Id"];
        }
        if (A.load.Bool(ptr + 1732 + 152 + 318)) {
          x["OpenVPN"]["ClientCertPattern"] = {};
          if (A.load.Bool(ptr + 1732 + 152 + 0 + 28)) {
            x["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"] = {};
            x["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]["Active"] = A.load.Ref(
              ptr + 1732 + 152 + 0 + 0,
              undefined
            );
            x["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]["Effective"] = A.load.Ref(
              ptr + 1732 + 152 + 0 + 4,
              undefined
            );
            x["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]["UserPolicy"] = A.load.Ref(
              ptr + 1732 + 152 + 0 + 8,
              undefined
            );
            x["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]["DevicePolicy"] = A.load.Ref(
              ptr + 1732 + 152 + 0 + 12,
              undefined
            );
            x["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]["UserSetting"] = A.load.Ref(
              ptr + 1732 + 152 + 0 + 16,
              undefined
            );
            x["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]["SharedSetting"] = A.load.Ref(
              ptr + 1732 + 152 + 0 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 1732 + 152 + 0 + 26)) {
              x["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]["UserEditable"] = A.load.Bool(
                ptr + 1732 + 152 + 0 + 24
              );
            } else {
              delete x["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 1732 + 152 + 0 + 27)) {
              x["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"] = A.load.Bool(
                ptr + 1732 + 152 + 0 + 25
              );
            } else {
              delete x["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"];
            }
          } else {
            delete x["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"];
          }
          if (A.load.Bool(ptr + 1732 + 152 + 32 + 125)) {
            x["OpenVPN"]["ClientCertPattern"]["Issuer"] = {};
            if (A.load.Bool(ptr + 1732 + 152 + 32 + 0 + 28)) {
              x["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"] = {};
              x["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]["Active"] = A.load.Ref(
                ptr + 1732 + 152 + 32 + 0 + 0,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]["Effective"] = A.load.Ref(
                ptr + 1732 + 152 + 32 + 0 + 4,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserPolicy"] = A.load.Ref(
                ptr + 1732 + 152 + 32 + 0 + 8,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]["DevicePolicy"] = A.load.Ref(
                ptr + 1732 + 152 + 32 + 0 + 12,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserSetting"] = A.load.Ref(
                ptr + 1732 + 152 + 32 + 0 + 16,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]["SharedSetting"] = A.load.Ref(
                ptr + 1732 + 152 + 32 + 0 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 1732 + 152 + 32 + 0 + 26)) {
                x["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"] = A.load.Bool(
                  ptr + 1732 + 152 + 32 + 0 + 24
                );
              } else {
                delete x["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 1732 + 152 + 32 + 0 + 27)) {
                x["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"] = A.load.Bool(
                  ptr + 1732 + 152 + 32 + 0 + 25
                );
              } else {
                delete x["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"];
              }
            } else {
              delete x["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"];
            }
            if (A.load.Bool(ptr + 1732 + 152 + 32 + 32 + 28)) {
              x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"] = {};
              x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]["Active"] = A.load.Ref(
                ptr + 1732 + 152 + 32 + 32 + 0,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]["Effective"] = A.load.Ref(
                ptr + 1732 + 152 + 32 + 32 + 4,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]["UserPolicy"] = A.load.Ref(
                ptr + 1732 + 152 + 32 + 32 + 8,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]["DevicePolicy"] = A.load.Ref(
                ptr + 1732 + 152 + 32 + 32 + 12,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]["UserSetting"] = A.load.Ref(
                ptr + 1732 + 152 + 32 + 32 + 16,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]["SharedSetting"] = A.load.Ref(
                ptr + 1732 + 152 + 32 + 32 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 1732 + 152 + 32 + 32 + 26)) {
                x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"] = A.load.Bool(
                  ptr + 1732 + 152 + 32 + 32 + 24
                );
              } else {
                delete x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 1732 + 152 + 32 + 32 + 27)) {
                x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"] = A.load.Bool(
                  ptr + 1732 + 152 + 32 + 32 + 25
                );
              } else {
                delete x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"];
              }
            } else {
              delete x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"];
            }
            if (A.load.Bool(ptr + 1732 + 152 + 32 + 64 + 28)) {
              x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"] = {};
              x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]["Active"] = A.load.Ref(
                ptr + 1732 + 152 + 32 + 64 + 0,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]["Effective"] = A.load.Ref(
                ptr + 1732 + 152 + 32 + 64 + 4,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]["UserPolicy"] = A.load.Ref(
                ptr + 1732 + 152 + 32 + 64 + 8,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]["DevicePolicy"] = A.load.Ref(
                ptr + 1732 + 152 + 32 + 64 + 12,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]["UserSetting"] = A.load.Ref(
                ptr + 1732 + 152 + 32 + 64 + 16,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]["SharedSetting"] = A.load.Ref(
                ptr + 1732 + 152 + 32 + 64 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 1732 + 152 + 32 + 64 + 26)) {
                x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"] = A.load.Bool(
                  ptr + 1732 + 152 + 32 + 64 + 24
                );
              } else {
                delete x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 1732 + 152 + 32 + 64 + 27)) {
                x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"] = A.load.Bool(
                  ptr + 1732 + 152 + 32 + 64 + 25
                );
              } else {
                delete x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"];
              }
            } else {
              delete x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"];
            }
            if (A.load.Bool(ptr + 1732 + 152 + 32 + 96 + 28)) {
              x["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = {};
              x["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Active"] = A.load.Ref(
                ptr + 1732 + 152 + 32 + 96 + 0,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Effective"] = A.load.Ref(
                ptr + 1732 + 152 + 32 + 96 + 4,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserPolicy"] = A.load.Ref(
                ptr + 1732 + 152 + 32 + 96 + 8,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DevicePolicy"] = A.load.Ref(
                ptr + 1732 + 152 + 32 + 96 + 12,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserSetting"] = A.load.Ref(
                ptr + 1732 + 152 + 32 + 96 + 16,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["SharedSetting"] = A.load.Ref(
                ptr + 1732 + 152 + 32 + 96 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 1732 + 152 + 32 + 96 + 26)) {
                x["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"] = A.load.Bool(
                  ptr + 1732 + 152 + 32 + 96 + 24
                );
              } else {
                delete x["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 1732 + 152 + 32 + 96 + 27)) {
                x["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"] = A.load.Bool(
                  ptr + 1732 + 152 + 32 + 96 + 25
                );
              } else {
                delete x["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"];
              }
            } else {
              delete x["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"];
            }
          } else {
            delete x["OpenVPN"]["ClientCertPattern"]["Issuer"];
          }
          if (A.load.Bool(ptr + 1732 + 152 + 160 + 28)) {
            x["OpenVPN"]["ClientCertPattern"]["IssuerCARef"] = {};
            x["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]["Active"] = A.load.Ref(
              ptr + 1732 + 152 + 160 + 0,
              undefined
            );
            x["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]["Effective"] = A.load.Ref(
              ptr + 1732 + 152 + 160 + 4,
              undefined
            );
            x["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]["UserPolicy"] = A.load.Ref(
              ptr + 1732 + 152 + 160 + 8,
              undefined
            );
            x["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]["DevicePolicy"] = A.load.Ref(
              ptr + 1732 + 152 + 160 + 12,
              undefined
            );
            x["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]["UserSetting"] = A.load.Ref(
              ptr + 1732 + 152 + 160 + 16,
              undefined
            );
            x["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]["SharedSetting"] = A.load.Ref(
              ptr + 1732 + 152 + 160 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 1732 + 152 + 160 + 26)) {
              x["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]["UserEditable"] = A.load.Bool(
                ptr + 1732 + 152 + 160 + 24
              );
            } else {
              delete x["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 1732 + 152 + 160 + 27)) {
              x["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"] = A.load.Bool(
                ptr + 1732 + 152 + 160 + 25
              );
            } else {
              delete x["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"];
            }
          } else {
            delete x["OpenVPN"]["ClientCertPattern"]["IssuerCARef"];
          }
          if (A.load.Bool(ptr + 1732 + 152 + 192 + 125)) {
            x["OpenVPN"]["ClientCertPattern"]["Subject"] = {};
            if (A.load.Bool(ptr + 1732 + 152 + 192 + 0 + 28)) {
              x["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"] = {};
              x["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]["Active"] = A.load.Ref(
                ptr + 1732 + 152 + 192 + 0 + 0,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]["Effective"] = A.load.Ref(
                ptr + 1732 + 152 + 192 + 0 + 4,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]["UserPolicy"] = A.load.Ref(
                ptr + 1732 + 152 + 192 + 0 + 8,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]["DevicePolicy"] = A.load.Ref(
                ptr + 1732 + 152 + 192 + 0 + 12,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]["UserSetting"] = A.load.Ref(
                ptr + 1732 + 152 + 192 + 0 + 16,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]["SharedSetting"] = A.load.Ref(
                ptr + 1732 + 152 + 192 + 0 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 1732 + 152 + 192 + 0 + 26)) {
                x["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"] = A.load.Bool(
                  ptr + 1732 + 152 + 192 + 0 + 24
                );
              } else {
                delete x["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 1732 + 152 + 192 + 0 + 27)) {
                x["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"] = A.load.Bool(
                  ptr + 1732 + 152 + 192 + 0 + 25
                );
              } else {
                delete x["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"];
              }
            } else {
              delete x["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"];
            }
            if (A.load.Bool(ptr + 1732 + 152 + 192 + 32 + 28)) {
              x["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"] = {};
              x["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]["Active"] = A.load.Ref(
                ptr + 1732 + 152 + 192 + 32 + 0,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]["Effective"] = A.load.Ref(
                ptr + 1732 + 152 + 192 + 32 + 4,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]["UserPolicy"] = A.load.Ref(
                ptr + 1732 + 152 + 192 + 32 + 8,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]["DevicePolicy"] = A.load.Ref(
                ptr + 1732 + 152 + 192 + 32 + 12,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]["UserSetting"] = A.load.Ref(
                ptr + 1732 + 152 + 192 + 32 + 16,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]["SharedSetting"] = A.load.Ref(
                ptr + 1732 + 152 + 192 + 32 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 1732 + 152 + 192 + 32 + 26)) {
                x["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"] = A.load.Bool(
                  ptr + 1732 + 152 + 192 + 32 + 24
                );
              } else {
                delete x["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 1732 + 152 + 192 + 32 + 27)) {
                x["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"] = A.load.Bool(
                  ptr + 1732 + 152 + 192 + 32 + 25
                );
              } else {
                delete x["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"];
              }
            } else {
              delete x["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"];
            }
            if (A.load.Bool(ptr + 1732 + 152 + 192 + 64 + 28)) {
              x["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"] = {};
              x["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]["Active"] = A.load.Ref(
                ptr + 1732 + 152 + 192 + 64 + 0,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]["Effective"] = A.load.Ref(
                ptr + 1732 + 152 + 192 + 64 + 4,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]["UserPolicy"] = A.load.Ref(
                ptr + 1732 + 152 + 192 + 64 + 8,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]["DevicePolicy"] = A.load.Ref(
                ptr + 1732 + 152 + 192 + 64 + 12,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]["UserSetting"] = A.load.Ref(
                ptr + 1732 + 152 + 192 + 64 + 16,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]["SharedSetting"] = A.load.Ref(
                ptr + 1732 + 152 + 192 + 64 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 1732 + 152 + 192 + 64 + 26)) {
                x["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"] = A.load.Bool(
                  ptr + 1732 + 152 + 192 + 64 + 24
                );
              } else {
                delete x["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 1732 + 152 + 192 + 64 + 27)) {
                x["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"] = A.load.Bool(
                  ptr + 1732 + 152 + 192 + 64 + 25
                );
              } else {
                delete x["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"];
              }
            } else {
              delete x["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"];
            }
            if (A.load.Bool(ptr + 1732 + 152 + 192 + 96 + 28)) {
              x["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = {};
              x["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Active"] = A.load.Ref(
                ptr + 1732 + 152 + 192 + 96 + 0,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Effective"] = A.load.Ref(
                ptr + 1732 + 152 + 192 + 96 + 4,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserPolicy"] = A.load.Ref(
                ptr + 1732 + 152 + 192 + 96 + 8,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DevicePolicy"] = A.load.Ref(
                ptr + 1732 + 152 + 192 + 96 + 12,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserSetting"] = A.load.Ref(
                ptr + 1732 + 152 + 192 + 96 + 16,
                undefined
              );
              x["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["SharedSetting"] = A.load.Ref(
                ptr + 1732 + 152 + 192 + 96 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 1732 + 152 + 192 + 96 + 26)) {
                x["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"] = A.load.Bool(
                  ptr + 1732 + 152 + 192 + 96 + 24
                );
              } else {
                delete x["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 1732 + 152 + 192 + 96 + 27)) {
                x["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"] = A.load.Bool(
                  ptr + 1732 + 152 + 192 + 96 + 25
                );
              } else {
                delete x["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"];
              }
            } else {
              delete x["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"];
            }
          } else {
            delete x["OpenVPN"]["ClientCertPattern"]["Subject"];
          }
        } else {
          delete x["OpenVPN"]["ClientCertPattern"];
        }
        if (A.load.Bool(ptr + 1732 + 472 + 28)) {
          x["OpenVPN"]["ClientCertProvisioningProfileId"] = {};
          x["OpenVPN"]["ClientCertProvisioningProfileId"]["Active"] = A.load.Ref(ptr + 1732 + 472 + 0, undefined);
          x["OpenVPN"]["ClientCertProvisioningProfileId"]["Effective"] = A.load.Ref(ptr + 1732 + 472 + 4, undefined);
          x["OpenVPN"]["ClientCertProvisioningProfileId"]["UserPolicy"] = A.load.Ref(ptr + 1732 + 472 + 8, undefined);
          x["OpenVPN"]["ClientCertProvisioningProfileId"]["DevicePolicy"] = A.load.Ref(
            ptr + 1732 + 472 + 12,
            undefined
          );
          x["OpenVPN"]["ClientCertProvisioningProfileId"]["UserSetting"] = A.load.Ref(ptr + 1732 + 472 + 16, undefined);
          x["OpenVPN"]["ClientCertProvisioningProfileId"]["SharedSetting"] = A.load.Ref(
            ptr + 1732 + 472 + 20,
            undefined
          );
          if (A.load.Bool(ptr + 1732 + 472 + 26)) {
            x["OpenVPN"]["ClientCertProvisioningProfileId"]["UserEditable"] = A.load.Bool(ptr + 1732 + 472 + 24);
          } else {
            delete x["OpenVPN"]["ClientCertProvisioningProfileId"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 472 + 27)) {
            x["OpenVPN"]["ClientCertProvisioningProfileId"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 472 + 25);
          } else {
            delete x["OpenVPN"]["ClientCertProvisioningProfileId"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["ClientCertProvisioningProfileId"];
        }
        if (A.load.Bool(ptr + 1732 + 504 + 28)) {
          x["OpenVPN"]["ClientCertRef"] = {};
          x["OpenVPN"]["ClientCertRef"]["Active"] = A.load.Ref(ptr + 1732 + 504 + 0, undefined);
          x["OpenVPN"]["ClientCertRef"]["Effective"] = A.load.Ref(ptr + 1732 + 504 + 4, undefined);
          x["OpenVPN"]["ClientCertRef"]["UserPolicy"] = A.load.Ref(ptr + 1732 + 504 + 8, undefined);
          x["OpenVPN"]["ClientCertRef"]["DevicePolicy"] = A.load.Ref(ptr + 1732 + 504 + 12, undefined);
          x["OpenVPN"]["ClientCertRef"]["UserSetting"] = A.load.Ref(ptr + 1732 + 504 + 16, undefined);
          x["OpenVPN"]["ClientCertRef"]["SharedSetting"] = A.load.Ref(ptr + 1732 + 504 + 20, undefined);
          if (A.load.Bool(ptr + 1732 + 504 + 26)) {
            x["OpenVPN"]["ClientCertRef"]["UserEditable"] = A.load.Bool(ptr + 1732 + 504 + 24);
          } else {
            delete x["OpenVPN"]["ClientCertRef"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 504 + 27)) {
            x["OpenVPN"]["ClientCertRef"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 504 + 25);
          } else {
            delete x["OpenVPN"]["ClientCertRef"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["ClientCertRef"];
        }
        if (A.load.Bool(ptr + 1732 + 536 + 28)) {
          x["OpenVPN"]["ClientCertType"] = {};
          x["OpenVPN"]["ClientCertType"]["Active"] = A.load.Ref(ptr + 1732 + 536 + 0, undefined);
          x["OpenVPN"]["ClientCertType"]["Effective"] = A.load.Ref(ptr + 1732 + 536 + 4, undefined);
          x["OpenVPN"]["ClientCertType"]["UserPolicy"] = A.load.Ref(ptr + 1732 + 536 + 8, undefined);
          x["OpenVPN"]["ClientCertType"]["DevicePolicy"] = A.load.Ref(ptr + 1732 + 536 + 12, undefined);
          x["OpenVPN"]["ClientCertType"]["UserSetting"] = A.load.Ref(ptr + 1732 + 536 + 16, undefined);
          x["OpenVPN"]["ClientCertType"]["SharedSetting"] = A.load.Ref(ptr + 1732 + 536 + 20, undefined);
          if (A.load.Bool(ptr + 1732 + 536 + 26)) {
            x["OpenVPN"]["ClientCertType"]["UserEditable"] = A.load.Bool(ptr + 1732 + 536 + 24);
          } else {
            delete x["OpenVPN"]["ClientCertType"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 536 + 27)) {
            x["OpenVPN"]["ClientCertType"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 536 + 25);
          } else {
            delete x["OpenVPN"]["ClientCertType"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["ClientCertType"];
        }
        if (A.load.Bool(ptr + 1732 + 568 + 28)) {
          x["OpenVPN"]["CompLZO"] = {};
          x["OpenVPN"]["CompLZO"]["Active"] = A.load.Ref(ptr + 1732 + 568 + 0, undefined);
          x["OpenVPN"]["CompLZO"]["Effective"] = A.load.Ref(ptr + 1732 + 568 + 4, undefined);
          x["OpenVPN"]["CompLZO"]["UserPolicy"] = A.load.Ref(ptr + 1732 + 568 + 8, undefined);
          x["OpenVPN"]["CompLZO"]["DevicePolicy"] = A.load.Ref(ptr + 1732 + 568 + 12, undefined);
          x["OpenVPN"]["CompLZO"]["UserSetting"] = A.load.Ref(ptr + 1732 + 568 + 16, undefined);
          x["OpenVPN"]["CompLZO"]["SharedSetting"] = A.load.Ref(ptr + 1732 + 568 + 20, undefined);
          if (A.load.Bool(ptr + 1732 + 568 + 26)) {
            x["OpenVPN"]["CompLZO"]["UserEditable"] = A.load.Bool(ptr + 1732 + 568 + 24);
          } else {
            delete x["OpenVPN"]["CompLZO"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 568 + 27)) {
            x["OpenVPN"]["CompLZO"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 568 + 25);
          } else {
            delete x["OpenVPN"]["CompLZO"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["CompLZO"];
        }
        if (A.load.Bool(ptr + 1732 + 600 + 21)) {
          x["OpenVPN"]["CompNoAdapt"] = {};
          if (A.load.Bool(ptr + 1732 + 600 + 14)) {
            x["OpenVPN"]["CompNoAdapt"]["Active"] = A.load.Bool(ptr + 1732 + 600 + 0);
          } else {
            delete x["OpenVPN"]["CompNoAdapt"]["Active"];
          }
          x["OpenVPN"]["CompNoAdapt"]["Effective"] = A.load.Ref(ptr + 1732 + 600 + 4, undefined);
          if (A.load.Bool(ptr + 1732 + 600 + 15)) {
            x["OpenVPN"]["CompNoAdapt"]["UserPolicy"] = A.load.Bool(ptr + 1732 + 600 + 8);
          } else {
            delete x["OpenVPN"]["CompNoAdapt"]["UserPolicy"];
          }
          if (A.load.Bool(ptr + 1732 + 600 + 16)) {
            x["OpenVPN"]["CompNoAdapt"]["DevicePolicy"] = A.load.Bool(ptr + 1732 + 600 + 9);
          } else {
            delete x["OpenVPN"]["CompNoAdapt"]["DevicePolicy"];
          }
          if (A.load.Bool(ptr + 1732 + 600 + 17)) {
            x["OpenVPN"]["CompNoAdapt"]["UserSetting"] = A.load.Bool(ptr + 1732 + 600 + 10);
          } else {
            delete x["OpenVPN"]["CompNoAdapt"]["UserSetting"];
          }
          if (A.load.Bool(ptr + 1732 + 600 + 18)) {
            x["OpenVPN"]["CompNoAdapt"]["SharedSetting"] = A.load.Bool(ptr + 1732 + 600 + 11);
          } else {
            delete x["OpenVPN"]["CompNoAdapt"]["SharedSetting"];
          }
          if (A.load.Bool(ptr + 1732 + 600 + 19)) {
            x["OpenVPN"]["CompNoAdapt"]["UserEditable"] = A.load.Bool(ptr + 1732 + 600 + 12);
          } else {
            delete x["OpenVPN"]["CompNoAdapt"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 600 + 20)) {
            x["OpenVPN"]["CompNoAdapt"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 600 + 13);
          } else {
            delete x["OpenVPN"]["CompNoAdapt"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["CompNoAdapt"];
        }
        if (A.load.Bool(ptr + 1732 + 624 + 28)) {
          x["OpenVPN"]["ExtraHosts"] = {};
          x["OpenVPN"]["ExtraHosts"]["Active"] = A.load.Ref(ptr + 1732 + 624 + 0, undefined);
          x["OpenVPN"]["ExtraHosts"]["Effective"] = A.load.Ref(ptr + 1732 + 624 + 4, undefined);
          x["OpenVPN"]["ExtraHosts"]["UserPolicy"] = A.load.Ref(ptr + 1732 + 624 + 8, undefined);
          x["OpenVPN"]["ExtraHosts"]["DevicePolicy"] = A.load.Ref(ptr + 1732 + 624 + 12, undefined);
          x["OpenVPN"]["ExtraHosts"]["UserSetting"] = A.load.Ref(ptr + 1732 + 624 + 16, undefined);
          x["OpenVPN"]["ExtraHosts"]["SharedSetting"] = A.load.Ref(ptr + 1732 + 624 + 20, undefined);
          if (A.load.Bool(ptr + 1732 + 624 + 26)) {
            x["OpenVPN"]["ExtraHosts"]["UserEditable"] = A.load.Bool(ptr + 1732 + 624 + 24);
          } else {
            delete x["OpenVPN"]["ExtraHosts"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 624 + 27)) {
            x["OpenVPN"]["ExtraHosts"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 624 + 25);
          } else {
            delete x["OpenVPN"]["ExtraHosts"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["ExtraHosts"];
        }
        if (A.load.Bool(ptr + 1732 + 656 + 21)) {
          x["OpenVPN"]["IgnoreDefaultRoute"] = {};
          if (A.load.Bool(ptr + 1732 + 656 + 14)) {
            x["OpenVPN"]["IgnoreDefaultRoute"]["Active"] = A.load.Bool(ptr + 1732 + 656 + 0);
          } else {
            delete x["OpenVPN"]["IgnoreDefaultRoute"]["Active"];
          }
          x["OpenVPN"]["IgnoreDefaultRoute"]["Effective"] = A.load.Ref(ptr + 1732 + 656 + 4, undefined);
          if (A.load.Bool(ptr + 1732 + 656 + 15)) {
            x["OpenVPN"]["IgnoreDefaultRoute"]["UserPolicy"] = A.load.Bool(ptr + 1732 + 656 + 8);
          } else {
            delete x["OpenVPN"]["IgnoreDefaultRoute"]["UserPolicy"];
          }
          if (A.load.Bool(ptr + 1732 + 656 + 16)) {
            x["OpenVPN"]["IgnoreDefaultRoute"]["DevicePolicy"] = A.load.Bool(ptr + 1732 + 656 + 9);
          } else {
            delete x["OpenVPN"]["IgnoreDefaultRoute"]["DevicePolicy"];
          }
          if (A.load.Bool(ptr + 1732 + 656 + 17)) {
            x["OpenVPN"]["IgnoreDefaultRoute"]["UserSetting"] = A.load.Bool(ptr + 1732 + 656 + 10);
          } else {
            delete x["OpenVPN"]["IgnoreDefaultRoute"]["UserSetting"];
          }
          if (A.load.Bool(ptr + 1732 + 656 + 18)) {
            x["OpenVPN"]["IgnoreDefaultRoute"]["SharedSetting"] = A.load.Bool(ptr + 1732 + 656 + 11);
          } else {
            delete x["OpenVPN"]["IgnoreDefaultRoute"]["SharedSetting"];
          }
          if (A.load.Bool(ptr + 1732 + 656 + 19)) {
            x["OpenVPN"]["IgnoreDefaultRoute"]["UserEditable"] = A.load.Bool(ptr + 1732 + 656 + 12);
          } else {
            delete x["OpenVPN"]["IgnoreDefaultRoute"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 656 + 20)) {
            x["OpenVPN"]["IgnoreDefaultRoute"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 656 + 13);
          } else {
            delete x["OpenVPN"]["IgnoreDefaultRoute"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["IgnoreDefaultRoute"];
        }
        if (A.load.Bool(ptr + 1732 + 680 + 28)) {
          x["OpenVPN"]["KeyDirection"] = {};
          x["OpenVPN"]["KeyDirection"]["Active"] = A.load.Ref(ptr + 1732 + 680 + 0, undefined);
          x["OpenVPN"]["KeyDirection"]["Effective"] = A.load.Ref(ptr + 1732 + 680 + 4, undefined);
          x["OpenVPN"]["KeyDirection"]["UserPolicy"] = A.load.Ref(ptr + 1732 + 680 + 8, undefined);
          x["OpenVPN"]["KeyDirection"]["DevicePolicy"] = A.load.Ref(ptr + 1732 + 680 + 12, undefined);
          x["OpenVPN"]["KeyDirection"]["UserSetting"] = A.load.Ref(ptr + 1732 + 680 + 16, undefined);
          x["OpenVPN"]["KeyDirection"]["SharedSetting"] = A.load.Ref(ptr + 1732 + 680 + 20, undefined);
          if (A.load.Bool(ptr + 1732 + 680 + 26)) {
            x["OpenVPN"]["KeyDirection"]["UserEditable"] = A.load.Bool(ptr + 1732 + 680 + 24);
          } else {
            delete x["OpenVPN"]["KeyDirection"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 680 + 27)) {
            x["OpenVPN"]["KeyDirection"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 680 + 25);
          } else {
            delete x["OpenVPN"]["KeyDirection"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["KeyDirection"];
        }
        if (A.load.Bool(ptr + 1732 + 712 + 28)) {
          x["OpenVPN"]["NsCertType"] = {};
          x["OpenVPN"]["NsCertType"]["Active"] = A.load.Ref(ptr + 1732 + 712 + 0, undefined);
          x["OpenVPN"]["NsCertType"]["Effective"] = A.load.Ref(ptr + 1732 + 712 + 4, undefined);
          x["OpenVPN"]["NsCertType"]["UserPolicy"] = A.load.Ref(ptr + 1732 + 712 + 8, undefined);
          x["OpenVPN"]["NsCertType"]["DevicePolicy"] = A.load.Ref(ptr + 1732 + 712 + 12, undefined);
          x["OpenVPN"]["NsCertType"]["UserSetting"] = A.load.Ref(ptr + 1732 + 712 + 16, undefined);
          x["OpenVPN"]["NsCertType"]["SharedSetting"] = A.load.Ref(ptr + 1732 + 712 + 20, undefined);
          if (A.load.Bool(ptr + 1732 + 712 + 26)) {
            x["OpenVPN"]["NsCertType"]["UserEditable"] = A.load.Bool(ptr + 1732 + 712 + 24);
          } else {
            delete x["OpenVPN"]["NsCertType"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 712 + 27)) {
            x["OpenVPN"]["NsCertType"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 712 + 25);
          } else {
            delete x["OpenVPN"]["NsCertType"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["NsCertType"];
        }
        if (A.load.Bool(ptr + 1732 + 744 + 28)) {
          x["OpenVPN"]["OTP"] = {};
          x["OpenVPN"]["OTP"]["Active"] = A.load.Ref(ptr + 1732 + 744 + 0, undefined);
          x["OpenVPN"]["OTP"]["Effective"] = A.load.Ref(ptr + 1732 + 744 + 4, undefined);
          x["OpenVPN"]["OTP"]["UserPolicy"] = A.load.Ref(ptr + 1732 + 744 + 8, undefined);
          x["OpenVPN"]["OTP"]["DevicePolicy"] = A.load.Ref(ptr + 1732 + 744 + 12, undefined);
          x["OpenVPN"]["OTP"]["UserSetting"] = A.load.Ref(ptr + 1732 + 744 + 16, undefined);
          x["OpenVPN"]["OTP"]["SharedSetting"] = A.load.Ref(ptr + 1732 + 744 + 20, undefined);
          if (A.load.Bool(ptr + 1732 + 744 + 26)) {
            x["OpenVPN"]["OTP"]["UserEditable"] = A.load.Bool(ptr + 1732 + 744 + 24);
          } else {
            delete x["OpenVPN"]["OTP"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 744 + 27)) {
            x["OpenVPN"]["OTP"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 744 + 25);
          } else {
            delete x["OpenVPN"]["OTP"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["OTP"];
        }
        if (A.load.Bool(ptr + 1732 + 776 + 28)) {
          x["OpenVPN"]["Password"] = {};
          x["OpenVPN"]["Password"]["Active"] = A.load.Ref(ptr + 1732 + 776 + 0, undefined);
          x["OpenVPN"]["Password"]["Effective"] = A.load.Ref(ptr + 1732 + 776 + 4, undefined);
          x["OpenVPN"]["Password"]["UserPolicy"] = A.load.Ref(ptr + 1732 + 776 + 8, undefined);
          x["OpenVPN"]["Password"]["DevicePolicy"] = A.load.Ref(ptr + 1732 + 776 + 12, undefined);
          x["OpenVPN"]["Password"]["UserSetting"] = A.load.Ref(ptr + 1732 + 776 + 16, undefined);
          x["OpenVPN"]["Password"]["SharedSetting"] = A.load.Ref(ptr + 1732 + 776 + 20, undefined);
          if (A.load.Bool(ptr + 1732 + 776 + 26)) {
            x["OpenVPN"]["Password"]["UserEditable"] = A.load.Bool(ptr + 1732 + 776 + 24);
          } else {
            delete x["OpenVPN"]["Password"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 776 + 27)) {
            x["OpenVPN"]["Password"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 776 + 25);
          } else {
            delete x["OpenVPN"]["Password"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["Password"];
        }
        if (A.load.Bool(ptr + 1732 + 808 + 33)) {
          x["OpenVPN"]["Port"] = {};
          if (A.load.Bool(ptr + 1732 + 808 + 26)) {
            x["OpenVPN"]["Port"]["Active"] = A.load.Int32(ptr + 1732 + 808 + 0);
          } else {
            delete x["OpenVPN"]["Port"]["Active"];
          }
          x["OpenVPN"]["Port"]["Effective"] = A.load.Ref(ptr + 1732 + 808 + 4, undefined);
          if (A.load.Bool(ptr + 1732 + 808 + 27)) {
            x["OpenVPN"]["Port"]["UserPolicy"] = A.load.Int32(ptr + 1732 + 808 + 8);
          } else {
            delete x["OpenVPN"]["Port"]["UserPolicy"];
          }
          if (A.load.Bool(ptr + 1732 + 808 + 28)) {
            x["OpenVPN"]["Port"]["DevicePolicy"] = A.load.Int32(ptr + 1732 + 808 + 12);
          } else {
            delete x["OpenVPN"]["Port"]["DevicePolicy"];
          }
          if (A.load.Bool(ptr + 1732 + 808 + 29)) {
            x["OpenVPN"]["Port"]["UserSetting"] = A.load.Int32(ptr + 1732 + 808 + 16);
          } else {
            delete x["OpenVPN"]["Port"]["UserSetting"];
          }
          if (A.load.Bool(ptr + 1732 + 808 + 30)) {
            x["OpenVPN"]["Port"]["SharedSetting"] = A.load.Int32(ptr + 1732 + 808 + 20);
          } else {
            delete x["OpenVPN"]["Port"]["SharedSetting"];
          }
          if (A.load.Bool(ptr + 1732 + 808 + 31)) {
            x["OpenVPN"]["Port"]["UserEditable"] = A.load.Bool(ptr + 1732 + 808 + 24);
          } else {
            delete x["OpenVPN"]["Port"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 808 + 32)) {
            x["OpenVPN"]["Port"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 808 + 25);
          } else {
            delete x["OpenVPN"]["Port"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["Port"];
        }
        if (A.load.Bool(ptr + 1732 + 844 + 28)) {
          x["OpenVPN"]["Proto"] = {};
          x["OpenVPN"]["Proto"]["Active"] = A.load.Ref(ptr + 1732 + 844 + 0, undefined);
          x["OpenVPN"]["Proto"]["Effective"] = A.load.Ref(ptr + 1732 + 844 + 4, undefined);
          x["OpenVPN"]["Proto"]["UserPolicy"] = A.load.Ref(ptr + 1732 + 844 + 8, undefined);
          x["OpenVPN"]["Proto"]["DevicePolicy"] = A.load.Ref(ptr + 1732 + 844 + 12, undefined);
          x["OpenVPN"]["Proto"]["UserSetting"] = A.load.Ref(ptr + 1732 + 844 + 16, undefined);
          x["OpenVPN"]["Proto"]["SharedSetting"] = A.load.Ref(ptr + 1732 + 844 + 20, undefined);
          if (A.load.Bool(ptr + 1732 + 844 + 26)) {
            x["OpenVPN"]["Proto"]["UserEditable"] = A.load.Bool(ptr + 1732 + 844 + 24);
          } else {
            delete x["OpenVPN"]["Proto"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 844 + 27)) {
            x["OpenVPN"]["Proto"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 844 + 25);
          } else {
            delete x["OpenVPN"]["Proto"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["Proto"];
        }
        if (A.load.Bool(ptr + 1732 + 876 + 21)) {
          x["OpenVPN"]["PushPeerInfo"] = {};
          if (A.load.Bool(ptr + 1732 + 876 + 14)) {
            x["OpenVPN"]["PushPeerInfo"]["Active"] = A.load.Bool(ptr + 1732 + 876 + 0);
          } else {
            delete x["OpenVPN"]["PushPeerInfo"]["Active"];
          }
          x["OpenVPN"]["PushPeerInfo"]["Effective"] = A.load.Ref(ptr + 1732 + 876 + 4, undefined);
          if (A.load.Bool(ptr + 1732 + 876 + 15)) {
            x["OpenVPN"]["PushPeerInfo"]["UserPolicy"] = A.load.Bool(ptr + 1732 + 876 + 8);
          } else {
            delete x["OpenVPN"]["PushPeerInfo"]["UserPolicy"];
          }
          if (A.load.Bool(ptr + 1732 + 876 + 16)) {
            x["OpenVPN"]["PushPeerInfo"]["DevicePolicy"] = A.load.Bool(ptr + 1732 + 876 + 9);
          } else {
            delete x["OpenVPN"]["PushPeerInfo"]["DevicePolicy"];
          }
          if (A.load.Bool(ptr + 1732 + 876 + 17)) {
            x["OpenVPN"]["PushPeerInfo"]["UserSetting"] = A.load.Bool(ptr + 1732 + 876 + 10);
          } else {
            delete x["OpenVPN"]["PushPeerInfo"]["UserSetting"];
          }
          if (A.load.Bool(ptr + 1732 + 876 + 18)) {
            x["OpenVPN"]["PushPeerInfo"]["SharedSetting"] = A.load.Bool(ptr + 1732 + 876 + 11);
          } else {
            delete x["OpenVPN"]["PushPeerInfo"]["SharedSetting"];
          }
          if (A.load.Bool(ptr + 1732 + 876 + 19)) {
            x["OpenVPN"]["PushPeerInfo"]["UserEditable"] = A.load.Bool(ptr + 1732 + 876 + 12);
          } else {
            delete x["OpenVPN"]["PushPeerInfo"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 876 + 20)) {
            x["OpenVPN"]["PushPeerInfo"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 876 + 13);
          } else {
            delete x["OpenVPN"]["PushPeerInfo"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["PushPeerInfo"];
        }
        if (A.load.Bool(ptr + 1732 + 900 + 28)) {
          x["OpenVPN"]["RemoteCertEKU"] = {};
          x["OpenVPN"]["RemoteCertEKU"]["Active"] = A.load.Ref(ptr + 1732 + 900 + 0, undefined);
          x["OpenVPN"]["RemoteCertEKU"]["Effective"] = A.load.Ref(ptr + 1732 + 900 + 4, undefined);
          x["OpenVPN"]["RemoteCertEKU"]["UserPolicy"] = A.load.Ref(ptr + 1732 + 900 + 8, undefined);
          x["OpenVPN"]["RemoteCertEKU"]["DevicePolicy"] = A.load.Ref(ptr + 1732 + 900 + 12, undefined);
          x["OpenVPN"]["RemoteCertEKU"]["UserSetting"] = A.load.Ref(ptr + 1732 + 900 + 16, undefined);
          x["OpenVPN"]["RemoteCertEKU"]["SharedSetting"] = A.load.Ref(ptr + 1732 + 900 + 20, undefined);
          if (A.load.Bool(ptr + 1732 + 900 + 26)) {
            x["OpenVPN"]["RemoteCertEKU"]["UserEditable"] = A.load.Bool(ptr + 1732 + 900 + 24);
          } else {
            delete x["OpenVPN"]["RemoteCertEKU"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 900 + 27)) {
            x["OpenVPN"]["RemoteCertEKU"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 900 + 25);
          } else {
            delete x["OpenVPN"]["RemoteCertEKU"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["RemoteCertEKU"];
        }
        if (A.load.Bool(ptr + 1732 + 932 + 28)) {
          x["OpenVPN"]["RemoteCertKU"] = {};
          x["OpenVPN"]["RemoteCertKU"]["Active"] = A.load.Ref(ptr + 1732 + 932 + 0, undefined);
          x["OpenVPN"]["RemoteCertKU"]["Effective"] = A.load.Ref(ptr + 1732 + 932 + 4, undefined);
          x["OpenVPN"]["RemoteCertKU"]["UserPolicy"] = A.load.Ref(ptr + 1732 + 932 + 8, undefined);
          x["OpenVPN"]["RemoteCertKU"]["DevicePolicy"] = A.load.Ref(ptr + 1732 + 932 + 12, undefined);
          x["OpenVPN"]["RemoteCertKU"]["UserSetting"] = A.load.Ref(ptr + 1732 + 932 + 16, undefined);
          x["OpenVPN"]["RemoteCertKU"]["SharedSetting"] = A.load.Ref(ptr + 1732 + 932 + 20, undefined);
          if (A.load.Bool(ptr + 1732 + 932 + 26)) {
            x["OpenVPN"]["RemoteCertKU"]["UserEditable"] = A.load.Bool(ptr + 1732 + 932 + 24);
          } else {
            delete x["OpenVPN"]["RemoteCertKU"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 932 + 27)) {
            x["OpenVPN"]["RemoteCertKU"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 932 + 25);
          } else {
            delete x["OpenVPN"]["RemoteCertKU"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["RemoteCertKU"];
        }
        if (A.load.Bool(ptr + 1732 + 964 + 28)) {
          x["OpenVPN"]["RemoteCertTLS"] = {};
          x["OpenVPN"]["RemoteCertTLS"]["Active"] = A.load.Ref(ptr + 1732 + 964 + 0, undefined);
          x["OpenVPN"]["RemoteCertTLS"]["Effective"] = A.load.Ref(ptr + 1732 + 964 + 4, undefined);
          x["OpenVPN"]["RemoteCertTLS"]["UserPolicy"] = A.load.Ref(ptr + 1732 + 964 + 8, undefined);
          x["OpenVPN"]["RemoteCertTLS"]["DevicePolicy"] = A.load.Ref(ptr + 1732 + 964 + 12, undefined);
          x["OpenVPN"]["RemoteCertTLS"]["UserSetting"] = A.load.Ref(ptr + 1732 + 964 + 16, undefined);
          x["OpenVPN"]["RemoteCertTLS"]["SharedSetting"] = A.load.Ref(ptr + 1732 + 964 + 20, undefined);
          if (A.load.Bool(ptr + 1732 + 964 + 26)) {
            x["OpenVPN"]["RemoteCertTLS"]["UserEditable"] = A.load.Bool(ptr + 1732 + 964 + 24);
          } else {
            delete x["OpenVPN"]["RemoteCertTLS"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 964 + 27)) {
            x["OpenVPN"]["RemoteCertTLS"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 964 + 25);
          } else {
            delete x["OpenVPN"]["RemoteCertTLS"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["RemoteCertTLS"];
        }
        if (A.load.Bool(ptr + 1732 + 996 + 33)) {
          x["OpenVPN"]["RenegSec"] = {};
          if (A.load.Bool(ptr + 1732 + 996 + 26)) {
            x["OpenVPN"]["RenegSec"]["Active"] = A.load.Int32(ptr + 1732 + 996 + 0);
          } else {
            delete x["OpenVPN"]["RenegSec"]["Active"];
          }
          x["OpenVPN"]["RenegSec"]["Effective"] = A.load.Ref(ptr + 1732 + 996 + 4, undefined);
          if (A.load.Bool(ptr + 1732 + 996 + 27)) {
            x["OpenVPN"]["RenegSec"]["UserPolicy"] = A.load.Int32(ptr + 1732 + 996 + 8);
          } else {
            delete x["OpenVPN"]["RenegSec"]["UserPolicy"];
          }
          if (A.load.Bool(ptr + 1732 + 996 + 28)) {
            x["OpenVPN"]["RenegSec"]["DevicePolicy"] = A.load.Int32(ptr + 1732 + 996 + 12);
          } else {
            delete x["OpenVPN"]["RenegSec"]["DevicePolicy"];
          }
          if (A.load.Bool(ptr + 1732 + 996 + 29)) {
            x["OpenVPN"]["RenegSec"]["UserSetting"] = A.load.Int32(ptr + 1732 + 996 + 16);
          } else {
            delete x["OpenVPN"]["RenegSec"]["UserSetting"];
          }
          if (A.load.Bool(ptr + 1732 + 996 + 30)) {
            x["OpenVPN"]["RenegSec"]["SharedSetting"] = A.load.Int32(ptr + 1732 + 996 + 20);
          } else {
            delete x["OpenVPN"]["RenegSec"]["SharedSetting"];
          }
          if (A.load.Bool(ptr + 1732 + 996 + 31)) {
            x["OpenVPN"]["RenegSec"]["UserEditable"] = A.load.Bool(ptr + 1732 + 996 + 24);
          } else {
            delete x["OpenVPN"]["RenegSec"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 996 + 32)) {
            x["OpenVPN"]["RenegSec"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 996 + 25);
          } else {
            delete x["OpenVPN"]["RenegSec"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["RenegSec"];
        }
        if (A.load.Bool(ptr + 1732 + 1032 + 21)) {
          x["OpenVPN"]["SaveCredentials"] = {};
          if (A.load.Bool(ptr + 1732 + 1032 + 14)) {
            x["OpenVPN"]["SaveCredentials"]["Active"] = A.load.Bool(ptr + 1732 + 1032 + 0);
          } else {
            delete x["OpenVPN"]["SaveCredentials"]["Active"];
          }
          x["OpenVPN"]["SaveCredentials"]["Effective"] = A.load.Ref(ptr + 1732 + 1032 + 4, undefined);
          if (A.load.Bool(ptr + 1732 + 1032 + 15)) {
            x["OpenVPN"]["SaveCredentials"]["UserPolicy"] = A.load.Bool(ptr + 1732 + 1032 + 8);
          } else {
            delete x["OpenVPN"]["SaveCredentials"]["UserPolicy"];
          }
          if (A.load.Bool(ptr + 1732 + 1032 + 16)) {
            x["OpenVPN"]["SaveCredentials"]["DevicePolicy"] = A.load.Bool(ptr + 1732 + 1032 + 9);
          } else {
            delete x["OpenVPN"]["SaveCredentials"]["DevicePolicy"];
          }
          if (A.load.Bool(ptr + 1732 + 1032 + 17)) {
            x["OpenVPN"]["SaveCredentials"]["UserSetting"] = A.load.Bool(ptr + 1732 + 1032 + 10);
          } else {
            delete x["OpenVPN"]["SaveCredentials"]["UserSetting"];
          }
          if (A.load.Bool(ptr + 1732 + 1032 + 18)) {
            x["OpenVPN"]["SaveCredentials"]["SharedSetting"] = A.load.Bool(ptr + 1732 + 1032 + 11);
          } else {
            delete x["OpenVPN"]["SaveCredentials"]["SharedSetting"];
          }
          if (A.load.Bool(ptr + 1732 + 1032 + 19)) {
            x["OpenVPN"]["SaveCredentials"]["UserEditable"] = A.load.Bool(ptr + 1732 + 1032 + 12);
          } else {
            delete x["OpenVPN"]["SaveCredentials"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 1032 + 20)) {
            x["OpenVPN"]["SaveCredentials"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 1032 + 13);
          } else {
            delete x["OpenVPN"]["SaveCredentials"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["SaveCredentials"];
        }
        if (A.load.Bool(ptr + 1732 + 1056 + 28)) {
          x["OpenVPN"]["ServerCAPEMs"] = {};
          x["OpenVPN"]["ServerCAPEMs"]["Active"] = A.load.Ref(ptr + 1732 + 1056 + 0, undefined);
          x["OpenVPN"]["ServerCAPEMs"]["Effective"] = A.load.Ref(ptr + 1732 + 1056 + 4, undefined);
          x["OpenVPN"]["ServerCAPEMs"]["UserPolicy"] = A.load.Ref(ptr + 1732 + 1056 + 8, undefined);
          x["OpenVPN"]["ServerCAPEMs"]["DevicePolicy"] = A.load.Ref(ptr + 1732 + 1056 + 12, undefined);
          x["OpenVPN"]["ServerCAPEMs"]["UserSetting"] = A.load.Ref(ptr + 1732 + 1056 + 16, undefined);
          x["OpenVPN"]["ServerCAPEMs"]["SharedSetting"] = A.load.Ref(ptr + 1732 + 1056 + 20, undefined);
          if (A.load.Bool(ptr + 1732 + 1056 + 26)) {
            x["OpenVPN"]["ServerCAPEMs"]["UserEditable"] = A.load.Bool(ptr + 1732 + 1056 + 24);
          } else {
            delete x["OpenVPN"]["ServerCAPEMs"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 1056 + 27)) {
            x["OpenVPN"]["ServerCAPEMs"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 1056 + 25);
          } else {
            delete x["OpenVPN"]["ServerCAPEMs"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["ServerCAPEMs"];
        }
        if (A.load.Bool(ptr + 1732 + 1088 + 28)) {
          x["OpenVPN"]["ServerCARefs"] = {};
          x["OpenVPN"]["ServerCARefs"]["Active"] = A.load.Ref(ptr + 1732 + 1088 + 0, undefined);
          x["OpenVPN"]["ServerCARefs"]["Effective"] = A.load.Ref(ptr + 1732 + 1088 + 4, undefined);
          x["OpenVPN"]["ServerCARefs"]["UserPolicy"] = A.load.Ref(ptr + 1732 + 1088 + 8, undefined);
          x["OpenVPN"]["ServerCARefs"]["DevicePolicy"] = A.load.Ref(ptr + 1732 + 1088 + 12, undefined);
          x["OpenVPN"]["ServerCARefs"]["UserSetting"] = A.load.Ref(ptr + 1732 + 1088 + 16, undefined);
          x["OpenVPN"]["ServerCARefs"]["SharedSetting"] = A.load.Ref(ptr + 1732 + 1088 + 20, undefined);
          if (A.load.Bool(ptr + 1732 + 1088 + 26)) {
            x["OpenVPN"]["ServerCARefs"]["UserEditable"] = A.load.Bool(ptr + 1732 + 1088 + 24);
          } else {
            delete x["OpenVPN"]["ServerCARefs"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 1088 + 27)) {
            x["OpenVPN"]["ServerCARefs"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 1088 + 25);
          } else {
            delete x["OpenVPN"]["ServerCARefs"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["ServerCARefs"];
        }
        if (A.load.Bool(ptr + 1732 + 1120 + 28)) {
          x["OpenVPN"]["ServerCertRef"] = {};
          x["OpenVPN"]["ServerCertRef"]["Active"] = A.load.Ref(ptr + 1732 + 1120 + 0, undefined);
          x["OpenVPN"]["ServerCertRef"]["Effective"] = A.load.Ref(ptr + 1732 + 1120 + 4, undefined);
          x["OpenVPN"]["ServerCertRef"]["UserPolicy"] = A.load.Ref(ptr + 1732 + 1120 + 8, undefined);
          x["OpenVPN"]["ServerCertRef"]["DevicePolicy"] = A.load.Ref(ptr + 1732 + 1120 + 12, undefined);
          x["OpenVPN"]["ServerCertRef"]["UserSetting"] = A.load.Ref(ptr + 1732 + 1120 + 16, undefined);
          x["OpenVPN"]["ServerCertRef"]["SharedSetting"] = A.load.Ref(ptr + 1732 + 1120 + 20, undefined);
          if (A.load.Bool(ptr + 1732 + 1120 + 26)) {
            x["OpenVPN"]["ServerCertRef"]["UserEditable"] = A.load.Bool(ptr + 1732 + 1120 + 24);
          } else {
            delete x["OpenVPN"]["ServerCertRef"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 1120 + 27)) {
            x["OpenVPN"]["ServerCertRef"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 1120 + 25);
          } else {
            delete x["OpenVPN"]["ServerCertRef"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["ServerCertRef"];
        }
        if (A.load.Bool(ptr + 1732 + 1152 + 33)) {
          x["OpenVPN"]["ServerPollTimeout"] = {};
          if (A.load.Bool(ptr + 1732 + 1152 + 26)) {
            x["OpenVPN"]["ServerPollTimeout"]["Active"] = A.load.Int32(ptr + 1732 + 1152 + 0);
          } else {
            delete x["OpenVPN"]["ServerPollTimeout"]["Active"];
          }
          x["OpenVPN"]["ServerPollTimeout"]["Effective"] = A.load.Ref(ptr + 1732 + 1152 + 4, undefined);
          if (A.load.Bool(ptr + 1732 + 1152 + 27)) {
            x["OpenVPN"]["ServerPollTimeout"]["UserPolicy"] = A.load.Int32(ptr + 1732 + 1152 + 8);
          } else {
            delete x["OpenVPN"]["ServerPollTimeout"]["UserPolicy"];
          }
          if (A.load.Bool(ptr + 1732 + 1152 + 28)) {
            x["OpenVPN"]["ServerPollTimeout"]["DevicePolicy"] = A.load.Int32(ptr + 1732 + 1152 + 12);
          } else {
            delete x["OpenVPN"]["ServerPollTimeout"]["DevicePolicy"];
          }
          if (A.load.Bool(ptr + 1732 + 1152 + 29)) {
            x["OpenVPN"]["ServerPollTimeout"]["UserSetting"] = A.load.Int32(ptr + 1732 + 1152 + 16);
          } else {
            delete x["OpenVPN"]["ServerPollTimeout"]["UserSetting"];
          }
          if (A.load.Bool(ptr + 1732 + 1152 + 30)) {
            x["OpenVPN"]["ServerPollTimeout"]["SharedSetting"] = A.load.Int32(ptr + 1732 + 1152 + 20);
          } else {
            delete x["OpenVPN"]["ServerPollTimeout"]["SharedSetting"];
          }
          if (A.load.Bool(ptr + 1732 + 1152 + 31)) {
            x["OpenVPN"]["ServerPollTimeout"]["UserEditable"] = A.load.Bool(ptr + 1732 + 1152 + 24);
          } else {
            delete x["OpenVPN"]["ServerPollTimeout"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 1152 + 32)) {
            x["OpenVPN"]["ServerPollTimeout"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 1152 + 25);
          } else {
            delete x["OpenVPN"]["ServerPollTimeout"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["ServerPollTimeout"];
        }
        if (A.load.Bool(ptr + 1732 + 1188 + 33)) {
          x["OpenVPN"]["Shaper"] = {};
          if (A.load.Bool(ptr + 1732 + 1188 + 26)) {
            x["OpenVPN"]["Shaper"]["Active"] = A.load.Int32(ptr + 1732 + 1188 + 0);
          } else {
            delete x["OpenVPN"]["Shaper"]["Active"];
          }
          x["OpenVPN"]["Shaper"]["Effective"] = A.load.Ref(ptr + 1732 + 1188 + 4, undefined);
          if (A.load.Bool(ptr + 1732 + 1188 + 27)) {
            x["OpenVPN"]["Shaper"]["UserPolicy"] = A.load.Int32(ptr + 1732 + 1188 + 8);
          } else {
            delete x["OpenVPN"]["Shaper"]["UserPolicy"];
          }
          if (A.load.Bool(ptr + 1732 + 1188 + 28)) {
            x["OpenVPN"]["Shaper"]["DevicePolicy"] = A.load.Int32(ptr + 1732 + 1188 + 12);
          } else {
            delete x["OpenVPN"]["Shaper"]["DevicePolicy"];
          }
          if (A.load.Bool(ptr + 1732 + 1188 + 29)) {
            x["OpenVPN"]["Shaper"]["UserSetting"] = A.load.Int32(ptr + 1732 + 1188 + 16);
          } else {
            delete x["OpenVPN"]["Shaper"]["UserSetting"];
          }
          if (A.load.Bool(ptr + 1732 + 1188 + 30)) {
            x["OpenVPN"]["Shaper"]["SharedSetting"] = A.load.Int32(ptr + 1732 + 1188 + 20);
          } else {
            delete x["OpenVPN"]["Shaper"]["SharedSetting"];
          }
          if (A.load.Bool(ptr + 1732 + 1188 + 31)) {
            x["OpenVPN"]["Shaper"]["UserEditable"] = A.load.Bool(ptr + 1732 + 1188 + 24);
          } else {
            delete x["OpenVPN"]["Shaper"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 1188 + 32)) {
            x["OpenVPN"]["Shaper"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 1188 + 25);
          } else {
            delete x["OpenVPN"]["Shaper"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["Shaper"];
        }
        if (A.load.Bool(ptr + 1732 + 1224 + 28)) {
          x["OpenVPN"]["StaticChallenge"] = {};
          x["OpenVPN"]["StaticChallenge"]["Active"] = A.load.Ref(ptr + 1732 + 1224 + 0, undefined);
          x["OpenVPN"]["StaticChallenge"]["Effective"] = A.load.Ref(ptr + 1732 + 1224 + 4, undefined);
          x["OpenVPN"]["StaticChallenge"]["UserPolicy"] = A.load.Ref(ptr + 1732 + 1224 + 8, undefined);
          x["OpenVPN"]["StaticChallenge"]["DevicePolicy"] = A.load.Ref(ptr + 1732 + 1224 + 12, undefined);
          x["OpenVPN"]["StaticChallenge"]["UserSetting"] = A.load.Ref(ptr + 1732 + 1224 + 16, undefined);
          x["OpenVPN"]["StaticChallenge"]["SharedSetting"] = A.load.Ref(ptr + 1732 + 1224 + 20, undefined);
          if (A.load.Bool(ptr + 1732 + 1224 + 26)) {
            x["OpenVPN"]["StaticChallenge"]["UserEditable"] = A.load.Bool(ptr + 1732 + 1224 + 24);
          } else {
            delete x["OpenVPN"]["StaticChallenge"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 1224 + 27)) {
            x["OpenVPN"]["StaticChallenge"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 1224 + 25);
          } else {
            delete x["OpenVPN"]["StaticChallenge"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["StaticChallenge"];
        }
        if (A.load.Bool(ptr + 1732 + 1256 + 28)) {
          x["OpenVPN"]["TLSAuthContents"] = {};
          x["OpenVPN"]["TLSAuthContents"]["Active"] = A.load.Ref(ptr + 1732 + 1256 + 0, undefined);
          x["OpenVPN"]["TLSAuthContents"]["Effective"] = A.load.Ref(ptr + 1732 + 1256 + 4, undefined);
          x["OpenVPN"]["TLSAuthContents"]["UserPolicy"] = A.load.Ref(ptr + 1732 + 1256 + 8, undefined);
          x["OpenVPN"]["TLSAuthContents"]["DevicePolicy"] = A.load.Ref(ptr + 1732 + 1256 + 12, undefined);
          x["OpenVPN"]["TLSAuthContents"]["UserSetting"] = A.load.Ref(ptr + 1732 + 1256 + 16, undefined);
          x["OpenVPN"]["TLSAuthContents"]["SharedSetting"] = A.load.Ref(ptr + 1732 + 1256 + 20, undefined);
          if (A.load.Bool(ptr + 1732 + 1256 + 26)) {
            x["OpenVPN"]["TLSAuthContents"]["UserEditable"] = A.load.Bool(ptr + 1732 + 1256 + 24);
          } else {
            delete x["OpenVPN"]["TLSAuthContents"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 1256 + 27)) {
            x["OpenVPN"]["TLSAuthContents"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 1256 + 25);
          } else {
            delete x["OpenVPN"]["TLSAuthContents"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["TLSAuthContents"];
        }
        if (A.load.Bool(ptr + 1732 + 1288 + 28)) {
          x["OpenVPN"]["TLSRemote"] = {};
          x["OpenVPN"]["TLSRemote"]["Active"] = A.load.Ref(ptr + 1732 + 1288 + 0, undefined);
          x["OpenVPN"]["TLSRemote"]["Effective"] = A.load.Ref(ptr + 1732 + 1288 + 4, undefined);
          x["OpenVPN"]["TLSRemote"]["UserPolicy"] = A.load.Ref(ptr + 1732 + 1288 + 8, undefined);
          x["OpenVPN"]["TLSRemote"]["DevicePolicy"] = A.load.Ref(ptr + 1732 + 1288 + 12, undefined);
          x["OpenVPN"]["TLSRemote"]["UserSetting"] = A.load.Ref(ptr + 1732 + 1288 + 16, undefined);
          x["OpenVPN"]["TLSRemote"]["SharedSetting"] = A.load.Ref(ptr + 1732 + 1288 + 20, undefined);
          if (A.load.Bool(ptr + 1732 + 1288 + 26)) {
            x["OpenVPN"]["TLSRemote"]["UserEditable"] = A.load.Bool(ptr + 1732 + 1288 + 24);
          } else {
            delete x["OpenVPN"]["TLSRemote"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 1288 + 27)) {
            x["OpenVPN"]["TLSRemote"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 1288 + 25);
          } else {
            delete x["OpenVPN"]["TLSRemote"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["TLSRemote"];
        }
        if (A.load.Bool(ptr + 1732 + 1320 + 28)) {
          x["OpenVPN"]["TLSVersionMin"] = {};
          x["OpenVPN"]["TLSVersionMin"]["Active"] = A.load.Ref(ptr + 1732 + 1320 + 0, undefined);
          x["OpenVPN"]["TLSVersionMin"]["Effective"] = A.load.Ref(ptr + 1732 + 1320 + 4, undefined);
          x["OpenVPN"]["TLSVersionMin"]["UserPolicy"] = A.load.Ref(ptr + 1732 + 1320 + 8, undefined);
          x["OpenVPN"]["TLSVersionMin"]["DevicePolicy"] = A.load.Ref(ptr + 1732 + 1320 + 12, undefined);
          x["OpenVPN"]["TLSVersionMin"]["UserSetting"] = A.load.Ref(ptr + 1732 + 1320 + 16, undefined);
          x["OpenVPN"]["TLSVersionMin"]["SharedSetting"] = A.load.Ref(ptr + 1732 + 1320 + 20, undefined);
          if (A.load.Bool(ptr + 1732 + 1320 + 26)) {
            x["OpenVPN"]["TLSVersionMin"]["UserEditable"] = A.load.Bool(ptr + 1732 + 1320 + 24);
          } else {
            delete x["OpenVPN"]["TLSVersionMin"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 1320 + 27)) {
            x["OpenVPN"]["TLSVersionMin"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 1320 + 25);
          } else {
            delete x["OpenVPN"]["TLSVersionMin"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["TLSVersionMin"];
        }
        if (A.load.Bool(ptr + 1732 + 1352 + 28)) {
          x["OpenVPN"]["UserAuthenticationType"] = {};
          x["OpenVPN"]["UserAuthenticationType"]["Active"] = A.load.Ref(ptr + 1732 + 1352 + 0, undefined);
          x["OpenVPN"]["UserAuthenticationType"]["Effective"] = A.load.Ref(ptr + 1732 + 1352 + 4, undefined);
          x["OpenVPN"]["UserAuthenticationType"]["UserPolicy"] = A.load.Ref(ptr + 1732 + 1352 + 8, undefined);
          x["OpenVPN"]["UserAuthenticationType"]["DevicePolicy"] = A.load.Ref(ptr + 1732 + 1352 + 12, undefined);
          x["OpenVPN"]["UserAuthenticationType"]["UserSetting"] = A.load.Ref(ptr + 1732 + 1352 + 16, undefined);
          x["OpenVPN"]["UserAuthenticationType"]["SharedSetting"] = A.load.Ref(ptr + 1732 + 1352 + 20, undefined);
          if (A.load.Bool(ptr + 1732 + 1352 + 26)) {
            x["OpenVPN"]["UserAuthenticationType"]["UserEditable"] = A.load.Bool(ptr + 1732 + 1352 + 24);
          } else {
            delete x["OpenVPN"]["UserAuthenticationType"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 1352 + 27)) {
            x["OpenVPN"]["UserAuthenticationType"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 1352 + 25);
          } else {
            delete x["OpenVPN"]["UserAuthenticationType"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["UserAuthenticationType"];
        }
        if (A.load.Bool(ptr + 1732 + 1384 + 28)) {
          x["OpenVPN"]["Username"] = {};
          x["OpenVPN"]["Username"]["Active"] = A.load.Ref(ptr + 1732 + 1384 + 0, undefined);
          x["OpenVPN"]["Username"]["Effective"] = A.load.Ref(ptr + 1732 + 1384 + 4, undefined);
          x["OpenVPN"]["Username"]["UserPolicy"] = A.load.Ref(ptr + 1732 + 1384 + 8, undefined);
          x["OpenVPN"]["Username"]["DevicePolicy"] = A.load.Ref(ptr + 1732 + 1384 + 12, undefined);
          x["OpenVPN"]["Username"]["UserSetting"] = A.load.Ref(ptr + 1732 + 1384 + 16, undefined);
          x["OpenVPN"]["Username"]["SharedSetting"] = A.load.Ref(ptr + 1732 + 1384 + 20, undefined);
          if (A.load.Bool(ptr + 1732 + 1384 + 26)) {
            x["OpenVPN"]["Username"]["UserEditable"] = A.load.Bool(ptr + 1732 + 1384 + 24);
          } else {
            delete x["OpenVPN"]["Username"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 1384 + 27)) {
            x["OpenVPN"]["Username"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 1384 + 25);
          } else {
            delete x["OpenVPN"]["Username"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["Username"];
        }
        if (A.load.Bool(ptr + 1732 + 1416 + 28)) {
          x["OpenVPN"]["Verb"] = {};
          x["OpenVPN"]["Verb"]["Active"] = A.load.Ref(ptr + 1732 + 1416 + 0, undefined);
          x["OpenVPN"]["Verb"]["Effective"] = A.load.Ref(ptr + 1732 + 1416 + 4, undefined);
          x["OpenVPN"]["Verb"]["UserPolicy"] = A.load.Ref(ptr + 1732 + 1416 + 8, undefined);
          x["OpenVPN"]["Verb"]["DevicePolicy"] = A.load.Ref(ptr + 1732 + 1416 + 12, undefined);
          x["OpenVPN"]["Verb"]["UserSetting"] = A.load.Ref(ptr + 1732 + 1416 + 16, undefined);
          x["OpenVPN"]["Verb"]["SharedSetting"] = A.load.Ref(ptr + 1732 + 1416 + 20, undefined);
          if (A.load.Bool(ptr + 1732 + 1416 + 26)) {
            x["OpenVPN"]["Verb"]["UserEditable"] = A.load.Bool(ptr + 1732 + 1416 + 24);
          } else {
            delete x["OpenVPN"]["Verb"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 1416 + 27)) {
            x["OpenVPN"]["Verb"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 1416 + 25);
          } else {
            delete x["OpenVPN"]["Verb"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["Verb"];
        }
        if (A.load.Bool(ptr + 1732 + 1448 + 28)) {
          x["OpenVPN"]["VerifyHash"] = {};
          x["OpenVPN"]["VerifyHash"]["Active"] = A.load.Ref(ptr + 1732 + 1448 + 0, undefined);
          x["OpenVPN"]["VerifyHash"]["Effective"] = A.load.Ref(ptr + 1732 + 1448 + 4, undefined);
          x["OpenVPN"]["VerifyHash"]["UserPolicy"] = A.load.Ref(ptr + 1732 + 1448 + 8, undefined);
          x["OpenVPN"]["VerifyHash"]["DevicePolicy"] = A.load.Ref(ptr + 1732 + 1448 + 12, undefined);
          x["OpenVPN"]["VerifyHash"]["UserSetting"] = A.load.Ref(ptr + 1732 + 1448 + 16, undefined);
          x["OpenVPN"]["VerifyHash"]["SharedSetting"] = A.load.Ref(ptr + 1732 + 1448 + 20, undefined);
          if (A.load.Bool(ptr + 1732 + 1448 + 26)) {
            x["OpenVPN"]["VerifyHash"]["UserEditable"] = A.load.Bool(ptr + 1732 + 1448 + 24);
          } else {
            delete x["OpenVPN"]["VerifyHash"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1732 + 1448 + 27)) {
            x["OpenVPN"]["VerifyHash"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 1448 + 25);
          } else {
            delete x["OpenVPN"]["VerifyHash"]["DeviceEditable"];
          }
        } else {
          delete x["OpenVPN"]["VerifyHash"];
        }
        if (A.load.Bool(ptr + 1732 + 1480 + 61)) {
          x["OpenVPN"]["VerifyX509"] = {};
          if (A.load.Bool(ptr + 1732 + 1480 + 0 + 28)) {
            x["OpenVPN"]["VerifyX509"]["Name"] = {};
            x["OpenVPN"]["VerifyX509"]["Name"]["Active"] = A.load.Ref(ptr + 1732 + 1480 + 0 + 0, undefined);
            x["OpenVPN"]["VerifyX509"]["Name"]["Effective"] = A.load.Ref(ptr + 1732 + 1480 + 0 + 4, undefined);
            x["OpenVPN"]["VerifyX509"]["Name"]["UserPolicy"] = A.load.Ref(ptr + 1732 + 1480 + 0 + 8, undefined);
            x["OpenVPN"]["VerifyX509"]["Name"]["DevicePolicy"] = A.load.Ref(ptr + 1732 + 1480 + 0 + 12, undefined);
            x["OpenVPN"]["VerifyX509"]["Name"]["UserSetting"] = A.load.Ref(ptr + 1732 + 1480 + 0 + 16, undefined);
            x["OpenVPN"]["VerifyX509"]["Name"]["SharedSetting"] = A.load.Ref(ptr + 1732 + 1480 + 0 + 20, undefined);
            if (A.load.Bool(ptr + 1732 + 1480 + 0 + 26)) {
              x["OpenVPN"]["VerifyX509"]["Name"]["UserEditable"] = A.load.Bool(ptr + 1732 + 1480 + 0 + 24);
            } else {
              delete x["OpenVPN"]["VerifyX509"]["Name"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 1732 + 1480 + 0 + 27)) {
              x["OpenVPN"]["VerifyX509"]["Name"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 1480 + 0 + 25);
            } else {
              delete x["OpenVPN"]["VerifyX509"]["Name"]["DeviceEditable"];
            }
          } else {
            delete x["OpenVPN"]["VerifyX509"]["Name"];
          }
          if (A.load.Bool(ptr + 1732 + 1480 + 32 + 28)) {
            x["OpenVPN"]["VerifyX509"]["Type"] = {};
            x["OpenVPN"]["VerifyX509"]["Type"]["Active"] = A.load.Ref(ptr + 1732 + 1480 + 32 + 0, undefined);
            x["OpenVPN"]["VerifyX509"]["Type"]["Effective"] = A.load.Ref(ptr + 1732 + 1480 + 32 + 4, undefined);
            x["OpenVPN"]["VerifyX509"]["Type"]["UserPolicy"] = A.load.Ref(ptr + 1732 + 1480 + 32 + 8, undefined);
            x["OpenVPN"]["VerifyX509"]["Type"]["DevicePolicy"] = A.load.Ref(ptr + 1732 + 1480 + 32 + 12, undefined);
            x["OpenVPN"]["VerifyX509"]["Type"]["UserSetting"] = A.load.Ref(ptr + 1732 + 1480 + 32 + 16, undefined);
            x["OpenVPN"]["VerifyX509"]["Type"]["SharedSetting"] = A.load.Ref(ptr + 1732 + 1480 + 32 + 20, undefined);
            if (A.load.Bool(ptr + 1732 + 1480 + 32 + 26)) {
              x["OpenVPN"]["VerifyX509"]["Type"]["UserEditable"] = A.load.Bool(ptr + 1732 + 1480 + 32 + 24);
            } else {
              delete x["OpenVPN"]["VerifyX509"]["Type"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 1732 + 1480 + 32 + 27)) {
              x["OpenVPN"]["VerifyX509"]["Type"]["DeviceEditable"] = A.load.Bool(ptr + 1732 + 1480 + 32 + 25);
            } else {
              delete x["OpenVPN"]["VerifyX509"]["Type"]["DeviceEditable"];
            }
          } else {
            delete x["OpenVPN"]["VerifyX509"]["Type"];
          }
        } else {
          delete x["OpenVPN"]["VerifyX509"];
        }
      } else {
        delete x["OpenVPN"];
      }
      if (A.load.Bool(ptr + 3276 + 36)) {
        x["ThirdPartyVPN"] = {};
        if (A.load.Bool(ptr + 3276 + 0 + 28)) {
          x["ThirdPartyVPN"]["ExtensionID"] = {};
          x["ThirdPartyVPN"]["ExtensionID"]["Active"] = A.load.Ref(ptr + 3276 + 0 + 0, undefined);
          x["ThirdPartyVPN"]["ExtensionID"]["Effective"] = A.load.Ref(ptr + 3276 + 0 + 4, undefined);
          x["ThirdPartyVPN"]["ExtensionID"]["UserPolicy"] = A.load.Ref(ptr + 3276 + 0 + 8, undefined);
          x["ThirdPartyVPN"]["ExtensionID"]["DevicePolicy"] = A.load.Ref(ptr + 3276 + 0 + 12, undefined);
          x["ThirdPartyVPN"]["ExtensionID"]["UserSetting"] = A.load.Ref(ptr + 3276 + 0 + 16, undefined);
          x["ThirdPartyVPN"]["ExtensionID"]["SharedSetting"] = A.load.Ref(ptr + 3276 + 0 + 20, undefined);
          if (A.load.Bool(ptr + 3276 + 0 + 26)) {
            x["ThirdPartyVPN"]["ExtensionID"]["UserEditable"] = A.load.Bool(ptr + 3276 + 0 + 24);
          } else {
            delete x["ThirdPartyVPN"]["ExtensionID"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 3276 + 0 + 27)) {
            x["ThirdPartyVPN"]["ExtensionID"]["DeviceEditable"] = A.load.Bool(ptr + 3276 + 0 + 25);
          } else {
            delete x["ThirdPartyVPN"]["ExtensionID"]["DeviceEditable"];
          }
        } else {
          delete x["ThirdPartyVPN"]["ExtensionID"];
        }
        x["ThirdPartyVPN"]["ProviderName"] = A.load.Ref(ptr + 3276 + 32, undefined);
      } else {
        delete x["ThirdPartyVPN"];
      }
      if (A.load.Bool(ptr + 3316 + 28)) {
        x["Type"] = {};
        x["Type"]["Active"] = A.load.Ref(ptr + 3316 + 0, undefined);
        x["Type"]["Effective"] = A.load.Ref(ptr + 3316 + 4, undefined);
        x["Type"]["UserPolicy"] = A.load.Ref(ptr + 3316 + 8, undefined);
        x["Type"]["DevicePolicy"] = A.load.Ref(ptr + 3316 + 12, undefined);
        x["Type"]["UserSetting"] = A.load.Ref(ptr + 3316 + 16, undefined);
        x["Type"]["SharedSetting"] = A.load.Ref(ptr + 3316 + 20, undefined);
        if (A.load.Bool(ptr + 3316 + 26)) {
          x["Type"]["UserEditable"] = A.load.Bool(ptr + 3316 + 24);
        } else {
          delete x["Type"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 3316 + 27)) {
          x["Type"]["DeviceEditable"] = A.load.Bool(ptr + 3316 + 25);
        } else {
          delete x["Type"]["DeviceEditable"];
        }
      } else {
        delete x["Type"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_ManagedWiFiProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 1026, false);

        A.store.Bool(ptr + 0 + 21, false);
        A.store.Bool(ptr + 0 + 14, false);
        A.store.Bool(ptr + 0 + 0, false);
        A.store.Ref(ptr + 0 + 4, undefined);
        A.store.Bool(ptr + 0 + 15, false);
        A.store.Bool(ptr + 0 + 8, false);
        A.store.Bool(ptr + 0 + 16, false);
        A.store.Bool(ptr + 0 + 9, false);
        A.store.Bool(ptr + 0 + 17, false);
        A.store.Bool(ptr + 0 + 10, false);
        A.store.Bool(ptr + 0 + 18, false);
        A.store.Bool(ptr + 0 + 11, false);
        A.store.Bool(ptr + 0 + 19, false);
        A.store.Bool(ptr + 0 + 12, false);
        A.store.Bool(ptr + 0 + 20, false);
        A.store.Bool(ptr + 0 + 13, false);

        A.store.Bool(ptr + 24 + 21, false);
        A.store.Bool(ptr + 24 + 14, false);
        A.store.Bool(ptr + 24 + 0, false);
        A.store.Ref(ptr + 24 + 4, undefined);
        A.store.Bool(ptr + 24 + 15, false);
        A.store.Bool(ptr + 24 + 8, false);
        A.store.Bool(ptr + 24 + 16, false);
        A.store.Bool(ptr + 24 + 9, false);
        A.store.Bool(ptr + 24 + 17, false);
        A.store.Bool(ptr + 24 + 10, false);
        A.store.Bool(ptr + 24 + 18, false);
        A.store.Bool(ptr + 24 + 11, false);
        A.store.Bool(ptr + 24 + 19, false);
        A.store.Bool(ptr + 24 + 12, false);
        A.store.Bool(ptr + 24 + 20, false);
        A.store.Bool(ptr + 24 + 13, false);
        A.store.Ref(ptr + 48, undefined);

        A.store.Bool(ptr + 52 + 806, false);

        A.store.Bool(ptr + 52 + 0 + 28, false);
        A.store.Ref(ptr + 52 + 0 + 0, undefined);
        A.store.Ref(ptr + 52 + 0 + 4, undefined);
        A.store.Ref(ptr + 52 + 0 + 8, undefined);
        A.store.Ref(ptr + 52 + 0 + 12, undefined);
        A.store.Ref(ptr + 52 + 0 + 16, undefined);
        A.store.Ref(ptr + 52 + 0 + 20, undefined);
        A.store.Bool(ptr + 52 + 0 + 26, false);
        A.store.Bool(ptr + 52 + 0 + 24, false);
        A.store.Bool(ptr + 52 + 0 + 27, false);
        A.store.Bool(ptr + 52 + 0 + 25, false);

        A.store.Bool(ptr + 52 + 32 + 318, false);

        A.store.Bool(ptr + 52 + 32 + 0 + 28, false);
        A.store.Ref(ptr + 52 + 32 + 0 + 0, undefined);
        A.store.Ref(ptr + 52 + 32 + 0 + 4, undefined);
        A.store.Ref(ptr + 52 + 32 + 0 + 8, undefined);
        A.store.Ref(ptr + 52 + 32 + 0 + 12, undefined);
        A.store.Ref(ptr + 52 + 32 + 0 + 16, undefined);
        A.store.Ref(ptr + 52 + 32 + 0 + 20, undefined);
        A.store.Bool(ptr + 52 + 32 + 0 + 26, false);
        A.store.Bool(ptr + 52 + 32 + 0 + 24, false);
        A.store.Bool(ptr + 52 + 32 + 0 + 27, false);
        A.store.Bool(ptr + 52 + 32 + 0 + 25, false);

        A.store.Bool(ptr + 52 + 32 + 32 + 125, false);

        A.store.Bool(ptr + 52 + 32 + 32 + 0 + 28, false);
        A.store.Ref(ptr + 52 + 32 + 32 + 0 + 0, undefined);
        A.store.Ref(ptr + 52 + 32 + 32 + 0 + 4, undefined);
        A.store.Ref(ptr + 52 + 32 + 32 + 0 + 8, undefined);
        A.store.Ref(ptr + 52 + 32 + 32 + 0 + 12, undefined);
        A.store.Ref(ptr + 52 + 32 + 32 + 0 + 16, undefined);
        A.store.Ref(ptr + 52 + 32 + 32 + 0 + 20, undefined);
        A.store.Bool(ptr + 52 + 32 + 32 + 0 + 26, false);
        A.store.Bool(ptr + 52 + 32 + 32 + 0 + 24, false);
        A.store.Bool(ptr + 52 + 32 + 32 + 0 + 27, false);
        A.store.Bool(ptr + 52 + 32 + 32 + 0 + 25, false);

        A.store.Bool(ptr + 52 + 32 + 32 + 32 + 28, false);
        A.store.Ref(ptr + 52 + 32 + 32 + 32 + 0, undefined);
        A.store.Ref(ptr + 52 + 32 + 32 + 32 + 4, undefined);
        A.store.Ref(ptr + 52 + 32 + 32 + 32 + 8, undefined);
        A.store.Ref(ptr + 52 + 32 + 32 + 32 + 12, undefined);
        A.store.Ref(ptr + 52 + 32 + 32 + 32 + 16, undefined);
        A.store.Ref(ptr + 52 + 32 + 32 + 32 + 20, undefined);
        A.store.Bool(ptr + 52 + 32 + 32 + 32 + 26, false);
        A.store.Bool(ptr + 52 + 32 + 32 + 32 + 24, false);
        A.store.Bool(ptr + 52 + 32 + 32 + 32 + 27, false);
        A.store.Bool(ptr + 52 + 32 + 32 + 32 + 25, false);

        A.store.Bool(ptr + 52 + 32 + 32 + 64 + 28, false);
        A.store.Ref(ptr + 52 + 32 + 32 + 64 + 0, undefined);
        A.store.Ref(ptr + 52 + 32 + 32 + 64 + 4, undefined);
        A.store.Ref(ptr + 52 + 32 + 32 + 64 + 8, undefined);
        A.store.Ref(ptr + 52 + 32 + 32 + 64 + 12, undefined);
        A.store.Ref(ptr + 52 + 32 + 32 + 64 + 16, undefined);
        A.store.Ref(ptr + 52 + 32 + 32 + 64 + 20, undefined);
        A.store.Bool(ptr + 52 + 32 + 32 + 64 + 26, false);
        A.store.Bool(ptr + 52 + 32 + 32 + 64 + 24, false);
        A.store.Bool(ptr + 52 + 32 + 32 + 64 + 27, false);
        A.store.Bool(ptr + 52 + 32 + 32 + 64 + 25, false);

        A.store.Bool(ptr + 52 + 32 + 32 + 96 + 28, false);
        A.store.Ref(ptr + 52 + 32 + 32 + 96 + 0, undefined);
        A.store.Ref(ptr + 52 + 32 + 32 + 96 + 4, undefined);
        A.store.Ref(ptr + 52 + 32 + 32 + 96 + 8, undefined);
        A.store.Ref(ptr + 52 + 32 + 32 + 96 + 12, undefined);
        A.store.Ref(ptr + 52 + 32 + 32 + 96 + 16, undefined);
        A.store.Ref(ptr + 52 + 32 + 32 + 96 + 20, undefined);
        A.store.Bool(ptr + 52 + 32 + 32 + 96 + 26, false);
        A.store.Bool(ptr + 52 + 32 + 32 + 96 + 24, false);
        A.store.Bool(ptr + 52 + 32 + 32 + 96 + 27, false);
        A.store.Bool(ptr + 52 + 32 + 32 + 96 + 25, false);

        A.store.Bool(ptr + 52 + 32 + 160 + 28, false);
        A.store.Ref(ptr + 52 + 32 + 160 + 0, undefined);
        A.store.Ref(ptr + 52 + 32 + 160 + 4, undefined);
        A.store.Ref(ptr + 52 + 32 + 160 + 8, undefined);
        A.store.Ref(ptr + 52 + 32 + 160 + 12, undefined);
        A.store.Ref(ptr + 52 + 32 + 160 + 16, undefined);
        A.store.Ref(ptr + 52 + 32 + 160 + 20, undefined);
        A.store.Bool(ptr + 52 + 32 + 160 + 26, false);
        A.store.Bool(ptr + 52 + 32 + 160 + 24, false);
        A.store.Bool(ptr + 52 + 32 + 160 + 27, false);
        A.store.Bool(ptr + 52 + 32 + 160 + 25, false);

        A.store.Bool(ptr + 52 + 32 + 192 + 125, false);

        A.store.Bool(ptr + 52 + 32 + 192 + 0 + 28, false);
        A.store.Ref(ptr + 52 + 32 + 192 + 0 + 0, undefined);
        A.store.Ref(ptr + 52 + 32 + 192 + 0 + 4, undefined);
        A.store.Ref(ptr + 52 + 32 + 192 + 0 + 8, undefined);
        A.store.Ref(ptr + 52 + 32 + 192 + 0 + 12, undefined);
        A.store.Ref(ptr + 52 + 32 + 192 + 0 + 16, undefined);
        A.store.Ref(ptr + 52 + 32 + 192 + 0 + 20, undefined);
        A.store.Bool(ptr + 52 + 32 + 192 + 0 + 26, false);
        A.store.Bool(ptr + 52 + 32 + 192 + 0 + 24, false);
        A.store.Bool(ptr + 52 + 32 + 192 + 0 + 27, false);
        A.store.Bool(ptr + 52 + 32 + 192 + 0 + 25, false);

        A.store.Bool(ptr + 52 + 32 + 192 + 32 + 28, false);
        A.store.Ref(ptr + 52 + 32 + 192 + 32 + 0, undefined);
        A.store.Ref(ptr + 52 + 32 + 192 + 32 + 4, undefined);
        A.store.Ref(ptr + 52 + 32 + 192 + 32 + 8, undefined);
        A.store.Ref(ptr + 52 + 32 + 192 + 32 + 12, undefined);
        A.store.Ref(ptr + 52 + 32 + 192 + 32 + 16, undefined);
        A.store.Ref(ptr + 52 + 32 + 192 + 32 + 20, undefined);
        A.store.Bool(ptr + 52 + 32 + 192 + 32 + 26, false);
        A.store.Bool(ptr + 52 + 32 + 192 + 32 + 24, false);
        A.store.Bool(ptr + 52 + 32 + 192 + 32 + 27, false);
        A.store.Bool(ptr + 52 + 32 + 192 + 32 + 25, false);

        A.store.Bool(ptr + 52 + 32 + 192 + 64 + 28, false);
        A.store.Ref(ptr + 52 + 32 + 192 + 64 + 0, undefined);
        A.store.Ref(ptr + 52 + 32 + 192 + 64 + 4, undefined);
        A.store.Ref(ptr + 52 + 32 + 192 + 64 + 8, undefined);
        A.store.Ref(ptr + 52 + 32 + 192 + 64 + 12, undefined);
        A.store.Ref(ptr + 52 + 32 + 192 + 64 + 16, undefined);
        A.store.Ref(ptr + 52 + 32 + 192 + 64 + 20, undefined);
        A.store.Bool(ptr + 52 + 32 + 192 + 64 + 26, false);
        A.store.Bool(ptr + 52 + 32 + 192 + 64 + 24, false);
        A.store.Bool(ptr + 52 + 32 + 192 + 64 + 27, false);
        A.store.Bool(ptr + 52 + 32 + 192 + 64 + 25, false);

        A.store.Bool(ptr + 52 + 32 + 192 + 96 + 28, false);
        A.store.Ref(ptr + 52 + 32 + 192 + 96 + 0, undefined);
        A.store.Ref(ptr + 52 + 32 + 192 + 96 + 4, undefined);
        A.store.Ref(ptr + 52 + 32 + 192 + 96 + 8, undefined);
        A.store.Ref(ptr + 52 + 32 + 192 + 96 + 12, undefined);
        A.store.Ref(ptr + 52 + 32 + 192 + 96 + 16, undefined);
        A.store.Ref(ptr + 52 + 32 + 192 + 96 + 20, undefined);
        A.store.Bool(ptr + 52 + 32 + 192 + 96 + 26, false);
        A.store.Bool(ptr + 52 + 32 + 192 + 96 + 24, false);
        A.store.Bool(ptr + 52 + 32 + 192 + 96 + 27, false);
        A.store.Bool(ptr + 52 + 32 + 192 + 96 + 25, false);

        A.store.Bool(ptr + 52 + 352 + 28, false);
        A.store.Ref(ptr + 52 + 352 + 0, undefined);
        A.store.Ref(ptr + 52 + 352 + 4, undefined);
        A.store.Ref(ptr + 52 + 352 + 8, undefined);
        A.store.Ref(ptr + 52 + 352 + 12, undefined);
        A.store.Ref(ptr + 52 + 352 + 16, undefined);
        A.store.Ref(ptr + 52 + 352 + 20, undefined);
        A.store.Bool(ptr + 52 + 352 + 26, false);
        A.store.Bool(ptr + 52 + 352 + 24, false);
        A.store.Bool(ptr + 52 + 352 + 27, false);
        A.store.Bool(ptr + 52 + 352 + 25, false);

        A.store.Bool(ptr + 52 + 384 + 28, false);
        A.store.Ref(ptr + 52 + 384 + 0, undefined);
        A.store.Ref(ptr + 52 + 384 + 4, undefined);
        A.store.Ref(ptr + 52 + 384 + 8, undefined);
        A.store.Ref(ptr + 52 + 384 + 12, undefined);
        A.store.Ref(ptr + 52 + 384 + 16, undefined);
        A.store.Ref(ptr + 52 + 384 + 20, undefined);
        A.store.Bool(ptr + 52 + 384 + 26, false);
        A.store.Bool(ptr + 52 + 384 + 24, false);
        A.store.Bool(ptr + 52 + 384 + 27, false);
        A.store.Bool(ptr + 52 + 384 + 25, false);

        A.store.Bool(ptr + 52 + 416 + 28, false);
        A.store.Ref(ptr + 52 + 416 + 0, undefined);
        A.store.Ref(ptr + 52 + 416 + 4, undefined);
        A.store.Ref(ptr + 52 + 416 + 8, undefined);
        A.store.Ref(ptr + 52 + 416 + 12, undefined);
        A.store.Ref(ptr + 52 + 416 + 16, undefined);
        A.store.Ref(ptr + 52 + 416 + 20, undefined);
        A.store.Bool(ptr + 52 + 416 + 26, false);
        A.store.Bool(ptr + 52 + 416 + 24, false);
        A.store.Bool(ptr + 52 + 416 + 27, false);
        A.store.Bool(ptr + 52 + 416 + 25, false);

        A.store.Bool(ptr + 52 + 448 + 28, false);
        A.store.Ref(ptr + 52 + 448 + 0, undefined);
        A.store.Ref(ptr + 52 + 448 + 4, undefined);
        A.store.Ref(ptr + 52 + 448 + 8, undefined);
        A.store.Ref(ptr + 52 + 448 + 12, undefined);
        A.store.Ref(ptr + 52 + 448 + 16, undefined);
        A.store.Ref(ptr + 52 + 448 + 20, undefined);
        A.store.Bool(ptr + 52 + 448 + 26, false);
        A.store.Bool(ptr + 52 + 448 + 24, false);
        A.store.Bool(ptr + 52 + 448 + 27, false);
        A.store.Bool(ptr + 52 + 448 + 25, false);

        A.store.Bool(ptr + 52 + 480 + 28, false);
        A.store.Ref(ptr + 52 + 480 + 0, undefined);
        A.store.Ref(ptr + 52 + 480 + 4, undefined);
        A.store.Ref(ptr + 52 + 480 + 8, undefined);
        A.store.Ref(ptr + 52 + 480 + 12, undefined);
        A.store.Ref(ptr + 52 + 480 + 16, undefined);
        A.store.Ref(ptr + 52 + 480 + 20, undefined);
        A.store.Bool(ptr + 52 + 480 + 26, false);
        A.store.Bool(ptr + 52 + 480 + 24, false);
        A.store.Bool(ptr + 52 + 480 + 27, false);
        A.store.Bool(ptr + 52 + 480 + 25, false);

        A.store.Bool(ptr + 52 + 512 + 28, false);
        A.store.Ref(ptr + 52 + 512 + 0, undefined);
        A.store.Ref(ptr + 52 + 512 + 4, undefined);
        A.store.Ref(ptr + 52 + 512 + 8, undefined);
        A.store.Ref(ptr + 52 + 512 + 12, undefined);
        A.store.Ref(ptr + 52 + 512 + 16, undefined);
        A.store.Ref(ptr + 52 + 512 + 20, undefined);
        A.store.Bool(ptr + 52 + 512 + 26, false);
        A.store.Bool(ptr + 52 + 512 + 24, false);
        A.store.Bool(ptr + 52 + 512 + 27, false);
        A.store.Bool(ptr + 52 + 512 + 25, false);

        A.store.Bool(ptr + 52 + 544 + 28, false);
        A.store.Ref(ptr + 52 + 544 + 0, undefined);
        A.store.Ref(ptr + 52 + 544 + 4, undefined);
        A.store.Ref(ptr + 52 + 544 + 8, undefined);
        A.store.Ref(ptr + 52 + 544 + 12, undefined);
        A.store.Ref(ptr + 52 + 544 + 16, undefined);
        A.store.Ref(ptr + 52 + 544 + 20, undefined);
        A.store.Bool(ptr + 52 + 544 + 26, false);
        A.store.Bool(ptr + 52 + 544 + 24, false);
        A.store.Bool(ptr + 52 + 544 + 27, false);
        A.store.Bool(ptr + 52 + 544 + 25, false);

        A.store.Bool(ptr + 52 + 576 + 28, false);
        A.store.Ref(ptr + 52 + 576 + 0, undefined);
        A.store.Ref(ptr + 52 + 576 + 4, undefined);
        A.store.Ref(ptr + 52 + 576 + 8, undefined);
        A.store.Ref(ptr + 52 + 576 + 12, undefined);
        A.store.Ref(ptr + 52 + 576 + 16, undefined);
        A.store.Ref(ptr + 52 + 576 + 20, undefined);
        A.store.Bool(ptr + 52 + 576 + 26, false);
        A.store.Bool(ptr + 52 + 576 + 24, false);
        A.store.Bool(ptr + 52 + 576 + 27, false);
        A.store.Bool(ptr + 52 + 576 + 25, false);

        A.store.Bool(ptr + 52 + 608 + 21, false);
        A.store.Bool(ptr + 52 + 608 + 14, false);
        A.store.Bool(ptr + 52 + 608 + 0, false);
        A.store.Ref(ptr + 52 + 608 + 4, undefined);
        A.store.Bool(ptr + 52 + 608 + 15, false);
        A.store.Bool(ptr + 52 + 608 + 8, false);
        A.store.Bool(ptr + 52 + 608 + 16, false);
        A.store.Bool(ptr + 52 + 608 + 9, false);
        A.store.Bool(ptr + 52 + 608 + 17, false);
        A.store.Bool(ptr + 52 + 608 + 10, false);
        A.store.Bool(ptr + 52 + 608 + 18, false);
        A.store.Bool(ptr + 52 + 608 + 11, false);
        A.store.Bool(ptr + 52 + 608 + 19, false);
        A.store.Bool(ptr + 52 + 608 + 12, false);
        A.store.Bool(ptr + 52 + 608 + 20, false);
        A.store.Bool(ptr + 52 + 608 + 13, false);

        A.store.Bool(ptr + 52 + 632 + 28, false);
        A.store.Ref(ptr + 52 + 632 + 0, undefined);
        A.store.Ref(ptr + 52 + 632 + 4, undefined);
        A.store.Ref(ptr + 52 + 632 + 8, undefined);
        A.store.Ref(ptr + 52 + 632 + 12, undefined);
        A.store.Ref(ptr + 52 + 632 + 16, undefined);
        A.store.Ref(ptr + 52 + 632 + 20, undefined);
        A.store.Bool(ptr + 52 + 632 + 26, false);
        A.store.Bool(ptr + 52 + 632 + 24, false);
        A.store.Bool(ptr + 52 + 632 + 27, false);
        A.store.Bool(ptr + 52 + 632 + 25, false);

        A.store.Bool(ptr + 52 + 664 + 28, false);
        A.store.Ref(ptr + 52 + 664 + 0, undefined);
        A.store.Ref(ptr + 52 + 664 + 4, undefined);
        A.store.Ref(ptr + 52 + 664 + 8, undefined);
        A.store.Ref(ptr + 52 + 664 + 12, undefined);
        A.store.Ref(ptr + 52 + 664 + 16, undefined);
        A.store.Ref(ptr + 52 + 664 + 20, undefined);
        A.store.Bool(ptr + 52 + 664 + 26, false);
        A.store.Bool(ptr + 52 + 664 + 24, false);
        A.store.Bool(ptr + 52 + 664 + 27, false);
        A.store.Bool(ptr + 52 + 664 + 25, false);

        A.store.Bool(ptr + 52 + 696 + 28, false);
        A.store.Ref(ptr + 52 + 696 + 0, undefined);
        A.store.Ref(ptr + 52 + 696 + 4, undefined);
        A.store.Ref(ptr + 52 + 696 + 8, undefined);
        A.store.Ref(ptr + 52 + 696 + 12, undefined);
        A.store.Ref(ptr + 52 + 696 + 16, undefined);
        A.store.Ref(ptr + 52 + 696 + 20, undefined);
        A.store.Bool(ptr + 52 + 696 + 26, false);
        A.store.Bool(ptr + 52 + 696 + 24, false);
        A.store.Bool(ptr + 52 + 696 + 27, false);
        A.store.Bool(ptr + 52 + 696 + 25, false);

        A.store.Bool(ptr + 52 + 728 + 28, false);
        A.store.Ref(ptr + 52 + 728 + 0, undefined);
        A.store.Ref(ptr + 52 + 728 + 4, undefined);
        A.store.Ref(ptr + 52 + 728 + 8, undefined);
        A.store.Ref(ptr + 52 + 728 + 12, undefined);
        A.store.Ref(ptr + 52 + 728 + 16, undefined);
        A.store.Ref(ptr + 52 + 728 + 20, undefined);
        A.store.Bool(ptr + 52 + 728 + 26, false);
        A.store.Bool(ptr + 52 + 728 + 24, false);
        A.store.Bool(ptr + 52 + 728 + 27, false);
        A.store.Bool(ptr + 52 + 728 + 25, false);

        A.store.Bool(ptr + 52 + 760 + 21, false);
        A.store.Bool(ptr + 52 + 760 + 14, false);
        A.store.Bool(ptr + 52 + 760 + 0, false);
        A.store.Ref(ptr + 52 + 760 + 4, undefined);
        A.store.Bool(ptr + 52 + 760 + 15, false);
        A.store.Bool(ptr + 52 + 760 + 8, false);
        A.store.Bool(ptr + 52 + 760 + 16, false);
        A.store.Bool(ptr + 52 + 760 + 9, false);
        A.store.Bool(ptr + 52 + 760 + 17, false);
        A.store.Bool(ptr + 52 + 760 + 10, false);
        A.store.Bool(ptr + 52 + 760 + 18, false);
        A.store.Bool(ptr + 52 + 760 + 11, false);
        A.store.Bool(ptr + 52 + 760 + 19, false);
        A.store.Bool(ptr + 52 + 760 + 12, false);
        A.store.Bool(ptr + 52 + 760 + 20, false);
        A.store.Bool(ptr + 52 + 760 + 13, false);

        A.store.Bool(ptr + 52 + 784 + 21, false);
        A.store.Bool(ptr + 52 + 784 + 14, false);
        A.store.Bool(ptr + 52 + 784 + 0, false);
        A.store.Ref(ptr + 52 + 784 + 4, undefined);
        A.store.Bool(ptr + 52 + 784 + 15, false);
        A.store.Bool(ptr + 52 + 784 + 8, false);
        A.store.Bool(ptr + 52 + 784 + 16, false);
        A.store.Bool(ptr + 52 + 784 + 9, false);
        A.store.Bool(ptr + 52 + 784 + 17, false);
        A.store.Bool(ptr + 52 + 784 + 10, false);
        A.store.Bool(ptr + 52 + 784 + 18, false);
        A.store.Bool(ptr + 52 + 784 + 11, false);
        A.store.Bool(ptr + 52 + 784 + 19, false);
        A.store.Bool(ptr + 52 + 784 + 12, false);
        A.store.Bool(ptr + 52 + 784 + 20, false);
        A.store.Bool(ptr + 52 + 784 + 13, false);
        A.store.Bool(ptr + 1024, false);
        A.store.Int32(ptr + 860, 0);
        A.store.Ref(ptr + 864, undefined);

        A.store.Bool(ptr + 868 + 28, false);
        A.store.Ref(ptr + 868 + 0, undefined);
        A.store.Ref(ptr + 868 + 4, undefined);
        A.store.Ref(ptr + 868 + 8, undefined);
        A.store.Ref(ptr + 868 + 12, undefined);
        A.store.Ref(ptr + 868 + 16, undefined);
        A.store.Ref(ptr + 868 + 20, undefined);
        A.store.Bool(ptr + 868 + 26, false);
        A.store.Bool(ptr + 868 + 24, false);
        A.store.Bool(ptr + 868 + 27, false);
        A.store.Bool(ptr + 868 + 25, false);

        A.store.Bool(ptr + 900 + 21, false);
        A.store.Bool(ptr + 900 + 14, false);
        A.store.Bool(ptr + 900 + 0, false);
        A.store.Ref(ptr + 900 + 4, undefined);
        A.store.Bool(ptr + 900 + 15, false);
        A.store.Bool(ptr + 900 + 8, false);
        A.store.Bool(ptr + 900 + 16, false);
        A.store.Bool(ptr + 900 + 9, false);
        A.store.Bool(ptr + 900 + 17, false);
        A.store.Bool(ptr + 900 + 10, false);
        A.store.Bool(ptr + 900 + 18, false);
        A.store.Bool(ptr + 900 + 11, false);
        A.store.Bool(ptr + 900 + 19, false);
        A.store.Bool(ptr + 900 + 12, false);
        A.store.Bool(ptr + 900 + 20, false);
        A.store.Bool(ptr + 900 + 13, false);

        A.store.Bool(ptr + 924 + 28, false);
        A.store.Ref(ptr + 924 + 0, undefined);
        A.store.Ref(ptr + 924 + 4, undefined);
        A.store.Ref(ptr + 924 + 8, undefined);
        A.store.Ref(ptr + 924 + 12, undefined);
        A.store.Ref(ptr + 924 + 16, undefined);
        A.store.Ref(ptr + 924 + 20, undefined);
        A.store.Bool(ptr + 924 + 26, false);
        A.store.Bool(ptr + 924 + 24, false);
        A.store.Bool(ptr + 924 + 27, false);
        A.store.Bool(ptr + 924 + 25, false);

        A.store.Bool(ptr + 956 + 28, false);
        A.store.Ref(ptr + 956 + 0, undefined);
        A.store.Ref(ptr + 956 + 4, undefined);
        A.store.Ref(ptr + 956 + 8, undefined);
        A.store.Ref(ptr + 956 + 12, undefined);
        A.store.Ref(ptr + 956 + 16, undefined);
        A.store.Ref(ptr + 956 + 20, undefined);
        A.store.Bool(ptr + 956 + 26, false);
        A.store.Bool(ptr + 956 + 24, false);
        A.store.Bool(ptr + 956 + 27, false);
        A.store.Bool(ptr + 956 + 25, false);

        A.store.Bool(ptr + 988 + 28, false);
        A.store.Ref(ptr + 988 + 0, undefined);
        A.store.Ref(ptr + 988 + 4, undefined);
        A.store.Ref(ptr + 988 + 8, undefined);
        A.store.Ref(ptr + 988 + 12, undefined);
        A.store.Ref(ptr + 988 + 16, undefined);
        A.store.Ref(ptr + 988 + 20, undefined);
        A.store.Bool(ptr + 988 + 26, false);
        A.store.Bool(ptr + 988 + 24, false);
        A.store.Bool(ptr + 988 + 27, false);
        A.store.Bool(ptr + 988 + 25, false);
        A.store.Bool(ptr + 1025, false);
        A.store.Int32(ptr + 1020, 0);
      } else {
        A.store.Bool(ptr + 1026, true);

        if (typeof x["AllowGatewayARPPolling"] === "undefined") {
          A.store.Bool(ptr + 0 + 21, false);
          A.store.Bool(ptr + 0 + 14, false);
          A.store.Bool(ptr + 0 + 0, false);
          A.store.Ref(ptr + 0 + 4, undefined);
          A.store.Bool(ptr + 0 + 15, false);
          A.store.Bool(ptr + 0 + 8, false);
          A.store.Bool(ptr + 0 + 16, false);
          A.store.Bool(ptr + 0 + 9, false);
          A.store.Bool(ptr + 0 + 17, false);
          A.store.Bool(ptr + 0 + 10, false);
          A.store.Bool(ptr + 0 + 18, false);
          A.store.Bool(ptr + 0 + 11, false);
          A.store.Bool(ptr + 0 + 19, false);
          A.store.Bool(ptr + 0 + 12, false);
          A.store.Bool(ptr + 0 + 20, false);
          A.store.Bool(ptr + 0 + 13, false);
        } else {
          A.store.Bool(ptr + 0 + 21, true);
          A.store.Bool(ptr + 0 + 14, "Active" in x["AllowGatewayARPPolling"] ? true : false);
          A.store.Bool(ptr + 0 + 0, x["AllowGatewayARPPolling"]["Active"] ? true : false);
          A.store.Ref(ptr + 0 + 4, x["AllowGatewayARPPolling"]["Effective"]);
          A.store.Bool(ptr + 0 + 15, "UserPolicy" in x["AllowGatewayARPPolling"] ? true : false);
          A.store.Bool(ptr + 0 + 8, x["AllowGatewayARPPolling"]["UserPolicy"] ? true : false);
          A.store.Bool(ptr + 0 + 16, "DevicePolicy" in x["AllowGatewayARPPolling"] ? true : false);
          A.store.Bool(ptr + 0 + 9, x["AllowGatewayARPPolling"]["DevicePolicy"] ? true : false);
          A.store.Bool(ptr + 0 + 17, "UserSetting" in x["AllowGatewayARPPolling"] ? true : false);
          A.store.Bool(ptr + 0 + 10, x["AllowGatewayARPPolling"]["UserSetting"] ? true : false);
          A.store.Bool(ptr + 0 + 18, "SharedSetting" in x["AllowGatewayARPPolling"] ? true : false);
          A.store.Bool(ptr + 0 + 11, x["AllowGatewayARPPolling"]["SharedSetting"] ? true : false);
          A.store.Bool(ptr + 0 + 19, "UserEditable" in x["AllowGatewayARPPolling"] ? true : false);
          A.store.Bool(ptr + 0 + 12, x["AllowGatewayARPPolling"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 0 + 20, "DeviceEditable" in x["AllowGatewayARPPolling"] ? true : false);
          A.store.Bool(ptr + 0 + 13, x["AllowGatewayARPPolling"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["AutoConnect"] === "undefined") {
          A.store.Bool(ptr + 24 + 21, false);
          A.store.Bool(ptr + 24 + 14, false);
          A.store.Bool(ptr + 24 + 0, false);
          A.store.Ref(ptr + 24 + 4, undefined);
          A.store.Bool(ptr + 24 + 15, false);
          A.store.Bool(ptr + 24 + 8, false);
          A.store.Bool(ptr + 24 + 16, false);
          A.store.Bool(ptr + 24 + 9, false);
          A.store.Bool(ptr + 24 + 17, false);
          A.store.Bool(ptr + 24 + 10, false);
          A.store.Bool(ptr + 24 + 18, false);
          A.store.Bool(ptr + 24 + 11, false);
          A.store.Bool(ptr + 24 + 19, false);
          A.store.Bool(ptr + 24 + 12, false);
          A.store.Bool(ptr + 24 + 20, false);
          A.store.Bool(ptr + 24 + 13, false);
        } else {
          A.store.Bool(ptr + 24 + 21, true);
          A.store.Bool(ptr + 24 + 14, "Active" in x["AutoConnect"] ? true : false);
          A.store.Bool(ptr + 24 + 0, x["AutoConnect"]["Active"] ? true : false);
          A.store.Ref(ptr + 24 + 4, x["AutoConnect"]["Effective"]);
          A.store.Bool(ptr + 24 + 15, "UserPolicy" in x["AutoConnect"] ? true : false);
          A.store.Bool(ptr + 24 + 8, x["AutoConnect"]["UserPolicy"] ? true : false);
          A.store.Bool(ptr + 24 + 16, "DevicePolicy" in x["AutoConnect"] ? true : false);
          A.store.Bool(ptr + 24 + 9, x["AutoConnect"]["DevicePolicy"] ? true : false);
          A.store.Bool(ptr + 24 + 17, "UserSetting" in x["AutoConnect"] ? true : false);
          A.store.Bool(ptr + 24 + 10, x["AutoConnect"]["UserSetting"] ? true : false);
          A.store.Bool(ptr + 24 + 18, "SharedSetting" in x["AutoConnect"] ? true : false);
          A.store.Bool(ptr + 24 + 11, x["AutoConnect"]["SharedSetting"] ? true : false);
          A.store.Bool(ptr + 24 + 19, "UserEditable" in x["AutoConnect"] ? true : false);
          A.store.Bool(ptr + 24 + 12, x["AutoConnect"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 24 + 20, "DeviceEditable" in x["AutoConnect"] ? true : false);
          A.store.Bool(ptr + 24 + 13, x["AutoConnect"]["DeviceEditable"] ? true : false);
        }
        A.store.Ref(ptr + 48, x["BSSID"]);

        if (typeof x["EAP"] === "undefined") {
          A.store.Bool(ptr + 52 + 806, false);

          A.store.Bool(ptr + 52 + 0 + 28, false);
          A.store.Ref(ptr + 52 + 0 + 0, undefined);
          A.store.Ref(ptr + 52 + 0 + 4, undefined);
          A.store.Ref(ptr + 52 + 0 + 8, undefined);
          A.store.Ref(ptr + 52 + 0 + 12, undefined);
          A.store.Ref(ptr + 52 + 0 + 16, undefined);
          A.store.Ref(ptr + 52 + 0 + 20, undefined);
          A.store.Bool(ptr + 52 + 0 + 26, false);
          A.store.Bool(ptr + 52 + 0 + 24, false);
          A.store.Bool(ptr + 52 + 0 + 27, false);
          A.store.Bool(ptr + 52 + 0 + 25, false);

          A.store.Bool(ptr + 52 + 32 + 318, false);

          A.store.Bool(ptr + 52 + 32 + 0 + 28, false);
          A.store.Ref(ptr + 52 + 32 + 0 + 0, undefined);
          A.store.Ref(ptr + 52 + 32 + 0 + 4, undefined);
          A.store.Ref(ptr + 52 + 32 + 0 + 8, undefined);
          A.store.Ref(ptr + 52 + 32 + 0 + 12, undefined);
          A.store.Ref(ptr + 52 + 32 + 0 + 16, undefined);
          A.store.Ref(ptr + 52 + 32 + 0 + 20, undefined);
          A.store.Bool(ptr + 52 + 32 + 0 + 26, false);
          A.store.Bool(ptr + 52 + 32 + 0 + 24, false);
          A.store.Bool(ptr + 52 + 32 + 0 + 27, false);
          A.store.Bool(ptr + 52 + 32 + 0 + 25, false);

          A.store.Bool(ptr + 52 + 32 + 32 + 125, false);

          A.store.Bool(ptr + 52 + 32 + 32 + 0 + 28, false);
          A.store.Ref(ptr + 52 + 32 + 32 + 0 + 0, undefined);
          A.store.Ref(ptr + 52 + 32 + 32 + 0 + 4, undefined);
          A.store.Ref(ptr + 52 + 32 + 32 + 0 + 8, undefined);
          A.store.Ref(ptr + 52 + 32 + 32 + 0 + 12, undefined);
          A.store.Ref(ptr + 52 + 32 + 32 + 0 + 16, undefined);
          A.store.Ref(ptr + 52 + 32 + 32 + 0 + 20, undefined);
          A.store.Bool(ptr + 52 + 32 + 32 + 0 + 26, false);
          A.store.Bool(ptr + 52 + 32 + 32 + 0 + 24, false);
          A.store.Bool(ptr + 52 + 32 + 32 + 0 + 27, false);
          A.store.Bool(ptr + 52 + 32 + 32 + 0 + 25, false);

          A.store.Bool(ptr + 52 + 32 + 32 + 32 + 28, false);
          A.store.Ref(ptr + 52 + 32 + 32 + 32 + 0, undefined);
          A.store.Ref(ptr + 52 + 32 + 32 + 32 + 4, undefined);
          A.store.Ref(ptr + 52 + 32 + 32 + 32 + 8, undefined);
          A.store.Ref(ptr + 52 + 32 + 32 + 32 + 12, undefined);
          A.store.Ref(ptr + 52 + 32 + 32 + 32 + 16, undefined);
          A.store.Ref(ptr + 52 + 32 + 32 + 32 + 20, undefined);
          A.store.Bool(ptr + 52 + 32 + 32 + 32 + 26, false);
          A.store.Bool(ptr + 52 + 32 + 32 + 32 + 24, false);
          A.store.Bool(ptr + 52 + 32 + 32 + 32 + 27, false);
          A.store.Bool(ptr + 52 + 32 + 32 + 32 + 25, false);

          A.store.Bool(ptr + 52 + 32 + 32 + 64 + 28, false);
          A.store.Ref(ptr + 52 + 32 + 32 + 64 + 0, undefined);
          A.store.Ref(ptr + 52 + 32 + 32 + 64 + 4, undefined);
          A.store.Ref(ptr + 52 + 32 + 32 + 64 + 8, undefined);
          A.store.Ref(ptr + 52 + 32 + 32 + 64 + 12, undefined);
          A.store.Ref(ptr + 52 + 32 + 32 + 64 + 16, undefined);
          A.store.Ref(ptr + 52 + 32 + 32 + 64 + 20, undefined);
          A.store.Bool(ptr + 52 + 32 + 32 + 64 + 26, false);
          A.store.Bool(ptr + 52 + 32 + 32 + 64 + 24, false);
          A.store.Bool(ptr + 52 + 32 + 32 + 64 + 27, false);
          A.store.Bool(ptr + 52 + 32 + 32 + 64 + 25, false);

          A.store.Bool(ptr + 52 + 32 + 32 + 96 + 28, false);
          A.store.Ref(ptr + 52 + 32 + 32 + 96 + 0, undefined);
          A.store.Ref(ptr + 52 + 32 + 32 + 96 + 4, undefined);
          A.store.Ref(ptr + 52 + 32 + 32 + 96 + 8, undefined);
          A.store.Ref(ptr + 52 + 32 + 32 + 96 + 12, undefined);
          A.store.Ref(ptr + 52 + 32 + 32 + 96 + 16, undefined);
          A.store.Ref(ptr + 52 + 32 + 32 + 96 + 20, undefined);
          A.store.Bool(ptr + 52 + 32 + 32 + 96 + 26, false);
          A.store.Bool(ptr + 52 + 32 + 32 + 96 + 24, false);
          A.store.Bool(ptr + 52 + 32 + 32 + 96 + 27, false);
          A.store.Bool(ptr + 52 + 32 + 32 + 96 + 25, false);

          A.store.Bool(ptr + 52 + 32 + 160 + 28, false);
          A.store.Ref(ptr + 52 + 32 + 160 + 0, undefined);
          A.store.Ref(ptr + 52 + 32 + 160 + 4, undefined);
          A.store.Ref(ptr + 52 + 32 + 160 + 8, undefined);
          A.store.Ref(ptr + 52 + 32 + 160 + 12, undefined);
          A.store.Ref(ptr + 52 + 32 + 160 + 16, undefined);
          A.store.Ref(ptr + 52 + 32 + 160 + 20, undefined);
          A.store.Bool(ptr + 52 + 32 + 160 + 26, false);
          A.store.Bool(ptr + 52 + 32 + 160 + 24, false);
          A.store.Bool(ptr + 52 + 32 + 160 + 27, false);
          A.store.Bool(ptr + 52 + 32 + 160 + 25, false);

          A.store.Bool(ptr + 52 + 32 + 192 + 125, false);

          A.store.Bool(ptr + 52 + 32 + 192 + 0 + 28, false);
          A.store.Ref(ptr + 52 + 32 + 192 + 0 + 0, undefined);
          A.store.Ref(ptr + 52 + 32 + 192 + 0 + 4, undefined);
          A.store.Ref(ptr + 52 + 32 + 192 + 0 + 8, undefined);
          A.store.Ref(ptr + 52 + 32 + 192 + 0 + 12, undefined);
          A.store.Ref(ptr + 52 + 32 + 192 + 0 + 16, undefined);
          A.store.Ref(ptr + 52 + 32 + 192 + 0 + 20, undefined);
          A.store.Bool(ptr + 52 + 32 + 192 + 0 + 26, false);
          A.store.Bool(ptr + 52 + 32 + 192 + 0 + 24, false);
          A.store.Bool(ptr + 52 + 32 + 192 + 0 + 27, false);
          A.store.Bool(ptr + 52 + 32 + 192 + 0 + 25, false);

          A.store.Bool(ptr + 52 + 32 + 192 + 32 + 28, false);
          A.store.Ref(ptr + 52 + 32 + 192 + 32 + 0, undefined);
          A.store.Ref(ptr + 52 + 32 + 192 + 32 + 4, undefined);
          A.store.Ref(ptr + 52 + 32 + 192 + 32 + 8, undefined);
          A.store.Ref(ptr + 52 + 32 + 192 + 32 + 12, undefined);
          A.store.Ref(ptr + 52 + 32 + 192 + 32 + 16, undefined);
          A.store.Ref(ptr + 52 + 32 + 192 + 32 + 20, undefined);
          A.store.Bool(ptr + 52 + 32 + 192 + 32 + 26, false);
          A.store.Bool(ptr + 52 + 32 + 192 + 32 + 24, false);
          A.store.Bool(ptr + 52 + 32 + 192 + 32 + 27, false);
          A.store.Bool(ptr + 52 + 32 + 192 + 32 + 25, false);

          A.store.Bool(ptr + 52 + 32 + 192 + 64 + 28, false);
          A.store.Ref(ptr + 52 + 32 + 192 + 64 + 0, undefined);
          A.store.Ref(ptr + 52 + 32 + 192 + 64 + 4, undefined);
          A.store.Ref(ptr + 52 + 32 + 192 + 64 + 8, undefined);
          A.store.Ref(ptr + 52 + 32 + 192 + 64 + 12, undefined);
          A.store.Ref(ptr + 52 + 32 + 192 + 64 + 16, undefined);
          A.store.Ref(ptr + 52 + 32 + 192 + 64 + 20, undefined);
          A.store.Bool(ptr + 52 + 32 + 192 + 64 + 26, false);
          A.store.Bool(ptr + 52 + 32 + 192 + 64 + 24, false);
          A.store.Bool(ptr + 52 + 32 + 192 + 64 + 27, false);
          A.store.Bool(ptr + 52 + 32 + 192 + 64 + 25, false);

          A.store.Bool(ptr + 52 + 32 + 192 + 96 + 28, false);
          A.store.Ref(ptr + 52 + 32 + 192 + 96 + 0, undefined);
          A.store.Ref(ptr + 52 + 32 + 192 + 96 + 4, undefined);
          A.store.Ref(ptr + 52 + 32 + 192 + 96 + 8, undefined);
          A.store.Ref(ptr + 52 + 32 + 192 + 96 + 12, undefined);
          A.store.Ref(ptr + 52 + 32 + 192 + 96 + 16, undefined);
          A.store.Ref(ptr + 52 + 32 + 192 + 96 + 20, undefined);
          A.store.Bool(ptr + 52 + 32 + 192 + 96 + 26, false);
          A.store.Bool(ptr + 52 + 32 + 192 + 96 + 24, false);
          A.store.Bool(ptr + 52 + 32 + 192 + 96 + 27, false);
          A.store.Bool(ptr + 52 + 32 + 192 + 96 + 25, false);

          A.store.Bool(ptr + 52 + 352 + 28, false);
          A.store.Ref(ptr + 52 + 352 + 0, undefined);
          A.store.Ref(ptr + 52 + 352 + 4, undefined);
          A.store.Ref(ptr + 52 + 352 + 8, undefined);
          A.store.Ref(ptr + 52 + 352 + 12, undefined);
          A.store.Ref(ptr + 52 + 352 + 16, undefined);
          A.store.Ref(ptr + 52 + 352 + 20, undefined);
          A.store.Bool(ptr + 52 + 352 + 26, false);
          A.store.Bool(ptr + 52 + 352 + 24, false);
          A.store.Bool(ptr + 52 + 352 + 27, false);
          A.store.Bool(ptr + 52 + 352 + 25, false);

          A.store.Bool(ptr + 52 + 384 + 28, false);
          A.store.Ref(ptr + 52 + 384 + 0, undefined);
          A.store.Ref(ptr + 52 + 384 + 4, undefined);
          A.store.Ref(ptr + 52 + 384 + 8, undefined);
          A.store.Ref(ptr + 52 + 384 + 12, undefined);
          A.store.Ref(ptr + 52 + 384 + 16, undefined);
          A.store.Ref(ptr + 52 + 384 + 20, undefined);
          A.store.Bool(ptr + 52 + 384 + 26, false);
          A.store.Bool(ptr + 52 + 384 + 24, false);
          A.store.Bool(ptr + 52 + 384 + 27, false);
          A.store.Bool(ptr + 52 + 384 + 25, false);

          A.store.Bool(ptr + 52 + 416 + 28, false);
          A.store.Ref(ptr + 52 + 416 + 0, undefined);
          A.store.Ref(ptr + 52 + 416 + 4, undefined);
          A.store.Ref(ptr + 52 + 416 + 8, undefined);
          A.store.Ref(ptr + 52 + 416 + 12, undefined);
          A.store.Ref(ptr + 52 + 416 + 16, undefined);
          A.store.Ref(ptr + 52 + 416 + 20, undefined);
          A.store.Bool(ptr + 52 + 416 + 26, false);
          A.store.Bool(ptr + 52 + 416 + 24, false);
          A.store.Bool(ptr + 52 + 416 + 27, false);
          A.store.Bool(ptr + 52 + 416 + 25, false);

          A.store.Bool(ptr + 52 + 448 + 28, false);
          A.store.Ref(ptr + 52 + 448 + 0, undefined);
          A.store.Ref(ptr + 52 + 448 + 4, undefined);
          A.store.Ref(ptr + 52 + 448 + 8, undefined);
          A.store.Ref(ptr + 52 + 448 + 12, undefined);
          A.store.Ref(ptr + 52 + 448 + 16, undefined);
          A.store.Ref(ptr + 52 + 448 + 20, undefined);
          A.store.Bool(ptr + 52 + 448 + 26, false);
          A.store.Bool(ptr + 52 + 448 + 24, false);
          A.store.Bool(ptr + 52 + 448 + 27, false);
          A.store.Bool(ptr + 52 + 448 + 25, false);

          A.store.Bool(ptr + 52 + 480 + 28, false);
          A.store.Ref(ptr + 52 + 480 + 0, undefined);
          A.store.Ref(ptr + 52 + 480 + 4, undefined);
          A.store.Ref(ptr + 52 + 480 + 8, undefined);
          A.store.Ref(ptr + 52 + 480 + 12, undefined);
          A.store.Ref(ptr + 52 + 480 + 16, undefined);
          A.store.Ref(ptr + 52 + 480 + 20, undefined);
          A.store.Bool(ptr + 52 + 480 + 26, false);
          A.store.Bool(ptr + 52 + 480 + 24, false);
          A.store.Bool(ptr + 52 + 480 + 27, false);
          A.store.Bool(ptr + 52 + 480 + 25, false);

          A.store.Bool(ptr + 52 + 512 + 28, false);
          A.store.Ref(ptr + 52 + 512 + 0, undefined);
          A.store.Ref(ptr + 52 + 512 + 4, undefined);
          A.store.Ref(ptr + 52 + 512 + 8, undefined);
          A.store.Ref(ptr + 52 + 512 + 12, undefined);
          A.store.Ref(ptr + 52 + 512 + 16, undefined);
          A.store.Ref(ptr + 52 + 512 + 20, undefined);
          A.store.Bool(ptr + 52 + 512 + 26, false);
          A.store.Bool(ptr + 52 + 512 + 24, false);
          A.store.Bool(ptr + 52 + 512 + 27, false);
          A.store.Bool(ptr + 52 + 512 + 25, false);

          A.store.Bool(ptr + 52 + 544 + 28, false);
          A.store.Ref(ptr + 52 + 544 + 0, undefined);
          A.store.Ref(ptr + 52 + 544 + 4, undefined);
          A.store.Ref(ptr + 52 + 544 + 8, undefined);
          A.store.Ref(ptr + 52 + 544 + 12, undefined);
          A.store.Ref(ptr + 52 + 544 + 16, undefined);
          A.store.Ref(ptr + 52 + 544 + 20, undefined);
          A.store.Bool(ptr + 52 + 544 + 26, false);
          A.store.Bool(ptr + 52 + 544 + 24, false);
          A.store.Bool(ptr + 52 + 544 + 27, false);
          A.store.Bool(ptr + 52 + 544 + 25, false);

          A.store.Bool(ptr + 52 + 576 + 28, false);
          A.store.Ref(ptr + 52 + 576 + 0, undefined);
          A.store.Ref(ptr + 52 + 576 + 4, undefined);
          A.store.Ref(ptr + 52 + 576 + 8, undefined);
          A.store.Ref(ptr + 52 + 576 + 12, undefined);
          A.store.Ref(ptr + 52 + 576 + 16, undefined);
          A.store.Ref(ptr + 52 + 576 + 20, undefined);
          A.store.Bool(ptr + 52 + 576 + 26, false);
          A.store.Bool(ptr + 52 + 576 + 24, false);
          A.store.Bool(ptr + 52 + 576 + 27, false);
          A.store.Bool(ptr + 52 + 576 + 25, false);

          A.store.Bool(ptr + 52 + 608 + 21, false);
          A.store.Bool(ptr + 52 + 608 + 14, false);
          A.store.Bool(ptr + 52 + 608 + 0, false);
          A.store.Ref(ptr + 52 + 608 + 4, undefined);
          A.store.Bool(ptr + 52 + 608 + 15, false);
          A.store.Bool(ptr + 52 + 608 + 8, false);
          A.store.Bool(ptr + 52 + 608 + 16, false);
          A.store.Bool(ptr + 52 + 608 + 9, false);
          A.store.Bool(ptr + 52 + 608 + 17, false);
          A.store.Bool(ptr + 52 + 608 + 10, false);
          A.store.Bool(ptr + 52 + 608 + 18, false);
          A.store.Bool(ptr + 52 + 608 + 11, false);
          A.store.Bool(ptr + 52 + 608 + 19, false);
          A.store.Bool(ptr + 52 + 608 + 12, false);
          A.store.Bool(ptr + 52 + 608 + 20, false);
          A.store.Bool(ptr + 52 + 608 + 13, false);

          A.store.Bool(ptr + 52 + 632 + 28, false);
          A.store.Ref(ptr + 52 + 632 + 0, undefined);
          A.store.Ref(ptr + 52 + 632 + 4, undefined);
          A.store.Ref(ptr + 52 + 632 + 8, undefined);
          A.store.Ref(ptr + 52 + 632 + 12, undefined);
          A.store.Ref(ptr + 52 + 632 + 16, undefined);
          A.store.Ref(ptr + 52 + 632 + 20, undefined);
          A.store.Bool(ptr + 52 + 632 + 26, false);
          A.store.Bool(ptr + 52 + 632 + 24, false);
          A.store.Bool(ptr + 52 + 632 + 27, false);
          A.store.Bool(ptr + 52 + 632 + 25, false);

          A.store.Bool(ptr + 52 + 664 + 28, false);
          A.store.Ref(ptr + 52 + 664 + 0, undefined);
          A.store.Ref(ptr + 52 + 664 + 4, undefined);
          A.store.Ref(ptr + 52 + 664 + 8, undefined);
          A.store.Ref(ptr + 52 + 664 + 12, undefined);
          A.store.Ref(ptr + 52 + 664 + 16, undefined);
          A.store.Ref(ptr + 52 + 664 + 20, undefined);
          A.store.Bool(ptr + 52 + 664 + 26, false);
          A.store.Bool(ptr + 52 + 664 + 24, false);
          A.store.Bool(ptr + 52 + 664 + 27, false);
          A.store.Bool(ptr + 52 + 664 + 25, false);

          A.store.Bool(ptr + 52 + 696 + 28, false);
          A.store.Ref(ptr + 52 + 696 + 0, undefined);
          A.store.Ref(ptr + 52 + 696 + 4, undefined);
          A.store.Ref(ptr + 52 + 696 + 8, undefined);
          A.store.Ref(ptr + 52 + 696 + 12, undefined);
          A.store.Ref(ptr + 52 + 696 + 16, undefined);
          A.store.Ref(ptr + 52 + 696 + 20, undefined);
          A.store.Bool(ptr + 52 + 696 + 26, false);
          A.store.Bool(ptr + 52 + 696 + 24, false);
          A.store.Bool(ptr + 52 + 696 + 27, false);
          A.store.Bool(ptr + 52 + 696 + 25, false);

          A.store.Bool(ptr + 52 + 728 + 28, false);
          A.store.Ref(ptr + 52 + 728 + 0, undefined);
          A.store.Ref(ptr + 52 + 728 + 4, undefined);
          A.store.Ref(ptr + 52 + 728 + 8, undefined);
          A.store.Ref(ptr + 52 + 728 + 12, undefined);
          A.store.Ref(ptr + 52 + 728 + 16, undefined);
          A.store.Ref(ptr + 52 + 728 + 20, undefined);
          A.store.Bool(ptr + 52 + 728 + 26, false);
          A.store.Bool(ptr + 52 + 728 + 24, false);
          A.store.Bool(ptr + 52 + 728 + 27, false);
          A.store.Bool(ptr + 52 + 728 + 25, false);

          A.store.Bool(ptr + 52 + 760 + 21, false);
          A.store.Bool(ptr + 52 + 760 + 14, false);
          A.store.Bool(ptr + 52 + 760 + 0, false);
          A.store.Ref(ptr + 52 + 760 + 4, undefined);
          A.store.Bool(ptr + 52 + 760 + 15, false);
          A.store.Bool(ptr + 52 + 760 + 8, false);
          A.store.Bool(ptr + 52 + 760 + 16, false);
          A.store.Bool(ptr + 52 + 760 + 9, false);
          A.store.Bool(ptr + 52 + 760 + 17, false);
          A.store.Bool(ptr + 52 + 760 + 10, false);
          A.store.Bool(ptr + 52 + 760 + 18, false);
          A.store.Bool(ptr + 52 + 760 + 11, false);
          A.store.Bool(ptr + 52 + 760 + 19, false);
          A.store.Bool(ptr + 52 + 760 + 12, false);
          A.store.Bool(ptr + 52 + 760 + 20, false);
          A.store.Bool(ptr + 52 + 760 + 13, false);

          A.store.Bool(ptr + 52 + 784 + 21, false);
          A.store.Bool(ptr + 52 + 784 + 14, false);
          A.store.Bool(ptr + 52 + 784 + 0, false);
          A.store.Ref(ptr + 52 + 784 + 4, undefined);
          A.store.Bool(ptr + 52 + 784 + 15, false);
          A.store.Bool(ptr + 52 + 784 + 8, false);
          A.store.Bool(ptr + 52 + 784 + 16, false);
          A.store.Bool(ptr + 52 + 784 + 9, false);
          A.store.Bool(ptr + 52 + 784 + 17, false);
          A.store.Bool(ptr + 52 + 784 + 10, false);
          A.store.Bool(ptr + 52 + 784 + 18, false);
          A.store.Bool(ptr + 52 + 784 + 11, false);
          A.store.Bool(ptr + 52 + 784 + 19, false);
          A.store.Bool(ptr + 52 + 784 + 12, false);
          A.store.Bool(ptr + 52 + 784 + 20, false);
          A.store.Bool(ptr + 52 + 784 + 13, false);
        } else {
          A.store.Bool(ptr + 52 + 806, true);

          if (typeof x["EAP"]["AnonymousIdentity"] === "undefined") {
            A.store.Bool(ptr + 52 + 0 + 28, false);
            A.store.Ref(ptr + 52 + 0 + 0, undefined);
            A.store.Ref(ptr + 52 + 0 + 4, undefined);
            A.store.Ref(ptr + 52 + 0 + 8, undefined);
            A.store.Ref(ptr + 52 + 0 + 12, undefined);
            A.store.Ref(ptr + 52 + 0 + 16, undefined);
            A.store.Ref(ptr + 52 + 0 + 20, undefined);
            A.store.Bool(ptr + 52 + 0 + 26, false);
            A.store.Bool(ptr + 52 + 0 + 24, false);
            A.store.Bool(ptr + 52 + 0 + 27, false);
            A.store.Bool(ptr + 52 + 0 + 25, false);
          } else {
            A.store.Bool(ptr + 52 + 0 + 28, true);
            A.store.Ref(ptr + 52 + 0 + 0, x["EAP"]["AnonymousIdentity"]["Active"]);
            A.store.Ref(ptr + 52 + 0 + 4, x["EAP"]["AnonymousIdentity"]["Effective"]);
            A.store.Ref(ptr + 52 + 0 + 8, x["EAP"]["AnonymousIdentity"]["UserPolicy"]);
            A.store.Ref(ptr + 52 + 0 + 12, x["EAP"]["AnonymousIdentity"]["DevicePolicy"]);
            A.store.Ref(ptr + 52 + 0 + 16, x["EAP"]["AnonymousIdentity"]["UserSetting"]);
            A.store.Ref(ptr + 52 + 0 + 20, x["EAP"]["AnonymousIdentity"]["SharedSetting"]);
            A.store.Bool(ptr + 52 + 0 + 26, "UserEditable" in x["EAP"]["AnonymousIdentity"] ? true : false);
            A.store.Bool(ptr + 52 + 0 + 24, x["EAP"]["AnonymousIdentity"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 52 + 0 + 27, "DeviceEditable" in x["EAP"]["AnonymousIdentity"] ? true : false);
            A.store.Bool(ptr + 52 + 0 + 25, x["EAP"]["AnonymousIdentity"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["ClientCertPattern"] === "undefined") {
            A.store.Bool(ptr + 52 + 32 + 318, false);

            A.store.Bool(ptr + 52 + 32 + 0 + 28, false);
            A.store.Ref(ptr + 52 + 32 + 0 + 0, undefined);
            A.store.Ref(ptr + 52 + 32 + 0 + 4, undefined);
            A.store.Ref(ptr + 52 + 32 + 0 + 8, undefined);
            A.store.Ref(ptr + 52 + 32 + 0 + 12, undefined);
            A.store.Ref(ptr + 52 + 32 + 0 + 16, undefined);
            A.store.Ref(ptr + 52 + 32 + 0 + 20, undefined);
            A.store.Bool(ptr + 52 + 32 + 0 + 26, false);
            A.store.Bool(ptr + 52 + 32 + 0 + 24, false);
            A.store.Bool(ptr + 52 + 32 + 0 + 27, false);
            A.store.Bool(ptr + 52 + 32 + 0 + 25, false);

            A.store.Bool(ptr + 52 + 32 + 32 + 125, false);

            A.store.Bool(ptr + 52 + 32 + 32 + 0 + 28, false);
            A.store.Ref(ptr + 52 + 32 + 32 + 0 + 0, undefined);
            A.store.Ref(ptr + 52 + 32 + 32 + 0 + 4, undefined);
            A.store.Ref(ptr + 52 + 32 + 32 + 0 + 8, undefined);
            A.store.Ref(ptr + 52 + 32 + 32 + 0 + 12, undefined);
            A.store.Ref(ptr + 52 + 32 + 32 + 0 + 16, undefined);
            A.store.Ref(ptr + 52 + 32 + 32 + 0 + 20, undefined);
            A.store.Bool(ptr + 52 + 32 + 32 + 0 + 26, false);
            A.store.Bool(ptr + 52 + 32 + 32 + 0 + 24, false);
            A.store.Bool(ptr + 52 + 32 + 32 + 0 + 27, false);
            A.store.Bool(ptr + 52 + 32 + 32 + 0 + 25, false);

            A.store.Bool(ptr + 52 + 32 + 32 + 32 + 28, false);
            A.store.Ref(ptr + 52 + 32 + 32 + 32 + 0, undefined);
            A.store.Ref(ptr + 52 + 32 + 32 + 32 + 4, undefined);
            A.store.Ref(ptr + 52 + 32 + 32 + 32 + 8, undefined);
            A.store.Ref(ptr + 52 + 32 + 32 + 32 + 12, undefined);
            A.store.Ref(ptr + 52 + 32 + 32 + 32 + 16, undefined);
            A.store.Ref(ptr + 52 + 32 + 32 + 32 + 20, undefined);
            A.store.Bool(ptr + 52 + 32 + 32 + 32 + 26, false);
            A.store.Bool(ptr + 52 + 32 + 32 + 32 + 24, false);
            A.store.Bool(ptr + 52 + 32 + 32 + 32 + 27, false);
            A.store.Bool(ptr + 52 + 32 + 32 + 32 + 25, false);

            A.store.Bool(ptr + 52 + 32 + 32 + 64 + 28, false);
            A.store.Ref(ptr + 52 + 32 + 32 + 64 + 0, undefined);
            A.store.Ref(ptr + 52 + 32 + 32 + 64 + 4, undefined);
            A.store.Ref(ptr + 52 + 32 + 32 + 64 + 8, undefined);
            A.store.Ref(ptr + 52 + 32 + 32 + 64 + 12, undefined);
            A.store.Ref(ptr + 52 + 32 + 32 + 64 + 16, undefined);
            A.store.Ref(ptr + 52 + 32 + 32 + 64 + 20, undefined);
            A.store.Bool(ptr + 52 + 32 + 32 + 64 + 26, false);
            A.store.Bool(ptr + 52 + 32 + 32 + 64 + 24, false);
            A.store.Bool(ptr + 52 + 32 + 32 + 64 + 27, false);
            A.store.Bool(ptr + 52 + 32 + 32 + 64 + 25, false);

            A.store.Bool(ptr + 52 + 32 + 32 + 96 + 28, false);
            A.store.Ref(ptr + 52 + 32 + 32 + 96 + 0, undefined);
            A.store.Ref(ptr + 52 + 32 + 32 + 96 + 4, undefined);
            A.store.Ref(ptr + 52 + 32 + 32 + 96 + 8, undefined);
            A.store.Ref(ptr + 52 + 32 + 32 + 96 + 12, undefined);
            A.store.Ref(ptr + 52 + 32 + 32 + 96 + 16, undefined);
            A.store.Ref(ptr + 52 + 32 + 32 + 96 + 20, undefined);
            A.store.Bool(ptr + 52 + 32 + 32 + 96 + 26, false);
            A.store.Bool(ptr + 52 + 32 + 32 + 96 + 24, false);
            A.store.Bool(ptr + 52 + 32 + 32 + 96 + 27, false);
            A.store.Bool(ptr + 52 + 32 + 32 + 96 + 25, false);

            A.store.Bool(ptr + 52 + 32 + 160 + 28, false);
            A.store.Ref(ptr + 52 + 32 + 160 + 0, undefined);
            A.store.Ref(ptr + 52 + 32 + 160 + 4, undefined);
            A.store.Ref(ptr + 52 + 32 + 160 + 8, undefined);
            A.store.Ref(ptr + 52 + 32 + 160 + 12, undefined);
            A.store.Ref(ptr + 52 + 32 + 160 + 16, undefined);
            A.store.Ref(ptr + 52 + 32 + 160 + 20, undefined);
            A.store.Bool(ptr + 52 + 32 + 160 + 26, false);
            A.store.Bool(ptr + 52 + 32 + 160 + 24, false);
            A.store.Bool(ptr + 52 + 32 + 160 + 27, false);
            A.store.Bool(ptr + 52 + 32 + 160 + 25, false);

            A.store.Bool(ptr + 52 + 32 + 192 + 125, false);

            A.store.Bool(ptr + 52 + 32 + 192 + 0 + 28, false);
            A.store.Ref(ptr + 52 + 32 + 192 + 0 + 0, undefined);
            A.store.Ref(ptr + 52 + 32 + 192 + 0 + 4, undefined);
            A.store.Ref(ptr + 52 + 32 + 192 + 0 + 8, undefined);
            A.store.Ref(ptr + 52 + 32 + 192 + 0 + 12, undefined);
            A.store.Ref(ptr + 52 + 32 + 192 + 0 + 16, undefined);
            A.store.Ref(ptr + 52 + 32 + 192 + 0 + 20, undefined);
            A.store.Bool(ptr + 52 + 32 + 192 + 0 + 26, false);
            A.store.Bool(ptr + 52 + 32 + 192 + 0 + 24, false);
            A.store.Bool(ptr + 52 + 32 + 192 + 0 + 27, false);
            A.store.Bool(ptr + 52 + 32 + 192 + 0 + 25, false);

            A.store.Bool(ptr + 52 + 32 + 192 + 32 + 28, false);
            A.store.Ref(ptr + 52 + 32 + 192 + 32 + 0, undefined);
            A.store.Ref(ptr + 52 + 32 + 192 + 32 + 4, undefined);
            A.store.Ref(ptr + 52 + 32 + 192 + 32 + 8, undefined);
            A.store.Ref(ptr + 52 + 32 + 192 + 32 + 12, undefined);
            A.store.Ref(ptr + 52 + 32 + 192 + 32 + 16, undefined);
            A.store.Ref(ptr + 52 + 32 + 192 + 32 + 20, undefined);
            A.store.Bool(ptr + 52 + 32 + 192 + 32 + 26, false);
            A.store.Bool(ptr + 52 + 32 + 192 + 32 + 24, false);
            A.store.Bool(ptr + 52 + 32 + 192 + 32 + 27, false);
            A.store.Bool(ptr + 52 + 32 + 192 + 32 + 25, false);

            A.store.Bool(ptr + 52 + 32 + 192 + 64 + 28, false);
            A.store.Ref(ptr + 52 + 32 + 192 + 64 + 0, undefined);
            A.store.Ref(ptr + 52 + 32 + 192 + 64 + 4, undefined);
            A.store.Ref(ptr + 52 + 32 + 192 + 64 + 8, undefined);
            A.store.Ref(ptr + 52 + 32 + 192 + 64 + 12, undefined);
            A.store.Ref(ptr + 52 + 32 + 192 + 64 + 16, undefined);
            A.store.Ref(ptr + 52 + 32 + 192 + 64 + 20, undefined);
            A.store.Bool(ptr + 52 + 32 + 192 + 64 + 26, false);
            A.store.Bool(ptr + 52 + 32 + 192 + 64 + 24, false);
            A.store.Bool(ptr + 52 + 32 + 192 + 64 + 27, false);
            A.store.Bool(ptr + 52 + 32 + 192 + 64 + 25, false);

            A.store.Bool(ptr + 52 + 32 + 192 + 96 + 28, false);
            A.store.Ref(ptr + 52 + 32 + 192 + 96 + 0, undefined);
            A.store.Ref(ptr + 52 + 32 + 192 + 96 + 4, undefined);
            A.store.Ref(ptr + 52 + 32 + 192 + 96 + 8, undefined);
            A.store.Ref(ptr + 52 + 32 + 192 + 96 + 12, undefined);
            A.store.Ref(ptr + 52 + 32 + 192 + 96 + 16, undefined);
            A.store.Ref(ptr + 52 + 32 + 192 + 96 + 20, undefined);
            A.store.Bool(ptr + 52 + 32 + 192 + 96 + 26, false);
            A.store.Bool(ptr + 52 + 32 + 192 + 96 + 24, false);
            A.store.Bool(ptr + 52 + 32 + 192 + 96 + 27, false);
            A.store.Bool(ptr + 52 + 32 + 192 + 96 + 25, false);
          } else {
            A.store.Bool(ptr + 52 + 32 + 318, true);

            if (typeof x["EAP"]["ClientCertPattern"]["EnrollmentURI"] === "undefined") {
              A.store.Bool(ptr + 52 + 32 + 0 + 28, false);
              A.store.Ref(ptr + 52 + 32 + 0 + 0, undefined);
              A.store.Ref(ptr + 52 + 32 + 0 + 4, undefined);
              A.store.Ref(ptr + 52 + 32 + 0 + 8, undefined);
              A.store.Ref(ptr + 52 + 32 + 0 + 12, undefined);
              A.store.Ref(ptr + 52 + 32 + 0 + 16, undefined);
              A.store.Ref(ptr + 52 + 32 + 0 + 20, undefined);
              A.store.Bool(ptr + 52 + 32 + 0 + 26, false);
              A.store.Bool(ptr + 52 + 32 + 0 + 24, false);
              A.store.Bool(ptr + 52 + 32 + 0 + 27, false);
              A.store.Bool(ptr + 52 + 32 + 0 + 25, false);
            } else {
              A.store.Bool(ptr + 52 + 32 + 0 + 28, true);
              A.store.Ref(ptr + 52 + 32 + 0 + 0, x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["Active"]);
              A.store.Ref(ptr + 52 + 32 + 0 + 4, x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["Effective"]);
              A.store.Ref(ptr + 52 + 32 + 0 + 8, x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserPolicy"]);
              A.store.Ref(ptr + 52 + 32 + 0 + 12, x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["DevicePolicy"]);
              A.store.Ref(ptr + 52 + 32 + 0 + 16, x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserSetting"]);
              A.store.Ref(ptr + 52 + 32 + 0 + 20, x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["SharedSetting"]);
              A.store.Bool(
                ptr + 52 + 32 + 0 + 26,
                "UserEditable" in x["EAP"]["ClientCertPattern"]["EnrollmentURI"] ? true : false
              );
              A.store.Bool(
                ptr + 52 + 32 + 0 + 24,
                x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 52 + 32 + 0 + 27,
                "DeviceEditable" in x["EAP"]["ClientCertPattern"]["EnrollmentURI"] ? true : false
              );
              A.store.Bool(
                ptr + 52 + 32 + 0 + 25,
                x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["EAP"]["ClientCertPattern"]["Issuer"] === "undefined") {
              A.store.Bool(ptr + 52 + 32 + 32 + 125, false);

              A.store.Bool(ptr + 52 + 32 + 32 + 0 + 28, false);
              A.store.Ref(ptr + 52 + 32 + 32 + 0 + 0, undefined);
              A.store.Ref(ptr + 52 + 32 + 32 + 0 + 4, undefined);
              A.store.Ref(ptr + 52 + 32 + 32 + 0 + 8, undefined);
              A.store.Ref(ptr + 52 + 32 + 32 + 0 + 12, undefined);
              A.store.Ref(ptr + 52 + 32 + 32 + 0 + 16, undefined);
              A.store.Ref(ptr + 52 + 32 + 32 + 0 + 20, undefined);
              A.store.Bool(ptr + 52 + 32 + 32 + 0 + 26, false);
              A.store.Bool(ptr + 52 + 32 + 32 + 0 + 24, false);
              A.store.Bool(ptr + 52 + 32 + 32 + 0 + 27, false);
              A.store.Bool(ptr + 52 + 32 + 32 + 0 + 25, false);

              A.store.Bool(ptr + 52 + 32 + 32 + 32 + 28, false);
              A.store.Ref(ptr + 52 + 32 + 32 + 32 + 0, undefined);
              A.store.Ref(ptr + 52 + 32 + 32 + 32 + 4, undefined);
              A.store.Ref(ptr + 52 + 32 + 32 + 32 + 8, undefined);
              A.store.Ref(ptr + 52 + 32 + 32 + 32 + 12, undefined);
              A.store.Ref(ptr + 52 + 32 + 32 + 32 + 16, undefined);
              A.store.Ref(ptr + 52 + 32 + 32 + 32 + 20, undefined);
              A.store.Bool(ptr + 52 + 32 + 32 + 32 + 26, false);
              A.store.Bool(ptr + 52 + 32 + 32 + 32 + 24, false);
              A.store.Bool(ptr + 52 + 32 + 32 + 32 + 27, false);
              A.store.Bool(ptr + 52 + 32 + 32 + 32 + 25, false);

              A.store.Bool(ptr + 52 + 32 + 32 + 64 + 28, false);
              A.store.Ref(ptr + 52 + 32 + 32 + 64 + 0, undefined);
              A.store.Ref(ptr + 52 + 32 + 32 + 64 + 4, undefined);
              A.store.Ref(ptr + 52 + 32 + 32 + 64 + 8, undefined);
              A.store.Ref(ptr + 52 + 32 + 32 + 64 + 12, undefined);
              A.store.Ref(ptr + 52 + 32 + 32 + 64 + 16, undefined);
              A.store.Ref(ptr + 52 + 32 + 32 + 64 + 20, undefined);
              A.store.Bool(ptr + 52 + 32 + 32 + 64 + 26, false);
              A.store.Bool(ptr + 52 + 32 + 32 + 64 + 24, false);
              A.store.Bool(ptr + 52 + 32 + 32 + 64 + 27, false);
              A.store.Bool(ptr + 52 + 32 + 32 + 64 + 25, false);

              A.store.Bool(ptr + 52 + 32 + 32 + 96 + 28, false);
              A.store.Ref(ptr + 52 + 32 + 32 + 96 + 0, undefined);
              A.store.Ref(ptr + 52 + 32 + 32 + 96 + 4, undefined);
              A.store.Ref(ptr + 52 + 32 + 32 + 96 + 8, undefined);
              A.store.Ref(ptr + 52 + 32 + 32 + 96 + 12, undefined);
              A.store.Ref(ptr + 52 + 32 + 32 + 96 + 16, undefined);
              A.store.Ref(ptr + 52 + 32 + 32 + 96 + 20, undefined);
              A.store.Bool(ptr + 52 + 32 + 32 + 96 + 26, false);
              A.store.Bool(ptr + 52 + 32 + 32 + 96 + 24, false);
              A.store.Bool(ptr + 52 + 32 + 32 + 96 + 27, false);
              A.store.Bool(ptr + 52 + 32 + 32 + 96 + 25, false);
            } else {
              A.store.Bool(ptr + 52 + 32 + 32 + 125, true);

              if (typeof x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] === "undefined") {
                A.store.Bool(ptr + 52 + 32 + 32 + 0 + 28, false);
                A.store.Ref(ptr + 52 + 32 + 32 + 0 + 0, undefined);
                A.store.Ref(ptr + 52 + 32 + 32 + 0 + 4, undefined);
                A.store.Ref(ptr + 52 + 32 + 32 + 0 + 8, undefined);
                A.store.Ref(ptr + 52 + 32 + 32 + 0 + 12, undefined);
                A.store.Ref(ptr + 52 + 32 + 32 + 0 + 16, undefined);
                A.store.Ref(ptr + 52 + 32 + 32 + 0 + 20, undefined);
                A.store.Bool(ptr + 52 + 32 + 32 + 0 + 26, false);
                A.store.Bool(ptr + 52 + 32 + 32 + 0 + 24, false);
                A.store.Bool(ptr + 52 + 32 + 32 + 0 + 27, false);
                A.store.Bool(ptr + 52 + 32 + 32 + 0 + 25, false);
              } else {
                A.store.Bool(ptr + 52 + 32 + 32 + 0 + 28, true);
                A.store.Ref(
                  ptr + 52 + 32 + 32 + 0 + 0,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["Active"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 32 + 0 + 4,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["Effective"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 32 + 0 + 8,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 32 + 0 + 12,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 32 + 0 + 16,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 32 + 0 + 20,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 52 + 32 + 32 + 0 + 26,
                  "UserEditable" in x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] ? true : false
                );
                A.store.Bool(
                  ptr + 52 + 32 + 32 + 0 + 24,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 52 + 32 + 32 + 0 + 27,
                  "DeviceEditable" in x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] ? true : false
                );
                A.store.Bool(
                  ptr + 52 + 32 + 32 + 0 + 25,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] === "undefined") {
                A.store.Bool(ptr + 52 + 32 + 32 + 32 + 28, false);
                A.store.Ref(ptr + 52 + 32 + 32 + 32 + 0, undefined);
                A.store.Ref(ptr + 52 + 32 + 32 + 32 + 4, undefined);
                A.store.Ref(ptr + 52 + 32 + 32 + 32 + 8, undefined);
                A.store.Ref(ptr + 52 + 32 + 32 + 32 + 12, undefined);
                A.store.Ref(ptr + 52 + 32 + 32 + 32 + 16, undefined);
                A.store.Ref(ptr + 52 + 32 + 32 + 32 + 20, undefined);
                A.store.Bool(ptr + 52 + 32 + 32 + 32 + 26, false);
                A.store.Bool(ptr + 52 + 32 + 32 + 32 + 24, false);
                A.store.Bool(ptr + 52 + 32 + 32 + 32 + 27, false);
                A.store.Bool(ptr + 52 + 32 + 32 + 32 + 25, false);
              } else {
                A.store.Bool(ptr + 52 + 32 + 32 + 32 + 28, true);
                A.store.Ref(ptr + 52 + 32 + 32 + 32 + 0, x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["Active"]);
                A.store.Ref(
                  ptr + 52 + 32 + 32 + 32 + 4,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["Effective"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 32 + 32 + 8,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 32 + 32 + 12,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 32 + 32 + 16,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 32 + 32 + 20,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 52 + 32 + 32 + 32 + 26,
                  "UserEditable" in x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] ? true : false
                );
                A.store.Bool(
                  ptr + 52 + 32 + 32 + 32 + 24,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 52 + 32 + 32 + 32 + 27,
                  "DeviceEditable" in x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] ? true : false
                );
                A.store.Bool(
                  ptr + 52 + 32 + 32 + 32 + 25,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] === "undefined") {
                A.store.Bool(ptr + 52 + 32 + 32 + 64 + 28, false);
                A.store.Ref(ptr + 52 + 32 + 32 + 64 + 0, undefined);
                A.store.Ref(ptr + 52 + 32 + 32 + 64 + 4, undefined);
                A.store.Ref(ptr + 52 + 32 + 32 + 64 + 8, undefined);
                A.store.Ref(ptr + 52 + 32 + 32 + 64 + 12, undefined);
                A.store.Ref(ptr + 52 + 32 + 32 + 64 + 16, undefined);
                A.store.Ref(ptr + 52 + 32 + 32 + 64 + 20, undefined);
                A.store.Bool(ptr + 52 + 32 + 32 + 64 + 26, false);
                A.store.Bool(ptr + 52 + 32 + 32 + 64 + 24, false);
                A.store.Bool(ptr + 52 + 32 + 32 + 64 + 27, false);
                A.store.Bool(ptr + 52 + 32 + 32 + 64 + 25, false);
              } else {
                A.store.Bool(ptr + 52 + 32 + 32 + 64 + 28, true);
                A.store.Ref(
                  ptr + 52 + 32 + 32 + 64 + 0,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["Active"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 32 + 64 + 4,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["Effective"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 32 + 64 + 8,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 32 + 64 + 12,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 32 + 64 + 16,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 32 + 64 + 20,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 52 + 32 + 32 + 64 + 26,
                  "UserEditable" in x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] ? true : false
                );
                A.store.Bool(
                  ptr + 52 + 32 + 32 + 64 + 24,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 52 + 32 + 32 + 64 + 27,
                  "DeviceEditable" in x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] ? true : false
                );
                A.store.Bool(
                  ptr + 52 + 32 + 32 + 64 + 25,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] === "undefined") {
                A.store.Bool(ptr + 52 + 32 + 32 + 96 + 28, false);
                A.store.Ref(ptr + 52 + 32 + 32 + 96 + 0, undefined);
                A.store.Ref(ptr + 52 + 32 + 32 + 96 + 4, undefined);
                A.store.Ref(ptr + 52 + 32 + 32 + 96 + 8, undefined);
                A.store.Ref(ptr + 52 + 32 + 32 + 96 + 12, undefined);
                A.store.Ref(ptr + 52 + 32 + 32 + 96 + 16, undefined);
                A.store.Ref(ptr + 52 + 32 + 32 + 96 + 20, undefined);
                A.store.Bool(ptr + 52 + 32 + 32 + 96 + 26, false);
                A.store.Bool(ptr + 52 + 32 + 32 + 96 + 24, false);
                A.store.Bool(ptr + 52 + 32 + 32 + 96 + 27, false);
                A.store.Bool(ptr + 52 + 32 + 32 + 96 + 25, false);
              } else {
                A.store.Bool(ptr + 52 + 32 + 32 + 96 + 28, true);
                A.store.Ref(
                  ptr + 52 + 32 + 32 + 96 + 0,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Active"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 32 + 96 + 4,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Effective"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 32 + 96 + 8,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 32 + 96 + 12,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 32 + 96 + 16,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 32 + 96 + 20,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 52 + 32 + 32 + 96 + 26,
                  "UserEditable" in x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] ? true : false
                );
                A.store.Bool(
                  ptr + 52 + 32 + 32 + 96 + 24,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 52 + 32 + 32 + 96 + 27,
                  "DeviceEditable" in x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] ? true : false
                );
                A.store.Bool(
                  ptr + 52 + 32 + 32 + 96 + 25,
                  x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"] ? true : false
                );
              }
            }

            if (typeof x["EAP"]["ClientCertPattern"]["IssuerCARef"] === "undefined") {
              A.store.Bool(ptr + 52 + 32 + 160 + 28, false);
              A.store.Ref(ptr + 52 + 32 + 160 + 0, undefined);
              A.store.Ref(ptr + 52 + 32 + 160 + 4, undefined);
              A.store.Ref(ptr + 52 + 32 + 160 + 8, undefined);
              A.store.Ref(ptr + 52 + 32 + 160 + 12, undefined);
              A.store.Ref(ptr + 52 + 32 + 160 + 16, undefined);
              A.store.Ref(ptr + 52 + 32 + 160 + 20, undefined);
              A.store.Bool(ptr + 52 + 32 + 160 + 26, false);
              A.store.Bool(ptr + 52 + 32 + 160 + 24, false);
              A.store.Bool(ptr + 52 + 32 + 160 + 27, false);
              A.store.Bool(ptr + 52 + 32 + 160 + 25, false);
            } else {
              A.store.Bool(ptr + 52 + 32 + 160 + 28, true);
              A.store.Ref(ptr + 52 + 32 + 160 + 0, x["EAP"]["ClientCertPattern"]["IssuerCARef"]["Active"]);
              A.store.Ref(ptr + 52 + 32 + 160 + 4, x["EAP"]["ClientCertPattern"]["IssuerCARef"]["Effective"]);
              A.store.Ref(ptr + 52 + 32 + 160 + 8, x["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserPolicy"]);
              A.store.Ref(ptr + 52 + 32 + 160 + 12, x["EAP"]["ClientCertPattern"]["IssuerCARef"]["DevicePolicy"]);
              A.store.Ref(ptr + 52 + 32 + 160 + 16, x["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserSetting"]);
              A.store.Ref(ptr + 52 + 32 + 160 + 20, x["EAP"]["ClientCertPattern"]["IssuerCARef"]["SharedSetting"]);
              A.store.Bool(
                ptr + 52 + 32 + 160 + 26,
                "UserEditable" in x["EAP"]["ClientCertPattern"]["IssuerCARef"] ? true : false
              );
              A.store.Bool(
                ptr + 52 + 32 + 160 + 24,
                x["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 52 + 32 + 160 + 27,
                "DeviceEditable" in x["EAP"]["ClientCertPattern"]["IssuerCARef"] ? true : false
              );
              A.store.Bool(
                ptr + 52 + 32 + 160 + 25,
                x["EAP"]["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["EAP"]["ClientCertPattern"]["Subject"] === "undefined") {
              A.store.Bool(ptr + 52 + 32 + 192 + 125, false);

              A.store.Bool(ptr + 52 + 32 + 192 + 0 + 28, false);
              A.store.Ref(ptr + 52 + 32 + 192 + 0 + 0, undefined);
              A.store.Ref(ptr + 52 + 32 + 192 + 0 + 4, undefined);
              A.store.Ref(ptr + 52 + 32 + 192 + 0 + 8, undefined);
              A.store.Ref(ptr + 52 + 32 + 192 + 0 + 12, undefined);
              A.store.Ref(ptr + 52 + 32 + 192 + 0 + 16, undefined);
              A.store.Ref(ptr + 52 + 32 + 192 + 0 + 20, undefined);
              A.store.Bool(ptr + 52 + 32 + 192 + 0 + 26, false);
              A.store.Bool(ptr + 52 + 32 + 192 + 0 + 24, false);
              A.store.Bool(ptr + 52 + 32 + 192 + 0 + 27, false);
              A.store.Bool(ptr + 52 + 32 + 192 + 0 + 25, false);

              A.store.Bool(ptr + 52 + 32 + 192 + 32 + 28, false);
              A.store.Ref(ptr + 52 + 32 + 192 + 32 + 0, undefined);
              A.store.Ref(ptr + 52 + 32 + 192 + 32 + 4, undefined);
              A.store.Ref(ptr + 52 + 32 + 192 + 32 + 8, undefined);
              A.store.Ref(ptr + 52 + 32 + 192 + 32 + 12, undefined);
              A.store.Ref(ptr + 52 + 32 + 192 + 32 + 16, undefined);
              A.store.Ref(ptr + 52 + 32 + 192 + 32 + 20, undefined);
              A.store.Bool(ptr + 52 + 32 + 192 + 32 + 26, false);
              A.store.Bool(ptr + 52 + 32 + 192 + 32 + 24, false);
              A.store.Bool(ptr + 52 + 32 + 192 + 32 + 27, false);
              A.store.Bool(ptr + 52 + 32 + 192 + 32 + 25, false);

              A.store.Bool(ptr + 52 + 32 + 192 + 64 + 28, false);
              A.store.Ref(ptr + 52 + 32 + 192 + 64 + 0, undefined);
              A.store.Ref(ptr + 52 + 32 + 192 + 64 + 4, undefined);
              A.store.Ref(ptr + 52 + 32 + 192 + 64 + 8, undefined);
              A.store.Ref(ptr + 52 + 32 + 192 + 64 + 12, undefined);
              A.store.Ref(ptr + 52 + 32 + 192 + 64 + 16, undefined);
              A.store.Ref(ptr + 52 + 32 + 192 + 64 + 20, undefined);
              A.store.Bool(ptr + 52 + 32 + 192 + 64 + 26, false);
              A.store.Bool(ptr + 52 + 32 + 192 + 64 + 24, false);
              A.store.Bool(ptr + 52 + 32 + 192 + 64 + 27, false);
              A.store.Bool(ptr + 52 + 32 + 192 + 64 + 25, false);

              A.store.Bool(ptr + 52 + 32 + 192 + 96 + 28, false);
              A.store.Ref(ptr + 52 + 32 + 192 + 96 + 0, undefined);
              A.store.Ref(ptr + 52 + 32 + 192 + 96 + 4, undefined);
              A.store.Ref(ptr + 52 + 32 + 192 + 96 + 8, undefined);
              A.store.Ref(ptr + 52 + 32 + 192 + 96 + 12, undefined);
              A.store.Ref(ptr + 52 + 32 + 192 + 96 + 16, undefined);
              A.store.Ref(ptr + 52 + 32 + 192 + 96 + 20, undefined);
              A.store.Bool(ptr + 52 + 32 + 192 + 96 + 26, false);
              A.store.Bool(ptr + 52 + 32 + 192 + 96 + 24, false);
              A.store.Bool(ptr + 52 + 32 + 192 + 96 + 27, false);
              A.store.Bool(ptr + 52 + 32 + 192 + 96 + 25, false);
            } else {
              A.store.Bool(ptr + 52 + 32 + 192 + 125, true);

              if (typeof x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] === "undefined") {
                A.store.Bool(ptr + 52 + 32 + 192 + 0 + 28, false);
                A.store.Ref(ptr + 52 + 32 + 192 + 0 + 0, undefined);
                A.store.Ref(ptr + 52 + 32 + 192 + 0 + 4, undefined);
                A.store.Ref(ptr + 52 + 32 + 192 + 0 + 8, undefined);
                A.store.Ref(ptr + 52 + 32 + 192 + 0 + 12, undefined);
                A.store.Ref(ptr + 52 + 32 + 192 + 0 + 16, undefined);
                A.store.Ref(ptr + 52 + 32 + 192 + 0 + 20, undefined);
                A.store.Bool(ptr + 52 + 32 + 192 + 0 + 26, false);
                A.store.Bool(ptr + 52 + 32 + 192 + 0 + 24, false);
                A.store.Bool(ptr + 52 + 32 + 192 + 0 + 27, false);
                A.store.Bool(ptr + 52 + 32 + 192 + 0 + 25, false);
              } else {
                A.store.Bool(ptr + 52 + 32 + 192 + 0 + 28, true);
                A.store.Ref(
                  ptr + 52 + 32 + 192 + 0 + 0,
                  x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["Active"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 192 + 0 + 4,
                  x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["Effective"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 192 + 0 + 8,
                  x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 192 + 0 + 12,
                  x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 192 + 0 + 16,
                  x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 192 + 0 + 20,
                  x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 52 + 32 + 192 + 0 + 26,
                  "UserEditable" in x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] ? true : false
                );
                A.store.Bool(
                  ptr + 52 + 32 + 192 + 0 + 24,
                  x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 52 + 32 + 192 + 0 + 27,
                  "DeviceEditable" in x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] ? true : false
                );
                A.store.Bool(
                  ptr + 52 + 32 + 192 + 0 + 25,
                  x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["EAP"]["ClientCertPattern"]["Subject"]["Locality"] === "undefined") {
                A.store.Bool(ptr + 52 + 32 + 192 + 32 + 28, false);
                A.store.Ref(ptr + 52 + 32 + 192 + 32 + 0, undefined);
                A.store.Ref(ptr + 52 + 32 + 192 + 32 + 4, undefined);
                A.store.Ref(ptr + 52 + 32 + 192 + 32 + 8, undefined);
                A.store.Ref(ptr + 52 + 32 + 192 + 32 + 12, undefined);
                A.store.Ref(ptr + 52 + 32 + 192 + 32 + 16, undefined);
                A.store.Ref(ptr + 52 + 32 + 192 + 32 + 20, undefined);
                A.store.Bool(ptr + 52 + 32 + 192 + 32 + 26, false);
                A.store.Bool(ptr + 52 + 32 + 192 + 32 + 24, false);
                A.store.Bool(ptr + 52 + 32 + 192 + 32 + 27, false);
                A.store.Bool(ptr + 52 + 32 + 192 + 32 + 25, false);
              } else {
                A.store.Bool(ptr + 52 + 32 + 192 + 32 + 28, true);
                A.store.Ref(
                  ptr + 52 + 32 + 192 + 32 + 0,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["Active"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 192 + 32 + 4,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["Effective"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 192 + 32 + 8,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 192 + 32 + 12,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 192 + 32 + 16,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 192 + 32 + 20,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 52 + 32 + 192 + 32 + 26,
                  "UserEditable" in x["EAP"]["ClientCertPattern"]["Subject"]["Locality"] ? true : false
                );
                A.store.Bool(
                  ptr + 52 + 32 + 192 + 32 + 24,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 52 + 32 + 192 + 32 + 27,
                  "DeviceEditable" in x["EAP"]["ClientCertPattern"]["Subject"]["Locality"] ? true : false
                );
                A.store.Bool(
                  ptr + 52 + 32 + 192 + 32 + 25,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["EAP"]["ClientCertPattern"]["Subject"]["Organization"] === "undefined") {
                A.store.Bool(ptr + 52 + 32 + 192 + 64 + 28, false);
                A.store.Ref(ptr + 52 + 32 + 192 + 64 + 0, undefined);
                A.store.Ref(ptr + 52 + 32 + 192 + 64 + 4, undefined);
                A.store.Ref(ptr + 52 + 32 + 192 + 64 + 8, undefined);
                A.store.Ref(ptr + 52 + 32 + 192 + 64 + 12, undefined);
                A.store.Ref(ptr + 52 + 32 + 192 + 64 + 16, undefined);
                A.store.Ref(ptr + 52 + 32 + 192 + 64 + 20, undefined);
                A.store.Bool(ptr + 52 + 32 + 192 + 64 + 26, false);
                A.store.Bool(ptr + 52 + 32 + 192 + 64 + 24, false);
                A.store.Bool(ptr + 52 + 32 + 192 + 64 + 27, false);
                A.store.Bool(ptr + 52 + 32 + 192 + 64 + 25, false);
              } else {
                A.store.Bool(ptr + 52 + 32 + 192 + 64 + 28, true);
                A.store.Ref(
                  ptr + 52 + 32 + 192 + 64 + 0,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["Active"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 192 + 64 + 4,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["Effective"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 192 + 64 + 8,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 192 + 64 + 12,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 192 + 64 + 16,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 192 + 64 + 20,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 52 + 32 + 192 + 64 + 26,
                  "UserEditable" in x["EAP"]["ClientCertPattern"]["Subject"]["Organization"] ? true : false
                );
                A.store.Bool(
                  ptr + 52 + 32 + 192 + 64 + 24,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 52 + 32 + 192 + 64 + 27,
                  "DeviceEditable" in x["EAP"]["ClientCertPattern"]["Subject"]["Organization"] ? true : false
                );
                A.store.Bool(
                  ptr + 52 + 32 + 192 + 64 + 25,
                  x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] === "undefined") {
                A.store.Bool(ptr + 52 + 32 + 192 + 96 + 28, false);
                A.store.Ref(ptr + 52 + 32 + 192 + 96 + 0, undefined);
                A.store.Ref(ptr + 52 + 32 + 192 + 96 + 4, undefined);
                A.store.Ref(ptr + 52 + 32 + 192 + 96 + 8, undefined);
                A.store.Ref(ptr + 52 + 32 + 192 + 96 + 12, undefined);
                A.store.Ref(ptr + 52 + 32 + 192 + 96 + 16, undefined);
                A.store.Ref(ptr + 52 + 32 + 192 + 96 + 20, undefined);
                A.store.Bool(ptr + 52 + 32 + 192 + 96 + 26, false);
                A.store.Bool(ptr + 52 + 32 + 192 + 96 + 24, false);
                A.store.Bool(ptr + 52 + 32 + 192 + 96 + 27, false);
                A.store.Bool(ptr + 52 + 32 + 192 + 96 + 25, false);
              } else {
                A.store.Bool(ptr + 52 + 32 + 192 + 96 + 28, true);
                A.store.Ref(
                  ptr + 52 + 32 + 192 + 96 + 0,
                  x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Active"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 192 + 96 + 4,
                  x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Effective"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 192 + 96 + 8,
                  x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 192 + 96 + 12,
                  x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 192 + 96 + 16,
                  x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 52 + 32 + 192 + 96 + 20,
                  x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 52 + 32 + 192 + 96 + 26,
                  "UserEditable" in x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] ? true : false
                );
                A.store.Bool(
                  ptr + 52 + 32 + 192 + 96 + 24,
                  x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 52 + 32 + 192 + 96 + 27,
                  "DeviceEditable" in x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] ? true : false
                );
                A.store.Bool(
                  ptr + 52 + 32 + 192 + 96 + 25,
                  x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"] ? true : false
                );
              }
            }
          }

          if (typeof x["EAP"]["ClientCertPKCS11Id"] === "undefined") {
            A.store.Bool(ptr + 52 + 352 + 28, false);
            A.store.Ref(ptr + 52 + 352 + 0, undefined);
            A.store.Ref(ptr + 52 + 352 + 4, undefined);
            A.store.Ref(ptr + 52 + 352 + 8, undefined);
            A.store.Ref(ptr + 52 + 352 + 12, undefined);
            A.store.Ref(ptr + 52 + 352 + 16, undefined);
            A.store.Ref(ptr + 52 + 352 + 20, undefined);
            A.store.Bool(ptr + 52 + 352 + 26, false);
            A.store.Bool(ptr + 52 + 352 + 24, false);
            A.store.Bool(ptr + 52 + 352 + 27, false);
            A.store.Bool(ptr + 52 + 352 + 25, false);
          } else {
            A.store.Bool(ptr + 52 + 352 + 28, true);
            A.store.Ref(ptr + 52 + 352 + 0, x["EAP"]["ClientCertPKCS11Id"]["Active"]);
            A.store.Ref(ptr + 52 + 352 + 4, x["EAP"]["ClientCertPKCS11Id"]["Effective"]);
            A.store.Ref(ptr + 52 + 352 + 8, x["EAP"]["ClientCertPKCS11Id"]["UserPolicy"]);
            A.store.Ref(ptr + 52 + 352 + 12, x["EAP"]["ClientCertPKCS11Id"]["DevicePolicy"]);
            A.store.Ref(ptr + 52 + 352 + 16, x["EAP"]["ClientCertPKCS11Id"]["UserSetting"]);
            A.store.Ref(ptr + 52 + 352 + 20, x["EAP"]["ClientCertPKCS11Id"]["SharedSetting"]);
            A.store.Bool(ptr + 52 + 352 + 26, "UserEditable" in x["EAP"]["ClientCertPKCS11Id"] ? true : false);
            A.store.Bool(ptr + 52 + 352 + 24, x["EAP"]["ClientCertPKCS11Id"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 52 + 352 + 27, "DeviceEditable" in x["EAP"]["ClientCertPKCS11Id"] ? true : false);
            A.store.Bool(ptr + 52 + 352 + 25, x["EAP"]["ClientCertPKCS11Id"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["ClientCertProvisioningProfileId"] === "undefined") {
            A.store.Bool(ptr + 52 + 384 + 28, false);
            A.store.Ref(ptr + 52 + 384 + 0, undefined);
            A.store.Ref(ptr + 52 + 384 + 4, undefined);
            A.store.Ref(ptr + 52 + 384 + 8, undefined);
            A.store.Ref(ptr + 52 + 384 + 12, undefined);
            A.store.Ref(ptr + 52 + 384 + 16, undefined);
            A.store.Ref(ptr + 52 + 384 + 20, undefined);
            A.store.Bool(ptr + 52 + 384 + 26, false);
            A.store.Bool(ptr + 52 + 384 + 24, false);
            A.store.Bool(ptr + 52 + 384 + 27, false);
            A.store.Bool(ptr + 52 + 384 + 25, false);
          } else {
            A.store.Bool(ptr + 52 + 384 + 28, true);
            A.store.Ref(ptr + 52 + 384 + 0, x["EAP"]["ClientCertProvisioningProfileId"]["Active"]);
            A.store.Ref(ptr + 52 + 384 + 4, x["EAP"]["ClientCertProvisioningProfileId"]["Effective"]);
            A.store.Ref(ptr + 52 + 384 + 8, x["EAP"]["ClientCertProvisioningProfileId"]["UserPolicy"]);
            A.store.Ref(ptr + 52 + 384 + 12, x["EAP"]["ClientCertProvisioningProfileId"]["DevicePolicy"]);
            A.store.Ref(ptr + 52 + 384 + 16, x["EAP"]["ClientCertProvisioningProfileId"]["UserSetting"]);
            A.store.Ref(ptr + 52 + 384 + 20, x["EAP"]["ClientCertProvisioningProfileId"]["SharedSetting"]);
            A.store.Bool(
              ptr + 52 + 384 + 26,
              "UserEditable" in x["EAP"]["ClientCertProvisioningProfileId"] ? true : false
            );
            A.store.Bool(
              ptr + 52 + 384 + 24,
              x["EAP"]["ClientCertProvisioningProfileId"]["UserEditable"] ? true : false
            );
            A.store.Bool(
              ptr + 52 + 384 + 27,
              "DeviceEditable" in x["EAP"]["ClientCertProvisioningProfileId"] ? true : false
            );
            A.store.Bool(
              ptr + 52 + 384 + 25,
              x["EAP"]["ClientCertProvisioningProfileId"]["DeviceEditable"] ? true : false
            );
          }

          if (typeof x["EAP"]["ClientCertRef"] === "undefined") {
            A.store.Bool(ptr + 52 + 416 + 28, false);
            A.store.Ref(ptr + 52 + 416 + 0, undefined);
            A.store.Ref(ptr + 52 + 416 + 4, undefined);
            A.store.Ref(ptr + 52 + 416 + 8, undefined);
            A.store.Ref(ptr + 52 + 416 + 12, undefined);
            A.store.Ref(ptr + 52 + 416 + 16, undefined);
            A.store.Ref(ptr + 52 + 416 + 20, undefined);
            A.store.Bool(ptr + 52 + 416 + 26, false);
            A.store.Bool(ptr + 52 + 416 + 24, false);
            A.store.Bool(ptr + 52 + 416 + 27, false);
            A.store.Bool(ptr + 52 + 416 + 25, false);
          } else {
            A.store.Bool(ptr + 52 + 416 + 28, true);
            A.store.Ref(ptr + 52 + 416 + 0, x["EAP"]["ClientCertRef"]["Active"]);
            A.store.Ref(ptr + 52 + 416 + 4, x["EAP"]["ClientCertRef"]["Effective"]);
            A.store.Ref(ptr + 52 + 416 + 8, x["EAP"]["ClientCertRef"]["UserPolicy"]);
            A.store.Ref(ptr + 52 + 416 + 12, x["EAP"]["ClientCertRef"]["DevicePolicy"]);
            A.store.Ref(ptr + 52 + 416 + 16, x["EAP"]["ClientCertRef"]["UserSetting"]);
            A.store.Ref(ptr + 52 + 416 + 20, x["EAP"]["ClientCertRef"]["SharedSetting"]);
            A.store.Bool(ptr + 52 + 416 + 26, "UserEditable" in x["EAP"]["ClientCertRef"] ? true : false);
            A.store.Bool(ptr + 52 + 416 + 24, x["EAP"]["ClientCertRef"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 52 + 416 + 27, "DeviceEditable" in x["EAP"]["ClientCertRef"] ? true : false);
            A.store.Bool(ptr + 52 + 416 + 25, x["EAP"]["ClientCertRef"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["ClientCertType"] === "undefined") {
            A.store.Bool(ptr + 52 + 448 + 28, false);
            A.store.Ref(ptr + 52 + 448 + 0, undefined);
            A.store.Ref(ptr + 52 + 448 + 4, undefined);
            A.store.Ref(ptr + 52 + 448 + 8, undefined);
            A.store.Ref(ptr + 52 + 448 + 12, undefined);
            A.store.Ref(ptr + 52 + 448 + 16, undefined);
            A.store.Ref(ptr + 52 + 448 + 20, undefined);
            A.store.Bool(ptr + 52 + 448 + 26, false);
            A.store.Bool(ptr + 52 + 448 + 24, false);
            A.store.Bool(ptr + 52 + 448 + 27, false);
            A.store.Bool(ptr + 52 + 448 + 25, false);
          } else {
            A.store.Bool(ptr + 52 + 448 + 28, true);
            A.store.Ref(ptr + 52 + 448 + 0, x["EAP"]["ClientCertType"]["Active"]);
            A.store.Ref(ptr + 52 + 448 + 4, x["EAP"]["ClientCertType"]["Effective"]);
            A.store.Ref(ptr + 52 + 448 + 8, x["EAP"]["ClientCertType"]["UserPolicy"]);
            A.store.Ref(ptr + 52 + 448 + 12, x["EAP"]["ClientCertType"]["DevicePolicy"]);
            A.store.Ref(ptr + 52 + 448 + 16, x["EAP"]["ClientCertType"]["UserSetting"]);
            A.store.Ref(ptr + 52 + 448 + 20, x["EAP"]["ClientCertType"]["SharedSetting"]);
            A.store.Bool(ptr + 52 + 448 + 26, "UserEditable" in x["EAP"]["ClientCertType"] ? true : false);
            A.store.Bool(ptr + 52 + 448 + 24, x["EAP"]["ClientCertType"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 52 + 448 + 27, "DeviceEditable" in x["EAP"]["ClientCertType"] ? true : false);
            A.store.Bool(ptr + 52 + 448 + 25, x["EAP"]["ClientCertType"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["Identity"] === "undefined") {
            A.store.Bool(ptr + 52 + 480 + 28, false);
            A.store.Ref(ptr + 52 + 480 + 0, undefined);
            A.store.Ref(ptr + 52 + 480 + 4, undefined);
            A.store.Ref(ptr + 52 + 480 + 8, undefined);
            A.store.Ref(ptr + 52 + 480 + 12, undefined);
            A.store.Ref(ptr + 52 + 480 + 16, undefined);
            A.store.Ref(ptr + 52 + 480 + 20, undefined);
            A.store.Bool(ptr + 52 + 480 + 26, false);
            A.store.Bool(ptr + 52 + 480 + 24, false);
            A.store.Bool(ptr + 52 + 480 + 27, false);
            A.store.Bool(ptr + 52 + 480 + 25, false);
          } else {
            A.store.Bool(ptr + 52 + 480 + 28, true);
            A.store.Ref(ptr + 52 + 480 + 0, x["EAP"]["Identity"]["Active"]);
            A.store.Ref(ptr + 52 + 480 + 4, x["EAP"]["Identity"]["Effective"]);
            A.store.Ref(ptr + 52 + 480 + 8, x["EAP"]["Identity"]["UserPolicy"]);
            A.store.Ref(ptr + 52 + 480 + 12, x["EAP"]["Identity"]["DevicePolicy"]);
            A.store.Ref(ptr + 52 + 480 + 16, x["EAP"]["Identity"]["UserSetting"]);
            A.store.Ref(ptr + 52 + 480 + 20, x["EAP"]["Identity"]["SharedSetting"]);
            A.store.Bool(ptr + 52 + 480 + 26, "UserEditable" in x["EAP"]["Identity"] ? true : false);
            A.store.Bool(ptr + 52 + 480 + 24, x["EAP"]["Identity"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 52 + 480 + 27, "DeviceEditable" in x["EAP"]["Identity"] ? true : false);
            A.store.Bool(ptr + 52 + 480 + 25, x["EAP"]["Identity"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["Inner"] === "undefined") {
            A.store.Bool(ptr + 52 + 512 + 28, false);
            A.store.Ref(ptr + 52 + 512 + 0, undefined);
            A.store.Ref(ptr + 52 + 512 + 4, undefined);
            A.store.Ref(ptr + 52 + 512 + 8, undefined);
            A.store.Ref(ptr + 52 + 512 + 12, undefined);
            A.store.Ref(ptr + 52 + 512 + 16, undefined);
            A.store.Ref(ptr + 52 + 512 + 20, undefined);
            A.store.Bool(ptr + 52 + 512 + 26, false);
            A.store.Bool(ptr + 52 + 512 + 24, false);
            A.store.Bool(ptr + 52 + 512 + 27, false);
            A.store.Bool(ptr + 52 + 512 + 25, false);
          } else {
            A.store.Bool(ptr + 52 + 512 + 28, true);
            A.store.Ref(ptr + 52 + 512 + 0, x["EAP"]["Inner"]["Active"]);
            A.store.Ref(ptr + 52 + 512 + 4, x["EAP"]["Inner"]["Effective"]);
            A.store.Ref(ptr + 52 + 512 + 8, x["EAP"]["Inner"]["UserPolicy"]);
            A.store.Ref(ptr + 52 + 512 + 12, x["EAP"]["Inner"]["DevicePolicy"]);
            A.store.Ref(ptr + 52 + 512 + 16, x["EAP"]["Inner"]["UserSetting"]);
            A.store.Ref(ptr + 52 + 512 + 20, x["EAP"]["Inner"]["SharedSetting"]);
            A.store.Bool(ptr + 52 + 512 + 26, "UserEditable" in x["EAP"]["Inner"] ? true : false);
            A.store.Bool(ptr + 52 + 512 + 24, x["EAP"]["Inner"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 52 + 512 + 27, "DeviceEditable" in x["EAP"]["Inner"] ? true : false);
            A.store.Bool(ptr + 52 + 512 + 25, x["EAP"]["Inner"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["Outer"] === "undefined") {
            A.store.Bool(ptr + 52 + 544 + 28, false);
            A.store.Ref(ptr + 52 + 544 + 0, undefined);
            A.store.Ref(ptr + 52 + 544 + 4, undefined);
            A.store.Ref(ptr + 52 + 544 + 8, undefined);
            A.store.Ref(ptr + 52 + 544 + 12, undefined);
            A.store.Ref(ptr + 52 + 544 + 16, undefined);
            A.store.Ref(ptr + 52 + 544 + 20, undefined);
            A.store.Bool(ptr + 52 + 544 + 26, false);
            A.store.Bool(ptr + 52 + 544 + 24, false);
            A.store.Bool(ptr + 52 + 544 + 27, false);
            A.store.Bool(ptr + 52 + 544 + 25, false);
          } else {
            A.store.Bool(ptr + 52 + 544 + 28, true);
            A.store.Ref(ptr + 52 + 544 + 0, x["EAP"]["Outer"]["Active"]);
            A.store.Ref(ptr + 52 + 544 + 4, x["EAP"]["Outer"]["Effective"]);
            A.store.Ref(ptr + 52 + 544 + 8, x["EAP"]["Outer"]["UserPolicy"]);
            A.store.Ref(ptr + 52 + 544 + 12, x["EAP"]["Outer"]["DevicePolicy"]);
            A.store.Ref(ptr + 52 + 544 + 16, x["EAP"]["Outer"]["UserSetting"]);
            A.store.Ref(ptr + 52 + 544 + 20, x["EAP"]["Outer"]["SharedSetting"]);
            A.store.Bool(ptr + 52 + 544 + 26, "UserEditable" in x["EAP"]["Outer"] ? true : false);
            A.store.Bool(ptr + 52 + 544 + 24, x["EAP"]["Outer"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 52 + 544 + 27, "DeviceEditable" in x["EAP"]["Outer"] ? true : false);
            A.store.Bool(ptr + 52 + 544 + 25, x["EAP"]["Outer"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["Password"] === "undefined") {
            A.store.Bool(ptr + 52 + 576 + 28, false);
            A.store.Ref(ptr + 52 + 576 + 0, undefined);
            A.store.Ref(ptr + 52 + 576 + 4, undefined);
            A.store.Ref(ptr + 52 + 576 + 8, undefined);
            A.store.Ref(ptr + 52 + 576 + 12, undefined);
            A.store.Ref(ptr + 52 + 576 + 16, undefined);
            A.store.Ref(ptr + 52 + 576 + 20, undefined);
            A.store.Bool(ptr + 52 + 576 + 26, false);
            A.store.Bool(ptr + 52 + 576 + 24, false);
            A.store.Bool(ptr + 52 + 576 + 27, false);
            A.store.Bool(ptr + 52 + 576 + 25, false);
          } else {
            A.store.Bool(ptr + 52 + 576 + 28, true);
            A.store.Ref(ptr + 52 + 576 + 0, x["EAP"]["Password"]["Active"]);
            A.store.Ref(ptr + 52 + 576 + 4, x["EAP"]["Password"]["Effective"]);
            A.store.Ref(ptr + 52 + 576 + 8, x["EAP"]["Password"]["UserPolicy"]);
            A.store.Ref(ptr + 52 + 576 + 12, x["EAP"]["Password"]["DevicePolicy"]);
            A.store.Ref(ptr + 52 + 576 + 16, x["EAP"]["Password"]["UserSetting"]);
            A.store.Ref(ptr + 52 + 576 + 20, x["EAP"]["Password"]["SharedSetting"]);
            A.store.Bool(ptr + 52 + 576 + 26, "UserEditable" in x["EAP"]["Password"] ? true : false);
            A.store.Bool(ptr + 52 + 576 + 24, x["EAP"]["Password"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 52 + 576 + 27, "DeviceEditable" in x["EAP"]["Password"] ? true : false);
            A.store.Bool(ptr + 52 + 576 + 25, x["EAP"]["Password"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["SaveCredentials"] === "undefined") {
            A.store.Bool(ptr + 52 + 608 + 21, false);
            A.store.Bool(ptr + 52 + 608 + 14, false);
            A.store.Bool(ptr + 52 + 608 + 0, false);
            A.store.Ref(ptr + 52 + 608 + 4, undefined);
            A.store.Bool(ptr + 52 + 608 + 15, false);
            A.store.Bool(ptr + 52 + 608 + 8, false);
            A.store.Bool(ptr + 52 + 608 + 16, false);
            A.store.Bool(ptr + 52 + 608 + 9, false);
            A.store.Bool(ptr + 52 + 608 + 17, false);
            A.store.Bool(ptr + 52 + 608 + 10, false);
            A.store.Bool(ptr + 52 + 608 + 18, false);
            A.store.Bool(ptr + 52 + 608 + 11, false);
            A.store.Bool(ptr + 52 + 608 + 19, false);
            A.store.Bool(ptr + 52 + 608 + 12, false);
            A.store.Bool(ptr + 52 + 608 + 20, false);
            A.store.Bool(ptr + 52 + 608 + 13, false);
          } else {
            A.store.Bool(ptr + 52 + 608 + 21, true);
            A.store.Bool(ptr + 52 + 608 + 14, "Active" in x["EAP"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 52 + 608 + 0, x["EAP"]["SaveCredentials"]["Active"] ? true : false);
            A.store.Ref(ptr + 52 + 608 + 4, x["EAP"]["SaveCredentials"]["Effective"]);
            A.store.Bool(ptr + 52 + 608 + 15, "UserPolicy" in x["EAP"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 52 + 608 + 8, x["EAP"]["SaveCredentials"]["UserPolicy"] ? true : false);
            A.store.Bool(ptr + 52 + 608 + 16, "DevicePolicy" in x["EAP"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 52 + 608 + 9, x["EAP"]["SaveCredentials"]["DevicePolicy"] ? true : false);
            A.store.Bool(ptr + 52 + 608 + 17, "UserSetting" in x["EAP"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 52 + 608 + 10, x["EAP"]["SaveCredentials"]["UserSetting"] ? true : false);
            A.store.Bool(ptr + 52 + 608 + 18, "SharedSetting" in x["EAP"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 52 + 608 + 11, x["EAP"]["SaveCredentials"]["SharedSetting"] ? true : false);
            A.store.Bool(ptr + 52 + 608 + 19, "UserEditable" in x["EAP"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 52 + 608 + 12, x["EAP"]["SaveCredentials"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 52 + 608 + 20, "DeviceEditable" in x["EAP"]["SaveCredentials"] ? true : false);
            A.store.Bool(ptr + 52 + 608 + 13, x["EAP"]["SaveCredentials"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["ServerCAPEMs"] === "undefined") {
            A.store.Bool(ptr + 52 + 632 + 28, false);
            A.store.Ref(ptr + 52 + 632 + 0, undefined);
            A.store.Ref(ptr + 52 + 632 + 4, undefined);
            A.store.Ref(ptr + 52 + 632 + 8, undefined);
            A.store.Ref(ptr + 52 + 632 + 12, undefined);
            A.store.Ref(ptr + 52 + 632 + 16, undefined);
            A.store.Ref(ptr + 52 + 632 + 20, undefined);
            A.store.Bool(ptr + 52 + 632 + 26, false);
            A.store.Bool(ptr + 52 + 632 + 24, false);
            A.store.Bool(ptr + 52 + 632 + 27, false);
            A.store.Bool(ptr + 52 + 632 + 25, false);
          } else {
            A.store.Bool(ptr + 52 + 632 + 28, true);
            A.store.Ref(ptr + 52 + 632 + 0, x["EAP"]["ServerCAPEMs"]["Active"]);
            A.store.Ref(ptr + 52 + 632 + 4, x["EAP"]["ServerCAPEMs"]["Effective"]);
            A.store.Ref(ptr + 52 + 632 + 8, x["EAP"]["ServerCAPEMs"]["UserPolicy"]);
            A.store.Ref(ptr + 52 + 632 + 12, x["EAP"]["ServerCAPEMs"]["DevicePolicy"]);
            A.store.Ref(ptr + 52 + 632 + 16, x["EAP"]["ServerCAPEMs"]["UserSetting"]);
            A.store.Ref(ptr + 52 + 632 + 20, x["EAP"]["ServerCAPEMs"]["SharedSetting"]);
            A.store.Bool(ptr + 52 + 632 + 26, "UserEditable" in x["EAP"]["ServerCAPEMs"] ? true : false);
            A.store.Bool(ptr + 52 + 632 + 24, x["EAP"]["ServerCAPEMs"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 52 + 632 + 27, "DeviceEditable" in x["EAP"]["ServerCAPEMs"] ? true : false);
            A.store.Bool(ptr + 52 + 632 + 25, x["EAP"]["ServerCAPEMs"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["ServerCARefs"] === "undefined") {
            A.store.Bool(ptr + 52 + 664 + 28, false);
            A.store.Ref(ptr + 52 + 664 + 0, undefined);
            A.store.Ref(ptr + 52 + 664 + 4, undefined);
            A.store.Ref(ptr + 52 + 664 + 8, undefined);
            A.store.Ref(ptr + 52 + 664 + 12, undefined);
            A.store.Ref(ptr + 52 + 664 + 16, undefined);
            A.store.Ref(ptr + 52 + 664 + 20, undefined);
            A.store.Bool(ptr + 52 + 664 + 26, false);
            A.store.Bool(ptr + 52 + 664 + 24, false);
            A.store.Bool(ptr + 52 + 664 + 27, false);
            A.store.Bool(ptr + 52 + 664 + 25, false);
          } else {
            A.store.Bool(ptr + 52 + 664 + 28, true);
            A.store.Ref(ptr + 52 + 664 + 0, x["EAP"]["ServerCARefs"]["Active"]);
            A.store.Ref(ptr + 52 + 664 + 4, x["EAP"]["ServerCARefs"]["Effective"]);
            A.store.Ref(ptr + 52 + 664 + 8, x["EAP"]["ServerCARefs"]["UserPolicy"]);
            A.store.Ref(ptr + 52 + 664 + 12, x["EAP"]["ServerCARefs"]["DevicePolicy"]);
            A.store.Ref(ptr + 52 + 664 + 16, x["EAP"]["ServerCARefs"]["UserSetting"]);
            A.store.Ref(ptr + 52 + 664 + 20, x["EAP"]["ServerCARefs"]["SharedSetting"]);
            A.store.Bool(ptr + 52 + 664 + 26, "UserEditable" in x["EAP"]["ServerCARefs"] ? true : false);
            A.store.Bool(ptr + 52 + 664 + 24, x["EAP"]["ServerCARefs"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 52 + 664 + 27, "DeviceEditable" in x["EAP"]["ServerCARefs"] ? true : false);
            A.store.Bool(ptr + 52 + 664 + 25, x["EAP"]["ServerCARefs"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["SubjectMatch"] === "undefined") {
            A.store.Bool(ptr + 52 + 696 + 28, false);
            A.store.Ref(ptr + 52 + 696 + 0, undefined);
            A.store.Ref(ptr + 52 + 696 + 4, undefined);
            A.store.Ref(ptr + 52 + 696 + 8, undefined);
            A.store.Ref(ptr + 52 + 696 + 12, undefined);
            A.store.Ref(ptr + 52 + 696 + 16, undefined);
            A.store.Ref(ptr + 52 + 696 + 20, undefined);
            A.store.Bool(ptr + 52 + 696 + 26, false);
            A.store.Bool(ptr + 52 + 696 + 24, false);
            A.store.Bool(ptr + 52 + 696 + 27, false);
            A.store.Bool(ptr + 52 + 696 + 25, false);
          } else {
            A.store.Bool(ptr + 52 + 696 + 28, true);
            A.store.Ref(ptr + 52 + 696 + 0, x["EAP"]["SubjectMatch"]["Active"]);
            A.store.Ref(ptr + 52 + 696 + 4, x["EAP"]["SubjectMatch"]["Effective"]);
            A.store.Ref(ptr + 52 + 696 + 8, x["EAP"]["SubjectMatch"]["UserPolicy"]);
            A.store.Ref(ptr + 52 + 696 + 12, x["EAP"]["SubjectMatch"]["DevicePolicy"]);
            A.store.Ref(ptr + 52 + 696 + 16, x["EAP"]["SubjectMatch"]["UserSetting"]);
            A.store.Ref(ptr + 52 + 696 + 20, x["EAP"]["SubjectMatch"]["SharedSetting"]);
            A.store.Bool(ptr + 52 + 696 + 26, "UserEditable" in x["EAP"]["SubjectMatch"] ? true : false);
            A.store.Bool(ptr + 52 + 696 + 24, x["EAP"]["SubjectMatch"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 52 + 696 + 27, "DeviceEditable" in x["EAP"]["SubjectMatch"] ? true : false);
            A.store.Bool(ptr + 52 + 696 + 25, x["EAP"]["SubjectMatch"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["TLSVersionMax"] === "undefined") {
            A.store.Bool(ptr + 52 + 728 + 28, false);
            A.store.Ref(ptr + 52 + 728 + 0, undefined);
            A.store.Ref(ptr + 52 + 728 + 4, undefined);
            A.store.Ref(ptr + 52 + 728 + 8, undefined);
            A.store.Ref(ptr + 52 + 728 + 12, undefined);
            A.store.Ref(ptr + 52 + 728 + 16, undefined);
            A.store.Ref(ptr + 52 + 728 + 20, undefined);
            A.store.Bool(ptr + 52 + 728 + 26, false);
            A.store.Bool(ptr + 52 + 728 + 24, false);
            A.store.Bool(ptr + 52 + 728 + 27, false);
            A.store.Bool(ptr + 52 + 728 + 25, false);
          } else {
            A.store.Bool(ptr + 52 + 728 + 28, true);
            A.store.Ref(ptr + 52 + 728 + 0, x["EAP"]["TLSVersionMax"]["Active"]);
            A.store.Ref(ptr + 52 + 728 + 4, x["EAP"]["TLSVersionMax"]["Effective"]);
            A.store.Ref(ptr + 52 + 728 + 8, x["EAP"]["TLSVersionMax"]["UserPolicy"]);
            A.store.Ref(ptr + 52 + 728 + 12, x["EAP"]["TLSVersionMax"]["DevicePolicy"]);
            A.store.Ref(ptr + 52 + 728 + 16, x["EAP"]["TLSVersionMax"]["UserSetting"]);
            A.store.Ref(ptr + 52 + 728 + 20, x["EAP"]["TLSVersionMax"]["SharedSetting"]);
            A.store.Bool(ptr + 52 + 728 + 26, "UserEditable" in x["EAP"]["TLSVersionMax"] ? true : false);
            A.store.Bool(ptr + 52 + 728 + 24, x["EAP"]["TLSVersionMax"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 52 + 728 + 27, "DeviceEditable" in x["EAP"]["TLSVersionMax"] ? true : false);
            A.store.Bool(ptr + 52 + 728 + 25, x["EAP"]["TLSVersionMax"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["UseProactiveKeyCaching"] === "undefined") {
            A.store.Bool(ptr + 52 + 760 + 21, false);
            A.store.Bool(ptr + 52 + 760 + 14, false);
            A.store.Bool(ptr + 52 + 760 + 0, false);
            A.store.Ref(ptr + 52 + 760 + 4, undefined);
            A.store.Bool(ptr + 52 + 760 + 15, false);
            A.store.Bool(ptr + 52 + 760 + 8, false);
            A.store.Bool(ptr + 52 + 760 + 16, false);
            A.store.Bool(ptr + 52 + 760 + 9, false);
            A.store.Bool(ptr + 52 + 760 + 17, false);
            A.store.Bool(ptr + 52 + 760 + 10, false);
            A.store.Bool(ptr + 52 + 760 + 18, false);
            A.store.Bool(ptr + 52 + 760 + 11, false);
            A.store.Bool(ptr + 52 + 760 + 19, false);
            A.store.Bool(ptr + 52 + 760 + 12, false);
            A.store.Bool(ptr + 52 + 760 + 20, false);
            A.store.Bool(ptr + 52 + 760 + 13, false);
          } else {
            A.store.Bool(ptr + 52 + 760 + 21, true);
            A.store.Bool(ptr + 52 + 760 + 14, "Active" in x["EAP"]["UseProactiveKeyCaching"] ? true : false);
            A.store.Bool(ptr + 52 + 760 + 0, x["EAP"]["UseProactiveKeyCaching"]["Active"] ? true : false);
            A.store.Ref(ptr + 52 + 760 + 4, x["EAP"]["UseProactiveKeyCaching"]["Effective"]);
            A.store.Bool(ptr + 52 + 760 + 15, "UserPolicy" in x["EAP"]["UseProactiveKeyCaching"] ? true : false);
            A.store.Bool(ptr + 52 + 760 + 8, x["EAP"]["UseProactiveKeyCaching"]["UserPolicy"] ? true : false);
            A.store.Bool(ptr + 52 + 760 + 16, "DevicePolicy" in x["EAP"]["UseProactiveKeyCaching"] ? true : false);
            A.store.Bool(ptr + 52 + 760 + 9, x["EAP"]["UseProactiveKeyCaching"]["DevicePolicy"] ? true : false);
            A.store.Bool(ptr + 52 + 760 + 17, "UserSetting" in x["EAP"]["UseProactiveKeyCaching"] ? true : false);
            A.store.Bool(ptr + 52 + 760 + 10, x["EAP"]["UseProactiveKeyCaching"]["UserSetting"] ? true : false);
            A.store.Bool(ptr + 52 + 760 + 18, "SharedSetting" in x["EAP"]["UseProactiveKeyCaching"] ? true : false);
            A.store.Bool(ptr + 52 + 760 + 11, x["EAP"]["UseProactiveKeyCaching"]["SharedSetting"] ? true : false);
            A.store.Bool(ptr + 52 + 760 + 19, "UserEditable" in x["EAP"]["UseProactiveKeyCaching"] ? true : false);
            A.store.Bool(ptr + 52 + 760 + 12, x["EAP"]["UseProactiveKeyCaching"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 52 + 760 + 20, "DeviceEditable" in x["EAP"]["UseProactiveKeyCaching"] ? true : false);
            A.store.Bool(ptr + 52 + 760 + 13, x["EAP"]["UseProactiveKeyCaching"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["EAP"]["UseSystemCAs"] === "undefined") {
            A.store.Bool(ptr + 52 + 784 + 21, false);
            A.store.Bool(ptr + 52 + 784 + 14, false);
            A.store.Bool(ptr + 52 + 784 + 0, false);
            A.store.Ref(ptr + 52 + 784 + 4, undefined);
            A.store.Bool(ptr + 52 + 784 + 15, false);
            A.store.Bool(ptr + 52 + 784 + 8, false);
            A.store.Bool(ptr + 52 + 784 + 16, false);
            A.store.Bool(ptr + 52 + 784 + 9, false);
            A.store.Bool(ptr + 52 + 784 + 17, false);
            A.store.Bool(ptr + 52 + 784 + 10, false);
            A.store.Bool(ptr + 52 + 784 + 18, false);
            A.store.Bool(ptr + 52 + 784 + 11, false);
            A.store.Bool(ptr + 52 + 784 + 19, false);
            A.store.Bool(ptr + 52 + 784 + 12, false);
            A.store.Bool(ptr + 52 + 784 + 20, false);
            A.store.Bool(ptr + 52 + 784 + 13, false);
          } else {
            A.store.Bool(ptr + 52 + 784 + 21, true);
            A.store.Bool(ptr + 52 + 784 + 14, "Active" in x["EAP"]["UseSystemCAs"] ? true : false);
            A.store.Bool(ptr + 52 + 784 + 0, x["EAP"]["UseSystemCAs"]["Active"] ? true : false);
            A.store.Ref(ptr + 52 + 784 + 4, x["EAP"]["UseSystemCAs"]["Effective"]);
            A.store.Bool(ptr + 52 + 784 + 15, "UserPolicy" in x["EAP"]["UseSystemCAs"] ? true : false);
            A.store.Bool(ptr + 52 + 784 + 8, x["EAP"]["UseSystemCAs"]["UserPolicy"] ? true : false);
            A.store.Bool(ptr + 52 + 784 + 16, "DevicePolicy" in x["EAP"]["UseSystemCAs"] ? true : false);
            A.store.Bool(ptr + 52 + 784 + 9, x["EAP"]["UseSystemCAs"]["DevicePolicy"] ? true : false);
            A.store.Bool(ptr + 52 + 784 + 17, "UserSetting" in x["EAP"]["UseSystemCAs"] ? true : false);
            A.store.Bool(ptr + 52 + 784 + 10, x["EAP"]["UseSystemCAs"]["UserSetting"] ? true : false);
            A.store.Bool(ptr + 52 + 784 + 18, "SharedSetting" in x["EAP"]["UseSystemCAs"] ? true : false);
            A.store.Bool(ptr + 52 + 784 + 11, x["EAP"]["UseSystemCAs"]["SharedSetting"] ? true : false);
            A.store.Bool(ptr + 52 + 784 + 19, "UserEditable" in x["EAP"]["UseSystemCAs"] ? true : false);
            A.store.Bool(ptr + 52 + 784 + 12, x["EAP"]["UseSystemCAs"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 52 + 784 + 20, "DeviceEditable" in x["EAP"]["UseSystemCAs"] ? true : false);
            A.store.Bool(ptr + 52 + 784 + 13, x["EAP"]["UseSystemCAs"]["DeviceEditable"] ? true : false);
          }
        }
        A.store.Bool(ptr + 1024, "Frequency" in x ? true : false);
        A.store.Int32(ptr + 860, x["Frequency"] === undefined ? 0 : (x["Frequency"] as number));
        A.store.Ref(ptr + 864, x["FrequencyList"]);

        if (typeof x["HexSSID"] === "undefined") {
          A.store.Bool(ptr + 868 + 28, false);
          A.store.Ref(ptr + 868 + 0, undefined);
          A.store.Ref(ptr + 868 + 4, undefined);
          A.store.Ref(ptr + 868 + 8, undefined);
          A.store.Ref(ptr + 868 + 12, undefined);
          A.store.Ref(ptr + 868 + 16, undefined);
          A.store.Ref(ptr + 868 + 20, undefined);
          A.store.Bool(ptr + 868 + 26, false);
          A.store.Bool(ptr + 868 + 24, false);
          A.store.Bool(ptr + 868 + 27, false);
          A.store.Bool(ptr + 868 + 25, false);
        } else {
          A.store.Bool(ptr + 868 + 28, true);
          A.store.Ref(ptr + 868 + 0, x["HexSSID"]["Active"]);
          A.store.Ref(ptr + 868 + 4, x["HexSSID"]["Effective"]);
          A.store.Ref(ptr + 868 + 8, x["HexSSID"]["UserPolicy"]);
          A.store.Ref(ptr + 868 + 12, x["HexSSID"]["DevicePolicy"]);
          A.store.Ref(ptr + 868 + 16, x["HexSSID"]["UserSetting"]);
          A.store.Ref(ptr + 868 + 20, x["HexSSID"]["SharedSetting"]);
          A.store.Bool(ptr + 868 + 26, "UserEditable" in x["HexSSID"] ? true : false);
          A.store.Bool(ptr + 868 + 24, x["HexSSID"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 868 + 27, "DeviceEditable" in x["HexSSID"] ? true : false);
          A.store.Bool(ptr + 868 + 25, x["HexSSID"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["HiddenSSID"] === "undefined") {
          A.store.Bool(ptr + 900 + 21, false);
          A.store.Bool(ptr + 900 + 14, false);
          A.store.Bool(ptr + 900 + 0, false);
          A.store.Ref(ptr + 900 + 4, undefined);
          A.store.Bool(ptr + 900 + 15, false);
          A.store.Bool(ptr + 900 + 8, false);
          A.store.Bool(ptr + 900 + 16, false);
          A.store.Bool(ptr + 900 + 9, false);
          A.store.Bool(ptr + 900 + 17, false);
          A.store.Bool(ptr + 900 + 10, false);
          A.store.Bool(ptr + 900 + 18, false);
          A.store.Bool(ptr + 900 + 11, false);
          A.store.Bool(ptr + 900 + 19, false);
          A.store.Bool(ptr + 900 + 12, false);
          A.store.Bool(ptr + 900 + 20, false);
          A.store.Bool(ptr + 900 + 13, false);
        } else {
          A.store.Bool(ptr + 900 + 21, true);
          A.store.Bool(ptr + 900 + 14, "Active" in x["HiddenSSID"] ? true : false);
          A.store.Bool(ptr + 900 + 0, x["HiddenSSID"]["Active"] ? true : false);
          A.store.Ref(ptr + 900 + 4, x["HiddenSSID"]["Effective"]);
          A.store.Bool(ptr + 900 + 15, "UserPolicy" in x["HiddenSSID"] ? true : false);
          A.store.Bool(ptr + 900 + 8, x["HiddenSSID"]["UserPolicy"] ? true : false);
          A.store.Bool(ptr + 900 + 16, "DevicePolicy" in x["HiddenSSID"] ? true : false);
          A.store.Bool(ptr + 900 + 9, x["HiddenSSID"]["DevicePolicy"] ? true : false);
          A.store.Bool(ptr + 900 + 17, "UserSetting" in x["HiddenSSID"] ? true : false);
          A.store.Bool(ptr + 900 + 10, x["HiddenSSID"]["UserSetting"] ? true : false);
          A.store.Bool(ptr + 900 + 18, "SharedSetting" in x["HiddenSSID"] ? true : false);
          A.store.Bool(ptr + 900 + 11, x["HiddenSSID"]["SharedSetting"] ? true : false);
          A.store.Bool(ptr + 900 + 19, "UserEditable" in x["HiddenSSID"] ? true : false);
          A.store.Bool(ptr + 900 + 12, x["HiddenSSID"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 900 + 20, "DeviceEditable" in x["HiddenSSID"] ? true : false);
          A.store.Bool(ptr + 900 + 13, x["HiddenSSID"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["Passphrase"] === "undefined") {
          A.store.Bool(ptr + 924 + 28, false);
          A.store.Ref(ptr + 924 + 0, undefined);
          A.store.Ref(ptr + 924 + 4, undefined);
          A.store.Ref(ptr + 924 + 8, undefined);
          A.store.Ref(ptr + 924 + 12, undefined);
          A.store.Ref(ptr + 924 + 16, undefined);
          A.store.Ref(ptr + 924 + 20, undefined);
          A.store.Bool(ptr + 924 + 26, false);
          A.store.Bool(ptr + 924 + 24, false);
          A.store.Bool(ptr + 924 + 27, false);
          A.store.Bool(ptr + 924 + 25, false);
        } else {
          A.store.Bool(ptr + 924 + 28, true);
          A.store.Ref(ptr + 924 + 0, x["Passphrase"]["Active"]);
          A.store.Ref(ptr + 924 + 4, x["Passphrase"]["Effective"]);
          A.store.Ref(ptr + 924 + 8, x["Passphrase"]["UserPolicy"]);
          A.store.Ref(ptr + 924 + 12, x["Passphrase"]["DevicePolicy"]);
          A.store.Ref(ptr + 924 + 16, x["Passphrase"]["UserSetting"]);
          A.store.Ref(ptr + 924 + 20, x["Passphrase"]["SharedSetting"]);
          A.store.Bool(ptr + 924 + 26, "UserEditable" in x["Passphrase"] ? true : false);
          A.store.Bool(ptr + 924 + 24, x["Passphrase"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 924 + 27, "DeviceEditable" in x["Passphrase"] ? true : false);
          A.store.Bool(ptr + 924 + 25, x["Passphrase"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["SSID"] === "undefined") {
          A.store.Bool(ptr + 956 + 28, false);
          A.store.Ref(ptr + 956 + 0, undefined);
          A.store.Ref(ptr + 956 + 4, undefined);
          A.store.Ref(ptr + 956 + 8, undefined);
          A.store.Ref(ptr + 956 + 12, undefined);
          A.store.Ref(ptr + 956 + 16, undefined);
          A.store.Ref(ptr + 956 + 20, undefined);
          A.store.Bool(ptr + 956 + 26, false);
          A.store.Bool(ptr + 956 + 24, false);
          A.store.Bool(ptr + 956 + 27, false);
          A.store.Bool(ptr + 956 + 25, false);
        } else {
          A.store.Bool(ptr + 956 + 28, true);
          A.store.Ref(ptr + 956 + 0, x["SSID"]["Active"]);
          A.store.Ref(ptr + 956 + 4, x["SSID"]["Effective"]);
          A.store.Ref(ptr + 956 + 8, x["SSID"]["UserPolicy"]);
          A.store.Ref(ptr + 956 + 12, x["SSID"]["DevicePolicy"]);
          A.store.Ref(ptr + 956 + 16, x["SSID"]["UserSetting"]);
          A.store.Ref(ptr + 956 + 20, x["SSID"]["SharedSetting"]);
          A.store.Bool(ptr + 956 + 26, "UserEditable" in x["SSID"] ? true : false);
          A.store.Bool(ptr + 956 + 24, x["SSID"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 956 + 27, "DeviceEditable" in x["SSID"] ? true : false);
          A.store.Bool(ptr + 956 + 25, x["SSID"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["Security"] === "undefined") {
          A.store.Bool(ptr + 988 + 28, false);
          A.store.Ref(ptr + 988 + 0, undefined);
          A.store.Ref(ptr + 988 + 4, undefined);
          A.store.Ref(ptr + 988 + 8, undefined);
          A.store.Ref(ptr + 988 + 12, undefined);
          A.store.Ref(ptr + 988 + 16, undefined);
          A.store.Ref(ptr + 988 + 20, undefined);
          A.store.Bool(ptr + 988 + 26, false);
          A.store.Bool(ptr + 988 + 24, false);
          A.store.Bool(ptr + 988 + 27, false);
          A.store.Bool(ptr + 988 + 25, false);
        } else {
          A.store.Bool(ptr + 988 + 28, true);
          A.store.Ref(ptr + 988 + 0, x["Security"]["Active"]);
          A.store.Ref(ptr + 988 + 4, x["Security"]["Effective"]);
          A.store.Ref(ptr + 988 + 8, x["Security"]["UserPolicy"]);
          A.store.Ref(ptr + 988 + 12, x["Security"]["DevicePolicy"]);
          A.store.Ref(ptr + 988 + 16, x["Security"]["UserSetting"]);
          A.store.Ref(ptr + 988 + 20, x["Security"]["SharedSetting"]);
          A.store.Bool(ptr + 988 + 26, "UserEditable" in x["Security"] ? true : false);
          A.store.Bool(ptr + 988 + 24, x["Security"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 988 + 27, "DeviceEditable" in x["Security"] ? true : false);
          A.store.Bool(ptr + 988 + 25, x["Security"]["DeviceEditable"] ? true : false);
        }
        A.store.Bool(ptr + 1025, "SignalStrength" in x ? true : false);
        A.store.Int32(ptr + 1020, x["SignalStrength"] === undefined ? 0 : (x["SignalStrength"] as number));
      }
    },
    "load_ManagedWiFiProperties": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      if (A.load.Bool(ptr + 0 + 21)) {
        x["AllowGatewayARPPolling"] = {};
        if (A.load.Bool(ptr + 0 + 14)) {
          x["AllowGatewayARPPolling"]["Active"] = A.load.Bool(ptr + 0 + 0);
        } else {
          delete x["AllowGatewayARPPolling"]["Active"];
        }
        x["AllowGatewayARPPolling"]["Effective"] = A.load.Ref(ptr + 0 + 4, undefined);
        if (A.load.Bool(ptr + 0 + 15)) {
          x["AllowGatewayARPPolling"]["UserPolicy"] = A.load.Bool(ptr + 0 + 8);
        } else {
          delete x["AllowGatewayARPPolling"]["UserPolicy"];
        }
        if (A.load.Bool(ptr + 0 + 16)) {
          x["AllowGatewayARPPolling"]["DevicePolicy"] = A.load.Bool(ptr + 0 + 9);
        } else {
          delete x["AllowGatewayARPPolling"]["DevicePolicy"];
        }
        if (A.load.Bool(ptr + 0 + 17)) {
          x["AllowGatewayARPPolling"]["UserSetting"] = A.load.Bool(ptr + 0 + 10);
        } else {
          delete x["AllowGatewayARPPolling"]["UserSetting"];
        }
        if (A.load.Bool(ptr + 0 + 18)) {
          x["AllowGatewayARPPolling"]["SharedSetting"] = A.load.Bool(ptr + 0 + 11);
        } else {
          delete x["AllowGatewayARPPolling"]["SharedSetting"];
        }
        if (A.load.Bool(ptr + 0 + 19)) {
          x["AllowGatewayARPPolling"]["UserEditable"] = A.load.Bool(ptr + 0 + 12);
        } else {
          delete x["AllowGatewayARPPolling"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 0 + 20)) {
          x["AllowGatewayARPPolling"]["DeviceEditable"] = A.load.Bool(ptr + 0 + 13);
        } else {
          delete x["AllowGatewayARPPolling"]["DeviceEditable"];
        }
      } else {
        delete x["AllowGatewayARPPolling"];
      }
      if (A.load.Bool(ptr + 24 + 21)) {
        x["AutoConnect"] = {};
        if (A.load.Bool(ptr + 24 + 14)) {
          x["AutoConnect"]["Active"] = A.load.Bool(ptr + 24 + 0);
        } else {
          delete x["AutoConnect"]["Active"];
        }
        x["AutoConnect"]["Effective"] = A.load.Ref(ptr + 24 + 4, undefined);
        if (A.load.Bool(ptr + 24 + 15)) {
          x["AutoConnect"]["UserPolicy"] = A.load.Bool(ptr + 24 + 8);
        } else {
          delete x["AutoConnect"]["UserPolicy"];
        }
        if (A.load.Bool(ptr + 24 + 16)) {
          x["AutoConnect"]["DevicePolicy"] = A.load.Bool(ptr + 24 + 9);
        } else {
          delete x["AutoConnect"]["DevicePolicy"];
        }
        if (A.load.Bool(ptr + 24 + 17)) {
          x["AutoConnect"]["UserSetting"] = A.load.Bool(ptr + 24 + 10);
        } else {
          delete x["AutoConnect"]["UserSetting"];
        }
        if (A.load.Bool(ptr + 24 + 18)) {
          x["AutoConnect"]["SharedSetting"] = A.load.Bool(ptr + 24 + 11);
        } else {
          delete x["AutoConnect"]["SharedSetting"];
        }
        if (A.load.Bool(ptr + 24 + 19)) {
          x["AutoConnect"]["UserEditable"] = A.load.Bool(ptr + 24 + 12);
        } else {
          delete x["AutoConnect"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 24 + 20)) {
          x["AutoConnect"]["DeviceEditable"] = A.load.Bool(ptr + 24 + 13);
        } else {
          delete x["AutoConnect"]["DeviceEditable"];
        }
      } else {
        delete x["AutoConnect"];
      }
      x["BSSID"] = A.load.Ref(ptr + 48, undefined);
      if (A.load.Bool(ptr + 52 + 806)) {
        x["EAP"] = {};
        if (A.load.Bool(ptr + 52 + 0 + 28)) {
          x["EAP"]["AnonymousIdentity"] = {};
          x["EAP"]["AnonymousIdentity"]["Active"] = A.load.Ref(ptr + 52 + 0 + 0, undefined);
          x["EAP"]["AnonymousIdentity"]["Effective"] = A.load.Ref(ptr + 52 + 0 + 4, undefined);
          x["EAP"]["AnonymousIdentity"]["UserPolicy"] = A.load.Ref(ptr + 52 + 0 + 8, undefined);
          x["EAP"]["AnonymousIdentity"]["DevicePolicy"] = A.load.Ref(ptr + 52 + 0 + 12, undefined);
          x["EAP"]["AnonymousIdentity"]["UserSetting"] = A.load.Ref(ptr + 52 + 0 + 16, undefined);
          x["EAP"]["AnonymousIdentity"]["SharedSetting"] = A.load.Ref(ptr + 52 + 0 + 20, undefined);
          if (A.load.Bool(ptr + 52 + 0 + 26)) {
            x["EAP"]["AnonymousIdentity"]["UserEditable"] = A.load.Bool(ptr + 52 + 0 + 24);
          } else {
            delete x["EAP"]["AnonymousIdentity"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 52 + 0 + 27)) {
            x["EAP"]["AnonymousIdentity"]["DeviceEditable"] = A.load.Bool(ptr + 52 + 0 + 25);
          } else {
            delete x["EAP"]["AnonymousIdentity"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["AnonymousIdentity"];
        }
        if (A.load.Bool(ptr + 52 + 32 + 318)) {
          x["EAP"]["ClientCertPattern"] = {};
          if (A.load.Bool(ptr + 52 + 32 + 0 + 28)) {
            x["EAP"]["ClientCertPattern"]["EnrollmentURI"] = {};
            x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["Active"] = A.load.Ref(ptr + 52 + 32 + 0 + 0, undefined);
            x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["Effective"] = A.load.Ref(ptr + 52 + 32 + 0 + 4, undefined);
            x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserPolicy"] = A.load.Ref(ptr + 52 + 32 + 0 + 8, undefined);
            x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["DevicePolicy"] = A.load.Ref(
              ptr + 52 + 32 + 0 + 12,
              undefined
            );
            x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserSetting"] = A.load.Ref(
              ptr + 52 + 32 + 0 + 16,
              undefined
            );
            x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["SharedSetting"] = A.load.Ref(
              ptr + 52 + 32 + 0 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 52 + 32 + 0 + 26)) {
              x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserEditable"] = A.load.Bool(ptr + 52 + 32 + 0 + 24);
            } else {
              delete x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 52 + 32 + 0 + 27)) {
              x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"] = A.load.Bool(ptr + 52 + 32 + 0 + 25);
            } else {
              delete x["EAP"]["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"];
            }
          } else {
            delete x["EAP"]["ClientCertPattern"]["EnrollmentURI"];
          }
          if (A.load.Bool(ptr + 52 + 32 + 32 + 125)) {
            x["EAP"]["ClientCertPattern"]["Issuer"] = {};
            if (A.load.Bool(ptr + 52 + 32 + 32 + 0 + 28)) {
              x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] = {};
              x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["Active"] = A.load.Ref(
                ptr + 52 + 32 + 32 + 0 + 0,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["Effective"] = A.load.Ref(
                ptr + 52 + 32 + 32 + 0 + 4,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserPolicy"] = A.load.Ref(
                ptr + 52 + 32 + 32 + 0 + 8,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["DevicePolicy"] = A.load.Ref(
                ptr + 52 + 32 + 32 + 0 + 12,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserSetting"] = A.load.Ref(
                ptr + 52 + 32 + 32 + 0 + 16,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["SharedSetting"] = A.load.Ref(
                ptr + 52 + 32 + 32 + 0 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 52 + 32 + 32 + 0 + 26)) {
                x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"] = A.load.Bool(
                  ptr + 52 + 32 + 32 + 0 + 24
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 52 + 32 + 32 + 0 + 27)) {
                x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"] = A.load.Bool(
                  ptr + 52 + 32 + 32 + 0 + 25
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"];
              }
            } else {
              delete x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"];
            }
            if (A.load.Bool(ptr + 52 + 32 + 32 + 32 + 28)) {
              x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] = {};
              x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["Active"] = A.load.Ref(
                ptr + 52 + 32 + 32 + 32 + 0,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["Effective"] = A.load.Ref(
                ptr + 52 + 32 + 32 + 32 + 4,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserPolicy"] = A.load.Ref(
                ptr + 52 + 32 + 32 + 32 + 8,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["DevicePolicy"] = A.load.Ref(
                ptr + 52 + 32 + 32 + 32 + 12,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserSetting"] = A.load.Ref(
                ptr + 52 + 32 + 32 + 32 + 16,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["SharedSetting"] = A.load.Ref(
                ptr + 52 + 32 + 32 + 32 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 52 + 32 + 32 + 32 + 26)) {
                x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"] = A.load.Bool(
                  ptr + 52 + 32 + 32 + 32 + 24
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 52 + 32 + 32 + 32 + 27)) {
                x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"] = A.load.Bool(
                  ptr + 52 + 32 + 32 + 32 + 25
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"];
              }
            } else {
              delete x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"];
            }
            if (A.load.Bool(ptr + 52 + 32 + 32 + 64 + 28)) {
              x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] = {};
              x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["Active"] = A.load.Ref(
                ptr + 52 + 32 + 32 + 64 + 0,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["Effective"] = A.load.Ref(
                ptr + 52 + 32 + 32 + 64 + 4,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserPolicy"] = A.load.Ref(
                ptr + 52 + 32 + 32 + 64 + 8,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["DevicePolicy"] = A.load.Ref(
                ptr + 52 + 32 + 32 + 64 + 12,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserSetting"] = A.load.Ref(
                ptr + 52 + 32 + 32 + 64 + 16,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["SharedSetting"] = A.load.Ref(
                ptr + 52 + 32 + 32 + 64 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 52 + 32 + 32 + 64 + 26)) {
                x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"] = A.load.Bool(
                  ptr + 52 + 32 + 32 + 64 + 24
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 52 + 32 + 32 + 64 + 27)) {
                x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"] = A.load.Bool(
                  ptr + 52 + 32 + 32 + 64 + 25
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"];
              }
            } else {
              delete x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"];
            }
            if (A.load.Bool(ptr + 52 + 32 + 32 + 96 + 28)) {
              x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = {};
              x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Active"] = A.load.Ref(
                ptr + 52 + 32 + 32 + 96 + 0,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Effective"] = A.load.Ref(
                ptr + 52 + 32 + 32 + 96 + 4,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserPolicy"] = A.load.Ref(
                ptr + 52 + 32 + 32 + 96 + 8,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DevicePolicy"] = A.load.Ref(
                ptr + 52 + 32 + 32 + 96 + 12,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserSetting"] = A.load.Ref(
                ptr + 52 + 32 + 32 + 96 + 16,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["SharedSetting"] = A.load.Ref(
                ptr + 52 + 32 + 32 + 96 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 52 + 32 + 32 + 96 + 26)) {
                x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"] = A.load.Bool(
                  ptr + 52 + 32 + 32 + 96 + 24
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 52 + 32 + 32 + 96 + 27)) {
                x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"] = A.load.Bool(
                  ptr + 52 + 32 + 32 + 96 + 25
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"];
              }
            } else {
              delete x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"];
            }
          } else {
            delete x["EAP"]["ClientCertPattern"]["Issuer"];
          }
          if (A.load.Bool(ptr + 52 + 32 + 160 + 28)) {
            x["EAP"]["ClientCertPattern"]["IssuerCARef"] = {};
            x["EAP"]["ClientCertPattern"]["IssuerCARef"]["Active"] = A.load.Ref(ptr + 52 + 32 + 160 + 0, undefined);
            x["EAP"]["ClientCertPattern"]["IssuerCARef"]["Effective"] = A.load.Ref(ptr + 52 + 32 + 160 + 4, undefined);
            x["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserPolicy"] = A.load.Ref(ptr + 52 + 32 + 160 + 8, undefined);
            x["EAP"]["ClientCertPattern"]["IssuerCARef"]["DevicePolicy"] = A.load.Ref(
              ptr + 52 + 32 + 160 + 12,
              undefined
            );
            x["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserSetting"] = A.load.Ref(
              ptr + 52 + 32 + 160 + 16,
              undefined
            );
            x["EAP"]["ClientCertPattern"]["IssuerCARef"]["SharedSetting"] = A.load.Ref(
              ptr + 52 + 32 + 160 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 52 + 32 + 160 + 26)) {
              x["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserEditable"] = A.load.Bool(ptr + 52 + 32 + 160 + 24);
            } else {
              delete x["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 52 + 32 + 160 + 27)) {
              x["EAP"]["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"] = A.load.Bool(ptr + 52 + 32 + 160 + 25);
            } else {
              delete x["EAP"]["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"];
            }
          } else {
            delete x["EAP"]["ClientCertPattern"]["IssuerCARef"];
          }
          if (A.load.Bool(ptr + 52 + 32 + 192 + 125)) {
            x["EAP"]["ClientCertPattern"]["Subject"] = {};
            if (A.load.Bool(ptr + 52 + 32 + 192 + 0 + 28)) {
              x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] = {};
              x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["Active"] = A.load.Ref(
                ptr + 52 + 32 + 192 + 0 + 0,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["Effective"] = A.load.Ref(
                ptr + 52 + 32 + 192 + 0 + 4,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserPolicy"] = A.load.Ref(
                ptr + 52 + 32 + 192 + 0 + 8,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["DevicePolicy"] = A.load.Ref(
                ptr + 52 + 32 + 192 + 0 + 12,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserSetting"] = A.load.Ref(
                ptr + 52 + 32 + 192 + 0 + 16,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["SharedSetting"] = A.load.Ref(
                ptr + 52 + 32 + 192 + 0 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 52 + 32 + 192 + 0 + 26)) {
                x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"] = A.load.Bool(
                  ptr + 52 + 32 + 192 + 0 + 24
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 52 + 32 + 192 + 0 + 27)) {
                x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"] = A.load.Bool(
                  ptr + 52 + 32 + 192 + 0 + 25
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"];
              }
            } else {
              delete x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"];
            }
            if (A.load.Bool(ptr + 52 + 32 + 192 + 32 + 28)) {
              x["EAP"]["ClientCertPattern"]["Subject"]["Locality"] = {};
              x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["Active"] = A.load.Ref(
                ptr + 52 + 32 + 192 + 32 + 0,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["Effective"] = A.load.Ref(
                ptr + 52 + 32 + 192 + 32 + 4,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserPolicy"] = A.load.Ref(
                ptr + 52 + 32 + 192 + 32 + 8,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["DevicePolicy"] = A.load.Ref(
                ptr + 52 + 32 + 192 + 32 + 12,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserSetting"] = A.load.Ref(
                ptr + 52 + 32 + 192 + 32 + 16,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["SharedSetting"] = A.load.Ref(
                ptr + 52 + 32 + 192 + 32 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 52 + 32 + 192 + 32 + 26)) {
                x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"] = A.load.Bool(
                  ptr + 52 + 32 + 192 + 32 + 24
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 52 + 32 + 192 + 32 + 27)) {
                x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"] = A.load.Bool(
                  ptr + 52 + 32 + 192 + 32 + 25
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"];
              }
            } else {
              delete x["EAP"]["ClientCertPattern"]["Subject"]["Locality"];
            }
            if (A.load.Bool(ptr + 52 + 32 + 192 + 64 + 28)) {
              x["EAP"]["ClientCertPattern"]["Subject"]["Organization"] = {};
              x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["Active"] = A.load.Ref(
                ptr + 52 + 32 + 192 + 64 + 0,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["Effective"] = A.load.Ref(
                ptr + 52 + 32 + 192 + 64 + 4,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserPolicy"] = A.load.Ref(
                ptr + 52 + 32 + 192 + 64 + 8,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["DevicePolicy"] = A.load.Ref(
                ptr + 52 + 32 + 192 + 64 + 12,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserSetting"] = A.load.Ref(
                ptr + 52 + 32 + 192 + 64 + 16,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["SharedSetting"] = A.load.Ref(
                ptr + 52 + 32 + 192 + 64 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 52 + 32 + 192 + 64 + 26)) {
                x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"] = A.load.Bool(
                  ptr + 52 + 32 + 192 + 64 + 24
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 52 + 32 + 192 + 64 + 27)) {
                x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"] = A.load.Bool(
                  ptr + 52 + 32 + 192 + 64 + 25
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"];
              }
            } else {
              delete x["EAP"]["ClientCertPattern"]["Subject"]["Organization"];
            }
            if (A.load.Bool(ptr + 52 + 32 + 192 + 96 + 28)) {
              x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = {};
              x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Active"] = A.load.Ref(
                ptr + 52 + 32 + 192 + 96 + 0,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Effective"] = A.load.Ref(
                ptr + 52 + 32 + 192 + 96 + 4,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserPolicy"] = A.load.Ref(
                ptr + 52 + 32 + 192 + 96 + 8,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DevicePolicy"] = A.load.Ref(
                ptr + 52 + 32 + 192 + 96 + 12,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserSetting"] = A.load.Ref(
                ptr + 52 + 32 + 192 + 96 + 16,
                undefined
              );
              x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["SharedSetting"] = A.load.Ref(
                ptr + 52 + 32 + 192 + 96 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 52 + 32 + 192 + 96 + 26)) {
                x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"] = A.load.Bool(
                  ptr + 52 + 32 + 192 + 96 + 24
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 52 + 32 + 192 + 96 + 27)) {
                x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"] = A.load.Bool(
                  ptr + 52 + 32 + 192 + 96 + 25
                );
              } else {
                delete x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"];
              }
            } else {
              delete x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"];
            }
          } else {
            delete x["EAP"]["ClientCertPattern"]["Subject"];
          }
        } else {
          delete x["EAP"]["ClientCertPattern"];
        }
        if (A.load.Bool(ptr + 52 + 352 + 28)) {
          x["EAP"]["ClientCertPKCS11Id"] = {};
          x["EAP"]["ClientCertPKCS11Id"]["Active"] = A.load.Ref(ptr + 52 + 352 + 0, undefined);
          x["EAP"]["ClientCertPKCS11Id"]["Effective"] = A.load.Ref(ptr + 52 + 352 + 4, undefined);
          x["EAP"]["ClientCertPKCS11Id"]["UserPolicy"] = A.load.Ref(ptr + 52 + 352 + 8, undefined);
          x["EAP"]["ClientCertPKCS11Id"]["DevicePolicy"] = A.load.Ref(ptr + 52 + 352 + 12, undefined);
          x["EAP"]["ClientCertPKCS11Id"]["UserSetting"] = A.load.Ref(ptr + 52 + 352 + 16, undefined);
          x["EAP"]["ClientCertPKCS11Id"]["SharedSetting"] = A.load.Ref(ptr + 52 + 352 + 20, undefined);
          if (A.load.Bool(ptr + 52 + 352 + 26)) {
            x["EAP"]["ClientCertPKCS11Id"]["UserEditable"] = A.load.Bool(ptr + 52 + 352 + 24);
          } else {
            delete x["EAP"]["ClientCertPKCS11Id"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 52 + 352 + 27)) {
            x["EAP"]["ClientCertPKCS11Id"]["DeviceEditable"] = A.load.Bool(ptr + 52 + 352 + 25);
          } else {
            delete x["EAP"]["ClientCertPKCS11Id"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["ClientCertPKCS11Id"];
        }
        if (A.load.Bool(ptr + 52 + 384 + 28)) {
          x["EAP"]["ClientCertProvisioningProfileId"] = {};
          x["EAP"]["ClientCertProvisioningProfileId"]["Active"] = A.load.Ref(ptr + 52 + 384 + 0, undefined);
          x["EAP"]["ClientCertProvisioningProfileId"]["Effective"] = A.load.Ref(ptr + 52 + 384 + 4, undefined);
          x["EAP"]["ClientCertProvisioningProfileId"]["UserPolicy"] = A.load.Ref(ptr + 52 + 384 + 8, undefined);
          x["EAP"]["ClientCertProvisioningProfileId"]["DevicePolicy"] = A.load.Ref(ptr + 52 + 384 + 12, undefined);
          x["EAP"]["ClientCertProvisioningProfileId"]["UserSetting"] = A.load.Ref(ptr + 52 + 384 + 16, undefined);
          x["EAP"]["ClientCertProvisioningProfileId"]["SharedSetting"] = A.load.Ref(ptr + 52 + 384 + 20, undefined);
          if (A.load.Bool(ptr + 52 + 384 + 26)) {
            x["EAP"]["ClientCertProvisioningProfileId"]["UserEditable"] = A.load.Bool(ptr + 52 + 384 + 24);
          } else {
            delete x["EAP"]["ClientCertProvisioningProfileId"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 52 + 384 + 27)) {
            x["EAP"]["ClientCertProvisioningProfileId"]["DeviceEditable"] = A.load.Bool(ptr + 52 + 384 + 25);
          } else {
            delete x["EAP"]["ClientCertProvisioningProfileId"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["ClientCertProvisioningProfileId"];
        }
        if (A.load.Bool(ptr + 52 + 416 + 28)) {
          x["EAP"]["ClientCertRef"] = {};
          x["EAP"]["ClientCertRef"]["Active"] = A.load.Ref(ptr + 52 + 416 + 0, undefined);
          x["EAP"]["ClientCertRef"]["Effective"] = A.load.Ref(ptr + 52 + 416 + 4, undefined);
          x["EAP"]["ClientCertRef"]["UserPolicy"] = A.load.Ref(ptr + 52 + 416 + 8, undefined);
          x["EAP"]["ClientCertRef"]["DevicePolicy"] = A.load.Ref(ptr + 52 + 416 + 12, undefined);
          x["EAP"]["ClientCertRef"]["UserSetting"] = A.load.Ref(ptr + 52 + 416 + 16, undefined);
          x["EAP"]["ClientCertRef"]["SharedSetting"] = A.load.Ref(ptr + 52 + 416 + 20, undefined);
          if (A.load.Bool(ptr + 52 + 416 + 26)) {
            x["EAP"]["ClientCertRef"]["UserEditable"] = A.load.Bool(ptr + 52 + 416 + 24);
          } else {
            delete x["EAP"]["ClientCertRef"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 52 + 416 + 27)) {
            x["EAP"]["ClientCertRef"]["DeviceEditable"] = A.load.Bool(ptr + 52 + 416 + 25);
          } else {
            delete x["EAP"]["ClientCertRef"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["ClientCertRef"];
        }
        if (A.load.Bool(ptr + 52 + 448 + 28)) {
          x["EAP"]["ClientCertType"] = {};
          x["EAP"]["ClientCertType"]["Active"] = A.load.Ref(ptr + 52 + 448 + 0, undefined);
          x["EAP"]["ClientCertType"]["Effective"] = A.load.Ref(ptr + 52 + 448 + 4, undefined);
          x["EAP"]["ClientCertType"]["UserPolicy"] = A.load.Ref(ptr + 52 + 448 + 8, undefined);
          x["EAP"]["ClientCertType"]["DevicePolicy"] = A.load.Ref(ptr + 52 + 448 + 12, undefined);
          x["EAP"]["ClientCertType"]["UserSetting"] = A.load.Ref(ptr + 52 + 448 + 16, undefined);
          x["EAP"]["ClientCertType"]["SharedSetting"] = A.load.Ref(ptr + 52 + 448 + 20, undefined);
          if (A.load.Bool(ptr + 52 + 448 + 26)) {
            x["EAP"]["ClientCertType"]["UserEditable"] = A.load.Bool(ptr + 52 + 448 + 24);
          } else {
            delete x["EAP"]["ClientCertType"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 52 + 448 + 27)) {
            x["EAP"]["ClientCertType"]["DeviceEditable"] = A.load.Bool(ptr + 52 + 448 + 25);
          } else {
            delete x["EAP"]["ClientCertType"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["ClientCertType"];
        }
        if (A.load.Bool(ptr + 52 + 480 + 28)) {
          x["EAP"]["Identity"] = {};
          x["EAP"]["Identity"]["Active"] = A.load.Ref(ptr + 52 + 480 + 0, undefined);
          x["EAP"]["Identity"]["Effective"] = A.load.Ref(ptr + 52 + 480 + 4, undefined);
          x["EAP"]["Identity"]["UserPolicy"] = A.load.Ref(ptr + 52 + 480 + 8, undefined);
          x["EAP"]["Identity"]["DevicePolicy"] = A.load.Ref(ptr + 52 + 480 + 12, undefined);
          x["EAP"]["Identity"]["UserSetting"] = A.load.Ref(ptr + 52 + 480 + 16, undefined);
          x["EAP"]["Identity"]["SharedSetting"] = A.load.Ref(ptr + 52 + 480 + 20, undefined);
          if (A.load.Bool(ptr + 52 + 480 + 26)) {
            x["EAP"]["Identity"]["UserEditable"] = A.load.Bool(ptr + 52 + 480 + 24);
          } else {
            delete x["EAP"]["Identity"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 52 + 480 + 27)) {
            x["EAP"]["Identity"]["DeviceEditable"] = A.load.Bool(ptr + 52 + 480 + 25);
          } else {
            delete x["EAP"]["Identity"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["Identity"];
        }
        if (A.load.Bool(ptr + 52 + 512 + 28)) {
          x["EAP"]["Inner"] = {};
          x["EAP"]["Inner"]["Active"] = A.load.Ref(ptr + 52 + 512 + 0, undefined);
          x["EAP"]["Inner"]["Effective"] = A.load.Ref(ptr + 52 + 512 + 4, undefined);
          x["EAP"]["Inner"]["UserPolicy"] = A.load.Ref(ptr + 52 + 512 + 8, undefined);
          x["EAP"]["Inner"]["DevicePolicy"] = A.load.Ref(ptr + 52 + 512 + 12, undefined);
          x["EAP"]["Inner"]["UserSetting"] = A.load.Ref(ptr + 52 + 512 + 16, undefined);
          x["EAP"]["Inner"]["SharedSetting"] = A.load.Ref(ptr + 52 + 512 + 20, undefined);
          if (A.load.Bool(ptr + 52 + 512 + 26)) {
            x["EAP"]["Inner"]["UserEditable"] = A.load.Bool(ptr + 52 + 512 + 24);
          } else {
            delete x["EAP"]["Inner"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 52 + 512 + 27)) {
            x["EAP"]["Inner"]["DeviceEditable"] = A.load.Bool(ptr + 52 + 512 + 25);
          } else {
            delete x["EAP"]["Inner"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["Inner"];
        }
        if (A.load.Bool(ptr + 52 + 544 + 28)) {
          x["EAP"]["Outer"] = {};
          x["EAP"]["Outer"]["Active"] = A.load.Ref(ptr + 52 + 544 + 0, undefined);
          x["EAP"]["Outer"]["Effective"] = A.load.Ref(ptr + 52 + 544 + 4, undefined);
          x["EAP"]["Outer"]["UserPolicy"] = A.load.Ref(ptr + 52 + 544 + 8, undefined);
          x["EAP"]["Outer"]["DevicePolicy"] = A.load.Ref(ptr + 52 + 544 + 12, undefined);
          x["EAP"]["Outer"]["UserSetting"] = A.load.Ref(ptr + 52 + 544 + 16, undefined);
          x["EAP"]["Outer"]["SharedSetting"] = A.load.Ref(ptr + 52 + 544 + 20, undefined);
          if (A.load.Bool(ptr + 52 + 544 + 26)) {
            x["EAP"]["Outer"]["UserEditable"] = A.load.Bool(ptr + 52 + 544 + 24);
          } else {
            delete x["EAP"]["Outer"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 52 + 544 + 27)) {
            x["EAP"]["Outer"]["DeviceEditable"] = A.load.Bool(ptr + 52 + 544 + 25);
          } else {
            delete x["EAP"]["Outer"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["Outer"];
        }
        if (A.load.Bool(ptr + 52 + 576 + 28)) {
          x["EAP"]["Password"] = {};
          x["EAP"]["Password"]["Active"] = A.load.Ref(ptr + 52 + 576 + 0, undefined);
          x["EAP"]["Password"]["Effective"] = A.load.Ref(ptr + 52 + 576 + 4, undefined);
          x["EAP"]["Password"]["UserPolicy"] = A.load.Ref(ptr + 52 + 576 + 8, undefined);
          x["EAP"]["Password"]["DevicePolicy"] = A.load.Ref(ptr + 52 + 576 + 12, undefined);
          x["EAP"]["Password"]["UserSetting"] = A.load.Ref(ptr + 52 + 576 + 16, undefined);
          x["EAP"]["Password"]["SharedSetting"] = A.load.Ref(ptr + 52 + 576 + 20, undefined);
          if (A.load.Bool(ptr + 52 + 576 + 26)) {
            x["EAP"]["Password"]["UserEditable"] = A.load.Bool(ptr + 52 + 576 + 24);
          } else {
            delete x["EAP"]["Password"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 52 + 576 + 27)) {
            x["EAP"]["Password"]["DeviceEditable"] = A.load.Bool(ptr + 52 + 576 + 25);
          } else {
            delete x["EAP"]["Password"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["Password"];
        }
        if (A.load.Bool(ptr + 52 + 608 + 21)) {
          x["EAP"]["SaveCredentials"] = {};
          if (A.load.Bool(ptr + 52 + 608 + 14)) {
            x["EAP"]["SaveCredentials"]["Active"] = A.load.Bool(ptr + 52 + 608 + 0);
          } else {
            delete x["EAP"]["SaveCredentials"]["Active"];
          }
          x["EAP"]["SaveCredentials"]["Effective"] = A.load.Ref(ptr + 52 + 608 + 4, undefined);
          if (A.load.Bool(ptr + 52 + 608 + 15)) {
            x["EAP"]["SaveCredentials"]["UserPolicy"] = A.load.Bool(ptr + 52 + 608 + 8);
          } else {
            delete x["EAP"]["SaveCredentials"]["UserPolicy"];
          }
          if (A.load.Bool(ptr + 52 + 608 + 16)) {
            x["EAP"]["SaveCredentials"]["DevicePolicy"] = A.load.Bool(ptr + 52 + 608 + 9);
          } else {
            delete x["EAP"]["SaveCredentials"]["DevicePolicy"];
          }
          if (A.load.Bool(ptr + 52 + 608 + 17)) {
            x["EAP"]["SaveCredentials"]["UserSetting"] = A.load.Bool(ptr + 52 + 608 + 10);
          } else {
            delete x["EAP"]["SaveCredentials"]["UserSetting"];
          }
          if (A.load.Bool(ptr + 52 + 608 + 18)) {
            x["EAP"]["SaveCredentials"]["SharedSetting"] = A.load.Bool(ptr + 52 + 608 + 11);
          } else {
            delete x["EAP"]["SaveCredentials"]["SharedSetting"];
          }
          if (A.load.Bool(ptr + 52 + 608 + 19)) {
            x["EAP"]["SaveCredentials"]["UserEditable"] = A.load.Bool(ptr + 52 + 608 + 12);
          } else {
            delete x["EAP"]["SaveCredentials"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 52 + 608 + 20)) {
            x["EAP"]["SaveCredentials"]["DeviceEditable"] = A.load.Bool(ptr + 52 + 608 + 13);
          } else {
            delete x["EAP"]["SaveCredentials"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["SaveCredentials"];
        }
        if (A.load.Bool(ptr + 52 + 632 + 28)) {
          x["EAP"]["ServerCAPEMs"] = {};
          x["EAP"]["ServerCAPEMs"]["Active"] = A.load.Ref(ptr + 52 + 632 + 0, undefined);
          x["EAP"]["ServerCAPEMs"]["Effective"] = A.load.Ref(ptr + 52 + 632 + 4, undefined);
          x["EAP"]["ServerCAPEMs"]["UserPolicy"] = A.load.Ref(ptr + 52 + 632 + 8, undefined);
          x["EAP"]["ServerCAPEMs"]["DevicePolicy"] = A.load.Ref(ptr + 52 + 632 + 12, undefined);
          x["EAP"]["ServerCAPEMs"]["UserSetting"] = A.load.Ref(ptr + 52 + 632 + 16, undefined);
          x["EAP"]["ServerCAPEMs"]["SharedSetting"] = A.load.Ref(ptr + 52 + 632 + 20, undefined);
          if (A.load.Bool(ptr + 52 + 632 + 26)) {
            x["EAP"]["ServerCAPEMs"]["UserEditable"] = A.load.Bool(ptr + 52 + 632 + 24);
          } else {
            delete x["EAP"]["ServerCAPEMs"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 52 + 632 + 27)) {
            x["EAP"]["ServerCAPEMs"]["DeviceEditable"] = A.load.Bool(ptr + 52 + 632 + 25);
          } else {
            delete x["EAP"]["ServerCAPEMs"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["ServerCAPEMs"];
        }
        if (A.load.Bool(ptr + 52 + 664 + 28)) {
          x["EAP"]["ServerCARefs"] = {};
          x["EAP"]["ServerCARefs"]["Active"] = A.load.Ref(ptr + 52 + 664 + 0, undefined);
          x["EAP"]["ServerCARefs"]["Effective"] = A.load.Ref(ptr + 52 + 664 + 4, undefined);
          x["EAP"]["ServerCARefs"]["UserPolicy"] = A.load.Ref(ptr + 52 + 664 + 8, undefined);
          x["EAP"]["ServerCARefs"]["DevicePolicy"] = A.load.Ref(ptr + 52 + 664 + 12, undefined);
          x["EAP"]["ServerCARefs"]["UserSetting"] = A.load.Ref(ptr + 52 + 664 + 16, undefined);
          x["EAP"]["ServerCARefs"]["SharedSetting"] = A.load.Ref(ptr + 52 + 664 + 20, undefined);
          if (A.load.Bool(ptr + 52 + 664 + 26)) {
            x["EAP"]["ServerCARefs"]["UserEditable"] = A.load.Bool(ptr + 52 + 664 + 24);
          } else {
            delete x["EAP"]["ServerCARefs"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 52 + 664 + 27)) {
            x["EAP"]["ServerCARefs"]["DeviceEditable"] = A.load.Bool(ptr + 52 + 664 + 25);
          } else {
            delete x["EAP"]["ServerCARefs"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["ServerCARefs"];
        }
        if (A.load.Bool(ptr + 52 + 696 + 28)) {
          x["EAP"]["SubjectMatch"] = {};
          x["EAP"]["SubjectMatch"]["Active"] = A.load.Ref(ptr + 52 + 696 + 0, undefined);
          x["EAP"]["SubjectMatch"]["Effective"] = A.load.Ref(ptr + 52 + 696 + 4, undefined);
          x["EAP"]["SubjectMatch"]["UserPolicy"] = A.load.Ref(ptr + 52 + 696 + 8, undefined);
          x["EAP"]["SubjectMatch"]["DevicePolicy"] = A.load.Ref(ptr + 52 + 696 + 12, undefined);
          x["EAP"]["SubjectMatch"]["UserSetting"] = A.load.Ref(ptr + 52 + 696 + 16, undefined);
          x["EAP"]["SubjectMatch"]["SharedSetting"] = A.load.Ref(ptr + 52 + 696 + 20, undefined);
          if (A.load.Bool(ptr + 52 + 696 + 26)) {
            x["EAP"]["SubjectMatch"]["UserEditable"] = A.load.Bool(ptr + 52 + 696 + 24);
          } else {
            delete x["EAP"]["SubjectMatch"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 52 + 696 + 27)) {
            x["EAP"]["SubjectMatch"]["DeviceEditable"] = A.load.Bool(ptr + 52 + 696 + 25);
          } else {
            delete x["EAP"]["SubjectMatch"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["SubjectMatch"];
        }
        if (A.load.Bool(ptr + 52 + 728 + 28)) {
          x["EAP"]["TLSVersionMax"] = {};
          x["EAP"]["TLSVersionMax"]["Active"] = A.load.Ref(ptr + 52 + 728 + 0, undefined);
          x["EAP"]["TLSVersionMax"]["Effective"] = A.load.Ref(ptr + 52 + 728 + 4, undefined);
          x["EAP"]["TLSVersionMax"]["UserPolicy"] = A.load.Ref(ptr + 52 + 728 + 8, undefined);
          x["EAP"]["TLSVersionMax"]["DevicePolicy"] = A.load.Ref(ptr + 52 + 728 + 12, undefined);
          x["EAP"]["TLSVersionMax"]["UserSetting"] = A.load.Ref(ptr + 52 + 728 + 16, undefined);
          x["EAP"]["TLSVersionMax"]["SharedSetting"] = A.load.Ref(ptr + 52 + 728 + 20, undefined);
          if (A.load.Bool(ptr + 52 + 728 + 26)) {
            x["EAP"]["TLSVersionMax"]["UserEditable"] = A.load.Bool(ptr + 52 + 728 + 24);
          } else {
            delete x["EAP"]["TLSVersionMax"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 52 + 728 + 27)) {
            x["EAP"]["TLSVersionMax"]["DeviceEditable"] = A.load.Bool(ptr + 52 + 728 + 25);
          } else {
            delete x["EAP"]["TLSVersionMax"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["TLSVersionMax"];
        }
        if (A.load.Bool(ptr + 52 + 760 + 21)) {
          x["EAP"]["UseProactiveKeyCaching"] = {};
          if (A.load.Bool(ptr + 52 + 760 + 14)) {
            x["EAP"]["UseProactiveKeyCaching"]["Active"] = A.load.Bool(ptr + 52 + 760 + 0);
          } else {
            delete x["EAP"]["UseProactiveKeyCaching"]["Active"];
          }
          x["EAP"]["UseProactiveKeyCaching"]["Effective"] = A.load.Ref(ptr + 52 + 760 + 4, undefined);
          if (A.load.Bool(ptr + 52 + 760 + 15)) {
            x["EAP"]["UseProactiveKeyCaching"]["UserPolicy"] = A.load.Bool(ptr + 52 + 760 + 8);
          } else {
            delete x["EAP"]["UseProactiveKeyCaching"]["UserPolicy"];
          }
          if (A.load.Bool(ptr + 52 + 760 + 16)) {
            x["EAP"]["UseProactiveKeyCaching"]["DevicePolicy"] = A.load.Bool(ptr + 52 + 760 + 9);
          } else {
            delete x["EAP"]["UseProactiveKeyCaching"]["DevicePolicy"];
          }
          if (A.load.Bool(ptr + 52 + 760 + 17)) {
            x["EAP"]["UseProactiveKeyCaching"]["UserSetting"] = A.load.Bool(ptr + 52 + 760 + 10);
          } else {
            delete x["EAP"]["UseProactiveKeyCaching"]["UserSetting"];
          }
          if (A.load.Bool(ptr + 52 + 760 + 18)) {
            x["EAP"]["UseProactiveKeyCaching"]["SharedSetting"] = A.load.Bool(ptr + 52 + 760 + 11);
          } else {
            delete x["EAP"]["UseProactiveKeyCaching"]["SharedSetting"];
          }
          if (A.load.Bool(ptr + 52 + 760 + 19)) {
            x["EAP"]["UseProactiveKeyCaching"]["UserEditable"] = A.load.Bool(ptr + 52 + 760 + 12);
          } else {
            delete x["EAP"]["UseProactiveKeyCaching"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 52 + 760 + 20)) {
            x["EAP"]["UseProactiveKeyCaching"]["DeviceEditable"] = A.load.Bool(ptr + 52 + 760 + 13);
          } else {
            delete x["EAP"]["UseProactiveKeyCaching"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["UseProactiveKeyCaching"];
        }
        if (A.load.Bool(ptr + 52 + 784 + 21)) {
          x["EAP"]["UseSystemCAs"] = {};
          if (A.load.Bool(ptr + 52 + 784 + 14)) {
            x["EAP"]["UseSystemCAs"]["Active"] = A.load.Bool(ptr + 52 + 784 + 0);
          } else {
            delete x["EAP"]["UseSystemCAs"]["Active"];
          }
          x["EAP"]["UseSystemCAs"]["Effective"] = A.load.Ref(ptr + 52 + 784 + 4, undefined);
          if (A.load.Bool(ptr + 52 + 784 + 15)) {
            x["EAP"]["UseSystemCAs"]["UserPolicy"] = A.load.Bool(ptr + 52 + 784 + 8);
          } else {
            delete x["EAP"]["UseSystemCAs"]["UserPolicy"];
          }
          if (A.load.Bool(ptr + 52 + 784 + 16)) {
            x["EAP"]["UseSystemCAs"]["DevicePolicy"] = A.load.Bool(ptr + 52 + 784 + 9);
          } else {
            delete x["EAP"]["UseSystemCAs"]["DevicePolicy"];
          }
          if (A.load.Bool(ptr + 52 + 784 + 17)) {
            x["EAP"]["UseSystemCAs"]["UserSetting"] = A.load.Bool(ptr + 52 + 784 + 10);
          } else {
            delete x["EAP"]["UseSystemCAs"]["UserSetting"];
          }
          if (A.load.Bool(ptr + 52 + 784 + 18)) {
            x["EAP"]["UseSystemCAs"]["SharedSetting"] = A.load.Bool(ptr + 52 + 784 + 11);
          } else {
            delete x["EAP"]["UseSystemCAs"]["SharedSetting"];
          }
          if (A.load.Bool(ptr + 52 + 784 + 19)) {
            x["EAP"]["UseSystemCAs"]["UserEditable"] = A.load.Bool(ptr + 52 + 784 + 12);
          } else {
            delete x["EAP"]["UseSystemCAs"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 52 + 784 + 20)) {
            x["EAP"]["UseSystemCAs"]["DeviceEditable"] = A.load.Bool(ptr + 52 + 784 + 13);
          } else {
            delete x["EAP"]["UseSystemCAs"]["DeviceEditable"];
          }
        } else {
          delete x["EAP"]["UseSystemCAs"];
        }
      } else {
        delete x["EAP"];
      }
      if (A.load.Bool(ptr + 1024)) {
        x["Frequency"] = A.load.Int32(ptr + 860);
      } else {
        delete x["Frequency"];
      }
      x["FrequencyList"] = A.load.Ref(ptr + 864, undefined);
      if (A.load.Bool(ptr + 868 + 28)) {
        x["HexSSID"] = {};
        x["HexSSID"]["Active"] = A.load.Ref(ptr + 868 + 0, undefined);
        x["HexSSID"]["Effective"] = A.load.Ref(ptr + 868 + 4, undefined);
        x["HexSSID"]["UserPolicy"] = A.load.Ref(ptr + 868 + 8, undefined);
        x["HexSSID"]["DevicePolicy"] = A.load.Ref(ptr + 868 + 12, undefined);
        x["HexSSID"]["UserSetting"] = A.load.Ref(ptr + 868 + 16, undefined);
        x["HexSSID"]["SharedSetting"] = A.load.Ref(ptr + 868 + 20, undefined);
        if (A.load.Bool(ptr + 868 + 26)) {
          x["HexSSID"]["UserEditable"] = A.load.Bool(ptr + 868 + 24);
        } else {
          delete x["HexSSID"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 868 + 27)) {
          x["HexSSID"]["DeviceEditable"] = A.load.Bool(ptr + 868 + 25);
        } else {
          delete x["HexSSID"]["DeviceEditable"];
        }
      } else {
        delete x["HexSSID"];
      }
      if (A.load.Bool(ptr + 900 + 21)) {
        x["HiddenSSID"] = {};
        if (A.load.Bool(ptr + 900 + 14)) {
          x["HiddenSSID"]["Active"] = A.load.Bool(ptr + 900 + 0);
        } else {
          delete x["HiddenSSID"]["Active"];
        }
        x["HiddenSSID"]["Effective"] = A.load.Ref(ptr + 900 + 4, undefined);
        if (A.load.Bool(ptr + 900 + 15)) {
          x["HiddenSSID"]["UserPolicy"] = A.load.Bool(ptr + 900 + 8);
        } else {
          delete x["HiddenSSID"]["UserPolicy"];
        }
        if (A.load.Bool(ptr + 900 + 16)) {
          x["HiddenSSID"]["DevicePolicy"] = A.load.Bool(ptr + 900 + 9);
        } else {
          delete x["HiddenSSID"]["DevicePolicy"];
        }
        if (A.load.Bool(ptr + 900 + 17)) {
          x["HiddenSSID"]["UserSetting"] = A.load.Bool(ptr + 900 + 10);
        } else {
          delete x["HiddenSSID"]["UserSetting"];
        }
        if (A.load.Bool(ptr + 900 + 18)) {
          x["HiddenSSID"]["SharedSetting"] = A.load.Bool(ptr + 900 + 11);
        } else {
          delete x["HiddenSSID"]["SharedSetting"];
        }
        if (A.load.Bool(ptr + 900 + 19)) {
          x["HiddenSSID"]["UserEditable"] = A.load.Bool(ptr + 900 + 12);
        } else {
          delete x["HiddenSSID"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 900 + 20)) {
          x["HiddenSSID"]["DeviceEditable"] = A.load.Bool(ptr + 900 + 13);
        } else {
          delete x["HiddenSSID"]["DeviceEditable"];
        }
      } else {
        delete x["HiddenSSID"];
      }
      if (A.load.Bool(ptr + 924 + 28)) {
        x["Passphrase"] = {};
        x["Passphrase"]["Active"] = A.load.Ref(ptr + 924 + 0, undefined);
        x["Passphrase"]["Effective"] = A.load.Ref(ptr + 924 + 4, undefined);
        x["Passphrase"]["UserPolicy"] = A.load.Ref(ptr + 924 + 8, undefined);
        x["Passphrase"]["DevicePolicy"] = A.load.Ref(ptr + 924 + 12, undefined);
        x["Passphrase"]["UserSetting"] = A.load.Ref(ptr + 924 + 16, undefined);
        x["Passphrase"]["SharedSetting"] = A.load.Ref(ptr + 924 + 20, undefined);
        if (A.load.Bool(ptr + 924 + 26)) {
          x["Passphrase"]["UserEditable"] = A.load.Bool(ptr + 924 + 24);
        } else {
          delete x["Passphrase"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 924 + 27)) {
          x["Passphrase"]["DeviceEditable"] = A.load.Bool(ptr + 924 + 25);
        } else {
          delete x["Passphrase"]["DeviceEditable"];
        }
      } else {
        delete x["Passphrase"];
      }
      if (A.load.Bool(ptr + 956 + 28)) {
        x["SSID"] = {};
        x["SSID"]["Active"] = A.load.Ref(ptr + 956 + 0, undefined);
        x["SSID"]["Effective"] = A.load.Ref(ptr + 956 + 4, undefined);
        x["SSID"]["UserPolicy"] = A.load.Ref(ptr + 956 + 8, undefined);
        x["SSID"]["DevicePolicy"] = A.load.Ref(ptr + 956 + 12, undefined);
        x["SSID"]["UserSetting"] = A.load.Ref(ptr + 956 + 16, undefined);
        x["SSID"]["SharedSetting"] = A.load.Ref(ptr + 956 + 20, undefined);
        if (A.load.Bool(ptr + 956 + 26)) {
          x["SSID"]["UserEditable"] = A.load.Bool(ptr + 956 + 24);
        } else {
          delete x["SSID"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 956 + 27)) {
          x["SSID"]["DeviceEditable"] = A.load.Bool(ptr + 956 + 25);
        } else {
          delete x["SSID"]["DeviceEditable"];
        }
      } else {
        delete x["SSID"];
      }
      if (A.load.Bool(ptr + 988 + 28)) {
        x["Security"] = {};
        x["Security"]["Active"] = A.load.Ref(ptr + 988 + 0, undefined);
        x["Security"]["Effective"] = A.load.Ref(ptr + 988 + 4, undefined);
        x["Security"]["UserPolicy"] = A.load.Ref(ptr + 988 + 8, undefined);
        x["Security"]["DevicePolicy"] = A.load.Ref(ptr + 988 + 12, undefined);
        x["Security"]["UserSetting"] = A.load.Ref(ptr + 988 + 16, undefined);
        x["Security"]["SharedSetting"] = A.load.Ref(ptr + 988 + 20, undefined);
        if (A.load.Bool(ptr + 988 + 26)) {
          x["Security"]["UserEditable"] = A.load.Bool(ptr + 988 + 24);
        } else {
          delete x["Security"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 988 + 27)) {
          x["Security"]["DeviceEditable"] = A.load.Bool(ptr + 988 + 25);
        } else {
          delete x["Security"]["DeviceEditable"];
        }
      } else {
        delete x["Security"];
      }
      if (A.load.Bool(ptr + 1025)) {
        x["SignalStrength"] = A.load.Int32(ptr + 1020);
      } else {
        delete x["SignalStrength"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_ManagedProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 6509, false);

        A.store.Bool(ptr + 0 + 458, false);

        A.store.Bool(ptr + 0 + 0 + 21, false);
        A.store.Bool(ptr + 0 + 0 + 14, false);
        A.store.Bool(ptr + 0 + 0 + 0, false);
        A.store.Ref(ptr + 0 + 0 + 4, undefined);
        A.store.Bool(ptr + 0 + 0 + 15, false);
        A.store.Bool(ptr + 0 + 0 + 8, false);
        A.store.Bool(ptr + 0 + 0 + 16, false);
        A.store.Bool(ptr + 0 + 0 + 9, false);
        A.store.Bool(ptr + 0 + 0 + 17, false);
        A.store.Bool(ptr + 0 + 0 + 10, false);
        A.store.Bool(ptr + 0 + 0 + 18, false);
        A.store.Bool(ptr + 0 + 0 + 11, false);
        A.store.Bool(ptr + 0 + 0 + 19, false);
        A.store.Bool(ptr + 0 + 0 + 12, false);
        A.store.Bool(ptr + 0 + 0 + 20, false);
        A.store.Bool(ptr + 0 + 0 + 13, false);

        A.store.Bool(ptr + 0 + 24 + 221, false);

        A.store.Bool(ptr + 0 + 24 + 0 + 28, false);
        A.store.Ref(ptr + 0 + 24 + 0 + 0, undefined);
        A.store.Ref(ptr + 0 + 24 + 0 + 4, undefined);
        A.store.Ref(ptr + 0 + 24 + 0 + 8, undefined);
        A.store.Ref(ptr + 0 + 24 + 0 + 12, undefined);
        A.store.Ref(ptr + 0 + 24 + 0 + 16, undefined);
        A.store.Ref(ptr + 0 + 24 + 0 + 20, undefined);
        A.store.Bool(ptr + 0 + 24 + 0 + 26, false);
        A.store.Bool(ptr + 0 + 24 + 0 + 24, false);
        A.store.Bool(ptr + 0 + 24 + 0 + 27, false);
        A.store.Bool(ptr + 0 + 24 + 0 + 25, false);

        A.store.Bool(ptr + 0 + 24 + 32 + 28, false);
        A.store.Ref(ptr + 0 + 24 + 32 + 0, undefined);
        A.store.Ref(ptr + 0 + 24 + 32 + 4, undefined);
        A.store.Ref(ptr + 0 + 24 + 32 + 8, undefined);
        A.store.Ref(ptr + 0 + 24 + 32 + 12, undefined);
        A.store.Ref(ptr + 0 + 24 + 32 + 16, undefined);
        A.store.Ref(ptr + 0 + 24 + 32 + 20, undefined);
        A.store.Bool(ptr + 0 + 24 + 32 + 26, false);
        A.store.Bool(ptr + 0 + 24 + 32 + 24, false);
        A.store.Bool(ptr + 0 + 24 + 32 + 27, false);
        A.store.Bool(ptr + 0 + 24 + 32 + 25, false);

        A.store.Bool(ptr + 0 + 24 + 64 + 28, false);
        A.store.Ref(ptr + 0 + 24 + 64 + 0, undefined);
        A.store.Ref(ptr + 0 + 24 + 64 + 4, undefined);
        A.store.Ref(ptr + 0 + 24 + 64 + 8, undefined);
        A.store.Ref(ptr + 0 + 24 + 64 + 12, undefined);
        A.store.Ref(ptr + 0 + 24 + 64 + 16, undefined);
        A.store.Ref(ptr + 0 + 24 + 64 + 20, undefined);
        A.store.Bool(ptr + 0 + 24 + 64 + 26, false);
        A.store.Bool(ptr + 0 + 24 + 64 + 24, false);
        A.store.Bool(ptr + 0 + 24 + 64 + 27, false);
        A.store.Bool(ptr + 0 + 24 + 64 + 25, false);

        A.store.Bool(ptr + 0 + 24 + 96 + 28, false);
        A.store.Ref(ptr + 0 + 24 + 96 + 0, undefined);
        A.store.Ref(ptr + 0 + 24 + 96 + 4, undefined);
        A.store.Ref(ptr + 0 + 24 + 96 + 8, undefined);
        A.store.Ref(ptr + 0 + 24 + 96 + 12, undefined);
        A.store.Ref(ptr + 0 + 24 + 96 + 16, undefined);
        A.store.Ref(ptr + 0 + 24 + 96 + 20, undefined);
        A.store.Bool(ptr + 0 + 24 + 96 + 26, false);
        A.store.Bool(ptr + 0 + 24 + 96 + 24, false);
        A.store.Bool(ptr + 0 + 24 + 96 + 27, false);
        A.store.Bool(ptr + 0 + 24 + 96 + 25, false);

        A.store.Bool(ptr + 0 + 24 + 128 + 28, false);
        A.store.Ref(ptr + 0 + 24 + 128 + 0, undefined);
        A.store.Ref(ptr + 0 + 24 + 128 + 4, undefined);
        A.store.Ref(ptr + 0 + 24 + 128 + 8, undefined);
        A.store.Ref(ptr + 0 + 24 + 128 + 12, undefined);
        A.store.Ref(ptr + 0 + 24 + 128 + 16, undefined);
        A.store.Ref(ptr + 0 + 24 + 128 + 20, undefined);
        A.store.Bool(ptr + 0 + 24 + 128 + 26, false);
        A.store.Bool(ptr + 0 + 24 + 128 + 24, false);
        A.store.Bool(ptr + 0 + 24 + 128 + 27, false);
        A.store.Bool(ptr + 0 + 24 + 128 + 25, false);

        A.store.Bool(ptr + 0 + 24 + 160 + 28, false);
        A.store.Ref(ptr + 0 + 24 + 160 + 0, undefined);
        A.store.Ref(ptr + 0 + 24 + 160 + 4, undefined);
        A.store.Ref(ptr + 0 + 24 + 160 + 8, undefined);
        A.store.Ref(ptr + 0 + 24 + 160 + 12, undefined);
        A.store.Ref(ptr + 0 + 24 + 160 + 16, undefined);
        A.store.Ref(ptr + 0 + 24 + 160 + 20, undefined);
        A.store.Bool(ptr + 0 + 24 + 160 + 26, false);
        A.store.Bool(ptr + 0 + 24 + 160 + 24, false);
        A.store.Bool(ptr + 0 + 24 + 160 + 27, false);
        A.store.Bool(ptr + 0 + 24 + 160 + 25, false);

        A.store.Bool(ptr + 0 + 24 + 192 + 28, false);
        A.store.Ref(ptr + 0 + 24 + 192 + 0, undefined);
        A.store.Ref(ptr + 0 + 24 + 192 + 4, undefined);
        A.store.Ref(ptr + 0 + 24 + 192 + 8, undefined);
        A.store.Ref(ptr + 0 + 24 + 192 + 12, undefined);
        A.store.Ref(ptr + 0 + 24 + 192 + 16, undefined);
        A.store.Ref(ptr + 0 + 24 + 192 + 20, undefined);
        A.store.Bool(ptr + 0 + 24 + 192 + 26, false);
        A.store.Bool(ptr + 0 + 24 + 192 + 24, false);
        A.store.Bool(ptr + 0 + 24 + 192 + 27, false);
        A.store.Bool(ptr + 0 + 24 + 192 + 25, false);

        A.store.Bool(ptr + 0 + 248 + 28, false);
        A.store.Ref(ptr + 0 + 248 + 0, undefined);
        A.store.Ref(ptr + 0 + 248 + 4, undefined);
        A.store.Ref(ptr + 0 + 248 + 8, undefined);
        A.store.Ref(ptr + 0 + 248 + 12, undefined);
        A.store.Ref(ptr + 0 + 248 + 16, undefined);
        A.store.Ref(ptr + 0 + 248 + 20, undefined);
        A.store.Bool(ptr + 0 + 248 + 26, false);
        A.store.Bool(ptr + 0 + 248 + 24, false);
        A.store.Bool(ptr + 0 + 248 + 27, false);
        A.store.Bool(ptr + 0 + 248 + 25, false);
        A.store.Ref(ptr + 0 + 280, undefined);
        A.store.Enum(ptr + 0 + 284, -1);
        A.store.Bool(ptr + 0 + 453, false);
        A.store.Bool(ptr + 0 + 288, false);
        A.store.Ref(ptr + 0 + 292, undefined);
        A.store.Ref(ptr + 0 + 296, undefined);
        A.store.Ref(ptr + 0 + 300, undefined);
        A.store.Ref(ptr + 0 + 304, undefined);
        A.store.Ref(ptr + 0 + 308, undefined);

        A.store.Bool(ptr + 0 + 312 + 12, false);
        A.store.Ref(ptr + 0 + 312 + 0, undefined);
        A.store.Ref(ptr + 0 + 312 + 4, undefined);
        A.store.Ref(ptr + 0 + 312 + 8, undefined);
        A.store.Ref(ptr + 0 + 328, undefined);
        A.store.Ref(ptr + 0 + 332, undefined);

        A.store.Bool(ptr + 0 + 336 + 28, false);
        A.store.Ref(ptr + 0 + 336 + 0, undefined);
        A.store.Ref(ptr + 0 + 336 + 4, undefined);
        A.store.Ref(ptr + 0 + 336 + 8, undefined);
        A.store.Ref(ptr + 0 + 336 + 12, undefined);
        A.store.Ref(ptr + 0 + 336 + 16, undefined);
        A.store.Ref(ptr + 0 + 336 + 20, undefined);
        A.store.Ref(ptr + 0 + 336 + 24, undefined);
        A.store.Ref(ptr + 0 + 368, undefined);
        A.store.Ref(ptr + 0 + 372, undefined);
        A.store.Ref(ptr + 0 + 376, undefined);
        A.store.Ref(ptr + 0 + 380, undefined);
        A.store.Ref(ptr + 0 + 384, undefined);
        A.store.Ref(ptr + 0 + 388, undefined);

        A.store.Bool(ptr + 0 + 392 + 12, false);
        A.store.Ref(ptr + 0 + 392 + 0, undefined);
        A.store.Ref(ptr + 0 + 392 + 4, undefined);
        A.store.Ref(ptr + 0 + 392 + 8, undefined);
        A.store.Ref(ptr + 0 + 408, undefined);
        A.store.Bool(ptr + 0 + 454, false);
        A.store.Bool(ptr + 0 + 412, false);

        A.store.Bool(ptr + 0 + 416 + 12, false);
        A.store.Ref(ptr + 0 + 416 + 0, undefined);
        A.store.Ref(ptr + 0 + 416 + 4, undefined);
        A.store.Ref(ptr + 0 + 416 + 8, undefined);

        A.store.Bool(ptr + 0 + 432 + 14, false);
        A.store.Ref(ptr + 0 + 432 + 0, undefined);
        A.store.Bool(ptr + 0 + 432 + 12, false);
        A.store.Bool(ptr + 0 + 432 + 4, false);
        A.store.Bool(ptr + 0 + 432 + 13, false);
        A.store.Int32(ptr + 0 + 432 + 8, 0);
        A.store.Bool(ptr + 0 + 455, false);
        A.store.Bool(ptr + 0 + 447, false);
        A.store.Bool(ptr + 0 + 456, false);
        A.store.Int32(ptr + 0 + 448, 0);
        A.store.Bool(ptr + 0 + 457, false);
        A.store.Bool(ptr + 0 + 452, false);
        A.store.Bool(ptr + 6507, false);
        A.store.Bool(ptr + 459, false);
        A.store.Enum(ptr + 460, -1);
        A.store.Ref(ptr + 464, undefined);

        A.store.Bool(ptr + 468 + 863, false);

        A.store.Bool(ptr + 468 + 0 + 21, false);
        A.store.Bool(ptr + 468 + 0 + 14, false);
        A.store.Bool(ptr + 468 + 0 + 0, false);
        A.store.Ref(ptr + 468 + 0 + 4, undefined);
        A.store.Bool(ptr + 468 + 0 + 15, false);
        A.store.Bool(ptr + 468 + 0 + 8, false);
        A.store.Bool(ptr + 468 + 0 + 16, false);
        A.store.Bool(ptr + 468 + 0 + 9, false);
        A.store.Bool(ptr + 468 + 0 + 17, false);
        A.store.Bool(ptr + 468 + 0 + 10, false);
        A.store.Bool(ptr + 468 + 0 + 18, false);
        A.store.Bool(ptr + 468 + 0 + 11, false);
        A.store.Bool(ptr + 468 + 0 + 19, false);
        A.store.Bool(ptr + 468 + 0 + 12, false);
        A.store.Bool(ptr + 468 + 0 + 20, false);
        A.store.Bool(ptr + 468 + 0 + 13, false);

        A.store.Bool(ptr + 468 + 24 + 28, false);
        A.store.Ref(ptr + 468 + 24 + 0, undefined);
        A.store.Ref(ptr + 468 + 24 + 4, undefined);
        A.store.Ref(ptr + 468 + 24 + 8, undefined);
        A.store.Ref(ptr + 468 + 24 + 12, undefined);
        A.store.Ref(ptr + 468 + 24 + 16, undefined);
        A.store.Ref(ptr + 468 + 24 + 20, undefined);
        A.store.Bool(ptr + 468 + 24 + 26, false);
        A.store.Bool(ptr + 468 + 24 + 24, false);
        A.store.Bool(ptr + 468 + 24 + 27, false);
        A.store.Bool(ptr + 468 + 24 + 25, false);

        A.store.Bool(ptr + 468 + 56 + 806, false);

        A.store.Bool(ptr + 468 + 56 + 0 + 28, false);
        A.store.Ref(ptr + 468 + 56 + 0 + 0, undefined);
        A.store.Ref(ptr + 468 + 56 + 0 + 4, undefined);
        A.store.Ref(ptr + 468 + 56 + 0 + 8, undefined);
        A.store.Ref(ptr + 468 + 56 + 0 + 12, undefined);
        A.store.Ref(ptr + 468 + 56 + 0 + 16, undefined);
        A.store.Ref(ptr + 468 + 56 + 0 + 20, undefined);
        A.store.Bool(ptr + 468 + 56 + 0 + 26, false);
        A.store.Bool(ptr + 468 + 56 + 0 + 24, false);
        A.store.Bool(ptr + 468 + 56 + 0 + 27, false);
        A.store.Bool(ptr + 468 + 56 + 0 + 25, false);

        A.store.Bool(ptr + 468 + 56 + 32 + 318, false);

        A.store.Bool(ptr + 468 + 56 + 32 + 0 + 28, false);
        A.store.Ref(ptr + 468 + 56 + 32 + 0 + 0, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 0 + 4, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 0 + 8, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 0 + 12, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 0 + 16, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 0 + 20, undefined);
        A.store.Bool(ptr + 468 + 56 + 32 + 0 + 26, false);
        A.store.Bool(ptr + 468 + 56 + 32 + 0 + 24, false);
        A.store.Bool(ptr + 468 + 56 + 32 + 0 + 27, false);
        A.store.Bool(ptr + 468 + 56 + 32 + 0 + 25, false);

        A.store.Bool(ptr + 468 + 56 + 32 + 32 + 125, false);

        A.store.Bool(ptr + 468 + 56 + 32 + 32 + 0 + 28, false);
        A.store.Ref(ptr + 468 + 56 + 32 + 32 + 0 + 0, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 32 + 0 + 4, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 32 + 0 + 8, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 32 + 0 + 12, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 32 + 0 + 16, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 32 + 0 + 20, undefined);
        A.store.Bool(ptr + 468 + 56 + 32 + 32 + 0 + 26, false);
        A.store.Bool(ptr + 468 + 56 + 32 + 32 + 0 + 24, false);
        A.store.Bool(ptr + 468 + 56 + 32 + 32 + 0 + 27, false);
        A.store.Bool(ptr + 468 + 56 + 32 + 32 + 0 + 25, false);

        A.store.Bool(ptr + 468 + 56 + 32 + 32 + 32 + 28, false);
        A.store.Ref(ptr + 468 + 56 + 32 + 32 + 32 + 0, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 32 + 32 + 4, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 32 + 32 + 8, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 32 + 32 + 12, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 32 + 32 + 16, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 32 + 32 + 20, undefined);
        A.store.Bool(ptr + 468 + 56 + 32 + 32 + 32 + 26, false);
        A.store.Bool(ptr + 468 + 56 + 32 + 32 + 32 + 24, false);
        A.store.Bool(ptr + 468 + 56 + 32 + 32 + 32 + 27, false);
        A.store.Bool(ptr + 468 + 56 + 32 + 32 + 32 + 25, false);

        A.store.Bool(ptr + 468 + 56 + 32 + 32 + 64 + 28, false);
        A.store.Ref(ptr + 468 + 56 + 32 + 32 + 64 + 0, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 32 + 64 + 4, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 32 + 64 + 8, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 32 + 64 + 12, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 32 + 64 + 16, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 32 + 64 + 20, undefined);
        A.store.Bool(ptr + 468 + 56 + 32 + 32 + 64 + 26, false);
        A.store.Bool(ptr + 468 + 56 + 32 + 32 + 64 + 24, false);
        A.store.Bool(ptr + 468 + 56 + 32 + 32 + 64 + 27, false);
        A.store.Bool(ptr + 468 + 56 + 32 + 32 + 64 + 25, false);

        A.store.Bool(ptr + 468 + 56 + 32 + 32 + 96 + 28, false);
        A.store.Ref(ptr + 468 + 56 + 32 + 32 + 96 + 0, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 32 + 96 + 4, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 32 + 96 + 8, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 32 + 96 + 12, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 32 + 96 + 16, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 32 + 96 + 20, undefined);
        A.store.Bool(ptr + 468 + 56 + 32 + 32 + 96 + 26, false);
        A.store.Bool(ptr + 468 + 56 + 32 + 32 + 96 + 24, false);
        A.store.Bool(ptr + 468 + 56 + 32 + 32 + 96 + 27, false);
        A.store.Bool(ptr + 468 + 56 + 32 + 32 + 96 + 25, false);

        A.store.Bool(ptr + 468 + 56 + 32 + 160 + 28, false);
        A.store.Ref(ptr + 468 + 56 + 32 + 160 + 0, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 160 + 4, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 160 + 8, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 160 + 12, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 160 + 16, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 160 + 20, undefined);
        A.store.Bool(ptr + 468 + 56 + 32 + 160 + 26, false);
        A.store.Bool(ptr + 468 + 56 + 32 + 160 + 24, false);
        A.store.Bool(ptr + 468 + 56 + 32 + 160 + 27, false);
        A.store.Bool(ptr + 468 + 56 + 32 + 160 + 25, false);

        A.store.Bool(ptr + 468 + 56 + 32 + 192 + 125, false);

        A.store.Bool(ptr + 468 + 56 + 32 + 192 + 0 + 28, false);
        A.store.Ref(ptr + 468 + 56 + 32 + 192 + 0 + 0, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 192 + 0 + 4, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 192 + 0 + 8, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 192 + 0 + 12, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 192 + 0 + 16, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 192 + 0 + 20, undefined);
        A.store.Bool(ptr + 468 + 56 + 32 + 192 + 0 + 26, false);
        A.store.Bool(ptr + 468 + 56 + 32 + 192 + 0 + 24, false);
        A.store.Bool(ptr + 468 + 56 + 32 + 192 + 0 + 27, false);
        A.store.Bool(ptr + 468 + 56 + 32 + 192 + 0 + 25, false);

        A.store.Bool(ptr + 468 + 56 + 32 + 192 + 32 + 28, false);
        A.store.Ref(ptr + 468 + 56 + 32 + 192 + 32 + 0, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 192 + 32 + 4, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 192 + 32 + 8, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 192 + 32 + 12, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 192 + 32 + 16, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 192 + 32 + 20, undefined);
        A.store.Bool(ptr + 468 + 56 + 32 + 192 + 32 + 26, false);
        A.store.Bool(ptr + 468 + 56 + 32 + 192 + 32 + 24, false);
        A.store.Bool(ptr + 468 + 56 + 32 + 192 + 32 + 27, false);
        A.store.Bool(ptr + 468 + 56 + 32 + 192 + 32 + 25, false);

        A.store.Bool(ptr + 468 + 56 + 32 + 192 + 64 + 28, false);
        A.store.Ref(ptr + 468 + 56 + 32 + 192 + 64 + 0, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 192 + 64 + 4, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 192 + 64 + 8, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 192 + 64 + 12, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 192 + 64 + 16, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 192 + 64 + 20, undefined);
        A.store.Bool(ptr + 468 + 56 + 32 + 192 + 64 + 26, false);
        A.store.Bool(ptr + 468 + 56 + 32 + 192 + 64 + 24, false);
        A.store.Bool(ptr + 468 + 56 + 32 + 192 + 64 + 27, false);
        A.store.Bool(ptr + 468 + 56 + 32 + 192 + 64 + 25, false);

        A.store.Bool(ptr + 468 + 56 + 32 + 192 + 96 + 28, false);
        A.store.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 0, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 4, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 8, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 12, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 16, undefined);
        A.store.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 20, undefined);
        A.store.Bool(ptr + 468 + 56 + 32 + 192 + 96 + 26, false);
        A.store.Bool(ptr + 468 + 56 + 32 + 192 + 96 + 24, false);
        A.store.Bool(ptr + 468 + 56 + 32 + 192 + 96 + 27, false);
        A.store.Bool(ptr + 468 + 56 + 32 + 192 + 96 + 25, false);

        A.store.Bool(ptr + 468 + 56 + 352 + 28, false);
        A.store.Ref(ptr + 468 + 56 + 352 + 0, undefined);
        A.store.Ref(ptr + 468 + 56 + 352 + 4, undefined);
        A.store.Ref(ptr + 468 + 56 + 352 + 8, undefined);
        A.store.Ref(ptr + 468 + 56 + 352 + 12, undefined);
        A.store.Ref(ptr + 468 + 56 + 352 + 16, undefined);
        A.store.Ref(ptr + 468 + 56 + 352 + 20, undefined);
        A.store.Bool(ptr + 468 + 56 + 352 + 26, false);
        A.store.Bool(ptr + 468 + 56 + 352 + 24, false);
        A.store.Bool(ptr + 468 + 56 + 352 + 27, false);
        A.store.Bool(ptr + 468 + 56 + 352 + 25, false);

        A.store.Bool(ptr + 468 + 56 + 384 + 28, false);
        A.store.Ref(ptr + 468 + 56 + 384 + 0, undefined);
        A.store.Ref(ptr + 468 + 56 + 384 + 4, undefined);
        A.store.Ref(ptr + 468 + 56 + 384 + 8, undefined);
        A.store.Ref(ptr + 468 + 56 + 384 + 12, undefined);
        A.store.Ref(ptr + 468 + 56 + 384 + 16, undefined);
        A.store.Ref(ptr + 468 + 56 + 384 + 20, undefined);
        A.store.Bool(ptr + 468 + 56 + 384 + 26, false);
        A.store.Bool(ptr + 468 + 56 + 384 + 24, false);
        A.store.Bool(ptr + 468 + 56 + 384 + 27, false);
        A.store.Bool(ptr + 468 + 56 + 384 + 25, false);

        A.store.Bool(ptr + 468 + 56 + 416 + 28, false);
        A.store.Ref(ptr + 468 + 56 + 416 + 0, undefined);
        A.store.Ref(ptr + 468 + 56 + 416 + 4, undefined);
        A.store.Ref(ptr + 468 + 56 + 416 + 8, undefined);
        A.store.Ref(ptr + 468 + 56 + 416 + 12, undefined);
        A.store.Ref(ptr + 468 + 56 + 416 + 16, undefined);
        A.store.Ref(ptr + 468 + 56 + 416 + 20, undefined);
        A.store.Bool(ptr + 468 + 56 + 416 + 26, false);
        A.store.Bool(ptr + 468 + 56 + 416 + 24, false);
        A.store.Bool(ptr + 468 + 56 + 416 + 27, false);
        A.store.Bool(ptr + 468 + 56 + 416 + 25, false);

        A.store.Bool(ptr + 468 + 56 + 448 + 28, false);
        A.store.Ref(ptr + 468 + 56 + 448 + 0, undefined);
        A.store.Ref(ptr + 468 + 56 + 448 + 4, undefined);
        A.store.Ref(ptr + 468 + 56 + 448 + 8, undefined);
        A.store.Ref(ptr + 468 + 56 + 448 + 12, undefined);
        A.store.Ref(ptr + 468 + 56 + 448 + 16, undefined);
        A.store.Ref(ptr + 468 + 56 + 448 + 20, undefined);
        A.store.Bool(ptr + 468 + 56 + 448 + 26, false);
        A.store.Bool(ptr + 468 + 56 + 448 + 24, false);
        A.store.Bool(ptr + 468 + 56 + 448 + 27, false);
        A.store.Bool(ptr + 468 + 56 + 448 + 25, false);

        A.store.Bool(ptr + 468 + 56 + 480 + 28, false);
        A.store.Ref(ptr + 468 + 56 + 480 + 0, undefined);
        A.store.Ref(ptr + 468 + 56 + 480 + 4, undefined);
        A.store.Ref(ptr + 468 + 56 + 480 + 8, undefined);
        A.store.Ref(ptr + 468 + 56 + 480 + 12, undefined);
        A.store.Ref(ptr + 468 + 56 + 480 + 16, undefined);
        A.store.Ref(ptr + 468 + 56 + 480 + 20, undefined);
        A.store.Bool(ptr + 468 + 56 + 480 + 26, false);
        A.store.Bool(ptr + 468 + 56 + 480 + 24, false);
        A.store.Bool(ptr + 468 + 56 + 480 + 27, false);
        A.store.Bool(ptr + 468 + 56 + 480 + 25, false);

        A.store.Bool(ptr + 468 + 56 + 512 + 28, false);
        A.store.Ref(ptr + 468 + 56 + 512 + 0, undefined);
        A.store.Ref(ptr + 468 + 56 + 512 + 4, undefined);
        A.store.Ref(ptr + 468 + 56 + 512 + 8, undefined);
        A.store.Ref(ptr + 468 + 56 + 512 + 12, undefined);
        A.store.Ref(ptr + 468 + 56 + 512 + 16, undefined);
        A.store.Ref(ptr + 468 + 56 + 512 + 20, undefined);
        A.store.Bool(ptr + 468 + 56 + 512 + 26, false);
        A.store.Bool(ptr + 468 + 56 + 512 + 24, false);
        A.store.Bool(ptr + 468 + 56 + 512 + 27, false);
        A.store.Bool(ptr + 468 + 56 + 512 + 25, false);

        A.store.Bool(ptr + 468 + 56 + 544 + 28, false);
        A.store.Ref(ptr + 468 + 56 + 544 + 0, undefined);
        A.store.Ref(ptr + 468 + 56 + 544 + 4, undefined);
        A.store.Ref(ptr + 468 + 56 + 544 + 8, undefined);
        A.store.Ref(ptr + 468 + 56 + 544 + 12, undefined);
        A.store.Ref(ptr + 468 + 56 + 544 + 16, undefined);
        A.store.Ref(ptr + 468 + 56 + 544 + 20, undefined);
        A.store.Bool(ptr + 468 + 56 + 544 + 26, false);
        A.store.Bool(ptr + 468 + 56 + 544 + 24, false);
        A.store.Bool(ptr + 468 + 56 + 544 + 27, false);
        A.store.Bool(ptr + 468 + 56 + 544 + 25, false);

        A.store.Bool(ptr + 468 + 56 + 576 + 28, false);
        A.store.Ref(ptr + 468 + 56 + 576 + 0, undefined);
        A.store.Ref(ptr + 468 + 56 + 576 + 4, undefined);
        A.store.Ref(ptr + 468 + 56 + 576 + 8, undefined);
        A.store.Ref(ptr + 468 + 56 + 576 + 12, undefined);
        A.store.Ref(ptr + 468 + 56 + 576 + 16, undefined);
        A.store.Ref(ptr + 468 + 56 + 576 + 20, undefined);
        A.store.Bool(ptr + 468 + 56 + 576 + 26, false);
        A.store.Bool(ptr + 468 + 56 + 576 + 24, false);
        A.store.Bool(ptr + 468 + 56 + 576 + 27, false);
        A.store.Bool(ptr + 468 + 56 + 576 + 25, false);

        A.store.Bool(ptr + 468 + 56 + 608 + 21, false);
        A.store.Bool(ptr + 468 + 56 + 608 + 14, false);
        A.store.Bool(ptr + 468 + 56 + 608 + 0, false);
        A.store.Ref(ptr + 468 + 56 + 608 + 4, undefined);
        A.store.Bool(ptr + 468 + 56 + 608 + 15, false);
        A.store.Bool(ptr + 468 + 56 + 608 + 8, false);
        A.store.Bool(ptr + 468 + 56 + 608 + 16, false);
        A.store.Bool(ptr + 468 + 56 + 608 + 9, false);
        A.store.Bool(ptr + 468 + 56 + 608 + 17, false);
        A.store.Bool(ptr + 468 + 56 + 608 + 10, false);
        A.store.Bool(ptr + 468 + 56 + 608 + 18, false);
        A.store.Bool(ptr + 468 + 56 + 608 + 11, false);
        A.store.Bool(ptr + 468 + 56 + 608 + 19, false);
        A.store.Bool(ptr + 468 + 56 + 608 + 12, false);
        A.store.Bool(ptr + 468 + 56 + 608 + 20, false);
        A.store.Bool(ptr + 468 + 56 + 608 + 13, false);

        A.store.Bool(ptr + 468 + 56 + 632 + 28, false);
        A.store.Ref(ptr + 468 + 56 + 632 + 0, undefined);
        A.store.Ref(ptr + 468 + 56 + 632 + 4, undefined);
        A.store.Ref(ptr + 468 + 56 + 632 + 8, undefined);
        A.store.Ref(ptr + 468 + 56 + 632 + 12, undefined);
        A.store.Ref(ptr + 468 + 56 + 632 + 16, undefined);
        A.store.Ref(ptr + 468 + 56 + 632 + 20, undefined);
        A.store.Bool(ptr + 468 + 56 + 632 + 26, false);
        A.store.Bool(ptr + 468 + 56 + 632 + 24, false);
        A.store.Bool(ptr + 468 + 56 + 632 + 27, false);
        A.store.Bool(ptr + 468 + 56 + 632 + 25, false);

        A.store.Bool(ptr + 468 + 56 + 664 + 28, false);
        A.store.Ref(ptr + 468 + 56 + 664 + 0, undefined);
        A.store.Ref(ptr + 468 + 56 + 664 + 4, undefined);
        A.store.Ref(ptr + 468 + 56 + 664 + 8, undefined);
        A.store.Ref(ptr + 468 + 56 + 664 + 12, undefined);
        A.store.Ref(ptr + 468 + 56 + 664 + 16, undefined);
        A.store.Ref(ptr + 468 + 56 + 664 + 20, undefined);
        A.store.Bool(ptr + 468 + 56 + 664 + 26, false);
        A.store.Bool(ptr + 468 + 56 + 664 + 24, false);
        A.store.Bool(ptr + 468 + 56 + 664 + 27, false);
        A.store.Bool(ptr + 468 + 56 + 664 + 25, false);

        A.store.Bool(ptr + 468 + 56 + 696 + 28, false);
        A.store.Ref(ptr + 468 + 56 + 696 + 0, undefined);
        A.store.Ref(ptr + 468 + 56 + 696 + 4, undefined);
        A.store.Ref(ptr + 468 + 56 + 696 + 8, undefined);
        A.store.Ref(ptr + 468 + 56 + 696 + 12, undefined);
        A.store.Ref(ptr + 468 + 56 + 696 + 16, undefined);
        A.store.Ref(ptr + 468 + 56 + 696 + 20, undefined);
        A.store.Bool(ptr + 468 + 56 + 696 + 26, false);
        A.store.Bool(ptr + 468 + 56 + 696 + 24, false);
        A.store.Bool(ptr + 468 + 56 + 696 + 27, false);
        A.store.Bool(ptr + 468 + 56 + 696 + 25, false);

        A.store.Bool(ptr + 468 + 56 + 728 + 28, false);
        A.store.Ref(ptr + 468 + 56 + 728 + 0, undefined);
        A.store.Ref(ptr + 468 + 56 + 728 + 4, undefined);
        A.store.Ref(ptr + 468 + 56 + 728 + 8, undefined);
        A.store.Ref(ptr + 468 + 56 + 728 + 12, undefined);
        A.store.Ref(ptr + 468 + 56 + 728 + 16, undefined);
        A.store.Ref(ptr + 468 + 56 + 728 + 20, undefined);
        A.store.Bool(ptr + 468 + 56 + 728 + 26, false);
        A.store.Bool(ptr + 468 + 56 + 728 + 24, false);
        A.store.Bool(ptr + 468 + 56 + 728 + 27, false);
        A.store.Bool(ptr + 468 + 56 + 728 + 25, false);

        A.store.Bool(ptr + 468 + 56 + 760 + 21, false);
        A.store.Bool(ptr + 468 + 56 + 760 + 14, false);
        A.store.Bool(ptr + 468 + 56 + 760 + 0, false);
        A.store.Ref(ptr + 468 + 56 + 760 + 4, undefined);
        A.store.Bool(ptr + 468 + 56 + 760 + 15, false);
        A.store.Bool(ptr + 468 + 56 + 760 + 8, false);
        A.store.Bool(ptr + 468 + 56 + 760 + 16, false);
        A.store.Bool(ptr + 468 + 56 + 760 + 9, false);
        A.store.Bool(ptr + 468 + 56 + 760 + 17, false);
        A.store.Bool(ptr + 468 + 56 + 760 + 10, false);
        A.store.Bool(ptr + 468 + 56 + 760 + 18, false);
        A.store.Bool(ptr + 468 + 56 + 760 + 11, false);
        A.store.Bool(ptr + 468 + 56 + 760 + 19, false);
        A.store.Bool(ptr + 468 + 56 + 760 + 12, false);
        A.store.Bool(ptr + 468 + 56 + 760 + 20, false);
        A.store.Bool(ptr + 468 + 56 + 760 + 13, false);

        A.store.Bool(ptr + 468 + 56 + 784 + 21, false);
        A.store.Bool(ptr + 468 + 56 + 784 + 14, false);
        A.store.Bool(ptr + 468 + 56 + 784 + 0, false);
        A.store.Ref(ptr + 468 + 56 + 784 + 4, undefined);
        A.store.Bool(ptr + 468 + 56 + 784 + 15, false);
        A.store.Bool(ptr + 468 + 56 + 784 + 8, false);
        A.store.Bool(ptr + 468 + 56 + 784 + 16, false);
        A.store.Bool(ptr + 468 + 56 + 784 + 9, false);
        A.store.Bool(ptr + 468 + 56 + 784 + 17, false);
        A.store.Bool(ptr + 468 + 56 + 784 + 10, false);
        A.store.Bool(ptr + 468 + 56 + 784 + 18, false);
        A.store.Bool(ptr + 468 + 56 + 784 + 11, false);
        A.store.Bool(ptr + 468 + 56 + 784 + 19, false);
        A.store.Bool(ptr + 468 + 56 + 784 + 12, false);
        A.store.Bool(ptr + 468 + 56 + 784 + 20, false);
        A.store.Bool(ptr + 468 + 56 + 784 + 13, false);
        A.store.Ref(ptr + 1332, undefined);

        A.store.Bool(ptr + 1336 + 28, false);
        A.store.Enum(ptr + 1336 + 0, -1);
        A.store.Ref(ptr + 1336 + 4, undefined);
        A.store.Enum(ptr + 1336 + 8, -1);
        A.store.Enum(ptr + 1336 + 12, -1);
        A.store.Enum(ptr + 1336 + 16, -1);
        A.store.Enum(ptr + 1336 + 20, -1);
        A.store.Bool(ptr + 1336 + 26, false);
        A.store.Bool(ptr + 1336 + 24, false);
        A.store.Bool(ptr + 1336 + 27, false);
        A.store.Bool(ptr + 1336 + 25, false);
        A.store.Ref(ptr + 1368, undefined);
        A.store.Ref(ptr + 1372, undefined);

        A.store.Bool(ptr + 1376 + 21, false);
        A.store.Bool(ptr + 1376 + 14, false);
        A.store.Bool(ptr + 1376 + 0, false);
        A.store.Ref(ptr + 1376 + 4, undefined);
        A.store.Bool(ptr + 1376 + 15, false);
        A.store.Bool(ptr + 1376 + 8, false);
        A.store.Bool(ptr + 1376 + 16, false);
        A.store.Bool(ptr + 1376 + 9, false);
        A.store.Bool(ptr + 1376 + 17, false);
        A.store.Bool(ptr + 1376 + 10, false);
        A.store.Bool(ptr + 1376 + 18, false);
        A.store.Bool(ptr + 1376 + 11, false);
        A.store.Bool(ptr + 1376 + 19, false);
        A.store.Bool(ptr + 1376 + 12, false);
        A.store.Bool(ptr + 1376 + 20, false);
        A.store.Bool(ptr + 1376 + 13, false);

        A.store.Bool(ptr + 1400 + 28, false);
        A.store.Ref(ptr + 1400 + 0, undefined);
        A.store.Ref(ptr + 1400 + 4, undefined);
        A.store.Ref(ptr + 1400 + 8, undefined);
        A.store.Ref(ptr + 1400 + 12, undefined);
        A.store.Ref(ptr + 1400 + 16, undefined);
        A.store.Ref(ptr + 1400 + 20, undefined);
        A.store.Bool(ptr + 1400 + 26, false);
        A.store.Bool(ptr + 1400 + 24, false);
        A.store.Bool(ptr + 1400 + 27, false);
        A.store.Bool(ptr + 1400 + 25, false);

        A.store.Bool(ptr + 1432 + 28, false);
        A.store.Enum(ptr + 1432 + 0, -1);
        A.store.Ref(ptr + 1432 + 4, undefined);
        A.store.Enum(ptr + 1432 + 8, -1);
        A.store.Enum(ptr + 1432 + 12, -1);
        A.store.Enum(ptr + 1432 + 16, -1);
        A.store.Enum(ptr + 1432 + 20, -1);
        A.store.Bool(ptr + 1432 + 26, false);
        A.store.Bool(ptr + 1432 + 24, false);
        A.store.Bool(ptr + 1432 + 27, false);
        A.store.Bool(ptr + 1432 + 25, false);

        A.store.Bool(ptr + 1464 + 33, false);
        A.store.Bool(ptr + 1464 + 26, false);
        A.store.Int32(ptr + 1464 + 0, 0);
        A.store.Ref(ptr + 1464 + 4, undefined);
        A.store.Bool(ptr + 1464 + 27, false);
        A.store.Int32(ptr + 1464 + 8, 0);
        A.store.Bool(ptr + 1464 + 28, false);
        A.store.Int32(ptr + 1464 + 12, 0);
        A.store.Bool(ptr + 1464 + 29, false);
        A.store.Int32(ptr + 1464 + 16, 0);
        A.store.Bool(ptr + 1464 + 30, false);
        A.store.Int32(ptr + 1464 + 20, 0);
        A.store.Bool(ptr + 1464 + 31, false);
        A.store.Bool(ptr + 1464 + 24, false);
        A.store.Bool(ptr + 1464 + 32, false);
        A.store.Bool(ptr + 1464 + 25, false);

        A.store.Bool(ptr + 1500 + 365, false);

        A.store.Bool(ptr + 1500 + 0 + 28, false);
        A.store.Enum(ptr + 1500 + 0 + 0, -1);
        A.store.Ref(ptr + 1500 + 0 + 4, undefined);
        A.store.Enum(ptr + 1500 + 0 + 8, -1);
        A.store.Enum(ptr + 1500 + 0 + 12, -1);
        A.store.Enum(ptr + 1500 + 0 + 16, -1);
        A.store.Enum(ptr + 1500 + 0 + 20, -1);
        A.store.Bool(ptr + 1500 + 0 + 26, false);
        A.store.Bool(ptr + 1500 + 0 + 24, false);
        A.store.Bool(ptr + 1500 + 0 + 27, false);
        A.store.Bool(ptr + 1500 + 0 + 25, false);

        A.store.Bool(ptr + 1500 + 32 + 271, false);

        A.store.Bool(ptr + 1500 + 32 + 0 + 66, false);

        A.store.Bool(ptr + 1500 + 32 + 0 + 0 + 28, false);
        A.store.Ref(ptr + 1500 + 32 + 0 + 0 + 0, undefined);
        A.store.Ref(ptr + 1500 + 32 + 0 + 0 + 4, undefined);
        A.store.Ref(ptr + 1500 + 32 + 0 + 0 + 8, undefined);
        A.store.Ref(ptr + 1500 + 32 + 0 + 0 + 12, undefined);
        A.store.Ref(ptr + 1500 + 32 + 0 + 0 + 16, undefined);
        A.store.Ref(ptr + 1500 + 32 + 0 + 0 + 20, undefined);
        A.store.Bool(ptr + 1500 + 32 + 0 + 0 + 26, false);
        A.store.Bool(ptr + 1500 + 32 + 0 + 0 + 24, false);
        A.store.Bool(ptr + 1500 + 32 + 0 + 0 + 27, false);
        A.store.Bool(ptr + 1500 + 32 + 0 + 0 + 25, false);

        A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 33, false);
        A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 26, false);
        A.store.Int32(ptr + 1500 + 32 + 0 + 32 + 0, 0);
        A.store.Ref(ptr + 1500 + 32 + 0 + 32 + 4, undefined);
        A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 27, false);
        A.store.Int32(ptr + 1500 + 32 + 0 + 32 + 8, 0);
        A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 28, false);
        A.store.Int32(ptr + 1500 + 32 + 0 + 32 + 12, 0);
        A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 29, false);
        A.store.Int32(ptr + 1500 + 32 + 0 + 32 + 16, 0);
        A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 30, false);
        A.store.Int32(ptr + 1500 + 32 + 0 + 32 + 20, 0);
        A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 31, false);
        A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 24, false);
        A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 32, false);
        A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 25, false);

        A.store.Bool(ptr + 1500 + 32 + 68 + 66, false);

        A.store.Bool(ptr + 1500 + 32 + 68 + 0 + 28, false);
        A.store.Ref(ptr + 1500 + 32 + 68 + 0 + 0, undefined);
        A.store.Ref(ptr + 1500 + 32 + 68 + 0 + 4, undefined);
        A.store.Ref(ptr + 1500 + 32 + 68 + 0 + 8, undefined);
        A.store.Ref(ptr + 1500 + 32 + 68 + 0 + 12, undefined);
        A.store.Ref(ptr + 1500 + 32 + 68 + 0 + 16, undefined);
        A.store.Ref(ptr + 1500 + 32 + 68 + 0 + 20, undefined);
        A.store.Bool(ptr + 1500 + 32 + 68 + 0 + 26, false);
        A.store.Bool(ptr + 1500 + 32 + 68 + 0 + 24, false);
        A.store.Bool(ptr + 1500 + 32 + 68 + 0 + 27, false);
        A.store.Bool(ptr + 1500 + 32 + 68 + 0 + 25, false);

        A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 33, false);
        A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 26, false);
        A.store.Int32(ptr + 1500 + 32 + 68 + 32 + 0, 0);
        A.store.Ref(ptr + 1500 + 32 + 68 + 32 + 4, undefined);
        A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 27, false);
        A.store.Int32(ptr + 1500 + 32 + 68 + 32 + 8, 0);
        A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 28, false);
        A.store.Int32(ptr + 1500 + 32 + 68 + 32 + 12, 0);
        A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 29, false);
        A.store.Int32(ptr + 1500 + 32 + 68 + 32 + 16, 0);
        A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 30, false);
        A.store.Int32(ptr + 1500 + 32 + 68 + 32 + 20, 0);
        A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 31, false);
        A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 24, false);
        A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 32, false);
        A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 25, false);

        A.store.Bool(ptr + 1500 + 32 + 136 + 66, false);

        A.store.Bool(ptr + 1500 + 32 + 136 + 0 + 28, false);
        A.store.Ref(ptr + 1500 + 32 + 136 + 0 + 0, undefined);
        A.store.Ref(ptr + 1500 + 32 + 136 + 0 + 4, undefined);
        A.store.Ref(ptr + 1500 + 32 + 136 + 0 + 8, undefined);
        A.store.Ref(ptr + 1500 + 32 + 136 + 0 + 12, undefined);
        A.store.Ref(ptr + 1500 + 32 + 136 + 0 + 16, undefined);
        A.store.Ref(ptr + 1500 + 32 + 136 + 0 + 20, undefined);
        A.store.Bool(ptr + 1500 + 32 + 136 + 0 + 26, false);
        A.store.Bool(ptr + 1500 + 32 + 136 + 0 + 24, false);
        A.store.Bool(ptr + 1500 + 32 + 136 + 0 + 27, false);
        A.store.Bool(ptr + 1500 + 32 + 136 + 0 + 25, false);

        A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 33, false);
        A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 26, false);
        A.store.Int32(ptr + 1500 + 32 + 136 + 32 + 0, 0);
        A.store.Ref(ptr + 1500 + 32 + 136 + 32 + 4, undefined);
        A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 27, false);
        A.store.Int32(ptr + 1500 + 32 + 136 + 32 + 8, 0);
        A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 28, false);
        A.store.Int32(ptr + 1500 + 32 + 136 + 32 + 12, 0);
        A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 29, false);
        A.store.Int32(ptr + 1500 + 32 + 136 + 32 + 16, 0);
        A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 30, false);
        A.store.Int32(ptr + 1500 + 32 + 136 + 32 + 20, 0);
        A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 31, false);
        A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 24, false);
        A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 32, false);
        A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 25, false);

        A.store.Bool(ptr + 1500 + 32 + 204 + 66, false);

        A.store.Bool(ptr + 1500 + 32 + 204 + 0 + 28, false);
        A.store.Ref(ptr + 1500 + 32 + 204 + 0 + 0, undefined);
        A.store.Ref(ptr + 1500 + 32 + 204 + 0 + 4, undefined);
        A.store.Ref(ptr + 1500 + 32 + 204 + 0 + 8, undefined);
        A.store.Ref(ptr + 1500 + 32 + 204 + 0 + 12, undefined);
        A.store.Ref(ptr + 1500 + 32 + 204 + 0 + 16, undefined);
        A.store.Ref(ptr + 1500 + 32 + 204 + 0 + 20, undefined);
        A.store.Bool(ptr + 1500 + 32 + 204 + 0 + 26, false);
        A.store.Bool(ptr + 1500 + 32 + 204 + 0 + 24, false);
        A.store.Bool(ptr + 1500 + 32 + 204 + 0 + 27, false);
        A.store.Bool(ptr + 1500 + 32 + 204 + 0 + 25, false);

        A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 33, false);
        A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 26, false);
        A.store.Int32(ptr + 1500 + 32 + 204 + 32 + 0, 0);
        A.store.Ref(ptr + 1500 + 32 + 204 + 32 + 4, undefined);
        A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 27, false);
        A.store.Int32(ptr + 1500 + 32 + 204 + 32 + 8, 0);
        A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 28, false);
        A.store.Int32(ptr + 1500 + 32 + 204 + 32 + 12, 0);
        A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 29, false);
        A.store.Int32(ptr + 1500 + 32 + 204 + 32 + 16, 0);
        A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 30, false);
        A.store.Int32(ptr + 1500 + 32 + 204 + 32 + 20, 0);
        A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 31, false);
        A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 24, false);
        A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 32, false);
        A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 25, false);

        A.store.Bool(ptr + 1500 + 304 + 28, false);
        A.store.Ref(ptr + 1500 + 304 + 0, undefined);
        A.store.Ref(ptr + 1500 + 304 + 4, undefined);
        A.store.Ref(ptr + 1500 + 304 + 8, undefined);
        A.store.Ref(ptr + 1500 + 304 + 12, undefined);
        A.store.Ref(ptr + 1500 + 304 + 16, undefined);
        A.store.Ref(ptr + 1500 + 304 + 20, undefined);
        A.store.Bool(ptr + 1500 + 304 + 26, false);
        A.store.Bool(ptr + 1500 + 304 + 24, false);
        A.store.Bool(ptr + 1500 + 304 + 27, false);
        A.store.Bool(ptr + 1500 + 304 + 25, false);

        A.store.Bool(ptr + 1500 + 336 + 28, false);
        A.store.Ref(ptr + 1500 + 336 + 0, undefined);
        A.store.Ref(ptr + 1500 + 336 + 4, undefined);
        A.store.Ref(ptr + 1500 + 336 + 8, undefined);
        A.store.Ref(ptr + 1500 + 336 + 12, undefined);
        A.store.Ref(ptr + 1500 + 336 + 16, undefined);
        A.store.Ref(ptr + 1500 + 336 + 20, undefined);
        A.store.Bool(ptr + 1500 + 336 + 26, false);
        A.store.Bool(ptr + 1500 + 336 + 24, false);
        A.store.Bool(ptr + 1500 + 336 + 27, false);
        A.store.Bool(ptr + 1500 + 336 + 25, false);
        A.store.Bool(ptr + 6508, false);
        A.store.Bool(ptr + 1866, false);

        A.store.Bool(ptr + 1868 + 193, false);

        A.store.Bool(ptr + 1868 + 0 + 28, false);
        A.store.Ref(ptr + 1868 + 0 + 0, undefined);
        A.store.Ref(ptr + 1868 + 0 + 4, undefined);
        A.store.Ref(ptr + 1868 + 0 + 8, undefined);
        A.store.Ref(ptr + 1868 + 0 + 12, undefined);
        A.store.Ref(ptr + 1868 + 0 + 16, undefined);
        A.store.Ref(ptr + 1868 + 0 + 20, undefined);
        A.store.Bool(ptr + 1868 + 0 + 26, false);
        A.store.Bool(ptr + 1868 + 0 + 24, false);
        A.store.Bool(ptr + 1868 + 0 + 27, false);
        A.store.Bool(ptr + 1868 + 0 + 25, false);

        A.store.Bool(ptr + 1868 + 32 + 28, false);
        A.store.Ref(ptr + 1868 + 32 + 0, undefined);
        A.store.Ref(ptr + 1868 + 32 + 4, undefined);
        A.store.Ref(ptr + 1868 + 32 + 8, undefined);
        A.store.Ref(ptr + 1868 + 32 + 12, undefined);
        A.store.Ref(ptr + 1868 + 32 + 16, undefined);
        A.store.Ref(ptr + 1868 + 32 + 20, undefined);
        A.store.Bool(ptr + 1868 + 32 + 26, false);
        A.store.Bool(ptr + 1868 + 32 + 24, false);
        A.store.Bool(ptr + 1868 + 32 + 27, false);
        A.store.Bool(ptr + 1868 + 32 + 25, false);

        A.store.Bool(ptr + 1868 + 64 + 28, false);
        A.store.Ref(ptr + 1868 + 64 + 0, undefined);
        A.store.Ref(ptr + 1868 + 64 + 4, undefined);
        A.store.Ref(ptr + 1868 + 64 + 8, undefined);
        A.store.Ref(ptr + 1868 + 64 + 12, undefined);
        A.store.Ref(ptr + 1868 + 64 + 16, undefined);
        A.store.Ref(ptr + 1868 + 64 + 20, undefined);
        A.store.Bool(ptr + 1868 + 64 + 26, false);
        A.store.Bool(ptr + 1868 + 64 + 24, false);
        A.store.Bool(ptr + 1868 + 64 + 27, false);
        A.store.Bool(ptr + 1868 + 64 + 25, false);

        A.store.Bool(ptr + 1868 + 96 + 33, false);
        A.store.Bool(ptr + 1868 + 96 + 26, false);
        A.store.Int32(ptr + 1868 + 96 + 0, 0);
        A.store.Ref(ptr + 1868 + 96 + 4, undefined);
        A.store.Bool(ptr + 1868 + 96 + 27, false);
        A.store.Int32(ptr + 1868 + 96 + 8, 0);
        A.store.Bool(ptr + 1868 + 96 + 28, false);
        A.store.Int32(ptr + 1868 + 96 + 12, 0);
        A.store.Bool(ptr + 1868 + 96 + 29, false);
        A.store.Int32(ptr + 1868 + 96 + 16, 0);
        A.store.Bool(ptr + 1868 + 96 + 30, false);
        A.store.Int32(ptr + 1868 + 96 + 20, 0);
        A.store.Bool(ptr + 1868 + 96 + 31, false);
        A.store.Bool(ptr + 1868 + 96 + 24, false);
        A.store.Bool(ptr + 1868 + 96 + 32, false);
        A.store.Bool(ptr + 1868 + 96 + 25, false);

        A.store.Bool(ptr + 1868 + 132 + 28, false);
        A.store.Ref(ptr + 1868 + 132 + 0, undefined);
        A.store.Ref(ptr + 1868 + 132 + 4, undefined);
        A.store.Ref(ptr + 1868 + 132 + 8, undefined);
        A.store.Ref(ptr + 1868 + 132 + 12, undefined);
        A.store.Ref(ptr + 1868 + 132 + 16, undefined);
        A.store.Ref(ptr + 1868 + 132 + 20, undefined);
        A.store.Bool(ptr + 1868 + 132 + 26, false);
        A.store.Bool(ptr + 1868 + 132 + 24, false);
        A.store.Bool(ptr + 1868 + 132 + 27, false);
        A.store.Bool(ptr + 1868 + 132 + 25, false);

        A.store.Bool(ptr + 1868 + 164 + 28, false);
        A.store.Ref(ptr + 1868 + 164 + 0, undefined);
        A.store.Ref(ptr + 1868 + 164 + 4, undefined);
        A.store.Ref(ptr + 1868 + 164 + 8, undefined);
        A.store.Ref(ptr + 1868 + 164 + 12, undefined);
        A.store.Ref(ptr + 1868 + 164 + 16, undefined);
        A.store.Ref(ptr + 1868 + 164 + 20, undefined);
        A.store.Bool(ptr + 1868 + 164 + 26, false);
        A.store.Bool(ptr + 1868 + 164 + 24, false);
        A.store.Bool(ptr + 1868 + 164 + 27, false);
        A.store.Bool(ptr + 1868 + 164 + 25, false);

        A.store.Bool(ptr + 2064 + 37, false);
        A.store.Ref(ptr + 2064 + 0, undefined);
        A.store.Ref(ptr + 2064 + 4, undefined);
        A.store.Ref(ptr + 2064 + 8, undefined);
        A.store.Ref(ptr + 2064 + 12, undefined);
        A.store.Ref(ptr + 2064 + 16, undefined);
        A.store.Ref(ptr + 2064 + 20, undefined);
        A.store.Bool(ptr + 2064 + 36, false);
        A.store.Int32(ptr + 2064 + 24, 0);
        A.store.Ref(ptr + 2064 + 28, undefined);
        A.store.Ref(ptr + 2064 + 32, undefined);
        A.store.Ref(ptr + 2104, undefined);

        A.store.Bool(ptr + 2108 + 19, false);
        A.store.Bool(ptr + 2108 + 16, false);
        A.store.Int32(ptr + 2108 + 0, 0);
        A.store.Ref(ptr + 2108 + 4, undefined);
        A.store.Bool(ptr + 2108 + 17, false);
        A.store.Bool(ptr + 2108 + 8, false);
        A.store.Bool(ptr + 2108 + 18, false);
        A.store.Int32(ptr + 2108 + 12, 0);
        A.store.Enum(ptr + 2128, -1);

        A.store.Bool(ptr + 2132 + 3345, false);

        A.store.Bool(ptr + 2132 + 0 + 21, false);
        A.store.Bool(ptr + 2132 + 0 + 14, false);
        A.store.Bool(ptr + 2132 + 0 + 0, false);
        A.store.Ref(ptr + 2132 + 0 + 4, undefined);
        A.store.Bool(ptr + 2132 + 0 + 15, false);
        A.store.Bool(ptr + 2132 + 0 + 8, false);
        A.store.Bool(ptr + 2132 + 0 + 16, false);
        A.store.Bool(ptr + 2132 + 0 + 9, false);
        A.store.Bool(ptr + 2132 + 0 + 17, false);
        A.store.Bool(ptr + 2132 + 0 + 10, false);
        A.store.Bool(ptr + 2132 + 0 + 18, false);
        A.store.Bool(ptr + 2132 + 0 + 11, false);
        A.store.Bool(ptr + 2132 + 0 + 19, false);
        A.store.Bool(ptr + 2132 + 0 + 12, false);
        A.store.Bool(ptr + 2132 + 0 + 20, false);
        A.store.Bool(ptr + 2132 + 0 + 13, false);

        A.store.Bool(ptr + 2132 + 24 + 28, false);
        A.store.Ref(ptr + 2132 + 24 + 0, undefined);
        A.store.Ref(ptr + 2132 + 24 + 4, undefined);
        A.store.Ref(ptr + 2132 + 24 + 8, undefined);
        A.store.Ref(ptr + 2132 + 24 + 12, undefined);
        A.store.Ref(ptr + 2132 + 24 + 16, undefined);
        A.store.Ref(ptr + 2132 + 24 + 20, undefined);
        A.store.Bool(ptr + 2132 + 24 + 26, false);
        A.store.Bool(ptr + 2132 + 24 + 24, false);
        A.store.Bool(ptr + 2132 + 24 + 27, false);
        A.store.Bool(ptr + 2132 + 24 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 1562, false);

        A.store.Bool(ptr + 2132 + 56 + 0 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 0 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 0 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 0 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 0 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 0 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 0 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 0 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 0 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 0 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 0 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 32 + 318, false);

        A.store.Bool(ptr + 2132 + 56 + 32 + 0 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 32 + 0 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 0 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 0 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 0 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 0 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 0 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 32 + 0 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 32 + 0 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 32 + 0 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 32 + 0 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 125, false);

        A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 0 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 0 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 0 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 0 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 0 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 0 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 0 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 0 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 0 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 0 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 0 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 32 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 32 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 32 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 32 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 32 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 32 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 32 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 32 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 32 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 32 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 32 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 64 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 64 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 64 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 64 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 64 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 64 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 64 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 64 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 64 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 64 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 64 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 96 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 96 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 96 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 96 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 96 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 96 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 96 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 96 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 96 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 96 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 96 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 32 + 160 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 32 + 160 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 160 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 160 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 160 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 160 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 160 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 32 + 160 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 32 + 160 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 32 + 160 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 32 + 160 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 125, false);

        A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 0 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 0 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 0 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 0 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 0 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 0 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 0 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 0 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 0 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 0 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 0 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 32 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 32 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 32 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 32 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 32 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 32 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 32 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 32 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 32 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 32 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 32 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 64 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 64 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 64 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 64 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 64 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 64 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 64 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 64 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 64 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 64 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 64 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 96 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 96 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 96 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 96 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 96 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 96 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 96 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 96 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 96 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 96 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 96 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 352 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 352 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 352 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 352 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 352 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 352 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 352 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 352 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 352 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 352 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 352 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 384 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 384 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 384 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 384 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 384 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 384 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 384 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 384 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 384 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 384 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 384 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 416 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 416 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 416 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 416 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 416 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 416 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 416 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 416 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 416 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 416 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 416 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 448 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 448 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 448 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 448 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 448 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 448 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 448 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 448 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 448 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 448 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 448 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 480 + 806, false);

        A.store.Bool(ptr + 2132 + 56 + 480 + 0 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 480 + 0 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 0 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 0 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 0 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 0 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 0 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 480 + 0 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 0 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 0 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 0 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 318, false);

        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 0 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 0 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 0 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 0 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 0 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 0 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 0 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 0 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 0 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 0 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 0 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 125, false);

        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 160 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 160 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 160 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 160 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 160 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 160 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 160 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 160 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 160 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 160 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 160 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 125, false);

        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 480 + 352 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 480 + 352 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 352 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 352 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 352 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 352 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 352 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 480 + 352 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 352 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 352 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 352 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 480 + 384 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 480 + 384 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 384 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 384 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 384 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 384 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 384 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 480 + 384 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 384 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 384 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 384 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 480 + 416 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 480 + 416 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 416 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 416 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 416 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 416 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 416 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 480 + 416 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 416 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 416 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 416 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 480 + 448 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 480 + 448 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 448 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 448 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 448 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 448 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 448 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 480 + 448 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 448 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 448 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 448 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 480 + 480 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 480 + 480 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 480 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 480 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 480 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 480 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 480 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 480 + 480 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 480 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 480 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 480 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 480 + 512 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 480 + 512 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 512 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 512 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 512 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 512 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 512 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 480 + 512 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 512 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 512 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 512 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 480 + 544 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 480 + 544 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 544 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 544 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 544 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 544 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 544 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 480 + 544 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 544 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 544 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 544 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 480 + 576 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 480 + 576 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 576 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 576 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 576 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 576 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 576 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 480 + 576 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 576 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 576 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 576 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 21, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 14, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 0, false);
        A.store.Ref(ptr + 2132 + 56 + 480 + 608 + 4, undefined);
        A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 15, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 8, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 16, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 9, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 17, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 10, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 18, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 11, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 19, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 12, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 20, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 13, false);

        A.store.Bool(ptr + 2132 + 56 + 480 + 632 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 480 + 632 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 632 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 632 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 632 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 632 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 632 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 480 + 632 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 632 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 632 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 632 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 480 + 664 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 480 + 664 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 664 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 664 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 664 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 664 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 664 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 480 + 664 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 664 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 664 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 664 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 480 + 696 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 480 + 696 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 696 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 696 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 696 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 696 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 696 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 480 + 696 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 696 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 696 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 696 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 480 + 728 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 480 + 728 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 728 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 728 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 728 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 728 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 480 + 728 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 480 + 728 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 728 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 728 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 728 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 21, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 14, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 0, false);
        A.store.Ref(ptr + 2132 + 56 + 480 + 760 + 4, undefined);
        A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 15, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 8, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 16, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 9, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 17, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 10, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 18, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 11, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 19, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 12, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 20, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 13, false);

        A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 21, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 14, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 0, false);
        A.store.Ref(ptr + 2132 + 56 + 480 + 784 + 4, undefined);
        A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 15, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 8, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 16, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 9, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 17, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 10, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 18, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 11, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 19, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 12, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 20, false);
        A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 13, false);

        A.store.Bool(ptr + 2132 + 56 + 1288 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 1288 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 1288 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 1288 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 1288 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 1288 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 1288 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 1288 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 1288 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 1288 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 1288 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 1320 + 33, false);
        A.store.Bool(ptr + 2132 + 56 + 1320 + 26, false);
        A.store.Int32(ptr + 2132 + 56 + 1320 + 0, 0);
        A.store.Ref(ptr + 2132 + 56 + 1320 + 4, undefined);
        A.store.Bool(ptr + 2132 + 56 + 1320 + 27, false);
        A.store.Int32(ptr + 2132 + 56 + 1320 + 8, 0);
        A.store.Bool(ptr + 2132 + 56 + 1320 + 28, false);
        A.store.Int32(ptr + 2132 + 56 + 1320 + 12, 0);
        A.store.Bool(ptr + 2132 + 56 + 1320 + 29, false);
        A.store.Int32(ptr + 2132 + 56 + 1320 + 16, 0);
        A.store.Bool(ptr + 2132 + 56 + 1320 + 30, false);
        A.store.Int32(ptr + 2132 + 56 + 1320 + 20, 0);
        A.store.Bool(ptr + 2132 + 56 + 1320 + 31, false);
        A.store.Bool(ptr + 2132 + 56 + 1320 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 1320 + 32, false);
        A.store.Bool(ptr + 2132 + 56 + 1320 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 1356 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 1356 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 1356 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 1356 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 1356 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 1356 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 1356 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 1356 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 1356 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 1356 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 1356 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 1388 + 21, false);
        A.store.Bool(ptr + 2132 + 56 + 1388 + 14, false);
        A.store.Bool(ptr + 2132 + 56 + 1388 + 0, false);
        A.store.Ref(ptr + 2132 + 56 + 1388 + 4, undefined);
        A.store.Bool(ptr + 2132 + 56 + 1388 + 15, false);
        A.store.Bool(ptr + 2132 + 56 + 1388 + 8, false);
        A.store.Bool(ptr + 2132 + 56 + 1388 + 16, false);
        A.store.Bool(ptr + 2132 + 56 + 1388 + 9, false);
        A.store.Bool(ptr + 2132 + 56 + 1388 + 17, false);
        A.store.Bool(ptr + 2132 + 56 + 1388 + 10, false);
        A.store.Bool(ptr + 2132 + 56 + 1388 + 18, false);
        A.store.Bool(ptr + 2132 + 56 + 1388 + 11, false);
        A.store.Bool(ptr + 2132 + 56 + 1388 + 19, false);
        A.store.Bool(ptr + 2132 + 56 + 1388 + 12, false);
        A.store.Bool(ptr + 2132 + 56 + 1388 + 20, false);
        A.store.Bool(ptr + 2132 + 56 + 1388 + 13, false);

        A.store.Bool(ptr + 2132 + 56 + 1412 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 1412 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 1412 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 1412 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 1412 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 1412 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 1412 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 1412 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 1412 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 1412 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 1412 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 1444 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 1444 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 1444 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 1444 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 1444 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 1444 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 1444 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 1444 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 1444 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 1444 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 1444 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 1476 + 85, false);

        A.store.Bool(ptr + 2132 + 56 + 1476 + 0 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 1476 + 0 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 1476 + 0 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 1476 + 0 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 1476 + 0 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 1476 + 0 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 1476 + 0 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 1476 + 0 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 1476 + 0 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 1476 + 0 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 1476 + 0 + 25, false);

        A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 21, false);
        A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 14, false);
        A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 0, false);
        A.store.Ref(ptr + 2132 + 56 + 1476 + 32 + 4, undefined);
        A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 15, false);
        A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 8, false);
        A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 16, false);
        A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 9, false);
        A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 17, false);
        A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 10, false);
        A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 18, false);
        A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 11, false);
        A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 19, false);
        A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 12, false);
        A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 20, false);
        A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 13, false);

        A.store.Bool(ptr + 2132 + 56 + 1476 + 56 + 28, false);
        A.store.Ref(ptr + 2132 + 56 + 1476 + 56 + 0, undefined);
        A.store.Ref(ptr + 2132 + 56 + 1476 + 56 + 4, undefined);
        A.store.Ref(ptr + 2132 + 56 + 1476 + 56 + 8, undefined);
        A.store.Ref(ptr + 2132 + 56 + 1476 + 56 + 12, undefined);
        A.store.Ref(ptr + 2132 + 56 + 1476 + 56 + 16, undefined);
        A.store.Ref(ptr + 2132 + 56 + 1476 + 56 + 20, undefined);
        A.store.Bool(ptr + 2132 + 56 + 1476 + 56 + 26, false);
        A.store.Bool(ptr + 2132 + 56 + 1476 + 56 + 24, false);
        A.store.Bool(ptr + 2132 + 56 + 1476 + 56 + 27, false);
        A.store.Bool(ptr + 2132 + 56 + 1476 + 56 + 25, false);

        A.store.Bool(ptr + 2132 + 1620 + 109, false);

        A.store.Bool(ptr + 2132 + 1620 + 0 + 21, false);
        A.store.Bool(ptr + 2132 + 1620 + 0 + 14, false);
        A.store.Bool(ptr + 2132 + 1620 + 0 + 0, false);
        A.store.Ref(ptr + 2132 + 1620 + 0 + 4, undefined);
        A.store.Bool(ptr + 2132 + 1620 + 0 + 15, false);
        A.store.Bool(ptr + 2132 + 1620 + 0 + 8, false);
        A.store.Bool(ptr + 2132 + 1620 + 0 + 16, false);
        A.store.Bool(ptr + 2132 + 1620 + 0 + 9, false);
        A.store.Bool(ptr + 2132 + 1620 + 0 + 17, false);
        A.store.Bool(ptr + 2132 + 1620 + 0 + 10, false);
        A.store.Bool(ptr + 2132 + 1620 + 0 + 18, false);
        A.store.Bool(ptr + 2132 + 1620 + 0 + 11, false);
        A.store.Bool(ptr + 2132 + 1620 + 0 + 19, false);
        A.store.Bool(ptr + 2132 + 1620 + 0 + 12, false);
        A.store.Bool(ptr + 2132 + 1620 + 0 + 20, false);
        A.store.Bool(ptr + 2132 + 1620 + 0 + 13, false);

        A.store.Bool(ptr + 2132 + 1620 + 24 + 28, false);
        A.store.Ref(ptr + 2132 + 1620 + 24 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1620 + 24 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1620 + 24 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1620 + 24 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1620 + 24 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1620 + 24 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1620 + 24 + 26, false);
        A.store.Bool(ptr + 2132 + 1620 + 24 + 24, false);
        A.store.Bool(ptr + 2132 + 1620 + 24 + 27, false);
        A.store.Bool(ptr + 2132 + 1620 + 24 + 25, false);

        A.store.Bool(ptr + 2132 + 1620 + 56 + 21, false);
        A.store.Bool(ptr + 2132 + 1620 + 56 + 14, false);
        A.store.Bool(ptr + 2132 + 1620 + 56 + 0, false);
        A.store.Ref(ptr + 2132 + 1620 + 56 + 4, undefined);
        A.store.Bool(ptr + 2132 + 1620 + 56 + 15, false);
        A.store.Bool(ptr + 2132 + 1620 + 56 + 8, false);
        A.store.Bool(ptr + 2132 + 1620 + 56 + 16, false);
        A.store.Bool(ptr + 2132 + 1620 + 56 + 9, false);
        A.store.Bool(ptr + 2132 + 1620 + 56 + 17, false);
        A.store.Bool(ptr + 2132 + 1620 + 56 + 10, false);
        A.store.Bool(ptr + 2132 + 1620 + 56 + 18, false);
        A.store.Bool(ptr + 2132 + 1620 + 56 + 11, false);
        A.store.Bool(ptr + 2132 + 1620 + 56 + 19, false);
        A.store.Bool(ptr + 2132 + 1620 + 56 + 12, false);
        A.store.Bool(ptr + 2132 + 1620 + 56 + 20, false);
        A.store.Bool(ptr + 2132 + 1620 + 56 + 13, false);

        A.store.Bool(ptr + 2132 + 1620 + 80 + 28, false);
        A.store.Ref(ptr + 2132 + 1620 + 80 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1620 + 80 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1620 + 80 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1620 + 80 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1620 + 80 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1620 + 80 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1620 + 80 + 26, false);
        A.store.Bool(ptr + 2132 + 1620 + 80 + 24, false);
        A.store.Bool(ptr + 2132 + 1620 + 80 + 27, false);
        A.store.Bool(ptr + 2132 + 1620 + 80 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 1542, false);

        A.store.Bool(ptr + 2132 + 1732 + 0 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 0 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 0 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 0 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 0 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 0 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 0 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 0 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 0 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 0 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 0 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 32 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 32 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 32 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 32 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 32 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 32 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 32 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 32 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 32 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 32 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 32 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 64 + 21, false);
        A.store.Bool(ptr + 2132 + 1732 + 64 + 14, false);
        A.store.Bool(ptr + 2132 + 1732 + 64 + 0, false);
        A.store.Ref(ptr + 2132 + 1732 + 64 + 4, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 64 + 15, false);
        A.store.Bool(ptr + 2132 + 1732 + 64 + 8, false);
        A.store.Bool(ptr + 2132 + 1732 + 64 + 16, false);
        A.store.Bool(ptr + 2132 + 1732 + 64 + 9, false);
        A.store.Bool(ptr + 2132 + 1732 + 64 + 17, false);
        A.store.Bool(ptr + 2132 + 1732 + 64 + 10, false);
        A.store.Bool(ptr + 2132 + 1732 + 64 + 18, false);
        A.store.Bool(ptr + 2132 + 1732 + 64 + 11, false);
        A.store.Bool(ptr + 2132 + 1732 + 64 + 19, false);
        A.store.Bool(ptr + 2132 + 1732 + 64 + 12, false);
        A.store.Bool(ptr + 2132 + 1732 + 64 + 20, false);
        A.store.Bool(ptr + 2132 + 1732 + 64 + 13, false);

        A.store.Bool(ptr + 2132 + 1732 + 88 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 88 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 88 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 88 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 88 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 88 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 88 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 88 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 88 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 88 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 88 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 120 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 120 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 120 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 120 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 120 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 120 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 120 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 120 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 120 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 120 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 120 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 152 + 318, false);

        A.store.Bool(ptr + 2132 + 1732 + 152 + 0 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 0 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 0 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 0 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 0 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 0 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 0 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 0 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 0 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 0 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 0 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 125, false);

        A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 0 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 0 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 0 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 0 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 0 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 0 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 0 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 0 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 0 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 0 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 0 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 32 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 32 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 32 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 32 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 32 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 32 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 32 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 32 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 32 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 32 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 32 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 64 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 64 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 64 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 64 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 64 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 64 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 64 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 64 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 64 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 64 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 64 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 96 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 96 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 96 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 96 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 96 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 96 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 96 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 96 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 96 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 96 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 96 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 152 + 160 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 160 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 160 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 160 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 160 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 160 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 160 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 160 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 160 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 160 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 160 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 125, false);

        A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 0 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 0 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 0 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 0 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 0 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 0 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 0 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 0 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 0 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 0 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 0 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 32 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 32 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 32 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 32 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 32 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 32 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 32 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 32 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 32 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 32 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 32 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 64 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 64 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 64 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 64 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 64 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 64 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 64 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 64 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 64 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 64 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 64 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 96 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 96 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 96 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 96 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 96 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 96 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 96 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 96 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 96 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 96 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 96 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 472 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 472 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 472 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 472 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 472 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 472 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 472 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 472 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 472 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 472 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 472 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 504 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 504 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 504 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 504 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 504 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 504 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 504 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 504 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 504 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 504 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 504 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 536 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 536 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 536 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 536 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 536 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 536 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 536 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 536 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 536 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 536 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 536 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 568 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 568 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 568 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 568 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 568 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 568 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 568 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 568 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 568 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 568 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 568 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 600 + 21, false);
        A.store.Bool(ptr + 2132 + 1732 + 600 + 14, false);
        A.store.Bool(ptr + 2132 + 1732 + 600 + 0, false);
        A.store.Ref(ptr + 2132 + 1732 + 600 + 4, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 600 + 15, false);
        A.store.Bool(ptr + 2132 + 1732 + 600 + 8, false);
        A.store.Bool(ptr + 2132 + 1732 + 600 + 16, false);
        A.store.Bool(ptr + 2132 + 1732 + 600 + 9, false);
        A.store.Bool(ptr + 2132 + 1732 + 600 + 17, false);
        A.store.Bool(ptr + 2132 + 1732 + 600 + 10, false);
        A.store.Bool(ptr + 2132 + 1732 + 600 + 18, false);
        A.store.Bool(ptr + 2132 + 1732 + 600 + 11, false);
        A.store.Bool(ptr + 2132 + 1732 + 600 + 19, false);
        A.store.Bool(ptr + 2132 + 1732 + 600 + 12, false);
        A.store.Bool(ptr + 2132 + 1732 + 600 + 20, false);
        A.store.Bool(ptr + 2132 + 1732 + 600 + 13, false);

        A.store.Bool(ptr + 2132 + 1732 + 624 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 624 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 624 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 624 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 624 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 624 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 624 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 624 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 624 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 624 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 624 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 656 + 21, false);
        A.store.Bool(ptr + 2132 + 1732 + 656 + 14, false);
        A.store.Bool(ptr + 2132 + 1732 + 656 + 0, false);
        A.store.Ref(ptr + 2132 + 1732 + 656 + 4, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 656 + 15, false);
        A.store.Bool(ptr + 2132 + 1732 + 656 + 8, false);
        A.store.Bool(ptr + 2132 + 1732 + 656 + 16, false);
        A.store.Bool(ptr + 2132 + 1732 + 656 + 9, false);
        A.store.Bool(ptr + 2132 + 1732 + 656 + 17, false);
        A.store.Bool(ptr + 2132 + 1732 + 656 + 10, false);
        A.store.Bool(ptr + 2132 + 1732 + 656 + 18, false);
        A.store.Bool(ptr + 2132 + 1732 + 656 + 11, false);
        A.store.Bool(ptr + 2132 + 1732 + 656 + 19, false);
        A.store.Bool(ptr + 2132 + 1732 + 656 + 12, false);
        A.store.Bool(ptr + 2132 + 1732 + 656 + 20, false);
        A.store.Bool(ptr + 2132 + 1732 + 656 + 13, false);

        A.store.Bool(ptr + 2132 + 1732 + 680 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 680 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 680 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 680 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 680 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 680 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 680 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 680 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 680 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 680 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 680 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 712 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 712 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 712 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 712 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 712 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 712 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 712 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 712 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 712 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 712 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 712 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 744 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 744 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 744 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 744 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 744 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 744 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 744 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 744 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 744 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 744 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 744 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 776 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 776 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 776 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 776 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 776 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 776 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 776 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 776 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 776 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 776 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 776 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 808 + 33, false);
        A.store.Bool(ptr + 2132 + 1732 + 808 + 26, false);
        A.store.Int32(ptr + 2132 + 1732 + 808 + 0, 0);
        A.store.Ref(ptr + 2132 + 1732 + 808 + 4, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 808 + 27, false);
        A.store.Int32(ptr + 2132 + 1732 + 808 + 8, 0);
        A.store.Bool(ptr + 2132 + 1732 + 808 + 28, false);
        A.store.Int32(ptr + 2132 + 1732 + 808 + 12, 0);
        A.store.Bool(ptr + 2132 + 1732 + 808 + 29, false);
        A.store.Int32(ptr + 2132 + 1732 + 808 + 16, 0);
        A.store.Bool(ptr + 2132 + 1732 + 808 + 30, false);
        A.store.Int32(ptr + 2132 + 1732 + 808 + 20, 0);
        A.store.Bool(ptr + 2132 + 1732 + 808 + 31, false);
        A.store.Bool(ptr + 2132 + 1732 + 808 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 808 + 32, false);
        A.store.Bool(ptr + 2132 + 1732 + 808 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 844 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 844 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 844 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 844 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 844 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 844 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 844 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 844 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 844 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 844 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 844 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 876 + 21, false);
        A.store.Bool(ptr + 2132 + 1732 + 876 + 14, false);
        A.store.Bool(ptr + 2132 + 1732 + 876 + 0, false);
        A.store.Ref(ptr + 2132 + 1732 + 876 + 4, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 876 + 15, false);
        A.store.Bool(ptr + 2132 + 1732 + 876 + 8, false);
        A.store.Bool(ptr + 2132 + 1732 + 876 + 16, false);
        A.store.Bool(ptr + 2132 + 1732 + 876 + 9, false);
        A.store.Bool(ptr + 2132 + 1732 + 876 + 17, false);
        A.store.Bool(ptr + 2132 + 1732 + 876 + 10, false);
        A.store.Bool(ptr + 2132 + 1732 + 876 + 18, false);
        A.store.Bool(ptr + 2132 + 1732 + 876 + 11, false);
        A.store.Bool(ptr + 2132 + 1732 + 876 + 19, false);
        A.store.Bool(ptr + 2132 + 1732 + 876 + 12, false);
        A.store.Bool(ptr + 2132 + 1732 + 876 + 20, false);
        A.store.Bool(ptr + 2132 + 1732 + 876 + 13, false);

        A.store.Bool(ptr + 2132 + 1732 + 900 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 900 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 900 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 900 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 900 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 900 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 900 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 900 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 900 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 900 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 900 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 932 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 932 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 932 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 932 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 932 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 932 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 932 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 932 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 932 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 932 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 932 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 964 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 964 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 964 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 964 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 964 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 964 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 964 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 964 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 964 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 964 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 964 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 996 + 33, false);
        A.store.Bool(ptr + 2132 + 1732 + 996 + 26, false);
        A.store.Int32(ptr + 2132 + 1732 + 996 + 0, 0);
        A.store.Ref(ptr + 2132 + 1732 + 996 + 4, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 996 + 27, false);
        A.store.Int32(ptr + 2132 + 1732 + 996 + 8, 0);
        A.store.Bool(ptr + 2132 + 1732 + 996 + 28, false);
        A.store.Int32(ptr + 2132 + 1732 + 996 + 12, 0);
        A.store.Bool(ptr + 2132 + 1732 + 996 + 29, false);
        A.store.Int32(ptr + 2132 + 1732 + 996 + 16, 0);
        A.store.Bool(ptr + 2132 + 1732 + 996 + 30, false);
        A.store.Int32(ptr + 2132 + 1732 + 996 + 20, 0);
        A.store.Bool(ptr + 2132 + 1732 + 996 + 31, false);
        A.store.Bool(ptr + 2132 + 1732 + 996 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 996 + 32, false);
        A.store.Bool(ptr + 2132 + 1732 + 996 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 1032 + 21, false);
        A.store.Bool(ptr + 2132 + 1732 + 1032 + 14, false);
        A.store.Bool(ptr + 2132 + 1732 + 1032 + 0, false);
        A.store.Ref(ptr + 2132 + 1732 + 1032 + 4, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 1032 + 15, false);
        A.store.Bool(ptr + 2132 + 1732 + 1032 + 8, false);
        A.store.Bool(ptr + 2132 + 1732 + 1032 + 16, false);
        A.store.Bool(ptr + 2132 + 1732 + 1032 + 9, false);
        A.store.Bool(ptr + 2132 + 1732 + 1032 + 17, false);
        A.store.Bool(ptr + 2132 + 1732 + 1032 + 10, false);
        A.store.Bool(ptr + 2132 + 1732 + 1032 + 18, false);
        A.store.Bool(ptr + 2132 + 1732 + 1032 + 11, false);
        A.store.Bool(ptr + 2132 + 1732 + 1032 + 19, false);
        A.store.Bool(ptr + 2132 + 1732 + 1032 + 12, false);
        A.store.Bool(ptr + 2132 + 1732 + 1032 + 20, false);
        A.store.Bool(ptr + 2132 + 1732 + 1032 + 13, false);

        A.store.Bool(ptr + 2132 + 1732 + 1056 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 1056 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1056 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1056 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1056 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1056 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1056 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 1056 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 1056 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 1056 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 1056 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 1088 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 1088 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1088 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1088 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1088 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1088 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1088 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 1088 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 1088 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 1088 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 1088 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 1120 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 1120 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1120 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1120 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1120 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1120 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1120 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 1120 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 1120 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 1120 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 1120 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 1152 + 33, false);
        A.store.Bool(ptr + 2132 + 1732 + 1152 + 26, false);
        A.store.Int32(ptr + 2132 + 1732 + 1152 + 0, 0);
        A.store.Ref(ptr + 2132 + 1732 + 1152 + 4, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 1152 + 27, false);
        A.store.Int32(ptr + 2132 + 1732 + 1152 + 8, 0);
        A.store.Bool(ptr + 2132 + 1732 + 1152 + 28, false);
        A.store.Int32(ptr + 2132 + 1732 + 1152 + 12, 0);
        A.store.Bool(ptr + 2132 + 1732 + 1152 + 29, false);
        A.store.Int32(ptr + 2132 + 1732 + 1152 + 16, 0);
        A.store.Bool(ptr + 2132 + 1732 + 1152 + 30, false);
        A.store.Int32(ptr + 2132 + 1732 + 1152 + 20, 0);
        A.store.Bool(ptr + 2132 + 1732 + 1152 + 31, false);
        A.store.Bool(ptr + 2132 + 1732 + 1152 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 1152 + 32, false);
        A.store.Bool(ptr + 2132 + 1732 + 1152 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 1188 + 33, false);
        A.store.Bool(ptr + 2132 + 1732 + 1188 + 26, false);
        A.store.Int32(ptr + 2132 + 1732 + 1188 + 0, 0);
        A.store.Ref(ptr + 2132 + 1732 + 1188 + 4, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 1188 + 27, false);
        A.store.Int32(ptr + 2132 + 1732 + 1188 + 8, 0);
        A.store.Bool(ptr + 2132 + 1732 + 1188 + 28, false);
        A.store.Int32(ptr + 2132 + 1732 + 1188 + 12, 0);
        A.store.Bool(ptr + 2132 + 1732 + 1188 + 29, false);
        A.store.Int32(ptr + 2132 + 1732 + 1188 + 16, 0);
        A.store.Bool(ptr + 2132 + 1732 + 1188 + 30, false);
        A.store.Int32(ptr + 2132 + 1732 + 1188 + 20, 0);
        A.store.Bool(ptr + 2132 + 1732 + 1188 + 31, false);
        A.store.Bool(ptr + 2132 + 1732 + 1188 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 1188 + 32, false);
        A.store.Bool(ptr + 2132 + 1732 + 1188 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 1224 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 1224 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1224 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1224 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1224 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1224 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1224 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 1224 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 1224 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 1224 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 1224 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 1256 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 1256 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1256 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1256 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1256 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1256 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1256 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 1256 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 1256 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 1256 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 1256 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 1288 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 1288 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1288 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1288 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1288 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1288 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1288 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 1288 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 1288 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 1288 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 1288 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 1320 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 1320 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1320 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1320 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1320 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1320 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1320 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 1320 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 1320 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 1320 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 1320 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 1352 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 1352 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1352 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1352 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1352 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1352 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1352 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 1352 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 1352 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 1352 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 1352 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 1384 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 1384 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1384 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1384 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1384 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1384 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1384 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 1384 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 1384 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 1384 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 1384 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 1416 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 1416 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1416 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1416 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1416 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1416 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1416 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 1416 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 1416 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 1416 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 1416 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 1448 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 1448 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1448 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1448 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1448 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1448 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1448 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 1448 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 1448 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 1448 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 1448 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 1480 + 61, false);

        A.store.Bool(ptr + 2132 + 1732 + 1480 + 0 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 1480 + 0 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1480 + 0 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1480 + 0 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1480 + 0 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1480 + 0 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1480 + 0 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 1480 + 0 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 1480 + 0 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 1480 + 0 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 1480 + 0 + 25, false);

        A.store.Bool(ptr + 2132 + 1732 + 1480 + 32 + 28, false);
        A.store.Ref(ptr + 2132 + 1732 + 1480 + 32 + 0, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1480 + 32 + 4, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1480 + 32 + 8, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1480 + 32 + 12, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1480 + 32 + 16, undefined);
        A.store.Ref(ptr + 2132 + 1732 + 1480 + 32 + 20, undefined);
        A.store.Bool(ptr + 2132 + 1732 + 1480 + 32 + 26, false);
        A.store.Bool(ptr + 2132 + 1732 + 1480 + 32 + 24, false);
        A.store.Bool(ptr + 2132 + 1732 + 1480 + 32 + 27, false);
        A.store.Bool(ptr + 2132 + 1732 + 1480 + 32 + 25, false);

        A.store.Bool(ptr + 2132 + 3276 + 36, false);

        A.store.Bool(ptr + 2132 + 3276 + 0 + 28, false);
        A.store.Ref(ptr + 2132 + 3276 + 0 + 0, undefined);
        A.store.Ref(ptr + 2132 + 3276 + 0 + 4, undefined);
        A.store.Ref(ptr + 2132 + 3276 + 0 + 8, undefined);
        A.store.Ref(ptr + 2132 + 3276 + 0 + 12, undefined);
        A.store.Ref(ptr + 2132 + 3276 + 0 + 16, undefined);
        A.store.Ref(ptr + 2132 + 3276 + 0 + 20, undefined);
        A.store.Bool(ptr + 2132 + 3276 + 0 + 26, false);
        A.store.Bool(ptr + 2132 + 3276 + 0 + 24, false);
        A.store.Bool(ptr + 2132 + 3276 + 0 + 27, false);
        A.store.Bool(ptr + 2132 + 3276 + 0 + 25, false);
        A.store.Ref(ptr + 2132 + 3276 + 32, undefined);

        A.store.Bool(ptr + 2132 + 3316 + 28, false);
        A.store.Ref(ptr + 2132 + 3316 + 0, undefined);
        A.store.Ref(ptr + 2132 + 3316 + 4, undefined);
        A.store.Ref(ptr + 2132 + 3316 + 8, undefined);
        A.store.Ref(ptr + 2132 + 3316 + 12, undefined);
        A.store.Ref(ptr + 2132 + 3316 + 16, undefined);
        A.store.Ref(ptr + 2132 + 3316 + 20, undefined);
        A.store.Bool(ptr + 2132 + 3316 + 26, false);
        A.store.Bool(ptr + 2132 + 3316 + 24, false);
        A.store.Bool(ptr + 2132 + 3316 + 27, false);
        A.store.Bool(ptr + 2132 + 3316 + 25, false);

        A.store.Bool(ptr + 5480 + 1026, false);

        A.store.Bool(ptr + 5480 + 0 + 21, false);
        A.store.Bool(ptr + 5480 + 0 + 14, false);
        A.store.Bool(ptr + 5480 + 0 + 0, false);
        A.store.Ref(ptr + 5480 + 0 + 4, undefined);
        A.store.Bool(ptr + 5480 + 0 + 15, false);
        A.store.Bool(ptr + 5480 + 0 + 8, false);
        A.store.Bool(ptr + 5480 + 0 + 16, false);
        A.store.Bool(ptr + 5480 + 0 + 9, false);
        A.store.Bool(ptr + 5480 + 0 + 17, false);
        A.store.Bool(ptr + 5480 + 0 + 10, false);
        A.store.Bool(ptr + 5480 + 0 + 18, false);
        A.store.Bool(ptr + 5480 + 0 + 11, false);
        A.store.Bool(ptr + 5480 + 0 + 19, false);
        A.store.Bool(ptr + 5480 + 0 + 12, false);
        A.store.Bool(ptr + 5480 + 0 + 20, false);
        A.store.Bool(ptr + 5480 + 0 + 13, false);

        A.store.Bool(ptr + 5480 + 24 + 21, false);
        A.store.Bool(ptr + 5480 + 24 + 14, false);
        A.store.Bool(ptr + 5480 + 24 + 0, false);
        A.store.Ref(ptr + 5480 + 24 + 4, undefined);
        A.store.Bool(ptr + 5480 + 24 + 15, false);
        A.store.Bool(ptr + 5480 + 24 + 8, false);
        A.store.Bool(ptr + 5480 + 24 + 16, false);
        A.store.Bool(ptr + 5480 + 24 + 9, false);
        A.store.Bool(ptr + 5480 + 24 + 17, false);
        A.store.Bool(ptr + 5480 + 24 + 10, false);
        A.store.Bool(ptr + 5480 + 24 + 18, false);
        A.store.Bool(ptr + 5480 + 24 + 11, false);
        A.store.Bool(ptr + 5480 + 24 + 19, false);
        A.store.Bool(ptr + 5480 + 24 + 12, false);
        A.store.Bool(ptr + 5480 + 24 + 20, false);
        A.store.Bool(ptr + 5480 + 24 + 13, false);
        A.store.Ref(ptr + 5480 + 48, undefined);

        A.store.Bool(ptr + 5480 + 52 + 806, false);

        A.store.Bool(ptr + 5480 + 52 + 0 + 28, false);
        A.store.Ref(ptr + 5480 + 52 + 0 + 0, undefined);
        A.store.Ref(ptr + 5480 + 52 + 0 + 4, undefined);
        A.store.Ref(ptr + 5480 + 52 + 0 + 8, undefined);
        A.store.Ref(ptr + 5480 + 52 + 0 + 12, undefined);
        A.store.Ref(ptr + 5480 + 52 + 0 + 16, undefined);
        A.store.Ref(ptr + 5480 + 52 + 0 + 20, undefined);
        A.store.Bool(ptr + 5480 + 52 + 0 + 26, false);
        A.store.Bool(ptr + 5480 + 52 + 0 + 24, false);
        A.store.Bool(ptr + 5480 + 52 + 0 + 27, false);
        A.store.Bool(ptr + 5480 + 52 + 0 + 25, false);

        A.store.Bool(ptr + 5480 + 52 + 32 + 318, false);

        A.store.Bool(ptr + 5480 + 52 + 32 + 0 + 28, false);
        A.store.Ref(ptr + 5480 + 52 + 32 + 0 + 0, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 0 + 4, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 0 + 8, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 0 + 12, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 0 + 16, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 0 + 20, undefined);
        A.store.Bool(ptr + 5480 + 52 + 32 + 0 + 26, false);
        A.store.Bool(ptr + 5480 + 52 + 32 + 0 + 24, false);
        A.store.Bool(ptr + 5480 + 52 + 32 + 0 + 27, false);
        A.store.Bool(ptr + 5480 + 52 + 32 + 0 + 25, false);

        A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 125, false);

        A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 0 + 28, false);
        A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 0 + 0, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 0 + 4, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 0 + 8, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 0 + 12, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 0 + 16, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 0 + 20, undefined);
        A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 0 + 26, false);
        A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 0 + 24, false);
        A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 0 + 27, false);
        A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 0 + 25, false);

        A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 32 + 28, false);
        A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 32 + 0, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 32 + 4, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 32 + 8, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 32 + 12, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 32 + 16, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 32 + 20, undefined);
        A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 32 + 26, false);
        A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 32 + 24, false);
        A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 32 + 27, false);
        A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 32 + 25, false);

        A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 64 + 28, false);
        A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 64 + 0, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 64 + 4, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 64 + 8, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 64 + 12, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 64 + 16, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 64 + 20, undefined);
        A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 64 + 26, false);
        A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 64 + 24, false);
        A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 64 + 27, false);
        A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 64 + 25, false);

        A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 96 + 28, false);
        A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 96 + 0, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 96 + 4, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 96 + 8, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 96 + 12, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 96 + 16, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 96 + 20, undefined);
        A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 96 + 26, false);
        A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 96 + 24, false);
        A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 96 + 27, false);
        A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 96 + 25, false);

        A.store.Bool(ptr + 5480 + 52 + 32 + 160 + 28, false);
        A.store.Ref(ptr + 5480 + 52 + 32 + 160 + 0, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 160 + 4, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 160 + 8, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 160 + 12, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 160 + 16, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 160 + 20, undefined);
        A.store.Bool(ptr + 5480 + 52 + 32 + 160 + 26, false);
        A.store.Bool(ptr + 5480 + 52 + 32 + 160 + 24, false);
        A.store.Bool(ptr + 5480 + 52 + 32 + 160 + 27, false);
        A.store.Bool(ptr + 5480 + 52 + 32 + 160 + 25, false);

        A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 125, false);

        A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 0 + 28, false);
        A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 0 + 0, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 0 + 4, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 0 + 8, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 0 + 12, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 0 + 16, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 0 + 20, undefined);
        A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 0 + 26, false);
        A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 0 + 24, false);
        A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 0 + 27, false);
        A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 0 + 25, false);

        A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 32 + 28, false);
        A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 32 + 0, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 32 + 4, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 32 + 8, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 32 + 12, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 32 + 16, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 32 + 20, undefined);
        A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 32 + 26, false);
        A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 32 + 24, false);
        A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 32 + 27, false);
        A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 32 + 25, false);

        A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 64 + 28, false);
        A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 64 + 0, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 64 + 4, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 64 + 8, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 64 + 12, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 64 + 16, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 64 + 20, undefined);
        A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 64 + 26, false);
        A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 64 + 24, false);
        A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 64 + 27, false);
        A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 64 + 25, false);

        A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 96 + 28, false);
        A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 96 + 0, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 96 + 4, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 96 + 8, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 96 + 12, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 96 + 16, undefined);
        A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 96 + 20, undefined);
        A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 96 + 26, false);
        A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 96 + 24, false);
        A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 96 + 27, false);
        A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 96 + 25, false);

        A.store.Bool(ptr + 5480 + 52 + 352 + 28, false);
        A.store.Ref(ptr + 5480 + 52 + 352 + 0, undefined);
        A.store.Ref(ptr + 5480 + 52 + 352 + 4, undefined);
        A.store.Ref(ptr + 5480 + 52 + 352 + 8, undefined);
        A.store.Ref(ptr + 5480 + 52 + 352 + 12, undefined);
        A.store.Ref(ptr + 5480 + 52 + 352 + 16, undefined);
        A.store.Ref(ptr + 5480 + 52 + 352 + 20, undefined);
        A.store.Bool(ptr + 5480 + 52 + 352 + 26, false);
        A.store.Bool(ptr + 5480 + 52 + 352 + 24, false);
        A.store.Bool(ptr + 5480 + 52 + 352 + 27, false);
        A.store.Bool(ptr + 5480 + 52 + 352 + 25, false);

        A.store.Bool(ptr + 5480 + 52 + 384 + 28, false);
        A.store.Ref(ptr + 5480 + 52 + 384 + 0, undefined);
        A.store.Ref(ptr + 5480 + 52 + 384 + 4, undefined);
        A.store.Ref(ptr + 5480 + 52 + 384 + 8, undefined);
        A.store.Ref(ptr + 5480 + 52 + 384 + 12, undefined);
        A.store.Ref(ptr + 5480 + 52 + 384 + 16, undefined);
        A.store.Ref(ptr + 5480 + 52 + 384 + 20, undefined);
        A.store.Bool(ptr + 5480 + 52 + 384 + 26, false);
        A.store.Bool(ptr + 5480 + 52 + 384 + 24, false);
        A.store.Bool(ptr + 5480 + 52 + 384 + 27, false);
        A.store.Bool(ptr + 5480 + 52 + 384 + 25, false);

        A.store.Bool(ptr + 5480 + 52 + 416 + 28, false);
        A.store.Ref(ptr + 5480 + 52 + 416 + 0, undefined);
        A.store.Ref(ptr + 5480 + 52 + 416 + 4, undefined);
        A.store.Ref(ptr + 5480 + 52 + 416 + 8, undefined);
        A.store.Ref(ptr + 5480 + 52 + 416 + 12, undefined);
        A.store.Ref(ptr + 5480 + 52 + 416 + 16, undefined);
        A.store.Ref(ptr + 5480 + 52 + 416 + 20, undefined);
        A.store.Bool(ptr + 5480 + 52 + 416 + 26, false);
        A.store.Bool(ptr + 5480 + 52 + 416 + 24, false);
        A.store.Bool(ptr + 5480 + 52 + 416 + 27, false);
        A.store.Bool(ptr + 5480 + 52 + 416 + 25, false);

        A.store.Bool(ptr + 5480 + 52 + 448 + 28, false);
        A.store.Ref(ptr + 5480 + 52 + 448 + 0, undefined);
        A.store.Ref(ptr + 5480 + 52 + 448 + 4, undefined);
        A.store.Ref(ptr + 5480 + 52 + 448 + 8, undefined);
        A.store.Ref(ptr + 5480 + 52 + 448 + 12, undefined);
        A.store.Ref(ptr + 5480 + 52 + 448 + 16, undefined);
        A.store.Ref(ptr + 5480 + 52 + 448 + 20, undefined);
        A.store.Bool(ptr + 5480 + 52 + 448 + 26, false);
        A.store.Bool(ptr + 5480 + 52 + 448 + 24, false);
        A.store.Bool(ptr + 5480 + 52 + 448 + 27, false);
        A.store.Bool(ptr + 5480 + 52 + 448 + 25, false);

        A.store.Bool(ptr + 5480 + 52 + 480 + 28, false);
        A.store.Ref(ptr + 5480 + 52 + 480 + 0, undefined);
        A.store.Ref(ptr + 5480 + 52 + 480 + 4, undefined);
        A.store.Ref(ptr + 5480 + 52 + 480 + 8, undefined);
        A.store.Ref(ptr + 5480 + 52 + 480 + 12, undefined);
        A.store.Ref(ptr + 5480 + 52 + 480 + 16, undefined);
        A.store.Ref(ptr + 5480 + 52 + 480 + 20, undefined);
        A.store.Bool(ptr + 5480 + 52 + 480 + 26, false);
        A.store.Bool(ptr + 5480 + 52 + 480 + 24, false);
        A.store.Bool(ptr + 5480 + 52 + 480 + 27, false);
        A.store.Bool(ptr + 5480 + 52 + 480 + 25, false);

        A.store.Bool(ptr + 5480 + 52 + 512 + 28, false);
        A.store.Ref(ptr + 5480 + 52 + 512 + 0, undefined);
        A.store.Ref(ptr + 5480 + 52 + 512 + 4, undefined);
        A.store.Ref(ptr + 5480 + 52 + 512 + 8, undefined);
        A.store.Ref(ptr + 5480 + 52 + 512 + 12, undefined);
        A.store.Ref(ptr + 5480 + 52 + 512 + 16, undefined);
        A.store.Ref(ptr + 5480 + 52 + 512 + 20, undefined);
        A.store.Bool(ptr + 5480 + 52 + 512 + 26, false);
        A.store.Bool(ptr + 5480 + 52 + 512 + 24, false);
        A.store.Bool(ptr + 5480 + 52 + 512 + 27, false);
        A.store.Bool(ptr + 5480 + 52 + 512 + 25, false);

        A.store.Bool(ptr + 5480 + 52 + 544 + 28, false);
        A.store.Ref(ptr + 5480 + 52 + 544 + 0, undefined);
        A.store.Ref(ptr + 5480 + 52 + 544 + 4, undefined);
        A.store.Ref(ptr + 5480 + 52 + 544 + 8, undefined);
        A.store.Ref(ptr + 5480 + 52 + 544 + 12, undefined);
        A.store.Ref(ptr + 5480 + 52 + 544 + 16, undefined);
        A.store.Ref(ptr + 5480 + 52 + 544 + 20, undefined);
        A.store.Bool(ptr + 5480 + 52 + 544 + 26, false);
        A.store.Bool(ptr + 5480 + 52 + 544 + 24, false);
        A.store.Bool(ptr + 5480 + 52 + 544 + 27, false);
        A.store.Bool(ptr + 5480 + 52 + 544 + 25, false);

        A.store.Bool(ptr + 5480 + 52 + 576 + 28, false);
        A.store.Ref(ptr + 5480 + 52 + 576 + 0, undefined);
        A.store.Ref(ptr + 5480 + 52 + 576 + 4, undefined);
        A.store.Ref(ptr + 5480 + 52 + 576 + 8, undefined);
        A.store.Ref(ptr + 5480 + 52 + 576 + 12, undefined);
        A.store.Ref(ptr + 5480 + 52 + 576 + 16, undefined);
        A.store.Ref(ptr + 5480 + 52 + 576 + 20, undefined);
        A.store.Bool(ptr + 5480 + 52 + 576 + 26, false);
        A.store.Bool(ptr + 5480 + 52 + 576 + 24, false);
        A.store.Bool(ptr + 5480 + 52 + 576 + 27, false);
        A.store.Bool(ptr + 5480 + 52 + 576 + 25, false);

        A.store.Bool(ptr + 5480 + 52 + 608 + 21, false);
        A.store.Bool(ptr + 5480 + 52 + 608 + 14, false);
        A.store.Bool(ptr + 5480 + 52 + 608 + 0, false);
        A.store.Ref(ptr + 5480 + 52 + 608 + 4, undefined);
        A.store.Bool(ptr + 5480 + 52 + 608 + 15, false);
        A.store.Bool(ptr + 5480 + 52 + 608 + 8, false);
        A.store.Bool(ptr + 5480 + 52 + 608 + 16, false);
        A.store.Bool(ptr + 5480 + 52 + 608 + 9, false);
        A.store.Bool(ptr + 5480 + 52 + 608 + 17, false);
        A.store.Bool(ptr + 5480 + 52 + 608 + 10, false);
        A.store.Bool(ptr + 5480 + 52 + 608 + 18, false);
        A.store.Bool(ptr + 5480 + 52 + 608 + 11, false);
        A.store.Bool(ptr + 5480 + 52 + 608 + 19, false);
        A.store.Bool(ptr + 5480 + 52 + 608 + 12, false);
        A.store.Bool(ptr + 5480 + 52 + 608 + 20, false);
        A.store.Bool(ptr + 5480 + 52 + 608 + 13, false);

        A.store.Bool(ptr + 5480 + 52 + 632 + 28, false);
        A.store.Ref(ptr + 5480 + 52 + 632 + 0, undefined);
        A.store.Ref(ptr + 5480 + 52 + 632 + 4, undefined);
        A.store.Ref(ptr + 5480 + 52 + 632 + 8, undefined);
        A.store.Ref(ptr + 5480 + 52 + 632 + 12, undefined);
        A.store.Ref(ptr + 5480 + 52 + 632 + 16, undefined);
        A.store.Ref(ptr + 5480 + 52 + 632 + 20, undefined);
        A.store.Bool(ptr + 5480 + 52 + 632 + 26, false);
        A.store.Bool(ptr + 5480 + 52 + 632 + 24, false);
        A.store.Bool(ptr + 5480 + 52 + 632 + 27, false);
        A.store.Bool(ptr + 5480 + 52 + 632 + 25, false);

        A.store.Bool(ptr + 5480 + 52 + 664 + 28, false);
        A.store.Ref(ptr + 5480 + 52 + 664 + 0, undefined);
        A.store.Ref(ptr + 5480 + 52 + 664 + 4, undefined);
        A.store.Ref(ptr + 5480 + 52 + 664 + 8, undefined);
        A.store.Ref(ptr + 5480 + 52 + 664 + 12, undefined);
        A.store.Ref(ptr + 5480 + 52 + 664 + 16, undefined);
        A.store.Ref(ptr + 5480 + 52 + 664 + 20, undefined);
        A.store.Bool(ptr + 5480 + 52 + 664 + 26, false);
        A.store.Bool(ptr + 5480 + 52 + 664 + 24, false);
        A.store.Bool(ptr + 5480 + 52 + 664 + 27, false);
        A.store.Bool(ptr + 5480 + 52 + 664 + 25, false);

        A.store.Bool(ptr + 5480 + 52 + 696 + 28, false);
        A.store.Ref(ptr + 5480 + 52 + 696 + 0, undefined);
        A.store.Ref(ptr + 5480 + 52 + 696 + 4, undefined);
        A.store.Ref(ptr + 5480 + 52 + 696 + 8, undefined);
        A.store.Ref(ptr + 5480 + 52 + 696 + 12, undefined);
        A.store.Ref(ptr + 5480 + 52 + 696 + 16, undefined);
        A.store.Ref(ptr + 5480 + 52 + 696 + 20, undefined);
        A.store.Bool(ptr + 5480 + 52 + 696 + 26, false);
        A.store.Bool(ptr + 5480 + 52 + 696 + 24, false);
        A.store.Bool(ptr + 5480 + 52 + 696 + 27, false);
        A.store.Bool(ptr + 5480 + 52 + 696 + 25, false);

        A.store.Bool(ptr + 5480 + 52 + 728 + 28, false);
        A.store.Ref(ptr + 5480 + 52 + 728 + 0, undefined);
        A.store.Ref(ptr + 5480 + 52 + 728 + 4, undefined);
        A.store.Ref(ptr + 5480 + 52 + 728 + 8, undefined);
        A.store.Ref(ptr + 5480 + 52 + 728 + 12, undefined);
        A.store.Ref(ptr + 5480 + 52 + 728 + 16, undefined);
        A.store.Ref(ptr + 5480 + 52 + 728 + 20, undefined);
        A.store.Bool(ptr + 5480 + 52 + 728 + 26, false);
        A.store.Bool(ptr + 5480 + 52 + 728 + 24, false);
        A.store.Bool(ptr + 5480 + 52 + 728 + 27, false);
        A.store.Bool(ptr + 5480 + 52 + 728 + 25, false);

        A.store.Bool(ptr + 5480 + 52 + 760 + 21, false);
        A.store.Bool(ptr + 5480 + 52 + 760 + 14, false);
        A.store.Bool(ptr + 5480 + 52 + 760 + 0, false);
        A.store.Ref(ptr + 5480 + 52 + 760 + 4, undefined);
        A.store.Bool(ptr + 5480 + 52 + 760 + 15, false);
        A.store.Bool(ptr + 5480 + 52 + 760 + 8, false);
        A.store.Bool(ptr + 5480 + 52 + 760 + 16, false);
        A.store.Bool(ptr + 5480 + 52 + 760 + 9, false);
        A.store.Bool(ptr + 5480 + 52 + 760 + 17, false);
        A.store.Bool(ptr + 5480 + 52 + 760 + 10, false);
        A.store.Bool(ptr + 5480 + 52 + 760 + 18, false);
        A.store.Bool(ptr + 5480 + 52 + 760 + 11, false);
        A.store.Bool(ptr + 5480 + 52 + 760 + 19, false);
        A.store.Bool(ptr + 5480 + 52 + 760 + 12, false);
        A.store.Bool(ptr + 5480 + 52 + 760 + 20, false);
        A.store.Bool(ptr + 5480 + 52 + 760 + 13, false);

        A.store.Bool(ptr + 5480 + 52 + 784 + 21, false);
        A.store.Bool(ptr + 5480 + 52 + 784 + 14, false);
        A.store.Bool(ptr + 5480 + 52 + 784 + 0, false);
        A.store.Ref(ptr + 5480 + 52 + 784 + 4, undefined);
        A.store.Bool(ptr + 5480 + 52 + 784 + 15, false);
        A.store.Bool(ptr + 5480 + 52 + 784 + 8, false);
        A.store.Bool(ptr + 5480 + 52 + 784 + 16, false);
        A.store.Bool(ptr + 5480 + 52 + 784 + 9, false);
        A.store.Bool(ptr + 5480 + 52 + 784 + 17, false);
        A.store.Bool(ptr + 5480 + 52 + 784 + 10, false);
        A.store.Bool(ptr + 5480 + 52 + 784 + 18, false);
        A.store.Bool(ptr + 5480 + 52 + 784 + 11, false);
        A.store.Bool(ptr + 5480 + 52 + 784 + 19, false);
        A.store.Bool(ptr + 5480 + 52 + 784 + 12, false);
        A.store.Bool(ptr + 5480 + 52 + 784 + 20, false);
        A.store.Bool(ptr + 5480 + 52 + 784 + 13, false);
        A.store.Bool(ptr + 5480 + 1024, false);
        A.store.Int32(ptr + 5480 + 860, 0);
        A.store.Ref(ptr + 5480 + 864, undefined);

        A.store.Bool(ptr + 5480 + 868 + 28, false);
        A.store.Ref(ptr + 5480 + 868 + 0, undefined);
        A.store.Ref(ptr + 5480 + 868 + 4, undefined);
        A.store.Ref(ptr + 5480 + 868 + 8, undefined);
        A.store.Ref(ptr + 5480 + 868 + 12, undefined);
        A.store.Ref(ptr + 5480 + 868 + 16, undefined);
        A.store.Ref(ptr + 5480 + 868 + 20, undefined);
        A.store.Bool(ptr + 5480 + 868 + 26, false);
        A.store.Bool(ptr + 5480 + 868 + 24, false);
        A.store.Bool(ptr + 5480 + 868 + 27, false);
        A.store.Bool(ptr + 5480 + 868 + 25, false);

        A.store.Bool(ptr + 5480 + 900 + 21, false);
        A.store.Bool(ptr + 5480 + 900 + 14, false);
        A.store.Bool(ptr + 5480 + 900 + 0, false);
        A.store.Ref(ptr + 5480 + 900 + 4, undefined);
        A.store.Bool(ptr + 5480 + 900 + 15, false);
        A.store.Bool(ptr + 5480 + 900 + 8, false);
        A.store.Bool(ptr + 5480 + 900 + 16, false);
        A.store.Bool(ptr + 5480 + 900 + 9, false);
        A.store.Bool(ptr + 5480 + 900 + 17, false);
        A.store.Bool(ptr + 5480 + 900 + 10, false);
        A.store.Bool(ptr + 5480 + 900 + 18, false);
        A.store.Bool(ptr + 5480 + 900 + 11, false);
        A.store.Bool(ptr + 5480 + 900 + 19, false);
        A.store.Bool(ptr + 5480 + 900 + 12, false);
        A.store.Bool(ptr + 5480 + 900 + 20, false);
        A.store.Bool(ptr + 5480 + 900 + 13, false);

        A.store.Bool(ptr + 5480 + 924 + 28, false);
        A.store.Ref(ptr + 5480 + 924 + 0, undefined);
        A.store.Ref(ptr + 5480 + 924 + 4, undefined);
        A.store.Ref(ptr + 5480 + 924 + 8, undefined);
        A.store.Ref(ptr + 5480 + 924 + 12, undefined);
        A.store.Ref(ptr + 5480 + 924 + 16, undefined);
        A.store.Ref(ptr + 5480 + 924 + 20, undefined);
        A.store.Bool(ptr + 5480 + 924 + 26, false);
        A.store.Bool(ptr + 5480 + 924 + 24, false);
        A.store.Bool(ptr + 5480 + 924 + 27, false);
        A.store.Bool(ptr + 5480 + 924 + 25, false);

        A.store.Bool(ptr + 5480 + 956 + 28, false);
        A.store.Ref(ptr + 5480 + 956 + 0, undefined);
        A.store.Ref(ptr + 5480 + 956 + 4, undefined);
        A.store.Ref(ptr + 5480 + 956 + 8, undefined);
        A.store.Ref(ptr + 5480 + 956 + 12, undefined);
        A.store.Ref(ptr + 5480 + 956 + 16, undefined);
        A.store.Ref(ptr + 5480 + 956 + 20, undefined);
        A.store.Bool(ptr + 5480 + 956 + 26, false);
        A.store.Bool(ptr + 5480 + 956 + 24, false);
        A.store.Bool(ptr + 5480 + 956 + 27, false);
        A.store.Bool(ptr + 5480 + 956 + 25, false);

        A.store.Bool(ptr + 5480 + 988 + 28, false);
        A.store.Ref(ptr + 5480 + 988 + 0, undefined);
        A.store.Ref(ptr + 5480 + 988 + 4, undefined);
        A.store.Ref(ptr + 5480 + 988 + 8, undefined);
        A.store.Ref(ptr + 5480 + 988 + 12, undefined);
        A.store.Ref(ptr + 5480 + 988 + 16, undefined);
        A.store.Ref(ptr + 5480 + 988 + 20, undefined);
        A.store.Bool(ptr + 5480 + 988 + 26, false);
        A.store.Bool(ptr + 5480 + 988 + 24, false);
        A.store.Bool(ptr + 5480 + 988 + 27, false);
        A.store.Bool(ptr + 5480 + 988 + 25, false);
        A.store.Bool(ptr + 5480 + 1025, false);
        A.store.Int32(ptr + 5480 + 1020, 0);
      } else {
        A.store.Bool(ptr + 6509, true);

        if (typeof x["Cellular"] === "undefined") {
          A.store.Bool(ptr + 0 + 458, false);

          A.store.Bool(ptr + 0 + 0 + 21, false);
          A.store.Bool(ptr + 0 + 0 + 14, false);
          A.store.Bool(ptr + 0 + 0 + 0, false);
          A.store.Ref(ptr + 0 + 0 + 4, undefined);
          A.store.Bool(ptr + 0 + 0 + 15, false);
          A.store.Bool(ptr + 0 + 0 + 8, false);
          A.store.Bool(ptr + 0 + 0 + 16, false);
          A.store.Bool(ptr + 0 + 0 + 9, false);
          A.store.Bool(ptr + 0 + 0 + 17, false);
          A.store.Bool(ptr + 0 + 0 + 10, false);
          A.store.Bool(ptr + 0 + 0 + 18, false);
          A.store.Bool(ptr + 0 + 0 + 11, false);
          A.store.Bool(ptr + 0 + 0 + 19, false);
          A.store.Bool(ptr + 0 + 0 + 12, false);
          A.store.Bool(ptr + 0 + 0 + 20, false);
          A.store.Bool(ptr + 0 + 0 + 13, false);

          A.store.Bool(ptr + 0 + 24 + 221, false);

          A.store.Bool(ptr + 0 + 24 + 0 + 28, false);
          A.store.Ref(ptr + 0 + 24 + 0 + 0, undefined);
          A.store.Ref(ptr + 0 + 24 + 0 + 4, undefined);
          A.store.Ref(ptr + 0 + 24 + 0 + 8, undefined);
          A.store.Ref(ptr + 0 + 24 + 0 + 12, undefined);
          A.store.Ref(ptr + 0 + 24 + 0 + 16, undefined);
          A.store.Ref(ptr + 0 + 24 + 0 + 20, undefined);
          A.store.Bool(ptr + 0 + 24 + 0 + 26, false);
          A.store.Bool(ptr + 0 + 24 + 0 + 24, false);
          A.store.Bool(ptr + 0 + 24 + 0 + 27, false);
          A.store.Bool(ptr + 0 + 24 + 0 + 25, false);

          A.store.Bool(ptr + 0 + 24 + 32 + 28, false);
          A.store.Ref(ptr + 0 + 24 + 32 + 0, undefined);
          A.store.Ref(ptr + 0 + 24 + 32 + 4, undefined);
          A.store.Ref(ptr + 0 + 24 + 32 + 8, undefined);
          A.store.Ref(ptr + 0 + 24 + 32 + 12, undefined);
          A.store.Ref(ptr + 0 + 24 + 32 + 16, undefined);
          A.store.Ref(ptr + 0 + 24 + 32 + 20, undefined);
          A.store.Bool(ptr + 0 + 24 + 32 + 26, false);
          A.store.Bool(ptr + 0 + 24 + 32 + 24, false);
          A.store.Bool(ptr + 0 + 24 + 32 + 27, false);
          A.store.Bool(ptr + 0 + 24 + 32 + 25, false);

          A.store.Bool(ptr + 0 + 24 + 64 + 28, false);
          A.store.Ref(ptr + 0 + 24 + 64 + 0, undefined);
          A.store.Ref(ptr + 0 + 24 + 64 + 4, undefined);
          A.store.Ref(ptr + 0 + 24 + 64 + 8, undefined);
          A.store.Ref(ptr + 0 + 24 + 64 + 12, undefined);
          A.store.Ref(ptr + 0 + 24 + 64 + 16, undefined);
          A.store.Ref(ptr + 0 + 24 + 64 + 20, undefined);
          A.store.Bool(ptr + 0 + 24 + 64 + 26, false);
          A.store.Bool(ptr + 0 + 24 + 64 + 24, false);
          A.store.Bool(ptr + 0 + 24 + 64 + 27, false);
          A.store.Bool(ptr + 0 + 24 + 64 + 25, false);

          A.store.Bool(ptr + 0 + 24 + 96 + 28, false);
          A.store.Ref(ptr + 0 + 24 + 96 + 0, undefined);
          A.store.Ref(ptr + 0 + 24 + 96 + 4, undefined);
          A.store.Ref(ptr + 0 + 24 + 96 + 8, undefined);
          A.store.Ref(ptr + 0 + 24 + 96 + 12, undefined);
          A.store.Ref(ptr + 0 + 24 + 96 + 16, undefined);
          A.store.Ref(ptr + 0 + 24 + 96 + 20, undefined);
          A.store.Bool(ptr + 0 + 24 + 96 + 26, false);
          A.store.Bool(ptr + 0 + 24 + 96 + 24, false);
          A.store.Bool(ptr + 0 + 24 + 96 + 27, false);
          A.store.Bool(ptr + 0 + 24 + 96 + 25, false);

          A.store.Bool(ptr + 0 + 24 + 128 + 28, false);
          A.store.Ref(ptr + 0 + 24 + 128 + 0, undefined);
          A.store.Ref(ptr + 0 + 24 + 128 + 4, undefined);
          A.store.Ref(ptr + 0 + 24 + 128 + 8, undefined);
          A.store.Ref(ptr + 0 + 24 + 128 + 12, undefined);
          A.store.Ref(ptr + 0 + 24 + 128 + 16, undefined);
          A.store.Ref(ptr + 0 + 24 + 128 + 20, undefined);
          A.store.Bool(ptr + 0 + 24 + 128 + 26, false);
          A.store.Bool(ptr + 0 + 24 + 128 + 24, false);
          A.store.Bool(ptr + 0 + 24 + 128 + 27, false);
          A.store.Bool(ptr + 0 + 24 + 128 + 25, false);

          A.store.Bool(ptr + 0 + 24 + 160 + 28, false);
          A.store.Ref(ptr + 0 + 24 + 160 + 0, undefined);
          A.store.Ref(ptr + 0 + 24 + 160 + 4, undefined);
          A.store.Ref(ptr + 0 + 24 + 160 + 8, undefined);
          A.store.Ref(ptr + 0 + 24 + 160 + 12, undefined);
          A.store.Ref(ptr + 0 + 24 + 160 + 16, undefined);
          A.store.Ref(ptr + 0 + 24 + 160 + 20, undefined);
          A.store.Bool(ptr + 0 + 24 + 160 + 26, false);
          A.store.Bool(ptr + 0 + 24 + 160 + 24, false);
          A.store.Bool(ptr + 0 + 24 + 160 + 27, false);
          A.store.Bool(ptr + 0 + 24 + 160 + 25, false);

          A.store.Bool(ptr + 0 + 24 + 192 + 28, false);
          A.store.Ref(ptr + 0 + 24 + 192 + 0, undefined);
          A.store.Ref(ptr + 0 + 24 + 192 + 4, undefined);
          A.store.Ref(ptr + 0 + 24 + 192 + 8, undefined);
          A.store.Ref(ptr + 0 + 24 + 192 + 12, undefined);
          A.store.Ref(ptr + 0 + 24 + 192 + 16, undefined);
          A.store.Ref(ptr + 0 + 24 + 192 + 20, undefined);
          A.store.Bool(ptr + 0 + 24 + 192 + 26, false);
          A.store.Bool(ptr + 0 + 24 + 192 + 24, false);
          A.store.Bool(ptr + 0 + 24 + 192 + 27, false);
          A.store.Bool(ptr + 0 + 24 + 192 + 25, false);

          A.store.Bool(ptr + 0 + 248 + 28, false);
          A.store.Ref(ptr + 0 + 248 + 0, undefined);
          A.store.Ref(ptr + 0 + 248 + 4, undefined);
          A.store.Ref(ptr + 0 + 248 + 8, undefined);
          A.store.Ref(ptr + 0 + 248 + 12, undefined);
          A.store.Ref(ptr + 0 + 248 + 16, undefined);
          A.store.Ref(ptr + 0 + 248 + 20, undefined);
          A.store.Bool(ptr + 0 + 248 + 26, false);
          A.store.Bool(ptr + 0 + 248 + 24, false);
          A.store.Bool(ptr + 0 + 248 + 27, false);
          A.store.Bool(ptr + 0 + 248 + 25, false);
          A.store.Ref(ptr + 0 + 280, undefined);
          A.store.Enum(ptr + 0 + 284, -1);
          A.store.Bool(ptr + 0 + 453, false);
          A.store.Bool(ptr + 0 + 288, false);
          A.store.Ref(ptr + 0 + 292, undefined);
          A.store.Ref(ptr + 0 + 296, undefined);
          A.store.Ref(ptr + 0 + 300, undefined);
          A.store.Ref(ptr + 0 + 304, undefined);
          A.store.Ref(ptr + 0 + 308, undefined);

          A.store.Bool(ptr + 0 + 312 + 12, false);
          A.store.Ref(ptr + 0 + 312 + 0, undefined);
          A.store.Ref(ptr + 0 + 312 + 4, undefined);
          A.store.Ref(ptr + 0 + 312 + 8, undefined);
          A.store.Ref(ptr + 0 + 328, undefined);
          A.store.Ref(ptr + 0 + 332, undefined);

          A.store.Bool(ptr + 0 + 336 + 28, false);
          A.store.Ref(ptr + 0 + 336 + 0, undefined);
          A.store.Ref(ptr + 0 + 336 + 4, undefined);
          A.store.Ref(ptr + 0 + 336 + 8, undefined);
          A.store.Ref(ptr + 0 + 336 + 12, undefined);
          A.store.Ref(ptr + 0 + 336 + 16, undefined);
          A.store.Ref(ptr + 0 + 336 + 20, undefined);
          A.store.Ref(ptr + 0 + 336 + 24, undefined);
          A.store.Ref(ptr + 0 + 368, undefined);
          A.store.Ref(ptr + 0 + 372, undefined);
          A.store.Ref(ptr + 0 + 376, undefined);
          A.store.Ref(ptr + 0 + 380, undefined);
          A.store.Ref(ptr + 0 + 384, undefined);
          A.store.Ref(ptr + 0 + 388, undefined);

          A.store.Bool(ptr + 0 + 392 + 12, false);
          A.store.Ref(ptr + 0 + 392 + 0, undefined);
          A.store.Ref(ptr + 0 + 392 + 4, undefined);
          A.store.Ref(ptr + 0 + 392 + 8, undefined);
          A.store.Ref(ptr + 0 + 408, undefined);
          A.store.Bool(ptr + 0 + 454, false);
          A.store.Bool(ptr + 0 + 412, false);

          A.store.Bool(ptr + 0 + 416 + 12, false);
          A.store.Ref(ptr + 0 + 416 + 0, undefined);
          A.store.Ref(ptr + 0 + 416 + 4, undefined);
          A.store.Ref(ptr + 0 + 416 + 8, undefined);

          A.store.Bool(ptr + 0 + 432 + 14, false);
          A.store.Ref(ptr + 0 + 432 + 0, undefined);
          A.store.Bool(ptr + 0 + 432 + 12, false);
          A.store.Bool(ptr + 0 + 432 + 4, false);
          A.store.Bool(ptr + 0 + 432 + 13, false);
          A.store.Int32(ptr + 0 + 432 + 8, 0);
          A.store.Bool(ptr + 0 + 455, false);
          A.store.Bool(ptr + 0 + 447, false);
          A.store.Bool(ptr + 0 + 456, false);
          A.store.Int32(ptr + 0 + 448, 0);
          A.store.Bool(ptr + 0 + 457, false);
          A.store.Bool(ptr + 0 + 452, false);
        } else {
          A.store.Bool(ptr + 0 + 458, true);

          if (typeof x["Cellular"]["AutoConnect"] === "undefined") {
            A.store.Bool(ptr + 0 + 0 + 21, false);
            A.store.Bool(ptr + 0 + 0 + 14, false);
            A.store.Bool(ptr + 0 + 0 + 0, false);
            A.store.Ref(ptr + 0 + 0 + 4, undefined);
            A.store.Bool(ptr + 0 + 0 + 15, false);
            A.store.Bool(ptr + 0 + 0 + 8, false);
            A.store.Bool(ptr + 0 + 0 + 16, false);
            A.store.Bool(ptr + 0 + 0 + 9, false);
            A.store.Bool(ptr + 0 + 0 + 17, false);
            A.store.Bool(ptr + 0 + 0 + 10, false);
            A.store.Bool(ptr + 0 + 0 + 18, false);
            A.store.Bool(ptr + 0 + 0 + 11, false);
            A.store.Bool(ptr + 0 + 0 + 19, false);
            A.store.Bool(ptr + 0 + 0 + 12, false);
            A.store.Bool(ptr + 0 + 0 + 20, false);
            A.store.Bool(ptr + 0 + 0 + 13, false);
          } else {
            A.store.Bool(ptr + 0 + 0 + 21, true);
            A.store.Bool(ptr + 0 + 0 + 14, "Active" in x["Cellular"]["AutoConnect"] ? true : false);
            A.store.Bool(ptr + 0 + 0 + 0, x["Cellular"]["AutoConnect"]["Active"] ? true : false);
            A.store.Ref(ptr + 0 + 0 + 4, x["Cellular"]["AutoConnect"]["Effective"]);
            A.store.Bool(ptr + 0 + 0 + 15, "UserPolicy" in x["Cellular"]["AutoConnect"] ? true : false);
            A.store.Bool(ptr + 0 + 0 + 8, x["Cellular"]["AutoConnect"]["UserPolicy"] ? true : false);
            A.store.Bool(ptr + 0 + 0 + 16, "DevicePolicy" in x["Cellular"]["AutoConnect"] ? true : false);
            A.store.Bool(ptr + 0 + 0 + 9, x["Cellular"]["AutoConnect"]["DevicePolicy"] ? true : false);
            A.store.Bool(ptr + 0 + 0 + 17, "UserSetting" in x["Cellular"]["AutoConnect"] ? true : false);
            A.store.Bool(ptr + 0 + 0 + 10, x["Cellular"]["AutoConnect"]["UserSetting"] ? true : false);
            A.store.Bool(ptr + 0 + 0 + 18, "SharedSetting" in x["Cellular"]["AutoConnect"] ? true : false);
            A.store.Bool(ptr + 0 + 0 + 11, x["Cellular"]["AutoConnect"]["SharedSetting"] ? true : false);
            A.store.Bool(ptr + 0 + 0 + 19, "UserEditable" in x["Cellular"]["AutoConnect"] ? true : false);
            A.store.Bool(ptr + 0 + 0 + 12, x["Cellular"]["AutoConnect"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 0 + 0 + 20, "DeviceEditable" in x["Cellular"]["AutoConnect"] ? true : false);
            A.store.Bool(ptr + 0 + 0 + 13, x["Cellular"]["AutoConnect"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["Cellular"]["APN"] === "undefined") {
            A.store.Bool(ptr + 0 + 24 + 221, false);

            A.store.Bool(ptr + 0 + 24 + 0 + 28, false);
            A.store.Ref(ptr + 0 + 24 + 0 + 0, undefined);
            A.store.Ref(ptr + 0 + 24 + 0 + 4, undefined);
            A.store.Ref(ptr + 0 + 24 + 0 + 8, undefined);
            A.store.Ref(ptr + 0 + 24 + 0 + 12, undefined);
            A.store.Ref(ptr + 0 + 24 + 0 + 16, undefined);
            A.store.Ref(ptr + 0 + 24 + 0 + 20, undefined);
            A.store.Bool(ptr + 0 + 24 + 0 + 26, false);
            A.store.Bool(ptr + 0 + 24 + 0 + 24, false);
            A.store.Bool(ptr + 0 + 24 + 0 + 27, false);
            A.store.Bool(ptr + 0 + 24 + 0 + 25, false);

            A.store.Bool(ptr + 0 + 24 + 32 + 28, false);
            A.store.Ref(ptr + 0 + 24 + 32 + 0, undefined);
            A.store.Ref(ptr + 0 + 24 + 32 + 4, undefined);
            A.store.Ref(ptr + 0 + 24 + 32 + 8, undefined);
            A.store.Ref(ptr + 0 + 24 + 32 + 12, undefined);
            A.store.Ref(ptr + 0 + 24 + 32 + 16, undefined);
            A.store.Ref(ptr + 0 + 24 + 32 + 20, undefined);
            A.store.Bool(ptr + 0 + 24 + 32 + 26, false);
            A.store.Bool(ptr + 0 + 24 + 32 + 24, false);
            A.store.Bool(ptr + 0 + 24 + 32 + 27, false);
            A.store.Bool(ptr + 0 + 24 + 32 + 25, false);

            A.store.Bool(ptr + 0 + 24 + 64 + 28, false);
            A.store.Ref(ptr + 0 + 24 + 64 + 0, undefined);
            A.store.Ref(ptr + 0 + 24 + 64 + 4, undefined);
            A.store.Ref(ptr + 0 + 24 + 64 + 8, undefined);
            A.store.Ref(ptr + 0 + 24 + 64 + 12, undefined);
            A.store.Ref(ptr + 0 + 24 + 64 + 16, undefined);
            A.store.Ref(ptr + 0 + 24 + 64 + 20, undefined);
            A.store.Bool(ptr + 0 + 24 + 64 + 26, false);
            A.store.Bool(ptr + 0 + 24 + 64 + 24, false);
            A.store.Bool(ptr + 0 + 24 + 64 + 27, false);
            A.store.Bool(ptr + 0 + 24 + 64 + 25, false);

            A.store.Bool(ptr + 0 + 24 + 96 + 28, false);
            A.store.Ref(ptr + 0 + 24 + 96 + 0, undefined);
            A.store.Ref(ptr + 0 + 24 + 96 + 4, undefined);
            A.store.Ref(ptr + 0 + 24 + 96 + 8, undefined);
            A.store.Ref(ptr + 0 + 24 + 96 + 12, undefined);
            A.store.Ref(ptr + 0 + 24 + 96 + 16, undefined);
            A.store.Ref(ptr + 0 + 24 + 96 + 20, undefined);
            A.store.Bool(ptr + 0 + 24 + 96 + 26, false);
            A.store.Bool(ptr + 0 + 24 + 96 + 24, false);
            A.store.Bool(ptr + 0 + 24 + 96 + 27, false);
            A.store.Bool(ptr + 0 + 24 + 96 + 25, false);

            A.store.Bool(ptr + 0 + 24 + 128 + 28, false);
            A.store.Ref(ptr + 0 + 24 + 128 + 0, undefined);
            A.store.Ref(ptr + 0 + 24 + 128 + 4, undefined);
            A.store.Ref(ptr + 0 + 24 + 128 + 8, undefined);
            A.store.Ref(ptr + 0 + 24 + 128 + 12, undefined);
            A.store.Ref(ptr + 0 + 24 + 128 + 16, undefined);
            A.store.Ref(ptr + 0 + 24 + 128 + 20, undefined);
            A.store.Bool(ptr + 0 + 24 + 128 + 26, false);
            A.store.Bool(ptr + 0 + 24 + 128 + 24, false);
            A.store.Bool(ptr + 0 + 24 + 128 + 27, false);
            A.store.Bool(ptr + 0 + 24 + 128 + 25, false);

            A.store.Bool(ptr + 0 + 24 + 160 + 28, false);
            A.store.Ref(ptr + 0 + 24 + 160 + 0, undefined);
            A.store.Ref(ptr + 0 + 24 + 160 + 4, undefined);
            A.store.Ref(ptr + 0 + 24 + 160 + 8, undefined);
            A.store.Ref(ptr + 0 + 24 + 160 + 12, undefined);
            A.store.Ref(ptr + 0 + 24 + 160 + 16, undefined);
            A.store.Ref(ptr + 0 + 24 + 160 + 20, undefined);
            A.store.Bool(ptr + 0 + 24 + 160 + 26, false);
            A.store.Bool(ptr + 0 + 24 + 160 + 24, false);
            A.store.Bool(ptr + 0 + 24 + 160 + 27, false);
            A.store.Bool(ptr + 0 + 24 + 160 + 25, false);

            A.store.Bool(ptr + 0 + 24 + 192 + 28, false);
            A.store.Ref(ptr + 0 + 24 + 192 + 0, undefined);
            A.store.Ref(ptr + 0 + 24 + 192 + 4, undefined);
            A.store.Ref(ptr + 0 + 24 + 192 + 8, undefined);
            A.store.Ref(ptr + 0 + 24 + 192 + 12, undefined);
            A.store.Ref(ptr + 0 + 24 + 192 + 16, undefined);
            A.store.Ref(ptr + 0 + 24 + 192 + 20, undefined);
            A.store.Bool(ptr + 0 + 24 + 192 + 26, false);
            A.store.Bool(ptr + 0 + 24 + 192 + 24, false);
            A.store.Bool(ptr + 0 + 24 + 192 + 27, false);
            A.store.Bool(ptr + 0 + 24 + 192 + 25, false);
          } else {
            A.store.Bool(ptr + 0 + 24 + 221, true);

            if (typeof x["Cellular"]["APN"]["AccessPointName"] === "undefined") {
              A.store.Bool(ptr + 0 + 24 + 0 + 28, false);
              A.store.Ref(ptr + 0 + 24 + 0 + 0, undefined);
              A.store.Ref(ptr + 0 + 24 + 0 + 4, undefined);
              A.store.Ref(ptr + 0 + 24 + 0 + 8, undefined);
              A.store.Ref(ptr + 0 + 24 + 0 + 12, undefined);
              A.store.Ref(ptr + 0 + 24 + 0 + 16, undefined);
              A.store.Ref(ptr + 0 + 24 + 0 + 20, undefined);
              A.store.Bool(ptr + 0 + 24 + 0 + 26, false);
              A.store.Bool(ptr + 0 + 24 + 0 + 24, false);
              A.store.Bool(ptr + 0 + 24 + 0 + 27, false);
              A.store.Bool(ptr + 0 + 24 + 0 + 25, false);
            } else {
              A.store.Bool(ptr + 0 + 24 + 0 + 28, true);
              A.store.Ref(ptr + 0 + 24 + 0 + 0, x["Cellular"]["APN"]["AccessPointName"]["Active"]);
              A.store.Ref(ptr + 0 + 24 + 0 + 4, x["Cellular"]["APN"]["AccessPointName"]["Effective"]);
              A.store.Ref(ptr + 0 + 24 + 0 + 8, x["Cellular"]["APN"]["AccessPointName"]["UserPolicy"]);
              A.store.Ref(ptr + 0 + 24 + 0 + 12, x["Cellular"]["APN"]["AccessPointName"]["DevicePolicy"]);
              A.store.Ref(ptr + 0 + 24 + 0 + 16, x["Cellular"]["APN"]["AccessPointName"]["UserSetting"]);
              A.store.Ref(ptr + 0 + 24 + 0 + 20, x["Cellular"]["APN"]["AccessPointName"]["SharedSetting"]);
              A.store.Bool(
                ptr + 0 + 24 + 0 + 26,
                "UserEditable" in x["Cellular"]["APN"]["AccessPointName"] ? true : false
              );
              A.store.Bool(
                ptr + 0 + 24 + 0 + 24,
                x["Cellular"]["APN"]["AccessPointName"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 0 + 24 + 0 + 27,
                "DeviceEditable" in x["Cellular"]["APN"]["AccessPointName"] ? true : false
              );
              A.store.Bool(
                ptr + 0 + 24 + 0 + 25,
                x["Cellular"]["APN"]["AccessPointName"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["Cellular"]["APN"]["Authentication"] === "undefined") {
              A.store.Bool(ptr + 0 + 24 + 32 + 28, false);
              A.store.Ref(ptr + 0 + 24 + 32 + 0, undefined);
              A.store.Ref(ptr + 0 + 24 + 32 + 4, undefined);
              A.store.Ref(ptr + 0 + 24 + 32 + 8, undefined);
              A.store.Ref(ptr + 0 + 24 + 32 + 12, undefined);
              A.store.Ref(ptr + 0 + 24 + 32 + 16, undefined);
              A.store.Ref(ptr + 0 + 24 + 32 + 20, undefined);
              A.store.Bool(ptr + 0 + 24 + 32 + 26, false);
              A.store.Bool(ptr + 0 + 24 + 32 + 24, false);
              A.store.Bool(ptr + 0 + 24 + 32 + 27, false);
              A.store.Bool(ptr + 0 + 24 + 32 + 25, false);
            } else {
              A.store.Bool(ptr + 0 + 24 + 32 + 28, true);
              A.store.Ref(ptr + 0 + 24 + 32 + 0, x["Cellular"]["APN"]["Authentication"]["Active"]);
              A.store.Ref(ptr + 0 + 24 + 32 + 4, x["Cellular"]["APN"]["Authentication"]["Effective"]);
              A.store.Ref(ptr + 0 + 24 + 32 + 8, x["Cellular"]["APN"]["Authentication"]["UserPolicy"]);
              A.store.Ref(ptr + 0 + 24 + 32 + 12, x["Cellular"]["APN"]["Authentication"]["DevicePolicy"]);
              A.store.Ref(ptr + 0 + 24 + 32 + 16, x["Cellular"]["APN"]["Authentication"]["UserSetting"]);
              A.store.Ref(ptr + 0 + 24 + 32 + 20, x["Cellular"]["APN"]["Authentication"]["SharedSetting"]);
              A.store.Bool(
                ptr + 0 + 24 + 32 + 26,
                "UserEditable" in x["Cellular"]["APN"]["Authentication"] ? true : false
              );
              A.store.Bool(
                ptr + 0 + 24 + 32 + 24,
                x["Cellular"]["APN"]["Authentication"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 0 + 24 + 32 + 27,
                "DeviceEditable" in x["Cellular"]["APN"]["Authentication"] ? true : false
              );
              A.store.Bool(
                ptr + 0 + 24 + 32 + 25,
                x["Cellular"]["APN"]["Authentication"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["Cellular"]["APN"]["Language"] === "undefined") {
              A.store.Bool(ptr + 0 + 24 + 64 + 28, false);
              A.store.Ref(ptr + 0 + 24 + 64 + 0, undefined);
              A.store.Ref(ptr + 0 + 24 + 64 + 4, undefined);
              A.store.Ref(ptr + 0 + 24 + 64 + 8, undefined);
              A.store.Ref(ptr + 0 + 24 + 64 + 12, undefined);
              A.store.Ref(ptr + 0 + 24 + 64 + 16, undefined);
              A.store.Ref(ptr + 0 + 24 + 64 + 20, undefined);
              A.store.Bool(ptr + 0 + 24 + 64 + 26, false);
              A.store.Bool(ptr + 0 + 24 + 64 + 24, false);
              A.store.Bool(ptr + 0 + 24 + 64 + 27, false);
              A.store.Bool(ptr + 0 + 24 + 64 + 25, false);
            } else {
              A.store.Bool(ptr + 0 + 24 + 64 + 28, true);
              A.store.Ref(ptr + 0 + 24 + 64 + 0, x["Cellular"]["APN"]["Language"]["Active"]);
              A.store.Ref(ptr + 0 + 24 + 64 + 4, x["Cellular"]["APN"]["Language"]["Effective"]);
              A.store.Ref(ptr + 0 + 24 + 64 + 8, x["Cellular"]["APN"]["Language"]["UserPolicy"]);
              A.store.Ref(ptr + 0 + 24 + 64 + 12, x["Cellular"]["APN"]["Language"]["DevicePolicy"]);
              A.store.Ref(ptr + 0 + 24 + 64 + 16, x["Cellular"]["APN"]["Language"]["UserSetting"]);
              A.store.Ref(ptr + 0 + 24 + 64 + 20, x["Cellular"]["APN"]["Language"]["SharedSetting"]);
              A.store.Bool(ptr + 0 + 24 + 64 + 26, "UserEditable" in x["Cellular"]["APN"]["Language"] ? true : false);
              A.store.Bool(ptr + 0 + 24 + 64 + 24, x["Cellular"]["APN"]["Language"]["UserEditable"] ? true : false);
              A.store.Bool(ptr + 0 + 24 + 64 + 27, "DeviceEditable" in x["Cellular"]["APN"]["Language"] ? true : false);
              A.store.Bool(ptr + 0 + 24 + 64 + 25, x["Cellular"]["APN"]["Language"]["DeviceEditable"] ? true : false);
            }

            if (typeof x["Cellular"]["APN"]["LocalizedName"] === "undefined") {
              A.store.Bool(ptr + 0 + 24 + 96 + 28, false);
              A.store.Ref(ptr + 0 + 24 + 96 + 0, undefined);
              A.store.Ref(ptr + 0 + 24 + 96 + 4, undefined);
              A.store.Ref(ptr + 0 + 24 + 96 + 8, undefined);
              A.store.Ref(ptr + 0 + 24 + 96 + 12, undefined);
              A.store.Ref(ptr + 0 + 24 + 96 + 16, undefined);
              A.store.Ref(ptr + 0 + 24 + 96 + 20, undefined);
              A.store.Bool(ptr + 0 + 24 + 96 + 26, false);
              A.store.Bool(ptr + 0 + 24 + 96 + 24, false);
              A.store.Bool(ptr + 0 + 24 + 96 + 27, false);
              A.store.Bool(ptr + 0 + 24 + 96 + 25, false);
            } else {
              A.store.Bool(ptr + 0 + 24 + 96 + 28, true);
              A.store.Ref(ptr + 0 + 24 + 96 + 0, x["Cellular"]["APN"]["LocalizedName"]["Active"]);
              A.store.Ref(ptr + 0 + 24 + 96 + 4, x["Cellular"]["APN"]["LocalizedName"]["Effective"]);
              A.store.Ref(ptr + 0 + 24 + 96 + 8, x["Cellular"]["APN"]["LocalizedName"]["UserPolicy"]);
              A.store.Ref(ptr + 0 + 24 + 96 + 12, x["Cellular"]["APN"]["LocalizedName"]["DevicePolicy"]);
              A.store.Ref(ptr + 0 + 24 + 96 + 16, x["Cellular"]["APN"]["LocalizedName"]["UserSetting"]);
              A.store.Ref(ptr + 0 + 24 + 96 + 20, x["Cellular"]["APN"]["LocalizedName"]["SharedSetting"]);
              A.store.Bool(
                ptr + 0 + 24 + 96 + 26,
                "UserEditable" in x["Cellular"]["APN"]["LocalizedName"] ? true : false
              );
              A.store.Bool(
                ptr + 0 + 24 + 96 + 24,
                x["Cellular"]["APN"]["LocalizedName"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 0 + 24 + 96 + 27,
                "DeviceEditable" in x["Cellular"]["APN"]["LocalizedName"] ? true : false
              );
              A.store.Bool(
                ptr + 0 + 24 + 96 + 25,
                x["Cellular"]["APN"]["LocalizedName"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["Cellular"]["APN"]["Name"] === "undefined") {
              A.store.Bool(ptr + 0 + 24 + 128 + 28, false);
              A.store.Ref(ptr + 0 + 24 + 128 + 0, undefined);
              A.store.Ref(ptr + 0 + 24 + 128 + 4, undefined);
              A.store.Ref(ptr + 0 + 24 + 128 + 8, undefined);
              A.store.Ref(ptr + 0 + 24 + 128 + 12, undefined);
              A.store.Ref(ptr + 0 + 24 + 128 + 16, undefined);
              A.store.Ref(ptr + 0 + 24 + 128 + 20, undefined);
              A.store.Bool(ptr + 0 + 24 + 128 + 26, false);
              A.store.Bool(ptr + 0 + 24 + 128 + 24, false);
              A.store.Bool(ptr + 0 + 24 + 128 + 27, false);
              A.store.Bool(ptr + 0 + 24 + 128 + 25, false);
            } else {
              A.store.Bool(ptr + 0 + 24 + 128 + 28, true);
              A.store.Ref(ptr + 0 + 24 + 128 + 0, x["Cellular"]["APN"]["Name"]["Active"]);
              A.store.Ref(ptr + 0 + 24 + 128 + 4, x["Cellular"]["APN"]["Name"]["Effective"]);
              A.store.Ref(ptr + 0 + 24 + 128 + 8, x["Cellular"]["APN"]["Name"]["UserPolicy"]);
              A.store.Ref(ptr + 0 + 24 + 128 + 12, x["Cellular"]["APN"]["Name"]["DevicePolicy"]);
              A.store.Ref(ptr + 0 + 24 + 128 + 16, x["Cellular"]["APN"]["Name"]["UserSetting"]);
              A.store.Ref(ptr + 0 + 24 + 128 + 20, x["Cellular"]["APN"]["Name"]["SharedSetting"]);
              A.store.Bool(ptr + 0 + 24 + 128 + 26, "UserEditable" in x["Cellular"]["APN"]["Name"] ? true : false);
              A.store.Bool(ptr + 0 + 24 + 128 + 24, x["Cellular"]["APN"]["Name"]["UserEditable"] ? true : false);
              A.store.Bool(ptr + 0 + 24 + 128 + 27, "DeviceEditable" in x["Cellular"]["APN"]["Name"] ? true : false);
              A.store.Bool(ptr + 0 + 24 + 128 + 25, x["Cellular"]["APN"]["Name"]["DeviceEditable"] ? true : false);
            }

            if (typeof x["Cellular"]["APN"]["Password"] === "undefined") {
              A.store.Bool(ptr + 0 + 24 + 160 + 28, false);
              A.store.Ref(ptr + 0 + 24 + 160 + 0, undefined);
              A.store.Ref(ptr + 0 + 24 + 160 + 4, undefined);
              A.store.Ref(ptr + 0 + 24 + 160 + 8, undefined);
              A.store.Ref(ptr + 0 + 24 + 160 + 12, undefined);
              A.store.Ref(ptr + 0 + 24 + 160 + 16, undefined);
              A.store.Ref(ptr + 0 + 24 + 160 + 20, undefined);
              A.store.Bool(ptr + 0 + 24 + 160 + 26, false);
              A.store.Bool(ptr + 0 + 24 + 160 + 24, false);
              A.store.Bool(ptr + 0 + 24 + 160 + 27, false);
              A.store.Bool(ptr + 0 + 24 + 160 + 25, false);
            } else {
              A.store.Bool(ptr + 0 + 24 + 160 + 28, true);
              A.store.Ref(ptr + 0 + 24 + 160 + 0, x["Cellular"]["APN"]["Password"]["Active"]);
              A.store.Ref(ptr + 0 + 24 + 160 + 4, x["Cellular"]["APN"]["Password"]["Effective"]);
              A.store.Ref(ptr + 0 + 24 + 160 + 8, x["Cellular"]["APN"]["Password"]["UserPolicy"]);
              A.store.Ref(ptr + 0 + 24 + 160 + 12, x["Cellular"]["APN"]["Password"]["DevicePolicy"]);
              A.store.Ref(ptr + 0 + 24 + 160 + 16, x["Cellular"]["APN"]["Password"]["UserSetting"]);
              A.store.Ref(ptr + 0 + 24 + 160 + 20, x["Cellular"]["APN"]["Password"]["SharedSetting"]);
              A.store.Bool(ptr + 0 + 24 + 160 + 26, "UserEditable" in x["Cellular"]["APN"]["Password"] ? true : false);
              A.store.Bool(ptr + 0 + 24 + 160 + 24, x["Cellular"]["APN"]["Password"]["UserEditable"] ? true : false);
              A.store.Bool(
                ptr + 0 + 24 + 160 + 27,
                "DeviceEditable" in x["Cellular"]["APN"]["Password"] ? true : false
              );
              A.store.Bool(ptr + 0 + 24 + 160 + 25, x["Cellular"]["APN"]["Password"]["DeviceEditable"] ? true : false);
            }

            if (typeof x["Cellular"]["APN"]["Username"] === "undefined") {
              A.store.Bool(ptr + 0 + 24 + 192 + 28, false);
              A.store.Ref(ptr + 0 + 24 + 192 + 0, undefined);
              A.store.Ref(ptr + 0 + 24 + 192 + 4, undefined);
              A.store.Ref(ptr + 0 + 24 + 192 + 8, undefined);
              A.store.Ref(ptr + 0 + 24 + 192 + 12, undefined);
              A.store.Ref(ptr + 0 + 24 + 192 + 16, undefined);
              A.store.Ref(ptr + 0 + 24 + 192 + 20, undefined);
              A.store.Bool(ptr + 0 + 24 + 192 + 26, false);
              A.store.Bool(ptr + 0 + 24 + 192 + 24, false);
              A.store.Bool(ptr + 0 + 24 + 192 + 27, false);
              A.store.Bool(ptr + 0 + 24 + 192 + 25, false);
            } else {
              A.store.Bool(ptr + 0 + 24 + 192 + 28, true);
              A.store.Ref(ptr + 0 + 24 + 192 + 0, x["Cellular"]["APN"]["Username"]["Active"]);
              A.store.Ref(ptr + 0 + 24 + 192 + 4, x["Cellular"]["APN"]["Username"]["Effective"]);
              A.store.Ref(ptr + 0 + 24 + 192 + 8, x["Cellular"]["APN"]["Username"]["UserPolicy"]);
              A.store.Ref(ptr + 0 + 24 + 192 + 12, x["Cellular"]["APN"]["Username"]["DevicePolicy"]);
              A.store.Ref(ptr + 0 + 24 + 192 + 16, x["Cellular"]["APN"]["Username"]["UserSetting"]);
              A.store.Ref(ptr + 0 + 24 + 192 + 20, x["Cellular"]["APN"]["Username"]["SharedSetting"]);
              A.store.Bool(ptr + 0 + 24 + 192 + 26, "UserEditable" in x["Cellular"]["APN"]["Username"] ? true : false);
              A.store.Bool(ptr + 0 + 24 + 192 + 24, x["Cellular"]["APN"]["Username"]["UserEditable"] ? true : false);
              A.store.Bool(
                ptr + 0 + 24 + 192 + 27,
                "DeviceEditable" in x["Cellular"]["APN"]["Username"] ? true : false
              );
              A.store.Bool(ptr + 0 + 24 + 192 + 25, x["Cellular"]["APN"]["Username"]["DeviceEditable"] ? true : false);
            }
          }

          if (typeof x["Cellular"]["APNList"] === "undefined") {
            A.store.Bool(ptr + 0 + 248 + 28, false);
            A.store.Ref(ptr + 0 + 248 + 0, undefined);
            A.store.Ref(ptr + 0 + 248 + 4, undefined);
            A.store.Ref(ptr + 0 + 248 + 8, undefined);
            A.store.Ref(ptr + 0 + 248 + 12, undefined);
            A.store.Ref(ptr + 0 + 248 + 16, undefined);
            A.store.Ref(ptr + 0 + 248 + 20, undefined);
            A.store.Bool(ptr + 0 + 248 + 26, false);
            A.store.Bool(ptr + 0 + 248 + 24, false);
            A.store.Bool(ptr + 0 + 248 + 27, false);
            A.store.Bool(ptr + 0 + 248 + 25, false);
          } else {
            A.store.Bool(ptr + 0 + 248 + 28, true);
            A.store.Ref(ptr + 0 + 248 + 0, x["Cellular"]["APNList"]["Active"]);
            A.store.Ref(ptr + 0 + 248 + 4, x["Cellular"]["APNList"]["Effective"]);
            A.store.Ref(ptr + 0 + 248 + 8, x["Cellular"]["APNList"]["UserPolicy"]);
            A.store.Ref(ptr + 0 + 248 + 12, x["Cellular"]["APNList"]["DevicePolicy"]);
            A.store.Ref(ptr + 0 + 248 + 16, x["Cellular"]["APNList"]["UserSetting"]);
            A.store.Ref(ptr + 0 + 248 + 20, x["Cellular"]["APNList"]["SharedSetting"]);
            A.store.Bool(ptr + 0 + 248 + 26, "UserEditable" in x["Cellular"]["APNList"] ? true : false);
            A.store.Bool(ptr + 0 + 248 + 24, x["Cellular"]["APNList"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 0 + 248 + 27, "DeviceEditable" in x["Cellular"]["APNList"] ? true : false);
            A.store.Bool(ptr + 0 + 248 + 25, x["Cellular"]["APNList"]["DeviceEditable"] ? true : false);
          }
          A.store.Ref(ptr + 0 + 280, x["Cellular"]["ActivationType"]);
          A.store.Enum(
            ptr + 0 + 284,
            ["Activated", "Activating", "NotActivated", "PartiallyActivated"].indexOf(
              x["Cellular"]["ActivationState"] as string
            )
          );
          A.store.Bool(ptr + 0 + 453, "AllowRoaming" in x["Cellular"] ? true : false);
          A.store.Bool(ptr + 0 + 288, x["Cellular"]["AllowRoaming"] ? true : false);
          A.store.Ref(ptr + 0 + 292, x["Cellular"]["ESN"]);
          A.store.Ref(ptr + 0 + 296, x["Cellular"]["Family"]);
          A.store.Ref(ptr + 0 + 300, x["Cellular"]["FirmwareRevision"]);
          A.store.Ref(ptr + 0 + 304, x["Cellular"]["FoundNetworks"]);
          A.store.Ref(ptr + 0 + 308, x["Cellular"]["HardwareRevision"]);

          if (typeof x["Cellular"]["HomeProvider"] === "undefined") {
            A.store.Bool(ptr + 0 + 312 + 12, false);
            A.store.Ref(ptr + 0 + 312 + 0, undefined);
            A.store.Ref(ptr + 0 + 312 + 4, undefined);
            A.store.Ref(ptr + 0 + 312 + 8, undefined);
          } else {
            A.store.Bool(ptr + 0 + 312 + 12, true);
            A.store.Ref(ptr + 0 + 312 + 0, x["Cellular"]["HomeProvider"]["Name"]);
            A.store.Ref(ptr + 0 + 312 + 4, x["Cellular"]["HomeProvider"]["Code"]);
            A.store.Ref(ptr + 0 + 312 + 8, x["Cellular"]["HomeProvider"]["Country"]);
          }
          A.store.Ref(ptr + 0 + 328, x["Cellular"]["ICCID"]);
          A.store.Ref(ptr + 0 + 332, x["Cellular"]["IMEI"]);

          if (typeof x["Cellular"]["LastGoodAPN"] === "undefined") {
            A.store.Bool(ptr + 0 + 336 + 28, false);
            A.store.Ref(ptr + 0 + 336 + 0, undefined);
            A.store.Ref(ptr + 0 + 336 + 4, undefined);
            A.store.Ref(ptr + 0 + 336 + 8, undefined);
            A.store.Ref(ptr + 0 + 336 + 12, undefined);
            A.store.Ref(ptr + 0 + 336 + 16, undefined);
            A.store.Ref(ptr + 0 + 336 + 20, undefined);
            A.store.Ref(ptr + 0 + 336 + 24, undefined);
          } else {
            A.store.Bool(ptr + 0 + 336 + 28, true);
            A.store.Ref(ptr + 0 + 336 + 0, x["Cellular"]["LastGoodAPN"]["AccessPointName"]);
            A.store.Ref(ptr + 0 + 336 + 4, x["Cellular"]["LastGoodAPN"]["Authentication"]);
            A.store.Ref(ptr + 0 + 336 + 8, x["Cellular"]["LastGoodAPN"]["Language"]);
            A.store.Ref(ptr + 0 + 336 + 12, x["Cellular"]["LastGoodAPN"]["LocalizedName"]);
            A.store.Ref(ptr + 0 + 336 + 16, x["Cellular"]["LastGoodAPN"]["Name"]);
            A.store.Ref(ptr + 0 + 336 + 20, x["Cellular"]["LastGoodAPN"]["Password"]);
            A.store.Ref(ptr + 0 + 336 + 24, x["Cellular"]["LastGoodAPN"]["Username"]);
          }
          A.store.Ref(ptr + 0 + 368, x["Cellular"]["Manufacturer"]);
          A.store.Ref(ptr + 0 + 372, x["Cellular"]["MDN"]);
          A.store.Ref(ptr + 0 + 376, x["Cellular"]["MEID"]);
          A.store.Ref(ptr + 0 + 380, x["Cellular"]["MIN"]);
          A.store.Ref(ptr + 0 + 384, x["Cellular"]["ModelID"]);
          A.store.Ref(ptr + 0 + 388, x["Cellular"]["NetworkTechnology"]);

          if (typeof x["Cellular"]["PaymentPortal"] === "undefined") {
            A.store.Bool(ptr + 0 + 392 + 12, false);
            A.store.Ref(ptr + 0 + 392 + 0, undefined);
            A.store.Ref(ptr + 0 + 392 + 4, undefined);
            A.store.Ref(ptr + 0 + 392 + 8, undefined);
          } else {
            A.store.Bool(ptr + 0 + 392 + 12, true);
            A.store.Ref(ptr + 0 + 392 + 0, x["Cellular"]["PaymentPortal"]["Method"]);
            A.store.Ref(ptr + 0 + 392 + 4, x["Cellular"]["PaymentPortal"]["PostData"]);
            A.store.Ref(ptr + 0 + 392 + 8, x["Cellular"]["PaymentPortal"]["Url"]);
          }
          A.store.Ref(ptr + 0 + 408, x["Cellular"]["RoamingState"]);
          A.store.Bool(ptr + 0 + 454, "Scanning" in x["Cellular"] ? true : false);
          A.store.Bool(ptr + 0 + 412, x["Cellular"]["Scanning"] ? true : false);

          if (typeof x["Cellular"]["ServingOperator"] === "undefined") {
            A.store.Bool(ptr + 0 + 416 + 12, false);
            A.store.Ref(ptr + 0 + 416 + 0, undefined);
            A.store.Ref(ptr + 0 + 416 + 4, undefined);
            A.store.Ref(ptr + 0 + 416 + 8, undefined);
          } else {
            A.store.Bool(ptr + 0 + 416 + 12, true);
            A.store.Ref(ptr + 0 + 416 + 0, x["Cellular"]["ServingOperator"]["Name"]);
            A.store.Ref(ptr + 0 + 416 + 4, x["Cellular"]["ServingOperator"]["Code"]);
            A.store.Ref(ptr + 0 + 416 + 8, x["Cellular"]["ServingOperator"]["Country"]);
          }

          if (typeof x["Cellular"]["SIMLockStatus"] === "undefined") {
            A.store.Bool(ptr + 0 + 432 + 14, false);
            A.store.Ref(ptr + 0 + 432 + 0, undefined);
            A.store.Bool(ptr + 0 + 432 + 12, false);
            A.store.Bool(ptr + 0 + 432 + 4, false);
            A.store.Bool(ptr + 0 + 432 + 13, false);
            A.store.Int32(ptr + 0 + 432 + 8, 0);
          } else {
            A.store.Bool(ptr + 0 + 432 + 14, true);
            A.store.Ref(ptr + 0 + 432 + 0, x["Cellular"]["SIMLockStatus"]["LockType"]);
            A.store.Bool(ptr + 0 + 432 + 12, "LockEnabled" in x["Cellular"]["SIMLockStatus"] ? true : false);
            A.store.Bool(ptr + 0 + 432 + 4, x["Cellular"]["SIMLockStatus"]["LockEnabled"] ? true : false);
            A.store.Bool(ptr + 0 + 432 + 13, "RetriesLeft" in x["Cellular"]["SIMLockStatus"] ? true : false);
            A.store.Int32(
              ptr + 0 + 432 + 8,
              x["Cellular"]["SIMLockStatus"]["RetriesLeft"] === undefined
                ? 0
                : (x["Cellular"]["SIMLockStatus"]["RetriesLeft"] as number)
            );
          }
          A.store.Bool(ptr + 0 + 455, "SIMPresent" in x["Cellular"] ? true : false);
          A.store.Bool(ptr + 0 + 447, x["Cellular"]["SIMPresent"] ? true : false);
          A.store.Bool(ptr + 0 + 456, "SignalStrength" in x["Cellular"] ? true : false);
          A.store.Int32(
            ptr + 0 + 448,
            x["Cellular"]["SignalStrength"] === undefined ? 0 : (x["Cellular"]["SignalStrength"] as number)
          );
          A.store.Bool(ptr + 0 + 457, "SupportNetworkScan" in x["Cellular"] ? true : false);
          A.store.Bool(ptr + 0 + 452, x["Cellular"]["SupportNetworkScan"] ? true : false);
        }
        A.store.Bool(ptr + 6507, "Connectable" in x ? true : false);
        A.store.Bool(ptr + 459, x["Connectable"] ? true : false);
        A.store.Enum(ptr + 460, ["Connected", "Connecting", "NotConnected"].indexOf(x["ConnectionState"] as string));
        A.store.Ref(ptr + 464, x["ErrorState"]);

        if (typeof x["Ethernet"] === "undefined") {
          A.store.Bool(ptr + 468 + 863, false);

          A.store.Bool(ptr + 468 + 0 + 21, false);
          A.store.Bool(ptr + 468 + 0 + 14, false);
          A.store.Bool(ptr + 468 + 0 + 0, false);
          A.store.Ref(ptr + 468 + 0 + 4, undefined);
          A.store.Bool(ptr + 468 + 0 + 15, false);
          A.store.Bool(ptr + 468 + 0 + 8, false);
          A.store.Bool(ptr + 468 + 0 + 16, false);
          A.store.Bool(ptr + 468 + 0 + 9, false);
          A.store.Bool(ptr + 468 + 0 + 17, false);
          A.store.Bool(ptr + 468 + 0 + 10, false);
          A.store.Bool(ptr + 468 + 0 + 18, false);
          A.store.Bool(ptr + 468 + 0 + 11, false);
          A.store.Bool(ptr + 468 + 0 + 19, false);
          A.store.Bool(ptr + 468 + 0 + 12, false);
          A.store.Bool(ptr + 468 + 0 + 20, false);
          A.store.Bool(ptr + 468 + 0 + 13, false);

          A.store.Bool(ptr + 468 + 24 + 28, false);
          A.store.Ref(ptr + 468 + 24 + 0, undefined);
          A.store.Ref(ptr + 468 + 24 + 4, undefined);
          A.store.Ref(ptr + 468 + 24 + 8, undefined);
          A.store.Ref(ptr + 468 + 24 + 12, undefined);
          A.store.Ref(ptr + 468 + 24 + 16, undefined);
          A.store.Ref(ptr + 468 + 24 + 20, undefined);
          A.store.Bool(ptr + 468 + 24 + 26, false);
          A.store.Bool(ptr + 468 + 24 + 24, false);
          A.store.Bool(ptr + 468 + 24 + 27, false);
          A.store.Bool(ptr + 468 + 24 + 25, false);

          A.store.Bool(ptr + 468 + 56 + 806, false);

          A.store.Bool(ptr + 468 + 56 + 0 + 28, false);
          A.store.Ref(ptr + 468 + 56 + 0 + 0, undefined);
          A.store.Ref(ptr + 468 + 56 + 0 + 4, undefined);
          A.store.Ref(ptr + 468 + 56 + 0 + 8, undefined);
          A.store.Ref(ptr + 468 + 56 + 0 + 12, undefined);
          A.store.Ref(ptr + 468 + 56 + 0 + 16, undefined);
          A.store.Ref(ptr + 468 + 56 + 0 + 20, undefined);
          A.store.Bool(ptr + 468 + 56 + 0 + 26, false);
          A.store.Bool(ptr + 468 + 56 + 0 + 24, false);
          A.store.Bool(ptr + 468 + 56 + 0 + 27, false);
          A.store.Bool(ptr + 468 + 56 + 0 + 25, false);

          A.store.Bool(ptr + 468 + 56 + 32 + 318, false);

          A.store.Bool(ptr + 468 + 56 + 32 + 0 + 28, false);
          A.store.Ref(ptr + 468 + 56 + 32 + 0 + 0, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 0 + 4, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 0 + 8, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 0 + 12, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 0 + 16, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 0 + 20, undefined);
          A.store.Bool(ptr + 468 + 56 + 32 + 0 + 26, false);
          A.store.Bool(ptr + 468 + 56 + 32 + 0 + 24, false);
          A.store.Bool(ptr + 468 + 56 + 32 + 0 + 27, false);
          A.store.Bool(ptr + 468 + 56 + 32 + 0 + 25, false);

          A.store.Bool(ptr + 468 + 56 + 32 + 32 + 125, false);

          A.store.Bool(ptr + 468 + 56 + 32 + 32 + 0 + 28, false);
          A.store.Ref(ptr + 468 + 56 + 32 + 32 + 0 + 0, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 32 + 0 + 4, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 32 + 0 + 8, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 32 + 0 + 12, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 32 + 0 + 16, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 32 + 0 + 20, undefined);
          A.store.Bool(ptr + 468 + 56 + 32 + 32 + 0 + 26, false);
          A.store.Bool(ptr + 468 + 56 + 32 + 32 + 0 + 24, false);
          A.store.Bool(ptr + 468 + 56 + 32 + 32 + 0 + 27, false);
          A.store.Bool(ptr + 468 + 56 + 32 + 32 + 0 + 25, false);

          A.store.Bool(ptr + 468 + 56 + 32 + 32 + 32 + 28, false);
          A.store.Ref(ptr + 468 + 56 + 32 + 32 + 32 + 0, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 32 + 32 + 4, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 32 + 32 + 8, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 32 + 32 + 12, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 32 + 32 + 16, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 32 + 32 + 20, undefined);
          A.store.Bool(ptr + 468 + 56 + 32 + 32 + 32 + 26, false);
          A.store.Bool(ptr + 468 + 56 + 32 + 32 + 32 + 24, false);
          A.store.Bool(ptr + 468 + 56 + 32 + 32 + 32 + 27, false);
          A.store.Bool(ptr + 468 + 56 + 32 + 32 + 32 + 25, false);

          A.store.Bool(ptr + 468 + 56 + 32 + 32 + 64 + 28, false);
          A.store.Ref(ptr + 468 + 56 + 32 + 32 + 64 + 0, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 32 + 64 + 4, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 32 + 64 + 8, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 32 + 64 + 12, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 32 + 64 + 16, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 32 + 64 + 20, undefined);
          A.store.Bool(ptr + 468 + 56 + 32 + 32 + 64 + 26, false);
          A.store.Bool(ptr + 468 + 56 + 32 + 32 + 64 + 24, false);
          A.store.Bool(ptr + 468 + 56 + 32 + 32 + 64 + 27, false);
          A.store.Bool(ptr + 468 + 56 + 32 + 32 + 64 + 25, false);

          A.store.Bool(ptr + 468 + 56 + 32 + 32 + 96 + 28, false);
          A.store.Ref(ptr + 468 + 56 + 32 + 32 + 96 + 0, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 32 + 96 + 4, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 32 + 96 + 8, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 32 + 96 + 12, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 32 + 96 + 16, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 32 + 96 + 20, undefined);
          A.store.Bool(ptr + 468 + 56 + 32 + 32 + 96 + 26, false);
          A.store.Bool(ptr + 468 + 56 + 32 + 32 + 96 + 24, false);
          A.store.Bool(ptr + 468 + 56 + 32 + 32 + 96 + 27, false);
          A.store.Bool(ptr + 468 + 56 + 32 + 32 + 96 + 25, false);

          A.store.Bool(ptr + 468 + 56 + 32 + 160 + 28, false);
          A.store.Ref(ptr + 468 + 56 + 32 + 160 + 0, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 160 + 4, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 160 + 8, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 160 + 12, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 160 + 16, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 160 + 20, undefined);
          A.store.Bool(ptr + 468 + 56 + 32 + 160 + 26, false);
          A.store.Bool(ptr + 468 + 56 + 32 + 160 + 24, false);
          A.store.Bool(ptr + 468 + 56 + 32 + 160 + 27, false);
          A.store.Bool(ptr + 468 + 56 + 32 + 160 + 25, false);

          A.store.Bool(ptr + 468 + 56 + 32 + 192 + 125, false);

          A.store.Bool(ptr + 468 + 56 + 32 + 192 + 0 + 28, false);
          A.store.Ref(ptr + 468 + 56 + 32 + 192 + 0 + 0, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 192 + 0 + 4, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 192 + 0 + 8, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 192 + 0 + 12, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 192 + 0 + 16, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 192 + 0 + 20, undefined);
          A.store.Bool(ptr + 468 + 56 + 32 + 192 + 0 + 26, false);
          A.store.Bool(ptr + 468 + 56 + 32 + 192 + 0 + 24, false);
          A.store.Bool(ptr + 468 + 56 + 32 + 192 + 0 + 27, false);
          A.store.Bool(ptr + 468 + 56 + 32 + 192 + 0 + 25, false);

          A.store.Bool(ptr + 468 + 56 + 32 + 192 + 32 + 28, false);
          A.store.Ref(ptr + 468 + 56 + 32 + 192 + 32 + 0, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 192 + 32 + 4, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 192 + 32 + 8, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 192 + 32 + 12, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 192 + 32 + 16, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 192 + 32 + 20, undefined);
          A.store.Bool(ptr + 468 + 56 + 32 + 192 + 32 + 26, false);
          A.store.Bool(ptr + 468 + 56 + 32 + 192 + 32 + 24, false);
          A.store.Bool(ptr + 468 + 56 + 32 + 192 + 32 + 27, false);
          A.store.Bool(ptr + 468 + 56 + 32 + 192 + 32 + 25, false);

          A.store.Bool(ptr + 468 + 56 + 32 + 192 + 64 + 28, false);
          A.store.Ref(ptr + 468 + 56 + 32 + 192 + 64 + 0, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 192 + 64 + 4, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 192 + 64 + 8, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 192 + 64 + 12, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 192 + 64 + 16, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 192 + 64 + 20, undefined);
          A.store.Bool(ptr + 468 + 56 + 32 + 192 + 64 + 26, false);
          A.store.Bool(ptr + 468 + 56 + 32 + 192 + 64 + 24, false);
          A.store.Bool(ptr + 468 + 56 + 32 + 192 + 64 + 27, false);
          A.store.Bool(ptr + 468 + 56 + 32 + 192 + 64 + 25, false);

          A.store.Bool(ptr + 468 + 56 + 32 + 192 + 96 + 28, false);
          A.store.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 0, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 4, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 8, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 12, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 16, undefined);
          A.store.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 20, undefined);
          A.store.Bool(ptr + 468 + 56 + 32 + 192 + 96 + 26, false);
          A.store.Bool(ptr + 468 + 56 + 32 + 192 + 96 + 24, false);
          A.store.Bool(ptr + 468 + 56 + 32 + 192 + 96 + 27, false);
          A.store.Bool(ptr + 468 + 56 + 32 + 192 + 96 + 25, false);

          A.store.Bool(ptr + 468 + 56 + 352 + 28, false);
          A.store.Ref(ptr + 468 + 56 + 352 + 0, undefined);
          A.store.Ref(ptr + 468 + 56 + 352 + 4, undefined);
          A.store.Ref(ptr + 468 + 56 + 352 + 8, undefined);
          A.store.Ref(ptr + 468 + 56 + 352 + 12, undefined);
          A.store.Ref(ptr + 468 + 56 + 352 + 16, undefined);
          A.store.Ref(ptr + 468 + 56 + 352 + 20, undefined);
          A.store.Bool(ptr + 468 + 56 + 352 + 26, false);
          A.store.Bool(ptr + 468 + 56 + 352 + 24, false);
          A.store.Bool(ptr + 468 + 56 + 352 + 27, false);
          A.store.Bool(ptr + 468 + 56 + 352 + 25, false);

          A.store.Bool(ptr + 468 + 56 + 384 + 28, false);
          A.store.Ref(ptr + 468 + 56 + 384 + 0, undefined);
          A.store.Ref(ptr + 468 + 56 + 384 + 4, undefined);
          A.store.Ref(ptr + 468 + 56 + 384 + 8, undefined);
          A.store.Ref(ptr + 468 + 56 + 384 + 12, undefined);
          A.store.Ref(ptr + 468 + 56 + 384 + 16, undefined);
          A.store.Ref(ptr + 468 + 56 + 384 + 20, undefined);
          A.store.Bool(ptr + 468 + 56 + 384 + 26, false);
          A.store.Bool(ptr + 468 + 56 + 384 + 24, false);
          A.store.Bool(ptr + 468 + 56 + 384 + 27, false);
          A.store.Bool(ptr + 468 + 56 + 384 + 25, false);

          A.store.Bool(ptr + 468 + 56 + 416 + 28, false);
          A.store.Ref(ptr + 468 + 56 + 416 + 0, undefined);
          A.store.Ref(ptr + 468 + 56 + 416 + 4, undefined);
          A.store.Ref(ptr + 468 + 56 + 416 + 8, undefined);
          A.store.Ref(ptr + 468 + 56 + 416 + 12, undefined);
          A.store.Ref(ptr + 468 + 56 + 416 + 16, undefined);
          A.store.Ref(ptr + 468 + 56 + 416 + 20, undefined);
          A.store.Bool(ptr + 468 + 56 + 416 + 26, false);
          A.store.Bool(ptr + 468 + 56 + 416 + 24, false);
          A.store.Bool(ptr + 468 + 56 + 416 + 27, false);
          A.store.Bool(ptr + 468 + 56 + 416 + 25, false);

          A.store.Bool(ptr + 468 + 56 + 448 + 28, false);
          A.store.Ref(ptr + 468 + 56 + 448 + 0, undefined);
          A.store.Ref(ptr + 468 + 56 + 448 + 4, undefined);
          A.store.Ref(ptr + 468 + 56 + 448 + 8, undefined);
          A.store.Ref(ptr + 468 + 56 + 448 + 12, undefined);
          A.store.Ref(ptr + 468 + 56 + 448 + 16, undefined);
          A.store.Ref(ptr + 468 + 56 + 448 + 20, undefined);
          A.store.Bool(ptr + 468 + 56 + 448 + 26, false);
          A.store.Bool(ptr + 468 + 56 + 448 + 24, false);
          A.store.Bool(ptr + 468 + 56 + 448 + 27, false);
          A.store.Bool(ptr + 468 + 56 + 448 + 25, false);

          A.store.Bool(ptr + 468 + 56 + 480 + 28, false);
          A.store.Ref(ptr + 468 + 56 + 480 + 0, undefined);
          A.store.Ref(ptr + 468 + 56 + 480 + 4, undefined);
          A.store.Ref(ptr + 468 + 56 + 480 + 8, undefined);
          A.store.Ref(ptr + 468 + 56 + 480 + 12, undefined);
          A.store.Ref(ptr + 468 + 56 + 480 + 16, undefined);
          A.store.Ref(ptr + 468 + 56 + 480 + 20, undefined);
          A.store.Bool(ptr + 468 + 56 + 480 + 26, false);
          A.store.Bool(ptr + 468 + 56 + 480 + 24, false);
          A.store.Bool(ptr + 468 + 56 + 480 + 27, false);
          A.store.Bool(ptr + 468 + 56 + 480 + 25, false);

          A.store.Bool(ptr + 468 + 56 + 512 + 28, false);
          A.store.Ref(ptr + 468 + 56 + 512 + 0, undefined);
          A.store.Ref(ptr + 468 + 56 + 512 + 4, undefined);
          A.store.Ref(ptr + 468 + 56 + 512 + 8, undefined);
          A.store.Ref(ptr + 468 + 56 + 512 + 12, undefined);
          A.store.Ref(ptr + 468 + 56 + 512 + 16, undefined);
          A.store.Ref(ptr + 468 + 56 + 512 + 20, undefined);
          A.store.Bool(ptr + 468 + 56 + 512 + 26, false);
          A.store.Bool(ptr + 468 + 56 + 512 + 24, false);
          A.store.Bool(ptr + 468 + 56 + 512 + 27, false);
          A.store.Bool(ptr + 468 + 56 + 512 + 25, false);

          A.store.Bool(ptr + 468 + 56 + 544 + 28, false);
          A.store.Ref(ptr + 468 + 56 + 544 + 0, undefined);
          A.store.Ref(ptr + 468 + 56 + 544 + 4, undefined);
          A.store.Ref(ptr + 468 + 56 + 544 + 8, undefined);
          A.store.Ref(ptr + 468 + 56 + 544 + 12, undefined);
          A.store.Ref(ptr + 468 + 56 + 544 + 16, undefined);
          A.store.Ref(ptr + 468 + 56 + 544 + 20, undefined);
          A.store.Bool(ptr + 468 + 56 + 544 + 26, false);
          A.store.Bool(ptr + 468 + 56 + 544 + 24, false);
          A.store.Bool(ptr + 468 + 56 + 544 + 27, false);
          A.store.Bool(ptr + 468 + 56 + 544 + 25, false);

          A.store.Bool(ptr + 468 + 56 + 576 + 28, false);
          A.store.Ref(ptr + 468 + 56 + 576 + 0, undefined);
          A.store.Ref(ptr + 468 + 56 + 576 + 4, undefined);
          A.store.Ref(ptr + 468 + 56 + 576 + 8, undefined);
          A.store.Ref(ptr + 468 + 56 + 576 + 12, undefined);
          A.store.Ref(ptr + 468 + 56 + 576 + 16, undefined);
          A.store.Ref(ptr + 468 + 56 + 576 + 20, undefined);
          A.store.Bool(ptr + 468 + 56 + 576 + 26, false);
          A.store.Bool(ptr + 468 + 56 + 576 + 24, false);
          A.store.Bool(ptr + 468 + 56 + 576 + 27, false);
          A.store.Bool(ptr + 468 + 56 + 576 + 25, false);

          A.store.Bool(ptr + 468 + 56 + 608 + 21, false);
          A.store.Bool(ptr + 468 + 56 + 608 + 14, false);
          A.store.Bool(ptr + 468 + 56 + 608 + 0, false);
          A.store.Ref(ptr + 468 + 56 + 608 + 4, undefined);
          A.store.Bool(ptr + 468 + 56 + 608 + 15, false);
          A.store.Bool(ptr + 468 + 56 + 608 + 8, false);
          A.store.Bool(ptr + 468 + 56 + 608 + 16, false);
          A.store.Bool(ptr + 468 + 56 + 608 + 9, false);
          A.store.Bool(ptr + 468 + 56 + 608 + 17, false);
          A.store.Bool(ptr + 468 + 56 + 608 + 10, false);
          A.store.Bool(ptr + 468 + 56 + 608 + 18, false);
          A.store.Bool(ptr + 468 + 56 + 608 + 11, false);
          A.store.Bool(ptr + 468 + 56 + 608 + 19, false);
          A.store.Bool(ptr + 468 + 56 + 608 + 12, false);
          A.store.Bool(ptr + 468 + 56 + 608 + 20, false);
          A.store.Bool(ptr + 468 + 56 + 608 + 13, false);

          A.store.Bool(ptr + 468 + 56 + 632 + 28, false);
          A.store.Ref(ptr + 468 + 56 + 632 + 0, undefined);
          A.store.Ref(ptr + 468 + 56 + 632 + 4, undefined);
          A.store.Ref(ptr + 468 + 56 + 632 + 8, undefined);
          A.store.Ref(ptr + 468 + 56 + 632 + 12, undefined);
          A.store.Ref(ptr + 468 + 56 + 632 + 16, undefined);
          A.store.Ref(ptr + 468 + 56 + 632 + 20, undefined);
          A.store.Bool(ptr + 468 + 56 + 632 + 26, false);
          A.store.Bool(ptr + 468 + 56 + 632 + 24, false);
          A.store.Bool(ptr + 468 + 56 + 632 + 27, false);
          A.store.Bool(ptr + 468 + 56 + 632 + 25, false);

          A.store.Bool(ptr + 468 + 56 + 664 + 28, false);
          A.store.Ref(ptr + 468 + 56 + 664 + 0, undefined);
          A.store.Ref(ptr + 468 + 56 + 664 + 4, undefined);
          A.store.Ref(ptr + 468 + 56 + 664 + 8, undefined);
          A.store.Ref(ptr + 468 + 56 + 664 + 12, undefined);
          A.store.Ref(ptr + 468 + 56 + 664 + 16, undefined);
          A.store.Ref(ptr + 468 + 56 + 664 + 20, undefined);
          A.store.Bool(ptr + 468 + 56 + 664 + 26, false);
          A.store.Bool(ptr + 468 + 56 + 664 + 24, false);
          A.store.Bool(ptr + 468 + 56 + 664 + 27, false);
          A.store.Bool(ptr + 468 + 56 + 664 + 25, false);

          A.store.Bool(ptr + 468 + 56 + 696 + 28, false);
          A.store.Ref(ptr + 468 + 56 + 696 + 0, undefined);
          A.store.Ref(ptr + 468 + 56 + 696 + 4, undefined);
          A.store.Ref(ptr + 468 + 56 + 696 + 8, undefined);
          A.store.Ref(ptr + 468 + 56 + 696 + 12, undefined);
          A.store.Ref(ptr + 468 + 56 + 696 + 16, undefined);
          A.store.Ref(ptr + 468 + 56 + 696 + 20, undefined);
          A.store.Bool(ptr + 468 + 56 + 696 + 26, false);
          A.store.Bool(ptr + 468 + 56 + 696 + 24, false);
          A.store.Bool(ptr + 468 + 56 + 696 + 27, false);
          A.store.Bool(ptr + 468 + 56 + 696 + 25, false);

          A.store.Bool(ptr + 468 + 56 + 728 + 28, false);
          A.store.Ref(ptr + 468 + 56 + 728 + 0, undefined);
          A.store.Ref(ptr + 468 + 56 + 728 + 4, undefined);
          A.store.Ref(ptr + 468 + 56 + 728 + 8, undefined);
          A.store.Ref(ptr + 468 + 56 + 728 + 12, undefined);
          A.store.Ref(ptr + 468 + 56 + 728 + 16, undefined);
          A.store.Ref(ptr + 468 + 56 + 728 + 20, undefined);
          A.store.Bool(ptr + 468 + 56 + 728 + 26, false);
          A.store.Bool(ptr + 468 + 56 + 728 + 24, false);
          A.store.Bool(ptr + 468 + 56 + 728 + 27, false);
          A.store.Bool(ptr + 468 + 56 + 728 + 25, false);

          A.store.Bool(ptr + 468 + 56 + 760 + 21, false);
          A.store.Bool(ptr + 468 + 56 + 760 + 14, false);
          A.store.Bool(ptr + 468 + 56 + 760 + 0, false);
          A.store.Ref(ptr + 468 + 56 + 760 + 4, undefined);
          A.store.Bool(ptr + 468 + 56 + 760 + 15, false);
          A.store.Bool(ptr + 468 + 56 + 760 + 8, false);
          A.store.Bool(ptr + 468 + 56 + 760 + 16, false);
          A.store.Bool(ptr + 468 + 56 + 760 + 9, false);
          A.store.Bool(ptr + 468 + 56 + 760 + 17, false);
          A.store.Bool(ptr + 468 + 56 + 760 + 10, false);
          A.store.Bool(ptr + 468 + 56 + 760 + 18, false);
          A.store.Bool(ptr + 468 + 56 + 760 + 11, false);
          A.store.Bool(ptr + 468 + 56 + 760 + 19, false);
          A.store.Bool(ptr + 468 + 56 + 760 + 12, false);
          A.store.Bool(ptr + 468 + 56 + 760 + 20, false);
          A.store.Bool(ptr + 468 + 56 + 760 + 13, false);

          A.store.Bool(ptr + 468 + 56 + 784 + 21, false);
          A.store.Bool(ptr + 468 + 56 + 784 + 14, false);
          A.store.Bool(ptr + 468 + 56 + 784 + 0, false);
          A.store.Ref(ptr + 468 + 56 + 784 + 4, undefined);
          A.store.Bool(ptr + 468 + 56 + 784 + 15, false);
          A.store.Bool(ptr + 468 + 56 + 784 + 8, false);
          A.store.Bool(ptr + 468 + 56 + 784 + 16, false);
          A.store.Bool(ptr + 468 + 56 + 784 + 9, false);
          A.store.Bool(ptr + 468 + 56 + 784 + 17, false);
          A.store.Bool(ptr + 468 + 56 + 784 + 10, false);
          A.store.Bool(ptr + 468 + 56 + 784 + 18, false);
          A.store.Bool(ptr + 468 + 56 + 784 + 11, false);
          A.store.Bool(ptr + 468 + 56 + 784 + 19, false);
          A.store.Bool(ptr + 468 + 56 + 784 + 12, false);
          A.store.Bool(ptr + 468 + 56 + 784 + 20, false);
          A.store.Bool(ptr + 468 + 56 + 784 + 13, false);
        } else {
          A.store.Bool(ptr + 468 + 863, true);

          if (typeof x["Ethernet"]["AutoConnect"] === "undefined") {
            A.store.Bool(ptr + 468 + 0 + 21, false);
            A.store.Bool(ptr + 468 + 0 + 14, false);
            A.store.Bool(ptr + 468 + 0 + 0, false);
            A.store.Ref(ptr + 468 + 0 + 4, undefined);
            A.store.Bool(ptr + 468 + 0 + 15, false);
            A.store.Bool(ptr + 468 + 0 + 8, false);
            A.store.Bool(ptr + 468 + 0 + 16, false);
            A.store.Bool(ptr + 468 + 0 + 9, false);
            A.store.Bool(ptr + 468 + 0 + 17, false);
            A.store.Bool(ptr + 468 + 0 + 10, false);
            A.store.Bool(ptr + 468 + 0 + 18, false);
            A.store.Bool(ptr + 468 + 0 + 11, false);
            A.store.Bool(ptr + 468 + 0 + 19, false);
            A.store.Bool(ptr + 468 + 0 + 12, false);
            A.store.Bool(ptr + 468 + 0 + 20, false);
            A.store.Bool(ptr + 468 + 0 + 13, false);
          } else {
            A.store.Bool(ptr + 468 + 0 + 21, true);
            A.store.Bool(ptr + 468 + 0 + 14, "Active" in x["Ethernet"]["AutoConnect"] ? true : false);
            A.store.Bool(ptr + 468 + 0 + 0, x["Ethernet"]["AutoConnect"]["Active"] ? true : false);
            A.store.Ref(ptr + 468 + 0 + 4, x["Ethernet"]["AutoConnect"]["Effective"]);
            A.store.Bool(ptr + 468 + 0 + 15, "UserPolicy" in x["Ethernet"]["AutoConnect"] ? true : false);
            A.store.Bool(ptr + 468 + 0 + 8, x["Ethernet"]["AutoConnect"]["UserPolicy"] ? true : false);
            A.store.Bool(ptr + 468 + 0 + 16, "DevicePolicy" in x["Ethernet"]["AutoConnect"] ? true : false);
            A.store.Bool(ptr + 468 + 0 + 9, x["Ethernet"]["AutoConnect"]["DevicePolicy"] ? true : false);
            A.store.Bool(ptr + 468 + 0 + 17, "UserSetting" in x["Ethernet"]["AutoConnect"] ? true : false);
            A.store.Bool(ptr + 468 + 0 + 10, x["Ethernet"]["AutoConnect"]["UserSetting"] ? true : false);
            A.store.Bool(ptr + 468 + 0 + 18, "SharedSetting" in x["Ethernet"]["AutoConnect"] ? true : false);
            A.store.Bool(ptr + 468 + 0 + 11, x["Ethernet"]["AutoConnect"]["SharedSetting"] ? true : false);
            A.store.Bool(ptr + 468 + 0 + 19, "UserEditable" in x["Ethernet"]["AutoConnect"] ? true : false);
            A.store.Bool(ptr + 468 + 0 + 12, x["Ethernet"]["AutoConnect"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 468 + 0 + 20, "DeviceEditable" in x["Ethernet"]["AutoConnect"] ? true : false);
            A.store.Bool(ptr + 468 + 0 + 13, x["Ethernet"]["AutoConnect"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["Ethernet"]["Authentication"] === "undefined") {
            A.store.Bool(ptr + 468 + 24 + 28, false);
            A.store.Ref(ptr + 468 + 24 + 0, undefined);
            A.store.Ref(ptr + 468 + 24 + 4, undefined);
            A.store.Ref(ptr + 468 + 24 + 8, undefined);
            A.store.Ref(ptr + 468 + 24 + 12, undefined);
            A.store.Ref(ptr + 468 + 24 + 16, undefined);
            A.store.Ref(ptr + 468 + 24 + 20, undefined);
            A.store.Bool(ptr + 468 + 24 + 26, false);
            A.store.Bool(ptr + 468 + 24 + 24, false);
            A.store.Bool(ptr + 468 + 24 + 27, false);
            A.store.Bool(ptr + 468 + 24 + 25, false);
          } else {
            A.store.Bool(ptr + 468 + 24 + 28, true);
            A.store.Ref(ptr + 468 + 24 + 0, x["Ethernet"]["Authentication"]["Active"]);
            A.store.Ref(ptr + 468 + 24 + 4, x["Ethernet"]["Authentication"]["Effective"]);
            A.store.Ref(ptr + 468 + 24 + 8, x["Ethernet"]["Authentication"]["UserPolicy"]);
            A.store.Ref(ptr + 468 + 24 + 12, x["Ethernet"]["Authentication"]["DevicePolicy"]);
            A.store.Ref(ptr + 468 + 24 + 16, x["Ethernet"]["Authentication"]["UserSetting"]);
            A.store.Ref(ptr + 468 + 24 + 20, x["Ethernet"]["Authentication"]["SharedSetting"]);
            A.store.Bool(ptr + 468 + 24 + 26, "UserEditable" in x["Ethernet"]["Authentication"] ? true : false);
            A.store.Bool(ptr + 468 + 24 + 24, x["Ethernet"]["Authentication"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 468 + 24 + 27, "DeviceEditable" in x["Ethernet"]["Authentication"] ? true : false);
            A.store.Bool(ptr + 468 + 24 + 25, x["Ethernet"]["Authentication"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["Ethernet"]["EAP"] === "undefined") {
            A.store.Bool(ptr + 468 + 56 + 806, false);

            A.store.Bool(ptr + 468 + 56 + 0 + 28, false);
            A.store.Ref(ptr + 468 + 56 + 0 + 0, undefined);
            A.store.Ref(ptr + 468 + 56 + 0 + 4, undefined);
            A.store.Ref(ptr + 468 + 56 + 0 + 8, undefined);
            A.store.Ref(ptr + 468 + 56 + 0 + 12, undefined);
            A.store.Ref(ptr + 468 + 56 + 0 + 16, undefined);
            A.store.Ref(ptr + 468 + 56 + 0 + 20, undefined);
            A.store.Bool(ptr + 468 + 56 + 0 + 26, false);
            A.store.Bool(ptr + 468 + 56 + 0 + 24, false);
            A.store.Bool(ptr + 468 + 56 + 0 + 27, false);
            A.store.Bool(ptr + 468 + 56 + 0 + 25, false);

            A.store.Bool(ptr + 468 + 56 + 32 + 318, false);

            A.store.Bool(ptr + 468 + 56 + 32 + 0 + 28, false);
            A.store.Ref(ptr + 468 + 56 + 32 + 0 + 0, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 0 + 4, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 0 + 8, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 0 + 12, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 0 + 16, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 0 + 20, undefined);
            A.store.Bool(ptr + 468 + 56 + 32 + 0 + 26, false);
            A.store.Bool(ptr + 468 + 56 + 32 + 0 + 24, false);
            A.store.Bool(ptr + 468 + 56 + 32 + 0 + 27, false);
            A.store.Bool(ptr + 468 + 56 + 32 + 0 + 25, false);

            A.store.Bool(ptr + 468 + 56 + 32 + 32 + 125, false);

            A.store.Bool(ptr + 468 + 56 + 32 + 32 + 0 + 28, false);
            A.store.Ref(ptr + 468 + 56 + 32 + 32 + 0 + 0, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 32 + 0 + 4, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 32 + 0 + 8, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 32 + 0 + 12, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 32 + 0 + 16, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 32 + 0 + 20, undefined);
            A.store.Bool(ptr + 468 + 56 + 32 + 32 + 0 + 26, false);
            A.store.Bool(ptr + 468 + 56 + 32 + 32 + 0 + 24, false);
            A.store.Bool(ptr + 468 + 56 + 32 + 32 + 0 + 27, false);
            A.store.Bool(ptr + 468 + 56 + 32 + 32 + 0 + 25, false);

            A.store.Bool(ptr + 468 + 56 + 32 + 32 + 32 + 28, false);
            A.store.Ref(ptr + 468 + 56 + 32 + 32 + 32 + 0, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 32 + 32 + 4, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 32 + 32 + 8, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 32 + 32 + 12, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 32 + 32 + 16, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 32 + 32 + 20, undefined);
            A.store.Bool(ptr + 468 + 56 + 32 + 32 + 32 + 26, false);
            A.store.Bool(ptr + 468 + 56 + 32 + 32 + 32 + 24, false);
            A.store.Bool(ptr + 468 + 56 + 32 + 32 + 32 + 27, false);
            A.store.Bool(ptr + 468 + 56 + 32 + 32 + 32 + 25, false);

            A.store.Bool(ptr + 468 + 56 + 32 + 32 + 64 + 28, false);
            A.store.Ref(ptr + 468 + 56 + 32 + 32 + 64 + 0, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 32 + 64 + 4, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 32 + 64 + 8, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 32 + 64 + 12, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 32 + 64 + 16, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 32 + 64 + 20, undefined);
            A.store.Bool(ptr + 468 + 56 + 32 + 32 + 64 + 26, false);
            A.store.Bool(ptr + 468 + 56 + 32 + 32 + 64 + 24, false);
            A.store.Bool(ptr + 468 + 56 + 32 + 32 + 64 + 27, false);
            A.store.Bool(ptr + 468 + 56 + 32 + 32 + 64 + 25, false);

            A.store.Bool(ptr + 468 + 56 + 32 + 32 + 96 + 28, false);
            A.store.Ref(ptr + 468 + 56 + 32 + 32 + 96 + 0, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 32 + 96 + 4, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 32 + 96 + 8, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 32 + 96 + 12, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 32 + 96 + 16, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 32 + 96 + 20, undefined);
            A.store.Bool(ptr + 468 + 56 + 32 + 32 + 96 + 26, false);
            A.store.Bool(ptr + 468 + 56 + 32 + 32 + 96 + 24, false);
            A.store.Bool(ptr + 468 + 56 + 32 + 32 + 96 + 27, false);
            A.store.Bool(ptr + 468 + 56 + 32 + 32 + 96 + 25, false);

            A.store.Bool(ptr + 468 + 56 + 32 + 160 + 28, false);
            A.store.Ref(ptr + 468 + 56 + 32 + 160 + 0, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 160 + 4, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 160 + 8, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 160 + 12, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 160 + 16, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 160 + 20, undefined);
            A.store.Bool(ptr + 468 + 56 + 32 + 160 + 26, false);
            A.store.Bool(ptr + 468 + 56 + 32 + 160 + 24, false);
            A.store.Bool(ptr + 468 + 56 + 32 + 160 + 27, false);
            A.store.Bool(ptr + 468 + 56 + 32 + 160 + 25, false);

            A.store.Bool(ptr + 468 + 56 + 32 + 192 + 125, false);

            A.store.Bool(ptr + 468 + 56 + 32 + 192 + 0 + 28, false);
            A.store.Ref(ptr + 468 + 56 + 32 + 192 + 0 + 0, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 192 + 0 + 4, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 192 + 0 + 8, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 192 + 0 + 12, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 192 + 0 + 16, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 192 + 0 + 20, undefined);
            A.store.Bool(ptr + 468 + 56 + 32 + 192 + 0 + 26, false);
            A.store.Bool(ptr + 468 + 56 + 32 + 192 + 0 + 24, false);
            A.store.Bool(ptr + 468 + 56 + 32 + 192 + 0 + 27, false);
            A.store.Bool(ptr + 468 + 56 + 32 + 192 + 0 + 25, false);

            A.store.Bool(ptr + 468 + 56 + 32 + 192 + 32 + 28, false);
            A.store.Ref(ptr + 468 + 56 + 32 + 192 + 32 + 0, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 192 + 32 + 4, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 192 + 32 + 8, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 192 + 32 + 12, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 192 + 32 + 16, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 192 + 32 + 20, undefined);
            A.store.Bool(ptr + 468 + 56 + 32 + 192 + 32 + 26, false);
            A.store.Bool(ptr + 468 + 56 + 32 + 192 + 32 + 24, false);
            A.store.Bool(ptr + 468 + 56 + 32 + 192 + 32 + 27, false);
            A.store.Bool(ptr + 468 + 56 + 32 + 192 + 32 + 25, false);

            A.store.Bool(ptr + 468 + 56 + 32 + 192 + 64 + 28, false);
            A.store.Ref(ptr + 468 + 56 + 32 + 192 + 64 + 0, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 192 + 64 + 4, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 192 + 64 + 8, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 192 + 64 + 12, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 192 + 64 + 16, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 192 + 64 + 20, undefined);
            A.store.Bool(ptr + 468 + 56 + 32 + 192 + 64 + 26, false);
            A.store.Bool(ptr + 468 + 56 + 32 + 192 + 64 + 24, false);
            A.store.Bool(ptr + 468 + 56 + 32 + 192 + 64 + 27, false);
            A.store.Bool(ptr + 468 + 56 + 32 + 192 + 64 + 25, false);

            A.store.Bool(ptr + 468 + 56 + 32 + 192 + 96 + 28, false);
            A.store.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 0, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 4, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 8, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 12, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 16, undefined);
            A.store.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 20, undefined);
            A.store.Bool(ptr + 468 + 56 + 32 + 192 + 96 + 26, false);
            A.store.Bool(ptr + 468 + 56 + 32 + 192 + 96 + 24, false);
            A.store.Bool(ptr + 468 + 56 + 32 + 192 + 96 + 27, false);
            A.store.Bool(ptr + 468 + 56 + 32 + 192 + 96 + 25, false);

            A.store.Bool(ptr + 468 + 56 + 352 + 28, false);
            A.store.Ref(ptr + 468 + 56 + 352 + 0, undefined);
            A.store.Ref(ptr + 468 + 56 + 352 + 4, undefined);
            A.store.Ref(ptr + 468 + 56 + 352 + 8, undefined);
            A.store.Ref(ptr + 468 + 56 + 352 + 12, undefined);
            A.store.Ref(ptr + 468 + 56 + 352 + 16, undefined);
            A.store.Ref(ptr + 468 + 56 + 352 + 20, undefined);
            A.store.Bool(ptr + 468 + 56 + 352 + 26, false);
            A.store.Bool(ptr + 468 + 56 + 352 + 24, false);
            A.store.Bool(ptr + 468 + 56 + 352 + 27, false);
            A.store.Bool(ptr + 468 + 56 + 352 + 25, false);

            A.store.Bool(ptr + 468 + 56 + 384 + 28, false);
            A.store.Ref(ptr + 468 + 56 + 384 + 0, undefined);
            A.store.Ref(ptr + 468 + 56 + 384 + 4, undefined);
            A.store.Ref(ptr + 468 + 56 + 384 + 8, undefined);
            A.store.Ref(ptr + 468 + 56 + 384 + 12, undefined);
            A.store.Ref(ptr + 468 + 56 + 384 + 16, undefined);
            A.store.Ref(ptr + 468 + 56 + 384 + 20, undefined);
            A.store.Bool(ptr + 468 + 56 + 384 + 26, false);
            A.store.Bool(ptr + 468 + 56 + 384 + 24, false);
            A.store.Bool(ptr + 468 + 56 + 384 + 27, false);
            A.store.Bool(ptr + 468 + 56 + 384 + 25, false);

            A.store.Bool(ptr + 468 + 56 + 416 + 28, false);
            A.store.Ref(ptr + 468 + 56 + 416 + 0, undefined);
            A.store.Ref(ptr + 468 + 56 + 416 + 4, undefined);
            A.store.Ref(ptr + 468 + 56 + 416 + 8, undefined);
            A.store.Ref(ptr + 468 + 56 + 416 + 12, undefined);
            A.store.Ref(ptr + 468 + 56 + 416 + 16, undefined);
            A.store.Ref(ptr + 468 + 56 + 416 + 20, undefined);
            A.store.Bool(ptr + 468 + 56 + 416 + 26, false);
            A.store.Bool(ptr + 468 + 56 + 416 + 24, false);
            A.store.Bool(ptr + 468 + 56 + 416 + 27, false);
            A.store.Bool(ptr + 468 + 56 + 416 + 25, false);

            A.store.Bool(ptr + 468 + 56 + 448 + 28, false);
            A.store.Ref(ptr + 468 + 56 + 448 + 0, undefined);
            A.store.Ref(ptr + 468 + 56 + 448 + 4, undefined);
            A.store.Ref(ptr + 468 + 56 + 448 + 8, undefined);
            A.store.Ref(ptr + 468 + 56 + 448 + 12, undefined);
            A.store.Ref(ptr + 468 + 56 + 448 + 16, undefined);
            A.store.Ref(ptr + 468 + 56 + 448 + 20, undefined);
            A.store.Bool(ptr + 468 + 56 + 448 + 26, false);
            A.store.Bool(ptr + 468 + 56 + 448 + 24, false);
            A.store.Bool(ptr + 468 + 56 + 448 + 27, false);
            A.store.Bool(ptr + 468 + 56 + 448 + 25, false);

            A.store.Bool(ptr + 468 + 56 + 480 + 28, false);
            A.store.Ref(ptr + 468 + 56 + 480 + 0, undefined);
            A.store.Ref(ptr + 468 + 56 + 480 + 4, undefined);
            A.store.Ref(ptr + 468 + 56 + 480 + 8, undefined);
            A.store.Ref(ptr + 468 + 56 + 480 + 12, undefined);
            A.store.Ref(ptr + 468 + 56 + 480 + 16, undefined);
            A.store.Ref(ptr + 468 + 56 + 480 + 20, undefined);
            A.store.Bool(ptr + 468 + 56 + 480 + 26, false);
            A.store.Bool(ptr + 468 + 56 + 480 + 24, false);
            A.store.Bool(ptr + 468 + 56 + 480 + 27, false);
            A.store.Bool(ptr + 468 + 56 + 480 + 25, false);

            A.store.Bool(ptr + 468 + 56 + 512 + 28, false);
            A.store.Ref(ptr + 468 + 56 + 512 + 0, undefined);
            A.store.Ref(ptr + 468 + 56 + 512 + 4, undefined);
            A.store.Ref(ptr + 468 + 56 + 512 + 8, undefined);
            A.store.Ref(ptr + 468 + 56 + 512 + 12, undefined);
            A.store.Ref(ptr + 468 + 56 + 512 + 16, undefined);
            A.store.Ref(ptr + 468 + 56 + 512 + 20, undefined);
            A.store.Bool(ptr + 468 + 56 + 512 + 26, false);
            A.store.Bool(ptr + 468 + 56 + 512 + 24, false);
            A.store.Bool(ptr + 468 + 56 + 512 + 27, false);
            A.store.Bool(ptr + 468 + 56 + 512 + 25, false);

            A.store.Bool(ptr + 468 + 56 + 544 + 28, false);
            A.store.Ref(ptr + 468 + 56 + 544 + 0, undefined);
            A.store.Ref(ptr + 468 + 56 + 544 + 4, undefined);
            A.store.Ref(ptr + 468 + 56 + 544 + 8, undefined);
            A.store.Ref(ptr + 468 + 56 + 544 + 12, undefined);
            A.store.Ref(ptr + 468 + 56 + 544 + 16, undefined);
            A.store.Ref(ptr + 468 + 56 + 544 + 20, undefined);
            A.store.Bool(ptr + 468 + 56 + 544 + 26, false);
            A.store.Bool(ptr + 468 + 56 + 544 + 24, false);
            A.store.Bool(ptr + 468 + 56 + 544 + 27, false);
            A.store.Bool(ptr + 468 + 56 + 544 + 25, false);

            A.store.Bool(ptr + 468 + 56 + 576 + 28, false);
            A.store.Ref(ptr + 468 + 56 + 576 + 0, undefined);
            A.store.Ref(ptr + 468 + 56 + 576 + 4, undefined);
            A.store.Ref(ptr + 468 + 56 + 576 + 8, undefined);
            A.store.Ref(ptr + 468 + 56 + 576 + 12, undefined);
            A.store.Ref(ptr + 468 + 56 + 576 + 16, undefined);
            A.store.Ref(ptr + 468 + 56 + 576 + 20, undefined);
            A.store.Bool(ptr + 468 + 56 + 576 + 26, false);
            A.store.Bool(ptr + 468 + 56 + 576 + 24, false);
            A.store.Bool(ptr + 468 + 56 + 576 + 27, false);
            A.store.Bool(ptr + 468 + 56 + 576 + 25, false);

            A.store.Bool(ptr + 468 + 56 + 608 + 21, false);
            A.store.Bool(ptr + 468 + 56 + 608 + 14, false);
            A.store.Bool(ptr + 468 + 56 + 608 + 0, false);
            A.store.Ref(ptr + 468 + 56 + 608 + 4, undefined);
            A.store.Bool(ptr + 468 + 56 + 608 + 15, false);
            A.store.Bool(ptr + 468 + 56 + 608 + 8, false);
            A.store.Bool(ptr + 468 + 56 + 608 + 16, false);
            A.store.Bool(ptr + 468 + 56 + 608 + 9, false);
            A.store.Bool(ptr + 468 + 56 + 608 + 17, false);
            A.store.Bool(ptr + 468 + 56 + 608 + 10, false);
            A.store.Bool(ptr + 468 + 56 + 608 + 18, false);
            A.store.Bool(ptr + 468 + 56 + 608 + 11, false);
            A.store.Bool(ptr + 468 + 56 + 608 + 19, false);
            A.store.Bool(ptr + 468 + 56 + 608 + 12, false);
            A.store.Bool(ptr + 468 + 56 + 608 + 20, false);
            A.store.Bool(ptr + 468 + 56 + 608 + 13, false);

            A.store.Bool(ptr + 468 + 56 + 632 + 28, false);
            A.store.Ref(ptr + 468 + 56 + 632 + 0, undefined);
            A.store.Ref(ptr + 468 + 56 + 632 + 4, undefined);
            A.store.Ref(ptr + 468 + 56 + 632 + 8, undefined);
            A.store.Ref(ptr + 468 + 56 + 632 + 12, undefined);
            A.store.Ref(ptr + 468 + 56 + 632 + 16, undefined);
            A.store.Ref(ptr + 468 + 56 + 632 + 20, undefined);
            A.store.Bool(ptr + 468 + 56 + 632 + 26, false);
            A.store.Bool(ptr + 468 + 56 + 632 + 24, false);
            A.store.Bool(ptr + 468 + 56 + 632 + 27, false);
            A.store.Bool(ptr + 468 + 56 + 632 + 25, false);

            A.store.Bool(ptr + 468 + 56 + 664 + 28, false);
            A.store.Ref(ptr + 468 + 56 + 664 + 0, undefined);
            A.store.Ref(ptr + 468 + 56 + 664 + 4, undefined);
            A.store.Ref(ptr + 468 + 56 + 664 + 8, undefined);
            A.store.Ref(ptr + 468 + 56 + 664 + 12, undefined);
            A.store.Ref(ptr + 468 + 56 + 664 + 16, undefined);
            A.store.Ref(ptr + 468 + 56 + 664 + 20, undefined);
            A.store.Bool(ptr + 468 + 56 + 664 + 26, false);
            A.store.Bool(ptr + 468 + 56 + 664 + 24, false);
            A.store.Bool(ptr + 468 + 56 + 664 + 27, false);
            A.store.Bool(ptr + 468 + 56 + 664 + 25, false);

            A.store.Bool(ptr + 468 + 56 + 696 + 28, false);
            A.store.Ref(ptr + 468 + 56 + 696 + 0, undefined);
            A.store.Ref(ptr + 468 + 56 + 696 + 4, undefined);
            A.store.Ref(ptr + 468 + 56 + 696 + 8, undefined);
            A.store.Ref(ptr + 468 + 56 + 696 + 12, undefined);
            A.store.Ref(ptr + 468 + 56 + 696 + 16, undefined);
            A.store.Ref(ptr + 468 + 56 + 696 + 20, undefined);
            A.store.Bool(ptr + 468 + 56 + 696 + 26, false);
            A.store.Bool(ptr + 468 + 56 + 696 + 24, false);
            A.store.Bool(ptr + 468 + 56 + 696 + 27, false);
            A.store.Bool(ptr + 468 + 56 + 696 + 25, false);

            A.store.Bool(ptr + 468 + 56 + 728 + 28, false);
            A.store.Ref(ptr + 468 + 56 + 728 + 0, undefined);
            A.store.Ref(ptr + 468 + 56 + 728 + 4, undefined);
            A.store.Ref(ptr + 468 + 56 + 728 + 8, undefined);
            A.store.Ref(ptr + 468 + 56 + 728 + 12, undefined);
            A.store.Ref(ptr + 468 + 56 + 728 + 16, undefined);
            A.store.Ref(ptr + 468 + 56 + 728 + 20, undefined);
            A.store.Bool(ptr + 468 + 56 + 728 + 26, false);
            A.store.Bool(ptr + 468 + 56 + 728 + 24, false);
            A.store.Bool(ptr + 468 + 56 + 728 + 27, false);
            A.store.Bool(ptr + 468 + 56 + 728 + 25, false);

            A.store.Bool(ptr + 468 + 56 + 760 + 21, false);
            A.store.Bool(ptr + 468 + 56 + 760 + 14, false);
            A.store.Bool(ptr + 468 + 56 + 760 + 0, false);
            A.store.Ref(ptr + 468 + 56 + 760 + 4, undefined);
            A.store.Bool(ptr + 468 + 56 + 760 + 15, false);
            A.store.Bool(ptr + 468 + 56 + 760 + 8, false);
            A.store.Bool(ptr + 468 + 56 + 760 + 16, false);
            A.store.Bool(ptr + 468 + 56 + 760 + 9, false);
            A.store.Bool(ptr + 468 + 56 + 760 + 17, false);
            A.store.Bool(ptr + 468 + 56 + 760 + 10, false);
            A.store.Bool(ptr + 468 + 56 + 760 + 18, false);
            A.store.Bool(ptr + 468 + 56 + 760 + 11, false);
            A.store.Bool(ptr + 468 + 56 + 760 + 19, false);
            A.store.Bool(ptr + 468 + 56 + 760 + 12, false);
            A.store.Bool(ptr + 468 + 56 + 760 + 20, false);
            A.store.Bool(ptr + 468 + 56 + 760 + 13, false);

            A.store.Bool(ptr + 468 + 56 + 784 + 21, false);
            A.store.Bool(ptr + 468 + 56 + 784 + 14, false);
            A.store.Bool(ptr + 468 + 56 + 784 + 0, false);
            A.store.Ref(ptr + 468 + 56 + 784 + 4, undefined);
            A.store.Bool(ptr + 468 + 56 + 784 + 15, false);
            A.store.Bool(ptr + 468 + 56 + 784 + 8, false);
            A.store.Bool(ptr + 468 + 56 + 784 + 16, false);
            A.store.Bool(ptr + 468 + 56 + 784 + 9, false);
            A.store.Bool(ptr + 468 + 56 + 784 + 17, false);
            A.store.Bool(ptr + 468 + 56 + 784 + 10, false);
            A.store.Bool(ptr + 468 + 56 + 784 + 18, false);
            A.store.Bool(ptr + 468 + 56 + 784 + 11, false);
            A.store.Bool(ptr + 468 + 56 + 784 + 19, false);
            A.store.Bool(ptr + 468 + 56 + 784 + 12, false);
            A.store.Bool(ptr + 468 + 56 + 784 + 20, false);
            A.store.Bool(ptr + 468 + 56 + 784 + 13, false);
          } else {
            A.store.Bool(ptr + 468 + 56 + 806, true);

            if (typeof x["Ethernet"]["EAP"]["AnonymousIdentity"] === "undefined") {
              A.store.Bool(ptr + 468 + 56 + 0 + 28, false);
              A.store.Ref(ptr + 468 + 56 + 0 + 0, undefined);
              A.store.Ref(ptr + 468 + 56 + 0 + 4, undefined);
              A.store.Ref(ptr + 468 + 56 + 0 + 8, undefined);
              A.store.Ref(ptr + 468 + 56 + 0 + 12, undefined);
              A.store.Ref(ptr + 468 + 56 + 0 + 16, undefined);
              A.store.Ref(ptr + 468 + 56 + 0 + 20, undefined);
              A.store.Bool(ptr + 468 + 56 + 0 + 26, false);
              A.store.Bool(ptr + 468 + 56 + 0 + 24, false);
              A.store.Bool(ptr + 468 + 56 + 0 + 27, false);
              A.store.Bool(ptr + 468 + 56 + 0 + 25, false);
            } else {
              A.store.Bool(ptr + 468 + 56 + 0 + 28, true);
              A.store.Ref(ptr + 468 + 56 + 0 + 0, x["Ethernet"]["EAP"]["AnonymousIdentity"]["Active"]);
              A.store.Ref(ptr + 468 + 56 + 0 + 4, x["Ethernet"]["EAP"]["AnonymousIdentity"]["Effective"]);
              A.store.Ref(ptr + 468 + 56 + 0 + 8, x["Ethernet"]["EAP"]["AnonymousIdentity"]["UserPolicy"]);
              A.store.Ref(ptr + 468 + 56 + 0 + 12, x["Ethernet"]["EAP"]["AnonymousIdentity"]["DevicePolicy"]);
              A.store.Ref(ptr + 468 + 56 + 0 + 16, x["Ethernet"]["EAP"]["AnonymousIdentity"]["UserSetting"]);
              A.store.Ref(ptr + 468 + 56 + 0 + 20, x["Ethernet"]["EAP"]["AnonymousIdentity"]["SharedSetting"]);
              A.store.Bool(
                ptr + 468 + 56 + 0 + 26,
                "UserEditable" in x["Ethernet"]["EAP"]["AnonymousIdentity"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 0 + 24,
                x["Ethernet"]["EAP"]["AnonymousIdentity"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 0 + 27,
                "DeviceEditable" in x["Ethernet"]["EAP"]["AnonymousIdentity"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 0 + 25,
                x["Ethernet"]["EAP"]["AnonymousIdentity"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["Ethernet"]["EAP"]["ClientCertPattern"] === "undefined") {
              A.store.Bool(ptr + 468 + 56 + 32 + 318, false);

              A.store.Bool(ptr + 468 + 56 + 32 + 0 + 28, false);
              A.store.Ref(ptr + 468 + 56 + 32 + 0 + 0, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 0 + 4, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 0 + 8, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 0 + 12, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 0 + 16, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 0 + 20, undefined);
              A.store.Bool(ptr + 468 + 56 + 32 + 0 + 26, false);
              A.store.Bool(ptr + 468 + 56 + 32 + 0 + 24, false);
              A.store.Bool(ptr + 468 + 56 + 32 + 0 + 27, false);
              A.store.Bool(ptr + 468 + 56 + 32 + 0 + 25, false);

              A.store.Bool(ptr + 468 + 56 + 32 + 32 + 125, false);

              A.store.Bool(ptr + 468 + 56 + 32 + 32 + 0 + 28, false);
              A.store.Ref(ptr + 468 + 56 + 32 + 32 + 0 + 0, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 32 + 0 + 4, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 32 + 0 + 8, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 32 + 0 + 12, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 32 + 0 + 16, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 32 + 0 + 20, undefined);
              A.store.Bool(ptr + 468 + 56 + 32 + 32 + 0 + 26, false);
              A.store.Bool(ptr + 468 + 56 + 32 + 32 + 0 + 24, false);
              A.store.Bool(ptr + 468 + 56 + 32 + 32 + 0 + 27, false);
              A.store.Bool(ptr + 468 + 56 + 32 + 32 + 0 + 25, false);

              A.store.Bool(ptr + 468 + 56 + 32 + 32 + 32 + 28, false);
              A.store.Ref(ptr + 468 + 56 + 32 + 32 + 32 + 0, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 32 + 32 + 4, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 32 + 32 + 8, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 32 + 32 + 12, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 32 + 32 + 16, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 32 + 32 + 20, undefined);
              A.store.Bool(ptr + 468 + 56 + 32 + 32 + 32 + 26, false);
              A.store.Bool(ptr + 468 + 56 + 32 + 32 + 32 + 24, false);
              A.store.Bool(ptr + 468 + 56 + 32 + 32 + 32 + 27, false);
              A.store.Bool(ptr + 468 + 56 + 32 + 32 + 32 + 25, false);

              A.store.Bool(ptr + 468 + 56 + 32 + 32 + 64 + 28, false);
              A.store.Ref(ptr + 468 + 56 + 32 + 32 + 64 + 0, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 32 + 64 + 4, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 32 + 64 + 8, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 32 + 64 + 12, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 32 + 64 + 16, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 32 + 64 + 20, undefined);
              A.store.Bool(ptr + 468 + 56 + 32 + 32 + 64 + 26, false);
              A.store.Bool(ptr + 468 + 56 + 32 + 32 + 64 + 24, false);
              A.store.Bool(ptr + 468 + 56 + 32 + 32 + 64 + 27, false);
              A.store.Bool(ptr + 468 + 56 + 32 + 32 + 64 + 25, false);

              A.store.Bool(ptr + 468 + 56 + 32 + 32 + 96 + 28, false);
              A.store.Ref(ptr + 468 + 56 + 32 + 32 + 96 + 0, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 32 + 96 + 4, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 32 + 96 + 8, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 32 + 96 + 12, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 32 + 96 + 16, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 32 + 96 + 20, undefined);
              A.store.Bool(ptr + 468 + 56 + 32 + 32 + 96 + 26, false);
              A.store.Bool(ptr + 468 + 56 + 32 + 32 + 96 + 24, false);
              A.store.Bool(ptr + 468 + 56 + 32 + 32 + 96 + 27, false);
              A.store.Bool(ptr + 468 + 56 + 32 + 32 + 96 + 25, false);

              A.store.Bool(ptr + 468 + 56 + 32 + 160 + 28, false);
              A.store.Ref(ptr + 468 + 56 + 32 + 160 + 0, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 160 + 4, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 160 + 8, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 160 + 12, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 160 + 16, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 160 + 20, undefined);
              A.store.Bool(ptr + 468 + 56 + 32 + 160 + 26, false);
              A.store.Bool(ptr + 468 + 56 + 32 + 160 + 24, false);
              A.store.Bool(ptr + 468 + 56 + 32 + 160 + 27, false);
              A.store.Bool(ptr + 468 + 56 + 32 + 160 + 25, false);

              A.store.Bool(ptr + 468 + 56 + 32 + 192 + 125, false);

              A.store.Bool(ptr + 468 + 56 + 32 + 192 + 0 + 28, false);
              A.store.Ref(ptr + 468 + 56 + 32 + 192 + 0 + 0, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 192 + 0 + 4, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 192 + 0 + 8, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 192 + 0 + 12, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 192 + 0 + 16, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 192 + 0 + 20, undefined);
              A.store.Bool(ptr + 468 + 56 + 32 + 192 + 0 + 26, false);
              A.store.Bool(ptr + 468 + 56 + 32 + 192 + 0 + 24, false);
              A.store.Bool(ptr + 468 + 56 + 32 + 192 + 0 + 27, false);
              A.store.Bool(ptr + 468 + 56 + 32 + 192 + 0 + 25, false);

              A.store.Bool(ptr + 468 + 56 + 32 + 192 + 32 + 28, false);
              A.store.Ref(ptr + 468 + 56 + 32 + 192 + 32 + 0, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 192 + 32 + 4, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 192 + 32 + 8, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 192 + 32 + 12, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 192 + 32 + 16, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 192 + 32 + 20, undefined);
              A.store.Bool(ptr + 468 + 56 + 32 + 192 + 32 + 26, false);
              A.store.Bool(ptr + 468 + 56 + 32 + 192 + 32 + 24, false);
              A.store.Bool(ptr + 468 + 56 + 32 + 192 + 32 + 27, false);
              A.store.Bool(ptr + 468 + 56 + 32 + 192 + 32 + 25, false);

              A.store.Bool(ptr + 468 + 56 + 32 + 192 + 64 + 28, false);
              A.store.Ref(ptr + 468 + 56 + 32 + 192 + 64 + 0, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 192 + 64 + 4, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 192 + 64 + 8, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 192 + 64 + 12, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 192 + 64 + 16, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 192 + 64 + 20, undefined);
              A.store.Bool(ptr + 468 + 56 + 32 + 192 + 64 + 26, false);
              A.store.Bool(ptr + 468 + 56 + 32 + 192 + 64 + 24, false);
              A.store.Bool(ptr + 468 + 56 + 32 + 192 + 64 + 27, false);
              A.store.Bool(ptr + 468 + 56 + 32 + 192 + 64 + 25, false);

              A.store.Bool(ptr + 468 + 56 + 32 + 192 + 96 + 28, false);
              A.store.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 0, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 4, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 8, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 12, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 16, undefined);
              A.store.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 20, undefined);
              A.store.Bool(ptr + 468 + 56 + 32 + 192 + 96 + 26, false);
              A.store.Bool(ptr + 468 + 56 + 32 + 192 + 96 + 24, false);
              A.store.Bool(ptr + 468 + 56 + 32 + 192 + 96 + 27, false);
              A.store.Bool(ptr + 468 + 56 + 32 + 192 + 96 + 25, false);
            } else {
              A.store.Bool(ptr + 468 + 56 + 32 + 318, true);

              if (typeof x["Ethernet"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] === "undefined") {
                A.store.Bool(ptr + 468 + 56 + 32 + 0 + 28, false);
                A.store.Ref(ptr + 468 + 56 + 32 + 0 + 0, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 0 + 4, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 0 + 8, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 0 + 12, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 0 + 16, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 0 + 20, undefined);
                A.store.Bool(ptr + 468 + 56 + 32 + 0 + 26, false);
                A.store.Bool(ptr + 468 + 56 + 32 + 0 + 24, false);
                A.store.Bool(ptr + 468 + 56 + 32 + 0 + 27, false);
                A.store.Bool(ptr + 468 + 56 + 32 + 0 + 25, false);
              } else {
                A.store.Bool(ptr + 468 + 56 + 32 + 0 + 28, true);
                A.store.Ref(
                  ptr + 468 + 56 + 32 + 0 + 0,
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["Active"]
                );
                A.store.Ref(
                  ptr + 468 + 56 + 32 + 0 + 4,
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["Effective"]
                );
                A.store.Ref(
                  ptr + 468 + 56 + 32 + 0 + 8,
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 468 + 56 + 32 + 0 + 12,
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 468 + 56 + 32 + 0 + 16,
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 468 + 56 + 32 + 0 + 20,
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 468 + 56 + 32 + 0 + 26,
                  "UserEditable" in x["Ethernet"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] ? true : false
                );
                A.store.Bool(
                  ptr + 468 + 56 + 32 + 0 + 24,
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 468 + 56 + 32 + 0 + 27,
                  "DeviceEditable" in x["Ethernet"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] ? true : false
                );
                A.store.Bool(
                  ptr + 468 + 56 + 32 + 0 + 25,
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"] === "undefined") {
                A.store.Bool(ptr + 468 + 56 + 32 + 32 + 125, false);

                A.store.Bool(ptr + 468 + 56 + 32 + 32 + 0 + 28, false);
                A.store.Ref(ptr + 468 + 56 + 32 + 32 + 0 + 0, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 32 + 0 + 4, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 32 + 0 + 8, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 32 + 0 + 12, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 32 + 0 + 16, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 32 + 0 + 20, undefined);
                A.store.Bool(ptr + 468 + 56 + 32 + 32 + 0 + 26, false);
                A.store.Bool(ptr + 468 + 56 + 32 + 32 + 0 + 24, false);
                A.store.Bool(ptr + 468 + 56 + 32 + 32 + 0 + 27, false);
                A.store.Bool(ptr + 468 + 56 + 32 + 32 + 0 + 25, false);

                A.store.Bool(ptr + 468 + 56 + 32 + 32 + 32 + 28, false);
                A.store.Ref(ptr + 468 + 56 + 32 + 32 + 32 + 0, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 32 + 32 + 4, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 32 + 32 + 8, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 32 + 32 + 12, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 32 + 32 + 16, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 32 + 32 + 20, undefined);
                A.store.Bool(ptr + 468 + 56 + 32 + 32 + 32 + 26, false);
                A.store.Bool(ptr + 468 + 56 + 32 + 32 + 32 + 24, false);
                A.store.Bool(ptr + 468 + 56 + 32 + 32 + 32 + 27, false);
                A.store.Bool(ptr + 468 + 56 + 32 + 32 + 32 + 25, false);

                A.store.Bool(ptr + 468 + 56 + 32 + 32 + 64 + 28, false);
                A.store.Ref(ptr + 468 + 56 + 32 + 32 + 64 + 0, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 32 + 64 + 4, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 32 + 64 + 8, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 32 + 64 + 12, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 32 + 64 + 16, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 32 + 64 + 20, undefined);
                A.store.Bool(ptr + 468 + 56 + 32 + 32 + 64 + 26, false);
                A.store.Bool(ptr + 468 + 56 + 32 + 32 + 64 + 24, false);
                A.store.Bool(ptr + 468 + 56 + 32 + 32 + 64 + 27, false);
                A.store.Bool(ptr + 468 + 56 + 32 + 32 + 64 + 25, false);

                A.store.Bool(ptr + 468 + 56 + 32 + 32 + 96 + 28, false);
                A.store.Ref(ptr + 468 + 56 + 32 + 32 + 96 + 0, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 32 + 96 + 4, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 32 + 96 + 8, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 32 + 96 + 12, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 32 + 96 + 16, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 32 + 96 + 20, undefined);
                A.store.Bool(ptr + 468 + 56 + 32 + 32 + 96 + 26, false);
                A.store.Bool(ptr + 468 + 56 + 32 + 32 + 96 + 24, false);
                A.store.Bool(ptr + 468 + 56 + 32 + 32 + 96 + 27, false);
                A.store.Bool(ptr + 468 + 56 + 32 + 32 + 96 + 25, false);
              } else {
                A.store.Bool(ptr + 468 + 56 + 32 + 32 + 125, true);

                if (typeof x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] === "undefined") {
                  A.store.Bool(ptr + 468 + 56 + 32 + 32 + 0 + 28, false);
                  A.store.Ref(ptr + 468 + 56 + 32 + 32 + 0 + 0, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 32 + 0 + 4, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 32 + 0 + 8, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 32 + 0 + 12, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 32 + 0 + 16, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 32 + 0 + 20, undefined);
                  A.store.Bool(ptr + 468 + 56 + 32 + 32 + 0 + 26, false);
                  A.store.Bool(ptr + 468 + 56 + 32 + 32 + 0 + 24, false);
                  A.store.Bool(ptr + 468 + 56 + 32 + 32 + 0 + 27, false);
                  A.store.Bool(ptr + 468 + 56 + 32 + 32 + 0 + 25, false);
                } else {
                  A.store.Bool(ptr + 468 + 56 + 32 + 32 + 0 + 28, true);
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 32 + 0 + 0,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 32 + 0 + 4,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 32 + 0 + 8,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 32 + 0 + 12,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 32 + 0 + 16,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 32 + 0 + 20,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 468 + 56 + 32 + 32 + 0 + 26,
                    "UserEditable" in x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 468 + 56 + 32 + 32 + 0 + 24,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 468 + 56 + 32 + 32 + 0 + 27,
                    "DeviceEditable" in x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 468 + 56 + 32 + 32 + 0 + 25,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"] ? true : false
                  );
                }

                if (typeof x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] === "undefined") {
                  A.store.Bool(ptr + 468 + 56 + 32 + 32 + 32 + 28, false);
                  A.store.Ref(ptr + 468 + 56 + 32 + 32 + 32 + 0, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 32 + 32 + 4, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 32 + 32 + 8, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 32 + 32 + 12, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 32 + 32 + 16, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 32 + 32 + 20, undefined);
                  A.store.Bool(ptr + 468 + 56 + 32 + 32 + 32 + 26, false);
                  A.store.Bool(ptr + 468 + 56 + 32 + 32 + 32 + 24, false);
                  A.store.Bool(ptr + 468 + 56 + 32 + 32 + 32 + 27, false);
                  A.store.Bool(ptr + 468 + 56 + 32 + 32 + 32 + 25, false);
                } else {
                  A.store.Bool(ptr + 468 + 56 + 32 + 32 + 32 + 28, true);
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 32 + 32 + 0,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 32 + 32 + 4,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 32 + 32 + 8,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 32 + 32 + 12,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 32 + 32 + 16,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 32 + 32 + 20,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 468 + 56 + 32 + 32 + 32 + 26,
                    "UserEditable" in x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 468 + 56 + 32 + 32 + 32 + 24,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 468 + 56 + 32 + 32 + 32 + 27,
                    "DeviceEditable" in x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 468 + 56 + 32 + 32 + 32 + 25,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"] ? true : false
                  );
                }

                if (typeof x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] === "undefined") {
                  A.store.Bool(ptr + 468 + 56 + 32 + 32 + 64 + 28, false);
                  A.store.Ref(ptr + 468 + 56 + 32 + 32 + 64 + 0, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 32 + 64 + 4, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 32 + 64 + 8, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 32 + 64 + 12, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 32 + 64 + 16, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 32 + 64 + 20, undefined);
                  A.store.Bool(ptr + 468 + 56 + 32 + 32 + 64 + 26, false);
                  A.store.Bool(ptr + 468 + 56 + 32 + 32 + 64 + 24, false);
                  A.store.Bool(ptr + 468 + 56 + 32 + 32 + 64 + 27, false);
                  A.store.Bool(ptr + 468 + 56 + 32 + 32 + 64 + 25, false);
                } else {
                  A.store.Bool(ptr + 468 + 56 + 32 + 32 + 64 + 28, true);
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 32 + 64 + 0,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 32 + 64 + 4,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 32 + 64 + 8,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 32 + 64 + 12,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 32 + 64 + 16,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 32 + 64 + 20,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 468 + 56 + 32 + 32 + 64 + 26,
                    "UserEditable" in x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 468 + 56 + 32 + 32 + 64 + 24,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 468 + 56 + 32 + 32 + 64 + 27,
                    "DeviceEditable" in x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]
                      ? true
                      : false
                  );
                  A.store.Bool(
                    ptr + 468 + 56 + 32 + 32 + 64 + 25,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"] ? true : false
                  );
                }

                if (typeof x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] === "undefined") {
                  A.store.Bool(ptr + 468 + 56 + 32 + 32 + 96 + 28, false);
                  A.store.Ref(ptr + 468 + 56 + 32 + 32 + 96 + 0, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 32 + 96 + 4, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 32 + 96 + 8, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 32 + 96 + 12, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 32 + 96 + 16, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 32 + 96 + 20, undefined);
                  A.store.Bool(ptr + 468 + 56 + 32 + 32 + 96 + 26, false);
                  A.store.Bool(ptr + 468 + 56 + 32 + 32 + 96 + 24, false);
                  A.store.Bool(ptr + 468 + 56 + 32 + 32 + 96 + 27, false);
                  A.store.Bool(ptr + 468 + 56 + 32 + 32 + 96 + 25, false);
                } else {
                  A.store.Bool(ptr + 468 + 56 + 32 + 32 + 96 + 28, true);
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 32 + 96 + 0,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 32 + 96 + 4,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 32 + 96 + 8,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 32 + 96 + 12,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 32 + 96 + 16,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 32 + 96 + 20,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 468 + 56 + 32 + 32 + 96 + 26,
                    "UserEditable" in x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]
                      ? true
                      : false
                  );
                  A.store.Bool(
                    ptr + 468 + 56 + 32 + 32 + 96 + 24,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"]
                      ? true
                      : false
                  );
                  A.store.Bool(
                    ptr + 468 + 56 + 32 + 32 + 96 + 27,
                    "DeviceEditable" in x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]
                      ? true
                      : false
                  );
                  A.store.Bool(
                    ptr + 468 + 56 + 32 + 32 + 96 + 25,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"]
                      ? true
                      : false
                  );
                }
              }

              if (typeof x["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCARef"] === "undefined") {
                A.store.Bool(ptr + 468 + 56 + 32 + 160 + 28, false);
                A.store.Ref(ptr + 468 + 56 + 32 + 160 + 0, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 160 + 4, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 160 + 8, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 160 + 12, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 160 + 16, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 160 + 20, undefined);
                A.store.Bool(ptr + 468 + 56 + 32 + 160 + 26, false);
                A.store.Bool(ptr + 468 + 56 + 32 + 160 + 24, false);
                A.store.Bool(ptr + 468 + 56 + 32 + 160 + 27, false);
                A.store.Bool(ptr + 468 + 56 + 32 + 160 + 25, false);
              } else {
                A.store.Bool(ptr + 468 + 56 + 32 + 160 + 28, true);
                A.store.Ref(
                  ptr + 468 + 56 + 32 + 160 + 0,
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["Active"]
                );
                A.store.Ref(
                  ptr + 468 + 56 + 32 + 160 + 4,
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["Effective"]
                );
                A.store.Ref(
                  ptr + 468 + 56 + 32 + 160 + 8,
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 468 + 56 + 32 + 160 + 12,
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 468 + 56 + 32 + 160 + 16,
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 468 + 56 + 32 + 160 + 20,
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 468 + 56 + 32 + 160 + 26,
                  "UserEditable" in x["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCARef"] ? true : false
                );
                A.store.Bool(
                  ptr + 468 + 56 + 32 + 160 + 24,
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 468 + 56 + 32 + 160 + 27,
                  "DeviceEditable" in x["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCARef"] ? true : false
                );
                A.store.Bool(
                  ptr + 468 + 56 + 32 + 160 + 25,
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"] === "undefined") {
                A.store.Bool(ptr + 468 + 56 + 32 + 192 + 125, false);

                A.store.Bool(ptr + 468 + 56 + 32 + 192 + 0 + 28, false);
                A.store.Ref(ptr + 468 + 56 + 32 + 192 + 0 + 0, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 192 + 0 + 4, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 192 + 0 + 8, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 192 + 0 + 12, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 192 + 0 + 16, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 192 + 0 + 20, undefined);
                A.store.Bool(ptr + 468 + 56 + 32 + 192 + 0 + 26, false);
                A.store.Bool(ptr + 468 + 56 + 32 + 192 + 0 + 24, false);
                A.store.Bool(ptr + 468 + 56 + 32 + 192 + 0 + 27, false);
                A.store.Bool(ptr + 468 + 56 + 32 + 192 + 0 + 25, false);

                A.store.Bool(ptr + 468 + 56 + 32 + 192 + 32 + 28, false);
                A.store.Ref(ptr + 468 + 56 + 32 + 192 + 32 + 0, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 192 + 32 + 4, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 192 + 32 + 8, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 192 + 32 + 12, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 192 + 32 + 16, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 192 + 32 + 20, undefined);
                A.store.Bool(ptr + 468 + 56 + 32 + 192 + 32 + 26, false);
                A.store.Bool(ptr + 468 + 56 + 32 + 192 + 32 + 24, false);
                A.store.Bool(ptr + 468 + 56 + 32 + 192 + 32 + 27, false);
                A.store.Bool(ptr + 468 + 56 + 32 + 192 + 32 + 25, false);

                A.store.Bool(ptr + 468 + 56 + 32 + 192 + 64 + 28, false);
                A.store.Ref(ptr + 468 + 56 + 32 + 192 + 64 + 0, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 192 + 64 + 4, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 192 + 64 + 8, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 192 + 64 + 12, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 192 + 64 + 16, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 192 + 64 + 20, undefined);
                A.store.Bool(ptr + 468 + 56 + 32 + 192 + 64 + 26, false);
                A.store.Bool(ptr + 468 + 56 + 32 + 192 + 64 + 24, false);
                A.store.Bool(ptr + 468 + 56 + 32 + 192 + 64 + 27, false);
                A.store.Bool(ptr + 468 + 56 + 32 + 192 + 64 + 25, false);

                A.store.Bool(ptr + 468 + 56 + 32 + 192 + 96 + 28, false);
                A.store.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 0, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 4, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 8, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 12, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 16, undefined);
                A.store.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 20, undefined);
                A.store.Bool(ptr + 468 + 56 + 32 + 192 + 96 + 26, false);
                A.store.Bool(ptr + 468 + 56 + 32 + 192 + 96 + 24, false);
                A.store.Bool(ptr + 468 + 56 + 32 + 192 + 96 + 27, false);
                A.store.Bool(ptr + 468 + 56 + 32 + 192 + 96 + 25, false);
              } else {
                A.store.Bool(ptr + 468 + 56 + 32 + 192 + 125, true);

                if (typeof x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] === "undefined") {
                  A.store.Bool(ptr + 468 + 56 + 32 + 192 + 0 + 28, false);
                  A.store.Ref(ptr + 468 + 56 + 32 + 192 + 0 + 0, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 192 + 0 + 4, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 192 + 0 + 8, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 192 + 0 + 12, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 192 + 0 + 16, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 192 + 0 + 20, undefined);
                  A.store.Bool(ptr + 468 + 56 + 32 + 192 + 0 + 26, false);
                  A.store.Bool(ptr + 468 + 56 + 32 + 192 + 0 + 24, false);
                  A.store.Bool(ptr + 468 + 56 + 32 + 192 + 0 + 27, false);
                  A.store.Bool(ptr + 468 + 56 + 32 + 192 + 0 + 25, false);
                } else {
                  A.store.Bool(ptr + 468 + 56 + 32 + 192 + 0 + 28, true);
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 192 + 0 + 0,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 192 + 0 + 4,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 192 + 0 + 8,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 192 + 0 + 12,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 192 + 0 + 16,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 192 + 0 + 20,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 468 + 56 + 32 + 192 + 0 + 26,
                    "UserEditable" in x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 468 + 56 + 32 + 192 + 0 + 24,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 468 + 56 + 32 + 192 + 0 + 27,
                    "DeviceEditable" in x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]
                      ? true
                      : false
                  );
                  A.store.Bool(
                    ptr + 468 + 56 + 32 + 192 + 0 + 25,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"] ? true : false
                  );
                }

                if (typeof x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"] === "undefined") {
                  A.store.Bool(ptr + 468 + 56 + 32 + 192 + 32 + 28, false);
                  A.store.Ref(ptr + 468 + 56 + 32 + 192 + 32 + 0, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 192 + 32 + 4, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 192 + 32 + 8, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 192 + 32 + 12, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 192 + 32 + 16, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 192 + 32 + 20, undefined);
                  A.store.Bool(ptr + 468 + 56 + 32 + 192 + 32 + 26, false);
                  A.store.Bool(ptr + 468 + 56 + 32 + 192 + 32 + 24, false);
                  A.store.Bool(ptr + 468 + 56 + 32 + 192 + 32 + 27, false);
                  A.store.Bool(ptr + 468 + 56 + 32 + 192 + 32 + 25, false);
                } else {
                  A.store.Bool(ptr + 468 + 56 + 32 + 192 + 32 + 28, true);
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 192 + 32 + 0,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 192 + 32 + 4,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 192 + 32 + 8,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 192 + 32 + 12,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 192 + 32 + 16,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 192 + 32 + 20,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 468 + 56 + 32 + 192 + 32 + 26,
                    "UserEditable" in x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 468 + 56 + 32 + 192 + 32 + 24,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 468 + 56 + 32 + 192 + 32 + 27,
                    "DeviceEditable" in x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 468 + 56 + 32 + 192 + 32 + 25,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"] ? true : false
                  );
                }

                if (typeof x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"] === "undefined") {
                  A.store.Bool(ptr + 468 + 56 + 32 + 192 + 64 + 28, false);
                  A.store.Ref(ptr + 468 + 56 + 32 + 192 + 64 + 0, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 192 + 64 + 4, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 192 + 64 + 8, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 192 + 64 + 12, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 192 + 64 + 16, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 192 + 64 + 20, undefined);
                  A.store.Bool(ptr + 468 + 56 + 32 + 192 + 64 + 26, false);
                  A.store.Bool(ptr + 468 + 56 + 32 + 192 + 64 + 24, false);
                  A.store.Bool(ptr + 468 + 56 + 32 + 192 + 64 + 27, false);
                  A.store.Bool(ptr + 468 + 56 + 32 + 192 + 64 + 25, false);
                } else {
                  A.store.Bool(ptr + 468 + 56 + 32 + 192 + 64 + 28, true);
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 192 + 64 + 0,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 192 + 64 + 4,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 192 + 64 + 8,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 192 + 64 + 12,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 192 + 64 + 16,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 192 + 64 + 20,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 468 + 56 + 32 + 192 + 64 + 26,
                    "UserEditable" in x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]
                      ? true
                      : false
                  );
                  A.store.Bool(
                    ptr + 468 + 56 + 32 + 192 + 64 + 24,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 468 + 56 + 32 + 192 + 64 + 27,
                    "DeviceEditable" in x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]
                      ? true
                      : false
                  );
                  A.store.Bool(
                    ptr + 468 + 56 + 32 + 192 + 64 + 25,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"]
                      ? true
                      : false
                  );
                }

                if (typeof x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] === "undefined") {
                  A.store.Bool(ptr + 468 + 56 + 32 + 192 + 96 + 28, false);
                  A.store.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 0, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 4, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 8, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 12, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 16, undefined);
                  A.store.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 20, undefined);
                  A.store.Bool(ptr + 468 + 56 + 32 + 192 + 96 + 26, false);
                  A.store.Bool(ptr + 468 + 56 + 32 + 192 + 96 + 24, false);
                  A.store.Bool(ptr + 468 + 56 + 32 + 192 + 96 + 27, false);
                  A.store.Bool(ptr + 468 + 56 + 32 + 192 + 96 + 25, false);
                } else {
                  A.store.Bool(ptr + 468 + 56 + 32 + 192 + 96 + 28, true);
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 192 + 96 + 0,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 192 + 96 + 4,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 192 + 96 + 8,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 192 + 96 + 12,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 192 + 96 + 16,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 468 + 56 + 32 + 192 + 96 + 20,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 468 + 56 + 32 + 192 + 96 + 26,
                    "UserEditable" in x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]
                      ? true
                      : false
                  );
                  A.store.Bool(
                    ptr + 468 + 56 + 32 + 192 + 96 + 24,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"]
                      ? true
                      : false
                  );
                  A.store.Bool(
                    ptr + 468 + 56 + 32 + 192 + 96 + 27,
                    "DeviceEditable" in x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]
                      ? true
                      : false
                  );
                  A.store.Bool(
                    ptr + 468 + 56 + 32 + 192 + 96 + 25,
                    x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"]
                      ? true
                      : false
                  );
                }
              }
            }

            if (typeof x["Ethernet"]["EAP"]["ClientCertPKCS11Id"] === "undefined") {
              A.store.Bool(ptr + 468 + 56 + 352 + 28, false);
              A.store.Ref(ptr + 468 + 56 + 352 + 0, undefined);
              A.store.Ref(ptr + 468 + 56 + 352 + 4, undefined);
              A.store.Ref(ptr + 468 + 56 + 352 + 8, undefined);
              A.store.Ref(ptr + 468 + 56 + 352 + 12, undefined);
              A.store.Ref(ptr + 468 + 56 + 352 + 16, undefined);
              A.store.Ref(ptr + 468 + 56 + 352 + 20, undefined);
              A.store.Bool(ptr + 468 + 56 + 352 + 26, false);
              A.store.Bool(ptr + 468 + 56 + 352 + 24, false);
              A.store.Bool(ptr + 468 + 56 + 352 + 27, false);
              A.store.Bool(ptr + 468 + 56 + 352 + 25, false);
            } else {
              A.store.Bool(ptr + 468 + 56 + 352 + 28, true);
              A.store.Ref(ptr + 468 + 56 + 352 + 0, x["Ethernet"]["EAP"]["ClientCertPKCS11Id"]["Active"]);
              A.store.Ref(ptr + 468 + 56 + 352 + 4, x["Ethernet"]["EAP"]["ClientCertPKCS11Id"]["Effective"]);
              A.store.Ref(ptr + 468 + 56 + 352 + 8, x["Ethernet"]["EAP"]["ClientCertPKCS11Id"]["UserPolicy"]);
              A.store.Ref(ptr + 468 + 56 + 352 + 12, x["Ethernet"]["EAP"]["ClientCertPKCS11Id"]["DevicePolicy"]);
              A.store.Ref(ptr + 468 + 56 + 352 + 16, x["Ethernet"]["EAP"]["ClientCertPKCS11Id"]["UserSetting"]);
              A.store.Ref(ptr + 468 + 56 + 352 + 20, x["Ethernet"]["EAP"]["ClientCertPKCS11Id"]["SharedSetting"]);
              A.store.Bool(
                ptr + 468 + 56 + 352 + 26,
                "UserEditable" in x["Ethernet"]["EAP"]["ClientCertPKCS11Id"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 352 + 24,
                x["Ethernet"]["EAP"]["ClientCertPKCS11Id"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 352 + 27,
                "DeviceEditable" in x["Ethernet"]["EAP"]["ClientCertPKCS11Id"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 352 + 25,
                x["Ethernet"]["EAP"]["ClientCertPKCS11Id"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["Ethernet"]["EAP"]["ClientCertProvisioningProfileId"] === "undefined") {
              A.store.Bool(ptr + 468 + 56 + 384 + 28, false);
              A.store.Ref(ptr + 468 + 56 + 384 + 0, undefined);
              A.store.Ref(ptr + 468 + 56 + 384 + 4, undefined);
              A.store.Ref(ptr + 468 + 56 + 384 + 8, undefined);
              A.store.Ref(ptr + 468 + 56 + 384 + 12, undefined);
              A.store.Ref(ptr + 468 + 56 + 384 + 16, undefined);
              A.store.Ref(ptr + 468 + 56 + 384 + 20, undefined);
              A.store.Bool(ptr + 468 + 56 + 384 + 26, false);
              A.store.Bool(ptr + 468 + 56 + 384 + 24, false);
              A.store.Bool(ptr + 468 + 56 + 384 + 27, false);
              A.store.Bool(ptr + 468 + 56 + 384 + 25, false);
            } else {
              A.store.Bool(ptr + 468 + 56 + 384 + 28, true);
              A.store.Ref(ptr + 468 + 56 + 384 + 0, x["Ethernet"]["EAP"]["ClientCertProvisioningProfileId"]["Active"]);
              A.store.Ref(
                ptr + 468 + 56 + 384 + 4,
                x["Ethernet"]["EAP"]["ClientCertProvisioningProfileId"]["Effective"]
              );
              A.store.Ref(
                ptr + 468 + 56 + 384 + 8,
                x["Ethernet"]["EAP"]["ClientCertProvisioningProfileId"]["UserPolicy"]
              );
              A.store.Ref(
                ptr + 468 + 56 + 384 + 12,
                x["Ethernet"]["EAP"]["ClientCertProvisioningProfileId"]["DevicePolicy"]
              );
              A.store.Ref(
                ptr + 468 + 56 + 384 + 16,
                x["Ethernet"]["EAP"]["ClientCertProvisioningProfileId"]["UserSetting"]
              );
              A.store.Ref(
                ptr + 468 + 56 + 384 + 20,
                x["Ethernet"]["EAP"]["ClientCertProvisioningProfileId"]["SharedSetting"]
              );
              A.store.Bool(
                ptr + 468 + 56 + 384 + 26,
                "UserEditable" in x["Ethernet"]["EAP"]["ClientCertProvisioningProfileId"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 384 + 24,
                x["Ethernet"]["EAP"]["ClientCertProvisioningProfileId"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 384 + 27,
                "DeviceEditable" in x["Ethernet"]["EAP"]["ClientCertProvisioningProfileId"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 384 + 25,
                x["Ethernet"]["EAP"]["ClientCertProvisioningProfileId"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["Ethernet"]["EAP"]["ClientCertRef"] === "undefined") {
              A.store.Bool(ptr + 468 + 56 + 416 + 28, false);
              A.store.Ref(ptr + 468 + 56 + 416 + 0, undefined);
              A.store.Ref(ptr + 468 + 56 + 416 + 4, undefined);
              A.store.Ref(ptr + 468 + 56 + 416 + 8, undefined);
              A.store.Ref(ptr + 468 + 56 + 416 + 12, undefined);
              A.store.Ref(ptr + 468 + 56 + 416 + 16, undefined);
              A.store.Ref(ptr + 468 + 56 + 416 + 20, undefined);
              A.store.Bool(ptr + 468 + 56 + 416 + 26, false);
              A.store.Bool(ptr + 468 + 56 + 416 + 24, false);
              A.store.Bool(ptr + 468 + 56 + 416 + 27, false);
              A.store.Bool(ptr + 468 + 56 + 416 + 25, false);
            } else {
              A.store.Bool(ptr + 468 + 56 + 416 + 28, true);
              A.store.Ref(ptr + 468 + 56 + 416 + 0, x["Ethernet"]["EAP"]["ClientCertRef"]["Active"]);
              A.store.Ref(ptr + 468 + 56 + 416 + 4, x["Ethernet"]["EAP"]["ClientCertRef"]["Effective"]);
              A.store.Ref(ptr + 468 + 56 + 416 + 8, x["Ethernet"]["EAP"]["ClientCertRef"]["UserPolicy"]);
              A.store.Ref(ptr + 468 + 56 + 416 + 12, x["Ethernet"]["EAP"]["ClientCertRef"]["DevicePolicy"]);
              A.store.Ref(ptr + 468 + 56 + 416 + 16, x["Ethernet"]["EAP"]["ClientCertRef"]["UserSetting"]);
              A.store.Ref(ptr + 468 + 56 + 416 + 20, x["Ethernet"]["EAP"]["ClientCertRef"]["SharedSetting"]);
              A.store.Bool(
                ptr + 468 + 56 + 416 + 26,
                "UserEditable" in x["Ethernet"]["EAP"]["ClientCertRef"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 416 + 24,
                x["Ethernet"]["EAP"]["ClientCertRef"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 416 + 27,
                "DeviceEditable" in x["Ethernet"]["EAP"]["ClientCertRef"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 416 + 25,
                x["Ethernet"]["EAP"]["ClientCertRef"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["Ethernet"]["EAP"]["ClientCertType"] === "undefined") {
              A.store.Bool(ptr + 468 + 56 + 448 + 28, false);
              A.store.Ref(ptr + 468 + 56 + 448 + 0, undefined);
              A.store.Ref(ptr + 468 + 56 + 448 + 4, undefined);
              A.store.Ref(ptr + 468 + 56 + 448 + 8, undefined);
              A.store.Ref(ptr + 468 + 56 + 448 + 12, undefined);
              A.store.Ref(ptr + 468 + 56 + 448 + 16, undefined);
              A.store.Ref(ptr + 468 + 56 + 448 + 20, undefined);
              A.store.Bool(ptr + 468 + 56 + 448 + 26, false);
              A.store.Bool(ptr + 468 + 56 + 448 + 24, false);
              A.store.Bool(ptr + 468 + 56 + 448 + 27, false);
              A.store.Bool(ptr + 468 + 56 + 448 + 25, false);
            } else {
              A.store.Bool(ptr + 468 + 56 + 448 + 28, true);
              A.store.Ref(ptr + 468 + 56 + 448 + 0, x["Ethernet"]["EAP"]["ClientCertType"]["Active"]);
              A.store.Ref(ptr + 468 + 56 + 448 + 4, x["Ethernet"]["EAP"]["ClientCertType"]["Effective"]);
              A.store.Ref(ptr + 468 + 56 + 448 + 8, x["Ethernet"]["EAP"]["ClientCertType"]["UserPolicy"]);
              A.store.Ref(ptr + 468 + 56 + 448 + 12, x["Ethernet"]["EAP"]["ClientCertType"]["DevicePolicy"]);
              A.store.Ref(ptr + 468 + 56 + 448 + 16, x["Ethernet"]["EAP"]["ClientCertType"]["UserSetting"]);
              A.store.Ref(ptr + 468 + 56 + 448 + 20, x["Ethernet"]["EAP"]["ClientCertType"]["SharedSetting"]);
              A.store.Bool(
                ptr + 468 + 56 + 448 + 26,
                "UserEditable" in x["Ethernet"]["EAP"]["ClientCertType"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 448 + 24,
                x["Ethernet"]["EAP"]["ClientCertType"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 448 + 27,
                "DeviceEditable" in x["Ethernet"]["EAP"]["ClientCertType"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 448 + 25,
                x["Ethernet"]["EAP"]["ClientCertType"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["Ethernet"]["EAP"]["Identity"] === "undefined") {
              A.store.Bool(ptr + 468 + 56 + 480 + 28, false);
              A.store.Ref(ptr + 468 + 56 + 480 + 0, undefined);
              A.store.Ref(ptr + 468 + 56 + 480 + 4, undefined);
              A.store.Ref(ptr + 468 + 56 + 480 + 8, undefined);
              A.store.Ref(ptr + 468 + 56 + 480 + 12, undefined);
              A.store.Ref(ptr + 468 + 56 + 480 + 16, undefined);
              A.store.Ref(ptr + 468 + 56 + 480 + 20, undefined);
              A.store.Bool(ptr + 468 + 56 + 480 + 26, false);
              A.store.Bool(ptr + 468 + 56 + 480 + 24, false);
              A.store.Bool(ptr + 468 + 56 + 480 + 27, false);
              A.store.Bool(ptr + 468 + 56 + 480 + 25, false);
            } else {
              A.store.Bool(ptr + 468 + 56 + 480 + 28, true);
              A.store.Ref(ptr + 468 + 56 + 480 + 0, x["Ethernet"]["EAP"]["Identity"]["Active"]);
              A.store.Ref(ptr + 468 + 56 + 480 + 4, x["Ethernet"]["EAP"]["Identity"]["Effective"]);
              A.store.Ref(ptr + 468 + 56 + 480 + 8, x["Ethernet"]["EAP"]["Identity"]["UserPolicy"]);
              A.store.Ref(ptr + 468 + 56 + 480 + 12, x["Ethernet"]["EAP"]["Identity"]["DevicePolicy"]);
              A.store.Ref(ptr + 468 + 56 + 480 + 16, x["Ethernet"]["EAP"]["Identity"]["UserSetting"]);
              A.store.Ref(ptr + 468 + 56 + 480 + 20, x["Ethernet"]["EAP"]["Identity"]["SharedSetting"]);
              A.store.Bool(
                ptr + 468 + 56 + 480 + 26,
                "UserEditable" in x["Ethernet"]["EAP"]["Identity"] ? true : false
              );
              A.store.Bool(ptr + 468 + 56 + 480 + 24, x["Ethernet"]["EAP"]["Identity"]["UserEditable"] ? true : false);
              A.store.Bool(
                ptr + 468 + 56 + 480 + 27,
                "DeviceEditable" in x["Ethernet"]["EAP"]["Identity"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 480 + 25,
                x["Ethernet"]["EAP"]["Identity"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["Ethernet"]["EAP"]["Inner"] === "undefined") {
              A.store.Bool(ptr + 468 + 56 + 512 + 28, false);
              A.store.Ref(ptr + 468 + 56 + 512 + 0, undefined);
              A.store.Ref(ptr + 468 + 56 + 512 + 4, undefined);
              A.store.Ref(ptr + 468 + 56 + 512 + 8, undefined);
              A.store.Ref(ptr + 468 + 56 + 512 + 12, undefined);
              A.store.Ref(ptr + 468 + 56 + 512 + 16, undefined);
              A.store.Ref(ptr + 468 + 56 + 512 + 20, undefined);
              A.store.Bool(ptr + 468 + 56 + 512 + 26, false);
              A.store.Bool(ptr + 468 + 56 + 512 + 24, false);
              A.store.Bool(ptr + 468 + 56 + 512 + 27, false);
              A.store.Bool(ptr + 468 + 56 + 512 + 25, false);
            } else {
              A.store.Bool(ptr + 468 + 56 + 512 + 28, true);
              A.store.Ref(ptr + 468 + 56 + 512 + 0, x["Ethernet"]["EAP"]["Inner"]["Active"]);
              A.store.Ref(ptr + 468 + 56 + 512 + 4, x["Ethernet"]["EAP"]["Inner"]["Effective"]);
              A.store.Ref(ptr + 468 + 56 + 512 + 8, x["Ethernet"]["EAP"]["Inner"]["UserPolicy"]);
              A.store.Ref(ptr + 468 + 56 + 512 + 12, x["Ethernet"]["EAP"]["Inner"]["DevicePolicy"]);
              A.store.Ref(ptr + 468 + 56 + 512 + 16, x["Ethernet"]["EAP"]["Inner"]["UserSetting"]);
              A.store.Ref(ptr + 468 + 56 + 512 + 20, x["Ethernet"]["EAP"]["Inner"]["SharedSetting"]);
              A.store.Bool(ptr + 468 + 56 + 512 + 26, "UserEditable" in x["Ethernet"]["EAP"]["Inner"] ? true : false);
              A.store.Bool(ptr + 468 + 56 + 512 + 24, x["Ethernet"]["EAP"]["Inner"]["UserEditable"] ? true : false);
              A.store.Bool(ptr + 468 + 56 + 512 + 27, "DeviceEditable" in x["Ethernet"]["EAP"]["Inner"] ? true : false);
              A.store.Bool(ptr + 468 + 56 + 512 + 25, x["Ethernet"]["EAP"]["Inner"]["DeviceEditable"] ? true : false);
            }

            if (typeof x["Ethernet"]["EAP"]["Outer"] === "undefined") {
              A.store.Bool(ptr + 468 + 56 + 544 + 28, false);
              A.store.Ref(ptr + 468 + 56 + 544 + 0, undefined);
              A.store.Ref(ptr + 468 + 56 + 544 + 4, undefined);
              A.store.Ref(ptr + 468 + 56 + 544 + 8, undefined);
              A.store.Ref(ptr + 468 + 56 + 544 + 12, undefined);
              A.store.Ref(ptr + 468 + 56 + 544 + 16, undefined);
              A.store.Ref(ptr + 468 + 56 + 544 + 20, undefined);
              A.store.Bool(ptr + 468 + 56 + 544 + 26, false);
              A.store.Bool(ptr + 468 + 56 + 544 + 24, false);
              A.store.Bool(ptr + 468 + 56 + 544 + 27, false);
              A.store.Bool(ptr + 468 + 56 + 544 + 25, false);
            } else {
              A.store.Bool(ptr + 468 + 56 + 544 + 28, true);
              A.store.Ref(ptr + 468 + 56 + 544 + 0, x["Ethernet"]["EAP"]["Outer"]["Active"]);
              A.store.Ref(ptr + 468 + 56 + 544 + 4, x["Ethernet"]["EAP"]["Outer"]["Effective"]);
              A.store.Ref(ptr + 468 + 56 + 544 + 8, x["Ethernet"]["EAP"]["Outer"]["UserPolicy"]);
              A.store.Ref(ptr + 468 + 56 + 544 + 12, x["Ethernet"]["EAP"]["Outer"]["DevicePolicy"]);
              A.store.Ref(ptr + 468 + 56 + 544 + 16, x["Ethernet"]["EAP"]["Outer"]["UserSetting"]);
              A.store.Ref(ptr + 468 + 56 + 544 + 20, x["Ethernet"]["EAP"]["Outer"]["SharedSetting"]);
              A.store.Bool(ptr + 468 + 56 + 544 + 26, "UserEditable" in x["Ethernet"]["EAP"]["Outer"] ? true : false);
              A.store.Bool(ptr + 468 + 56 + 544 + 24, x["Ethernet"]["EAP"]["Outer"]["UserEditable"] ? true : false);
              A.store.Bool(ptr + 468 + 56 + 544 + 27, "DeviceEditable" in x["Ethernet"]["EAP"]["Outer"] ? true : false);
              A.store.Bool(ptr + 468 + 56 + 544 + 25, x["Ethernet"]["EAP"]["Outer"]["DeviceEditable"] ? true : false);
            }

            if (typeof x["Ethernet"]["EAP"]["Password"] === "undefined") {
              A.store.Bool(ptr + 468 + 56 + 576 + 28, false);
              A.store.Ref(ptr + 468 + 56 + 576 + 0, undefined);
              A.store.Ref(ptr + 468 + 56 + 576 + 4, undefined);
              A.store.Ref(ptr + 468 + 56 + 576 + 8, undefined);
              A.store.Ref(ptr + 468 + 56 + 576 + 12, undefined);
              A.store.Ref(ptr + 468 + 56 + 576 + 16, undefined);
              A.store.Ref(ptr + 468 + 56 + 576 + 20, undefined);
              A.store.Bool(ptr + 468 + 56 + 576 + 26, false);
              A.store.Bool(ptr + 468 + 56 + 576 + 24, false);
              A.store.Bool(ptr + 468 + 56 + 576 + 27, false);
              A.store.Bool(ptr + 468 + 56 + 576 + 25, false);
            } else {
              A.store.Bool(ptr + 468 + 56 + 576 + 28, true);
              A.store.Ref(ptr + 468 + 56 + 576 + 0, x["Ethernet"]["EAP"]["Password"]["Active"]);
              A.store.Ref(ptr + 468 + 56 + 576 + 4, x["Ethernet"]["EAP"]["Password"]["Effective"]);
              A.store.Ref(ptr + 468 + 56 + 576 + 8, x["Ethernet"]["EAP"]["Password"]["UserPolicy"]);
              A.store.Ref(ptr + 468 + 56 + 576 + 12, x["Ethernet"]["EAP"]["Password"]["DevicePolicy"]);
              A.store.Ref(ptr + 468 + 56 + 576 + 16, x["Ethernet"]["EAP"]["Password"]["UserSetting"]);
              A.store.Ref(ptr + 468 + 56 + 576 + 20, x["Ethernet"]["EAP"]["Password"]["SharedSetting"]);
              A.store.Bool(
                ptr + 468 + 56 + 576 + 26,
                "UserEditable" in x["Ethernet"]["EAP"]["Password"] ? true : false
              );
              A.store.Bool(ptr + 468 + 56 + 576 + 24, x["Ethernet"]["EAP"]["Password"]["UserEditable"] ? true : false);
              A.store.Bool(
                ptr + 468 + 56 + 576 + 27,
                "DeviceEditable" in x["Ethernet"]["EAP"]["Password"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 576 + 25,
                x["Ethernet"]["EAP"]["Password"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["Ethernet"]["EAP"]["SaveCredentials"] === "undefined") {
              A.store.Bool(ptr + 468 + 56 + 608 + 21, false);
              A.store.Bool(ptr + 468 + 56 + 608 + 14, false);
              A.store.Bool(ptr + 468 + 56 + 608 + 0, false);
              A.store.Ref(ptr + 468 + 56 + 608 + 4, undefined);
              A.store.Bool(ptr + 468 + 56 + 608 + 15, false);
              A.store.Bool(ptr + 468 + 56 + 608 + 8, false);
              A.store.Bool(ptr + 468 + 56 + 608 + 16, false);
              A.store.Bool(ptr + 468 + 56 + 608 + 9, false);
              A.store.Bool(ptr + 468 + 56 + 608 + 17, false);
              A.store.Bool(ptr + 468 + 56 + 608 + 10, false);
              A.store.Bool(ptr + 468 + 56 + 608 + 18, false);
              A.store.Bool(ptr + 468 + 56 + 608 + 11, false);
              A.store.Bool(ptr + 468 + 56 + 608 + 19, false);
              A.store.Bool(ptr + 468 + 56 + 608 + 12, false);
              A.store.Bool(ptr + 468 + 56 + 608 + 20, false);
              A.store.Bool(ptr + 468 + 56 + 608 + 13, false);
            } else {
              A.store.Bool(ptr + 468 + 56 + 608 + 21, true);
              A.store.Bool(
                ptr + 468 + 56 + 608 + 14,
                "Active" in x["Ethernet"]["EAP"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(ptr + 468 + 56 + 608 + 0, x["Ethernet"]["EAP"]["SaveCredentials"]["Active"] ? true : false);
              A.store.Ref(ptr + 468 + 56 + 608 + 4, x["Ethernet"]["EAP"]["SaveCredentials"]["Effective"]);
              A.store.Bool(
                ptr + 468 + 56 + 608 + 15,
                "UserPolicy" in x["Ethernet"]["EAP"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 608 + 8,
                x["Ethernet"]["EAP"]["SaveCredentials"]["UserPolicy"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 608 + 16,
                "DevicePolicy" in x["Ethernet"]["EAP"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 608 + 9,
                x["Ethernet"]["EAP"]["SaveCredentials"]["DevicePolicy"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 608 + 17,
                "UserSetting" in x["Ethernet"]["EAP"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 608 + 10,
                x["Ethernet"]["EAP"]["SaveCredentials"]["UserSetting"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 608 + 18,
                "SharedSetting" in x["Ethernet"]["EAP"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 608 + 11,
                x["Ethernet"]["EAP"]["SaveCredentials"]["SharedSetting"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 608 + 19,
                "UserEditable" in x["Ethernet"]["EAP"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 608 + 12,
                x["Ethernet"]["EAP"]["SaveCredentials"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 608 + 20,
                "DeviceEditable" in x["Ethernet"]["EAP"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 608 + 13,
                x["Ethernet"]["EAP"]["SaveCredentials"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["Ethernet"]["EAP"]["ServerCAPEMs"] === "undefined") {
              A.store.Bool(ptr + 468 + 56 + 632 + 28, false);
              A.store.Ref(ptr + 468 + 56 + 632 + 0, undefined);
              A.store.Ref(ptr + 468 + 56 + 632 + 4, undefined);
              A.store.Ref(ptr + 468 + 56 + 632 + 8, undefined);
              A.store.Ref(ptr + 468 + 56 + 632 + 12, undefined);
              A.store.Ref(ptr + 468 + 56 + 632 + 16, undefined);
              A.store.Ref(ptr + 468 + 56 + 632 + 20, undefined);
              A.store.Bool(ptr + 468 + 56 + 632 + 26, false);
              A.store.Bool(ptr + 468 + 56 + 632 + 24, false);
              A.store.Bool(ptr + 468 + 56 + 632 + 27, false);
              A.store.Bool(ptr + 468 + 56 + 632 + 25, false);
            } else {
              A.store.Bool(ptr + 468 + 56 + 632 + 28, true);
              A.store.Ref(ptr + 468 + 56 + 632 + 0, x["Ethernet"]["EAP"]["ServerCAPEMs"]["Active"]);
              A.store.Ref(ptr + 468 + 56 + 632 + 4, x["Ethernet"]["EAP"]["ServerCAPEMs"]["Effective"]);
              A.store.Ref(ptr + 468 + 56 + 632 + 8, x["Ethernet"]["EAP"]["ServerCAPEMs"]["UserPolicy"]);
              A.store.Ref(ptr + 468 + 56 + 632 + 12, x["Ethernet"]["EAP"]["ServerCAPEMs"]["DevicePolicy"]);
              A.store.Ref(ptr + 468 + 56 + 632 + 16, x["Ethernet"]["EAP"]["ServerCAPEMs"]["UserSetting"]);
              A.store.Ref(ptr + 468 + 56 + 632 + 20, x["Ethernet"]["EAP"]["ServerCAPEMs"]["SharedSetting"]);
              A.store.Bool(
                ptr + 468 + 56 + 632 + 26,
                "UserEditable" in x["Ethernet"]["EAP"]["ServerCAPEMs"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 632 + 24,
                x["Ethernet"]["EAP"]["ServerCAPEMs"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 632 + 27,
                "DeviceEditable" in x["Ethernet"]["EAP"]["ServerCAPEMs"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 632 + 25,
                x["Ethernet"]["EAP"]["ServerCAPEMs"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["Ethernet"]["EAP"]["ServerCARefs"] === "undefined") {
              A.store.Bool(ptr + 468 + 56 + 664 + 28, false);
              A.store.Ref(ptr + 468 + 56 + 664 + 0, undefined);
              A.store.Ref(ptr + 468 + 56 + 664 + 4, undefined);
              A.store.Ref(ptr + 468 + 56 + 664 + 8, undefined);
              A.store.Ref(ptr + 468 + 56 + 664 + 12, undefined);
              A.store.Ref(ptr + 468 + 56 + 664 + 16, undefined);
              A.store.Ref(ptr + 468 + 56 + 664 + 20, undefined);
              A.store.Bool(ptr + 468 + 56 + 664 + 26, false);
              A.store.Bool(ptr + 468 + 56 + 664 + 24, false);
              A.store.Bool(ptr + 468 + 56 + 664 + 27, false);
              A.store.Bool(ptr + 468 + 56 + 664 + 25, false);
            } else {
              A.store.Bool(ptr + 468 + 56 + 664 + 28, true);
              A.store.Ref(ptr + 468 + 56 + 664 + 0, x["Ethernet"]["EAP"]["ServerCARefs"]["Active"]);
              A.store.Ref(ptr + 468 + 56 + 664 + 4, x["Ethernet"]["EAP"]["ServerCARefs"]["Effective"]);
              A.store.Ref(ptr + 468 + 56 + 664 + 8, x["Ethernet"]["EAP"]["ServerCARefs"]["UserPolicy"]);
              A.store.Ref(ptr + 468 + 56 + 664 + 12, x["Ethernet"]["EAP"]["ServerCARefs"]["DevicePolicy"]);
              A.store.Ref(ptr + 468 + 56 + 664 + 16, x["Ethernet"]["EAP"]["ServerCARefs"]["UserSetting"]);
              A.store.Ref(ptr + 468 + 56 + 664 + 20, x["Ethernet"]["EAP"]["ServerCARefs"]["SharedSetting"]);
              A.store.Bool(
                ptr + 468 + 56 + 664 + 26,
                "UserEditable" in x["Ethernet"]["EAP"]["ServerCARefs"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 664 + 24,
                x["Ethernet"]["EAP"]["ServerCARefs"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 664 + 27,
                "DeviceEditable" in x["Ethernet"]["EAP"]["ServerCARefs"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 664 + 25,
                x["Ethernet"]["EAP"]["ServerCARefs"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["Ethernet"]["EAP"]["SubjectMatch"] === "undefined") {
              A.store.Bool(ptr + 468 + 56 + 696 + 28, false);
              A.store.Ref(ptr + 468 + 56 + 696 + 0, undefined);
              A.store.Ref(ptr + 468 + 56 + 696 + 4, undefined);
              A.store.Ref(ptr + 468 + 56 + 696 + 8, undefined);
              A.store.Ref(ptr + 468 + 56 + 696 + 12, undefined);
              A.store.Ref(ptr + 468 + 56 + 696 + 16, undefined);
              A.store.Ref(ptr + 468 + 56 + 696 + 20, undefined);
              A.store.Bool(ptr + 468 + 56 + 696 + 26, false);
              A.store.Bool(ptr + 468 + 56 + 696 + 24, false);
              A.store.Bool(ptr + 468 + 56 + 696 + 27, false);
              A.store.Bool(ptr + 468 + 56 + 696 + 25, false);
            } else {
              A.store.Bool(ptr + 468 + 56 + 696 + 28, true);
              A.store.Ref(ptr + 468 + 56 + 696 + 0, x["Ethernet"]["EAP"]["SubjectMatch"]["Active"]);
              A.store.Ref(ptr + 468 + 56 + 696 + 4, x["Ethernet"]["EAP"]["SubjectMatch"]["Effective"]);
              A.store.Ref(ptr + 468 + 56 + 696 + 8, x["Ethernet"]["EAP"]["SubjectMatch"]["UserPolicy"]);
              A.store.Ref(ptr + 468 + 56 + 696 + 12, x["Ethernet"]["EAP"]["SubjectMatch"]["DevicePolicy"]);
              A.store.Ref(ptr + 468 + 56 + 696 + 16, x["Ethernet"]["EAP"]["SubjectMatch"]["UserSetting"]);
              A.store.Ref(ptr + 468 + 56 + 696 + 20, x["Ethernet"]["EAP"]["SubjectMatch"]["SharedSetting"]);
              A.store.Bool(
                ptr + 468 + 56 + 696 + 26,
                "UserEditable" in x["Ethernet"]["EAP"]["SubjectMatch"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 696 + 24,
                x["Ethernet"]["EAP"]["SubjectMatch"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 696 + 27,
                "DeviceEditable" in x["Ethernet"]["EAP"]["SubjectMatch"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 696 + 25,
                x["Ethernet"]["EAP"]["SubjectMatch"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["Ethernet"]["EAP"]["TLSVersionMax"] === "undefined") {
              A.store.Bool(ptr + 468 + 56 + 728 + 28, false);
              A.store.Ref(ptr + 468 + 56 + 728 + 0, undefined);
              A.store.Ref(ptr + 468 + 56 + 728 + 4, undefined);
              A.store.Ref(ptr + 468 + 56 + 728 + 8, undefined);
              A.store.Ref(ptr + 468 + 56 + 728 + 12, undefined);
              A.store.Ref(ptr + 468 + 56 + 728 + 16, undefined);
              A.store.Ref(ptr + 468 + 56 + 728 + 20, undefined);
              A.store.Bool(ptr + 468 + 56 + 728 + 26, false);
              A.store.Bool(ptr + 468 + 56 + 728 + 24, false);
              A.store.Bool(ptr + 468 + 56 + 728 + 27, false);
              A.store.Bool(ptr + 468 + 56 + 728 + 25, false);
            } else {
              A.store.Bool(ptr + 468 + 56 + 728 + 28, true);
              A.store.Ref(ptr + 468 + 56 + 728 + 0, x["Ethernet"]["EAP"]["TLSVersionMax"]["Active"]);
              A.store.Ref(ptr + 468 + 56 + 728 + 4, x["Ethernet"]["EAP"]["TLSVersionMax"]["Effective"]);
              A.store.Ref(ptr + 468 + 56 + 728 + 8, x["Ethernet"]["EAP"]["TLSVersionMax"]["UserPolicy"]);
              A.store.Ref(ptr + 468 + 56 + 728 + 12, x["Ethernet"]["EAP"]["TLSVersionMax"]["DevicePolicy"]);
              A.store.Ref(ptr + 468 + 56 + 728 + 16, x["Ethernet"]["EAP"]["TLSVersionMax"]["UserSetting"]);
              A.store.Ref(ptr + 468 + 56 + 728 + 20, x["Ethernet"]["EAP"]["TLSVersionMax"]["SharedSetting"]);
              A.store.Bool(
                ptr + 468 + 56 + 728 + 26,
                "UserEditable" in x["Ethernet"]["EAP"]["TLSVersionMax"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 728 + 24,
                x["Ethernet"]["EAP"]["TLSVersionMax"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 728 + 27,
                "DeviceEditable" in x["Ethernet"]["EAP"]["TLSVersionMax"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 728 + 25,
                x["Ethernet"]["EAP"]["TLSVersionMax"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["Ethernet"]["EAP"]["UseProactiveKeyCaching"] === "undefined") {
              A.store.Bool(ptr + 468 + 56 + 760 + 21, false);
              A.store.Bool(ptr + 468 + 56 + 760 + 14, false);
              A.store.Bool(ptr + 468 + 56 + 760 + 0, false);
              A.store.Ref(ptr + 468 + 56 + 760 + 4, undefined);
              A.store.Bool(ptr + 468 + 56 + 760 + 15, false);
              A.store.Bool(ptr + 468 + 56 + 760 + 8, false);
              A.store.Bool(ptr + 468 + 56 + 760 + 16, false);
              A.store.Bool(ptr + 468 + 56 + 760 + 9, false);
              A.store.Bool(ptr + 468 + 56 + 760 + 17, false);
              A.store.Bool(ptr + 468 + 56 + 760 + 10, false);
              A.store.Bool(ptr + 468 + 56 + 760 + 18, false);
              A.store.Bool(ptr + 468 + 56 + 760 + 11, false);
              A.store.Bool(ptr + 468 + 56 + 760 + 19, false);
              A.store.Bool(ptr + 468 + 56 + 760 + 12, false);
              A.store.Bool(ptr + 468 + 56 + 760 + 20, false);
              A.store.Bool(ptr + 468 + 56 + 760 + 13, false);
            } else {
              A.store.Bool(ptr + 468 + 56 + 760 + 21, true);
              A.store.Bool(
                ptr + 468 + 56 + 760 + 14,
                "Active" in x["Ethernet"]["EAP"]["UseProactiveKeyCaching"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 760 + 0,
                x["Ethernet"]["EAP"]["UseProactiveKeyCaching"]["Active"] ? true : false
              );
              A.store.Ref(ptr + 468 + 56 + 760 + 4, x["Ethernet"]["EAP"]["UseProactiveKeyCaching"]["Effective"]);
              A.store.Bool(
                ptr + 468 + 56 + 760 + 15,
                "UserPolicy" in x["Ethernet"]["EAP"]["UseProactiveKeyCaching"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 760 + 8,
                x["Ethernet"]["EAP"]["UseProactiveKeyCaching"]["UserPolicy"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 760 + 16,
                "DevicePolicy" in x["Ethernet"]["EAP"]["UseProactiveKeyCaching"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 760 + 9,
                x["Ethernet"]["EAP"]["UseProactiveKeyCaching"]["DevicePolicy"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 760 + 17,
                "UserSetting" in x["Ethernet"]["EAP"]["UseProactiveKeyCaching"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 760 + 10,
                x["Ethernet"]["EAP"]["UseProactiveKeyCaching"]["UserSetting"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 760 + 18,
                "SharedSetting" in x["Ethernet"]["EAP"]["UseProactiveKeyCaching"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 760 + 11,
                x["Ethernet"]["EAP"]["UseProactiveKeyCaching"]["SharedSetting"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 760 + 19,
                "UserEditable" in x["Ethernet"]["EAP"]["UseProactiveKeyCaching"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 760 + 12,
                x["Ethernet"]["EAP"]["UseProactiveKeyCaching"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 760 + 20,
                "DeviceEditable" in x["Ethernet"]["EAP"]["UseProactiveKeyCaching"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 760 + 13,
                x["Ethernet"]["EAP"]["UseProactiveKeyCaching"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["Ethernet"]["EAP"]["UseSystemCAs"] === "undefined") {
              A.store.Bool(ptr + 468 + 56 + 784 + 21, false);
              A.store.Bool(ptr + 468 + 56 + 784 + 14, false);
              A.store.Bool(ptr + 468 + 56 + 784 + 0, false);
              A.store.Ref(ptr + 468 + 56 + 784 + 4, undefined);
              A.store.Bool(ptr + 468 + 56 + 784 + 15, false);
              A.store.Bool(ptr + 468 + 56 + 784 + 8, false);
              A.store.Bool(ptr + 468 + 56 + 784 + 16, false);
              A.store.Bool(ptr + 468 + 56 + 784 + 9, false);
              A.store.Bool(ptr + 468 + 56 + 784 + 17, false);
              A.store.Bool(ptr + 468 + 56 + 784 + 10, false);
              A.store.Bool(ptr + 468 + 56 + 784 + 18, false);
              A.store.Bool(ptr + 468 + 56 + 784 + 11, false);
              A.store.Bool(ptr + 468 + 56 + 784 + 19, false);
              A.store.Bool(ptr + 468 + 56 + 784 + 12, false);
              A.store.Bool(ptr + 468 + 56 + 784 + 20, false);
              A.store.Bool(ptr + 468 + 56 + 784 + 13, false);
            } else {
              A.store.Bool(ptr + 468 + 56 + 784 + 21, true);
              A.store.Bool(ptr + 468 + 56 + 784 + 14, "Active" in x["Ethernet"]["EAP"]["UseSystemCAs"] ? true : false);
              A.store.Bool(ptr + 468 + 56 + 784 + 0, x["Ethernet"]["EAP"]["UseSystemCAs"]["Active"] ? true : false);
              A.store.Ref(ptr + 468 + 56 + 784 + 4, x["Ethernet"]["EAP"]["UseSystemCAs"]["Effective"]);
              A.store.Bool(
                ptr + 468 + 56 + 784 + 15,
                "UserPolicy" in x["Ethernet"]["EAP"]["UseSystemCAs"] ? true : false
              );
              A.store.Bool(ptr + 468 + 56 + 784 + 8, x["Ethernet"]["EAP"]["UseSystemCAs"]["UserPolicy"] ? true : false);
              A.store.Bool(
                ptr + 468 + 56 + 784 + 16,
                "DevicePolicy" in x["Ethernet"]["EAP"]["UseSystemCAs"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 784 + 9,
                x["Ethernet"]["EAP"]["UseSystemCAs"]["DevicePolicy"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 784 + 17,
                "UserSetting" in x["Ethernet"]["EAP"]["UseSystemCAs"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 784 + 10,
                x["Ethernet"]["EAP"]["UseSystemCAs"]["UserSetting"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 784 + 18,
                "SharedSetting" in x["Ethernet"]["EAP"]["UseSystemCAs"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 784 + 11,
                x["Ethernet"]["EAP"]["UseSystemCAs"]["SharedSetting"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 784 + 19,
                "UserEditable" in x["Ethernet"]["EAP"]["UseSystemCAs"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 784 + 12,
                x["Ethernet"]["EAP"]["UseSystemCAs"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 784 + 20,
                "DeviceEditable" in x["Ethernet"]["EAP"]["UseSystemCAs"] ? true : false
              );
              A.store.Bool(
                ptr + 468 + 56 + 784 + 13,
                x["Ethernet"]["EAP"]["UseSystemCAs"]["DeviceEditable"] ? true : false
              );
            }
          }
        }
        A.store.Ref(ptr + 1332, x["GUID"]);

        if (typeof x["IPAddressConfigType"] === "undefined") {
          A.store.Bool(ptr + 1336 + 28, false);
          A.store.Enum(ptr + 1336 + 0, -1);
          A.store.Ref(ptr + 1336 + 4, undefined);
          A.store.Enum(ptr + 1336 + 8, -1);
          A.store.Enum(ptr + 1336 + 12, -1);
          A.store.Enum(ptr + 1336 + 16, -1);
          A.store.Enum(ptr + 1336 + 20, -1);
          A.store.Bool(ptr + 1336 + 26, false);
          A.store.Bool(ptr + 1336 + 24, false);
          A.store.Bool(ptr + 1336 + 27, false);
          A.store.Bool(ptr + 1336 + 25, false);
        } else {
          A.store.Bool(ptr + 1336 + 28, true);
          A.store.Enum(ptr + 1336 + 0, ["DHCP", "Static"].indexOf(x["IPAddressConfigType"]["Active"] as string));
          A.store.Ref(ptr + 1336 + 4, x["IPAddressConfigType"]["Effective"]);
          A.store.Enum(ptr + 1336 + 8, ["DHCP", "Static"].indexOf(x["IPAddressConfigType"]["UserPolicy"] as string));
          A.store.Enum(ptr + 1336 + 12, ["DHCP", "Static"].indexOf(x["IPAddressConfigType"]["DevicePolicy"] as string));
          A.store.Enum(ptr + 1336 + 16, ["DHCP", "Static"].indexOf(x["IPAddressConfigType"]["UserSetting"] as string));
          A.store.Enum(
            ptr + 1336 + 20,
            ["DHCP", "Static"].indexOf(x["IPAddressConfigType"]["SharedSetting"] as string)
          );
          A.store.Bool(ptr + 1336 + 26, "UserEditable" in x["IPAddressConfigType"] ? true : false);
          A.store.Bool(ptr + 1336 + 24, x["IPAddressConfigType"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 1336 + 27, "DeviceEditable" in x["IPAddressConfigType"] ? true : false);
          A.store.Bool(ptr + 1336 + 25, x["IPAddressConfigType"]["DeviceEditable"] ? true : false);
        }
        A.store.Ref(ptr + 1368, x["IPConfigs"]);
        A.store.Ref(ptr + 1372, x["MacAddress"]);

        if (typeof x["Metered"] === "undefined") {
          A.store.Bool(ptr + 1376 + 21, false);
          A.store.Bool(ptr + 1376 + 14, false);
          A.store.Bool(ptr + 1376 + 0, false);
          A.store.Ref(ptr + 1376 + 4, undefined);
          A.store.Bool(ptr + 1376 + 15, false);
          A.store.Bool(ptr + 1376 + 8, false);
          A.store.Bool(ptr + 1376 + 16, false);
          A.store.Bool(ptr + 1376 + 9, false);
          A.store.Bool(ptr + 1376 + 17, false);
          A.store.Bool(ptr + 1376 + 10, false);
          A.store.Bool(ptr + 1376 + 18, false);
          A.store.Bool(ptr + 1376 + 11, false);
          A.store.Bool(ptr + 1376 + 19, false);
          A.store.Bool(ptr + 1376 + 12, false);
          A.store.Bool(ptr + 1376 + 20, false);
          A.store.Bool(ptr + 1376 + 13, false);
        } else {
          A.store.Bool(ptr + 1376 + 21, true);
          A.store.Bool(ptr + 1376 + 14, "Active" in x["Metered"] ? true : false);
          A.store.Bool(ptr + 1376 + 0, x["Metered"]["Active"] ? true : false);
          A.store.Ref(ptr + 1376 + 4, x["Metered"]["Effective"]);
          A.store.Bool(ptr + 1376 + 15, "UserPolicy" in x["Metered"] ? true : false);
          A.store.Bool(ptr + 1376 + 8, x["Metered"]["UserPolicy"] ? true : false);
          A.store.Bool(ptr + 1376 + 16, "DevicePolicy" in x["Metered"] ? true : false);
          A.store.Bool(ptr + 1376 + 9, x["Metered"]["DevicePolicy"] ? true : false);
          A.store.Bool(ptr + 1376 + 17, "UserSetting" in x["Metered"] ? true : false);
          A.store.Bool(ptr + 1376 + 10, x["Metered"]["UserSetting"] ? true : false);
          A.store.Bool(ptr + 1376 + 18, "SharedSetting" in x["Metered"] ? true : false);
          A.store.Bool(ptr + 1376 + 11, x["Metered"]["SharedSetting"] ? true : false);
          A.store.Bool(ptr + 1376 + 19, "UserEditable" in x["Metered"] ? true : false);
          A.store.Bool(ptr + 1376 + 12, x["Metered"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 1376 + 20, "DeviceEditable" in x["Metered"] ? true : false);
          A.store.Bool(ptr + 1376 + 13, x["Metered"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["Name"] === "undefined") {
          A.store.Bool(ptr + 1400 + 28, false);
          A.store.Ref(ptr + 1400 + 0, undefined);
          A.store.Ref(ptr + 1400 + 4, undefined);
          A.store.Ref(ptr + 1400 + 8, undefined);
          A.store.Ref(ptr + 1400 + 12, undefined);
          A.store.Ref(ptr + 1400 + 16, undefined);
          A.store.Ref(ptr + 1400 + 20, undefined);
          A.store.Bool(ptr + 1400 + 26, false);
          A.store.Bool(ptr + 1400 + 24, false);
          A.store.Bool(ptr + 1400 + 27, false);
          A.store.Bool(ptr + 1400 + 25, false);
        } else {
          A.store.Bool(ptr + 1400 + 28, true);
          A.store.Ref(ptr + 1400 + 0, x["Name"]["Active"]);
          A.store.Ref(ptr + 1400 + 4, x["Name"]["Effective"]);
          A.store.Ref(ptr + 1400 + 8, x["Name"]["UserPolicy"]);
          A.store.Ref(ptr + 1400 + 12, x["Name"]["DevicePolicy"]);
          A.store.Ref(ptr + 1400 + 16, x["Name"]["UserSetting"]);
          A.store.Ref(ptr + 1400 + 20, x["Name"]["SharedSetting"]);
          A.store.Bool(ptr + 1400 + 26, "UserEditable" in x["Name"] ? true : false);
          A.store.Bool(ptr + 1400 + 24, x["Name"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 1400 + 27, "DeviceEditable" in x["Name"] ? true : false);
          A.store.Bool(ptr + 1400 + 25, x["Name"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["NameServersConfigType"] === "undefined") {
          A.store.Bool(ptr + 1432 + 28, false);
          A.store.Enum(ptr + 1432 + 0, -1);
          A.store.Ref(ptr + 1432 + 4, undefined);
          A.store.Enum(ptr + 1432 + 8, -1);
          A.store.Enum(ptr + 1432 + 12, -1);
          A.store.Enum(ptr + 1432 + 16, -1);
          A.store.Enum(ptr + 1432 + 20, -1);
          A.store.Bool(ptr + 1432 + 26, false);
          A.store.Bool(ptr + 1432 + 24, false);
          A.store.Bool(ptr + 1432 + 27, false);
          A.store.Bool(ptr + 1432 + 25, false);
        } else {
          A.store.Bool(ptr + 1432 + 28, true);
          A.store.Enum(ptr + 1432 + 0, ["DHCP", "Static"].indexOf(x["NameServersConfigType"]["Active"] as string));
          A.store.Ref(ptr + 1432 + 4, x["NameServersConfigType"]["Effective"]);
          A.store.Enum(ptr + 1432 + 8, ["DHCP", "Static"].indexOf(x["NameServersConfigType"]["UserPolicy"] as string));
          A.store.Enum(
            ptr + 1432 + 12,
            ["DHCP", "Static"].indexOf(x["NameServersConfigType"]["DevicePolicy"] as string)
          );
          A.store.Enum(
            ptr + 1432 + 16,
            ["DHCP", "Static"].indexOf(x["NameServersConfigType"]["UserSetting"] as string)
          );
          A.store.Enum(
            ptr + 1432 + 20,
            ["DHCP", "Static"].indexOf(x["NameServersConfigType"]["SharedSetting"] as string)
          );
          A.store.Bool(ptr + 1432 + 26, "UserEditable" in x["NameServersConfigType"] ? true : false);
          A.store.Bool(ptr + 1432 + 24, x["NameServersConfigType"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 1432 + 27, "DeviceEditable" in x["NameServersConfigType"] ? true : false);
          A.store.Bool(ptr + 1432 + 25, x["NameServersConfigType"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["Priority"] === "undefined") {
          A.store.Bool(ptr + 1464 + 33, false);
          A.store.Bool(ptr + 1464 + 26, false);
          A.store.Int32(ptr + 1464 + 0, 0);
          A.store.Ref(ptr + 1464 + 4, undefined);
          A.store.Bool(ptr + 1464 + 27, false);
          A.store.Int32(ptr + 1464 + 8, 0);
          A.store.Bool(ptr + 1464 + 28, false);
          A.store.Int32(ptr + 1464 + 12, 0);
          A.store.Bool(ptr + 1464 + 29, false);
          A.store.Int32(ptr + 1464 + 16, 0);
          A.store.Bool(ptr + 1464 + 30, false);
          A.store.Int32(ptr + 1464 + 20, 0);
          A.store.Bool(ptr + 1464 + 31, false);
          A.store.Bool(ptr + 1464 + 24, false);
          A.store.Bool(ptr + 1464 + 32, false);
          A.store.Bool(ptr + 1464 + 25, false);
        } else {
          A.store.Bool(ptr + 1464 + 33, true);
          A.store.Bool(ptr + 1464 + 26, "Active" in x["Priority"] ? true : false);
          A.store.Int32(
            ptr + 1464 + 0,
            x["Priority"]["Active"] === undefined ? 0 : (x["Priority"]["Active"] as number)
          );
          A.store.Ref(ptr + 1464 + 4, x["Priority"]["Effective"]);
          A.store.Bool(ptr + 1464 + 27, "UserPolicy" in x["Priority"] ? true : false);
          A.store.Int32(
            ptr + 1464 + 8,
            x["Priority"]["UserPolicy"] === undefined ? 0 : (x["Priority"]["UserPolicy"] as number)
          );
          A.store.Bool(ptr + 1464 + 28, "DevicePolicy" in x["Priority"] ? true : false);
          A.store.Int32(
            ptr + 1464 + 12,
            x["Priority"]["DevicePolicy"] === undefined ? 0 : (x["Priority"]["DevicePolicy"] as number)
          );
          A.store.Bool(ptr + 1464 + 29, "UserSetting" in x["Priority"] ? true : false);
          A.store.Int32(
            ptr + 1464 + 16,
            x["Priority"]["UserSetting"] === undefined ? 0 : (x["Priority"]["UserSetting"] as number)
          );
          A.store.Bool(ptr + 1464 + 30, "SharedSetting" in x["Priority"] ? true : false);
          A.store.Int32(
            ptr + 1464 + 20,
            x["Priority"]["SharedSetting"] === undefined ? 0 : (x["Priority"]["SharedSetting"] as number)
          );
          A.store.Bool(ptr + 1464 + 31, "UserEditable" in x["Priority"] ? true : false);
          A.store.Bool(ptr + 1464 + 24, x["Priority"]["UserEditable"] ? true : false);
          A.store.Bool(ptr + 1464 + 32, "DeviceEditable" in x["Priority"] ? true : false);
          A.store.Bool(ptr + 1464 + 25, x["Priority"]["DeviceEditable"] ? true : false);
        }

        if (typeof x["ProxySettings"] === "undefined") {
          A.store.Bool(ptr + 1500 + 365, false);

          A.store.Bool(ptr + 1500 + 0 + 28, false);
          A.store.Enum(ptr + 1500 + 0 + 0, -1);
          A.store.Ref(ptr + 1500 + 0 + 4, undefined);
          A.store.Enum(ptr + 1500 + 0 + 8, -1);
          A.store.Enum(ptr + 1500 + 0 + 12, -1);
          A.store.Enum(ptr + 1500 + 0 + 16, -1);
          A.store.Enum(ptr + 1500 + 0 + 20, -1);
          A.store.Bool(ptr + 1500 + 0 + 26, false);
          A.store.Bool(ptr + 1500 + 0 + 24, false);
          A.store.Bool(ptr + 1500 + 0 + 27, false);
          A.store.Bool(ptr + 1500 + 0 + 25, false);

          A.store.Bool(ptr + 1500 + 32 + 271, false);

          A.store.Bool(ptr + 1500 + 32 + 0 + 66, false);

          A.store.Bool(ptr + 1500 + 32 + 0 + 0 + 28, false);
          A.store.Ref(ptr + 1500 + 32 + 0 + 0 + 0, undefined);
          A.store.Ref(ptr + 1500 + 32 + 0 + 0 + 4, undefined);
          A.store.Ref(ptr + 1500 + 32 + 0 + 0 + 8, undefined);
          A.store.Ref(ptr + 1500 + 32 + 0 + 0 + 12, undefined);
          A.store.Ref(ptr + 1500 + 32 + 0 + 0 + 16, undefined);
          A.store.Ref(ptr + 1500 + 32 + 0 + 0 + 20, undefined);
          A.store.Bool(ptr + 1500 + 32 + 0 + 0 + 26, false);
          A.store.Bool(ptr + 1500 + 32 + 0 + 0 + 24, false);
          A.store.Bool(ptr + 1500 + 32 + 0 + 0 + 27, false);
          A.store.Bool(ptr + 1500 + 32 + 0 + 0 + 25, false);

          A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 33, false);
          A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 26, false);
          A.store.Int32(ptr + 1500 + 32 + 0 + 32 + 0, 0);
          A.store.Ref(ptr + 1500 + 32 + 0 + 32 + 4, undefined);
          A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 27, false);
          A.store.Int32(ptr + 1500 + 32 + 0 + 32 + 8, 0);
          A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 28, false);
          A.store.Int32(ptr + 1500 + 32 + 0 + 32 + 12, 0);
          A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 29, false);
          A.store.Int32(ptr + 1500 + 32 + 0 + 32 + 16, 0);
          A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 30, false);
          A.store.Int32(ptr + 1500 + 32 + 0 + 32 + 20, 0);
          A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 31, false);
          A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 24, false);
          A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 32, false);
          A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 25, false);

          A.store.Bool(ptr + 1500 + 32 + 68 + 66, false);

          A.store.Bool(ptr + 1500 + 32 + 68 + 0 + 28, false);
          A.store.Ref(ptr + 1500 + 32 + 68 + 0 + 0, undefined);
          A.store.Ref(ptr + 1500 + 32 + 68 + 0 + 4, undefined);
          A.store.Ref(ptr + 1500 + 32 + 68 + 0 + 8, undefined);
          A.store.Ref(ptr + 1500 + 32 + 68 + 0 + 12, undefined);
          A.store.Ref(ptr + 1500 + 32 + 68 + 0 + 16, undefined);
          A.store.Ref(ptr + 1500 + 32 + 68 + 0 + 20, undefined);
          A.store.Bool(ptr + 1500 + 32 + 68 + 0 + 26, false);
          A.store.Bool(ptr + 1500 + 32 + 68 + 0 + 24, false);
          A.store.Bool(ptr + 1500 + 32 + 68 + 0 + 27, false);
          A.store.Bool(ptr + 1500 + 32 + 68 + 0 + 25, false);

          A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 33, false);
          A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 26, false);
          A.store.Int32(ptr + 1500 + 32 + 68 + 32 + 0, 0);
          A.store.Ref(ptr + 1500 + 32 + 68 + 32 + 4, undefined);
          A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 27, false);
          A.store.Int32(ptr + 1500 + 32 + 68 + 32 + 8, 0);
          A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 28, false);
          A.store.Int32(ptr + 1500 + 32 + 68 + 32 + 12, 0);
          A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 29, false);
          A.store.Int32(ptr + 1500 + 32 + 68 + 32 + 16, 0);
          A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 30, false);
          A.store.Int32(ptr + 1500 + 32 + 68 + 32 + 20, 0);
          A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 31, false);
          A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 24, false);
          A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 32, false);
          A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 25, false);

          A.store.Bool(ptr + 1500 + 32 + 136 + 66, false);

          A.store.Bool(ptr + 1500 + 32 + 136 + 0 + 28, false);
          A.store.Ref(ptr + 1500 + 32 + 136 + 0 + 0, undefined);
          A.store.Ref(ptr + 1500 + 32 + 136 + 0 + 4, undefined);
          A.store.Ref(ptr + 1500 + 32 + 136 + 0 + 8, undefined);
          A.store.Ref(ptr + 1500 + 32 + 136 + 0 + 12, undefined);
          A.store.Ref(ptr + 1500 + 32 + 136 + 0 + 16, undefined);
          A.store.Ref(ptr + 1500 + 32 + 136 + 0 + 20, undefined);
          A.store.Bool(ptr + 1500 + 32 + 136 + 0 + 26, false);
          A.store.Bool(ptr + 1500 + 32 + 136 + 0 + 24, false);
          A.store.Bool(ptr + 1500 + 32 + 136 + 0 + 27, false);
          A.store.Bool(ptr + 1500 + 32 + 136 + 0 + 25, false);

          A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 33, false);
          A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 26, false);
          A.store.Int32(ptr + 1500 + 32 + 136 + 32 + 0, 0);
          A.store.Ref(ptr + 1500 + 32 + 136 + 32 + 4, undefined);
          A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 27, false);
          A.store.Int32(ptr + 1500 + 32 + 136 + 32 + 8, 0);
          A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 28, false);
          A.store.Int32(ptr + 1500 + 32 + 136 + 32 + 12, 0);
          A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 29, false);
          A.store.Int32(ptr + 1500 + 32 + 136 + 32 + 16, 0);
          A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 30, false);
          A.store.Int32(ptr + 1500 + 32 + 136 + 32 + 20, 0);
          A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 31, false);
          A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 24, false);
          A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 32, false);
          A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 25, false);

          A.store.Bool(ptr + 1500 + 32 + 204 + 66, false);

          A.store.Bool(ptr + 1500 + 32 + 204 + 0 + 28, false);
          A.store.Ref(ptr + 1500 + 32 + 204 + 0 + 0, undefined);
          A.store.Ref(ptr + 1500 + 32 + 204 + 0 + 4, undefined);
          A.store.Ref(ptr + 1500 + 32 + 204 + 0 + 8, undefined);
          A.store.Ref(ptr + 1500 + 32 + 204 + 0 + 12, undefined);
          A.store.Ref(ptr + 1500 + 32 + 204 + 0 + 16, undefined);
          A.store.Ref(ptr + 1500 + 32 + 204 + 0 + 20, undefined);
          A.store.Bool(ptr + 1500 + 32 + 204 + 0 + 26, false);
          A.store.Bool(ptr + 1500 + 32 + 204 + 0 + 24, false);
          A.store.Bool(ptr + 1500 + 32 + 204 + 0 + 27, false);
          A.store.Bool(ptr + 1500 + 32 + 204 + 0 + 25, false);

          A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 33, false);
          A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 26, false);
          A.store.Int32(ptr + 1500 + 32 + 204 + 32 + 0, 0);
          A.store.Ref(ptr + 1500 + 32 + 204 + 32 + 4, undefined);
          A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 27, false);
          A.store.Int32(ptr + 1500 + 32 + 204 + 32 + 8, 0);
          A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 28, false);
          A.store.Int32(ptr + 1500 + 32 + 204 + 32 + 12, 0);
          A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 29, false);
          A.store.Int32(ptr + 1500 + 32 + 204 + 32 + 16, 0);
          A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 30, false);
          A.store.Int32(ptr + 1500 + 32 + 204 + 32 + 20, 0);
          A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 31, false);
          A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 24, false);
          A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 32, false);
          A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 25, false);

          A.store.Bool(ptr + 1500 + 304 + 28, false);
          A.store.Ref(ptr + 1500 + 304 + 0, undefined);
          A.store.Ref(ptr + 1500 + 304 + 4, undefined);
          A.store.Ref(ptr + 1500 + 304 + 8, undefined);
          A.store.Ref(ptr + 1500 + 304 + 12, undefined);
          A.store.Ref(ptr + 1500 + 304 + 16, undefined);
          A.store.Ref(ptr + 1500 + 304 + 20, undefined);
          A.store.Bool(ptr + 1500 + 304 + 26, false);
          A.store.Bool(ptr + 1500 + 304 + 24, false);
          A.store.Bool(ptr + 1500 + 304 + 27, false);
          A.store.Bool(ptr + 1500 + 304 + 25, false);

          A.store.Bool(ptr + 1500 + 336 + 28, false);
          A.store.Ref(ptr + 1500 + 336 + 0, undefined);
          A.store.Ref(ptr + 1500 + 336 + 4, undefined);
          A.store.Ref(ptr + 1500 + 336 + 8, undefined);
          A.store.Ref(ptr + 1500 + 336 + 12, undefined);
          A.store.Ref(ptr + 1500 + 336 + 16, undefined);
          A.store.Ref(ptr + 1500 + 336 + 20, undefined);
          A.store.Bool(ptr + 1500 + 336 + 26, false);
          A.store.Bool(ptr + 1500 + 336 + 24, false);
          A.store.Bool(ptr + 1500 + 336 + 27, false);
          A.store.Bool(ptr + 1500 + 336 + 25, false);
        } else {
          A.store.Bool(ptr + 1500 + 365, true);

          if (typeof x["ProxySettings"]["Type"] === "undefined") {
            A.store.Bool(ptr + 1500 + 0 + 28, false);
            A.store.Enum(ptr + 1500 + 0 + 0, -1);
            A.store.Ref(ptr + 1500 + 0 + 4, undefined);
            A.store.Enum(ptr + 1500 + 0 + 8, -1);
            A.store.Enum(ptr + 1500 + 0 + 12, -1);
            A.store.Enum(ptr + 1500 + 0 + 16, -1);
            A.store.Enum(ptr + 1500 + 0 + 20, -1);
            A.store.Bool(ptr + 1500 + 0 + 26, false);
            A.store.Bool(ptr + 1500 + 0 + 24, false);
            A.store.Bool(ptr + 1500 + 0 + 27, false);
            A.store.Bool(ptr + 1500 + 0 + 25, false);
          } else {
            A.store.Bool(ptr + 1500 + 0 + 28, true);
            A.store.Enum(
              ptr + 1500 + 0 + 0,
              ["Direct", "Manual", "PAC", "WPAD"].indexOf(x["ProxySettings"]["Type"]["Active"] as string)
            );
            A.store.Ref(ptr + 1500 + 0 + 4, x["ProxySettings"]["Type"]["Effective"]);
            A.store.Enum(
              ptr + 1500 + 0 + 8,
              ["Direct", "Manual", "PAC", "WPAD"].indexOf(x["ProxySettings"]["Type"]["UserPolicy"] as string)
            );
            A.store.Enum(
              ptr + 1500 + 0 + 12,
              ["Direct", "Manual", "PAC", "WPAD"].indexOf(x["ProxySettings"]["Type"]["DevicePolicy"] as string)
            );
            A.store.Enum(
              ptr + 1500 + 0 + 16,
              ["Direct", "Manual", "PAC", "WPAD"].indexOf(x["ProxySettings"]["Type"]["UserSetting"] as string)
            );
            A.store.Enum(
              ptr + 1500 + 0 + 20,
              ["Direct", "Manual", "PAC", "WPAD"].indexOf(x["ProxySettings"]["Type"]["SharedSetting"] as string)
            );
            A.store.Bool(ptr + 1500 + 0 + 26, "UserEditable" in x["ProxySettings"]["Type"] ? true : false);
            A.store.Bool(ptr + 1500 + 0 + 24, x["ProxySettings"]["Type"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1500 + 0 + 27, "DeviceEditable" in x["ProxySettings"]["Type"] ? true : false);
            A.store.Bool(ptr + 1500 + 0 + 25, x["ProxySettings"]["Type"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["ProxySettings"]["Manual"] === "undefined") {
            A.store.Bool(ptr + 1500 + 32 + 271, false);

            A.store.Bool(ptr + 1500 + 32 + 0 + 66, false);

            A.store.Bool(ptr + 1500 + 32 + 0 + 0 + 28, false);
            A.store.Ref(ptr + 1500 + 32 + 0 + 0 + 0, undefined);
            A.store.Ref(ptr + 1500 + 32 + 0 + 0 + 4, undefined);
            A.store.Ref(ptr + 1500 + 32 + 0 + 0 + 8, undefined);
            A.store.Ref(ptr + 1500 + 32 + 0 + 0 + 12, undefined);
            A.store.Ref(ptr + 1500 + 32 + 0 + 0 + 16, undefined);
            A.store.Ref(ptr + 1500 + 32 + 0 + 0 + 20, undefined);
            A.store.Bool(ptr + 1500 + 32 + 0 + 0 + 26, false);
            A.store.Bool(ptr + 1500 + 32 + 0 + 0 + 24, false);
            A.store.Bool(ptr + 1500 + 32 + 0 + 0 + 27, false);
            A.store.Bool(ptr + 1500 + 32 + 0 + 0 + 25, false);

            A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 33, false);
            A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 26, false);
            A.store.Int32(ptr + 1500 + 32 + 0 + 32 + 0, 0);
            A.store.Ref(ptr + 1500 + 32 + 0 + 32 + 4, undefined);
            A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 27, false);
            A.store.Int32(ptr + 1500 + 32 + 0 + 32 + 8, 0);
            A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 28, false);
            A.store.Int32(ptr + 1500 + 32 + 0 + 32 + 12, 0);
            A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 29, false);
            A.store.Int32(ptr + 1500 + 32 + 0 + 32 + 16, 0);
            A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 30, false);
            A.store.Int32(ptr + 1500 + 32 + 0 + 32 + 20, 0);
            A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 31, false);
            A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 24, false);
            A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 32, false);
            A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 25, false);

            A.store.Bool(ptr + 1500 + 32 + 68 + 66, false);

            A.store.Bool(ptr + 1500 + 32 + 68 + 0 + 28, false);
            A.store.Ref(ptr + 1500 + 32 + 68 + 0 + 0, undefined);
            A.store.Ref(ptr + 1500 + 32 + 68 + 0 + 4, undefined);
            A.store.Ref(ptr + 1500 + 32 + 68 + 0 + 8, undefined);
            A.store.Ref(ptr + 1500 + 32 + 68 + 0 + 12, undefined);
            A.store.Ref(ptr + 1500 + 32 + 68 + 0 + 16, undefined);
            A.store.Ref(ptr + 1500 + 32 + 68 + 0 + 20, undefined);
            A.store.Bool(ptr + 1500 + 32 + 68 + 0 + 26, false);
            A.store.Bool(ptr + 1500 + 32 + 68 + 0 + 24, false);
            A.store.Bool(ptr + 1500 + 32 + 68 + 0 + 27, false);
            A.store.Bool(ptr + 1500 + 32 + 68 + 0 + 25, false);

            A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 33, false);
            A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 26, false);
            A.store.Int32(ptr + 1500 + 32 + 68 + 32 + 0, 0);
            A.store.Ref(ptr + 1500 + 32 + 68 + 32 + 4, undefined);
            A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 27, false);
            A.store.Int32(ptr + 1500 + 32 + 68 + 32 + 8, 0);
            A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 28, false);
            A.store.Int32(ptr + 1500 + 32 + 68 + 32 + 12, 0);
            A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 29, false);
            A.store.Int32(ptr + 1500 + 32 + 68 + 32 + 16, 0);
            A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 30, false);
            A.store.Int32(ptr + 1500 + 32 + 68 + 32 + 20, 0);
            A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 31, false);
            A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 24, false);
            A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 32, false);
            A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 25, false);

            A.store.Bool(ptr + 1500 + 32 + 136 + 66, false);

            A.store.Bool(ptr + 1500 + 32 + 136 + 0 + 28, false);
            A.store.Ref(ptr + 1500 + 32 + 136 + 0 + 0, undefined);
            A.store.Ref(ptr + 1500 + 32 + 136 + 0 + 4, undefined);
            A.store.Ref(ptr + 1500 + 32 + 136 + 0 + 8, undefined);
            A.store.Ref(ptr + 1500 + 32 + 136 + 0 + 12, undefined);
            A.store.Ref(ptr + 1500 + 32 + 136 + 0 + 16, undefined);
            A.store.Ref(ptr + 1500 + 32 + 136 + 0 + 20, undefined);
            A.store.Bool(ptr + 1500 + 32 + 136 + 0 + 26, false);
            A.store.Bool(ptr + 1500 + 32 + 136 + 0 + 24, false);
            A.store.Bool(ptr + 1500 + 32 + 136 + 0 + 27, false);
            A.store.Bool(ptr + 1500 + 32 + 136 + 0 + 25, false);

            A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 33, false);
            A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 26, false);
            A.store.Int32(ptr + 1500 + 32 + 136 + 32 + 0, 0);
            A.store.Ref(ptr + 1500 + 32 + 136 + 32 + 4, undefined);
            A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 27, false);
            A.store.Int32(ptr + 1500 + 32 + 136 + 32 + 8, 0);
            A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 28, false);
            A.store.Int32(ptr + 1500 + 32 + 136 + 32 + 12, 0);
            A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 29, false);
            A.store.Int32(ptr + 1500 + 32 + 136 + 32 + 16, 0);
            A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 30, false);
            A.store.Int32(ptr + 1500 + 32 + 136 + 32 + 20, 0);
            A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 31, false);
            A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 24, false);
            A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 32, false);
            A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 25, false);

            A.store.Bool(ptr + 1500 + 32 + 204 + 66, false);

            A.store.Bool(ptr + 1500 + 32 + 204 + 0 + 28, false);
            A.store.Ref(ptr + 1500 + 32 + 204 + 0 + 0, undefined);
            A.store.Ref(ptr + 1500 + 32 + 204 + 0 + 4, undefined);
            A.store.Ref(ptr + 1500 + 32 + 204 + 0 + 8, undefined);
            A.store.Ref(ptr + 1500 + 32 + 204 + 0 + 12, undefined);
            A.store.Ref(ptr + 1500 + 32 + 204 + 0 + 16, undefined);
            A.store.Ref(ptr + 1500 + 32 + 204 + 0 + 20, undefined);
            A.store.Bool(ptr + 1500 + 32 + 204 + 0 + 26, false);
            A.store.Bool(ptr + 1500 + 32 + 204 + 0 + 24, false);
            A.store.Bool(ptr + 1500 + 32 + 204 + 0 + 27, false);
            A.store.Bool(ptr + 1500 + 32 + 204 + 0 + 25, false);

            A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 33, false);
            A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 26, false);
            A.store.Int32(ptr + 1500 + 32 + 204 + 32 + 0, 0);
            A.store.Ref(ptr + 1500 + 32 + 204 + 32 + 4, undefined);
            A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 27, false);
            A.store.Int32(ptr + 1500 + 32 + 204 + 32 + 8, 0);
            A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 28, false);
            A.store.Int32(ptr + 1500 + 32 + 204 + 32 + 12, 0);
            A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 29, false);
            A.store.Int32(ptr + 1500 + 32 + 204 + 32 + 16, 0);
            A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 30, false);
            A.store.Int32(ptr + 1500 + 32 + 204 + 32 + 20, 0);
            A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 31, false);
            A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 24, false);
            A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 32, false);
            A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 25, false);
          } else {
            A.store.Bool(ptr + 1500 + 32 + 271, true);

            if (typeof x["ProxySettings"]["Manual"]["HTTPProxy"] === "undefined") {
              A.store.Bool(ptr + 1500 + 32 + 0 + 66, false);

              A.store.Bool(ptr + 1500 + 32 + 0 + 0 + 28, false);
              A.store.Ref(ptr + 1500 + 32 + 0 + 0 + 0, undefined);
              A.store.Ref(ptr + 1500 + 32 + 0 + 0 + 4, undefined);
              A.store.Ref(ptr + 1500 + 32 + 0 + 0 + 8, undefined);
              A.store.Ref(ptr + 1500 + 32 + 0 + 0 + 12, undefined);
              A.store.Ref(ptr + 1500 + 32 + 0 + 0 + 16, undefined);
              A.store.Ref(ptr + 1500 + 32 + 0 + 0 + 20, undefined);
              A.store.Bool(ptr + 1500 + 32 + 0 + 0 + 26, false);
              A.store.Bool(ptr + 1500 + 32 + 0 + 0 + 24, false);
              A.store.Bool(ptr + 1500 + 32 + 0 + 0 + 27, false);
              A.store.Bool(ptr + 1500 + 32 + 0 + 0 + 25, false);

              A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 33, false);
              A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 26, false);
              A.store.Int32(ptr + 1500 + 32 + 0 + 32 + 0, 0);
              A.store.Ref(ptr + 1500 + 32 + 0 + 32 + 4, undefined);
              A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 27, false);
              A.store.Int32(ptr + 1500 + 32 + 0 + 32 + 8, 0);
              A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 28, false);
              A.store.Int32(ptr + 1500 + 32 + 0 + 32 + 12, 0);
              A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 29, false);
              A.store.Int32(ptr + 1500 + 32 + 0 + 32 + 16, 0);
              A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 30, false);
              A.store.Int32(ptr + 1500 + 32 + 0 + 32 + 20, 0);
              A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 31, false);
              A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 24, false);
              A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 32, false);
              A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 25, false);
            } else {
              A.store.Bool(ptr + 1500 + 32 + 0 + 66, true);

              if (typeof x["ProxySettings"]["Manual"]["HTTPProxy"]["Host"] === "undefined") {
                A.store.Bool(ptr + 1500 + 32 + 0 + 0 + 28, false);
                A.store.Ref(ptr + 1500 + 32 + 0 + 0 + 0, undefined);
                A.store.Ref(ptr + 1500 + 32 + 0 + 0 + 4, undefined);
                A.store.Ref(ptr + 1500 + 32 + 0 + 0 + 8, undefined);
                A.store.Ref(ptr + 1500 + 32 + 0 + 0 + 12, undefined);
                A.store.Ref(ptr + 1500 + 32 + 0 + 0 + 16, undefined);
                A.store.Ref(ptr + 1500 + 32 + 0 + 0 + 20, undefined);
                A.store.Bool(ptr + 1500 + 32 + 0 + 0 + 26, false);
                A.store.Bool(ptr + 1500 + 32 + 0 + 0 + 24, false);
                A.store.Bool(ptr + 1500 + 32 + 0 + 0 + 27, false);
                A.store.Bool(ptr + 1500 + 32 + 0 + 0 + 25, false);
              } else {
                A.store.Bool(ptr + 1500 + 32 + 0 + 0 + 28, true);
                A.store.Ref(ptr + 1500 + 32 + 0 + 0 + 0, x["ProxySettings"]["Manual"]["HTTPProxy"]["Host"]["Active"]);
                A.store.Ref(
                  ptr + 1500 + 32 + 0 + 0 + 4,
                  x["ProxySettings"]["Manual"]["HTTPProxy"]["Host"]["Effective"]
                );
                A.store.Ref(
                  ptr + 1500 + 32 + 0 + 0 + 8,
                  x["ProxySettings"]["Manual"]["HTTPProxy"]["Host"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 1500 + 32 + 0 + 0 + 12,
                  x["ProxySettings"]["Manual"]["HTTPProxy"]["Host"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 1500 + 32 + 0 + 0 + 16,
                  x["ProxySettings"]["Manual"]["HTTPProxy"]["Host"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 1500 + 32 + 0 + 0 + 20,
                  x["ProxySettings"]["Manual"]["HTTPProxy"]["Host"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 0 + 0 + 26,
                  "UserEditable" in x["ProxySettings"]["Manual"]["HTTPProxy"]["Host"] ? true : false
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 0 + 0 + 24,
                  x["ProxySettings"]["Manual"]["HTTPProxy"]["Host"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 0 + 0 + 27,
                  "DeviceEditable" in x["ProxySettings"]["Manual"]["HTTPProxy"]["Host"] ? true : false
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 0 + 0 + 25,
                  x["ProxySettings"]["Manual"]["HTTPProxy"]["Host"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"] === "undefined") {
                A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 33, false);
                A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 26, false);
                A.store.Int32(ptr + 1500 + 32 + 0 + 32 + 0, 0);
                A.store.Ref(ptr + 1500 + 32 + 0 + 32 + 4, undefined);
                A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 27, false);
                A.store.Int32(ptr + 1500 + 32 + 0 + 32 + 8, 0);
                A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 28, false);
                A.store.Int32(ptr + 1500 + 32 + 0 + 32 + 12, 0);
                A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 29, false);
                A.store.Int32(ptr + 1500 + 32 + 0 + 32 + 16, 0);
                A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 30, false);
                A.store.Int32(ptr + 1500 + 32 + 0 + 32 + 20, 0);
                A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 31, false);
                A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 24, false);
                A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 32, false);
                A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 25, false);
              } else {
                A.store.Bool(ptr + 1500 + 32 + 0 + 32 + 33, true);
                A.store.Bool(
                  ptr + 1500 + 32 + 0 + 32 + 26,
                  "Active" in x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"] ? true : false
                );
                A.store.Int32(
                  ptr + 1500 + 32 + 0 + 32 + 0,
                  x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"]["Active"] === undefined
                    ? 0
                    : (x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"]["Active"] as number)
                );
                A.store.Ref(
                  ptr + 1500 + 32 + 0 + 32 + 4,
                  x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"]["Effective"]
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 0 + 32 + 27,
                  "UserPolicy" in x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"] ? true : false
                );
                A.store.Int32(
                  ptr + 1500 + 32 + 0 + 32 + 8,
                  x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"]["UserPolicy"] === undefined
                    ? 0
                    : (x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"]["UserPolicy"] as number)
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 0 + 32 + 28,
                  "DevicePolicy" in x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"] ? true : false
                );
                A.store.Int32(
                  ptr + 1500 + 32 + 0 + 32 + 12,
                  x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"]["DevicePolicy"] === undefined
                    ? 0
                    : (x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"]["DevicePolicy"] as number)
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 0 + 32 + 29,
                  "UserSetting" in x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"] ? true : false
                );
                A.store.Int32(
                  ptr + 1500 + 32 + 0 + 32 + 16,
                  x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"]["UserSetting"] === undefined
                    ? 0
                    : (x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"]["UserSetting"] as number)
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 0 + 32 + 30,
                  "SharedSetting" in x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"] ? true : false
                );
                A.store.Int32(
                  ptr + 1500 + 32 + 0 + 32 + 20,
                  x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"]["SharedSetting"] === undefined
                    ? 0
                    : (x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"]["SharedSetting"] as number)
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 0 + 32 + 31,
                  "UserEditable" in x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"] ? true : false
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 0 + 32 + 24,
                  x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 0 + 32 + 32,
                  "DeviceEditable" in x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"] ? true : false
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 0 + 32 + 25,
                  x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"]["DeviceEditable"] ? true : false
                );
              }
            }

            if (typeof x["ProxySettings"]["Manual"]["SecureHTTPProxy"] === "undefined") {
              A.store.Bool(ptr + 1500 + 32 + 68 + 66, false);

              A.store.Bool(ptr + 1500 + 32 + 68 + 0 + 28, false);
              A.store.Ref(ptr + 1500 + 32 + 68 + 0 + 0, undefined);
              A.store.Ref(ptr + 1500 + 32 + 68 + 0 + 4, undefined);
              A.store.Ref(ptr + 1500 + 32 + 68 + 0 + 8, undefined);
              A.store.Ref(ptr + 1500 + 32 + 68 + 0 + 12, undefined);
              A.store.Ref(ptr + 1500 + 32 + 68 + 0 + 16, undefined);
              A.store.Ref(ptr + 1500 + 32 + 68 + 0 + 20, undefined);
              A.store.Bool(ptr + 1500 + 32 + 68 + 0 + 26, false);
              A.store.Bool(ptr + 1500 + 32 + 68 + 0 + 24, false);
              A.store.Bool(ptr + 1500 + 32 + 68 + 0 + 27, false);
              A.store.Bool(ptr + 1500 + 32 + 68 + 0 + 25, false);

              A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 33, false);
              A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 26, false);
              A.store.Int32(ptr + 1500 + 32 + 68 + 32 + 0, 0);
              A.store.Ref(ptr + 1500 + 32 + 68 + 32 + 4, undefined);
              A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 27, false);
              A.store.Int32(ptr + 1500 + 32 + 68 + 32 + 8, 0);
              A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 28, false);
              A.store.Int32(ptr + 1500 + 32 + 68 + 32 + 12, 0);
              A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 29, false);
              A.store.Int32(ptr + 1500 + 32 + 68 + 32 + 16, 0);
              A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 30, false);
              A.store.Int32(ptr + 1500 + 32 + 68 + 32 + 20, 0);
              A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 31, false);
              A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 24, false);
              A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 32, false);
              A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 25, false);
            } else {
              A.store.Bool(ptr + 1500 + 32 + 68 + 66, true);

              if (typeof x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Host"] === "undefined") {
                A.store.Bool(ptr + 1500 + 32 + 68 + 0 + 28, false);
                A.store.Ref(ptr + 1500 + 32 + 68 + 0 + 0, undefined);
                A.store.Ref(ptr + 1500 + 32 + 68 + 0 + 4, undefined);
                A.store.Ref(ptr + 1500 + 32 + 68 + 0 + 8, undefined);
                A.store.Ref(ptr + 1500 + 32 + 68 + 0 + 12, undefined);
                A.store.Ref(ptr + 1500 + 32 + 68 + 0 + 16, undefined);
                A.store.Ref(ptr + 1500 + 32 + 68 + 0 + 20, undefined);
                A.store.Bool(ptr + 1500 + 32 + 68 + 0 + 26, false);
                A.store.Bool(ptr + 1500 + 32 + 68 + 0 + 24, false);
                A.store.Bool(ptr + 1500 + 32 + 68 + 0 + 27, false);
                A.store.Bool(ptr + 1500 + 32 + 68 + 0 + 25, false);
              } else {
                A.store.Bool(ptr + 1500 + 32 + 68 + 0 + 28, true);
                A.store.Ref(
                  ptr + 1500 + 32 + 68 + 0 + 0,
                  x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Host"]["Active"]
                );
                A.store.Ref(
                  ptr + 1500 + 32 + 68 + 0 + 4,
                  x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Host"]["Effective"]
                );
                A.store.Ref(
                  ptr + 1500 + 32 + 68 + 0 + 8,
                  x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Host"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 1500 + 32 + 68 + 0 + 12,
                  x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Host"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 1500 + 32 + 68 + 0 + 16,
                  x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Host"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 1500 + 32 + 68 + 0 + 20,
                  x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Host"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 68 + 0 + 26,
                  "UserEditable" in x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Host"] ? true : false
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 68 + 0 + 24,
                  x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Host"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 68 + 0 + 27,
                  "DeviceEditable" in x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Host"] ? true : false
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 68 + 0 + 25,
                  x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Host"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"] === "undefined") {
                A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 33, false);
                A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 26, false);
                A.store.Int32(ptr + 1500 + 32 + 68 + 32 + 0, 0);
                A.store.Ref(ptr + 1500 + 32 + 68 + 32 + 4, undefined);
                A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 27, false);
                A.store.Int32(ptr + 1500 + 32 + 68 + 32 + 8, 0);
                A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 28, false);
                A.store.Int32(ptr + 1500 + 32 + 68 + 32 + 12, 0);
                A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 29, false);
                A.store.Int32(ptr + 1500 + 32 + 68 + 32 + 16, 0);
                A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 30, false);
                A.store.Int32(ptr + 1500 + 32 + 68 + 32 + 20, 0);
                A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 31, false);
                A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 24, false);
                A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 32, false);
                A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 25, false);
              } else {
                A.store.Bool(ptr + 1500 + 32 + 68 + 32 + 33, true);
                A.store.Bool(
                  ptr + 1500 + 32 + 68 + 32 + 26,
                  "Active" in x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"] ? true : false
                );
                A.store.Int32(
                  ptr + 1500 + 32 + 68 + 32 + 0,
                  x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"]["Active"] === undefined
                    ? 0
                    : (x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"]["Active"] as number)
                );
                A.store.Ref(
                  ptr + 1500 + 32 + 68 + 32 + 4,
                  x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"]["Effective"]
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 68 + 32 + 27,
                  "UserPolicy" in x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"] ? true : false
                );
                A.store.Int32(
                  ptr + 1500 + 32 + 68 + 32 + 8,
                  x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"]["UserPolicy"] === undefined
                    ? 0
                    : (x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"]["UserPolicy"] as number)
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 68 + 32 + 28,
                  "DevicePolicy" in x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"] ? true : false
                );
                A.store.Int32(
                  ptr + 1500 + 32 + 68 + 32 + 12,
                  x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"]["DevicePolicy"] === undefined
                    ? 0
                    : (x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"]["DevicePolicy"] as number)
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 68 + 32 + 29,
                  "UserSetting" in x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"] ? true : false
                );
                A.store.Int32(
                  ptr + 1500 + 32 + 68 + 32 + 16,
                  x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"]["UserSetting"] === undefined
                    ? 0
                    : (x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"]["UserSetting"] as number)
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 68 + 32 + 30,
                  "SharedSetting" in x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"] ? true : false
                );
                A.store.Int32(
                  ptr + 1500 + 32 + 68 + 32 + 20,
                  x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"]["SharedSetting"] === undefined
                    ? 0
                    : (x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"]["SharedSetting"] as number)
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 68 + 32 + 31,
                  "UserEditable" in x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"] ? true : false
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 68 + 32 + 24,
                  x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 68 + 32 + 32,
                  "DeviceEditable" in x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"] ? true : false
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 68 + 32 + 25,
                  x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"]["DeviceEditable"] ? true : false
                );
              }
            }

            if (typeof x["ProxySettings"]["Manual"]["FTPProxy"] === "undefined") {
              A.store.Bool(ptr + 1500 + 32 + 136 + 66, false);

              A.store.Bool(ptr + 1500 + 32 + 136 + 0 + 28, false);
              A.store.Ref(ptr + 1500 + 32 + 136 + 0 + 0, undefined);
              A.store.Ref(ptr + 1500 + 32 + 136 + 0 + 4, undefined);
              A.store.Ref(ptr + 1500 + 32 + 136 + 0 + 8, undefined);
              A.store.Ref(ptr + 1500 + 32 + 136 + 0 + 12, undefined);
              A.store.Ref(ptr + 1500 + 32 + 136 + 0 + 16, undefined);
              A.store.Ref(ptr + 1500 + 32 + 136 + 0 + 20, undefined);
              A.store.Bool(ptr + 1500 + 32 + 136 + 0 + 26, false);
              A.store.Bool(ptr + 1500 + 32 + 136 + 0 + 24, false);
              A.store.Bool(ptr + 1500 + 32 + 136 + 0 + 27, false);
              A.store.Bool(ptr + 1500 + 32 + 136 + 0 + 25, false);

              A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 33, false);
              A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 26, false);
              A.store.Int32(ptr + 1500 + 32 + 136 + 32 + 0, 0);
              A.store.Ref(ptr + 1500 + 32 + 136 + 32 + 4, undefined);
              A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 27, false);
              A.store.Int32(ptr + 1500 + 32 + 136 + 32 + 8, 0);
              A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 28, false);
              A.store.Int32(ptr + 1500 + 32 + 136 + 32 + 12, 0);
              A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 29, false);
              A.store.Int32(ptr + 1500 + 32 + 136 + 32 + 16, 0);
              A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 30, false);
              A.store.Int32(ptr + 1500 + 32 + 136 + 32 + 20, 0);
              A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 31, false);
              A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 24, false);
              A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 32, false);
              A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 25, false);
            } else {
              A.store.Bool(ptr + 1500 + 32 + 136 + 66, true);

              if (typeof x["ProxySettings"]["Manual"]["FTPProxy"]["Host"] === "undefined") {
                A.store.Bool(ptr + 1500 + 32 + 136 + 0 + 28, false);
                A.store.Ref(ptr + 1500 + 32 + 136 + 0 + 0, undefined);
                A.store.Ref(ptr + 1500 + 32 + 136 + 0 + 4, undefined);
                A.store.Ref(ptr + 1500 + 32 + 136 + 0 + 8, undefined);
                A.store.Ref(ptr + 1500 + 32 + 136 + 0 + 12, undefined);
                A.store.Ref(ptr + 1500 + 32 + 136 + 0 + 16, undefined);
                A.store.Ref(ptr + 1500 + 32 + 136 + 0 + 20, undefined);
                A.store.Bool(ptr + 1500 + 32 + 136 + 0 + 26, false);
                A.store.Bool(ptr + 1500 + 32 + 136 + 0 + 24, false);
                A.store.Bool(ptr + 1500 + 32 + 136 + 0 + 27, false);
                A.store.Bool(ptr + 1500 + 32 + 136 + 0 + 25, false);
              } else {
                A.store.Bool(ptr + 1500 + 32 + 136 + 0 + 28, true);
                A.store.Ref(ptr + 1500 + 32 + 136 + 0 + 0, x["ProxySettings"]["Manual"]["FTPProxy"]["Host"]["Active"]);
                A.store.Ref(
                  ptr + 1500 + 32 + 136 + 0 + 4,
                  x["ProxySettings"]["Manual"]["FTPProxy"]["Host"]["Effective"]
                );
                A.store.Ref(
                  ptr + 1500 + 32 + 136 + 0 + 8,
                  x["ProxySettings"]["Manual"]["FTPProxy"]["Host"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 1500 + 32 + 136 + 0 + 12,
                  x["ProxySettings"]["Manual"]["FTPProxy"]["Host"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 1500 + 32 + 136 + 0 + 16,
                  x["ProxySettings"]["Manual"]["FTPProxy"]["Host"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 1500 + 32 + 136 + 0 + 20,
                  x["ProxySettings"]["Manual"]["FTPProxy"]["Host"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 136 + 0 + 26,
                  "UserEditable" in x["ProxySettings"]["Manual"]["FTPProxy"]["Host"] ? true : false
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 136 + 0 + 24,
                  x["ProxySettings"]["Manual"]["FTPProxy"]["Host"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 136 + 0 + 27,
                  "DeviceEditable" in x["ProxySettings"]["Manual"]["FTPProxy"]["Host"] ? true : false
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 136 + 0 + 25,
                  x["ProxySettings"]["Manual"]["FTPProxy"]["Host"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["ProxySettings"]["Manual"]["FTPProxy"]["Port"] === "undefined") {
                A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 33, false);
                A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 26, false);
                A.store.Int32(ptr + 1500 + 32 + 136 + 32 + 0, 0);
                A.store.Ref(ptr + 1500 + 32 + 136 + 32 + 4, undefined);
                A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 27, false);
                A.store.Int32(ptr + 1500 + 32 + 136 + 32 + 8, 0);
                A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 28, false);
                A.store.Int32(ptr + 1500 + 32 + 136 + 32 + 12, 0);
                A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 29, false);
                A.store.Int32(ptr + 1500 + 32 + 136 + 32 + 16, 0);
                A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 30, false);
                A.store.Int32(ptr + 1500 + 32 + 136 + 32 + 20, 0);
                A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 31, false);
                A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 24, false);
                A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 32, false);
                A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 25, false);
              } else {
                A.store.Bool(ptr + 1500 + 32 + 136 + 32 + 33, true);
                A.store.Bool(
                  ptr + 1500 + 32 + 136 + 32 + 26,
                  "Active" in x["ProxySettings"]["Manual"]["FTPProxy"]["Port"] ? true : false
                );
                A.store.Int32(
                  ptr + 1500 + 32 + 136 + 32 + 0,
                  x["ProxySettings"]["Manual"]["FTPProxy"]["Port"]["Active"] === undefined
                    ? 0
                    : (x["ProxySettings"]["Manual"]["FTPProxy"]["Port"]["Active"] as number)
                );
                A.store.Ref(
                  ptr + 1500 + 32 + 136 + 32 + 4,
                  x["ProxySettings"]["Manual"]["FTPProxy"]["Port"]["Effective"]
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 136 + 32 + 27,
                  "UserPolicy" in x["ProxySettings"]["Manual"]["FTPProxy"]["Port"] ? true : false
                );
                A.store.Int32(
                  ptr + 1500 + 32 + 136 + 32 + 8,
                  x["ProxySettings"]["Manual"]["FTPProxy"]["Port"]["UserPolicy"] === undefined
                    ? 0
                    : (x["ProxySettings"]["Manual"]["FTPProxy"]["Port"]["UserPolicy"] as number)
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 136 + 32 + 28,
                  "DevicePolicy" in x["ProxySettings"]["Manual"]["FTPProxy"]["Port"] ? true : false
                );
                A.store.Int32(
                  ptr + 1500 + 32 + 136 + 32 + 12,
                  x["ProxySettings"]["Manual"]["FTPProxy"]["Port"]["DevicePolicy"] === undefined
                    ? 0
                    : (x["ProxySettings"]["Manual"]["FTPProxy"]["Port"]["DevicePolicy"] as number)
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 136 + 32 + 29,
                  "UserSetting" in x["ProxySettings"]["Manual"]["FTPProxy"]["Port"] ? true : false
                );
                A.store.Int32(
                  ptr + 1500 + 32 + 136 + 32 + 16,
                  x["ProxySettings"]["Manual"]["FTPProxy"]["Port"]["UserSetting"] === undefined
                    ? 0
                    : (x["ProxySettings"]["Manual"]["FTPProxy"]["Port"]["UserSetting"] as number)
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 136 + 32 + 30,
                  "SharedSetting" in x["ProxySettings"]["Manual"]["FTPProxy"]["Port"] ? true : false
                );
                A.store.Int32(
                  ptr + 1500 + 32 + 136 + 32 + 20,
                  x["ProxySettings"]["Manual"]["FTPProxy"]["Port"]["SharedSetting"] === undefined
                    ? 0
                    : (x["ProxySettings"]["Manual"]["FTPProxy"]["Port"]["SharedSetting"] as number)
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 136 + 32 + 31,
                  "UserEditable" in x["ProxySettings"]["Manual"]["FTPProxy"]["Port"] ? true : false
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 136 + 32 + 24,
                  x["ProxySettings"]["Manual"]["FTPProxy"]["Port"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 136 + 32 + 32,
                  "DeviceEditable" in x["ProxySettings"]["Manual"]["FTPProxy"]["Port"] ? true : false
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 136 + 32 + 25,
                  x["ProxySettings"]["Manual"]["FTPProxy"]["Port"]["DeviceEditable"] ? true : false
                );
              }
            }

            if (typeof x["ProxySettings"]["Manual"]["SOCKS"] === "undefined") {
              A.store.Bool(ptr + 1500 + 32 + 204 + 66, false);

              A.store.Bool(ptr + 1500 + 32 + 204 + 0 + 28, false);
              A.store.Ref(ptr + 1500 + 32 + 204 + 0 + 0, undefined);
              A.store.Ref(ptr + 1500 + 32 + 204 + 0 + 4, undefined);
              A.store.Ref(ptr + 1500 + 32 + 204 + 0 + 8, undefined);
              A.store.Ref(ptr + 1500 + 32 + 204 + 0 + 12, undefined);
              A.store.Ref(ptr + 1500 + 32 + 204 + 0 + 16, undefined);
              A.store.Ref(ptr + 1500 + 32 + 204 + 0 + 20, undefined);
              A.store.Bool(ptr + 1500 + 32 + 204 + 0 + 26, false);
              A.store.Bool(ptr + 1500 + 32 + 204 + 0 + 24, false);
              A.store.Bool(ptr + 1500 + 32 + 204 + 0 + 27, false);
              A.store.Bool(ptr + 1500 + 32 + 204 + 0 + 25, false);

              A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 33, false);
              A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 26, false);
              A.store.Int32(ptr + 1500 + 32 + 204 + 32 + 0, 0);
              A.store.Ref(ptr + 1500 + 32 + 204 + 32 + 4, undefined);
              A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 27, false);
              A.store.Int32(ptr + 1500 + 32 + 204 + 32 + 8, 0);
              A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 28, false);
              A.store.Int32(ptr + 1500 + 32 + 204 + 32 + 12, 0);
              A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 29, false);
              A.store.Int32(ptr + 1500 + 32 + 204 + 32 + 16, 0);
              A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 30, false);
              A.store.Int32(ptr + 1500 + 32 + 204 + 32 + 20, 0);
              A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 31, false);
              A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 24, false);
              A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 32, false);
              A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 25, false);
            } else {
              A.store.Bool(ptr + 1500 + 32 + 204 + 66, true);

              if (typeof x["ProxySettings"]["Manual"]["SOCKS"]["Host"] === "undefined") {
                A.store.Bool(ptr + 1500 + 32 + 204 + 0 + 28, false);
                A.store.Ref(ptr + 1500 + 32 + 204 + 0 + 0, undefined);
                A.store.Ref(ptr + 1500 + 32 + 204 + 0 + 4, undefined);
                A.store.Ref(ptr + 1500 + 32 + 204 + 0 + 8, undefined);
                A.store.Ref(ptr + 1500 + 32 + 204 + 0 + 12, undefined);
                A.store.Ref(ptr + 1500 + 32 + 204 + 0 + 16, undefined);
                A.store.Ref(ptr + 1500 + 32 + 204 + 0 + 20, undefined);
                A.store.Bool(ptr + 1500 + 32 + 204 + 0 + 26, false);
                A.store.Bool(ptr + 1500 + 32 + 204 + 0 + 24, false);
                A.store.Bool(ptr + 1500 + 32 + 204 + 0 + 27, false);
                A.store.Bool(ptr + 1500 + 32 + 204 + 0 + 25, false);
              } else {
                A.store.Bool(ptr + 1500 + 32 + 204 + 0 + 28, true);
                A.store.Ref(ptr + 1500 + 32 + 204 + 0 + 0, x["ProxySettings"]["Manual"]["SOCKS"]["Host"]["Active"]);
                A.store.Ref(ptr + 1500 + 32 + 204 + 0 + 4, x["ProxySettings"]["Manual"]["SOCKS"]["Host"]["Effective"]);
                A.store.Ref(ptr + 1500 + 32 + 204 + 0 + 8, x["ProxySettings"]["Manual"]["SOCKS"]["Host"]["UserPolicy"]);
                A.store.Ref(
                  ptr + 1500 + 32 + 204 + 0 + 12,
                  x["ProxySettings"]["Manual"]["SOCKS"]["Host"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 1500 + 32 + 204 + 0 + 16,
                  x["ProxySettings"]["Manual"]["SOCKS"]["Host"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 1500 + 32 + 204 + 0 + 20,
                  x["ProxySettings"]["Manual"]["SOCKS"]["Host"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 204 + 0 + 26,
                  "UserEditable" in x["ProxySettings"]["Manual"]["SOCKS"]["Host"] ? true : false
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 204 + 0 + 24,
                  x["ProxySettings"]["Manual"]["SOCKS"]["Host"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 204 + 0 + 27,
                  "DeviceEditable" in x["ProxySettings"]["Manual"]["SOCKS"]["Host"] ? true : false
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 204 + 0 + 25,
                  x["ProxySettings"]["Manual"]["SOCKS"]["Host"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["ProxySettings"]["Manual"]["SOCKS"]["Port"] === "undefined") {
                A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 33, false);
                A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 26, false);
                A.store.Int32(ptr + 1500 + 32 + 204 + 32 + 0, 0);
                A.store.Ref(ptr + 1500 + 32 + 204 + 32 + 4, undefined);
                A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 27, false);
                A.store.Int32(ptr + 1500 + 32 + 204 + 32 + 8, 0);
                A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 28, false);
                A.store.Int32(ptr + 1500 + 32 + 204 + 32 + 12, 0);
                A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 29, false);
                A.store.Int32(ptr + 1500 + 32 + 204 + 32 + 16, 0);
                A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 30, false);
                A.store.Int32(ptr + 1500 + 32 + 204 + 32 + 20, 0);
                A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 31, false);
                A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 24, false);
                A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 32, false);
                A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 25, false);
              } else {
                A.store.Bool(ptr + 1500 + 32 + 204 + 32 + 33, true);
                A.store.Bool(
                  ptr + 1500 + 32 + 204 + 32 + 26,
                  "Active" in x["ProxySettings"]["Manual"]["SOCKS"]["Port"] ? true : false
                );
                A.store.Int32(
                  ptr + 1500 + 32 + 204 + 32 + 0,
                  x["ProxySettings"]["Manual"]["SOCKS"]["Port"]["Active"] === undefined
                    ? 0
                    : (x["ProxySettings"]["Manual"]["SOCKS"]["Port"]["Active"] as number)
                );
                A.store.Ref(ptr + 1500 + 32 + 204 + 32 + 4, x["ProxySettings"]["Manual"]["SOCKS"]["Port"]["Effective"]);
                A.store.Bool(
                  ptr + 1500 + 32 + 204 + 32 + 27,
                  "UserPolicy" in x["ProxySettings"]["Manual"]["SOCKS"]["Port"] ? true : false
                );
                A.store.Int32(
                  ptr + 1500 + 32 + 204 + 32 + 8,
                  x["ProxySettings"]["Manual"]["SOCKS"]["Port"]["UserPolicy"] === undefined
                    ? 0
                    : (x["ProxySettings"]["Manual"]["SOCKS"]["Port"]["UserPolicy"] as number)
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 204 + 32 + 28,
                  "DevicePolicy" in x["ProxySettings"]["Manual"]["SOCKS"]["Port"] ? true : false
                );
                A.store.Int32(
                  ptr + 1500 + 32 + 204 + 32 + 12,
                  x["ProxySettings"]["Manual"]["SOCKS"]["Port"]["DevicePolicy"] === undefined
                    ? 0
                    : (x["ProxySettings"]["Manual"]["SOCKS"]["Port"]["DevicePolicy"] as number)
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 204 + 32 + 29,
                  "UserSetting" in x["ProxySettings"]["Manual"]["SOCKS"]["Port"] ? true : false
                );
                A.store.Int32(
                  ptr + 1500 + 32 + 204 + 32 + 16,
                  x["ProxySettings"]["Manual"]["SOCKS"]["Port"]["UserSetting"] === undefined
                    ? 0
                    : (x["ProxySettings"]["Manual"]["SOCKS"]["Port"]["UserSetting"] as number)
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 204 + 32 + 30,
                  "SharedSetting" in x["ProxySettings"]["Manual"]["SOCKS"]["Port"] ? true : false
                );
                A.store.Int32(
                  ptr + 1500 + 32 + 204 + 32 + 20,
                  x["ProxySettings"]["Manual"]["SOCKS"]["Port"]["SharedSetting"] === undefined
                    ? 0
                    : (x["ProxySettings"]["Manual"]["SOCKS"]["Port"]["SharedSetting"] as number)
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 204 + 32 + 31,
                  "UserEditable" in x["ProxySettings"]["Manual"]["SOCKS"]["Port"] ? true : false
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 204 + 32 + 24,
                  x["ProxySettings"]["Manual"]["SOCKS"]["Port"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 204 + 32 + 32,
                  "DeviceEditable" in x["ProxySettings"]["Manual"]["SOCKS"]["Port"] ? true : false
                );
                A.store.Bool(
                  ptr + 1500 + 32 + 204 + 32 + 25,
                  x["ProxySettings"]["Manual"]["SOCKS"]["Port"]["DeviceEditable"] ? true : false
                );
              }
            }
          }

          if (typeof x["ProxySettings"]["ExcludeDomains"] === "undefined") {
            A.store.Bool(ptr + 1500 + 304 + 28, false);
            A.store.Ref(ptr + 1500 + 304 + 0, undefined);
            A.store.Ref(ptr + 1500 + 304 + 4, undefined);
            A.store.Ref(ptr + 1500 + 304 + 8, undefined);
            A.store.Ref(ptr + 1500 + 304 + 12, undefined);
            A.store.Ref(ptr + 1500 + 304 + 16, undefined);
            A.store.Ref(ptr + 1500 + 304 + 20, undefined);
            A.store.Bool(ptr + 1500 + 304 + 26, false);
            A.store.Bool(ptr + 1500 + 304 + 24, false);
            A.store.Bool(ptr + 1500 + 304 + 27, false);
            A.store.Bool(ptr + 1500 + 304 + 25, false);
          } else {
            A.store.Bool(ptr + 1500 + 304 + 28, true);
            A.store.Ref(ptr + 1500 + 304 + 0, x["ProxySettings"]["ExcludeDomains"]["Active"]);
            A.store.Ref(ptr + 1500 + 304 + 4, x["ProxySettings"]["ExcludeDomains"]["Effective"]);
            A.store.Ref(ptr + 1500 + 304 + 8, x["ProxySettings"]["ExcludeDomains"]["UserPolicy"]);
            A.store.Ref(ptr + 1500 + 304 + 12, x["ProxySettings"]["ExcludeDomains"]["DevicePolicy"]);
            A.store.Ref(ptr + 1500 + 304 + 16, x["ProxySettings"]["ExcludeDomains"]["UserSetting"]);
            A.store.Ref(ptr + 1500 + 304 + 20, x["ProxySettings"]["ExcludeDomains"]["SharedSetting"]);
            A.store.Bool(ptr + 1500 + 304 + 26, "UserEditable" in x["ProxySettings"]["ExcludeDomains"] ? true : false);
            A.store.Bool(ptr + 1500 + 304 + 24, x["ProxySettings"]["ExcludeDomains"]["UserEditable"] ? true : false);
            A.store.Bool(
              ptr + 1500 + 304 + 27,
              "DeviceEditable" in x["ProxySettings"]["ExcludeDomains"] ? true : false
            );
            A.store.Bool(ptr + 1500 + 304 + 25, x["ProxySettings"]["ExcludeDomains"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["ProxySettings"]["PAC"] === "undefined") {
            A.store.Bool(ptr + 1500 + 336 + 28, false);
            A.store.Ref(ptr + 1500 + 336 + 0, undefined);
            A.store.Ref(ptr + 1500 + 336 + 4, undefined);
            A.store.Ref(ptr + 1500 + 336 + 8, undefined);
            A.store.Ref(ptr + 1500 + 336 + 12, undefined);
            A.store.Ref(ptr + 1500 + 336 + 16, undefined);
            A.store.Ref(ptr + 1500 + 336 + 20, undefined);
            A.store.Bool(ptr + 1500 + 336 + 26, false);
            A.store.Bool(ptr + 1500 + 336 + 24, false);
            A.store.Bool(ptr + 1500 + 336 + 27, false);
            A.store.Bool(ptr + 1500 + 336 + 25, false);
          } else {
            A.store.Bool(ptr + 1500 + 336 + 28, true);
            A.store.Ref(ptr + 1500 + 336 + 0, x["ProxySettings"]["PAC"]["Active"]);
            A.store.Ref(ptr + 1500 + 336 + 4, x["ProxySettings"]["PAC"]["Effective"]);
            A.store.Ref(ptr + 1500 + 336 + 8, x["ProxySettings"]["PAC"]["UserPolicy"]);
            A.store.Ref(ptr + 1500 + 336 + 12, x["ProxySettings"]["PAC"]["DevicePolicy"]);
            A.store.Ref(ptr + 1500 + 336 + 16, x["ProxySettings"]["PAC"]["UserSetting"]);
            A.store.Ref(ptr + 1500 + 336 + 20, x["ProxySettings"]["PAC"]["SharedSetting"]);
            A.store.Bool(ptr + 1500 + 336 + 26, "UserEditable" in x["ProxySettings"]["PAC"] ? true : false);
            A.store.Bool(ptr + 1500 + 336 + 24, x["ProxySettings"]["PAC"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1500 + 336 + 27, "DeviceEditable" in x["ProxySettings"]["PAC"] ? true : false);
            A.store.Bool(ptr + 1500 + 336 + 25, x["ProxySettings"]["PAC"]["DeviceEditable"] ? true : false);
          }
        }
        A.store.Bool(ptr + 6508, "RestrictedConnectivity" in x ? true : false);
        A.store.Bool(ptr + 1866, x["RestrictedConnectivity"] ? true : false);

        if (typeof x["StaticIPConfig"] === "undefined") {
          A.store.Bool(ptr + 1868 + 193, false);

          A.store.Bool(ptr + 1868 + 0 + 28, false);
          A.store.Ref(ptr + 1868 + 0 + 0, undefined);
          A.store.Ref(ptr + 1868 + 0 + 4, undefined);
          A.store.Ref(ptr + 1868 + 0 + 8, undefined);
          A.store.Ref(ptr + 1868 + 0 + 12, undefined);
          A.store.Ref(ptr + 1868 + 0 + 16, undefined);
          A.store.Ref(ptr + 1868 + 0 + 20, undefined);
          A.store.Bool(ptr + 1868 + 0 + 26, false);
          A.store.Bool(ptr + 1868 + 0 + 24, false);
          A.store.Bool(ptr + 1868 + 0 + 27, false);
          A.store.Bool(ptr + 1868 + 0 + 25, false);

          A.store.Bool(ptr + 1868 + 32 + 28, false);
          A.store.Ref(ptr + 1868 + 32 + 0, undefined);
          A.store.Ref(ptr + 1868 + 32 + 4, undefined);
          A.store.Ref(ptr + 1868 + 32 + 8, undefined);
          A.store.Ref(ptr + 1868 + 32 + 12, undefined);
          A.store.Ref(ptr + 1868 + 32 + 16, undefined);
          A.store.Ref(ptr + 1868 + 32 + 20, undefined);
          A.store.Bool(ptr + 1868 + 32 + 26, false);
          A.store.Bool(ptr + 1868 + 32 + 24, false);
          A.store.Bool(ptr + 1868 + 32 + 27, false);
          A.store.Bool(ptr + 1868 + 32 + 25, false);

          A.store.Bool(ptr + 1868 + 64 + 28, false);
          A.store.Ref(ptr + 1868 + 64 + 0, undefined);
          A.store.Ref(ptr + 1868 + 64 + 4, undefined);
          A.store.Ref(ptr + 1868 + 64 + 8, undefined);
          A.store.Ref(ptr + 1868 + 64 + 12, undefined);
          A.store.Ref(ptr + 1868 + 64 + 16, undefined);
          A.store.Ref(ptr + 1868 + 64 + 20, undefined);
          A.store.Bool(ptr + 1868 + 64 + 26, false);
          A.store.Bool(ptr + 1868 + 64 + 24, false);
          A.store.Bool(ptr + 1868 + 64 + 27, false);
          A.store.Bool(ptr + 1868 + 64 + 25, false);

          A.store.Bool(ptr + 1868 + 96 + 33, false);
          A.store.Bool(ptr + 1868 + 96 + 26, false);
          A.store.Int32(ptr + 1868 + 96 + 0, 0);
          A.store.Ref(ptr + 1868 + 96 + 4, undefined);
          A.store.Bool(ptr + 1868 + 96 + 27, false);
          A.store.Int32(ptr + 1868 + 96 + 8, 0);
          A.store.Bool(ptr + 1868 + 96 + 28, false);
          A.store.Int32(ptr + 1868 + 96 + 12, 0);
          A.store.Bool(ptr + 1868 + 96 + 29, false);
          A.store.Int32(ptr + 1868 + 96 + 16, 0);
          A.store.Bool(ptr + 1868 + 96 + 30, false);
          A.store.Int32(ptr + 1868 + 96 + 20, 0);
          A.store.Bool(ptr + 1868 + 96 + 31, false);
          A.store.Bool(ptr + 1868 + 96 + 24, false);
          A.store.Bool(ptr + 1868 + 96 + 32, false);
          A.store.Bool(ptr + 1868 + 96 + 25, false);

          A.store.Bool(ptr + 1868 + 132 + 28, false);
          A.store.Ref(ptr + 1868 + 132 + 0, undefined);
          A.store.Ref(ptr + 1868 + 132 + 4, undefined);
          A.store.Ref(ptr + 1868 + 132 + 8, undefined);
          A.store.Ref(ptr + 1868 + 132 + 12, undefined);
          A.store.Ref(ptr + 1868 + 132 + 16, undefined);
          A.store.Ref(ptr + 1868 + 132 + 20, undefined);
          A.store.Bool(ptr + 1868 + 132 + 26, false);
          A.store.Bool(ptr + 1868 + 132 + 24, false);
          A.store.Bool(ptr + 1868 + 132 + 27, false);
          A.store.Bool(ptr + 1868 + 132 + 25, false);

          A.store.Bool(ptr + 1868 + 164 + 28, false);
          A.store.Ref(ptr + 1868 + 164 + 0, undefined);
          A.store.Ref(ptr + 1868 + 164 + 4, undefined);
          A.store.Ref(ptr + 1868 + 164 + 8, undefined);
          A.store.Ref(ptr + 1868 + 164 + 12, undefined);
          A.store.Ref(ptr + 1868 + 164 + 16, undefined);
          A.store.Ref(ptr + 1868 + 164 + 20, undefined);
          A.store.Bool(ptr + 1868 + 164 + 26, false);
          A.store.Bool(ptr + 1868 + 164 + 24, false);
          A.store.Bool(ptr + 1868 + 164 + 27, false);
          A.store.Bool(ptr + 1868 + 164 + 25, false);
        } else {
          A.store.Bool(ptr + 1868 + 193, true);

          if (typeof x["StaticIPConfig"]["Gateway"] === "undefined") {
            A.store.Bool(ptr + 1868 + 0 + 28, false);
            A.store.Ref(ptr + 1868 + 0 + 0, undefined);
            A.store.Ref(ptr + 1868 + 0 + 4, undefined);
            A.store.Ref(ptr + 1868 + 0 + 8, undefined);
            A.store.Ref(ptr + 1868 + 0 + 12, undefined);
            A.store.Ref(ptr + 1868 + 0 + 16, undefined);
            A.store.Ref(ptr + 1868 + 0 + 20, undefined);
            A.store.Bool(ptr + 1868 + 0 + 26, false);
            A.store.Bool(ptr + 1868 + 0 + 24, false);
            A.store.Bool(ptr + 1868 + 0 + 27, false);
            A.store.Bool(ptr + 1868 + 0 + 25, false);
          } else {
            A.store.Bool(ptr + 1868 + 0 + 28, true);
            A.store.Ref(ptr + 1868 + 0 + 0, x["StaticIPConfig"]["Gateway"]["Active"]);
            A.store.Ref(ptr + 1868 + 0 + 4, x["StaticIPConfig"]["Gateway"]["Effective"]);
            A.store.Ref(ptr + 1868 + 0 + 8, x["StaticIPConfig"]["Gateway"]["UserPolicy"]);
            A.store.Ref(ptr + 1868 + 0 + 12, x["StaticIPConfig"]["Gateway"]["DevicePolicy"]);
            A.store.Ref(ptr + 1868 + 0 + 16, x["StaticIPConfig"]["Gateway"]["UserSetting"]);
            A.store.Ref(ptr + 1868 + 0 + 20, x["StaticIPConfig"]["Gateway"]["SharedSetting"]);
            A.store.Bool(ptr + 1868 + 0 + 26, "UserEditable" in x["StaticIPConfig"]["Gateway"] ? true : false);
            A.store.Bool(ptr + 1868 + 0 + 24, x["StaticIPConfig"]["Gateway"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1868 + 0 + 27, "DeviceEditable" in x["StaticIPConfig"]["Gateway"] ? true : false);
            A.store.Bool(ptr + 1868 + 0 + 25, x["StaticIPConfig"]["Gateway"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["StaticIPConfig"]["IPAddress"] === "undefined") {
            A.store.Bool(ptr + 1868 + 32 + 28, false);
            A.store.Ref(ptr + 1868 + 32 + 0, undefined);
            A.store.Ref(ptr + 1868 + 32 + 4, undefined);
            A.store.Ref(ptr + 1868 + 32 + 8, undefined);
            A.store.Ref(ptr + 1868 + 32 + 12, undefined);
            A.store.Ref(ptr + 1868 + 32 + 16, undefined);
            A.store.Ref(ptr + 1868 + 32 + 20, undefined);
            A.store.Bool(ptr + 1868 + 32 + 26, false);
            A.store.Bool(ptr + 1868 + 32 + 24, false);
            A.store.Bool(ptr + 1868 + 32 + 27, false);
            A.store.Bool(ptr + 1868 + 32 + 25, false);
          } else {
            A.store.Bool(ptr + 1868 + 32 + 28, true);
            A.store.Ref(ptr + 1868 + 32 + 0, x["StaticIPConfig"]["IPAddress"]["Active"]);
            A.store.Ref(ptr + 1868 + 32 + 4, x["StaticIPConfig"]["IPAddress"]["Effective"]);
            A.store.Ref(ptr + 1868 + 32 + 8, x["StaticIPConfig"]["IPAddress"]["UserPolicy"]);
            A.store.Ref(ptr + 1868 + 32 + 12, x["StaticIPConfig"]["IPAddress"]["DevicePolicy"]);
            A.store.Ref(ptr + 1868 + 32 + 16, x["StaticIPConfig"]["IPAddress"]["UserSetting"]);
            A.store.Ref(ptr + 1868 + 32 + 20, x["StaticIPConfig"]["IPAddress"]["SharedSetting"]);
            A.store.Bool(ptr + 1868 + 32 + 26, "UserEditable" in x["StaticIPConfig"]["IPAddress"] ? true : false);
            A.store.Bool(ptr + 1868 + 32 + 24, x["StaticIPConfig"]["IPAddress"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1868 + 32 + 27, "DeviceEditable" in x["StaticIPConfig"]["IPAddress"] ? true : false);
            A.store.Bool(ptr + 1868 + 32 + 25, x["StaticIPConfig"]["IPAddress"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["StaticIPConfig"]["NameServers"] === "undefined") {
            A.store.Bool(ptr + 1868 + 64 + 28, false);
            A.store.Ref(ptr + 1868 + 64 + 0, undefined);
            A.store.Ref(ptr + 1868 + 64 + 4, undefined);
            A.store.Ref(ptr + 1868 + 64 + 8, undefined);
            A.store.Ref(ptr + 1868 + 64 + 12, undefined);
            A.store.Ref(ptr + 1868 + 64 + 16, undefined);
            A.store.Ref(ptr + 1868 + 64 + 20, undefined);
            A.store.Bool(ptr + 1868 + 64 + 26, false);
            A.store.Bool(ptr + 1868 + 64 + 24, false);
            A.store.Bool(ptr + 1868 + 64 + 27, false);
            A.store.Bool(ptr + 1868 + 64 + 25, false);
          } else {
            A.store.Bool(ptr + 1868 + 64 + 28, true);
            A.store.Ref(ptr + 1868 + 64 + 0, x["StaticIPConfig"]["NameServers"]["Active"]);
            A.store.Ref(ptr + 1868 + 64 + 4, x["StaticIPConfig"]["NameServers"]["Effective"]);
            A.store.Ref(ptr + 1868 + 64 + 8, x["StaticIPConfig"]["NameServers"]["UserPolicy"]);
            A.store.Ref(ptr + 1868 + 64 + 12, x["StaticIPConfig"]["NameServers"]["DevicePolicy"]);
            A.store.Ref(ptr + 1868 + 64 + 16, x["StaticIPConfig"]["NameServers"]["UserSetting"]);
            A.store.Ref(ptr + 1868 + 64 + 20, x["StaticIPConfig"]["NameServers"]["SharedSetting"]);
            A.store.Bool(ptr + 1868 + 64 + 26, "UserEditable" in x["StaticIPConfig"]["NameServers"] ? true : false);
            A.store.Bool(ptr + 1868 + 64 + 24, x["StaticIPConfig"]["NameServers"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1868 + 64 + 27, "DeviceEditable" in x["StaticIPConfig"]["NameServers"] ? true : false);
            A.store.Bool(ptr + 1868 + 64 + 25, x["StaticIPConfig"]["NameServers"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["StaticIPConfig"]["RoutingPrefix"] === "undefined") {
            A.store.Bool(ptr + 1868 + 96 + 33, false);
            A.store.Bool(ptr + 1868 + 96 + 26, false);
            A.store.Int32(ptr + 1868 + 96 + 0, 0);
            A.store.Ref(ptr + 1868 + 96 + 4, undefined);
            A.store.Bool(ptr + 1868 + 96 + 27, false);
            A.store.Int32(ptr + 1868 + 96 + 8, 0);
            A.store.Bool(ptr + 1868 + 96 + 28, false);
            A.store.Int32(ptr + 1868 + 96 + 12, 0);
            A.store.Bool(ptr + 1868 + 96 + 29, false);
            A.store.Int32(ptr + 1868 + 96 + 16, 0);
            A.store.Bool(ptr + 1868 + 96 + 30, false);
            A.store.Int32(ptr + 1868 + 96 + 20, 0);
            A.store.Bool(ptr + 1868 + 96 + 31, false);
            A.store.Bool(ptr + 1868 + 96 + 24, false);
            A.store.Bool(ptr + 1868 + 96 + 32, false);
            A.store.Bool(ptr + 1868 + 96 + 25, false);
          } else {
            A.store.Bool(ptr + 1868 + 96 + 33, true);
            A.store.Bool(ptr + 1868 + 96 + 26, "Active" in x["StaticIPConfig"]["RoutingPrefix"] ? true : false);
            A.store.Int32(
              ptr + 1868 + 96 + 0,
              x["StaticIPConfig"]["RoutingPrefix"]["Active"] === undefined
                ? 0
                : (x["StaticIPConfig"]["RoutingPrefix"]["Active"] as number)
            );
            A.store.Ref(ptr + 1868 + 96 + 4, x["StaticIPConfig"]["RoutingPrefix"]["Effective"]);
            A.store.Bool(ptr + 1868 + 96 + 27, "UserPolicy" in x["StaticIPConfig"]["RoutingPrefix"] ? true : false);
            A.store.Int32(
              ptr + 1868 + 96 + 8,
              x["StaticIPConfig"]["RoutingPrefix"]["UserPolicy"] === undefined
                ? 0
                : (x["StaticIPConfig"]["RoutingPrefix"]["UserPolicy"] as number)
            );
            A.store.Bool(ptr + 1868 + 96 + 28, "DevicePolicy" in x["StaticIPConfig"]["RoutingPrefix"] ? true : false);
            A.store.Int32(
              ptr + 1868 + 96 + 12,
              x["StaticIPConfig"]["RoutingPrefix"]["DevicePolicy"] === undefined
                ? 0
                : (x["StaticIPConfig"]["RoutingPrefix"]["DevicePolicy"] as number)
            );
            A.store.Bool(ptr + 1868 + 96 + 29, "UserSetting" in x["StaticIPConfig"]["RoutingPrefix"] ? true : false);
            A.store.Int32(
              ptr + 1868 + 96 + 16,
              x["StaticIPConfig"]["RoutingPrefix"]["UserSetting"] === undefined
                ? 0
                : (x["StaticIPConfig"]["RoutingPrefix"]["UserSetting"] as number)
            );
            A.store.Bool(ptr + 1868 + 96 + 30, "SharedSetting" in x["StaticIPConfig"]["RoutingPrefix"] ? true : false);
            A.store.Int32(
              ptr + 1868 + 96 + 20,
              x["StaticIPConfig"]["RoutingPrefix"]["SharedSetting"] === undefined
                ? 0
                : (x["StaticIPConfig"]["RoutingPrefix"]["SharedSetting"] as number)
            );
            A.store.Bool(ptr + 1868 + 96 + 31, "UserEditable" in x["StaticIPConfig"]["RoutingPrefix"] ? true : false);
            A.store.Bool(ptr + 1868 + 96 + 24, x["StaticIPConfig"]["RoutingPrefix"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1868 + 96 + 32, "DeviceEditable" in x["StaticIPConfig"]["RoutingPrefix"] ? true : false);
            A.store.Bool(ptr + 1868 + 96 + 25, x["StaticIPConfig"]["RoutingPrefix"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["StaticIPConfig"]["Type"] === "undefined") {
            A.store.Bool(ptr + 1868 + 132 + 28, false);
            A.store.Ref(ptr + 1868 + 132 + 0, undefined);
            A.store.Ref(ptr + 1868 + 132 + 4, undefined);
            A.store.Ref(ptr + 1868 + 132 + 8, undefined);
            A.store.Ref(ptr + 1868 + 132 + 12, undefined);
            A.store.Ref(ptr + 1868 + 132 + 16, undefined);
            A.store.Ref(ptr + 1868 + 132 + 20, undefined);
            A.store.Bool(ptr + 1868 + 132 + 26, false);
            A.store.Bool(ptr + 1868 + 132 + 24, false);
            A.store.Bool(ptr + 1868 + 132 + 27, false);
            A.store.Bool(ptr + 1868 + 132 + 25, false);
          } else {
            A.store.Bool(ptr + 1868 + 132 + 28, true);
            A.store.Ref(ptr + 1868 + 132 + 0, x["StaticIPConfig"]["Type"]["Active"]);
            A.store.Ref(ptr + 1868 + 132 + 4, x["StaticIPConfig"]["Type"]["Effective"]);
            A.store.Ref(ptr + 1868 + 132 + 8, x["StaticIPConfig"]["Type"]["UserPolicy"]);
            A.store.Ref(ptr + 1868 + 132 + 12, x["StaticIPConfig"]["Type"]["DevicePolicy"]);
            A.store.Ref(ptr + 1868 + 132 + 16, x["StaticIPConfig"]["Type"]["UserSetting"]);
            A.store.Ref(ptr + 1868 + 132 + 20, x["StaticIPConfig"]["Type"]["SharedSetting"]);
            A.store.Bool(ptr + 1868 + 132 + 26, "UserEditable" in x["StaticIPConfig"]["Type"] ? true : false);
            A.store.Bool(ptr + 1868 + 132 + 24, x["StaticIPConfig"]["Type"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 1868 + 132 + 27, "DeviceEditable" in x["StaticIPConfig"]["Type"] ? true : false);
            A.store.Bool(ptr + 1868 + 132 + 25, x["StaticIPConfig"]["Type"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["StaticIPConfig"]["WebProxyAutoDiscoveryUrl"] === "undefined") {
            A.store.Bool(ptr + 1868 + 164 + 28, false);
            A.store.Ref(ptr + 1868 + 164 + 0, undefined);
            A.store.Ref(ptr + 1868 + 164 + 4, undefined);
            A.store.Ref(ptr + 1868 + 164 + 8, undefined);
            A.store.Ref(ptr + 1868 + 164 + 12, undefined);
            A.store.Ref(ptr + 1868 + 164 + 16, undefined);
            A.store.Ref(ptr + 1868 + 164 + 20, undefined);
            A.store.Bool(ptr + 1868 + 164 + 26, false);
            A.store.Bool(ptr + 1868 + 164 + 24, false);
            A.store.Bool(ptr + 1868 + 164 + 27, false);
            A.store.Bool(ptr + 1868 + 164 + 25, false);
          } else {
            A.store.Bool(ptr + 1868 + 164 + 28, true);
            A.store.Ref(ptr + 1868 + 164 + 0, x["StaticIPConfig"]["WebProxyAutoDiscoveryUrl"]["Active"]);
            A.store.Ref(ptr + 1868 + 164 + 4, x["StaticIPConfig"]["WebProxyAutoDiscoveryUrl"]["Effective"]);
            A.store.Ref(ptr + 1868 + 164 + 8, x["StaticIPConfig"]["WebProxyAutoDiscoveryUrl"]["UserPolicy"]);
            A.store.Ref(ptr + 1868 + 164 + 12, x["StaticIPConfig"]["WebProxyAutoDiscoveryUrl"]["DevicePolicy"]);
            A.store.Ref(ptr + 1868 + 164 + 16, x["StaticIPConfig"]["WebProxyAutoDiscoveryUrl"]["UserSetting"]);
            A.store.Ref(ptr + 1868 + 164 + 20, x["StaticIPConfig"]["WebProxyAutoDiscoveryUrl"]["SharedSetting"]);
            A.store.Bool(
              ptr + 1868 + 164 + 26,
              "UserEditable" in x["StaticIPConfig"]["WebProxyAutoDiscoveryUrl"] ? true : false
            );
            A.store.Bool(
              ptr + 1868 + 164 + 24,
              x["StaticIPConfig"]["WebProxyAutoDiscoveryUrl"]["UserEditable"] ? true : false
            );
            A.store.Bool(
              ptr + 1868 + 164 + 27,
              "DeviceEditable" in x["StaticIPConfig"]["WebProxyAutoDiscoveryUrl"] ? true : false
            );
            A.store.Bool(
              ptr + 1868 + 164 + 25,
              x["StaticIPConfig"]["WebProxyAutoDiscoveryUrl"]["DeviceEditable"] ? true : false
            );
          }
        }

        if (typeof x["SavedIPConfig"] === "undefined") {
          A.store.Bool(ptr + 2064 + 37, false);
          A.store.Ref(ptr + 2064 + 0, undefined);
          A.store.Ref(ptr + 2064 + 4, undefined);
          A.store.Ref(ptr + 2064 + 8, undefined);
          A.store.Ref(ptr + 2064 + 12, undefined);
          A.store.Ref(ptr + 2064 + 16, undefined);
          A.store.Ref(ptr + 2064 + 20, undefined);
          A.store.Bool(ptr + 2064 + 36, false);
          A.store.Int32(ptr + 2064 + 24, 0);
          A.store.Ref(ptr + 2064 + 28, undefined);
          A.store.Ref(ptr + 2064 + 32, undefined);
        } else {
          A.store.Bool(ptr + 2064 + 37, true);
          A.store.Ref(ptr + 2064 + 0, x["SavedIPConfig"]["Gateway"]);
          A.store.Ref(ptr + 2064 + 4, x["SavedIPConfig"]["IPAddress"]);
          A.store.Ref(ptr + 2064 + 8, x["SavedIPConfig"]["ExcludedRoutes"]);
          A.store.Ref(ptr + 2064 + 12, x["SavedIPConfig"]["IncludedRoutes"]);
          A.store.Ref(ptr + 2064 + 16, x["SavedIPConfig"]["NameServers"]);
          A.store.Ref(ptr + 2064 + 20, x["SavedIPConfig"]["SearchDomains"]);
          A.store.Bool(ptr + 2064 + 36, "RoutingPrefix" in x["SavedIPConfig"] ? true : false);
          A.store.Int32(
            ptr + 2064 + 24,
            x["SavedIPConfig"]["RoutingPrefix"] === undefined ? 0 : (x["SavedIPConfig"]["RoutingPrefix"] as number)
          );
          A.store.Ref(ptr + 2064 + 28, x["SavedIPConfig"]["Type"]);
          A.store.Ref(ptr + 2064 + 32, x["SavedIPConfig"]["WebProxyAutoDiscoveryUrl"]);
        }
        A.store.Ref(ptr + 2104, x["Source"]);

        if (typeof x["Tether"] === "undefined") {
          A.store.Bool(ptr + 2108 + 19, false);
          A.store.Bool(ptr + 2108 + 16, false);
          A.store.Int32(ptr + 2108 + 0, 0);
          A.store.Ref(ptr + 2108 + 4, undefined);
          A.store.Bool(ptr + 2108 + 17, false);
          A.store.Bool(ptr + 2108 + 8, false);
          A.store.Bool(ptr + 2108 + 18, false);
          A.store.Int32(ptr + 2108 + 12, 0);
        } else {
          A.store.Bool(ptr + 2108 + 19, true);
          A.store.Bool(ptr + 2108 + 16, "BatteryPercentage" in x["Tether"] ? true : false);
          A.store.Int32(
            ptr + 2108 + 0,
            x["Tether"]["BatteryPercentage"] === undefined ? 0 : (x["Tether"]["BatteryPercentage"] as number)
          );
          A.store.Ref(ptr + 2108 + 4, x["Tether"]["Carrier"]);
          A.store.Bool(ptr + 2108 + 17, "HasConnectedToHost" in x["Tether"] ? true : false);
          A.store.Bool(ptr + 2108 + 8, x["Tether"]["HasConnectedToHost"] ? true : false);
          A.store.Bool(ptr + 2108 + 18, "SignalStrength" in x["Tether"] ? true : false);
          A.store.Int32(
            ptr + 2108 + 12,
            x["Tether"]["SignalStrength"] === undefined ? 0 : (x["Tether"]["SignalStrength"] as number)
          );
        }
        A.store.Enum(
          ptr + 2128,
          ["All", "Cellular", "Ethernet", "Tether", "VPN", "Wireless", "WiFi"].indexOf(x["Type"] as string)
        );

        if (typeof x["VPN"] === "undefined") {
          A.store.Bool(ptr + 2132 + 3345, false);

          A.store.Bool(ptr + 2132 + 0 + 21, false);
          A.store.Bool(ptr + 2132 + 0 + 14, false);
          A.store.Bool(ptr + 2132 + 0 + 0, false);
          A.store.Ref(ptr + 2132 + 0 + 4, undefined);
          A.store.Bool(ptr + 2132 + 0 + 15, false);
          A.store.Bool(ptr + 2132 + 0 + 8, false);
          A.store.Bool(ptr + 2132 + 0 + 16, false);
          A.store.Bool(ptr + 2132 + 0 + 9, false);
          A.store.Bool(ptr + 2132 + 0 + 17, false);
          A.store.Bool(ptr + 2132 + 0 + 10, false);
          A.store.Bool(ptr + 2132 + 0 + 18, false);
          A.store.Bool(ptr + 2132 + 0 + 11, false);
          A.store.Bool(ptr + 2132 + 0 + 19, false);
          A.store.Bool(ptr + 2132 + 0 + 12, false);
          A.store.Bool(ptr + 2132 + 0 + 20, false);
          A.store.Bool(ptr + 2132 + 0 + 13, false);

          A.store.Bool(ptr + 2132 + 24 + 28, false);
          A.store.Ref(ptr + 2132 + 24 + 0, undefined);
          A.store.Ref(ptr + 2132 + 24 + 4, undefined);
          A.store.Ref(ptr + 2132 + 24 + 8, undefined);
          A.store.Ref(ptr + 2132 + 24 + 12, undefined);
          A.store.Ref(ptr + 2132 + 24 + 16, undefined);
          A.store.Ref(ptr + 2132 + 24 + 20, undefined);
          A.store.Bool(ptr + 2132 + 24 + 26, false);
          A.store.Bool(ptr + 2132 + 24 + 24, false);
          A.store.Bool(ptr + 2132 + 24 + 27, false);
          A.store.Bool(ptr + 2132 + 24 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 1562, false);

          A.store.Bool(ptr + 2132 + 56 + 0 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 0 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 0 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 0 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 0 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 0 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 0 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 0 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 0 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 0 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 0 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 32 + 318, false);

          A.store.Bool(ptr + 2132 + 56 + 32 + 0 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 32 + 0 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 0 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 0 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 0 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 0 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 0 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 32 + 0 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 32 + 0 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 32 + 0 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 32 + 0 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 125, false);

          A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 0 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 0 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 0 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 0 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 0 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 0 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 0 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 0 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 0 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 0 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 0 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 32 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 32 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 32 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 32 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 32 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 32 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 32 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 32 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 32 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 32 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 32 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 64 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 64 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 64 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 64 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 64 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 64 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 64 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 64 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 64 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 64 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 64 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 96 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 96 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 96 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 96 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 96 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 96 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 96 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 96 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 96 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 96 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 96 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 32 + 160 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 32 + 160 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 160 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 160 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 160 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 160 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 160 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 32 + 160 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 32 + 160 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 32 + 160 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 32 + 160 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 125, false);

          A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 0 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 0 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 0 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 0 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 0 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 0 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 0 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 0 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 0 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 0 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 0 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 32 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 32 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 32 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 32 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 32 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 32 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 32 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 32 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 32 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 32 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 32 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 64 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 64 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 64 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 64 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 64 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 64 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 64 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 64 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 64 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 64 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 64 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 96 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 96 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 96 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 96 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 96 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 96 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 96 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 96 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 96 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 96 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 96 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 352 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 352 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 352 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 352 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 352 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 352 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 352 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 352 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 352 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 352 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 352 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 384 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 384 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 384 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 384 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 384 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 384 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 384 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 384 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 384 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 384 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 384 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 416 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 416 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 416 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 416 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 416 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 416 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 416 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 416 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 416 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 416 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 416 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 448 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 448 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 448 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 448 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 448 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 448 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 448 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 448 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 448 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 448 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 448 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 480 + 806, false);

          A.store.Bool(ptr + 2132 + 56 + 480 + 0 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 480 + 0 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 0 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 0 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 0 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 0 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 0 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 480 + 0 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 0 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 0 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 0 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 318, false);

          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 0 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 0 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 0 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 0 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 0 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 0 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 0 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 0 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 0 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 0 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 0 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 125, false);

          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 160 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 160 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 160 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 160 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 160 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 160 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 160 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 160 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 160 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 160 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 160 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 125, false);

          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 480 + 352 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 480 + 352 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 352 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 352 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 352 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 352 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 352 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 480 + 352 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 352 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 352 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 352 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 480 + 384 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 480 + 384 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 384 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 384 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 384 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 384 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 384 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 480 + 384 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 384 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 384 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 384 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 480 + 416 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 480 + 416 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 416 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 416 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 416 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 416 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 416 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 480 + 416 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 416 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 416 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 416 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 480 + 448 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 480 + 448 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 448 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 448 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 448 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 448 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 448 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 480 + 448 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 448 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 448 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 448 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 480 + 480 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 480 + 480 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 480 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 480 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 480 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 480 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 480 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 480 + 480 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 480 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 480 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 480 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 480 + 512 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 480 + 512 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 512 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 512 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 512 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 512 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 512 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 480 + 512 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 512 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 512 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 512 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 480 + 544 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 480 + 544 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 544 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 544 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 544 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 544 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 544 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 480 + 544 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 544 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 544 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 544 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 480 + 576 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 480 + 576 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 576 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 576 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 576 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 576 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 576 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 480 + 576 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 576 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 576 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 576 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 21, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 14, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 0, false);
          A.store.Ref(ptr + 2132 + 56 + 480 + 608 + 4, undefined);
          A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 15, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 8, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 16, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 9, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 17, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 10, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 18, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 11, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 19, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 12, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 20, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 13, false);

          A.store.Bool(ptr + 2132 + 56 + 480 + 632 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 480 + 632 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 632 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 632 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 632 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 632 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 632 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 480 + 632 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 632 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 632 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 632 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 480 + 664 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 480 + 664 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 664 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 664 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 664 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 664 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 664 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 480 + 664 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 664 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 664 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 664 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 480 + 696 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 480 + 696 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 696 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 696 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 696 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 696 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 696 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 480 + 696 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 696 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 696 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 696 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 480 + 728 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 480 + 728 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 728 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 728 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 728 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 728 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 480 + 728 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 480 + 728 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 728 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 728 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 728 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 21, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 14, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 0, false);
          A.store.Ref(ptr + 2132 + 56 + 480 + 760 + 4, undefined);
          A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 15, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 8, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 16, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 9, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 17, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 10, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 18, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 11, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 19, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 12, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 20, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 13, false);

          A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 21, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 14, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 0, false);
          A.store.Ref(ptr + 2132 + 56 + 480 + 784 + 4, undefined);
          A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 15, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 8, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 16, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 9, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 17, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 10, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 18, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 11, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 19, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 12, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 20, false);
          A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 13, false);

          A.store.Bool(ptr + 2132 + 56 + 1288 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 1288 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 1288 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 1288 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 1288 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 1288 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 1288 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 1288 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 1288 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 1288 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 1288 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 1320 + 33, false);
          A.store.Bool(ptr + 2132 + 56 + 1320 + 26, false);
          A.store.Int32(ptr + 2132 + 56 + 1320 + 0, 0);
          A.store.Ref(ptr + 2132 + 56 + 1320 + 4, undefined);
          A.store.Bool(ptr + 2132 + 56 + 1320 + 27, false);
          A.store.Int32(ptr + 2132 + 56 + 1320 + 8, 0);
          A.store.Bool(ptr + 2132 + 56 + 1320 + 28, false);
          A.store.Int32(ptr + 2132 + 56 + 1320 + 12, 0);
          A.store.Bool(ptr + 2132 + 56 + 1320 + 29, false);
          A.store.Int32(ptr + 2132 + 56 + 1320 + 16, 0);
          A.store.Bool(ptr + 2132 + 56 + 1320 + 30, false);
          A.store.Int32(ptr + 2132 + 56 + 1320 + 20, 0);
          A.store.Bool(ptr + 2132 + 56 + 1320 + 31, false);
          A.store.Bool(ptr + 2132 + 56 + 1320 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 1320 + 32, false);
          A.store.Bool(ptr + 2132 + 56 + 1320 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 1356 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 1356 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 1356 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 1356 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 1356 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 1356 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 1356 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 1356 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 1356 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 1356 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 1356 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 1388 + 21, false);
          A.store.Bool(ptr + 2132 + 56 + 1388 + 14, false);
          A.store.Bool(ptr + 2132 + 56 + 1388 + 0, false);
          A.store.Ref(ptr + 2132 + 56 + 1388 + 4, undefined);
          A.store.Bool(ptr + 2132 + 56 + 1388 + 15, false);
          A.store.Bool(ptr + 2132 + 56 + 1388 + 8, false);
          A.store.Bool(ptr + 2132 + 56 + 1388 + 16, false);
          A.store.Bool(ptr + 2132 + 56 + 1388 + 9, false);
          A.store.Bool(ptr + 2132 + 56 + 1388 + 17, false);
          A.store.Bool(ptr + 2132 + 56 + 1388 + 10, false);
          A.store.Bool(ptr + 2132 + 56 + 1388 + 18, false);
          A.store.Bool(ptr + 2132 + 56 + 1388 + 11, false);
          A.store.Bool(ptr + 2132 + 56 + 1388 + 19, false);
          A.store.Bool(ptr + 2132 + 56 + 1388 + 12, false);
          A.store.Bool(ptr + 2132 + 56 + 1388 + 20, false);
          A.store.Bool(ptr + 2132 + 56 + 1388 + 13, false);

          A.store.Bool(ptr + 2132 + 56 + 1412 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 1412 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 1412 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 1412 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 1412 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 1412 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 1412 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 1412 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 1412 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 1412 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 1412 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 1444 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 1444 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 1444 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 1444 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 1444 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 1444 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 1444 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 1444 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 1444 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 1444 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 1444 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 1476 + 85, false);

          A.store.Bool(ptr + 2132 + 56 + 1476 + 0 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 1476 + 0 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 1476 + 0 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 1476 + 0 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 1476 + 0 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 1476 + 0 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 1476 + 0 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 1476 + 0 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 1476 + 0 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 1476 + 0 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 1476 + 0 + 25, false);

          A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 21, false);
          A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 14, false);
          A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 0, false);
          A.store.Ref(ptr + 2132 + 56 + 1476 + 32 + 4, undefined);
          A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 15, false);
          A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 8, false);
          A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 16, false);
          A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 9, false);
          A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 17, false);
          A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 10, false);
          A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 18, false);
          A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 11, false);
          A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 19, false);
          A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 12, false);
          A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 20, false);
          A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 13, false);

          A.store.Bool(ptr + 2132 + 56 + 1476 + 56 + 28, false);
          A.store.Ref(ptr + 2132 + 56 + 1476 + 56 + 0, undefined);
          A.store.Ref(ptr + 2132 + 56 + 1476 + 56 + 4, undefined);
          A.store.Ref(ptr + 2132 + 56 + 1476 + 56 + 8, undefined);
          A.store.Ref(ptr + 2132 + 56 + 1476 + 56 + 12, undefined);
          A.store.Ref(ptr + 2132 + 56 + 1476 + 56 + 16, undefined);
          A.store.Ref(ptr + 2132 + 56 + 1476 + 56 + 20, undefined);
          A.store.Bool(ptr + 2132 + 56 + 1476 + 56 + 26, false);
          A.store.Bool(ptr + 2132 + 56 + 1476 + 56 + 24, false);
          A.store.Bool(ptr + 2132 + 56 + 1476 + 56 + 27, false);
          A.store.Bool(ptr + 2132 + 56 + 1476 + 56 + 25, false);

          A.store.Bool(ptr + 2132 + 1620 + 109, false);

          A.store.Bool(ptr + 2132 + 1620 + 0 + 21, false);
          A.store.Bool(ptr + 2132 + 1620 + 0 + 14, false);
          A.store.Bool(ptr + 2132 + 1620 + 0 + 0, false);
          A.store.Ref(ptr + 2132 + 1620 + 0 + 4, undefined);
          A.store.Bool(ptr + 2132 + 1620 + 0 + 15, false);
          A.store.Bool(ptr + 2132 + 1620 + 0 + 8, false);
          A.store.Bool(ptr + 2132 + 1620 + 0 + 16, false);
          A.store.Bool(ptr + 2132 + 1620 + 0 + 9, false);
          A.store.Bool(ptr + 2132 + 1620 + 0 + 17, false);
          A.store.Bool(ptr + 2132 + 1620 + 0 + 10, false);
          A.store.Bool(ptr + 2132 + 1620 + 0 + 18, false);
          A.store.Bool(ptr + 2132 + 1620 + 0 + 11, false);
          A.store.Bool(ptr + 2132 + 1620 + 0 + 19, false);
          A.store.Bool(ptr + 2132 + 1620 + 0 + 12, false);
          A.store.Bool(ptr + 2132 + 1620 + 0 + 20, false);
          A.store.Bool(ptr + 2132 + 1620 + 0 + 13, false);

          A.store.Bool(ptr + 2132 + 1620 + 24 + 28, false);
          A.store.Ref(ptr + 2132 + 1620 + 24 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1620 + 24 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1620 + 24 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1620 + 24 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1620 + 24 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1620 + 24 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1620 + 24 + 26, false);
          A.store.Bool(ptr + 2132 + 1620 + 24 + 24, false);
          A.store.Bool(ptr + 2132 + 1620 + 24 + 27, false);
          A.store.Bool(ptr + 2132 + 1620 + 24 + 25, false);

          A.store.Bool(ptr + 2132 + 1620 + 56 + 21, false);
          A.store.Bool(ptr + 2132 + 1620 + 56 + 14, false);
          A.store.Bool(ptr + 2132 + 1620 + 56 + 0, false);
          A.store.Ref(ptr + 2132 + 1620 + 56 + 4, undefined);
          A.store.Bool(ptr + 2132 + 1620 + 56 + 15, false);
          A.store.Bool(ptr + 2132 + 1620 + 56 + 8, false);
          A.store.Bool(ptr + 2132 + 1620 + 56 + 16, false);
          A.store.Bool(ptr + 2132 + 1620 + 56 + 9, false);
          A.store.Bool(ptr + 2132 + 1620 + 56 + 17, false);
          A.store.Bool(ptr + 2132 + 1620 + 56 + 10, false);
          A.store.Bool(ptr + 2132 + 1620 + 56 + 18, false);
          A.store.Bool(ptr + 2132 + 1620 + 56 + 11, false);
          A.store.Bool(ptr + 2132 + 1620 + 56 + 19, false);
          A.store.Bool(ptr + 2132 + 1620 + 56 + 12, false);
          A.store.Bool(ptr + 2132 + 1620 + 56 + 20, false);
          A.store.Bool(ptr + 2132 + 1620 + 56 + 13, false);

          A.store.Bool(ptr + 2132 + 1620 + 80 + 28, false);
          A.store.Ref(ptr + 2132 + 1620 + 80 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1620 + 80 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1620 + 80 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1620 + 80 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1620 + 80 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1620 + 80 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1620 + 80 + 26, false);
          A.store.Bool(ptr + 2132 + 1620 + 80 + 24, false);
          A.store.Bool(ptr + 2132 + 1620 + 80 + 27, false);
          A.store.Bool(ptr + 2132 + 1620 + 80 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 1542, false);

          A.store.Bool(ptr + 2132 + 1732 + 0 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 0 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 0 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 0 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 0 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 0 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 0 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 0 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 0 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 0 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 0 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 32 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 32 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 32 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 32 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 32 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 32 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 32 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 32 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 32 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 32 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 32 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 64 + 21, false);
          A.store.Bool(ptr + 2132 + 1732 + 64 + 14, false);
          A.store.Bool(ptr + 2132 + 1732 + 64 + 0, false);
          A.store.Ref(ptr + 2132 + 1732 + 64 + 4, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 64 + 15, false);
          A.store.Bool(ptr + 2132 + 1732 + 64 + 8, false);
          A.store.Bool(ptr + 2132 + 1732 + 64 + 16, false);
          A.store.Bool(ptr + 2132 + 1732 + 64 + 9, false);
          A.store.Bool(ptr + 2132 + 1732 + 64 + 17, false);
          A.store.Bool(ptr + 2132 + 1732 + 64 + 10, false);
          A.store.Bool(ptr + 2132 + 1732 + 64 + 18, false);
          A.store.Bool(ptr + 2132 + 1732 + 64 + 11, false);
          A.store.Bool(ptr + 2132 + 1732 + 64 + 19, false);
          A.store.Bool(ptr + 2132 + 1732 + 64 + 12, false);
          A.store.Bool(ptr + 2132 + 1732 + 64 + 20, false);
          A.store.Bool(ptr + 2132 + 1732 + 64 + 13, false);

          A.store.Bool(ptr + 2132 + 1732 + 88 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 88 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 88 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 88 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 88 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 88 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 88 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 88 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 88 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 88 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 88 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 120 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 120 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 120 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 120 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 120 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 120 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 120 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 120 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 120 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 120 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 120 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 152 + 318, false);

          A.store.Bool(ptr + 2132 + 1732 + 152 + 0 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 0 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 0 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 0 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 0 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 0 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 0 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 0 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 0 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 0 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 0 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 125, false);

          A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 0 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 0 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 0 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 0 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 0 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 0 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 0 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 0 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 0 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 0 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 0 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 32 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 32 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 32 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 32 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 32 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 32 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 32 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 32 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 32 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 32 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 32 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 64 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 64 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 64 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 64 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 64 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 64 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 64 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 64 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 64 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 64 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 64 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 96 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 96 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 96 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 96 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 96 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 96 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 96 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 96 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 96 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 96 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 96 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 152 + 160 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 160 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 160 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 160 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 160 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 160 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 160 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 160 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 160 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 160 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 160 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 125, false);

          A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 0 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 0 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 0 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 0 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 0 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 0 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 0 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 0 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 0 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 0 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 0 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 32 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 32 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 32 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 32 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 32 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 32 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 32 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 32 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 32 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 32 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 32 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 64 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 64 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 64 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 64 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 64 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 64 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 64 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 64 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 64 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 64 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 64 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 96 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 96 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 96 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 96 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 96 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 96 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 96 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 96 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 96 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 96 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 96 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 472 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 472 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 472 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 472 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 472 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 472 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 472 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 472 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 472 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 472 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 472 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 504 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 504 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 504 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 504 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 504 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 504 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 504 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 504 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 504 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 504 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 504 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 536 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 536 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 536 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 536 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 536 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 536 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 536 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 536 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 536 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 536 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 536 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 568 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 568 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 568 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 568 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 568 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 568 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 568 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 568 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 568 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 568 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 568 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 600 + 21, false);
          A.store.Bool(ptr + 2132 + 1732 + 600 + 14, false);
          A.store.Bool(ptr + 2132 + 1732 + 600 + 0, false);
          A.store.Ref(ptr + 2132 + 1732 + 600 + 4, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 600 + 15, false);
          A.store.Bool(ptr + 2132 + 1732 + 600 + 8, false);
          A.store.Bool(ptr + 2132 + 1732 + 600 + 16, false);
          A.store.Bool(ptr + 2132 + 1732 + 600 + 9, false);
          A.store.Bool(ptr + 2132 + 1732 + 600 + 17, false);
          A.store.Bool(ptr + 2132 + 1732 + 600 + 10, false);
          A.store.Bool(ptr + 2132 + 1732 + 600 + 18, false);
          A.store.Bool(ptr + 2132 + 1732 + 600 + 11, false);
          A.store.Bool(ptr + 2132 + 1732 + 600 + 19, false);
          A.store.Bool(ptr + 2132 + 1732 + 600 + 12, false);
          A.store.Bool(ptr + 2132 + 1732 + 600 + 20, false);
          A.store.Bool(ptr + 2132 + 1732 + 600 + 13, false);

          A.store.Bool(ptr + 2132 + 1732 + 624 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 624 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 624 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 624 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 624 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 624 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 624 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 624 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 624 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 624 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 624 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 656 + 21, false);
          A.store.Bool(ptr + 2132 + 1732 + 656 + 14, false);
          A.store.Bool(ptr + 2132 + 1732 + 656 + 0, false);
          A.store.Ref(ptr + 2132 + 1732 + 656 + 4, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 656 + 15, false);
          A.store.Bool(ptr + 2132 + 1732 + 656 + 8, false);
          A.store.Bool(ptr + 2132 + 1732 + 656 + 16, false);
          A.store.Bool(ptr + 2132 + 1732 + 656 + 9, false);
          A.store.Bool(ptr + 2132 + 1732 + 656 + 17, false);
          A.store.Bool(ptr + 2132 + 1732 + 656 + 10, false);
          A.store.Bool(ptr + 2132 + 1732 + 656 + 18, false);
          A.store.Bool(ptr + 2132 + 1732 + 656 + 11, false);
          A.store.Bool(ptr + 2132 + 1732 + 656 + 19, false);
          A.store.Bool(ptr + 2132 + 1732 + 656 + 12, false);
          A.store.Bool(ptr + 2132 + 1732 + 656 + 20, false);
          A.store.Bool(ptr + 2132 + 1732 + 656 + 13, false);

          A.store.Bool(ptr + 2132 + 1732 + 680 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 680 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 680 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 680 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 680 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 680 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 680 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 680 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 680 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 680 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 680 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 712 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 712 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 712 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 712 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 712 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 712 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 712 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 712 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 712 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 712 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 712 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 744 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 744 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 744 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 744 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 744 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 744 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 744 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 744 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 744 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 744 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 744 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 776 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 776 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 776 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 776 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 776 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 776 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 776 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 776 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 776 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 776 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 776 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 808 + 33, false);
          A.store.Bool(ptr + 2132 + 1732 + 808 + 26, false);
          A.store.Int32(ptr + 2132 + 1732 + 808 + 0, 0);
          A.store.Ref(ptr + 2132 + 1732 + 808 + 4, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 808 + 27, false);
          A.store.Int32(ptr + 2132 + 1732 + 808 + 8, 0);
          A.store.Bool(ptr + 2132 + 1732 + 808 + 28, false);
          A.store.Int32(ptr + 2132 + 1732 + 808 + 12, 0);
          A.store.Bool(ptr + 2132 + 1732 + 808 + 29, false);
          A.store.Int32(ptr + 2132 + 1732 + 808 + 16, 0);
          A.store.Bool(ptr + 2132 + 1732 + 808 + 30, false);
          A.store.Int32(ptr + 2132 + 1732 + 808 + 20, 0);
          A.store.Bool(ptr + 2132 + 1732 + 808 + 31, false);
          A.store.Bool(ptr + 2132 + 1732 + 808 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 808 + 32, false);
          A.store.Bool(ptr + 2132 + 1732 + 808 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 844 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 844 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 844 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 844 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 844 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 844 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 844 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 844 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 844 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 844 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 844 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 876 + 21, false);
          A.store.Bool(ptr + 2132 + 1732 + 876 + 14, false);
          A.store.Bool(ptr + 2132 + 1732 + 876 + 0, false);
          A.store.Ref(ptr + 2132 + 1732 + 876 + 4, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 876 + 15, false);
          A.store.Bool(ptr + 2132 + 1732 + 876 + 8, false);
          A.store.Bool(ptr + 2132 + 1732 + 876 + 16, false);
          A.store.Bool(ptr + 2132 + 1732 + 876 + 9, false);
          A.store.Bool(ptr + 2132 + 1732 + 876 + 17, false);
          A.store.Bool(ptr + 2132 + 1732 + 876 + 10, false);
          A.store.Bool(ptr + 2132 + 1732 + 876 + 18, false);
          A.store.Bool(ptr + 2132 + 1732 + 876 + 11, false);
          A.store.Bool(ptr + 2132 + 1732 + 876 + 19, false);
          A.store.Bool(ptr + 2132 + 1732 + 876 + 12, false);
          A.store.Bool(ptr + 2132 + 1732 + 876 + 20, false);
          A.store.Bool(ptr + 2132 + 1732 + 876 + 13, false);

          A.store.Bool(ptr + 2132 + 1732 + 900 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 900 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 900 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 900 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 900 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 900 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 900 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 900 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 900 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 900 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 900 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 932 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 932 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 932 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 932 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 932 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 932 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 932 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 932 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 932 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 932 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 932 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 964 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 964 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 964 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 964 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 964 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 964 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 964 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 964 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 964 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 964 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 964 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 996 + 33, false);
          A.store.Bool(ptr + 2132 + 1732 + 996 + 26, false);
          A.store.Int32(ptr + 2132 + 1732 + 996 + 0, 0);
          A.store.Ref(ptr + 2132 + 1732 + 996 + 4, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 996 + 27, false);
          A.store.Int32(ptr + 2132 + 1732 + 996 + 8, 0);
          A.store.Bool(ptr + 2132 + 1732 + 996 + 28, false);
          A.store.Int32(ptr + 2132 + 1732 + 996 + 12, 0);
          A.store.Bool(ptr + 2132 + 1732 + 996 + 29, false);
          A.store.Int32(ptr + 2132 + 1732 + 996 + 16, 0);
          A.store.Bool(ptr + 2132 + 1732 + 996 + 30, false);
          A.store.Int32(ptr + 2132 + 1732 + 996 + 20, 0);
          A.store.Bool(ptr + 2132 + 1732 + 996 + 31, false);
          A.store.Bool(ptr + 2132 + 1732 + 996 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 996 + 32, false);
          A.store.Bool(ptr + 2132 + 1732 + 996 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 1032 + 21, false);
          A.store.Bool(ptr + 2132 + 1732 + 1032 + 14, false);
          A.store.Bool(ptr + 2132 + 1732 + 1032 + 0, false);
          A.store.Ref(ptr + 2132 + 1732 + 1032 + 4, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 1032 + 15, false);
          A.store.Bool(ptr + 2132 + 1732 + 1032 + 8, false);
          A.store.Bool(ptr + 2132 + 1732 + 1032 + 16, false);
          A.store.Bool(ptr + 2132 + 1732 + 1032 + 9, false);
          A.store.Bool(ptr + 2132 + 1732 + 1032 + 17, false);
          A.store.Bool(ptr + 2132 + 1732 + 1032 + 10, false);
          A.store.Bool(ptr + 2132 + 1732 + 1032 + 18, false);
          A.store.Bool(ptr + 2132 + 1732 + 1032 + 11, false);
          A.store.Bool(ptr + 2132 + 1732 + 1032 + 19, false);
          A.store.Bool(ptr + 2132 + 1732 + 1032 + 12, false);
          A.store.Bool(ptr + 2132 + 1732 + 1032 + 20, false);
          A.store.Bool(ptr + 2132 + 1732 + 1032 + 13, false);

          A.store.Bool(ptr + 2132 + 1732 + 1056 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 1056 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1056 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1056 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1056 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1056 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1056 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 1056 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 1056 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 1056 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 1056 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 1088 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 1088 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1088 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1088 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1088 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1088 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1088 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 1088 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 1088 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 1088 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 1088 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 1120 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 1120 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1120 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1120 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1120 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1120 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1120 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 1120 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 1120 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 1120 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 1120 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 1152 + 33, false);
          A.store.Bool(ptr + 2132 + 1732 + 1152 + 26, false);
          A.store.Int32(ptr + 2132 + 1732 + 1152 + 0, 0);
          A.store.Ref(ptr + 2132 + 1732 + 1152 + 4, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 1152 + 27, false);
          A.store.Int32(ptr + 2132 + 1732 + 1152 + 8, 0);
          A.store.Bool(ptr + 2132 + 1732 + 1152 + 28, false);
          A.store.Int32(ptr + 2132 + 1732 + 1152 + 12, 0);
          A.store.Bool(ptr + 2132 + 1732 + 1152 + 29, false);
          A.store.Int32(ptr + 2132 + 1732 + 1152 + 16, 0);
          A.store.Bool(ptr + 2132 + 1732 + 1152 + 30, false);
          A.store.Int32(ptr + 2132 + 1732 + 1152 + 20, 0);
          A.store.Bool(ptr + 2132 + 1732 + 1152 + 31, false);
          A.store.Bool(ptr + 2132 + 1732 + 1152 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 1152 + 32, false);
          A.store.Bool(ptr + 2132 + 1732 + 1152 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 1188 + 33, false);
          A.store.Bool(ptr + 2132 + 1732 + 1188 + 26, false);
          A.store.Int32(ptr + 2132 + 1732 + 1188 + 0, 0);
          A.store.Ref(ptr + 2132 + 1732 + 1188 + 4, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 1188 + 27, false);
          A.store.Int32(ptr + 2132 + 1732 + 1188 + 8, 0);
          A.store.Bool(ptr + 2132 + 1732 + 1188 + 28, false);
          A.store.Int32(ptr + 2132 + 1732 + 1188 + 12, 0);
          A.store.Bool(ptr + 2132 + 1732 + 1188 + 29, false);
          A.store.Int32(ptr + 2132 + 1732 + 1188 + 16, 0);
          A.store.Bool(ptr + 2132 + 1732 + 1188 + 30, false);
          A.store.Int32(ptr + 2132 + 1732 + 1188 + 20, 0);
          A.store.Bool(ptr + 2132 + 1732 + 1188 + 31, false);
          A.store.Bool(ptr + 2132 + 1732 + 1188 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 1188 + 32, false);
          A.store.Bool(ptr + 2132 + 1732 + 1188 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 1224 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 1224 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1224 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1224 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1224 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1224 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1224 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 1224 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 1224 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 1224 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 1224 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 1256 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 1256 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1256 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1256 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1256 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1256 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1256 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 1256 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 1256 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 1256 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 1256 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 1288 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 1288 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1288 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1288 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1288 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1288 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1288 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 1288 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 1288 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 1288 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 1288 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 1320 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 1320 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1320 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1320 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1320 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1320 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1320 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 1320 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 1320 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 1320 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 1320 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 1352 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 1352 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1352 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1352 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1352 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1352 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1352 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 1352 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 1352 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 1352 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 1352 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 1384 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 1384 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1384 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1384 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1384 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1384 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1384 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 1384 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 1384 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 1384 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 1384 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 1416 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 1416 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1416 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1416 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1416 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1416 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1416 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 1416 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 1416 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 1416 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 1416 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 1448 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 1448 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1448 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1448 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1448 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1448 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1448 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 1448 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 1448 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 1448 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 1448 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 1480 + 61, false);

          A.store.Bool(ptr + 2132 + 1732 + 1480 + 0 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 1480 + 0 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1480 + 0 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1480 + 0 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1480 + 0 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1480 + 0 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1480 + 0 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 1480 + 0 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 1480 + 0 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 1480 + 0 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 1480 + 0 + 25, false);

          A.store.Bool(ptr + 2132 + 1732 + 1480 + 32 + 28, false);
          A.store.Ref(ptr + 2132 + 1732 + 1480 + 32 + 0, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1480 + 32 + 4, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1480 + 32 + 8, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1480 + 32 + 12, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1480 + 32 + 16, undefined);
          A.store.Ref(ptr + 2132 + 1732 + 1480 + 32 + 20, undefined);
          A.store.Bool(ptr + 2132 + 1732 + 1480 + 32 + 26, false);
          A.store.Bool(ptr + 2132 + 1732 + 1480 + 32 + 24, false);
          A.store.Bool(ptr + 2132 + 1732 + 1480 + 32 + 27, false);
          A.store.Bool(ptr + 2132 + 1732 + 1480 + 32 + 25, false);

          A.store.Bool(ptr + 2132 + 3276 + 36, false);

          A.store.Bool(ptr + 2132 + 3276 + 0 + 28, false);
          A.store.Ref(ptr + 2132 + 3276 + 0 + 0, undefined);
          A.store.Ref(ptr + 2132 + 3276 + 0 + 4, undefined);
          A.store.Ref(ptr + 2132 + 3276 + 0 + 8, undefined);
          A.store.Ref(ptr + 2132 + 3276 + 0 + 12, undefined);
          A.store.Ref(ptr + 2132 + 3276 + 0 + 16, undefined);
          A.store.Ref(ptr + 2132 + 3276 + 0 + 20, undefined);
          A.store.Bool(ptr + 2132 + 3276 + 0 + 26, false);
          A.store.Bool(ptr + 2132 + 3276 + 0 + 24, false);
          A.store.Bool(ptr + 2132 + 3276 + 0 + 27, false);
          A.store.Bool(ptr + 2132 + 3276 + 0 + 25, false);
          A.store.Ref(ptr + 2132 + 3276 + 32, undefined);

          A.store.Bool(ptr + 2132 + 3316 + 28, false);
          A.store.Ref(ptr + 2132 + 3316 + 0, undefined);
          A.store.Ref(ptr + 2132 + 3316 + 4, undefined);
          A.store.Ref(ptr + 2132 + 3316 + 8, undefined);
          A.store.Ref(ptr + 2132 + 3316 + 12, undefined);
          A.store.Ref(ptr + 2132 + 3316 + 16, undefined);
          A.store.Ref(ptr + 2132 + 3316 + 20, undefined);
          A.store.Bool(ptr + 2132 + 3316 + 26, false);
          A.store.Bool(ptr + 2132 + 3316 + 24, false);
          A.store.Bool(ptr + 2132 + 3316 + 27, false);
          A.store.Bool(ptr + 2132 + 3316 + 25, false);
        } else {
          A.store.Bool(ptr + 2132 + 3345, true);

          if (typeof x["VPN"]["AutoConnect"] === "undefined") {
            A.store.Bool(ptr + 2132 + 0 + 21, false);
            A.store.Bool(ptr + 2132 + 0 + 14, false);
            A.store.Bool(ptr + 2132 + 0 + 0, false);
            A.store.Ref(ptr + 2132 + 0 + 4, undefined);
            A.store.Bool(ptr + 2132 + 0 + 15, false);
            A.store.Bool(ptr + 2132 + 0 + 8, false);
            A.store.Bool(ptr + 2132 + 0 + 16, false);
            A.store.Bool(ptr + 2132 + 0 + 9, false);
            A.store.Bool(ptr + 2132 + 0 + 17, false);
            A.store.Bool(ptr + 2132 + 0 + 10, false);
            A.store.Bool(ptr + 2132 + 0 + 18, false);
            A.store.Bool(ptr + 2132 + 0 + 11, false);
            A.store.Bool(ptr + 2132 + 0 + 19, false);
            A.store.Bool(ptr + 2132 + 0 + 12, false);
            A.store.Bool(ptr + 2132 + 0 + 20, false);
            A.store.Bool(ptr + 2132 + 0 + 13, false);
          } else {
            A.store.Bool(ptr + 2132 + 0 + 21, true);
            A.store.Bool(ptr + 2132 + 0 + 14, "Active" in x["VPN"]["AutoConnect"] ? true : false);
            A.store.Bool(ptr + 2132 + 0 + 0, x["VPN"]["AutoConnect"]["Active"] ? true : false);
            A.store.Ref(ptr + 2132 + 0 + 4, x["VPN"]["AutoConnect"]["Effective"]);
            A.store.Bool(ptr + 2132 + 0 + 15, "UserPolicy" in x["VPN"]["AutoConnect"] ? true : false);
            A.store.Bool(ptr + 2132 + 0 + 8, x["VPN"]["AutoConnect"]["UserPolicy"] ? true : false);
            A.store.Bool(ptr + 2132 + 0 + 16, "DevicePolicy" in x["VPN"]["AutoConnect"] ? true : false);
            A.store.Bool(ptr + 2132 + 0 + 9, x["VPN"]["AutoConnect"]["DevicePolicy"] ? true : false);
            A.store.Bool(ptr + 2132 + 0 + 17, "UserSetting" in x["VPN"]["AutoConnect"] ? true : false);
            A.store.Bool(ptr + 2132 + 0 + 10, x["VPN"]["AutoConnect"]["UserSetting"] ? true : false);
            A.store.Bool(ptr + 2132 + 0 + 18, "SharedSetting" in x["VPN"]["AutoConnect"] ? true : false);
            A.store.Bool(ptr + 2132 + 0 + 11, x["VPN"]["AutoConnect"]["SharedSetting"] ? true : false);
            A.store.Bool(ptr + 2132 + 0 + 19, "UserEditable" in x["VPN"]["AutoConnect"] ? true : false);
            A.store.Bool(ptr + 2132 + 0 + 12, x["VPN"]["AutoConnect"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 2132 + 0 + 20, "DeviceEditable" in x["VPN"]["AutoConnect"] ? true : false);
            A.store.Bool(ptr + 2132 + 0 + 13, x["VPN"]["AutoConnect"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["VPN"]["Host"] === "undefined") {
            A.store.Bool(ptr + 2132 + 24 + 28, false);
            A.store.Ref(ptr + 2132 + 24 + 0, undefined);
            A.store.Ref(ptr + 2132 + 24 + 4, undefined);
            A.store.Ref(ptr + 2132 + 24 + 8, undefined);
            A.store.Ref(ptr + 2132 + 24 + 12, undefined);
            A.store.Ref(ptr + 2132 + 24 + 16, undefined);
            A.store.Ref(ptr + 2132 + 24 + 20, undefined);
            A.store.Bool(ptr + 2132 + 24 + 26, false);
            A.store.Bool(ptr + 2132 + 24 + 24, false);
            A.store.Bool(ptr + 2132 + 24 + 27, false);
            A.store.Bool(ptr + 2132 + 24 + 25, false);
          } else {
            A.store.Bool(ptr + 2132 + 24 + 28, true);
            A.store.Ref(ptr + 2132 + 24 + 0, x["VPN"]["Host"]["Active"]);
            A.store.Ref(ptr + 2132 + 24 + 4, x["VPN"]["Host"]["Effective"]);
            A.store.Ref(ptr + 2132 + 24 + 8, x["VPN"]["Host"]["UserPolicy"]);
            A.store.Ref(ptr + 2132 + 24 + 12, x["VPN"]["Host"]["DevicePolicy"]);
            A.store.Ref(ptr + 2132 + 24 + 16, x["VPN"]["Host"]["UserSetting"]);
            A.store.Ref(ptr + 2132 + 24 + 20, x["VPN"]["Host"]["SharedSetting"]);
            A.store.Bool(ptr + 2132 + 24 + 26, "UserEditable" in x["VPN"]["Host"] ? true : false);
            A.store.Bool(ptr + 2132 + 24 + 24, x["VPN"]["Host"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 2132 + 24 + 27, "DeviceEditable" in x["VPN"]["Host"] ? true : false);
            A.store.Bool(ptr + 2132 + 24 + 25, x["VPN"]["Host"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["VPN"]["IPsec"] === "undefined") {
            A.store.Bool(ptr + 2132 + 56 + 1562, false);

            A.store.Bool(ptr + 2132 + 56 + 0 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 0 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 0 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 0 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 0 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 0 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 0 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 0 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 0 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 0 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 0 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 32 + 318, false);

            A.store.Bool(ptr + 2132 + 56 + 32 + 0 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 32 + 0 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 0 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 0 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 0 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 0 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 0 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 32 + 0 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 32 + 0 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 32 + 0 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 32 + 0 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 125, false);

            A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 0 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 0 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 0 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 0 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 0 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 0 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 0 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 0 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 0 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 0 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 0 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 32 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 32 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 32 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 32 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 32 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 32 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 32 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 32 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 32 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 32 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 32 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 64 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 64 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 64 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 64 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 64 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 64 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 64 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 64 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 64 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 64 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 64 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 96 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 96 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 96 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 96 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 96 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 96 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 96 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 96 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 96 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 96 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 96 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 32 + 160 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 32 + 160 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 160 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 160 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 160 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 160 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 160 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 32 + 160 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 32 + 160 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 32 + 160 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 32 + 160 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 125, false);

            A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 0 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 0 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 0 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 0 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 0 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 0 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 0 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 0 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 0 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 0 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 0 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 32 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 32 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 32 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 32 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 32 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 32 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 32 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 32 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 32 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 32 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 32 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 64 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 64 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 64 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 64 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 64 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 64 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 64 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 64 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 64 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 64 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 64 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 96 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 96 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 96 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 96 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 96 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 96 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 96 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 96 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 96 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 96 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 96 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 352 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 352 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 352 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 352 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 352 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 352 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 352 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 352 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 352 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 352 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 352 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 384 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 384 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 384 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 384 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 384 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 384 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 384 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 384 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 384 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 384 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 384 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 416 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 416 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 416 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 416 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 416 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 416 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 416 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 416 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 416 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 416 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 416 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 448 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 448 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 448 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 448 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 448 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 448 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 448 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 448 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 448 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 448 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 448 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 480 + 806, false);

            A.store.Bool(ptr + 2132 + 56 + 480 + 0 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 480 + 0 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 0 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 0 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 0 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 0 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 0 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 480 + 0 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 0 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 0 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 0 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 318, false);

            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 0 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 0 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 0 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 0 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 0 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 0 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 0 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 0 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 0 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 0 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 0 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 125, false);

            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 160 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 160 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 160 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 160 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 160 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 160 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 160 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 160 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 160 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 160 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 160 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 125, false);

            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 480 + 352 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 480 + 352 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 352 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 352 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 352 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 352 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 352 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 480 + 352 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 352 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 352 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 352 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 480 + 384 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 480 + 384 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 384 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 384 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 384 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 384 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 384 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 480 + 384 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 384 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 384 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 384 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 480 + 416 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 480 + 416 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 416 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 416 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 416 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 416 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 416 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 480 + 416 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 416 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 416 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 416 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 480 + 448 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 480 + 448 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 448 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 448 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 448 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 448 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 448 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 480 + 448 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 448 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 448 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 448 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 480 + 480 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 480 + 480 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 480 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 480 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 480 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 480 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 480 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 480 + 480 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 480 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 480 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 480 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 480 + 512 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 480 + 512 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 512 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 512 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 512 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 512 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 512 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 480 + 512 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 512 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 512 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 512 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 480 + 544 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 480 + 544 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 544 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 544 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 544 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 544 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 544 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 480 + 544 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 544 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 544 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 544 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 480 + 576 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 480 + 576 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 576 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 576 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 576 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 576 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 576 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 480 + 576 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 576 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 576 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 576 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 21, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 14, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 0, false);
            A.store.Ref(ptr + 2132 + 56 + 480 + 608 + 4, undefined);
            A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 15, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 8, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 16, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 9, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 17, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 10, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 18, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 11, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 19, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 12, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 20, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 13, false);

            A.store.Bool(ptr + 2132 + 56 + 480 + 632 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 480 + 632 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 632 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 632 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 632 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 632 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 632 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 480 + 632 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 632 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 632 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 632 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 480 + 664 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 480 + 664 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 664 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 664 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 664 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 664 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 664 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 480 + 664 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 664 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 664 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 664 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 480 + 696 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 480 + 696 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 696 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 696 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 696 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 696 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 696 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 480 + 696 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 696 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 696 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 696 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 480 + 728 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 480 + 728 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 728 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 728 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 728 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 728 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 480 + 728 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 480 + 728 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 728 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 728 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 728 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 21, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 14, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 0, false);
            A.store.Ref(ptr + 2132 + 56 + 480 + 760 + 4, undefined);
            A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 15, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 8, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 16, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 9, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 17, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 10, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 18, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 11, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 19, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 12, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 20, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 13, false);

            A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 21, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 14, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 0, false);
            A.store.Ref(ptr + 2132 + 56 + 480 + 784 + 4, undefined);
            A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 15, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 8, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 16, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 9, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 17, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 10, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 18, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 11, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 19, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 12, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 20, false);
            A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 13, false);

            A.store.Bool(ptr + 2132 + 56 + 1288 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 1288 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 1288 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 1288 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 1288 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 1288 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 1288 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 1288 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 1288 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 1288 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 1288 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 1320 + 33, false);
            A.store.Bool(ptr + 2132 + 56 + 1320 + 26, false);
            A.store.Int32(ptr + 2132 + 56 + 1320 + 0, 0);
            A.store.Ref(ptr + 2132 + 56 + 1320 + 4, undefined);
            A.store.Bool(ptr + 2132 + 56 + 1320 + 27, false);
            A.store.Int32(ptr + 2132 + 56 + 1320 + 8, 0);
            A.store.Bool(ptr + 2132 + 56 + 1320 + 28, false);
            A.store.Int32(ptr + 2132 + 56 + 1320 + 12, 0);
            A.store.Bool(ptr + 2132 + 56 + 1320 + 29, false);
            A.store.Int32(ptr + 2132 + 56 + 1320 + 16, 0);
            A.store.Bool(ptr + 2132 + 56 + 1320 + 30, false);
            A.store.Int32(ptr + 2132 + 56 + 1320 + 20, 0);
            A.store.Bool(ptr + 2132 + 56 + 1320 + 31, false);
            A.store.Bool(ptr + 2132 + 56 + 1320 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 1320 + 32, false);
            A.store.Bool(ptr + 2132 + 56 + 1320 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 1356 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 1356 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 1356 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 1356 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 1356 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 1356 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 1356 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 1356 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 1356 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 1356 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 1356 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 1388 + 21, false);
            A.store.Bool(ptr + 2132 + 56 + 1388 + 14, false);
            A.store.Bool(ptr + 2132 + 56 + 1388 + 0, false);
            A.store.Ref(ptr + 2132 + 56 + 1388 + 4, undefined);
            A.store.Bool(ptr + 2132 + 56 + 1388 + 15, false);
            A.store.Bool(ptr + 2132 + 56 + 1388 + 8, false);
            A.store.Bool(ptr + 2132 + 56 + 1388 + 16, false);
            A.store.Bool(ptr + 2132 + 56 + 1388 + 9, false);
            A.store.Bool(ptr + 2132 + 56 + 1388 + 17, false);
            A.store.Bool(ptr + 2132 + 56 + 1388 + 10, false);
            A.store.Bool(ptr + 2132 + 56 + 1388 + 18, false);
            A.store.Bool(ptr + 2132 + 56 + 1388 + 11, false);
            A.store.Bool(ptr + 2132 + 56 + 1388 + 19, false);
            A.store.Bool(ptr + 2132 + 56 + 1388 + 12, false);
            A.store.Bool(ptr + 2132 + 56 + 1388 + 20, false);
            A.store.Bool(ptr + 2132 + 56 + 1388 + 13, false);

            A.store.Bool(ptr + 2132 + 56 + 1412 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 1412 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 1412 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 1412 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 1412 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 1412 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 1412 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 1412 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 1412 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 1412 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 1412 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 1444 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 1444 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 1444 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 1444 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 1444 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 1444 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 1444 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 1444 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 1444 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 1444 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 1444 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 1476 + 85, false);

            A.store.Bool(ptr + 2132 + 56 + 1476 + 0 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 1476 + 0 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 1476 + 0 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 1476 + 0 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 1476 + 0 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 1476 + 0 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 1476 + 0 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 1476 + 0 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 1476 + 0 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 1476 + 0 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 1476 + 0 + 25, false);

            A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 21, false);
            A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 14, false);
            A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 0, false);
            A.store.Ref(ptr + 2132 + 56 + 1476 + 32 + 4, undefined);
            A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 15, false);
            A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 8, false);
            A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 16, false);
            A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 9, false);
            A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 17, false);
            A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 10, false);
            A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 18, false);
            A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 11, false);
            A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 19, false);
            A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 12, false);
            A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 20, false);
            A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 13, false);

            A.store.Bool(ptr + 2132 + 56 + 1476 + 56 + 28, false);
            A.store.Ref(ptr + 2132 + 56 + 1476 + 56 + 0, undefined);
            A.store.Ref(ptr + 2132 + 56 + 1476 + 56 + 4, undefined);
            A.store.Ref(ptr + 2132 + 56 + 1476 + 56 + 8, undefined);
            A.store.Ref(ptr + 2132 + 56 + 1476 + 56 + 12, undefined);
            A.store.Ref(ptr + 2132 + 56 + 1476 + 56 + 16, undefined);
            A.store.Ref(ptr + 2132 + 56 + 1476 + 56 + 20, undefined);
            A.store.Bool(ptr + 2132 + 56 + 1476 + 56 + 26, false);
            A.store.Bool(ptr + 2132 + 56 + 1476 + 56 + 24, false);
            A.store.Bool(ptr + 2132 + 56 + 1476 + 56 + 27, false);
            A.store.Bool(ptr + 2132 + 56 + 1476 + 56 + 25, false);
          } else {
            A.store.Bool(ptr + 2132 + 56 + 1562, true);

            if (typeof x["VPN"]["IPsec"]["AuthenticationType"] === "undefined") {
              A.store.Bool(ptr + 2132 + 56 + 0 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 0 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 0 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 0 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 0 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 0 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 0 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 0 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 0 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 0 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 0 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 56 + 0 + 28, true);
              A.store.Ref(ptr + 2132 + 56 + 0 + 0, x["VPN"]["IPsec"]["AuthenticationType"]["Active"]);
              A.store.Ref(ptr + 2132 + 56 + 0 + 4, x["VPN"]["IPsec"]["AuthenticationType"]["Effective"]);
              A.store.Ref(ptr + 2132 + 56 + 0 + 8, x["VPN"]["IPsec"]["AuthenticationType"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 56 + 0 + 12, x["VPN"]["IPsec"]["AuthenticationType"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 56 + 0 + 16, x["VPN"]["IPsec"]["AuthenticationType"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 56 + 0 + 20, x["VPN"]["IPsec"]["AuthenticationType"]["SharedSetting"]);
              A.store.Bool(
                ptr + 2132 + 56 + 0 + 26,
                "UserEditable" in x["VPN"]["IPsec"]["AuthenticationType"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 56 + 0 + 24,
                x["VPN"]["IPsec"]["AuthenticationType"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 56 + 0 + 27,
                "DeviceEditable" in x["VPN"]["IPsec"]["AuthenticationType"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 56 + 0 + 25,
                x["VPN"]["IPsec"]["AuthenticationType"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["IPsec"]["ClientCertPattern"] === "undefined") {
              A.store.Bool(ptr + 2132 + 56 + 32 + 318, false);

              A.store.Bool(ptr + 2132 + 56 + 32 + 0 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 32 + 0 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 0 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 0 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 0 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 0 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 0 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 32 + 0 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 32 + 0 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 32 + 0 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 32 + 0 + 25, false);

              A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 125, false);

              A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 0 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 0 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 0 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 0 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 0 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 0 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 0 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 0 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 0 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 0 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 0 + 25, false);

              A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 32 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 32 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 32 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 32 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 32 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 32 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 32 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 32 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 32 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 32 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 32 + 25, false);

              A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 64 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 64 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 64 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 64 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 64 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 64 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 64 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 64 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 64 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 64 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 64 + 25, false);

              A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 96 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 96 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 96 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 96 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 96 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 96 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 96 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 96 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 96 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 96 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 96 + 25, false);

              A.store.Bool(ptr + 2132 + 56 + 32 + 160 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 32 + 160 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 160 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 160 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 160 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 160 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 160 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 32 + 160 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 32 + 160 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 32 + 160 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 32 + 160 + 25, false);

              A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 125, false);

              A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 0 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 0 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 0 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 0 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 0 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 0 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 0 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 0 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 0 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 0 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 0 + 25, false);

              A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 32 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 32 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 32 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 32 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 32 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 32 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 32 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 32 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 32 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 32 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 32 + 25, false);

              A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 64 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 64 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 64 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 64 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 64 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 64 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 64 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 64 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 64 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 64 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 64 + 25, false);

              A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 96 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 96 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 96 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 96 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 96 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 96 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 96 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 96 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 96 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 96 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 96 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 56 + 32 + 318, true);

              if (typeof x["VPN"]["IPsec"]["ClientCertPattern"]["EnrollmentURI"] === "undefined") {
                A.store.Bool(ptr + 2132 + 56 + 32 + 0 + 28, false);
                A.store.Ref(ptr + 2132 + 56 + 32 + 0 + 0, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 0 + 4, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 0 + 8, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 0 + 12, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 0 + 16, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 0 + 20, undefined);
                A.store.Bool(ptr + 2132 + 56 + 32 + 0 + 26, false);
                A.store.Bool(ptr + 2132 + 56 + 32 + 0 + 24, false);
                A.store.Bool(ptr + 2132 + 56 + 32 + 0 + 27, false);
                A.store.Bool(ptr + 2132 + 56 + 32 + 0 + 25, false);
              } else {
                A.store.Bool(ptr + 2132 + 56 + 32 + 0 + 28, true);
                A.store.Ref(
                  ptr + 2132 + 56 + 32 + 0 + 0,
                  x["VPN"]["IPsec"]["ClientCertPattern"]["EnrollmentURI"]["Active"]
                );
                A.store.Ref(
                  ptr + 2132 + 56 + 32 + 0 + 4,
                  x["VPN"]["IPsec"]["ClientCertPattern"]["EnrollmentURI"]["Effective"]
                );
                A.store.Ref(
                  ptr + 2132 + 56 + 32 + 0 + 8,
                  x["VPN"]["IPsec"]["ClientCertPattern"]["EnrollmentURI"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 2132 + 56 + 32 + 0 + 12,
                  x["VPN"]["IPsec"]["ClientCertPattern"]["EnrollmentURI"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 2132 + 56 + 32 + 0 + 16,
                  x["VPN"]["IPsec"]["ClientCertPattern"]["EnrollmentURI"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 2132 + 56 + 32 + 0 + 20,
                  x["VPN"]["IPsec"]["ClientCertPattern"]["EnrollmentURI"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 32 + 0 + 26,
                  "UserEditable" in x["VPN"]["IPsec"]["ClientCertPattern"]["EnrollmentURI"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 32 + 0 + 24,
                  x["VPN"]["IPsec"]["ClientCertPattern"]["EnrollmentURI"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 32 + 0 + 27,
                  "DeviceEditable" in x["VPN"]["IPsec"]["ClientCertPattern"]["EnrollmentURI"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 32 + 0 + 25,
                  x["VPN"]["IPsec"]["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"] === "undefined") {
                A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 125, false);

                A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 0 + 28, false);
                A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 0 + 0, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 0 + 4, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 0 + 8, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 0 + 12, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 0 + 16, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 0 + 20, undefined);
                A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 0 + 26, false);
                A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 0 + 24, false);
                A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 0 + 27, false);
                A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 0 + 25, false);

                A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 32 + 28, false);
                A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 32 + 0, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 32 + 4, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 32 + 8, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 32 + 12, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 32 + 16, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 32 + 20, undefined);
                A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 32 + 26, false);
                A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 32 + 24, false);
                A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 32 + 27, false);
                A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 32 + 25, false);

                A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 64 + 28, false);
                A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 64 + 0, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 64 + 4, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 64 + 8, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 64 + 12, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 64 + 16, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 64 + 20, undefined);
                A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 64 + 26, false);
                A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 64 + 24, false);
                A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 64 + 27, false);
                A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 64 + 25, false);

                A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 96 + 28, false);
                A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 96 + 0, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 96 + 4, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 96 + 8, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 96 + 12, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 96 + 16, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 96 + 20, undefined);
                A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 96 + 26, false);
                A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 96 + 24, false);
                A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 96 + 27, false);
                A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 96 + 25, false);
              } else {
                A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 125, true);

                if (typeof x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"] === "undefined") {
                  A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 0 + 28, false);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 0 + 0, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 0 + 4, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 0 + 8, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 0 + 12, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 0 + 16, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 0 + 20, undefined);
                  A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 0 + 26, false);
                  A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 0 + 24, false);
                  A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 0 + 27, false);
                  A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 0 + 25, false);
                } else {
                  A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 0 + 28, true);
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 32 + 0 + 0,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 32 + 0 + 4,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 32 + 0 + 8,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 32 + 0 + 12,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 32 + 0 + 16,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 32 + 0 + 20,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 32 + 32 + 0 + 26,
                    "UserEditable" in x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 32 + 32 + 0 + 24,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 32 + 32 + 0 + 27,
                    "DeviceEditable" in x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 32 + 32 + 0 + 25,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"] ? true : false
                  );
                }

                if (typeof x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"] === "undefined") {
                  A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 32 + 28, false);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 32 + 0, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 32 + 4, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 32 + 8, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 32 + 12, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 32 + 16, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 32 + 20, undefined);
                  A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 32 + 26, false);
                  A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 32 + 24, false);
                  A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 32 + 27, false);
                  A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 32 + 25, false);
                } else {
                  A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 32 + 28, true);
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 32 + 32 + 0,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 32 + 32 + 4,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 32 + 32 + 8,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 32 + 32 + 12,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 32 + 32 + 16,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 32 + 32 + 20,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 32 + 32 + 32 + 26,
                    "UserEditable" in x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 32 + 32 + 32 + 24,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 32 + 32 + 32 + 27,
                    "DeviceEditable" in x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 32 + 32 + 32 + 25,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"] ? true : false
                  );
                }

                if (typeof x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"] === "undefined") {
                  A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 64 + 28, false);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 64 + 0, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 64 + 4, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 64 + 8, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 64 + 12, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 64 + 16, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 64 + 20, undefined);
                  A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 64 + 26, false);
                  A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 64 + 24, false);
                  A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 64 + 27, false);
                  A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 64 + 25, false);
                } else {
                  A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 64 + 28, true);
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 32 + 64 + 0,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 32 + 64 + 4,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 32 + 64 + 8,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 32 + 64 + 12,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 32 + 64 + 16,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 32 + 64 + 20,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 32 + 32 + 64 + 26,
                    "UserEditable" in x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 32 + 32 + 64 + 24,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 32 + 32 + 64 + 27,
                    "DeviceEditable" in x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 32 + 32 + 64 + 25,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"] ? true : false
                  );
                }

                if (typeof x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] === "undefined") {
                  A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 96 + 28, false);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 96 + 0, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 96 + 4, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 96 + 8, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 96 + 12, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 96 + 16, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 32 + 96 + 20, undefined);
                  A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 96 + 26, false);
                  A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 96 + 24, false);
                  A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 96 + 27, false);
                  A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 96 + 25, false);
                } else {
                  A.store.Bool(ptr + 2132 + 56 + 32 + 32 + 96 + 28, true);
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 32 + 96 + 0,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 32 + 96 + 4,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 32 + 96 + 8,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 32 + 96 + 12,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 32 + 96 + 16,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 32 + 96 + 20,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 32 + 32 + 96 + 26,
                    "UserEditable" in x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]
                      ? true
                      : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 32 + 32 + 96 + 24,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"]
                      ? true
                      : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 32 + 32 + 96 + 27,
                    "DeviceEditable" in x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]
                      ? true
                      : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 32 + 32 + 96 + 25,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"]
                      ? true
                      : false
                  );
                }
              }

              if (typeof x["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCARef"] === "undefined") {
                A.store.Bool(ptr + 2132 + 56 + 32 + 160 + 28, false);
                A.store.Ref(ptr + 2132 + 56 + 32 + 160 + 0, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 160 + 4, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 160 + 8, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 160 + 12, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 160 + 16, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 160 + 20, undefined);
                A.store.Bool(ptr + 2132 + 56 + 32 + 160 + 26, false);
                A.store.Bool(ptr + 2132 + 56 + 32 + 160 + 24, false);
                A.store.Bool(ptr + 2132 + 56 + 32 + 160 + 27, false);
                A.store.Bool(ptr + 2132 + 56 + 32 + 160 + 25, false);
              } else {
                A.store.Bool(ptr + 2132 + 56 + 32 + 160 + 28, true);
                A.store.Ref(
                  ptr + 2132 + 56 + 32 + 160 + 0,
                  x["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCARef"]["Active"]
                );
                A.store.Ref(
                  ptr + 2132 + 56 + 32 + 160 + 4,
                  x["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCARef"]["Effective"]
                );
                A.store.Ref(
                  ptr + 2132 + 56 + 32 + 160 + 8,
                  x["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCARef"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 2132 + 56 + 32 + 160 + 12,
                  x["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCARef"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 2132 + 56 + 32 + 160 + 16,
                  x["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCARef"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 2132 + 56 + 32 + 160 + 20,
                  x["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCARef"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 32 + 160 + 26,
                  "UserEditable" in x["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCARef"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 32 + 160 + 24,
                  x["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCARef"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 32 + 160 + 27,
                  "DeviceEditable" in x["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCARef"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 32 + 160 + 25,
                  x["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"] === "undefined") {
                A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 125, false);

                A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 0 + 28, false);
                A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 0 + 0, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 0 + 4, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 0 + 8, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 0 + 12, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 0 + 16, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 0 + 20, undefined);
                A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 0 + 26, false);
                A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 0 + 24, false);
                A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 0 + 27, false);
                A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 0 + 25, false);

                A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 32 + 28, false);
                A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 32 + 0, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 32 + 4, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 32 + 8, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 32 + 12, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 32 + 16, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 32 + 20, undefined);
                A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 32 + 26, false);
                A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 32 + 24, false);
                A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 32 + 27, false);
                A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 32 + 25, false);

                A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 64 + 28, false);
                A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 64 + 0, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 64 + 4, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 64 + 8, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 64 + 12, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 64 + 16, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 64 + 20, undefined);
                A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 64 + 26, false);
                A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 64 + 24, false);
                A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 64 + 27, false);
                A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 64 + 25, false);

                A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 96 + 28, false);
                A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 96 + 0, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 96 + 4, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 96 + 8, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 96 + 12, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 96 + 16, undefined);
                A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 96 + 20, undefined);
                A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 96 + 26, false);
                A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 96 + 24, false);
                A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 96 + 27, false);
                A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 96 + 25, false);
              } else {
                A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 125, true);

                if (typeof x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"] === "undefined") {
                  A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 0 + 28, false);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 0 + 0, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 0 + 4, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 0 + 8, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 0 + 12, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 0 + 16, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 0 + 20, undefined);
                  A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 0 + 26, false);
                  A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 0 + 24, false);
                  A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 0 + 27, false);
                  A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 0 + 25, false);
                } else {
                  A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 0 + 28, true);
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 192 + 0 + 0,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 192 + 0 + 4,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 192 + 0 + 8,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 192 + 0 + 12,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 192 + 0 + 16,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 192 + 0 + 20,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 32 + 192 + 0 + 26,
                    "UserEditable" in x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 32 + 192 + 0 + 24,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 32 + 192 + 0 + 27,
                    "DeviceEditable" in x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 32 + 192 + 0 + 25,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"] ? true : false
                  );
                }

                if (typeof x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Locality"] === "undefined") {
                  A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 32 + 28, false);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 32 + 0, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 32 + 4, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 32 + 8, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 32 + 12, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 32 + 16, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 32 + 20, undefined);
                  A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 32 + 26, false);
                  A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 32 + 24, false);
                  A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 32 + 27, false);
                  A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 32 + 25, false);
                } else {
                  A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 32 + 28, true);
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 192 + 32 + 0,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 192 + 32 + 4,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 192 + 32 + 8,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 192 + 32 + 12,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 192 + 32 + 16,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 192 + 32 + 20,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 32 + 192 + 32 + 26,
                    "UserEditable" in x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Locality"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 32 + 192 + 32 + 24,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 32 + 192 + 32 + 27,
                    "DeviceEditable" in x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Locality"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 32 + 192 + 32 + 25,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"] ? true : false
                  );
                }

                if (typeof x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Organization"] === "undefined") {
                  A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 64 + 28, false);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 64 + 0, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 64 + 4, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 64 + 8, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 64 + 12, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 64 + 16, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 64 + 20, undefined);
                  A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 64 + 26, false);
                  A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 64 + 24, false);
                  A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 64 + 27, false);
                  A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 64 + 25, false);
                } else {
                  A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 64 + 28, true);
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 192 + 64 + 0,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 192 + 64 + 4,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 192 + 64 + 8,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 192 + 64 + 12,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 192 + 64 + 16,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 192 + 64 + 20,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 32 + 192 + 64 + 26,
                    "UserEditable" in x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Organization"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 32 + 192 + 64 + 24,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 32 + 192 + 64 + 27,
                    "DeviceEditable" in x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Organization"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 32 + 192 + 64 + 25,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"] ? true : false
                  );
                }

                if (typeof x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] === "undefined") {
                  A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 96 + 28, false);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 96 + 0, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 96 + 4, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 96 + 8, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 96 + 12, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 96 + 16, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 32 + 192 + 96 + 20, undefined);
                  A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 96 + 26, false);
                  A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 96 + 24, false);
                  A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 96 + 27, false);
                  A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 96 + 25, false);
                } else {
                  A.store.Bool(ptr + 2132 + 56 + 32 + 192 + 96 + 28, true);
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 192 + 96 + 0,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 192 + 96 + 4,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 192 + 96 + 8,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 192 + 96 + 12,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 192 + 96 + 16,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 32 + 192 + 96 + 20,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 32 + 192 + 96 + 26,
                    "UserEditable" in x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]
                      ? true
                      : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 32 + 192 + 96 + 24,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"]
                      ? true
                      : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 32 + 192 + 96 + 27,
                    "DeviceEditable" in x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]
                      ? true
                      : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 32 + 192 + 96 + 25,
                    x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"]
                      ? true
                      : false
                  );
                }
              }
            }

            if (typeof x["VPN"]["IPsec"]["ClientCertPKCS11Id"] === "undefined") {
              A.store.Bool(ptr + 2132 + 56 + 352 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 352 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 352 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 352 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 352 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 352 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 352 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 352 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 352 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 352 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 352 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 56 + 352 + 28, true);
              A.store.Ref(ptr + 2132 + 56 + 352 + 0, x["VPN"]["IPsec"]["ClientCertPKCS11Id"]["Active"]);
              A.store.Ref(ptr + 2132 + 56 + 352 + 4, x["VPN"]["IPsec"]["ClientCertPKCS11Id"]["Effective"]);
              A.store.Ref(ptr + 2132 + 56 + 352 + 8, x["VPN"]["IPsec"]["ClientCertPKCS11Id"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 56 + 352 + 12, x["VPN"]["IPsec"]["ClientCertPKCS11Id"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 56 + 352 + 16, x["VPN"]["IPsec"]["ClientCertPKCS11Id"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 56 + 352 + 20, x["VPN"]["IPsec"]["ClientCertPKCS11Id"]["SharedSetting"]);
              A.store.Bool(
                ptr + 2132 + 56 + 352 + 26,
                "UserEditable" in x["VPN"]["IPsec"]["ClientCertPKCS11Id"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 56 + 352 + 24,
                x["VPN"]["IPsec"]["ClientCertPKCS11Id"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 56 + 352 + 27,
                "DeviceEditable" in x["VPN"]["IPsec"]["ClientCertPKCS11Id"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 56 + 352 + 25,
                x["VPN"]["IPsec"]["ClientCertPKCS11Id"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["IPsec"]["ClientCertProvisioningProfileId"] === "undefined") {
              A.store.Bool(ptr + 2132 + 56 + 384 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 384 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 384 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 384 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 384 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 384 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 384 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 384 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 384 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 384 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 384 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 56 + 384 + 28, true);
              A.store.Ref(ptr + 2132 + 56 + 384 + 0, x["VPN"]["IPsec"]["ClientCertProvisioningProfileId"]["Active"]);
              A.store.Ref(ptr + 2132 + 56 + 384 + 4, x["VPN"]["IPsec"]["ClientCertProvisioningProfileId"]["Effective"]);
              A.store.Ref(
                ptr + 2132 + 56 + 384 + 8,
                x["VPN"]["IPsec"]["ClientCertProvisioningProfileId"]["UserPolicy"]
              );
              A.store.Ref(
                ptr + 2132 + 56 + 384 + 12,
                x["VPN"]["IPsec"]["ClientCertProvisioningProfileId"]["DevicePolicy"]
              );
              A.store.Ref(
                ptr + 2132 + 56 + 384 + 16,
                x["VPN"]["IPsec"]["ClientCertProvisioningProfileId"]["UserSetting"]
              );
              A.store.Ref(
                ptr + 2132 + 56 + 384 + 20,
                x["VPN"]["IPsec"]["ClientCertProvisioningProfileId"]["SharedSetting"]
              );
              A.store.Bool(
                ptr + 2132 + 56 + 384 + 26,
                "UserEditable" in x["VPN"]["IPsec"]["ClientCertProvisioningProfileId"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 56 + 384 + 24,
                x["VPN"]["IPsec"]["ClientCertProvisioningProfileId"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 56 + 384 + 27,
                "DeviceEditable" in x["VPN"]["IPsec"]["ClientCertProvisioningProfileId"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 56 + 384 + 25,
                x["VPN"]["IPsec"]["ClientCertProvisioningProfileId"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["IPsec"]["ClientCertRef"] === "undefined") {
              A.store.Bool(ptr + 2132 + 56 + 416 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 416 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 416 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 416 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 416 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 416 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 416 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 416 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 416 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 416 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 416 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 56 + 416 + 28, true);
              A.store.Ref(ptr + 2132 + 56 + 416 + 0, x["VPN"]["IPsec"]["ClientCertRef"]["Active"]);
              A.store.Ref(ptr + 2132 + 56 + 416 + 4, x["VPN"]["IPsec"]["ClientCertRef"]["Effective"]);
              A.store.Ref(ptr + 2132 + 56 + 416 + 8, x["VPN"]["IPsec"]["ClientCertRef"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 56 + 416 + 12, x["VPN"]["IPsec"]["ClientCertRef"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 56 + 416 + 16, x["VPN"]["IPsec"]["ClientCertRef"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 56 + 416 + 20, x["VPN"]["IPsec"]["ClientCertRef"]["SharedSetting"]);
              A.store.Bool(
                ptr + 2132 + 56 + 416 + 26,
                "UserEditable" in x["VPN"]["IPsec"]["ClientCertRef"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 56 + 416 + 24,
                x["VPN"]["IPsec"]["ClientCertRef"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 56 + 416 + 27,
                "DeviceEditable" in x["VPN"]["IPsec"]["ClientCertRef"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 56 + 416 + 25,
                x["VPN"]["IPsec"]["ClientCertRef"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["IPsec"]["ClientCertType"] === "undefined") {
              A.store.Bool(ptr + 2132 + 56 + 448 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 448 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 448 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 448 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 448 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 448 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 448 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 448 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 448 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 448 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 448 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 56 + 448 + 28, true);
              A.store.Ref(ptr + 2132 + 56 + 448 + 0, x["VPN"]["IPsec"]["ClientCertType"]["Active"]);
              A.store.Ref(ptr + 2132 + 56 + 448 + 4, x["VPN"]["IPsec"]["ClientCertType"]["Effective"]);
              A.store.Ref(ptr + 2132 + 56 + 448 + 8, x["VPN"]["IPsec"]["ClientCertType"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 56 + 448 + 12, x["VPN"]["IPsec"]["ClientCertType"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 56 + 448 + 16, x["VPN"]["IPsec"]["ClientCertType"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 56 + 448 + 20, x["VPN"]["IPsec"]["ClientCertType"]["SharedSetting"]);
              A.store.Bool(
                ptr + 2132 + 56 + 448 + 26,
                "UserEditable" in x["VPN"]["IPsec"]["ClientCertType"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 56 + 448 + 24,
                x["VPN"]["IPsec"]["ClientCertType"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 56 + 448 + 27,
                "DeviceEditable" in x["VPN"]["IPsec"]["ClientCertType"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 56 + 448 + 25,
                x["VPN"]["IPsec"]["ClientCertType"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["IPsec"]["EAP"] === "undefined") {
              A.store.Bool(ptr + 2132 + 56 + 480 + 806, false);

              A.store.Bool(ptr + 2132 + 56 + 480 + 0 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 480 + 0 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 0 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 0 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 0 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 0 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 0 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 480 + 0 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 0 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 0 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 0 + 25, false);

              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 318, false);

              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 0 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 0 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 0 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 0 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 0 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 0 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 0 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 0 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 0 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 0 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 0 + 25, false);

              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 125, false);

              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 25, false);

              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 25, false);

              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 25, false);

              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 25, false);

              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 160 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 160 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 160 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 160 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 160 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 160 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 160 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 160 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 160 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 160 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 160 + 25, false);

              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 125, false);

              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 25, false);

              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 25, false);

              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 25, false);

              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 25, false);

              A.store.Bool(ptr + 2132 + 56 + 480 + 352 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 480 + 352 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 352 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 352 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 352 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 352 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 352 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 480 + 352 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 352 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 352 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 352 + 25, false);

              A.store.Bool(ptr + 2132 + 56 + 480 + 384 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 480 + 384 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 384 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 384 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 384 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 384 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 384 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 480 + 384 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 384 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 384 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 384 + 25, false);

              A.store.Bool(ptr + 2132 + 56 + 480 + 416 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 480 + 416 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 416 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 416 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 416 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 416 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 416 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 480 + 416 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 416 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 416 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 416 + 25, false);

              A.store.Bool(ptr + 2132 + 56 + 480 + 448 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 480 + 448 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 448 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 448 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 448 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 448 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 448 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 480 + 448 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 448 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 448 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 448 + 25, false);

              A.store.Bool(ptr + 2132 + 56 + 480 + 480 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 480 + 480 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 480 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 480 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 480 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 480 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 480 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 480 + 480 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 480 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 480 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 480 + 25, false);

              A.store.Bool(ptr + 2132 + 56 + 480 + 512 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 480 + 512 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 512 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 512 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 512 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 512 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 512 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 480 + 512 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 512 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 512 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 512 + 25, false);

              A.store.Bool(ptr + 2132 + 56 + 480 + 544 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 480 + 544 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 544 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 544 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 544 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 544 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 544 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 480 + 544 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 544 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 544 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 544 + 25, false);

              A.store.Bool(ptr + 2132 + 56 + 480 + 576 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 480 + 576 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 576 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 576 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 576 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 576 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 576 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 480 + 576 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 576 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 576 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 576 + 25, false);

              A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 21, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 14, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 0, false);
              A.store.Ref(ptr + 2132 + 56 + 480 + 608 + 4, undefined);
              A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 15, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 8, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 16, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 9, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 17, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 10, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 18, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 11, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 19, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 12, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 20, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 13, false);

              A.store.Bool(ptr + 2132 + 56 + 480 + 632 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 480 + 632 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 632 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 632 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 632 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 632 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 632 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 480 + 632 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 632 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 632 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 632 + 25, false);

              A.store.Bool(ptr + 2132 + 56 + 480 + 664 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 480 + 664 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 664 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 664 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 664 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 664 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 664 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 480 + 664 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 664 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 664 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 664 + 25, false);

              A.store.Bool(ptr + 2132 + 56 + 480 + 696 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 480 + 696 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 696 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 696 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 696 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 696 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 696 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 480 + 696 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 696 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 696 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 696 + 25, false);

              A.store.Bool(ptr + 2132 + 56 + 480 + 728 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 480 + 728 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 728 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 728 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 728 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 728 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 480 + 728 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 480 + 728 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 728 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 728 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 728 + 25, false);

              A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 21, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 14, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 0, false);
              A.store.Ref(ptr + 2132 + 56 + 480 + 760 + 4, undefined);
              A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 15, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 8, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 16, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 9, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 17, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 10, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 18, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 11, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 19, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 12, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 20, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 13, false);

              A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 21, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 14, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 0, false);
              A.store.Ref(ptr + 2132 + 56 + 480 + 784 + 4, undefined);
              A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 15, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 8, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 16, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 9, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 17, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 10, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 18, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 11, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 19, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 12, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 20, false);
              A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 13, false);
            } else {
              A.store.Bool(ptr + 2132 + 56 + 480 + 806, true);

              if (typeof x["VPN"]["IPsec"]["EAP"]["AnonymousIdentity"] === "undefined") {
                A.store.Bool(ptr + 2132 + 56 + 480 + 0 + 28, false);
                A.store.Ref(ptr + 2132 + 56 + 480 + 0 + 0, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 0 + 4, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 0 + 8, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 0 + 12, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 0 + 16, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 0 + 20, undefined);
                A.store.Bool(ptr + 2132 + 56 + 480 + 0 + 26, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 0 + 24, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 0 + 27, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 0 + 25, false);
              } else {
                A.store.Bool(ptr + 2132 + 56 + 480 + 0 + 28, true);
                A.store.Ref(ptr + 2132 + 56 + 480 + 0 + 0, x["VPN"]["IPsec"]["EAP"]["AnonymousIdentity"]["Active"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 0 + 4, x["VPN"]["IPsec"]["EAP"]["AnonymousIdentity"]["Effective"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 0 + 8, x["VPN"]["IPsec"]["EAP"]["AnonymousIdentity"]["UserPolicy"]);
                A.store.Ref(
                  ptr + 2132 + 56 + 480 + 0 + 12,
                  x["VPN"]["IPsec"]["EAP"]["AnonymousIdentity"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 2132 + 56 + 480 + 0 + 16,
                  x["VPN"]["IPsec"]["EAP"]["AnonymousIdentity"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 2132 + 56 + 480 + 0 + 20,
                  x["VPN"]["IPsec"]["EAP"]["AnonymousIdentity"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 0 + 26,
                  "UserEditable" in x["VPN"]["IPsec"]["EAP"]["AnonymousIdentity"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 0 + 24,
                  x["VPN"]["IPsec"]["EAP"]["AnonymousIdentity"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 0 + 27,
                  "DeviceEditable" in x["VPN"]["IPsec"]["EAP"]["AnonymousIdentity"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 0 + 25,
                  x["VPN"]["IPsec"]["EAP"]["AnonymousIdentity"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"] === "undefined") {
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 318, false);

                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 0 + 28, false);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 0 + 0, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 0 + 4, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 0 + 8, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 0 + 12, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 0 + 16, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 0 + 20, undefined);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 0 + 26, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 0 + 24, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 0 + 27, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 0 + 25, false);

                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 125, false);

                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 28, false);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 0, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 4, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 8, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 12, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 16, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 20, undefined);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 26, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 24, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 27, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 25, false);

                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 28, false);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 0, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 4, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 8, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 12, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 16, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 20, undefined);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 26, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 24, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 27, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 25, false);

                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 28, false);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 0, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 4, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 8, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 12, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 16, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 20, undefined);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 26, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 24, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 27, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 25, false);

                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 28, false);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 0, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 4, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 8, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 12, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 16, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 20, undefined);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 26, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 24, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 27, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 25, false);

                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 160 + 28, false);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 160 + 0, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 160 + 4, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 160 + 8, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 160 + 12, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 160 + 16, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 160 + 20, undefined);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 160 + 26, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 160 + 24, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 160 + 27, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 160 + 25, false);

                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 125, false);

                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 28, false);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 0, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 4, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 8, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 12, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 16, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 20, undefined);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 26, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 24, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 27, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 25, false);

                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 28, false);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 0, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 4, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 8, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 12, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 16, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 20, undefined);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 26, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 24, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 27, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 25, false);

                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 28, false);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 0, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 4, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 8, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 12, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 16, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 20, undefined);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 26, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 24, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 27, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 25, false);

                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 28, false);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 0, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 4, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 8, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 12, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 16, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 20, undefined);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 26, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 24, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 27, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 25, false);
              } else {
                A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 318, true);

                if (typeof x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] === "undefined") {
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 0 + 28, false);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 0 + 0, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 0 + 4, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 0 + 8, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 0 + 12, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 0 + 16, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 0 + 20, undefined);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 0 + 26, false);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 0 + 24, false);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 0 + 27, false);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 0 + 25, false);
                } else {
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 0 + 28, true);
                  A.store.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 0 + 0,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 0 + 4,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 0 + 8,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 0 + 12,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 0 + 16,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 0 + 20,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 480 + 32 + 0 + 26,
                    "UserEditable" in x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 480 + 32 + 0 + 24,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserEditable"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 480 + 32 + 0 + 27,
                    "DeviceEditable" in x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 480 + 32 + 0 + 25,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"] ? true : false
                  );
                }

                if (typeof x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"] === "undefined") {
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 125, false);

                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 28, false);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 0, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 4, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 8, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 12, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 16, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 20, undefined);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 26, false);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 24, false);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 27, false);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 25, false);

                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 28, false);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 0, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 4, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 8, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 12, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 16, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 20, undefined);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 26, false);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 24, false);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 27, false);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 25, false);

                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 28, false);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 0, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 4, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 8, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 12, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 16, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 20, undefined);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 26, false);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 24, false);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 27, false);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 25, false);

                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 28, false);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 0, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 4, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 8, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 12, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 16, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 20, undefined);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 26, false);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 24, false);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 27, false);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 25, false);
                } else {
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 125, true);

                  if (typeof x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] === "undefined") {
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 28, false);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 0, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 4, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 8, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 12, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 16, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 20, undefined);
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 26, false);
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 24, false);
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 27, false);
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 25, false);
                  } else {
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 28, true);
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 0,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["Active"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 4,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["Effective"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 8,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserPolicy"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 12,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["DevicePolicy"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 16,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserSetting"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 20,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["SharedSetting"]
                    );
                    A.store.Bool(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 26,
                      "UserEditable" in x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]
                        ? true
                        : false
                    );
                    A.store.Bool(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 24,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"]
                        ? true
                        : false
                    );
                    A.store.Bool(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 27,
                      "DeviceEditable" in x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]
                        ? true
                        : false
                    );
                    A.store.Bool(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 25,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"]
                        ? true
                        : false
                    );
                  }

                  if (typeof x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] === "undefined") {
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 28, false);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 0, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 4, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 8, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 12, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 16, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 20, undefined);
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 26, false);
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 24, false);
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 27, false);
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 25, false);
                  } else {
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 28, true);
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 0,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["Active"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 4,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["Effective"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 8,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserPolicy"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 12,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["DevicePolicy"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 16,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserSetting"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 20,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["SharedSetting"]
                    );
                    A.store.Bool(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 26,
                      "UserEditable" in x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]
                        ? true
                        : false
                    );
                    A.store.Bool(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 24,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"] ? true : false
                    );
                    A.store.Bool(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 27,
                      "DeviceEditable" in x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]
                        ? true
                        : false
                    );
                    A.store.Bool(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 25,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"]
                        ? true
                        : false
                    );
                  }

                  if (typeof x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] === "undefined") {
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 28, false);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 0, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 4, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 8, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 12, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 16, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 20, undefined);
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 26, false);
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 24, false);
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 27, false);
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 25, false);
                  } else {
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 28, true);
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 0,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["Active"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 4,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["Effective"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 8,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserPolicy"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 12,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["DevicePolicy"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 16,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserSetting"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 20,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["SharedSetting"]
                    );
                    A.store.Bool(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 26,
                      "UserEditable" in x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]
                        ? true
                        : false
                    );
                    A.store.Bool(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 24,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"]
                        ? true
                        : false
                    );
                    A.store.Bool(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 27,
                      "DeviceEditable" in x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]
                        ? true
                        : false
                    );
                    A.store.Bool(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 25,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"]
                        ? true
                        : false
                    );
                  }

                  if (
                    typeof x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] === "undefined"
                  ) {
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 28, false);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 0, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 4, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 8, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 12, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 16, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 20, undefined);
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 26, false);
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 24, false);
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 27, false);
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 25, false);
                  } else {
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 28, true);
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 0,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Active"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 4,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Effective"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 8,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserPolicy"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 12,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DevicePolicy"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 16,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserSetting"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 20,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["SharedSetting"]
                    );
                    A.store.Bool(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 26,
                      "UserEditable" in x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]
                        ? true
                        : false
                    );
                    A.store.Bool(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 24,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"]
                        ? true
                        : false
                    );
                    A.store.Bool(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 27,
                      "DeviceEditable" in x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]
                        ? true
                        : false
                    );
                    A.store.Bool(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 25,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"]
                        ? true
                        : false
                    );
                  }
                }

                if (typeof x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"] === "undefined") {
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 160 + 28, false);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 160 + 0, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 160 + 4, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 160 + 8, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 160 + 12, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 160 + 16, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 160 + 20, undefined);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 160 + 26, false);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 160 + 24, false);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 160 + 27, false);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 160 + 25, false);
                } else {
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 160 + 28, true);
                  A.store.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 160 + 0,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 160 + 4,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 160 + 8,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 160 + 12,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 160 + 16,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 160 + 20,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 480 + 32 + 160 + 26,
                    "UserEditable" in x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 480 + 32 + 160 + 24,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserEditable"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 480 + 32 + 160 + 27,
                    "DeviceEditable" in x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 56 + 480 + 32 + 160 + 25,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"] ? true : false
                  );
                }

                if (typeof x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"] === "undefined") {
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 125, false);

                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 28, false);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 0, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 4, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 8, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 12, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 16, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 20, undefined);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 26, false);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 24, false);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 27, false);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 25, false);

                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 28, false);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 0, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 4, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 8, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 12, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 16, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 20, undefined);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 26, false);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 24, false);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 27, false);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 25, false);

                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 28, false);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 0, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 4, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 8, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 12, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 16, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 20, undefined);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 26, false);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 24, false);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 27, false);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 25, false);

                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 28, false);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 0, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 4, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 8, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 12, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 16, undefined);
                  A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 20, undefined);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 26, false);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 24, false);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 27, false);
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 25, false);
                } else {
                  A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 125, true);

                  if (typeof x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] === "undefined") {
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 28, false);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 0, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 4, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 8, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 12, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 16, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 20, undefined);
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 26, false);
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 24, false);
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 27, false);
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 25, false);
                  } else {
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 28, true);
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 0,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["Active"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 4,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["Effective"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 8,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserPolicy"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 12,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["DevicePolicy"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 16,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserSetting"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 20,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["SharedSetting"]
                    );
                    A.store.Bool(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 26,
                      "UserEditable" in x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]
                        ? true
                        : false
                    );
                    A.store.Bool(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 24,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"]
                        ? true
                        : false
                    );
                    A.store.Bool(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 27,
                      "DeviceEditable" in x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]
                        ? true
                        : false
                    );
                    A.store.Bool(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 25,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"]
                        ? true
                        : false
                    );
                  }

                  if (typeof x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"] === "undefined") {
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 28, false);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 0, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 4, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 8, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 12, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 16, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 20, undefined);
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 26, false);
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 24, false);
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 27, false);
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 25, false);
                  } else {
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 28, true);
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 0,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["Active"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 4,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["Effective"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 8,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserPolicy"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 12,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["DevicePolicy"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 16,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserSetting"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 20,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["SharedSetting"]
                    );
                    A.store.Bool(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 26,
                      "UserEditable" in x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]
                        ? true
                        : false
                    );
                    A.store.Bool(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 24,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"]
                        ? true
                        : false
                    );
                    A.store.Bool(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 27,
                      "DeviceEditable" in x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]
                        ? true
                        : false
                    );
                    A.store.Bool(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 25,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"]
                        ? true
                        : false
                    );
                  }

                  if (typeof x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"] === "undefined") {
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 28, false);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 0, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 4, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 8, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 12, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 16, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 20, undefined);
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 26, false);
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 24, false);
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 27, false);
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 25, false);
                  } else {
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 28, true);
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 0,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["Active"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 4,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["Effective"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 8,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserPolicy"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 12,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["DevicePolicy"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 16,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserSetting"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 20,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["SharedSetting"]
                    );
                    A.store.Bool(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 26,
                      "UserEditable" in x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]
                        ? true
                        : false
                    );
                    A.store.Bool(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 24,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"]
                        ? true
                        : false
                    );
                    A.store.Bool(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 27,
                      "DeviceEditable" in x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]
                        ? true
                        : false
                    );
                    A.store.Bool(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 25,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"]
                        ? true
                        : false
                    );
                  }

                  if (
                    typeof x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] ===
                    "undefined"
                  ) {
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 28, false);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 0, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 4, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 8, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 12, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 16, undefined);
                    A.store.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 20, undefined);
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 26, false);
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 24, false);
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 27, false);
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 25, false);
                  } else {
                    A.store.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 28, true);
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 0,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Active"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 4,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Effective"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 8,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserPolicy"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 12,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DevicePolicy"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 16,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserSetting"]
                    );
                    A.store.Ref(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 20,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["SharedSetting"]
                    );
                    A.store.Bool(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 26,
                      "UserEditable" in x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]
                        ? true
                        : false
                    );
                    A.store.Bool(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 24,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"]
                        ? true
                        : false
                    );
                    A.store.Bool(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 27,
                      "DeviceEditable" in x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]
                        ? true
                        : false
                    );
                    A.store.Bool(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 25,
                      x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"]
                        ? true
                        : false
                    );
                  }
                }
              }

              if (typeof x["VPN"]["IPsec"]["EAP"]["ClientCertPKCS11Id"] === "undefined") {
                A.store.Bool(ptr + 2132 + 56 + 480 + 352 + 28, false);
                A.store.Ref(ptr + 2132 + 56 + 480 + 352 + 0, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 352 + 4, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 352 + 8, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 352 + 12, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 352 + 16, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 352 + 20, undefined);
                A.store.Bool(ptr + 2132 + 56 + 480 + 352 + 26, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 352 + 24, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 352 + 27, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 352 + 25, false);
              } else {
                A.store.Bool(ptr + 2132 + 56 + 480 + 352 + 28, true);
                A.store.Ref(ptr + 2132 + 56 + 480 + 352 + 0, x["VPN"]["IPsec"]["EAP"]["ClientCertPKCS11Id"]["Active"]);
                A.store.Ref(
                  ptr + 2132 + 56 + 480 + 352 + 4,
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPKCS11Id"]["Effective"]
                );
                A.store.Ref(
                  ptr + 2132 + 56 + 480 + 352 + 8,
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPKCS11Id"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 2132 + 56 + 480 + 352 + 12,
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPKCS11Id"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 2132 + 56 + 480 + 352 + 16,
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPKCS11Id"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 2132 + 56 + 480 + 352 + 20,
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPKCS11Id"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 352 + 26,
                  "UserEditable" in x["VPN"]["IPsec"]["EAP"]["ClientCertPKCS11Id"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 352 + 24,
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPKCS11Id"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 352 + 27,
                  "DeviceEditable" in x["VPN"]["IPsec"]["EAP"]["ClientCertPKCS11Id"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 352 + 25,
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPKCS11Id"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["VPN"]["IPsec"]["EAP"]["ClientCertProvisioningProfileId"] === "undefined") {
                A.store.Bool(ptr + 2132 + 56 + 480 + 384 + 28, false);
                A.store.Ref(ptr + 2132 + 56 + 480 + 384 + 0, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 384 + 4, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 384 + 8, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 384 + 12, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 384 + 16, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 384 + 20, undefined);
                A.store.Bool(ptr + 2132 + 56 + 480 + 384 + 26, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 384 + 24, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 384 + 27, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 384 + 25, false);
              } else {
                A.store.Bool(ptr + 2132 + 56 + 480 + 384 + 28, true);
                A.store.Ref(
                  ptr + 2132 + 56 + 480 + 384 + 0,
                  x["VPN"]["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]["Active"]
                );
                A.store.Ref(
                  ptr + 2132 + 56 + 480 + 384 + 4,
                  x["VPN"]["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]["Effective"]
                );
                A.store.Ref(
                  ptr + 2132 + 56 + 480 + 384 + 8,
                  x["VPN"]["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 2132 + 56 + 480 + 384 + 12,
                  x["VPN"]["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 2132 + 56 + 480 + 384 + 16,
                  x["VPN"]["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 2132 + 56 + 480 + 384 + 20,
                  x["VPN"]["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 384 + 26,
                  "UserEditable" in x["VPN"]["IPsec"]["EAP"]["ClientCertProvisioningProfileId"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 384 + 24,
                  x["VPN"]["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 384 + 27,
                  "DeviceEditable" in x["VPN"]["IPsec"]["EAP"]["ClientCertProvisioningProfileId"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 384 + 25,
                  x["VPN"]["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["VPN"]["IPsec"]["EAP"]["ClientCertRef"] === "undefined") {
                A.store.Bool(ptr + 2132 + 56 + 480 + 416 + 28, false);
                A.store.Ref(ptr + 2132 + 56 + 480 + 416 + 0, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 416 + 4, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 416 + 8, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 416 + 12, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 416 + 16, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 416 + 20, undefined);
                A.store.Bool(ptr + 2132 + 56 + 480 + 416 + 26, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 416 + 24, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 416 + 27, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 416 + 25, false);
              } else {
                A.store.Bool(ptr + 2132 + 56 + 480 + 416 + 28, true);
                A.store.Ref(ptr + 2132 + 56 + 480 + 416 + 0, x["VPN"]["IPsec"]["EAP"]["ClientCertRef"]["Active"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 416 + 4, x["VPN"]["IPsec"]["EAP"]["ClientCertRef"]["Effective"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 416 + 8, x["VPN"]["IPsec"]["EAP"]["ClientCertRef"]["UserPolicy"]);
                A.store.Ref(
                  ptr + 2132 + 56 + 480 + 416 + 12,
                  x["VPN"]["IPsec"]["EAP"]["ClientCertRef"]["DevicePolicy"]
                );
                A.store.Ref(ptr + 2132 + 56 + 480 + 416 + 16, x["VPN"]["IPsec"]["EAP"]["ClientCertRef"]["UserSetting"]);
                A.store.Ref(
                  ptr + 2132 + 56 + 480 + 416 + 20,
                  x["VPN"]["IPsec"]["EAP"]["ClientCertRef"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 416 + 26,
                  "UserEditable" in x["VPN"]["IPsec"]["EAP"]["ClientCertRef"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 416 + 24,
                  x["VPN"]["IPsec"]["EAP"]["ClientCertRef"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 416 + 27,
                  "DeviceEditable" in x["VPN"]["IPsec"]["EAP"]["ClientCertRef"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 416 + 25,
                  x["VPN"]["IPsec"]["EAP"]["ClientCertRef"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["VPN"]["IPsec"]["EAP"]["ClientCertType"] === "undefined") {
                A.store.Bool(ptr + 2132 + 56 + 480 + 448 + 28, false);
                A.store.Ref(ptr + 2132 + 56 + 480 + 448 + 0, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 448 + 4, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 448 + 8, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 448 + 12, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 448 + 16, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 448 + 20, undefined);
                A.store.Bool(ptr + 2132 + 56 + 480 + 448 + 26, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 448 + 24, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 448 + 27, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 448 + 25, false);
              } else {
                A.store.Bool(ptr + 2132 + 56 + 480 + 448 + 28, true);
                A.store.Ref(ptr + 2132 + 56 + 480 + 448 + 0, x["VPN"]["IPsec"]["EAP"]["ClientCertType"]["Active"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 448 + 4, x["VPN"]["IPsec"]["EAP"]["ClientCertType"]["Effective"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 448 + 8, x["VPN"]["IPsec"]["EAP"]["ClientCertType"]["UserPolicy"]);
                A.store.Ref(
                  ptr + 2132 + 56 + 480 + 448 + 12,
                  x["VPN"]["IPsec"]["EAP"]["ClientCertType"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 2132 + 56 + 480 + 448 + 16,
                  x["VPN"]["IPsec"]["EAP"]["ClientCertType"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 2132 + 56 + 480 + 448 + 20,
                  x["VPN"]["IPsec"]["EAP"]["ClientCertType"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 448 + 26,
                  "UserEditable" in x["VPN"]["IPsec"]["EAP"]["ClientCertType"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 448 + 24,
                  x["VPN"]["IPsec"]["EAP"]["ClientCertType"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 448 + 27,
                  "DeviceEditable" in x["VPN"]["IPsec"]["EAP"]["ClientCertType"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 448 + 25,
                  x["VPN"]["IPsec"]["EAP"]["ClientCertType"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["VPN"]["IPsec"]["EAP"]["Identity"] === "undefined") {
                A.store.Bool(ptr + 2132 + 56 + 480 + 480 + 28, false);
                A.store.Ref(ptr + 2132 + 56 + 480 + 480 + 0, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 480 + 4, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 480 + 8, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 480 + 12, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 480 + 16, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 480 + 20, undefined);
                A.store.Bool(ptr + 2132 + 56 + 480 + 480 + 26, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 480 + 24, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 480 + 27, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 480 + 25, false);
              } else {
                A.store.Bool(ptr + 2132 + 56 + 480 + 480 + 28, true);
                A.store.Ref(ptr + 2132 + 56 + 480 + 480 + 0, x["VPN"]["IPsec"]["EAP"]["Identity"]["Active"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 480 + 4, x["VPN"]["IPsec"]["EAP"]["Identity"]["Effective"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 480 + 8, x["VPN"]["IPsec"]["EAP"]["Identity"]["UserPolicy"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 480 + 12, x["VPN"]["IPsec"]["EAP"]["Identity"]["DevicePolicy"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 480 + 16, x["VPN"]["IPsec"]["EAP"]["Identity"]["UserSetting"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 480 + 20, x["VPN"]["IPsec"]["EAP"]["Identity"]["SharedSetting"]);
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 480 + 26,
                  "UserEditable" in x["VPN"]["IPsec"]["EAP"]["Identity"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 480 + 24,
                  x["VPN"]["IPsec"]["EAP"]["Identity"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 480 + 27,
                  "DeviceEditable" in x["VPN"]["IPsec"]["EAP"]["Identity"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 480 + 25,
                  x["VPN"]["IPsec"]["EAP"]["Identity"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["VPN"]["IPsec"]["EAP"]["Inner"] === "undefined") {
                A.store.Bool(ptr + 2132 + 56 + 480 + 512 + 28, false);
                A.store.Ref(ptr + 2132 + 56 + 480 + 512 + 0, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 512 + 4, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 512 + 8, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 512 + 12, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 512 + 16, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 512 + 20, undefined);
                A.store.Bool(ptr + 2132 + 56 + 480 + 512 + 26, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 512 + 24, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 512 + 27, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 512 + 25, false);
              } else {
                A.store.Bool(ptr + 2132 + 56 + 480 + 512 + 28, true);
                A.store.Ref(ptr + 2132 + 56 + 480 + 512 + 0, x["VPN"]["IPsec"]["EAP"]["Inner"]["Active"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 512 + 4, x["VPN"]["IPsec"]["EAP"]["Inner"]["Effective"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 512 + 8, x["VPN"]["IPsec"]["EAP"]["Inner"]["UserPolicy"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 512 + 12, x["VPN"]["IPsec"]["EAP"]["Inner"]["DevicePolicy"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 512 + 16, x["VPN"]["IPsec"]["EAP"]["Inner"]["UserSetting"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 512 + 20, x["VPN"]["IPsec"]["EAP"]["Inner"]["SharedSetting"]);
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 512 + 26,
                  "UserEditable" in x["VPN"]["IPsec"]["EAP"]["Inner"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 512 + 24,
                  x["VPN"]["IPsec"]["EAP"]["Inner"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 512 + 27,
                  "DeviceEditable" in x["VPN"]["IPsec"]["EAP"]["Inner"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 512 + 25,
                  x["VPN"]["IPsec"]["EAP"]["Inner"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["VPN"]["IPsec"]["EAP"]["Outer"] === "undefined") {
                A.store.Bool(ptr + 2132 + 56 + 480 + 544 + 28, false);
                A.store.Ref(ptr + 2132 + 56 + 480 + 544 + 0, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 544 + 4, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 544 + 8, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 544 + 12, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 544 + 16, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 544 + 20, undefined);
                A.store.Bool(ptr + 2132 + 56 + 480 + 544 + 26, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 544 + 24, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 544 + 27, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 544 + 25, false);
              } else {
                A.store.Bool(ptr + 2132 + 56 + 480 + 544 + 28, true);
                A.store.Ref(ptr + 2132 + 56 + 480 + 544 + 0, x["VPN"]["IPsec"]["EAP"]["Outer"]["Active"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 544 + 4, x["VPN"]["IPsec"]["EAP"]["Outer"]["Effective"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 544 + 8, x["VPN"]["IPsec"]["EAP"]["Outer"]["UserPolicy"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 544 + 12, x["VPN"]["IPsec"]["EAP"]["Outer"]["DevicePolicy"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 544 + 16, x["VPN"]["IPsec"]["EAP"]["Outer"]["UserSetting"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 544 + 20, x["VPN"]["IPsec"]["EAP"]["Outer"]["SharedSetting"]);
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 544 + 26,
                  "UserEditable" in x["VPN"]["IPsec"]["EAP"]["Outer"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 544 + 24,
                  x["VPN"]["IPsec"]["EAP"]["Outer"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 544 + 27,
                  "DeviceEditable" in x["VPN"]["IPsec"]["EAP"]["Outer"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 544 + 25,
                  x["VPN"]["IPsec"]["EAP"]["Outer"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["VPN"]["IPsec"]["EAP"]["Password"] === "undefined") {
                A.store.Bool(ptr + 2132 + 56 + 480 + 576 + 28, false);
                A.store.Ref(ptr + 2132 + 56 + 480 + 576 + 0, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 576 + 4, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 576 + 8, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 576 + 12, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 576 + 16, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 576 + 20, undefined);
                A.store.Bool(ptr + 2132 + 56 + 480 + 576 + 26, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 576 + 24, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 576 + 27, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 576 + 25, false);
              } else {
                A.store.Bool(ptr + 2132 + 56 + 480 + 576 + 28, true);
                A.store.Ref(ptr + 2132 + 56 + 480 + 576 + 0, x["VPN"]["IPsec"]["EAP"]["Password"]["Active"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 576 + 4, x["VPN"]["IPsec"]["EAP"]["Password"]["Effective"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 576 + 8, x["VPN"]["IPsec"]["EAP"]["Password"]["UserPolicy"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 576 + 12, x["VPN"]["IPsec"]["EAP"]["Password"]["DevicePolicy"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 576 + 16, x["VPN"]["IPsec"]["EAP"]["Password"]["UserSetting"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 576 + 20, x["VPN"]["IPsec"]["EAP"]["Password"]["SharedSetting"]);
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 576 + 26,
                  "UserEditable" in x["VPN"]["IPsec"]["EAP"]["Password"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 576 + 24,
                  x["VPN"]["IPsec"]["EAP"]["Password"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 576 + 27,
                  "DeviceEditable" in x["VPN"]["IPsec"]["EAP"]["Password"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 576 + 25,
                  x["VPN"]["IPsec"]["EAP"]["Password"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["VPN"]["IPsec"]["EAP"]["SaveCredentials"] === "undefined") {
                A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 21, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 14, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 0, false);
                A.store.Ref(ptr + 2132 + 56 + 480 + 608 + 4, undefined);
                A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 15, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 8, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 16, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 9, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 17, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 10, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 18, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 11, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 19, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 12, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 20, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 13, false);
              } else {
                A.store.Bool(ptr + 2132 + 56 + 480 + 608 + 21, true);
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 608 + 14,
                  "Active" in x["VPN"]["IPsec"]["EAP"]["SaveCredentials"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 608 + 0,
                  x["VPN"]["IPsec"]["EAP"]["SaveCredentials"]["Active"] ? true : false
                );
                A.store.Ref(ptr + 2132 + 56 + 480 + 608 + 4, x["VPN"]["IPsec"]["EAP"]["SaveCredentials"]["Effective"]);
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 608 + 15,
                  "UserPolicy" in x["VPN"]["IPsec"]["EAP"]["SaveCredentials"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 608 + 8,
                  x["VPN"]["IPsec"]["EAP"]["SaveCredentials"]["UserPolicy"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 608 + 16,
                  "DevicePolicy" in x["VPN"]["IPsec"]["EAP"]["SaveCredentials"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 608 + 9,
                  x["VPN"]["IPsec"]["EAP"]["SaveCredentials"]["DevicePolicy"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 608 + 17,
                  "UserSetting" in x["VPN"]["IPsec"]["EAP"]["SaveCredentials"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 608 + 10,
                  x["VPN"]["IPsec"]["EAP"]["SaveCredentials"]["UserSetting"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 608 + 18,
                  "SharedSetting" in x["VPN"]["IPsec"]["EAP"]["SaveCredentials"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 608 + 11,
                  x["VPN"]["IPsec"]["EAP"]["SaveCredentials"]["SharedSetting"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 608 + 19,
                  "UserEditable" in x["VPN"]["IPsec"]["EAP"]["SaveCredentials"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 608 + 12,
                  x["VPN"]["IPsec"]["EAP"]["SaveCredentials"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 608 + 20,
                  "DeviceEditable" in x["VPN"]["IPsec"]["EAP"]["SaveCredentials"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 608 + 13,
                  x["VPN"]["IPsec"]["EAP"]["SaveCredentials"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["VPN"]["IPsec"]["EAP"]["ServerCAPEMs"] === "undefined") {
                A.store.Bool(ptr + 2132 + 56 + 480 + 632 + 28, false);
                A.store.Ref(ptr + 2132 + 56 + 480 + 632 + 0, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 632 + 4, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 632 + 8, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 632 + 12, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 632 + 16, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 632 + 20, undefined);
                A.store.Bool(ptr + 2132 + 56 + 480 + 632 + 26, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 632 + 24, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 632 + 27, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 632 + 25, false);
              } else {
                A.store.Bool(ptr + 2132 + 56 + 480 + 632 + 28, true);
                A.store.Ref(ptr + 2132 + 56 + 480 + 632 + 0, x["VPN"]["IPsec"]["EAP"]["ServerCAPEMs"]["Active"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 632 + 4, x["VPN"]["IPsec"]["EAP"]["ServerCAPEMs"]["Effective"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 632 + 8, x["VPN"]["IPsec"]["EAP"]["ServerCAPEMs"]["UserPolicy"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 632 + 12, x["VPN"]["IPsec"]["EAP"]["ServerCAPEMs"]["DevicePolicy"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 632 + 16, x["VPN"]["IPsec"]["EAP"]["ServerCAPEMs"]["UserSetting"]);
                A.store.Ref(
                  ptr + 2132 + 56 + 480 + 632 + 20,
                  x["VPN"]["IPsec"]["EAP"]["ServerCAPEMs"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 632 + 26,
                  "UserEditable" in x["VPN"]["IPsec"]["EAP"]["ServerCAPEMs"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 632 + 24,
                  x["VPN"]["IPsec"]["EAP"]["ServerCAPEMs"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 632 + 27,
                  "DeviceEditable" in x["VPN"]["IPsec"]["EAP"]["ServerCAPEMs"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 632 + 25,
                  x["VPN"]["IPsec"]["EAP"]["ServerCAPEMs"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["VPN"]["IPsec"]["EAP"]["ServerCARefs"] === "undefined") {
                A.store.Bool(ptr + 2132 + 56 + 480 + 664 + 28, false);
                A.store.Ref(ptr + 2132 + 56 + 480 + 664 + 0, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 664 + 4, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 664 + 8, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 664 + 12, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 664 + 16, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 664 + 20, undefined);
                A.store.Bool(ptr + 2132 + 56 + 480 + 664 + 26, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 664 + 24, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 664 + 27, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 664 + 25, false);
              } else {
                A.store.Bool(ptr + 2132 + 56 + 480 + 664 + 28, true);
                A.store.Ref(ptr + 2132 + 56 + 480 + 664 + 0, x["VPN"]["IPsec"]["EAP"]["ServerCARefs"]["Active"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 664 + 4, x["VPN"]["IPsec"]["EAP"]["ServerCARefs"]["Effective"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 664 + 8, x["VPN"]["IPsec"]["EAP"]["ServerCARefs"]["UserPolicy"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 664 + 12, x["VPN"]["IPsec"]["EAP"]["ServerCARefs"]["DevicePolicy"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 664 + 16, x["VPN"]["IPsec"]["EAP"]["ServerCARefs"]["UserSetting"]);
                A.store.Ref(
                  ptr + 2132 + 56 + 480 + 664 + 20,
                  x["VPN"]["IPsec"]["EAP"]["ServerCARefs"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 664 + 26,
                  "UserEditable" in x["VPN"]["IPsec"]["EAP"]["ServerCARefs"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 664 + 24,
                  x["VPN"]["IPsec"]["EAP"]["ServerCARefs"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 664 + 27,
                  "DeviceEditable" in x["VPN"]["IPsec"]["EAP"]["ServerCARefs"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 664 + 25,
                  x["VPN"]["IPsec"]["EAP"]["ServerCARefs"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["VPN"]["IPsec"]["EAP"]["SubjectMatch"] === "undefined") {
                A.store.Bool(ptr + 2132 + 56 + 480 + 696 + 28, false);
                A.store.Ref(ptr + 2132 + 56 + 480 + 696 + 0, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 696 + 4, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 696 + 8, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 696 + 12, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 696 + 16, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 696 + 20, undefined);
                A.store.Bool(ptr + 2132 + 56 + 480 + 696 + 26, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 696 + 24, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 696 + 27, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 696 + 25, false);
              } else {
                A.store.Bool(ptr + 2132 + 56 + 480 + 696 + 28, true);
                A.store.Ref(ptr + 2132 + 56 + 480 + 696 + 0, x["VPN"]["IPsec"]["EAP"]["SubjectMatch"]["Active"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 696 + 4, x["VPN"]["IPsec"]["EAP"]["SubjectMatch"]["Effective"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 696 + 8, x["VPN"]["IPsec"]["EAP"]["SubjectMatch"]["UserPolicy"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 696 + 12, x["VPN"]["IPsec"]["EAP"]["SubjectMatch"]["DevicePolicy"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 696 + 16, x["VPN"]["IPsec"]["EAP"]["SubjectMatch"]["UserSetting"]);
                A.store.Ref(
                  ptr + 2132 + 56 + 480 + 696 + 20,
                  x["VPN"]["IPsec"]["EAP"]["SubjectMatch"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 696 + 26,
                  "UserEditable" in x["VPN"]["IPsec"]["EAP"]["SubjectMatch"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 696 + 24,
                  x["VPN"]["IPsec"]["EAP"]["SubjectMatch"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 696 + 27,
                  "DeviceEditable" in x["VPN"]["IPsec"]["EAP"]["SubjectMatch"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 696 + 25,
                  x["VPN"]["IPsec"]["EAP"]["SubjectMatch"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["VPN"]["IPsec"]["EAP"]["TLSVersionMax"] === "undefined") {
                A.store.Bool(ptr + 2132 + 56 + 480 + 728 + 28, false);
                A.store.Ref(ptr + 2132 + 56 + 480 + 728 + 0, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 728 + 4, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 728 + 8, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 728 + 12, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 728 + 16, undefined);
                A.store.Ref(ptr + 2132 + 56 + 480 + 728 + 20, undefined);
                A.store.Bool(ptr + 2132 + 56 + 480 + 728 + 26, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 728 + 24, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 728 + 27, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 728 + 25, false);
              } else {
                A.store.Bool(ptr + 2132 + 56 + 480 + 728 + 28, true);
                A.store.Ref(ptr + 2132 + 56 + 480 + 728 + 0, x["VPN"]["IPsec"]["EAP"]["TLSVersionMax"]["Active"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 728 + 4, x["VPN"]["IPsec"]["EAP"]["TLSVersionMax"]["Effective"]);
                A.store.Ref(ptr + 2132 + 56 + 480 + 728 + 8, x["VPN"]["IPsec"]["EAP"]["TLSVersionMax"]["UserPolicy"]);
                A.store.Ref(
                  ptr + 2132 + 56 + 480 + 728 + 12,
                  x["VPN"]["IPsec"]["EAP"]["TLSVersionMax"]["DevicePolicy"]
                );
                A.store.Ref(ptr + 2132 + 56 + 480 + 728 + 16, x["VPN"]["IPsec"]["EAP"]["TLSVersionMax"]["UserSetting"]);
                A.store.Ref(
                  ptr + 2132 + 56 + 480 + 728 + 20,
                  x["VPN"]["IPsec"]["EAP"]["TLSVersionMax"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 728 + 26,
                  "UserEditable" in x["VPN"]["IPsec"]["EAP"]["TLSVersionMax"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 728 + 24,
                  x["VPN"]["IPsec"]["EAP"]["TLSVersionMax"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 728 + 27,
                  "DeviceEditable" in x["VPN"]["IPsec"]["EAP"]["TLSVersionMax"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 728 + 25,
                  x["VPN"]["IPsec"]["EAP"]["TLSVersionMax"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"] === "undefined") {
                A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 21, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 14, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 0, false);
                A.store.Ref(ptr + 2132 + 56 + 480 + 760 + 4, undefined);
                A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 15, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 8, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 16, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 9, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 17, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 10, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 18, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 11, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 19, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 12, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 20, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 13, false);
              } else {
                A.store.Bool(ptr + 2132 + 56 + 480 + 760 + 21, true);
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 760 + 14,
                  "Active" in x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 760 + 0,
                  x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"]["Active"] ? true : false
                );
                A.store.Ref(
                  ptr + 2132 + 56 + 480 + 760 + 4,
                  x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"]["Effective"]
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 760 + 15,
                  "UserPolicy" in x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 760 + 8,
                  x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"]["UserPolicy"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 760 + 16,
                  "DevicePolicy" in x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 760 + 9,
                  x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"]["DevicePolicy"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 760 + 17,
                  "UserSetting" in x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 760 + 10,
                  x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"]["UserSetting"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 760 + 18,
                  "SharedSetting" in x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 760 + 11,
                  x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"]["SharedSetting"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 760 + 19,
                  "UserEditable" in x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 760 + 12,
                  x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 760 + 20,
                  "DeviceEditable" in x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 760 + 13,
                  x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"] === "undefined") {
                A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 21, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 14, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 0, false);
                A.store.Ref(ptr + 2132 + 56 + 480 + 784 + 4, undefined);
                A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 15, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 8, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 16, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 9, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 17, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 10, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 18, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 11, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 19, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 12, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 20, false);
                A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 13, false);
              } else {
                A.store.Bool(ptr + 2132 + 56 + 480 + 784 + 21, true);
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 784 + 14,
                  "Active" in x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 784 + 0,
                  x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"]["Active"] ? true : false
                );
                A.store.Ref(ptr + 2132 + 56 + 480 + 784 + 4, x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"]["Effective"]);
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 784 + 15,
                  "UserPolicy" in x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 784 + 8,
                  x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"]["UserPolicy"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 784 + 16,
                  "DevicePolicy" in x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 784 + 9,
                  x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"]["DevicePolicy"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 784 + 17,
                  "UserSetting" in x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 784 + 10,
                  x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"]["UserSetting"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 784 + 18,
                  "SharedSetting" in x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 784 + 11,
                  x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"]["SharedSetting"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 784 + 19,
                  "UserEditable" in x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 784 + 12,
                  x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 784 + 20,
                  "DeviceEditable" in x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 480 + 784 + 13,
                  x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"]["DeviceEditable"] ? true : false
                );
              }
            }

            if (typeof x["VPN"]["IPsec"]["Group"] === "undefined") {
              A.store.Bool(ptr + 2132 + 56 + 1288 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 1288 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 1288 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 1288 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 1288 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 1288 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 1288 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 1288 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 1288 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 1288 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 1288 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 56 + 1288 + 28, true);
              A.store.Ref(ptr + 2132 + 56 + 1288 + 0, x["VPN"]["IPsec"]["Group"]["Active"]);
              A.store.Ref(ptr + 2132 + 56 + 1288 + 4, x["VPN"]["IPsec"]["Group"]["Effective"]);
              A.store.Ref(ptr + 2132 + 56 + 1288 + 8, x["VPN"]["IPsec"]["Group"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 56 + 1288 + 12, x["VPN"]["IPsec"]["Group"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 56 + 1288 + 16, x["VPN"]["IPsec"]["Group"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 56 + 1288 + 20, x["VPN"]["IPsec"]["Group"]["SharedSetting"]);
              A.store.Bool(ptr + 2132 + 56 + 1288 + 26, "UserEditable" in x["VPN"]["IPsec"]["Group"] ? true : false);
              A.store.Bool(ptr + 2132 + 56 + 1288 + 24, x["VPN"]["IPsec"]["Group"]["UserEditable"] ? true : false);
              A.store.Bool(ptr + 2132 + 56 + 1288 + 27, "DeviceEditable" in x["VPN"]["IPsec"]["Group"] ? true : false);
              A.store.Bool(ptr + 2132 + 56 + 1288 + 25, x["VPN"]["IPsec"]["Group"]["DeviceEditable"] ? true : false);
            }

            if (typeof x["VPN"]["IPsec"]["IKEVersion"] === "undefined") {
              A.store.Bool(ptr + 2132 + 56 + 1320 + 33, false);
              A.store.Bool(ptr + 2132 + 56 + 1320 + 26, false);
              A.store.Int32(ptr + 2132 + 56 + 1320 + 0, 0);
              A.store.Ref(ptr + 2132 + 56 + 1320 + 4, undefined);
              A.store.Bool(ptr + 2132 + 56 + 1320 + 27, false);
              A.store.Int32(ptr + 2132 + 56 + 1320 + 8, 0);
              A.store.Bool(ptr + 2132 + 56 + 1320 + 28, false);
              A.store.Int32(ptr + 2132 + 56 + 1320 + 12, 0);
              A.store.Bool(ptr + 2132 + 56 + 1320 + 29, false);
              A.store.Int32(ptr + 2132 + 56 + 1320 + 16, 0);
              A.store.Bool(ptr + 2132 + 56 + 1320 + 30, false);
              A.store.Int32(ptr + 2132 + 56 + 1320 + 20, 0);
              A.store.Bool(ptr + 2132 + 56 + 1320 + 31, false);
              A.store.Bool(ptr + 2132 + 56 + 1320 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 1320 + 32, false);
              A.store.Bool(ptr + 2132 + 56 + 1320 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 56 + 1320 + 33, true);
              A.store.Bool(ptr + 2132 + 56 + 1320 + 26, "Active" in x["VPN"]["IPsec"]["IKEVersion"] ? true : false);
              A.store.Int32(
                ptr + 2132 + 56 + 1320 + 0,
                x["VPN"]["IPsec"]["IKEVersion"]["Active"] === undefined
                  ? 0
                  : (x["VPN"]["IPsec"]["IKEVersion"]["Active"] as number)
              );
              A.store.Ref(ptr + 2132 + 56 + 1320 + 4, x["VPN"]["IPsec"]["IKEVersion"]["Effective"]);
              A.store.Bool(ptr + 2132 + 56 + 1320 + 27, "UserPolicy" in x["VPN"]["IPsec"]["IKEVersion"] ? true : false);
              A.store.Int32(
                ptr + 2132 + 56 + 1320 + 8,
                x["VPN"]["IPsec"]["IKEVersion"]["UserPolicy"] === undefined
                  ? 0
                  : (x["VPN"]["IPsec"]["IKEVersion"]["UserPolicy"] as number)
              );
              A.store.Bool(
                ptr + 2132 + 56 + 1320 + 28,
                "DevicePolicy" in x["VPN"]["IPsec"]["IKEVersion"] ? true : false
              );
              A.store.Int32(
                ptr + 2132 + 56 + 1320 + 12,
                x["VPN"]["IPsec"]["IKEVersion"]["DevicePolicy"] === undefined
                  ? 0
                  : (x["VPN"]["IPsec"]["IKEVersion"]["DevicePolicy"] as number)
              );
              A.store.Bool(
                ptr + 2132 + 56 + 1320 + 29,
                "UserSetting" in x["VPN"]["IPsec"]["IKEVersion"] ? true : false
              );
              A.store.Int32(
                ptr + 2132 + 56 + 1320 + 16,
                x["VPN"]["IPsec"]["IKEVersion"]["UserSetting"] === undefined
                  ? 0
                  : (x["VPN"]["IPsec"]["IKEVersion"]["UserSetting"] as number)
              );
              A.store.Bool(
                ptr + 2132 + 56 + 1320 + 30,
                "SharedSetting" in x["VPN"]["IPsec"]["IKEVersion"] ? true : false
              );
              A.store.Int32(
                ptr + 2132 + 56 + 1320 + 20,
                x["VPN"]["IPsec"]["IKEVersion"]["SharedSetting"] === undefined
                  ? 0
                  : (x["VPN"]["IPsec"]["IKEVersion"]["SharedSetting"] as number)
              );
              A.store.Bool(
                ptr + 2132 + 56 + 1320 + 31,
                "UserEditable" in x["VPN"]["IPsec"]["IKEVersion"] ? true : false
              );
              A.store.Bool(ptr + 2132 + 56 + 1320 + 24, x["VPN"]["IPsec"]["IKEVersion"]["UserEditable"] ? true : false);
              A.store.Bool(
                ptr + 2132 + 56 + 1320 + 32,
                "DeviceEditable" in x["VPN"]["IPsec"]["IKEVersion"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 56 + 1320 + 25,
                x["VPN"]["IPsec"]["IKEVersion"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["IPsec"]["PSK"] === "undefined") {
              A.store.Bool(ptr + 2132 + 56 + 1356 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 1356 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 1356 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 1356 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 1356 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 1356 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 1356 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 1356 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 1356 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 1356 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 1356 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 56 + 1356 + 28, true);
              A.store.Ref(ptr + 2132 + 56 + 1356 + 0, x["VPN"]["IPsec"]["PSK"]["Active"]);
              A.store.Ref(ptr + 2132 + 56 + 1356 + 4, x["VPN"]["IPsec"]["PSK"]["Effective"]);
              A.store.Ref(ptr + 2132 + 56 + 1356 + 8, x["VPN"]["IPsec"]["PSK"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 56 + 1356 + 12, x["VPN"]["IPsec"]["PSK"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 56 + 1356 + 16, x["VPN"]["IPsec"]["PSK"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 56 + 1356 + 20, x["VPN"]["IPsec"]["PSK"]["SharedSetting"]);
              A.store.Bool(ptr + 2132 + 56 + 1356 + 26, "UserEditable" in x["VPN"]["IPsec"]["PSK"] ? true : false);
              A.store.Bool(ptr + 2132 + 56 + 1356 + 24, x["VPN"]["IPsec"]["PSK"]["UserEditable"] ? true : false);
              A.store.Bool(ptr + 2132 + 56 + 1356 + 27, "DeviceEditable" in x["VPN"]["IPsec"]["PSK"] ? true : false);
              A.store.Bool(ptr + 2132 + 56 + 1356 + 25, x["VPN"]["IPsec"]["PSK"]["DeviceEditable"] ? true : false);
            }

            if (typeof x["VPN"]["IPsec"]["SaveCredentials"] === "undefined") {
              A.store.Bool(ptr + 2132 + 56 + 1388 + 21, false);
              A.store.Bool(ptr + 2132 + 56 + 1388 + 14, false);
              A.store.Bool(ptr + 2132 + 56 + 1388 + 0, false);
              A.store.Ref(ptr + 2132 + 56 + 1388 + 4, undefined);
              A.store.Bool(ptr + 2132 + 56 + 1388 + 15, false);
              A.store.Bool(ptr + 2132 + 56 + 1388 + 8, false);
              A.store.Bool(ptr + 2132 + 56 + 1388 + 16, false);
              A.store.Bool(ptr + 2132 + 56 + 1388 + 9, false);
              A.store.Bool(ptr + 2132 + 56 + 1388 + 17, false);
              A.store.Bool(ptr + 2132 + 56 + 1388 + 10, false);
              A.store.Bool(ptr + 2132 + 56 + 1388 + 18, false);
              A.store.Bool(ptr + 2132 + 56 + 1388 + 11, false);
              A.store.Bool(ptr + 2132 + 56 + 1388 + 19, false);
              A.store.Bool(ptr + 2132 + 56 + 1388 + 12, false);
              A.store.Bool(ptr + 2132 + 56 + 1388 + 20, false);
              A.store.Bool(ptr + 2132 + 56 + 1388 + 13, false);
            } else {
              A.store.Bool(ptr + 2132 + 56 + 1388 + 21, true);
              A.store.Bool(
                ptr + 2132 + 56 + 1388 + 14,
                "Active" in x["VPN"]["IPsec"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(ptr + 2132 + 56 + 1388 + 0, x["VPN"]["IPsec"]["SaveCredentials"]["Active"] ? true : false);
              A.store.Ref(ptr + 2132 + 56 + 1388 + 4, x["VPN"]["IPsec"]["SaveCredentials"]["Effective"]);
              A.store.Bool(
                ptr + 2132 + 56 + 1388 + 15,
                "UserPolicy" in x["VPN"]["IPsec"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 56 + 1388 + 8,
                x["VPN"]["IPsec"]["SaveCredentials"]["UserPolicy"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 56 + 1388 + 16,
                "DevicePolicy" in x["VPN"]["IPsec"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 56 + 1388 + 9,
                x["VPN"]["IPsec"]["SaveCredentials"]["DevicePolicy"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 56 + 1388 + 17,
                "UserSetting" in x["VPN"]["IPsec"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 56 + 1388 + 10,
                x["VPN"]["IPsec"]["SaveCredentials"]["UserSetting"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 56 + 1388 + 18,
                "SharedSetting" in x["VPN"]["IPsec"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 56 + 1388 + 11,
                x["VPN"]["IPsec"]["SaveCredentials"]["SharedSetting"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 56 + 1388 + 19,
                "UserEditable" in x["VPN"]["IPsec"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 56 + 1388 + 12,
                x["VPN"]["IPsec"]["SaveCredentials"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 56 + 1388 + 20,
                "DeviceEditable" in x["VPN"]["IPsec"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 56 + 1388 + 13,
                x["VPN"]["IPsec"]["SaveCredentials"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["IPsec"]["ServerCAPEMs"] === "undefined") {
              A.store.Bool(ptr + 2132 + 56 + 1412 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 1412 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 1412 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 1412 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 1412 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 1412 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 1412 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 1412 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 1412 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 1412 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 1412 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 56 + 1412 + 28, true);
              A.store.Ref(ptr + 2132 + 56 + 1412 + 0, x["VPN"]["IPsec"]["ServerCAPEMs"]["Active"]);
              A.store.Ref(ptr + 2132 + 56 + 1412 + 4, x["VPN"]["IPsec"]["ServerCAPEMs"]["Effective"]);
              A.store.Ref(ptr + 2132 + 56 + 1412 + 8, x["VPN"]["IPsec"]["ServerCAPEMs"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 56 + 1412 + 12, x["VPN"]["IPsec"]["ServerCAPEMs"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 56 + 1412 + 16, x["VPN"]["IPsec"]["ServerCAPEMs"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 56 + 1412 + 20, x["VPN"]["IPsec"]["ServerCAPEMs"]["SharedSetting"]);
              A.store.Bool(
                ptr + 2132 + 56 + 1412 + 26,
                "UserEditable" in x["VPN"]["IPsec"]["ServerCAPEMs"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 56 + 1412 + 24,
                x["VPN"]["IPsec"]["ServerCAPEMs"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 56 + 1412 + 27,
                "DeviceEditable" in x["VPN"]["IPsec"]["ServerCAPEMs"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 56 + 1412 + 25,
                x["VPN"]["IPsec"]["ServerCAPEMs"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["IPsec"]["ServerCARefs"] === "undefined") {
              A.store.Bool(ptr + 2132 + 56 + 1444 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 1444 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 1444 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 1444 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 1444 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 1444 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 1444 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 1444 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 1444 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 1444 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 1444 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 56 + 1444 + 28, true);
              A.store.Ref(ptr + 2132 + 56 + 1444 + 0, x["VPN"]["IPsec"]["ServerCARefs"]["Active"]);
              A.store.Ref(ptr + 2132 + 56 + 1444 + 4, x["VPN"]["IPsec"]["ServerCARefs"]["Effective"]);
              A.store.Ref(ptr + 2132 + 56 + 1444 + 8, x["VPN"]["IPsec"]["ServerCARefs"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 56 + 1444 + 12, x["VPN"]["IPsec"]["ServerCARefs"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 56 + 1444 + 16, x["VPN"]["IPsec"]["ServerCARefs"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 56 + 1444 + 20, x["VPN"]["IPsec"]["ServerCARefs"]["SharedSetting"]);
              A.store.Bool(
                ptr + 2132 + 56 + 1444 + 26,
                "UserEditable" in x["VPN"]["IPsec"]["ServerCARefs"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 56 + 1444 + 24,
                x["VPN"]["IPsec"]["ServerCARefs"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 56 + 1444 + 27,
                "DeviceEditable" in x["VPN"]["IPsec"]["ServerCARefs"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 56 + 1444 + 25,
                x["VPN"]["IPsec"]["ServerCARefs"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["IPsec"]["XAUTH"] === "undefined") {
              A.store.Bool(ptr + 2132 + 56 + 1476 + 85, false);

              A.store.Bool(ptr + 2132 + 56 + 1476 + 0 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 1476 + 0 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 1476 + 0 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 1476 + 0 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 1476 + 0 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 1476 + 0 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 1476 + 0 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 1476 + 0 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 1476 + 0 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 1476 + 0 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 1476 + 0 + 25, false);

              A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 21, false);
              A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 14, false);
              A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 0, false);
              A.store.Ref(ptr + 2132 + 56 + 1476 + 32 + 4, undefined);
              A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 15, false);
              A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 8, false);
              A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 16, false);
              A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 9, false);
              A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 17, false);
              A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 10, false);
              A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 18, false);
              A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 11, false);
              A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 19, false);
              A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 12, false);
              A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 20, false);
              A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 13, false);

              A.store.Bool(ptr + 2132 + 56 + 1476 + 56 + 28, false);
              A.store.Ref(ptr + 2132 + 56 + 1476 + 56 + 0, undefined);
              A.store.Ref(ptr + 2132 + 56 + 1476 + 56 + 4, undefined);
              A.store.Ref(ptr + 2132 + 56 + 1476 + 56 + 8, undefined);
              A.store.Ref(ptr + 2132 + 56 + 1476 + 56 + 12, undefined);
              A.store.Ref(ptr + 2132 + 56 + 1476 + 56 + 16, undefined);
              A.store.Ref(ptr + 2132 + 56 + 1476 + 56 + 20, undefined);
              A.store.Bool(ptr + 2132 + 56 + 1476 + 56 + 26, false);
              A.store.Bool(ptr + 2132 + 56 + 1476 + 56 + 24, false);
              A.store.Bool(ptr + 2132 + 56 + 1476 + 56 + 27, false);
              A.store.Bool(ptr + 2132 + 56 + 1476 + 56 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 56 + 1476 + 85, true);

              if (typeof x["VPN"]["IPsec"]["XAUTH"]["Password"] === "undefined") {
                A.store.Bool(ptr + 2132 + 56 + 1476 + 0 + 28, false);
                A.store.Ref(ptr + 2132 + 56 + 1476 + 0 + 0, undefined);
                A.store.Ref(ptr + 2132 + 56 + 1476 + 0 + 4, undefined);
                A.store.Ref(ptr + 2132 + 56 + 1476 + 0 + 8, undefined);
                A.store.Ref(ptr + 2132 + 56 + 1476 + 0 + 12, undefined);
                A.store.Ref(ptr + 2132 + 56 + 1476 + 0 + 16, undefined);
                A.store.Ref(ptr + 2132 + 56 + 1476 + 0 + 20, undefined);
                A.store.Bool(ptr + 2132 + 56 + 1476 + 0 + 26, false);
                A.store.Bool(ptr + 2132 + 56 + 1476 + 0 + 24, false);
                A.store.Bool(ptr + 2132 + 56 + 1476 + 0 + 27, false);
                A.store.Bool(ptr + 2132 + 56 + 1476 + 0 + 25, false);
              } else {
                A.store.Bool(ptr + 2132 + 56 + 1476 + 0 + 28, true);
                A.store.Ref(ptr + 2132 + 56 + 1476 + 0 + 0, x["VPN"]["IPsec"]["XAUTH"]["Password"]["Active"]);
                A.store.Ref(ptr + 2132 + 56 + 1476 + 0 + 4, x["VPN"]["IPsec"]["XAUTH"]["Password"]["Effective"]);
                A.store.Ref(ptr + 2132 + 56 + 1476 + 0 + 8, x["VPN"]["IPsec"]["XAUTH"]["Password"]["UserPolicy"]);
                A.store.Ref(ptr + 2132 + 56 + 1476 + 0 + 12, x["VPN"]["IPsec"]["XAUTH"]["Password"]["DevicePolicy"]);
                A.store.Ref(ptr + 2132 + 56 + 1476 + 0 + 16, x["VPN"]["IPsec"]["XAUTH"]["Password"]["UserSetting"]);
                A.store.Ref(ptr + 2132 + 56 + 1476 + 0 + 20, x["VPN"]["IPsec"]["XAUTH"]["Password"]["SharedSetting"]);
                A.store.Bool(
                  ptr + 2132 + 56 + 1476 + 0 + 26,
                  "UserEditable" in x["VPN"]["IPsec"]["XAUTH"]["Password"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 1476 + 0 + 24,
                  x["VPN"]["IPsec"]["XAUTH"]["Password"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 1476 + 0 + 27,
                  "DeviceEditable" in x["VPN"]["IPsec"]["XAUTH"]["Password"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 1476 + 0 + 25,
                  x["VPN"]["IPsec"]["XAUTH"]["Password"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"] === "undefined") {
                A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 21, false);
                A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 14, false);
                A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 0, false);
                A.store.Ref(ptr + 2132 + 56 + 1476 + 32 + 4, undefined);
                A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 15, false);
                A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 8, false);
                A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 16, false);
                A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 9, false);
                A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 17, false);
                A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 10, false);
                A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 18, false);
                A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 11, false);
                A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 19, false);
                A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 12, false);
                A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 20, false);
                A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 13, false);
              } else {
                A.store.Bool(ptr + 2132 + 56 + 1476 + 32 + 21, true);
                A.store.Bool(
                  ptr + 2132 + 56 + 1476 + 32 + 14,
                  "Active" in x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 1476 + 32 + 0,
                  x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"]["Active"] ? true : false
                );
                A.store.Ref(
                  ptr + 2132 + 56 + 1476 + 32 + 4,
                  x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"]["Effective"]
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 1476 + 32 + 15,
                  "UserPolicy" in x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 1476 + 32 + 8,
                  x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"]["UserPolicy"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 1476 + 32 + 16,
                  "DevicePolicy" in x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 1476 + 32 + 9,
                  x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"]["DevicePolicy"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 1476 + 32 + 17,
                  "UserSetting" in x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 1476 + 32 + 10,
                  x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"]["UserSetting"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 1476 + 32 + 18,
                  "SharedSetting" in x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 1476 + 32 + 11,
                  x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"]["SharedSetting"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 1476 + 32 + 19,
                  "UserEditable" in x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 1476 + 32 + 12,
                  x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 1476 + 32 + 20,
                  "DeviceEditable" in x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 1476 + 32 + 13,
                  x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["VPN"]["IPsec"]["XAUTH"]["Username"] === "undefined") {
                A.store.Bool(ptr + 2132 + 56 + 1476 + 56 + 28, false);
                A.store.Ref(ptr + 2132 + 56 + 1476 + 56 + 0, undefined);
                A.store.Ref(ptr + 2132 + 56 + 1476 + 56 + 4, undefined);
                A.store.Ref(ptr + 2132 + 56 + 1476 + 56 + 8, undefined);
                A.store.Ref(ptr + 2132 + 56 + 1476 + 56 + 12, undefined);
                A.store.Ref(ptr + 2132 + 56 + 1476 + 56 + 16, undefined);
                A.store.Ref(ptr + 2132 + 56 + 1476 + 56 + 20, undefined);
                A.store.Bool(ptr + 2132 + 56 + 1476 + 56 + 26, false);
                A.store.Bool(ptr + 2132 + 56 + 1476 + 56 + 24, false);
                A.store.Bool(ptr + 2132 + 56 + 1476 + 56 + 27, false);
                A.store.Bool(ptr + 2132 + 56 + 1476 + 56 + 25, false);
              } else {
                A.store.Bool(ptr + 2132 + 56 + 1476 + 56 + 28, true);
                A.store.Ref(ptr + 2132 + 56 + 1476 + 56 + 0, x["VPN"]["IPsec"]["XAUTH"]["Username"]["Active"]);
                A.store.Ref(ptr + 2132 + 56 + 1476 + 56 + 4, x["VPN"]["IPsec"]["XAUTH"]["Username"]["Effective"]);
                A.store.Ref(ptr + 2132 + 56 + 1476 + 56 + 8, x["VPN"]["IPsec"]["XAUTH"]["Username"]["UserPolicy"]);
                A.store.Ref(ptr + 2132 + 56 + 1476 + 56 + 12, x["VPN"]["IPsec"]["XAUTH"]["Username"]["DevicePolicy"]);
                A.store.Ref(ptr + 2132 + 56 + 1476 + 56 + 16, x["VPN"]["IPsec"]["XAUTH"]["Username"]["UserSetting"]);
                A.store.Ref(ptr + 2132 + 56 + 1476 + 56 + 20, x["VPN"]["IPsec"]["XAUTH"]["Username"]["SharedSetting"]);
                A.store.Bool(
                  ptr + 2132 + 56 + 1476 + 56 + 26,
                  "UserEditable" in x["VPN"]["IPsec"]["XAUTH"]["Username"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 1476 + 56 + 24,
                  x["VPN"]["IPsec"]["XAUTH"]["Username"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 1476 + 56 + 27,
                  "DeviceEditable" in x["VPN"]["IPsec"]["XAUTH"]["Username"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 56 + 1476 + 56 + 25,
                  x["VPN"]["IPsec"]["XAUTH"]["Username"]["DeviceEditable"] ? true : false
                );
              }
            }
          }

          if (typeof x["VPN"]["L2TP"] === "undefined") {
            A.store.Bool(ptr + 2132 + 1620 + 109, false);

            A.store.Bool(ptr + 2132 + 1620 + 0 + 21, false);
            A.store.Bool(ptr + 2132 + 1620 + 0 + 14, false);
            A.store.Bool(ptr + 2132 + 1620 + 0 + 0, false);
            A.store.Ref(ptr + 2132 + 1620 + 0 + 4, undefined);
            A.store.Bool(ptr + 2132 + 1620 + 0 + 15, false);
            A.store.Bool(ptr + 2132 + 1620 + 0 + 8, false);
            A.store.Bool(ptr + 2132 + 1620 + 0 + 16, false);
            A.store.Bool(ptr + 2132 + 1620 + 0 + 9, false);
            A.store.Bool(ptr + 2132 + 1620 + 0 + 17, false);
            A.store.Bool(ptr + 2132 + 1620 + 0 + 10, false);
            A.store.Bool(ptr + 2132 + 1620 + 0 + 18, false);
            A.store.Bool(ptr + 2132 + 1620 + 0 + 11, false);
            A.store.Bool(ptr + 2132 + 1620 + 0 + 19, false);
            A.store.Bool(ptr + 2132 + 1620 + 0 + 12, false);
            A.store.Bool(ptr + 2132 + 1620 + 0 + 20, false);
            A.store.Bool(ptr + 2132 + 1620 + 0 + 13, false);

            A.store.Bool(ptr + 2132 + 1620 + 24 + 28, false);
            A.store.Ref(ptr + 2132 + 1620 + 24 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1620 + 24 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1620 + 24 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1620 + 24 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1620 + 24 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1620 + 24 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1620 + 24 + 26, false);
            A.store.Bool(ptr + 2132 + 1620 + 24 + 24, false);
            A.store.Bool(ptr + 2132 + 1620 + 24 + 27, false);
            A.store.Bool(ptr + 2132 + 1620 + 24 + 25, false);

            A.store.Bool(ptr + 2132 + 1620 + 56 + 21, false);
            A.store.Bool(ptr + 2132 + 1620 + 56 + 14, false);
            A.store.Bool(ptr + 2132 + 1620 + 56 + 0, false);
            A.store.Ref(ptr + 2132 + 1620 + 56 + 4, undefined);
            A.store.Bool(ptr + 2132 + 1620 + 56 + 15, false);
            A.store.Bool(ptr + 2132 + 1620 + 56 + 8, false);
            A.store.Bool(ptr + 2132 + 1620 + 56 + 16, false);
            A.store.Bool(ptr + 2132 + 1620 + 56 + 9, false);
            A.store.Bool(ptr + 2132 + 1620 + 56 + 17, false);
            A.store.Bool(ptr + 2132 + 1620 + 56 + 10, false);
            A.store.Bool(ptr + 2132 + 1620 + 56 + 18, false);
            A.store.Bool(ptr + 2132 + 1620 + 56 + 11, false);
            A.store.Bool(ptr + 2132 + 1620 + 56 + 19, false);
            A.store.Bool(ptr + 2132 + 1620 + 56 + 12, false);
            A.store.Bool(ptr + 2132 + 1620 + 56 + 20, false);
            A.store.Bool(ptr + 2132 + 1620 + 56 + 13, false);

            A.store.Bool(ptr + 2132 + 1620 + 80 + 28, false);
            A.store.Ref(ptr + 2132 + 1620 + 80 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1620 + 80 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1620 + 80 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1620 + 80 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1620 + 80 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1620 + 80 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1620 + 80 + 26, false);
            A.store.Bool(ptr + 2132 + 1620 + 80 + 24, false);
            A.store.Bool(ptr + 2132 + 1620 + 80 + 27, false);
            A.store.Bool(ptr + 2132 + 1620 + 80 + 25, false);
          } else {
            A.store.Bool(ptr + 2132 + 1620 + 109, true);

            if (typeof x["VPN"]["L2TP"]["LcpEchoDisabled"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1620 + 0 + 21, false);
              A.store.Bool(ptr + 2132 + 1620 + 0 + 14, false);
              A.store.Bool(ptr + 2132 + 1620 + 0 + 0, false);
              A.store.Ref(ptr + 2132 + 1620 + 0 + 4, undefined);
              A.store.Bool(ptr + 2132 + 1620 + 0 + 15, false);
              A.store.Bool(ptr + 2132 + 1620 + 0 + 8, false);
              A.store.Bool(ptr + 2132 + 1620 + 0 + 16, false);
              A.store.Bool(ptr + 2132 + 1620 + 0 + 9, false);
              A.store.Bool(ptr + 2132 + 1620 + 0 + 17, false);
              A.store.Bool(ptr + 2132 + 1620 + 0 + 10, false);
              A.store.Bool(ptr + 2132 + 1620 + 0 + 18, false);
              A.store.Bool(ptr + 2132 + 1620 + 0 + 11, false);
              A.store.Bool(ptr + 2132 + 1620 + 0 + 19, false);
              A.store.Bool(ptr + 2132 + 1620 + 0 + 12, false);
              A.store.Bool(ptr + 2132 + 1620 + 0 + 20, false);
              A.store.Bool(ptr + 2132 + 1620 + 0 + 13, false);
            } else {
              A.store.Bool(ptr + 2132 + 1620 + 0 + 21, true);
              A.store.Bool(ptr + 2132 + 1620 + 0 + 14, "Active" in x["VPN"]["L2TP"]["LcpEchoDisabled"] ? true : false);
              A.store.Bool(ptr + 2132 + 1620 + 0 + 0, x["VPN"]["L2TP"]["LcpEchoDisabled"]["Active"] ? true : false);
              A.store.Ref(ptr + 2132 + 1620 + 0 + 4, x["VPN"]["L2TP"]["LcpEchoDisabled"]["Effective"]);
              A.store.Bool(
                ptr + 2132 + 1620 + 0 + 15,
                "UserPolicy" in x["VPN"]["L2TP"]["LcpEchoDisabled"] ? true : false
              );
              A.store.Bool(ptr + 2132 + 1620 + 0 + 8, x["VPN"]["L2TP"]["LcpEchoDisabled"]["UserPolicy"] ? true : false);
              A.store.Bool(
                ptr + 2132 + 1620 + 0 + 16,
                "DevicePolicy" in x["VPN"]["L2TP"]["LcpEchoDisabled"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1620 + 0 + 9,
                x["VPN"]["L2TP"]["LcpEchoDisabled"]["DevicePolicy"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1620 + 0 + 17,
                "UserSetting" in x["VPN"]["L2TP"]["LcpEchoDisabled"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1620 + 0 + 10,
                x["VPN"]["L2TP"]["LcpEchoDisabled"]["UserSetting"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1620 + 0 + 18,
                "SharedSetting" in x["VPN"]["L2TP"]["LcpEchoDisabled"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1620 + 0 + 11,
                x["VPN"]["L2TP"]["LcpEchoDisabled"]["SharedSetting"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1620 + 0 + 19,
                "UserEditable" in x["VPN"]["L2TP"]["LcpEchoDisabled"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1620 + 0 + 12,
                x["VPN"]["L2TP"]["LcpEchoDisabled"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1620 + 0 + 20,
                "DeviceEditable" in x["VPN"]["L2TP"]["LcpEchoDisabled"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1620 + 0 + 13,
                x["VPN"]["L2TP"]["LcpEchoDisabled"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["L2TP"]["Password"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1620 + 24 + 28, false);
              A.store.Ref(ptr + 2132 + 1620 + 24 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1620 + 24 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1620 + 24 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1620 + 24 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1620 + 24 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1620 + 24 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1620 + 24 + 26, false);
              A.store.Bool(ptr + 2132 + 1620 + 24 + 24, false);
              A.store.Bool(ptr + 2132 + 1620 + 24 + 27, false);
              A.store.Bool(ptr + 2132 + 1620 + 24 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 1620 + 24 + 28, true);
              A.store.Ref(ptr + 2132 + 1620 + 24 + 0, x["VPN"]["L2TP"]["Password"]["Active"]);
              A.store.Ref(ptr + 2132 + 1620 + 24 + 4, x["VPN"]["L2TP"]["Password"]["Effective"]);
              A.store.Ref(ptr + 2132 + 1620 + 24 + 8, x["VPN"]["L2TP"]["Password"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 1620 + 24 + 12, x["VPN"]["L2TP"]["Password"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 1620 + 24 + 16, x["VPN"]["L2TP"]["Password"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 1620 + 24 + 20, x["VPN"]["L2TP"]["Password"]["SharedSetting"]);
              A.store.Bool(ptr + 2132 + 1620 + 24 + 26, "UserEditable" in x["VPN"]["L2TP"]["Password"] ? true : false);
              A.store.Bool(ptr + 2132 + 1620 + 24 + 24, x["VPN"]["L2TP"]["Password"]["UserEditable"] ? true : false);
              A.store.Bool(
                ptr + 2132 + 1620 + 24 + 27,
                "DeviceEditable" in x["VPN"]["L2TP"]["Password"] ? true : false
              );
              A.store.Bool(ptr + 2132 + 1620 + 24 + 25, x["VPN"]["L2TP"]["Password"]["DeviceEditable"] ? true : false);
            }

            if (typeof x["VPN"]["L2TP"]["SaveCredentials"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1620 + 56 + 21, false);
              A.store.Bool(ptr + 2132 + 1620 + 56 + 14, false);
              A.store.Bool(ptr + 2132 + 1620 + 56 + 0, false);
              A.store.Ref(ptr + 2132 + 1620 + 56 + 4, undefined);
              A.store.Bool(ptr + 2132 + 1620 + 56 + 15, false);
              A.store.Bool(ptr + 2132 + 1620 + 56 + 8, false);
              A.store.Bool(ptr + 2132 + 1620 + 56 + 16, false);
              A.store.Bool(ptr + 2132 + 1620 + 56 + 9, false);
              A.store.Bool(ptr + 2132 + 1620 + 56 + 17, false);
              A.store.Bool(ptr + 2132 + 1620 + 56 + 10, false);
              A.store.Bool(ptr + 2132 + 1620 + 56 + 18, false);
              A.store.Bool(ptr + 2132 + 1620 + 56 + 11, false);
              A.store.Bool(ptr + 2132 + 1620 + 56 + 19, false);
              A.store.Bool(ptr + 2132 + 1620 + 56 + 12, false);
              A.store.Bool(ptr + 2132 + 1620 + 56 + 20, false);
              A.store.Bool(ptr + 2132 + 1620 + 56 + 13, false);
            } else {
              A.store.Bool(ptr + 2132 + 1620 + 56 + 21, true);
              A.store.Bool(ptr + 2132 + 1620 + 56 + 14, "Active" in x["VPN"]["L2TP"]["SaveCredentials"] ? true : false);
              A.store.Bool(ptr + 2132 + 1620 + 56 + 0, x["VPN"]["L2TP"]["SaveCredentials"]["Active"] ? true : false);
              A.store.Ref(ptr + 2132 + 1620 + 56 + 4, x["VPN"]["L2TP"]["SaveCredentials"]["Effective"]);
              A.store.Bool(
                ptr + 2132 + 1620 + 56 + 15,
                "UserPolicy" in x["VPN"]["L2TP"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1620 + 56 + 8,
                x["VPN"]["L2TP"]["SaveCredentials"]["UserPolicy"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1620 + 56 + 16,
                "DevicePolicy" in x["VPN"]["L2TP"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1620 + 56 + 9,
                x["VPN"]["L2TP"]["SaveCredentials"]["DevicePolicy"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1620 + 56 + 17,
                "UserSetting" in x["VPN"]["L2TP"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1620 + 56 + 10,
                x["VPN"]["L2TP"]["SaveCredentials"]["UserSetting"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1620 + 56 + 18,
                "SharedSetting" in x["VPN"]["L2TP"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1620 + 56 + 11,
                x["VPN"]["L2TP"]["SaveCredentials"]["SharedSetting"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1620 + 56 + 19,
                "UserEditable" in x["VPN"]["L2TP"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1620 + 56 + 12,
                x["VPN"]["L2TP"]["SaveCredentials"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1620 + 56 + 20,
                "DeviceEditable" in x["VPN"]["L2TP"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1620 + 56 + 13,
                x["VPN"]["L2TP"]["SaveCredentials"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["L2TP"]["Username"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1620 + 80 + 28, false);
              A.store.Ref(ptr + 2132 + 1620 + 80 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1620 + 80 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1620 + 80 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1620 + 80 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1620 + 80 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1620 + 80 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1620 + 80 + 26, false);
              A.store.Bool(ptr + 2132 + 1620 + 80 + 24, false);
              A.store.Bool(ptr + 2132 + 1620 + 80 + 27, false);
              A.store.Bool(ptr + 2132 + 1620 + 80 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 1620 + 80 + 28, true);
              A.store.Ref(ptr + 2132 + 1620 + 80 + 0, x["VPN"]["L2TP"]["Username"]["Active"]);
              A.store.Ref(ptr + 2132 + 1620 + 80 + 4, x["VPN"]["L2TP"]["Username"]["Effective"]);
              A.store.Ref(ptr + 2132 + 1620 + 80 + 8, x["VPN"]["L2TP"]["Username"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 1620 + 80 + 12, x["VPN"]["L2TP"]["Username"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 1620 + 80 + 16, x["VPN"]["L2TP"]["Username"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 1620 + 80 + 20, x["VPN"]["L2TP"]["Username"]["SharedSetting"]);
              A.store.Bool(ptr + 2132 + 1620 + 80 + 26, "UserEditable" in x["VPN"]["L2TP"]["Username"] ? true : false);
              A.store.Bool(ptr + 2132 + 1620 + 80 + 24, x["VPN"]["L2TP"]["Username"]["UserEditable"] ? true : false);
              A.store.Bool(
                ptr + 2132 + 1620 + 80 + 27,
                "DeviceEditable" in x["VPN"]["L2TP"]["Username"] ? true : false
              );
              A.store.Bool(ptr + 2132 + 1620 + 80 + 25, x["VPN"]["L2TP"]["Username"]["DeviceEditable"] ? true : false);
            }
          }

          if (typeof x["VPN"]["OpenVPN"] === "undefined") {
            A.store.Bool(ptr + 2132 + 1732 + 1542, false);

            A.store.Bool(ptr + 2132 + 1732 + 0 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 0 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 0 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 0 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 0 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 0 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 0 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 0 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 0 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 0 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 0 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 32 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 32 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 32 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 32 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 32 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 32 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 32 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 32 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 32 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 32 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 32 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 64 + 21, false);
            A.store.Bool(ptr + 2132 + 1732 + 64 + 14, false);
            A.store.Bool(ptr + 2132 + 1732 + 64 + 0, false);
            A.store.Ref(ptr + 2132 + 1732 + 64 + 4, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 64 + 15, false);
            A.store.Bool(ptr + 2132 + 1732 + 64 + 8, false);
            A.store.Bool(ptr + 2132 + 1732 + 64 + 16, false);
            A.store.Bool(ptr + 2132 + 1732 + 64 + 9, false);
            A.store.Bool(ptr + 2132 + 1732 + 64 + 17, false);
            A.store.Bool(ptr + 2132 + 1732 + 64 + 10, false);
            A.store.Bool(ptr + 2132 + 1732 + 64 + 18, false);
            A.store.Bool(ptr + 2132 + 1732 + 64 + 11, false);
            A.store.Bool(ptr + 2132 + 1732 + 64 + 19, false);
            A.store.Bool(ptr + 2132 + 1732 + 64 + 12, false);
            A.store.Bool(ptr + 2132 + 1732 + 64 + 20, false);
            A.store.Bool(ptr + 2132 + 1732 + 64 + 13, false);

            A.store.Bool(ptr + 2132 + 1732 + 88 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 88 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 88 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 88 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 88 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 88 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 88 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 88 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 88 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 88 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 88 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 120 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 120 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 120 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 120 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 120 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 120 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 120 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 120 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 120 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 120 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 120 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 152 + 318, false);

            A.store.Bool(ptr + 2132 + 1732 + 152 + 0 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 0 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 0 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 0 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 0 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 0 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 0 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 0 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 0 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 0 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 0 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 125, false);

            A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 0 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 0 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 0 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 0 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 0 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 0 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 0 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 0 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 0 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 0 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 0 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 32 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 32 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 32 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 32 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 32 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 32 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 32 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 32 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 32 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 32 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 32 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 64 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 64 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 64 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 64 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 64 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 64 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 64 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 64 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 64 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 64 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 64 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 96 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 96 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 96 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 96 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 96 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 96 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 96 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 96 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 96 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 96 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 96 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 152 + 160 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 160 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 160 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 160 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 160 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 160 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 160 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 160 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 160 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 160 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 160 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 125, false);

            A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 0 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 0 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 0 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 0 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 0 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 0 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 0 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 0 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 0 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 0 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 0 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 32 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 32 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 32 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 32 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 32 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 32 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 32 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 32 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 32 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 32 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 32 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 64 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 64 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 64 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 64 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 64 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 64 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 64 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 64 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 64 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 64 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 64 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 96 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 96 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 96 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 96 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 96 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 96 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 96 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 96 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 96 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 96 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 96 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 472 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 472 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 472 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 472 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 472 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 472 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 472 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 472 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 472 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 472 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 472 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 504 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 504 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 504 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 504 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 504 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 504 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 504 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 504 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 504 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 504 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 504 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 536 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 536 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 536 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 536 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 536 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 536 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 536 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 536 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 536 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 536 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 536 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 568 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 568 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 568 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 568 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 568 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 568 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 568 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 568 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 568 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 568 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 568 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 600 + 21, false);
            A.store.Bool(ptr + 2132 + 1732 + 600 + 14, false);
            A.store.Bool(ptr + 2132 + 1732 + 600 + 0, false);
            A.store.Ref(ptr + 2132 + 1732 + 600 + 4, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 600 + 15, false);
            A.store.Bool(ptr + 2132 + 1732 + 600 + 8, false);
            A.store.Bool(ptr + 2132 + 1732 + 600 + 16, false);
            A.store.Bool(ptr + 2132 + 1732 + 600 + 9, false);
            A.store.Bool(ptr + 2132 + 1732 + 600 + 17, false);
            A.store.Bool(ptr + 2132 + 1732 + 600 + 10, false);
            A.store.Bool(ptr + 2132 + 1732 + 600 + 18, false);
            A.store.Bool(ptr + 2132 + 1732 + 600 + 11, false);
            A.store.Bool(ptr + 2132 + 1732 + 600 + 19, false);
            A.store.Bool(ptr + 2132 + 1732 + 600 + 12, false);
            A.store.Bool(ptr + 2132 + 1732 + 600 + 20, false);
            A.store.Bool(ptr + 2132 + 1732 + 600 + 13, false);

            A.store.Bool(ptr + 2132 + 1732 + 624 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 624 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 624 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 624 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 624 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 624 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 624 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 624 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 624 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 624 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 624 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 656 + 21, false);
            A.store.Bool(ptr + 2132 + 1732 + 656 + 14, false);
            A.store.Bool(ptr + 2132 + 1732 + 656 + 0, false);
            A.store.Ref(ptr + 2132 + 1732 + 656 + 4, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 656 + 15, false);
            A.store.Bool(ptr + 2132 + 1732 + 656 + 8, false);
            A.store.Bool(ptr + 2132 + 1732 + 656 + 16, false);
            A.store.Bool(ptr + 2132 + 1732 + 656 + 9, false);
            A.store.Bool(ptr + 2132 + 1732 + 656 + 17, false);
            A.store.Bool(ptr + 2132 + 1732 + 656 + 10, false);
            A.store.Bool(ptr + 2132 + 1732 + 656 + 18, false);
            A.store.Bool(ptr + 2132 + 1732 + 656 + 11, false);
            A.store.Bool(ptr + 2132 + 1732 + 656 + 19, false);
            A.store.Bool(ptr + 2132 + 1732 + 656 + 12, false);
            A.store.Bool(ptr + 2132 + 1732 + 656 + 20, false);
            A.store.Bool(ptr + 2132 + 1732 + 656 + 13, false);

            A.store.Bool(ptr + 2132 + 1732 + 680 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 680 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 680 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 680 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 680 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 680 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 680 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 680 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 680 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 680 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 680 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 712 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 712 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 712 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 712 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 712 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 712 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 712 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 712 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 712 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 712 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 712 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 744 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 744 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 744 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 744 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 744 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 744 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 744 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 744 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 744 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 744 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 744 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 776 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 776 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 776 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 776 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 776 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 776 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 776 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 776 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 776 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 776 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 776 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 808 + 33, false);
            A.store.Bool(ptr + 2132 + 1732 + 808 + 26, false);
            A.store.Int32(ptr + 2132 + 1732 + 808 + 0, 0);
            A.store.Ref(ptr + 2132 + 1732 + 808 + 4, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 808 + 27, false);
            A.store.Int32(ptr + 2132 + 1732 + 808 + 8, 0);
            A.store.Bool(ptr + 2132 + 1732 + 808 + 28, false);
            A.store.Int32(ptr + 2132 + 1732 + 808 + 12, 0);
            A.store.Bool(ptr + 2132 + 1732 + 808 + 29, false);
            A.store.Int32(ptr + 2132 + 1732 + 808 + 16, 0);
            A.store.Bool(ptr + 2132 + 1732 + 808 + 30, false);
            A.store.Int32(ptr + 2132 + 1732 + 808 + 20, 0);
            A.store.Bool(ptr + 2132 + 1732 + 808 + 31, false);
            A.store.Bool(ptr + 2132 + 1732 + 808 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 808 + 32, false);
            A.store.Bool(ptr + 2132 + 1732 + 808 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 844 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 844 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 844 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 844 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 844 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 844 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 844 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 844 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 844 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 844 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 844 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 876 + 21, false);
            A.store.Bool(ptr + 2132 + 1732 + 876 + 14, false);
            A.store.Bool(ptr + 2132 + 1732 + 876 + 0, false);
            A.store.Ref(ptr + 2132 + 1732 + 876 + 4, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 876 + 15, false);
            A.store.Bool(ptr + 2132 + 1732 + 876 + 8, false);
            A.store.Bool(ptr + 2132 + 1732 + 876 + 16, false);
            A.store.Bool(ptr + 2132 + 1732 + 876 + 9, false);
            A.store.Bool(ptr + 2132 + 1732 + 876 + 17, false);
            A.store.Bool(ptr + 2132 + 1732 + 876 + 10, false);
            A.store.Bool(ptr + 2132 + 1732 + 876 + 18, false);
            A.store.Bool(ptr + 2132 + 1732 + 876 + 11, false);
            A.store.Bool(ptr + 2132 + 1732 + 876 + 19, false);
            A.store.Bool(ptr + 2132 + 1732 + 876 + 12, false);
            A.store.Bool(ptr + 2132 + 1732 + 876 + 20, false);
            A.store.Bool(ptr + 2132 + 1732 + 876 + 13, false);

            A.store.Bool(ptr + 2132 + 1732 + 900 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 900 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 900 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 900 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 900 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 900 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 900 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 900 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 900 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 900 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 900 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 932 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 932 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 932 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 932 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 932 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 932 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 932 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 932 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 932 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 932 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 932 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 964 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 964 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 964 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 964 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 964 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 964 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 964 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 964 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 964 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 964 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 964 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 996 + 33, false);
            A.store.Bool(ptr + 2132 + 1732 + 996 + 26, false);
            A.store.Int32(ptr + 2132 + 1732 + 996 + 0, 0);
            A.store.Ref(ptr + 2132 + 1732 + 996 + 4, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 996 + 27, false);
            A.store.Int32(ptr + 2132 + 1732 + 996 + 8, 0);
            A.store.Bool(ptr + 2132 + 1732 + 996 + 28, false);
            A.store.Int32(ptr + 2132 + 1732 + 996 + 12, 0);
            A.store.Bool(ptr + 2132 + 1732 + 996 + 29, false);
            A.store.Int32(ptr + 2132 + 1732 + 996 + 16, 0);
            A.store.Bool(ptr + 2132 + 1732 + 996 + 30, false);
            A.store.Int32(ptr + 2132 + 1732 + 996 + 20, 0);
            A.store.Bool(ptr + 2132 + 1732 + 996 + 31, false);
            A.store.Bool(ptr + 2132 + 1732 + 996 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 996 + 32, false);
            A.store.Bool(ptr + 2132 + 1732 + 996 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 1032 + 21, false);
            A.store.Bool(ptr + 2132 + 1732 + 1032 + 14, false);
            A.store.Bool(ptr + 2132 + 1732 + 1032 + 0, false);
            A.store.Ref(ptr + 2132 + 1732 + 1032 + 4, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 1032 + 15, false);
            A.store.Bool(ptr + 2132 + 1732 + 1032 + 8, false);
            A.store.Bool(ptr + 2132 + 1732 + 1032 + 16, false);
            A.store.Bool(ptr + 2132 + 1732 + 1032 + 9, false);
            A.store.Bool(ptr + 2132 + 1732 + 1032 + 17, false);
            A.store.Bool(ptr + 2132 + 1732 + 1032 + 10, false);
            A.store.Bool(ptr + 2132 + 1732 + 1032 + 18, false);
            A.store.Bool(ptr + 2132 + 1732 + 1032 + 11, false);
            A.store.Bool(ptr + 2132 + 1732 + 1032 + 19, false);
            A.store.Bool(ptr + 2132 + 1732 + 1032 + 12, false);
            A.store.Bool(ptr + 2132 + 1732 + 1032 + 20, false);
            A.store.Bool(ptr + 2132 + 1732 + 1032 + 13, false);

            A.store.Bool(ptr + 2132 + 1732 + 1056 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 1056 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1056 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1056 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1056 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1056 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1056 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 1056 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 1056 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 1056 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 1056 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 1088 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 1088 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1088 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1088 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1088 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1088 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1088 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 1088 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 1088 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 1088 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 1088 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 1120 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 1120 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1120 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1120 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1120 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1120 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1120 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 1120 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 1120 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 1120 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 1120 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 1152 + 33, false);
            A.store.Bool(ptr + 2132 + 1732 + 1152 + 26, false);
            A.store.Int32(ptr + 2132 + 1732 + 1152 + 0, 0);
            A.store.Ref(ptr + 2132 + 1732 + 1152 + 4, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 1152 + 27, false);
            A.store.Int32(ptr + 2132 + 1732 + 1152 + 8, 0);
            A.store.Bool(ptr + 2132 + 1732 + 1152 + 28, false);
            A.store.Int32(ptr + 2132 + 1732 + 1152 + 12, 0);
            A.store.Bool(ptr + 2132 + 1732 + 1152 + 29, false);
            A.store.Int32(ptr + 2132 + 1732 + 1152 + 16, 0);
            A.store.Bool(ptr + 2132 + 1732 + 1152 + 30, false);
            A.store.Int32(ptr + 2132 + 1732 + 1152 + 20, 0);
            A.store.Bool(ptr + 2132 + 1732 + 1152 + 31, false);
            A.store.Bool(ptr + 2132 + 1732 + 1152 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 1152 + 32, false);
            A.store.Bool(ptr + 2132 + 1732 + 1152 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 1188 + 33, false);
            A.store.Bool(ptr + 2132 + 1732 + 1188 + 26, false);
            A.store.Int32(ptr + 2132 + 1732 + 1188 + 0, 0);
            A.store.Ref(ptr + 2132 + 1732 + 1188 + 4, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 1188 + 27, false);
            A.store.Int32(ptr + 2132 + 1732 + 1188 + 8, 0);
            A.store.Bool(ptr + 2132 + 1732 + 1188 + 28, false);
            A.store.Int32(ptr + 2132 + 1732 + 1188 + 12, 0);
            A.store.Bool(ptr + 2132 + 1732 + 1188 + 29, false);
            A.store.Int32(ptr + 2132 + 1732 + 1188 + 16, 0);
            A.store.Bool(ptr + 2132 + 1732 + 1188 + 30, false);
            A.store.Int32(ptr + 2132 + 1732 + 1188 + 20, 0);
            A.store.Bool(ptr + 2132 + 1732 + 1188 + 31, false);
            A.store.Bool(ptr + 2132 + 1732 + 1188 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 1188 + 32, false);
            A.store.Bool(ptr + 2132 + 1732 + 1188 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 1224 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 1224 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1224 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1224 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1224 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1224 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1224 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 1224 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 1224 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 1224 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 1224 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 1256 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 1256 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1256 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1256 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1256 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1256 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1256 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 1256 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 1256 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 1256 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 1256 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 1288 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 1288 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1288 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1288 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1288 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1288 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1288 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 1288 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 1288 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 1288 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 1288 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 1320 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 1320 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1320 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1320 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1320 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1320 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1320 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 1320 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 1320 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 1320 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 1320 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 1352 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 1352 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1352 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1352 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1352 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1352 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1352 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 1352 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 1352 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 1352 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 1352 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 1384 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 1384 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1384 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1384 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1384 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1384 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1384 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 1384 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 1384 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 1384 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 1384 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 1416 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 1416 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1416 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1416 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1416 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1416 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1416 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 1416 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 1416 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 1416 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 1416 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 1448 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 1448 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1448 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1448 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1448 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1448 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1448 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 1448 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 1448 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 1448 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 1448 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 1480 + 61, false);

            A.store.Bool(ptr + 2132 + 1732 + 1480 + 0 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 1480 + 0 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1480 + 0 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1480 + 0 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1480 + 0 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1480 + 0 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1480 + 0 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 1480 + 0 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 1480 + 0 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 1480 + 0 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 1480 + 0 + 25, false);

            A.store.Bool(ptr + 2132 + 1732 + 1480 + 32 + 28, false);
            A.store.Ref(ptr + 2132 + 1732 + 1480 + 32 + 0, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1480 + 32 + 4, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1480 + 32 + 8, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1480 + 32 + 12, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1480 + 32 + 16, undefined);
            A.store.Ref(ptr + 2132 + 1732 + 1480 + 32 + 20, undefined);
            A.store.Bool(ptr + 2132 + 1732 + 1480 + 32 + 26, false);
            A.store.Bool(ptr + 2132 + 1732 + 1480 + 32 + 24, false);
            A.store.Bool(ptr + 2132 + 1732 + 1480 + 32 + 27, false);
            A.store.Bool(ptr + 2132 + 1732 + 1480 + 32 + 25, false);
          } else {
            A.store.Bool(ptr + 2132 + 1732 + 1542, true);

            if (typeof x["VPN"]["OpenVPN"]["Auth"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 0 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 0 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 0 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 0 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 0 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 0 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 0 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 0 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 0 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 0 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 0 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 0 + 28, true);
              A.store.Ref(ptr + 2132 + 1732 + 0 + 0, x["VPN"]["OpenVPN"]["Auth"]["Active"]);
              A.store.Ref(ptr + 2132 + 1732 + 0 + 4, x["VPN"]["OpenVPN"]["Auth"]["Effective"]);
              A.store.Ref(ptr + 2132 + 1732 + 0 + 8, x["VPN"]["OpenVPN"]["Auth"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 0 + 12, x["VPN"]["OpenVPN"]["Auth"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 0 + 16, x["VPN"]["OpenVPN"]["Auth"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 1732 + 0 + 20, x["VPN"]["OpenVPN"]["Auth"]["SharedSetting"]);
              A.store.Bool(ptr + 2132 + 1732 + 0 + 26, "UserEditable" in x["VPN"]["OpenVPN"]["Auth"] ? true : false);
              A.store.Bool(ptr + 2132 + 1732 + 0 + 24, x["VPN"]["OpenVPN"]["Auth"]["UserEditable"] ? true : false);
              A.store.Bool(ptr + 2132 + 1732 + 0 + 27, "DeviceEditable" in x["VPN"]["OpenVPN"]["Auth"] ? true : false);
              A.store.Bool(ptr + 2132 + 1732 + 0 + 25, x["VPN"]["OpenVPN"]["Auth"]["DeviceEditable"] ? true : false);
            }

            if (typeof x["VPN"]["OpenVPN"]["AuthRetry"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 32 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 32 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 32 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 32 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 32 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 32 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 32 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 32 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 32 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 32 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 32 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 32 + 28, true);
              A.store.Ref(ptr + 2132 + 1732 + 32 + 0, x["VPN"]["OpenVPN"]["AuthRetry"]["Active"]);
              A.store.Ref(ptr + 2132 + 1732 + 32 + 4, x["VPN"]["OpenVPN"]["AuthRetry"]["Effective"]);
              A.store.Ref(ptr + 2132 + 1732 + 32 + 8, x["VPN"]["OpenVPN"]["AuthRetry"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 32 + 12, x["VPN"]["OpenVPN"]["AuthRetry"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 32 + 16, x["VPN"]["OpenVPN"]["AuthRetry"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 1732 + 32 + 20, x["VPN"]["OpenVPN"]["AuthRetry"]["SharedSetting"]);
              A.store.Bool(
                ptr + 2132 + 1732 + 32 + 26,
                "UserEditable" in x["VPN"]["OpenVPN"]["AuthRetry"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 32 + 24,
                x["VPN"]["OpenVPN"]["AuthRetry"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 32 + 27,
                "DeviceEditable" in x["VPN"]["OpenVPN"]["AuthRetry"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 32 + 25,
                x["VPN"]["OpenVPN"]["AuthRetry"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["OpenVPN"]["AuthNoCache"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 64 + 21, false);
              A.store.Bool(ptr + 2132 + 1732 + 64 + 14, false);
              A.store.Bool(ptr + 2132 + 1732 + 64 + 0, false);
              A.store.Ref(ptr + 2132 + 1732 + 64 + 4, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 64 + 15, false);
              A.store.Bool(ptr + 2132 + 1732 + 64 + 8, false);
              A.store.Bool(ptr + 2132 + 1732 + 64 + 16, false);
              A.store.Bool(ptr + 2132 + 1732 + 64 + 9, false);
              A.store.Bool(ptr + 2132 + 1732 + 64 + 17, false);
              A.store.Bool(ptr + 2132 + 1732 + 64 + 10, false);
              A.store.Bool(ptr + 2132 + 1732 + 64 + 18, false);
              A.store.Bool(ptr + 2132 + 1732 + 64 + 11, false);
              A.store.Bool(ptr + 2132 + 1732 + 64 + 19, false);
              A.store.Bool(ptr + 2132 + 1732 + 64 + 12, false);
              A.store.Bool(ptr + 2132 + 1732 + 64 + 20, false);
              A.store.Bool(ptr + 2132 + 1732 + 64 + 13, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 64 + 21, true);
              A.store.Bool(ptr + 2132 + 1732 + 64 + 14, "Active" in x["VPN"]["OpenVPN"]["AuthNoCache"] ? true : false);
              A.store.Bool(ptr + 2132 + 1732 + 64 + 0, x["VPN"]["OpenVPN"]["AuthNoCache"]["Active"] ? true : false);
              A.store.Ref(ptr + 2132 + 1732 + 64 + 4, x["VPN"]["OpenVPN"]["AuthNoCache"]["Effective"]);
              A.store.Bool(
                ptr + 2132 + 1732 + 64 + 15,
                "UserPolicy" in x["VPN"]["OpenVPN"]["AuthNoCache"] ? true : false
              );
              A.store.Bool(ptr + 2132 + 1732 + 64 + 8, x["VPN"]["OpenVPN"]["AuthNoCache"]["UserPolicy"] ? true : false);
              A.store.Bool(
                ptr + 2132 + 1732 + 64 + 16,
                "DevicePolicy" in x["VPN"]["OpenVPN"]["AuthNoCache"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 64 + 9,
                x["VPN"]["OpenVPN"]["AuthNoCache"]["DevicePolicy"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 64 + 17,
                "UserSetting" in x["VPN"]["OpenVPN"]["AuthNoCache"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 64 + 10,
                x["VPN"]["OpenVPN"]["AuthNoCache"]["UserSetting"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 64 + 18,
                "SharedSetting" in x["VPN"]["OpenVPN"]["AuthNoCache"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 64 + 11,
                x["VPN"]["OpenVPN"]["AuthNoCache"]["SharedSetting"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 64 + 19,
                "UserEditable" in x["VPN"]["OpenVPN"]["AuthNoCache"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 64 + 12,
                x["VPN"]["OpenVPN"]["AuthNoCache"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 64 + 20,
                "DeviceEditable" in x["VPN"]["OpenVPN"]["AuthNoCache"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 64 + 13,
                x["VPN"]["OpenVPN"]["AuthNoCache"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["OpenVPN"]["Cipher"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 88 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 88 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 88 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 88 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 88 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 88 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 88 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 88 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 88 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 88 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 88 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 88 + 28, true);
              A.store.Ref(ptr + 2132 + 1732 + 88 + 0, x["VPN"]["OpenVPN"]["Cipher"]["Active"]);
              A.store.Ref(ptr + 2132 + 1732 + 88 + 4, x["VPN"]["OpenVPN"]["Cipher"]["Effective"]);
              A.store.Ref(ptr + 2132 + 1732 + 88 + 8, x["VPN"]["OpenVPN"]["Cipher"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 88 + 12, x["VPN"]["OpenVPN"]["Cipher"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 88 + 16, x["VPN"]["OpenVPN"]["Cipher"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 1732 + 88 + 20, x["VPN"]["OpenVPN"]["Cipher"]["SharedSetting"]);
              A.store.Bool(ptr + 2132 + 1732 + 88 + 26, "UserEditable" in x["VPN"]["OpenVPN"]["Cipher"] ? true : false);
              A.store.Bool(ptr + 2132 + 1732 + 88 + 24, x["VPN"]["OpenVPN"]["Cipher"]["UserEditable"] ? true : false);
              A.store.Bool(
                ptr + 2132 + 1732 + 88 + 27,
                "DeviceEditable" in x["VPN"]["OpenVPN"]["Cipher"] ? true : false
              );
              A.store.Bool(ptr + 2132 + 1732 + 88 + 25, x["VPN"]["OpenVPN"]["Cipher"]["DeviceEditable"] ? true : false);
            }

            if (typeof x["VPN"]["OpenVPN"]["ClientCertPKCS11Id"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 120 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 120 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 120 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 120 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 120 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 120 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 120 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 120 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 120 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 120 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 120 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 120 + 28, true);
              A.store.Ref(ptr + 2132 + 1732 + 120 + 0, x["VPN"]["OpenVPN"]["ClientCertPKCS11Id"]["Active"]);
              A.store.Ref(ptr + 2132 + 1732 + 120 + 4, x["VPN"]["OpenVPN"]["ClientCertPKCS11Id"]["Effective"]);
              A.store.Ref(ptr + 2132 + 1732 + 120 + 8, x["VPN"]["OpenVPN"]["ClientCertPKCS11Id"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 120 + 12, x["VPN"]["OpenVPN"]["ClientCertPKCS11Id"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 120 + 16, x["VPN"]["OpenVPN"]["ClientCertPKCS11Id"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 1732 + 120 + 20, x["VPN"]["OpenVPN"]["ClientCertPKCS11Id"]["SharedSetting"]);
              A.store.Bool(
                ptr + 2132 + 1732 + 120 + 26,
                "UserEditable" in x["VPN"]["OpenVPN"]["ClientCertPKCS11Id"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 120 + 24,
                x["VPN"]["OpenVPN"]["ClientCertPKCS11Id"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 120 + 27,
                "DeviceEditable" in x["VPN"]["OpenVPN"]["ClientCertPKCS11Id"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 120 + 25,
                x["VPN"]["OpenVPN"]["ClientCertPKCS11Id"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["OpenVPN"]["ClientCertPattern"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 152 + 318, false);

              A.store.Bool(ptr + 2132 + 1732 + 152 + 0 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 0 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 0 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 0 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 0 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 0 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 0 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 0 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 0 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 0 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 0 + 25, false);

              A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 125, false);

              A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 0 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 0 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 0 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 0 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 0 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 0 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 0 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 0 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 0 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 0 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 0 + 25, false);

              A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 32 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 32 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 32 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 32 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 32 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 32 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 32 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 32 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 32 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 32 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 32 + 25, false);

              A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 64 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 64 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 64 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 64 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 64 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 64 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 64 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 64 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 64 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 64 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 64 + 25, false);

              A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 96 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 96 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 96 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 96 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 96 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 96 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 96 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 96 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 96 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 96 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 96 + 25, false);

              A.store.Bool(ptr + 2132 + 1732 + 152 + 160 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 160 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 160 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 160 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 160 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 160 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 160 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 160 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 160 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 160 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 160 + 25, false);

              A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 125, false);

              A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 0 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 0 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 0 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 0 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 0 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 0 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 0 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 0 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 0 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 0 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 0 + 25, false);

              A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 32 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 32 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 32 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 32 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 32 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 32 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 32 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 32 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 32 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 32 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 32 + 25, false);

              A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 64 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 64 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 64 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 64 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 64 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 64 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 64 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 64 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 64 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 64 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 64 + 25, false);

              A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 96 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 96 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 96 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 96 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 96 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 96 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 96 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 96 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 96 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 96 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 96 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 152 + 318, true);

              if (typeof x["VPN"]["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"] === "undefined") {
                A.store.Bool(ptr + 2132 + 1732 + 152 + 0 + 28, false);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 0 + 0, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 0 + 4, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 0 + 8, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 0 + 12, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 0 + 16, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 0 + 20, undefined);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 0 + 26, false);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 0 + 24, false);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 0 + 27, false);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 0 + 25, false);
              } else {
                A.store.Bool(ptr + 2132 + 1732 + 152 + 0 + 28, true);
                A.store.Ref(
                  ptr + 2132 + 1732 + 152 + 0 + 0,
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]["Active"]
                );
                A.store.Ref(
                  ptr + 2132 + 1732 + 152 + 0 + 4,
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]["Effective"]
                );
                A.store.Ref(
                  ptr + 2132 + 1732 + 152 + 0 + 8,
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 2132 + 1732 + 152 + 0 + 12,
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 2132 + 1732 + 152 + 0 + 16,
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 2132 + 1732 + 152 + 0 + 20,
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 2132 + 1732 + 152 + 0 + 26,
                  "UserEditable" in x["VPN"]["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 1732 + 152 + 0 + 24,
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 1732 + 152 + 0 + 27,
                  "DeviceEditable" in x["VPN"]["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 1732 + 152 + 0 + 25,
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"] === "undefined") {
                A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 125, false);

                A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 0 + 28, false);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 0 + 0, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 0 + 4, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 0 + 8, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 0 + 12, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 0 + 16, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 0 + 20, undefined);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 0 + 26, false);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 0 + 24, false);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 0 + 27, false);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 0 + 25, false);

                A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 32 + 28, false);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 32 + 0, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 32 + 4, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 32 + 8, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 32 + 12, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 32 + 16, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 32 + 20, undefined);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 32 + 26, false);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 32 + 24, false);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 32 + 27, false);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 32 + 25, false);

                A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 64 + 28, false);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 64 + 0, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 64 + 4, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 64 + 8, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 64 + 12, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 64 + 16, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 64 + 20, undefined);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 64 + 26, false);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 64 + 24, false);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 64 + 27, false);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 64 + 25, false);

                A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 96 + 28, false);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 96 + 0, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 96 + 4, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 96 + 8, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 96 + 12, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 96 + 16, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 96 + 20, undefined);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 96 + 26, false);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 96 + 24, false);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 96 + 27, false);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 96 + 25, false);
              } else {
                A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 125, true);

                if (typeof x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"] === "undefined") {
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 0 + 28, false);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 0 + 0, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 0 + 4, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 0 + 8, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 0 + 12, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 0 + 16, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 0 + 20, undefined);
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 0 + 26, false);
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 0 + 24, false);
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 0 + 27, false);
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 0 + 25, false);
                } else {
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 0 + 28, true);
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 32 + 0 + 0,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 32 + 0 + 4,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 32 + 0 + 8,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 32 + 0 + 12,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 32 + 0 + 16,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 32 + 0 + 20,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 2132 + 1732 + 152 + 32 + 0 + 26,
                    "UserEditable" in x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 1732 + 152 + 32 + 0 + 24,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 1732 + 152 + 32 + 0 + 27,
                    "DeviceEditable" in x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 1732 + 152 + 32 + 0 + 25,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"] ? true : false
                  );
                }

                if (typeof x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"] === "undefined") {
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 32 + 28, false);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 32 + 0, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 32 + 4, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 32 + 8, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 32 + 12, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 32 + 16, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 32 + 20, undefined);
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 32 + 26, false);
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 32 + 24, false);
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 32 + 27, false);
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 32 + 25, false);
                } else {
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 32 + 28, true);
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 32 + 32 + 0,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 32 + 32 + 4,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 32 + 32 + 8,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 32 + 32 + 12,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 32 + 32 + 16,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 32 + 32 + 20,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 2132 + 1732 + 152 + 32 + 32 + 26,
                    "UserEditable" in x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 1732 + 152 + 32 + 32 + 24,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 1732 + 152 + 32 + 32 + 27,
                    "DeviceEditable" in x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 1732 + 152 + 32 + 32 + 25,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"] ? true : false
                  );
                }

                if (typeof x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"] === "undefined") {
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 64 + 28, false);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 64 + 0, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 64 + 4, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 64 + 8, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 64 + 12, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 64 + 16, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 64 + 20, undefined);
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 64 + 26, false);
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 64 + 24, false);
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 64 + 27, false);
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 64 + 25, false);
                } else {
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 64 + 28, true);
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 32 + 64 + 0,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 32 + 64 + 4,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 32 + 64 + 8,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 32 + 64 + 12,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 32 + 64 + 16,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 32 + 64 + 20,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 2132 + 1732 + 152 + 32 + 64 + 26,
                    "UserEditable" in x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 1732 + 152 + 32 + 64 + 24,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 1732 + 152 + 32 + 64 + 27,
                    "DeviceEditable" in x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]
                      ? true
                      : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 1732 + 152 + 32 + 64 + 25,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"] ? true : false
                  );
                }

                if (typeof x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] === "undefined") {
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 96 + 28, false);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 96 + 0, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 96 + 4, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 96 + 8, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 96 + 12, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 96 + 16, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 32 + 96 + 20, undefined);
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 96 + 26, false);
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 96 + 24, false);
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 96 + 27, false);
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 96 + 25, false);
                } else {
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 32 + 96 + 28, true);
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 32 + 96 + 0,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 32 + 96 + 4,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 32 + 96 + 8,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 32 + 96 + 12,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 32 + 96 + 16,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 32 + 96 + 20,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 2132 + 1732 + 152 + 32 + 96 + 26,
                    "UserEditable" in x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]
                      ? true
                      : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 1732 + 152 + 32 + 96 + 24,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"]
                      ? true
                      : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 1732 + 152 + 32 + 96 + 27,
                    "DeviceEditable" in x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]
                      ? true
                      : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 1732 + 152 + 32 + 96 + 25,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"]
                      ? true
                      : false
                  );
                }
              }

              if (typeof x["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCARef"] === "undefined") {
                A.store.Bool(ptr + 2132 + 1732 + 152 + 160 + 28, false);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 160 + 0, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 160 + 4, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 160 + 8, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 160 + 12, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 160 + 16, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 160 + 20, undefined);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 160 + 26, false);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 160 + 24, false);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 160 + 27, false);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 160 + 25, false);
              } else {
                A.store.Bool(ptr + 2132 + 1732 + 152 + 160 + 28, true);
                A.store.Ref(
                  ptr + 2132 + 1732 + 152 + 160 + 0,
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]["Active"]
                );
                A.store.Ref(
                  ptr + 2132 + 1732 + 152 + 160 + 4,
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]["Effective"]
                );
                A.store.Ref(
                  ptr + 2132 + 1732 + 152 + 160 + 8,
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 2132 + 1732 + 152 + 160 + 12,
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 2132 + 1732 + 152 + 160 + 16,
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 2132 + 1732 + 152 + 160 + 20,
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 2132 + 1732 + 152 + 160 + 26,
                  "UserEditable" in x["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCARef"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 1732 + 152 + 160 + 24,
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 1732 + 152 + 160 + 27,
                  "DeviceEditable" in x["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCARef"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 1732 + 152 + 160 + 25,
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"] === "undefined") {
                A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 125, false);

                A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 0 + 28, false);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 0 + 0, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 0 + 4, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 0 + 8, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 0 + 12, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 0 + 16, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 0 + 20, undefined);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 0 + 26, false);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 0 + 24, false);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 0 + 27, false);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 0 + 25, false);

                A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 32 + 28, false);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 32 + 0, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 32 + 4, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 32 + 8, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 32 + 12, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 32 + 16, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 32 + 20, undefined);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 32 + 26, false);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 32 + 24, false);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 32 + 27, false);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 32 + 25, false);

                A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 64 + 28, false);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 64 + 0, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 64 + 4, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 64 + 8, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 64 + 12, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 64 + 16, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 64 + 20, undefined);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 64 + 26, false);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 64 + 24, false);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 64 + 27, false);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 64 + 25, false);

                A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 96 + 28, false);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 96 + 0, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 96 + 4, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 96 + 8, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 96 + 12, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 96 + 16, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 96 + 20, undefined);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 96 + 26, false);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 96 + 24, false);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 96 + 27, false);
                A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 96 + 25, false);
              } else {
                A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 125, true);

                if (typeof x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"] === "undefined") {
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 0 + 28, false);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 0 + 0, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 0 + 4, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 0 + 8, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 0 + 12, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 0 + 16, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 0 + 20, undefined);
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 0 + 26, false);
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 0 + 24, false);
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 0 + 27, false);
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 0 + 25, false);
                } else {
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 0 + 28, true);
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 192 + 0 + 0,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 192 + 0 + 4,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 192 + 0 + 8,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 192 + 0 + 12,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 192 + 0 + 16,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 192 + 0 + 20,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 2132 + 1732 + 152 + 192 + 0 + 26,
                    "UserEditable" in x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 1732 + 152 + 192 + 0 + 24,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 1732 + 152 + 192 + 0 + 27,
                    "DeviceEditable" in x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 1732 + 152 + 192 + 0 + 25,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"] ? true : false
                  );
                }

                if (typeof x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"] === "undefined") {
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 32 + 28, false);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 32 + 0, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 32 + 4, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 32 + 8, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 32 + 12, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 32 + 16, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 32 + 20, undefined);
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 32 + 26, false);
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 32 + 24, false);
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 32 + 27, false);
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 32 + 25, false);
                } else {
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 32 + 28, true);
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 192 + 32 + 0,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 192 + 32 + 4,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 192 + 32 + 8,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 192 + 32 + 12,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 192 + 32 + 16,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 192 + 32 + 20,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 2132 + 1732 + 152 + 192 + 32 + 26,
                    "UserEditable" in x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 1732 + 152 + 192 + 32 + 24,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 1732 + 152 + 192 + 32 + 27,
                    "DeviceEditable" in x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 1732 + 152 + 192 + 32 + 25,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"] ? true : false
                  );
                }

                if (typeof x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"] === "undefined") {
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 64 + 28, false);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 64 + 0, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 64 + 4, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 64 + 8, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 64 + 12, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 64 + 16, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 64 + 20, undefined);
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 64 + 26, false);
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 64 + 24, false);
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 64 + 27, false);
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 64 + 25, false);
                } else {
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 64 + 28, true);
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 192 + 64 + 0,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 192 + 64 + 4,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 192 + 64 + 8,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 192 + 64 + 12,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 192 + 64 + 16,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 192 + 64 + 20,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 2132 + 1732 + 152 + 192 + 64 + 26,
                    "UserEditable" in x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 1732 + 152 + 192 + 64 + 24,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 1732 + 152 + 192 + 64 + 27,
                    "DeviceEditable" in x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]
                      ? true
                      : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 1732 + 152 + 192 + 64 + 25,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"] ? true : false
                  );
                }

                if (typeof x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] === "undefined") {
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 96 + 28, false);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 96 + 0, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 96 + 4, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 96 + 8, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 96 + 12, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 96 + 16, undefined);
                  A.store.Ref(ptr + 2132 + 1732 + 152 + 192 + 96 + 20, undefined);
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 96 + 26, false);
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 96 + 24, false);
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 96 + 27, false);
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 96 + 25, false);
                } else {
                  A.store.Bool(ptr + 2132 + 1732 + 152 + 192 + 96 + 28, true);
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 192 + 96 + 0,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 192 + 96 + 4,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 192 + 96 + 8,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 192 + 96 + 12,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 192 + 96 + 16,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 2132 + 1732 + 152 + 192 + 96 + 20,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 2132 + 1732 + 152 + 192 + 96 + 26,
                    "UserEditable" in x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]
                      ? true
                      : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 1732 + 152 + 192 + 96 + 24,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"]
                      ? true
                      : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 1732 + 152 + 192 + 96 + 27,
                    "DeviceEditable" in x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]
                      ? true
                      : false
                  );
                  A.store.Bool(
                    ptr + 2132 + 1732 + 152 + 192 + 96 + 25,
                    x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"]
                      ? true
                      : false
                  );
                }
              }
            }

            if (typeof x["VPN"]["OpenVPN"]["ClientCertProvisioningProfileId"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 472 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 472 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 472 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 472 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 472 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 472 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 472 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 472 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 472 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 472 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 472 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 472 + 28, true);
              A.store.Ref(
                ptr + 2132 + 1732 + 472 + 0,
                x["VPN"]["OpenVPN"]["ClientCertProvisioningProfileId"]["Active"]
              );
              A.store.Ref(
                ptr + 2132 + 1732 + 472 + 4,
                x["VPN"]["OpenVPN"]["ClientCertProvisioningProfileId"]["Effective"]
              );
              A.store.Ref(
                ptr + 2132 + 1732 + 472 + 8,
                x["VPN"]["OpenVPN"]["ClientCertProvisioningProfileId"]["UserPolicy"]
              );
              A.store.Ref(
                ptr + 2132 + 1732 + 472 + 12,
                x["VPN"]["OpenVPN"]["ClientCertProvisioningProfileId"]["DevicePolicy"]
              );
              A.store.Ref(
                ptr + 2132 + 1732 + 472 + 16,
                x["VPN"]["OpenVPN"]["ClientCertProvisioningProfileId"]["UserSetting"]
              );
              A.store.Ref(
                ptr + 2132 + 1732 + 472 + 20,
                x["VPN"]["OpenVPN"]["ClientCertProvisioningProfileId"]["SharedSetting"]
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 472 + 26,
                "UserEditable" in x["VPN"]["OpenVPN"]["ClientCertProvisioningProfileId"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 472 + 24,
                x["VPN"]["OpenVPN"]["ClientCertProvisioningProfileId"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 472 + 27,
                "DeviceEditable" in x["VPN"]["OpenVPN"]["ClientCertProvisioningProfileId"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 472 + 25,
                x["VPN"]["OpenVPN"]["ClientCertProvisioningProfileId"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["OpenVPN"]["ClientCertRef"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 504 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 504 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 504 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 504 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 504 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 504 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 504 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 504 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 504 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 504 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 504 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 504 + 28, true);
              A.store.Ref(ptr + 2132 + 1732 + 504 + 0, x["VPN"]["OpenVPN"]["ClientCertRef"]["Active"]);
              A.store.Ref(ptr + 2132 + 1732 + 504 + 4, x["VPN"]["OpenVPN"]["ClientCertRef"]["Effective"]);
              A.store.Ref(ptr + 2132 + 1732 + 504 + 8, x["VPN"]["OpenVPN"]["ClientCertRef"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 504 + 12, x["VPN"]["OpenVPN"]["ClientCertRef"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 504 + 16, x["VPN"]["OpenVPN"]["ClientCertRef"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 1732 + 504 + 20, x["VPN"]["OpenVPN"]["ClientCertRef"]["SharedSetting"]);
              A.store.Bool(
                ptr + 2132 + 1732 + 504 + 26,
                "UserEditable" in x["VPN"]["OpenVPN"]["ClientCertRef"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 504 + 24,
                x["VPN"]["OpenVPN"]["ClientCertRef"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 504 + 27,
                "DeviceEditable" in x["VPN"]["OpenVPN"]["ClientCertRef"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 504 + 25,
                x["VPN"]["OpenVPN"]["ClientCertRef"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["OpenVPN"]["ClientCertType"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 536 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 536 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 536 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 536 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 536 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 536 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 536 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 536 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 536 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 536 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 536 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 536 + 28, true);
              A.store.Ref(ptr + 2132 + 1732 + 536 + 0, x["VPN"]["OpenVPN"]["ClientCertType"]["Active"]);
              A.store.Ref(ptr + 2132 + 1732 + 536 + 4, x["VPN"]["OpenVPN"]["ClientCertType"]["Effective"]);
              A.store.Ref(ptr + 2132 + 1732 + 536 + 8, x["VPN"]["OpenVPN"]["ClientCertType"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 536 + 12, x["VPN"]["OpenVPN"]["ClientCertType"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 536 + 16, x["VPN"]["OpenVPN"]["ClientCertType"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 1732 + 536 + 20, x["VPN"]["OpenVPN"]["ClientCertType"]["SharedSetting"]);
              A.store.Bool(
                ptr + 2132 + 1732 + 536 + 26,
                "UserEditable" in x["VPN"]["OpenVPN"]["ClientCertType"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 536 + 24,
                x["VPN"]["OpenVPN"]["ClientCertType"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 536 + 27,
                "DeviceEditable" in x["VPN"]["OpenVPN"]["ClientCertType"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 536 + 25,
                x["VPN"]["OpenVPN"]["ClientCertType"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["OpenVPN"]["CompLZO"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 568 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 568 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 568 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 568 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 568 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 568 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 568 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 568 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 568 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 568 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 568 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 568 + 28, true);
              A.store.Ref(ptr + 2132 + 1732 + 568 + 0, x["VPN"]["OpenVPN"]["CompLZO"]["Active"]);
              A.store.Ref(ptr + 2132 + 1732 + 568 + 4, x["VPN"]["OpenVPN"]["CompLZO"]["Effective"]);
              A.store.Ref(ptr + 2132 + 1732 + 568 + 8, x["VPN"]["OpenVPN"]["CompLZO"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 568 + 12, x["VPN"]["OpenVPN"]["CompLZO"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 568 + 16, x["VPN"]["OpenVPN"]["CompLZO"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 1732 + 568 + 20, x["VPN"]["OpenVPN"]["CompLZO"]["SharedSetting"]);
              A.store.Bool(
                ptr + 2132 + 1732 + 568 + 26,
                "UserEditable" in x["VPN"]["OpenVPN"]["CompLZO"] ? true : false
              );
              A.store.Bool(ptr + 2132 + 1732 + 568 + 24, x["VPN"]["OpenVPN"]["CompLZO"]["UserEditable"] ? true : false);
              A.store.Bool(
                ptr + 2132 + 1732 + 568 + 27,
                "DeviceEditable" in x["VPN"]["OpenVPN"]["CompLZO"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 568 + 25,
                x["VPN"]["OpenVPN"]["CompLZO"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["OpenVPN"]["CompNoAdapt"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 600 + 21, false);
              A.store.Bool(ptr + 2132 + 1732 + 600 + 14, false);
              A.store.Bool(ptr + 2132 + 1732 + 600 + 0, false);
              A.store.Ref(ptr + 2132 + 1732 + 600 + 4, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 600 + 15, false);
              A.store.Bool(ptr + 2132 + 1732 + 600 + 8, false);
              A.store.Bool(ptr + 2132 + 1732 + 600 + 16, false);
              A.store.Bool(ptr + 2132 + 1732 + 600 + 9, false);
              A.store.Bool(ptr + 2132 + 1732 + 600 + 17, false);
              A.store.Bool(ptr + 2132 + 1732 + 600 + 10, false);
              A.store.Bool(ptr + 2132 + 1732 + 600 + 18, false);
              A.store.Bool(ptr + 2132 + 1732 + 600 + 11, false);
              A.store.Bool(ptr + 2132 + 1732 + 600 + 19, false);
              A.store.Bool(ptr + 2132 + 1732 + 600 + 12, false);
              A.store.Bool(ptr + 2132 + 1732 + 600 + 20, false);
              A.store.Bool(ptr + 2132 + 1732 + 600 + 13, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 600 + 21, true);
              A.store.Bool(ptr + 2132 + 1732 + 600 + 14, "Active" in x["VPN"]["OpenVPN"]["CompNoAdapt"] ? true : false);
              A.store.Bool(ptr + 2132 + 1732 + 600 + 0, x["VPN"]["OpenVPN"]["CompNoAdapt"]["Active"] ? true : false);
              A.store.Ref(ptr + 2132 + 1732 + 600 + 4, x["VPN"]["OpenVPN"]["CompNoAdapt"]["Effective"]);
              A.store.Bool(
                ptr + 2132 + 1732 + 600 + 15,
                "UserPolicy" in x["VPN"]["OpenVPN"]["CompNoAdapt"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 600 + 8,
                x["VPN"]["OpenVPN"]["CompNoAdapt"]["UserPolicy"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 600 + 16,
                "DevicePolicy" in x["VPN"]["OpenVPN"]["CompNoAdapt"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 600 + 9,
                x["VPN"]["OpenVPN"]["CompNoAdapt"]["DevicePolicy"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 600 + 17,
                "UserSetting" in x["VPN"]["OpenVPN"]["CompNoAdapt"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 600 + 10,
                x["VPN"]["OpenVPN"]["CompNoAdapt"]["UserSetting"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 600 + 18,
                "SharedSetting" in x["VPN"]["OpenVPN"]["CompNoAdapt"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 600 + 11,
                x["VPN"]["OpenVPN"]["CompNoAdapt"]["SharedSetting"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 600 + 19,
                "UserEditable" in x["VPN"]["OpenVPN"]["CompNoAdapt"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 600 + 12,
                x["VPN"]["OpenVPN"]["CompNoAdapt"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 600 + 20,
                "DeviceEditable" in x["VPN"]["OpenVPN"]["CompNoAdapt"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 600 + 13,
                x["VPN"]["OpenVPN"]["CompNoAdapt"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["OpenVPN"]["ExtraHosts"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 624 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 624 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 624 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 624 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 624 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 624 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 624 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 624 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 624 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 624 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 624 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 624 + 28, true);
              A.store.Ref(ptr + 2132 + 1732 + 624 + 0, x["VPN"]["OpenVPN"]["ExtraHosts"]["Active"]);
              A.store.Ref(ptr + 2132 + 1732 + 624 + 4, x["VPN"]["OpenVPN"]["ExtraHosts"]["Effective"]);
              A.store.Ref(ptr + 2132 + 1732 + 624 + 8, x["VPN"]["OpenVPN"]["ExtraHosts"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 624 + 12, x["VPN"]["OpenVPN"]["ExtraHosts"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 624 + 16, x["VPN"]["OpenVPN"]["ExtraHosts"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 1732 + 624 + 20, x["VPN"]["OpenVPN"]["ExtraHosts"]["SharedSetting"]);
              A.store.Bool(
                ptr + 2132 + 1732 + 624 + 26,
                "UserEditable" in x["VPN"]["OpenVPN"]["ExtraHosts"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 624 + 24,
                x["VPN"]["OpenVPN"]["ExtraHosts"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 624 + 27,
                "DeviceEditable" in x["VPN"]["OpenVPN"]["ExtraHosts"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 624 + 25,
                x["VPN"]["OpenVPN"]["ExtraHosts"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 656 + 21, false);
              A.store.Bool(ptr + 2132 + 1732 + 656 + 14, false);
              A.store.Bool(ptr + 2132 + 1732 + 656 + 0, false);
              A.store.Ref(ptr + 2132 + 1732 + 656 + 4, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 656 + 15, false);
              A.store.Bool(ptr + 2132 + 1732 + 656 + 8, false);
              A.store.Bool(ptr + 2132 + 1732 + 656 + 16, false);
              A.store.Bool(ptr + 2132 + 1732 + 656 + 9, false);
              A.store.Bool(ptr + 2132 + 1732 + 656 + 17, false);
              A.store.Bool(ptr + 2132 + 1732 + 656 + 10, false);
              A.store.Bool(ptr + 2132 + 1732 + 656 + 18, false);
              A.store.Bool(ptr + 2132 + 1732 + 656 + 11, false);
              A.store.Bool(ptr + 2132 + 1732 + 656 + 19, false);
              A.store.Bool(ptr + 2132 + 1732 + 656 + 12, false);
              A.store.Bool(ptr + 2132 + 1732 + 656 + 20, false);
              A.store.Bool(ptr + 2132 + 1732 + 656 + 13, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 656 + 21, true);
              A.store.Bool(
                ptr + 2132 + 1732 + 656 + 14,
                "Active" in x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 656 + 0,
                x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"]["Active"] ? true : false
              );
              A.store.Ref(ptr + 2132 + 1732 + 656 + 4, x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"]["Effective"]);
              A.store.Bool(
                ptr + 2132 + 1732 + 656 + 15,
                "UserPolicy" in x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 656 + 8,
                x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"]["UserPolicy"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 656 + 16,
                "DevicePolicy" in x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 656 + 9,
                x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"]["DevicePolicy"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 656 + 17,
                "UserSetting" in x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 656 + 10,
                x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"]["UserSetting"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 656 + 18,
                "SharedSetting" in x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 656 + 11,
                x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"]["SharedSetting"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 656 + 19,
                "UserEditable" in x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 656 + 12,
                x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 656 + 20,
                "DeviceEditable" in x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 656 + 13,
                x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["OpenVPN"]["KeyDirection"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 680 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 680 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 680 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 680 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 680 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 680 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 680 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 680 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 680 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 680 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 680 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 680 + 28, true);
              A.store.Ref(ptr + 2132 + 1732 + 680 + 0, x["VPN"]["OpenVPN"]["KeyDirection"]["Active"]);
              A.store.Ref(ptr + 2132 + 1732 + 680 + 4, x["VPN"]["OpenVPN"]["KeyDirection"]["Effective"]);
              A.store.Ref(ptr + 2132 + 1732 + 680 + 8, x["VPN"]["OpenVPN"]["KeyDirection"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 680 + 12, x["VPN"]["OpenVPN"]["KeyDirection"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 680 + 16, x["VPN"]["OpenVPN"]["KeyDirection"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 1732 + 680 + 20, x["VPN"]["OpenVPN"]["KeyDirection"]["SharedSetting"]);
              A.store.Bool(
                ptr + 2132 + 1732 + 680 + 26,
                "UserEditable" in x["VPN"]["OpenVPN"]["KeyDirection"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 680 + 24,
                x["VPN"]["OpenVPN"]["KeyDirection"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 680 + 27,
                "DeviceEditable" in x["VPN"]["OpenVPN"]["KeyDirection"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 680 + 25,
                x["VPN"]["OpenVPN"]["KeyDirection"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["OpenVPN"]["NsCertType"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 712 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 712 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 712 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 712 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 712 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 712 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 712 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 712 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 712 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 712 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 712 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 712 + 28, true);
              A.store.Ref(ptr + 2132 + 1732 + 712 + 0, x["VPN"]["OpenVPN"]["NsCertType"]["Active"]);
              A.store.Ref(ptr + 2132 + 1732 + 712 + 4, x["VPN"]["OpenVPN"]["NsCertType"]["Effective"]);
              A.store.Ref(ptr + 2132 + 1732 + 712 + 8, x["VPN"]["OpenVPN"]["NsCertType"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 712 + 12, x["VPN"]["OpenVPN"]["NsCertType"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 712 + 16, x["VPN"]["OpenVPN"]["NsCertType"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 1732 + 712 + 20, x["VPN"]["OpenVPN"]["NsCertType"]["SharedSetting"]);
              A.store.Bool(
                ptr + 2132 + 1732 + 712 + 26,
                "UserEditable" in x["VPN"]["OpenVPN"]["NsCertType"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 712 + 24,
                x["VPN"]["OpenVPN"]["NsCertType"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 712 + 27,
                "DeviceEditable" in x["VPN"]["OpenVPN"]["NsCertType"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 712 + 25,
                x["VPN"]["OpenVPN"]["NsCertType"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["OpenVPN"]["OTP"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 744 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 744 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 744 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 744 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 744 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 744 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 744 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 744 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 744 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 744 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 744 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 744 + 28, true);
              A.store.Ref(ptr + 2132 + 1732 + 744 + 0, x["VPN"]["OpenVPN"]["OTP"]["Active"]);
              A.store.Ref(ptr + 2132 + 1732 + 744 + 4, x["VPN"]["OpenVPN"]["OTP"]["Effective"]);
              A.store.Ref(ptr + 2132 + 1732 + 744 + 8, x["VPN"]["OpenVPN"]["OTP"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 744 + 12, x["VPN"]["OpenVPN"]["OTP"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 744 + 16, x["VPN"]["OpenVPN"]["OTP"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 1732 + 744 + 20, x["VPN"]["OpenVPN"]["OTP"]["SharedSetting"]);
              A.store.Bool(ptr + 2132 + 1732 + 744 + 26, "UserEditable" in x["VPN"]["OpenVPN"]["OTP"] ? true : false);
              A.store.Bool(ptr + 2132 + 1732 + 744 + 24, x["VPN"]["OpenVPN"]["OTP"]["UserEditable"] ? true : false);
              A.store.Bool(ptr + 2132 + 1732 + 744 + 27, "DeviceEditable" in x["VPN"]["OpenVPN"]["OTP"] ? true : false);
              A.store.Bool(ptr + 2132 + 1732 + 744 + 25, x["VPN"]["OpenVPN"]["OTP"]["DeviceEditable"] ? true : false);
            }

            if (typeof x["VPN"]["OpenVPN"]["Password"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 776 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 776 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 776 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 776 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 776 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 776 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 776 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 776 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 776 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 776 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 776 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 776 + 28, true);
              A.store.Ref(ptr + 2132 + 1732 + 776 + 0, x["VPN"]["OpenVPN"]["Password"]["Active"]);
              A.store.Ref(ptr + 2132 + 1732 + 776 + 4, x["VPN"]["OpenVPN"]["Password"]["Effective"]);
              A.store.Ref(ptr + 2132 + 1732 + 776 + 8, x["VPN"]["OpenVPN"]["Password"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 776 + 12, x["VPN"]["OpenVPN"]["Password"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 776 + 16, x["VPN"]["OpenVPN"]["Password"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 1732 + 776 + 20, x["VPN"]["OpenVPN"]["Password"]["SharedSetting"]);
              A.store.Bool(
                ptr + 2132 + 1732 + 776 + 26,
                "UserEditable" in x["VPN"]["OpenVPN"]["Password"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 776 + 24,
                x["VPN"]["OpenVPN"]["Password"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 776 + 27,
                "DeviceEditable" in x["VPN"]["OpenVPN"]["Password"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 776 + 25,
                x["VPN"]["OpenVPN"]["Password"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["OpenVPN"]["Port"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 808 + 33, false);
              A.store.Bool(ptr + 2132 + 1732 + 808 + 26, false);
              A.store.Int32(ptr + 2132 + 1732 + 808 + 0, 0);
              A.store.Ref(ptr + 2132 + 1732 + 808 + 4, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 808 + 27, false);
              A.store.Int32(ptr + 2132 + 1732 + 808 + 8, 0);
              A.store.Bool(ptr + 2132 + 1732 + 808 + 28, false);
              A.store.Int32(ptr + 2132 + 1732 + 808 + 12, 0);
              A.store.Bool(ptr + 2132 + 1732 + 808 + 29, false);
              A.store.Int32(ptr + 2132 + 1732 + 808 + 16, 0);
              A.store.Bool(ptr + 2132 + 1732 + 808 + 30, false);
              A.store.Int32(ptr + 2132 + 1732 + 808 + 20, 0);
              A.store.Bool(ptr + 2132 + 1732 + 808 + 31, false);
              A.store.Bool(ptr + 2132 + 1732 + 808 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 808 + 32, false);
              A.store.Bool(ptr + 2132 + 1732 + 808 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 808 + 33, true);
              A.store.Bool(ptr + 2132 + 1732 + 808 + 26, "Active" in x["VPN"]["OpenVPN"]["Port"] ? true : false);
              A.store.Int32(
                ptr + 2132 + 1732 + 808 + 0,
                x["VPN"]["OpenVPN"]["Port"]["Active"] === undefined
                  ? 0
                  : (x["VPN"]["OpenVPN"]["Port"]["Active"] as number)
              );
              A.store.Ref(ptr + 2132 + 1732 + 808 + 4, x["VPN"]["OpenVPN"]["Port"]["Effective"]);
              A.store.Bool(ptr + 2132 + 1732 + 808 + 27, "UserPolicy" in x["VPN"]["OpenVPN"]["Port"] ? true : false);
              A.store.Int32(
                ptr + 2132 + 1732 + 808 + 8,
                x["VPN"]["OpenVPN"]["Port"]["UserPolicy"] === undefined
                  ? 0
                  : (x["VPN"]["OpenVPN"]["Port"]["UserPolicy"] as number)
              );
              A.store.Bool(ptr + 2132 + 1732 + 808 + 28, "DevicePolicy" in x["VPN"]["OpenVPN"]["Port"] ? true : false);
              A.store.Int32(
                ptr + 2132 + 1732 + 808 + 12,
                x["VPN"]["OpenVPN"]["Port"]["DevicePolicy"] === undefined
                  ? 0
                  : (x["VPN"]["OpenVPN"]["Port"]["DevicePolicy"] as number)
              );
              A.store.Bool(ptr + 2132 + 1732 + 808 + 29, "UserSetting" in x["VPN"]["OpenVPN"]["Port"] ? true : false);
              A.store.Int32(
                ptr + 2132 + 1732 + 808 + 16,
                x["VPN"]["OpenVPN"]["Port"]["UserSetting"] === undefined
                  ? 0
                  : (x["VPN"]["OpenVPN"]["Port"]["UserSetting"] as number)
              );
              A.store.Bool(ptr + 2132 + 1732 + 808 + 30, "SharedSetting" in x["VPN"]["OpenVPN"]["Port"] ? true : false);
              A.store.Int32(
                ptr + 2132 + 1732 + 808 + 20,
                x["VPN"]["OpenVPN"]["Port"]["SharedSetting"] === undefined
                  ? 0
                  : (x["VPN"]["OpenVPN"]["Port"]["SharedSetting"] as number)
              );
              A.store.Bool(ptr + 2132 + 1732 + 808 + 31, "UserEditable" in x["VPN"]["OpenVPN"]["Port"] ? true : false);
              A.store.Bool(ptr + 2132 + 1732 + 808 + 24, x["VPN"]["OpenVPN"]["Port"]["UserEditable"] ? true : false);
              A.store.Bool(
                ptr + 2132 + 1732 + 808 + 32,
                "DeviceEditable" in x["VPN"]["OpenVPN"]["Port"] ? true : false
              );
              A.store.Bool(ptr + 2132 + 1732 + 808 + 25, x["VPN"]["OpenVPN"]["Port"]["DeviceEditable"] ? true : false);
            }

            if (typeof x["VPN"]["OpenVPN"]["Proto"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 844 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 844 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 844 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 844 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 844 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 844 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 844 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 844 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 844 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 844 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 844 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 844 + 28, true);
              A.store.Ref(ptr + 2132 + 1732 + 844 + 0, x["VPN"]["OpenVPN"]["Proto"]["Active"]);
              A.store.Ref(ptr + 2132 + 1732 + 844 + 4, x["VPN"]["OpenVPN"]["Proto"]["Effective"]);
              A.store.Ref(ptr + 2132 + 1732 + 844 + 8, x["VPN"]["OpenVPN"]["Proto"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 844 + 12, x["VPN"]["OpenVPN"]["Proto"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 844 + 16, x["VPN"]["OpenVPN"]["Proto"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 1732 + 844 + 20, x["VPN"]["OpenVPN"]["Proto"]["SharedSetting"]);
              A.store.Bool(ptr + 2132 + 1732 + 844 + 26, "UserEditable" in x["VPN"]["OpenVPN"]["Proto"] ? true : false);
              A.store.Bool(ptr + 2132 + 1732 + 844 + 24, x["VPN"]["OpenVPN"]["Proto"]["UserEditable"] ? true : false);
              A.store.Bool(
                ptr + 2132 + 1732 + 844 + 27,
                "DeviceEditable" in x["VPN"]["OpenVPN"]["Proto"] ? true : false
              );
              A.store.Bool(ptr + 2132 + 1732 + 844 + 25, x["VPN"]["OpenVPN"]["Proto"]["DeviceEditable"] ? true : false);
            }

            if (typeof x["VPN"]["OpenVPN"]["PushPeerInfo"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 876 + 21, false);
              A.store.Bool(ptr + 2132 + 1732 + 876 + 14, false);
              A.store.Bool(ptr + 2132 + 1732 + 876 + 0, false);
              A.store.Ref(ptr + 2132 + 1732 + 876 + 4, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 876 + 15, false);
              A.store.Bool(ptr + 2132 + 1732 + 876 + 8, false);
              A.store.Bool(ptr + 2132 + 1732 + 876 + 16, false);
              A.store.Bool(ptr + 2132 + 1732 + 876 + 9, false);
              A.store.Bool(ptr + 2132 + 1732 + 876 + 17, false);
              A.store.Bool(ptr + 2132 + 1732 + 876 + 10, false);
              A.store.Bool(ptr + 2132 + 1732 + 876 + 18, false);
              A.store.Bool(ptr + 2132 + 1732 + 876 + 11, false);
              A.store.Bool(ptr + 2132 + 1732 + 876 + 19, false);
              A.store.Bool(ptr + 2132 + 1732 + 876 + 12, false);
              A.store.Bool(ptr + 2132 + 1732 + 876 + 20, false);
              A.store.Bool(ptr + 2132 + 1732 + 876 + 13, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 876 + 21, true);
              A.store.Bool(
                ptr + 2132 + 1732 + 876 + 14,
                "Active" in x["VPN"]["OpenVPN"]["PushPeerInfo"] ? true : false
              );
              A.store.Bool(ptr + 2132 + 1732 + 876 + 0, x["VPN"]["OpenVPN"]["PushPeerInfo"]["Active"] ? true : false);
              A.store.Ref(ptr + 2132 + 1732 + 876 + 4, x["VPN"]["OpenVPN"]["PushPeerInfo"]["Effective"]);
              A.store.Bool(
                ptr + 2132 + 1732 + 876 + 15,
                "UserPolicy" in x["VPN"]["OpenVPN"]["PushPeerInfo"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 876 + 8,
                x["VPN"]["OpenVPN"]["PushPeerInfo"]["UserPolicy"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 876 + 16,
                "DevicePolicy" in x["VPN"]["OpenVPN"]["PushPeerInfo"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 876 + 9,
                x["VPN"]["OpenVPN"]["PushPeerInfo"]["DevicePolicy"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 876 + 17,
                "UserSetting" in x["VPN"]["OpenVPN"]["PushPeerInfo"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 876 + 10,
                x["VPN"]["OpenVPN"]["PushPeerInfo"]["UserSetting"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 876 + 18,
                "SharedSetting" in x["VPN"]["OpenVPN"]["PushPeerInfo"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 876 + 11,
                x["VPN"]["OpenVPN"]["PushPeerInfo"]["SharedSetting"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 876 + 19,
                "UserEditable" in x["VPN"]["OpenVPN"]["PushPeerInfo"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 876 + 12,
                x["VPN"]["OpenVPN"]["PushPeerInfo"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 876 + 20,
                "DeviceEditable" in x["VPN"]["OpenVPN"]["PushPeerInfo"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 876 + 13,
                x["VPN"]["OpenVPN"]["PushPeerInfo"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["OpenVPN"]["RemoteCertEKU"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 900 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 900 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 900 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 900 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 900 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 900 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 900 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 900 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 900 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 900 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 900 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 900 + 28, true);
              A.store.Ref(ptr + 2132 + 1732 + 900 + 0, x["VPN"]["OpenVPN"]["RemoteCertEKU"]["Active"]);
              A.store.Ref(ptr + 2132 + 1732 + 900 + 4, x["VPN"]["OpenVPN"]["RemoteCertEKU"]["Effective"]);
              A.store.Ref(ptr + 2132 + 1732 + 900 + 8, x["VPN"]["OpenVPN"]["RemoteCertEKU"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 900 + 12, x["VPN"]["OpenVPN"]["RemoteCertEKU"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 900 + 16, x["VPN"]["OpenVPN"]["RemoteCertEKU"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 1732 + 900 + 20, x["VPN"]["OpenVPN"]["RemoteCertEKU"]["SharedSetting"]);
              A.store.Bool(
                ptr + 2132 + 1732 + 900 + 26,
                "UserEditable" in x["VPN"]["OpenVPN"]["RemoteCertEKU"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 900 + 24,
                x["VPN"]["OpenVPN"]["RemoteCertEKU"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 900 + 27,
                "DeviceEditable" in x["VPN"]["OpenVPN"]["RemoteCertEKU"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 900 + 25,
                x["VPN"]["OpenVPN"]["RemoteCertEKU"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["OpenVPN"]["RemoteCertKU"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 932 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 932 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 932 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 932 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 932 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 932 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 932 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 932 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 932 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 932 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 932 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 932 + 28, true);
              A.store.Ref(ptr + 2132 + 1732 + 932 + 0, x["VPN"]["OpenVPN"]["RemoteCertKU"]["Active"]);
              A.store.Ref(ptr + 2132 + 1732 + 932 + 4, x["VPN"]["OpenVPN"]["RemoteCertKU"]["Effective"]);
              A.store.Ref(ptr + 2132 + 1732 + 932 + 8, x["VPN"]["OpenVPN"]["RemoteCertKU"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 932 + 12, x["VPN"]["OpenVPN"]["RemoteCertKU"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 932 + 16, x["VPN"]["OpenVPN"]["RemoteCertKU"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 1732 + 932 + 20, x["VPN"]["OpenVPN"]["RemoteCertKU"]["SharedSetting"]);
              A.store.Bool(
                ptr + 2132 + 1732 + 932 + 26,
                "UserEditable" in x["VPN"]["OpenVPN"]["RemoteCertKU"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 932 + 24,
                x["VPN"]["OpenVPN"]["RemoteCertKU"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 932 + 27,
                "DeviceEditable" in x["VPN"]["OpenVPN"]["RemoteCertKU"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 932 + 25,
                x["VPN"]["OpenVPN"]["RemoteCertKU"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["OpenVPN"]["RemoteCertTLS"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 964 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 964 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 964 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 964 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 964 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 964 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 964 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 964 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 964 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 964 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 964 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 964 + 28, true);
              A.store.Ref(ptr + 2132 + 1732 + 964 + 0, x["VPN"]["OpenVPN"]["RemoteCertTLS"]["Active"]);
              A.store.Ref(ptr + 2132 + 1732 + 964 + 4, x["VPN"]["OpenVPN"]["RemoteCertTLS"]["Effective"]);
              A.store.Ref(ptr + 2132 + 1732 + 964 + 8, x["VPN"]["OpenVPN"]["RemoteCertTLS"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 964 + 12, x["VPN"]["OpenVPN"]["RemoteCertTLS"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 964 + 16, x["VPN"]["OpenVPN"]["RemoteCertTLS"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 1732 + 964 + 20, x["VPN"]["OpenVPN"]["RemoteCertTLS"]["SharedSetting"]);
              A.store.Bool(
                ptr + 2132 + 1732 + 964 + 26,
                "UserEditable" in x["VPN"]["OpenVPN"]["RemoteCertTLS"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 964 + 24,
                x["VPN"]["OpenVPN"]["RemoteCertTLS"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 964 + 27,
                "DeviceEditable" in x["VPN"]["OpenVPN"]["RemoteCertTLS"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 964 + 25,
                x["VPN"]["OpenVPN"]["RemoteCertTLS"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["OpenVPN"]["RenegSec"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 996 + 33, false);
              A.store.Bool(ptr + 2132 + 1732 + 996 + 26, false);
              A.store.Int32(ptr + 2132 + 1732 + 996 + 0, 0);
              A.store.Ref(ptr + 2132 + 1732 + 996 + 4, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 996 + 27, false);
              A.store.Int32(ptr + 2132 + 1732 + 996 + 8, 0);
              A.store.Bool(ptr + 2132 + 1732 + 996 + 28, false);
              A.store.Int32(ptr + 2132 + 1732 + 996 + 12, 0);
              A.store.Bool(ptr + 2132 + 1732 + 996 + 29, false);
              A.store.Int32(ptr + 2132 + 1732 + 996 + 16, 0);
              A.store.Bool(ptr + 2132 + 1732 + 996 + 30, false);
              A.store.Int32(ptr + 2132 + 1732 + 996 + 20, 0);
              A.store.Bool(ptr + 2132 + 1732 + 996 + 31, false);
              A.store.Bool(ptr + 2132 + 1732 + 996 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 996 + 32, false);
              A.store.Bool(ptr + 2132 + 1732 + 996 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 996 + 33, true);
              A.store.Bool(ptr + 2132 + 1732 + 996 + 26, "Active" in x["VPN"]["OpenVPN"]["RenegSec"] ? true : false);
              A.store.Int32(
                ptr + 2132 + 1732 + 996 + 0,
                x["VPN"]["OpenVPN"]["RenegSec"]["Active"] === undefined
                  ? 0
                  : (x["VPN"]["OpenVPN"]["RenegSec"]["Active"] as number)
              );
              A.store.Ref(ptr + 2132 + 1732 + 996 + 4, x["VPN"]["OpenVPN"]["RenegSec"]["Effective"]);
              A.store.Bool(
                ptr + 2132 + 1732 + 996 + 27,
                "UserPolicy" in x["VPN"]["OpenVPN"]["RenegSec"] ? true : false
              );
              A.store.Int32(
                ptr + 2132 + 1732 + 996 + 8,
                x["VPN"]["OpenVPN"]["RenegSec"]["UserPolicy"] === undefined
                  ? 0
                  : (x["VPN"]["OpenVPN"]["RenegSec"]["UserPolicy"] as number)
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 996 + 28,
                "DevicePolicy" in x["VPN"]["OpenVPN"]["RenegSec"] ? true : false
              );
              A.store.Int32(
                ptr + 2132 + 1732 + 996 + 12,
                x["VPN"]["OpenVPN"]["RenegSec"]["DevicePolicy"] === undefined
                  ? 0
                  : (x["VPN"]["OpenVPN"]["RenegSec"]["DevicePolicy"] as number)
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 996 + 29,
                "UserSetting" in x["VPN"]["OpenVPN"]["RenegSec"] ? true : false
              );
              A.store.Int32(
                ptr + 2132 + 1732 + 996 + 16,
                x["VPN"]["OpenVPN"]["RenegSec"]["UserSetting"] === undefined
                  ? 0
                  : (x["VPN"]["OpenVPN"]["RenegSec"]["UserSetting"] as number)
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 996 + 30,
                "SharedSetting" in x["VPN"]["OpenVPN"]["RenegSec"] ? true : false
              );
              A.store.Int32(
                ptr + 2132 + 1732 + 996 + 20,
                x["VPN"]["OpenVPN"]["RenegSec"]["SharedSetting"] === undefined
                  ? 0
                  : (x["VPN"]["OpenVPN"]["RenegSec"]["SharedSetting"] as number)
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 996 + 31,
                "UserEditable" in x["VPN"]["OpenVPN"]["RenegSec"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 996 + 24,
                x["VPN"]["OpenVPN"]["RenegSec"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 996 + 32,
                "DeviceEditable" in x["VPN"]["OpenVPN"]["RenegSec"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 996 + 25,
                x["VPN"]["OpenVPN"]["RenegSec"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["OpenVPN"]["SaveCredentials"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 1032 + 21, false);
              A.store.Bool(ptr + 2132 + 1732 + 1032 + 14, false);
              A.store.Bool(ptr + 2132 + 1732 + 1032 + 0, false);
              A.store.Ref(ptr + 2132 + 1732 + 1032 + 4, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 1032 + 15, false);
              A.store.Bool(ptr + 2132 + 1732 + 1032 + 8, false);
              A.store.Bool(ptr + 2132 + 1732 + 1032 + 16, false);
              A.store.Bool(ptr + 2132 + 1732 + 1032 + 9, false);
              A.store.Bool(ptr + 2132 + 1732 + 1032 + 17, false);
              A.store.Bool(ptr + 2132 + 1732 + 1032 + 10, false);
              A.store.Bool(ptr + 2132 + 1732 + 1032 + 18, false);
              A.store.Bool(ptr + 2132 + 1732 + 1032 + 11, false);
              A.store.Bool(ptr + 2132 + 1732 + 1032 + 19, false);
              A.store.Bool(ptr + 2132 + 1732 + 1032 + 12, false);
              A.store.Bool(ptr + 2132 + 1732 + 1032 + 20, false);
              A.store.Bool(ptr + 2132 + 1732 + 1032 + 13, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 1032 + 21, true);
              A.store.Bool(
                ptr + 2132 + 1732 + 1032 + 14,
                "Active" in x["VPN"]["OpenVPN"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1032 + 0,
                x["VPN"]["OpenVPN"]["SaveCredentials"]["Active"] ? true : false
              );
              A.store.Ref(ptr + 2132 + 1732 + 1032 + 4, x["VPN"]["OpenVPN"]["SaveCredentials"]["Effective"]);
              A.store.Bool(
                ptr + 2132 + 1732 + 1032 + 15,
                "UserPolicy" in x["VPN"]["OpenVPN"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1032 + 8,
                x["VPN"]["OpenVPN"]["SaveCredentials"]["UserPolicy"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1032 + 16,
                "DevicePolicy" in x["VPN"]["OpenVPN"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1032 + 9,
                x["VPN"]["OpenVPN"]["SaveCredentials"]["DevicePolicy"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1032 + 17,
                "UserSetting" in x["VPN"]["OpenVPN"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1032 + 10,
                x["VPN"]["OpenVPN"]["SaveCredentials"]["UserSetting"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1032 + 18,
                "SharedSetting" in x["VPN"]["OpenVPN"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1032 + 11,
                x["VPN"]["OpenVPN"]["SaveCredentials"]["SharedSetting"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1032 + 19,
                "UserEditable" in x["VPN"]["OpenVPN"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1032 + 12,
                x["VPN"]["OpenVPN"]["SaveCredentials"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1032 + 20,
                "DeviceEditable" in x["VPN"]["OpenVPN"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1032 + 13,
                x["VPN"]["OpenVPN"]["SaveCredentials"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["OpenVPN"]["ServerCAPEMs"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 1056 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 1056 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1056 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1056 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1056 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1056 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1056 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 1056 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 1056 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 1056 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 1056 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 1056 + 28, true);
              A.store.Ref(ptr + 2132 + 1732 + 1056 + 0, x["VPN"]["OpenVPN"]["ServerCAPEMs"]["Active"]);
              A.store.Ref(ptr + 2132 + 1732 + 1056 + 4, x["VPN"]["OpenVPN"]["ServerCAPEMs"]["Effective"]);
              A.store.Ref(ptr + 2132 + 1732 + 1056 + 8, x["VPN"]["OpenVPN"]["ServerCAPEMs"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 1056 + 12, x["VPN"]["OpenVPN"]["ServerCAPEMs"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 1056 + 16, x["VPN"]["OpenVPN"]["ServerCAPEMs"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 1732 + 1056 + 20, x["VPN"]["OpenVPN"]["ServerCAPEMs"]["SharedSetting"]);
              A.store.Bool(
                ptr + 2132 + 1732 + 1056 + 26,
                "UserEditable" in x["VPN"]["OpenVPN"]["ServerCAPEMs"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1056 + 24,
                x["VPN"]["OpenVPN"]["ServerCAPEMs"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1056 + 27,
                "DeviceEditable" in x["VPN"]["OpenVPN"]["ServerCAPEMs"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1056 + 25,
                x["VPN"]["OpenVPN"]["ServerCAPEMs"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["OpenVPN"]["ServerCARefs"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 1088 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 1088 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1088 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1088 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1088 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1088 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1088 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 1088 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 1088 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 1088 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 1088 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 1088 + 28, true);
              A.store.Ref(ptr + 2132 + 1732 + 1088 + 0, x["VPN"]["OpenVPN"]["ServerCARefs"]["Active"]);
              A.store.Ref(ptr + 2132 + 1732 + 1088 + 4, x["VPN"]["OpenVPN"]["ServerCARefs"]["Effective"]);
              A.store.Ref(ptr + 2132 + 1732 + 1088 + 8, x["VPN"]["OpenVPN"]["ServerCARefs"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 1088 + 12, x["VPN"]["OpenVPN"]["ServerCARefs"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 1088 + 16, x["VPN"]["OpenVPN"]["ServerCARefs"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 1732 + 1088 + 20, x["VPN"]["OpenVPN"]["ServerCARefs"]["SharedSetting"]);
              A.store.Bool(
                ptr + 2132 + 1732 + 1088 + 26,
                "UserEditable" in x["VPN"]["OpenVPN"]["ServerCARefs"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1088 + 24,
                x["VPN"]["OpenVPN"]["ServerCARefs"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1088 + 27,
                "DeviceEditable" in x["VPN"]["OpenVPN"]["ServerCARefs"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1088 + 25,
                x["VPN"]["OpenVPN"]["ServerCARefs"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["OpenVPN"]["ServerCertRef"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 1120 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 1120 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1120 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1120 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1120 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1120 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1120 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 1120 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 1120 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 1120 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 1120 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 1120 + 28, true);
              A.store.Ref(ptr + 2132 + 1732 + 1120 + 0, x["VPN"]["OpenVPN"]["ServerCertRef"]["Active"]);
              A.store.Ref(ptr + 2132 + 1732 + 1120 + 4, x["VPN"]["OpenVPN"]["ServerCertRef"]["Effective"]);
              A.store.Ref(ptr + 2132 + 1732 + 1120 + 8, x["VPN"]["OpenVPN"]["ServerCertRef"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 1120 + 12, x["VPN"]["OpenVPN"]["ServerCertRef"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 1120 + 16, x["VPN"]["OpenVPN"]["ServerCertRef"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 1732 + 1120 + 20, x["VPN"]["OpenVPN"]["ServerCertRef"]["SharedSetting"]);
              A.store.Bool(
                ptr + 2132 + 1732 + 1120 + 26,
                "UserEditable" in x["VPN"]["OpenVPN"]["ServerCertRef"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1120 + 24,
                x["VPN"]["OpenVPN"]["ServerCertRef"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1120 + 27,
                "DeviceEditable" in x["VPN"]["OpenVPN"]["ServerCertRef"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1120 + 25,
                x["VPN"]["OpenVPN"]["ServerCertRef"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["OpenVPN"]["ServerPollTimeout"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 1152 + 33, false);
              A.store.Bool(ptr + 2132 + 1732 + 1152 + 26, false);
              A.store.Int32(ptr + 2132 + 1732 + 1152 + 0, 0);
              A.store.Ref(ptr + 2132 + 1732 + 1152 + 4, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 1152 + 27, false);
              A.store.Int32(ptr + 2132 + 1732 + 1152 + 8, 0);
              A.store.Bool(ptr + 2132 + 1732 + 1152 + 28, false);
              A.store.Int32(ptr + 2132 + 1732 + 1152 + 12, 0);
              A.store.Bool(ptr + 2132 + 1732 + 1152 + 29, false);
              A.store.Int32(ptr + 2132 + 1732 + 1152 + 16, 0);
              A.store.Bool(ptr + 2132 + 1732 + 1152 + 30, false);
              A.store.Int32(ptr + 2132 + 1732 + 1152 + 20, 0);
              A.store.Bool(ptr + 2132 + 1732 + 1152 + 31, false);
              A.store.Bool(ptr + 2132 + 1732 + 1152 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 1152 + 32, false);
              A.store.Bool(ptr + 2132 + 1732 + 1152 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 1152 + 33, true);
              A.store.Bool(
                ptr + 2132 + 1732 + 1152 + 26,
                "Active" in x["VPN"]["OpenVPN"]["ServerPollTimeout"] ? true : false
              );
              A.store.Int32(
                ptr + 2132 + 1732 + 1152 + 0,
                x["VPN"]["OpenVPN"]["ServerPollTimeout"]["Active"] === undefined
                  ? 0
                  : (x["VPN"]["OpenVPN"]["ServerPollTimeout"]["Active"] as number)
              );
              A.store.Ref(ptr + 2132 + 1732 + 1152 + 4, x["VPN"]["OpenVPN"]["ServerPollTimeout"]["Effective"]);
              A.store.Bool(
                ptr + 2132 + 1732 + 1152 + 27,
                "UserPolicy" in x["VPN"]["OpenVPN"]["ServerPollTimeout"] ? true : false
              );
              A.store.Int32(
                ptr + 2132 + 1732 + 1152 + 8,
                x["VPN"]["OpenVPN"]["ServerPollTimeout"]["UserPolicy"] === undefined
                  ? 0
                  : (x["VPN"]["OpenVPN"]["ServerPollTimeout"]["UserPolicy"] as number)
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1152 + 28,
                "DevicePolicy" in x["VPN"]["OpenVPN"]["ServerPollTimeout"] ? true : false
              );
              A.store.Int32(
                ptr + 2132 + 1732 + 1152 + 12,
                x["VPN"]["OpenVPN"]["ServerPollTimeout"]["DevicePolicy"] === undefined
                  ? 0
                  : (x["VPN"]["OpenVPN"]["ServerPollTimeout"]["DevicePolicy"] as number)
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1152 + 29,
                "UserSetting" in x["VPN"]["OpenVPN"]["ServerPollTimeout"] ? true : false
              );
              A.store.Int32(
                ptr + 2132 + 1732 + 1152 + 16,
                x["VPN"]["OpenVPN"]["ServerPollTimeout"]["UserSetting"] === undefined
                  ? 0
                  : (x["VPN"]["OpenVPN"]["ServerPollTimeout"]["UserSetting"] as number)
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1152 + 30,
                "SharedSetting" in x["VPN"]["OpenVPN"]["ServerPollTimeout"] ? true : false
              );
              A.store.Int32(
                ptr + 2132 + 1732 + 1152 + 20,
                x["VPN"]["OpenVPN"]["ServerPollTimeout"]["SharedSetting"] === undefined
                  ? 0
                  : (x["VPN"]["OpenVPN"]["ServerPollTimeout"]["SharedSetting"] as number)
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1152 + 31,
                "UserEditable" in x["VPN"]["OpenVPN"]["ServerPollTimeout"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1152 + 24,
                x["VPN"]["OpenVPN"]["ServerPollTimeout"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1152 + 32,
                "DeviceEditable" in x["VPN"]["OpenVPN"]["ServerPollTimeout"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1152 + 25,
                x["VPN"]["OpenVPN"]["ServerPollTimeout"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["OpenVPN"]["Shaper"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 1188 + 33, false);
              A.store.Bool(ptr + 2132 + 1732 + 1188 + 26, false);
              A.store.Int32(ptr + 2132 + 1732 + 1188 + 0, 0);
              A.store.Ref(ptr + 2132 + 1732 + 1188 + 4, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 1188 + 27, false);
              A.store.Int32(ptr + 2132 + 1732 + 1188 + 8, 0);
              A.store.Bool(ptr + 2132 + 1732 + 1188 + 28, false);
              A.store.Int32(ptr + 2132 + 1732 + 1188 + 12, 0);
              A.store.Bool(ptr + 2132 + 1732 + 1188 + 29, false);
              A.store.Int32(ptr + 2132 + 1732 + 1188 + 16, 0);
              A.store.Bool(ptr + 2132 + 1732 + 1188 + 30, false);
              A.store.Int32(ptr + 2132 + 1732 + 1188 + 20, 0);
              A.store.Bool(ptr + 2132 + 1732 + 1188 + 31, false);
              A.store.Bool(ptr + 2132 + 1732 + 1188 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 1188 + 32, false);
              A.store.Bool(ptr + 2132 + 1732 + 1188 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 1188 + 33, true);
              A.store.Bool(ptr + 2132 + 1732 + 1188 + 26, "Active" in x["VPN"]["OpenVPN"]["Shaper"] ? true : false);
              A.store.Int32(
                ptr + 2132 + 1732 + 1188 + 0,
                x["VPN"]["OpenVPN"]["Shaper"]["Active"] === undefined
                  ? 0
                  : (x["VPN"]["OpenVPN"]["Shaper"]["Active"] as number)
              );
              A.store.Ref(ptr + 2132 + 1732 + 1188 + 4, x["VPN"]["OpenVPN"]["Shaper"]["Effective"]);
              A.store.Bool(ptr + 2132 + 1732 + 1188 + 27, "UserPolicy" in x["VPN"]["OpenVPN"]["Shaper"] ? true : false);
              A.store.Int32(
                ptr + 2132 + 1732 + 1188 + 8,
                x["VPN"]["OpenVPN"]["Shaper"]["UserPolicy"] === undefined
                  ? 0
                  : (x["VPN"]["OpenVPN"]["Shaper"]["UserPolicy"] as number)
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1188 + 28,
                "DevicePolicy" in x["VPN"]["OpenVPN"]["Shaper"] ? true : false
              );
              A.store.Int32(
                ptr + 2132 + 1732 + 1188 + 12,
                x["VPN"]["OpenVPN"]["Shaper"]["DevicePolicy"] === undefined
                  ? 0
                  : (x["VPN"]["OpenVPN"]["Shaper"]["DevicePolicy"] as number)
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1188 + 29,
                "UserSetting" in x["VPN"]["OpenVPN"]["Shaper"] ? true : false
              );
              A.store.Int32(
                ptr + 2132 + 1732 + 1188 + 16,
                x["VPN"]["OpenVPN"]["Shaper"]["UserSetting"] === undefined
                  ? 0
                  : (x["VPN"]["OpenVPN"]["Shaper"]["UserSetting"] as number)
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1188 + 30,
                "SharedSetting" in x["VPN"]["OpenVPN"]["Shaper"] ? true : false
              );
              A.store.Int32(
                ptr + 2132 + 1732 + 1188 + 20,
                x["VPN"]["OpenVPN"]["Shaper"]["SharedSetting"] === undefined
                  ? 0
                  : (x["VPN"]["OpenVPN"]["Shaper"]["SharedSetting"] as number)
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1188 + 31,
                "UserEditable" in x["VPN"]["OpenVPN"]["Shaper"] ? true : false
              );
              A.store.Bool(ptr + 2132 + 1732 + 1188 + 24, x["VPN"]["OpenVPN"]["Shaper"]["UserEditable"] ? true : false);
              A.store.Bool(
                ptr + 2132 + 1732 + 1188 + 32,
                "DeviceEditable" in x["VPN"]["OpenVPN"]["Shaper"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1188 + 25,
                x["VPN"]["OpenVPN"]["Shaper"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["OpenVPN"]["StaticChallenge"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 1224 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 1224 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1224 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1224 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1224 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1224 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1224 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 1224 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 1224 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 1224 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 1224 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 1224 + 28, true);
              A.store.Ref(ptr + 2132 + 1732 + 1224 + 0, x["VPN"]["OpenVPN"]["StaticChallenge"]["Active"]);
              A.store.Ref(ptr + 2132 + 1732 + 1224 + 4, x["VPN"]["OpenVPN"]["StaticChallenge"]["Effective"]);
              A.store.Ref(ptr + 2132 + 1732 + 1224 + 8, x["VPN"]["OpenVPN"]["StaticChallenge"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 1224 + 12, x["VPN"]["OpenVPN"]["StaticChallenge"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 1224 + 16, x["VPN"]["OpenVPN"]["StaticChallenge"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 1732 + 1224 + 20, x["VPN"]["OpenVPN"]["StaticChallenge"]["SharedSetting"]);
              A.store.Bool(
                ptr + 2132 + 1732 + 1224 + 26,
                "UserEditable" in x["VPN"]["OpenVPN"]["StaticChallenge"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1224 + 24,
                x["VPN"]["OpenVPN"]["StaticChallenge"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1224 + 27,
                "DeviceEditable" in x["VPN"]["OpenVPN"]["StaticChallenge"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1224 + 25,
                x["VPN"]["OpenVPN"]["StaticChallenge"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["OpenVPN"]["TLSAuthContents"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 1256 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 1256 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1256 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1256 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1256 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1256 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1256 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 1256 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 1256 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 1256 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 1256 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 1256 + 28, true);
              A.store.Ref(ptr + 2132 + 1732 + 1256 + 0, x["VPN"]["OpenVPN"]["TLSAuthContents"]["Active"]);
              A.store.Ref(ptr + 2132 + 1732 + 1256 + 4, x["VPN"]["OpenVPN"]["TLSAuthContents"]["Effective"]);
              A.store.Ref(ptr + 2132 + 1732 + 1256 + 8, x["VPN"]["OpenVPN"]["TLSAuthContents"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 1256 + 12, x["VPN"]["OpenVPN"]["TLSAuthContents"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 1256 + 16, x["VPN"]["OpenVPN"]["TLSAuthContents"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 1732 + 1256 + 20, x["VPN"]["OpenVPN"]["TLSAuthContents"]["SharedSetting"]);
              A.store.Bool(
                ptr + 2132 + 1732 + 1256 + 26,
                "UserEditable" in x["VPN"]["OpenVPN"]["TLSAuthContents"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1256 + 24,
                x["VPN"]["OpenVPN"]["TLSAuthContents"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1256 + 27,
                "DeviceEditable" in x["VPN"]["OpenVPN"]["TLSAuthContents"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1256 + 25,
                x["VPN"]["OpenVPN"]["TLSAuthContents"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["OpenVPN"]["TLSRemote"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 1288 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 1288 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1288 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1288 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1288 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1288 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1288 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 1288 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 1288 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 1288 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 1288 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 1288 + 28, true);
              A.store.Ref(ptr + 2132 + 1732 + 1288 + 0, x["VPN"]["OpenVPN"]["TLSRemote"]["Active"]);
              A.store.Ref(ptr + 2132 + 1732 + 1288 + 4, x["VPN"]["OpenVPN"]["TLSRemote"]["Effective"]);
              A.store.Ref(ptr + 2132 + 1732 + 1288 + 8, x["VPN"]["OpenVPN"]["TLSRemote"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 1288 + 12, x["VPN"]["OpenVPN"]["TLSRemote"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 1288 + 16, x["VPN"]["OpenVPN"]["TLSRemote"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 1732 + 1288 + 20, x["VPN"]["OpenVPN"]["TLSRemote"]["SharedSetting"]);
              A.store.Bool(
                ptr + 2132 + 1732 + 1288 + 26,
                "UserEditable" in x["VPN"]["OpenVPN"]["TLSRemote"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1288 + 24,
                x["VPN"]["OpenVPN"]["TLSRemote"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1288 + 27,
                "DeviceEditable" in x["VPN"]["OpenVPN"]["TLSRemote"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1288 + 25,
                x["VPN"]["OpenVPN"]["TLSRemote"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["OpenVPN"]["TLSVersionMin"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 1320 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 1320 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1320 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1320 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1320 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1320 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1320 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 1320 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 1320 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 1320 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 1320 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 1320 + 28, true);
              A.store.Ref(ptr + 2132 + 1732 + 1320 + 0, x["VPN"]["OpenVPN"]["TLSVersionMin"]["Active"]);
              A.store.Ref(ptr + 2132 + 1732 + 1320 + 4, x["VPN"]["OpenVPN"]["TLSVersionMin"]["Effective"]);
              A.store.Ref(ptr + 2132 + 1732 + 1320 + 8, x["VPN"]["OpenVPN"]["TLSVersionMin"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 1320 + 12, x["VPN"]["OpenVPN"]["TLSVersionMin"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 1320 + 16, x["VPN"]["OpenVPN"]["TLSVersionMin"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 1732 + 1320 + 20, x["VPN"]["OpenVPN"]["TLSVersionMin"]["SharedSetting"]);
              A.store.Bool(
                ptr + 2132 + 1732 + 1320 + 26,
                "UserEditable" in x["VPN"]["OpenVPN"]["TLSVersionMin"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1320 + 24,
                x["VPN"]["OpenVPN"]["TLSVersionMin"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1320 + 27,
                "DeviceEditable" in x["VPN"]["OpenVPN"]["TLSVersionMin"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1320 + 25,
                x["VPN"]["OpenVPN"]["TLSVersionMin"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["OpenVPN"]["UserAuthenticationType"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 1352 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 1352 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1352 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1352 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1352 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1352 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1352 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 1352 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 1352 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 1352 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 1352 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 1352 + 28, true);
              A.store.Ref(ptr + 2132 + 1732 + 1352 + 0, x["VPN"]["OpenVPN"]["UserAuthenticationType"]["Active"]);
              A.store.Ref(ptr + 2132 + 1732 + 1352 + 4, x["VPN"]["OpenVPN"]["UserAuthenticationType"]["Effective"]);
              A.store.Ref(ptr + 2132 + 1732 + 1352 + 8, x["VPN"]["OpenVPN"]["UserAuthenticationType"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 1352 + 12, x["VPN"]["OpenVPN"]["UserAuthenticationType"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 1352 + 16, x["VPN"]["OpenVPN"]["UserAuthenticationType"]["UserSetting"]);
              A.store.Ref(
                ptr + 2132 + 1732 + 1352 + 20,
                x["VPN"]["OpenVPN"]["UserAuthenticationType"]["SharedSetting"]
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1352 + 26,
                "UserEditable" in x["VPN"]["OpenVPN"]["UserAuthenticationType"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1352 + 24,
                x["VPN"]["OpenVPN"]["UserAuthenticationType"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1352 + 27,
                "DeviceEditable" in x["VPN"]["OpenVPN"]["UserAuthenticationType"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1352 + 25,
                x["VPN"]["OpenVPN"]["UserAuthenticationType"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["OpenVPN"]["Username"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 1384 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 1384 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1384 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1384 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1384 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1384 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1384 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 1384 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 1384 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 1384 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 1384 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 1384 + 28, true);
              A.store.Ref(ptr + 2132 + 1732 + 1384 + 0, x["VPN"]["OpenVPN"]["Username"]["Active"]);
              A.store.Ref(ptr + 2132 + 1732 + 1384 + 4, x["VPN"]["OpenVPN"]["Username"]["Effective"]);
              A.store.Ref(ptr + 2132 + 1732 + 1384 + 8, x["VPN"]["OpenVPN"]["Username"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 1384 + 12, x["VPN"]["OpenVPN"]["Username"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 1384 + 16, x["VPN"]["OpenVPN"]["Username"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 1732 + 1384 + 20, x["VPN"]["OpenVPN"]["Username"]["SharedSetting"]);
              A.store.Bool(
                ptr + 2132 + 1732 + 1384 + 26,
                "UserEditable" in x["VPN"]["OpenVPN"]["Username"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1384 + 24,
                x["VPN"]["OpenVPN"]["Username"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1384 + 27,
                "DeviceEditable" in x["VPN"]["OpenVPN"]["Username"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1384 + 25,
                x["VPN"]["OpenVPN"]["Username"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["OpenVPN"]["Verb"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 1416 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 1416 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1416 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1416 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1416 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1416 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1416 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 1416 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 1416 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 1416 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 1416 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 1416 + 28, true);
              A.store.Ref(ptr + 2132 + 1732 + 1416 + 0, x["VPN"]["OpenVPN"]["Verb"]["Active"]);
              A.store.Ref(ptr + 2132 + 1732 + 1416 + 4, x["VPN"]["OpenVPN"]["Verb"]["Effective"]);
              A.store.Ref(ptr + 2132 + 1732 + 1416 + 8, x["VPN"]["OpenVPN"]["Verb"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 1416 + 12, x["VPN"]["OpenVPN"]["Verb"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 1416 + 16, x["VPN"]["OpenVPN"]["Verb"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 1732 + 1416 + 20, x["VPN"]["OpenVPN"]["Verb"]["SharedSetting"]);
              A.store.Bool(ptr + 2132 + 1732 + 1416 + 26, "UserEditable" in x["VPN"]["OpenVPN"]["Verb"] ? true : false);
              A.store.Bool(ptr + 2132 + 1732 + 1416 + 24, x["VPN"]["OpenVPN"]["Verb"]["UserEditable"] ? true : false);
              A.store.Bool(
                ptr + 2132 + 1732 + 1416 + 27,
                "DeviceEditable" in x["VPN"]["OpenVPN"]["Verb"] ? true : false
              );
              A.store.Bool(ptr + 2132 + 1732 + 1416 + 25, x["VPN"]["OpenVPN"]["Verb"]["DeviceEditable"] ? true : false);
            }

            if (typeof x["VPN"]["OpenVPN"]["VerifyHash"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 1448 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 1448 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1448 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1448 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1448 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1448 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1448 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 1448 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 1448 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 1448 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 1448 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 1448 + 28, true);
              A.store.Ref(ptr + 2132 + 1732 + 1448 + 0, x["VPN"]["OpenVPN"]["VerifyHash"]["Active"]);
              A.store.Ref(ptr + 2132 + 1732 + 1448 + 4, x["VPN"]["OpenVPN"]["VerifyHash"]["Effective"]);
              A.store.Ref(ptr + 2132 + 1732 + 1448 + 8, x["VPN"]["OpenVPN"]["VerifyHash"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 1448 + 12, x["VPN"]["OpenVPN"]["VerifyHash"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 1732 + 1448 + 16, x["VPN"]["OpenVPN"]["VerifyHash"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 1732 + 1448 + 20, x["VPN"]["OpenVPN"]["VerifyHash"]["SharedSetting"]);
              A.store.Bool(
                ptr + 2132 + 1732 + 1448 + 26,
                "UserEditable" in x["VPN"]["OpenVPN"]["VerifyHash"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1448 + 24,
                x["VPN"]["OpenVPN"]["VerifyHash"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1448 + 27,
                "DeviceEditable" in x["VPN"]["OpenVPN"]["VerifyHash"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 1732 + 1448 + 25,
                x["VPN"]["OpenVPN"]["VerifyHash"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["VPN"]["OpenVPN"]["VerifyX509"] === "undefined") {
              A.store.Bool(ptr + 2132 + 1732 + 1480 + 61, false);

              A.store.Bool(ptr + 2132 + 1732 + 1480 + 0 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 1480 + 0 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1480 + 0 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1480 + 0 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1480 + 0 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1480 + 0 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1480 + 0 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 1480 + 0 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 1480 + 0 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 1480 + 0 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 1480 + 0 + 25, false);

              A.store.Bool(ptr + 2132 + 1732 + 1480 + 32 + 28, false);
              A.store.Ref(ptr + 2132 + 1732 + 1480 + 32 + 0, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1480 + 32 + 4, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1480 + 32 + 8, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1480 + 32 + 12, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1480 + 32 + 16, undefined);
              A.store.Ref(ptr + 2132 + 1732 + 1480 + 32 + 20, undefined);
              A.store.Bool(ptr + 2132 + 1732 + 1480 + 32 + 26, false);
              A.store.Bool(ptr + 2132 + 1732 + 1480 + 32 + 24, false);
              A.store.Bool(ptr + 2132 + 1732 + 1480 + 32 + 27, false);
              A.store.Bool(ptr + 2132 + 1732 + 1480 + 32 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 1732 + 1480 + 61, true);

              if (typeof x["VPN"]["OpenVPN"]["VerifyX509"]["Name"] === "undefined") {
                A.store.Bool(ptr + 2132 + 1732 + 1480 + 0 + 28, false);
                A.store.Ref(ptr + 2132 + 1732 + 1480 + 0 + 0, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 1480 + 0 + 4, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 1480 + 0 + 8, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 1480 + 0 + 12, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 1480 + 0 + 16, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 1480 + 0 + 20, undefined);
                A.store.Bool(ptr + 2132 + 1732 + 1480 + 0 + 26, false);
                A.store.Bool(ptr + 2132 + 1732 + 1480 + 0 + 24, false);
                A.store.Bool(ptr + 2132 + 1732 + 1480 + 0 + 27, false);
                A.store.Bool(ptr + 2132 + 1732 + 1480 + 0 + 25, false);
              } else {
                A.store.Bool(ptr + 2132 + 1732 + 1480 + 0 + 28, true);
                A.store.Ref(ptr + 2132 + 1732 + 1480 + 0 + 0, x["VPN"]["OpenVPN"]["VerifyX509"]["Name"]["Active"]);
                A.store.Ref(ptr + 2132 + 1732 + 1480 + 0 + 4, x["VPN"]["OpenVPN"]["VerifyX509"]["Name"]["Effective"]);
                A.store.Ref(ptr + 2132 + 1732 + 1480 + 0 + 8, x["VPN"]["OpenVPN"]["VerifyX509"]["Name"]["UserPolicy"]);
                A.store.Ref(
                  ptr + 2132 + 1732 + 1480 + 0 + 12,
                  x["VPN"]["OpenVPN"]["VerifyX509"]["Name"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 2132 + 1732 + 1480 + 0 + 16,
                  x["VPN"]["OpenVPN"]["VerifyX509"]["Name"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 2132 + 1732 + 1480 + 0 + 20,
                  x["VPN"]["OpenVPN"]["VerifyX509"]["Name"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 2132 + 1732 + 1480 + 0 + 26,
                  "UserEditable" in x["VPN"]["OpenVPN"]["VerifyX509"]["Name"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 1732 + 1480 + 0 + 24,
                  x["VPN"]["OpenVPN"]["VerifyX509"]["Name"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 1732 + 1480 + 0 + 27,
                  "DeviceEditable" in x["VPN"]["OpenVPN"]["VerifyX509"]["Name"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 1732 + 1480 + 0 + 25,
                  x["VPN"]["OpenVPN"]["VerifyX509"]["Name"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["VPN"]["OpenVPN"]["VerifyX509"]["Type"] === "undefined") {
                A.store.Bool(ptr + 2132 + 1732 + 1480 + 32 + 28, false);
                A.store.Ref(ptr + 2132 + 1732 + 1480 + 32 + 0, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 1480 + 32 + 4, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 1480 + 32 + 8, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 1480 + 32 + 12, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 1480 + 32 + 16, undefined);
                A.store.Ref(ptr + 2132 + 1732 + 1480 + 32 + 20, undefined);
                A.store.Bool(ptr + 2132 + 1732 + 1480 + 32 + 26, false);
                A.store.Bool(ptr + 2132 + 1732 + 1480 + 32 + 24, false);
                A.store.Bool(ptr + 2132 + 1732 + 1480 + 32 + 27, false);
                A.store.Bool(ptr + 2132 + 1732 + 1480 + 32 + 25, false);
              } else {
                A.store.Bool(ptr + 2132 + 1732 + 1480 + 32 + 28, true);
                A.store.Ref(ptr + 2132 + 1732 + 1480 + 32 + 0, x["VPN"]["OpenVPN"]["VerifyX509"]["Type"]["Active"]);
                A.store.Ref(ptr + 2132 + 1732 + 1480 + 32 + 4, x["VPN"]["OpenVPN"]["VerifyX509"]["Type"]["Effective"]);
                A.store.Ref(ptr + 2132 + 1732 + 1480 + 32 + 8, x["VPN"]["OpenVPN"]["VerifyX509"]["Type"]["UserPolicy"]);
                A.store.Ref(
                  ptr + 2132 + 1732 + 1480 + 32 + 12,
                  x["VPN"]["OpenVPN"]["VerifyX509"]["Type"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 2132 + 1732 + 1480 + 32 + 16,
                  x["VPN"]["OpenVPN"]["VerifyX509"]["Type"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 2132 + 1732 + 1480 + 32 + 20,
                  x["VPN"]["OpenVPN"]["VerifyX509"]["Type"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 2132 + 1732 + 1480 + 32 + 26,
                  "UserEditable" in x["VPN"]["OpenVPN"]["VerifyX509"]["Type"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 1732 + 1480 + 32 + 24,
                  x["VPN"]["OpenVPN"]["VerifyX509"]["Type"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 1732 + 1480 + 32 + 27,
                  "DeviceEditable" in x["VPN"]["OpenVPN"]["VerifyX509"]["Type"] ? true : false
                );
                A.store.Bool(
                  ptr + 2132 + 1732 + 1480 + 32 + 25,
                  x["VPN"]["OpenVPN"]["VerifyX509"]["Type"]["DeviceEditable"] ? true : false
                );
              }
            }
          }

          if (typeof x["VPN"]["ThirdPartyVPN"] === "undefined") {
            A.store.Bool(ptr + 2132 + 3276 + 36, false);

            A.store.Bool(ptr + 2132 + 3276 + 0 + 28, false);
            A.store.Ref(ptr + 2132 + 3276 + 0 + 0, undefined);
            A.store.Ref(ptr + 2132 + 3276 + 0 + 4, undefined);
            A.store.Ref(ptr + 2132 + 3276 + 0 + 8, undefined);
            A.store.Ref(ptr + 2132 + 3276 + 0 + 12, undefined);
            A.store.Ref(ptr + 2132 + 3276 + 0 + 16, undefined);
            A.store.Ref(ptr + 2132 + 3276 + 0 + 20, undefined);
            A.store.Bool(ptr + 2132 + 3276 + 0 + 26, false);
            A.store.Bool(ptr + 2132 + 3276 + 0 + 24, false);
            A.store.Bool(ptr + 2132 + 3276 + 0 + 27, false);
            A.store.Bool(ptr + 2132 + 3276 + 0 + 25, false);
            A.store.Ref(ptr + 2132 + 3276 + 32, undefined);
          } else {
            A.store.Bool(ptr + 2132 + 3276 + 36, true);

            if (typeof x["VPN"]["ThirdPartyVPN"]["ExtensionID"] === "undefined") {
              A.store.Bool(ptr + 2132 + 3276 + 0 + 28, false);
              A.store.Ref(ptr + 2132 + 3276 + 0 + 0, undefined);
              A.store.Ref(ptr + 2132 + 3276 + 0 + 4, undefined);
              A.store.Ref(ptr + 2132 + 3276 + 0 + 8, undefined);
              A.store.Ref(ptr + 2132 + 3276 + 0 + 12, undefined);
              A.store.Ref(ptr + 2132 + 3276 + 0 + 16, undefined);
              A.store.Ref(ptr + 2132 + 3276 + 0 + 20, undefined);
              A.store.Bool(ptr + 2132 + 3276 + 0 + 26, false);
              A.store.Bool(ptr + 2132 + 3276 + 0 + 24, false);
              A.store.Bool(ptr + 2132 + 3276 + 0 + 27, false);
              A.store.Bool(ptr + 2132 + 3276 + 0 + 25, false);
            } else {
              A.store.Bool(ptr + 2132 + 3276 + 0 + 28, true);
              A.store.Ref(ptr + 2132 + 3276 + 0 + 0, x["VPN"]["ThirdPartyVPN"]["ExtensionID"]["Active"]);
              A.store.Ref(ptr + 2132 + 3276 + 0 + 4, x["VPN"]["ThirdPartyVPN"]["ExtensionID"]["Effective"]);
              A.store.Ref(ptr + 2132 + 3276 + 0 + 8, x["VPN"]["ThirdPartyVPN"]["ExtensionID"]["UserPolicy"]);
              A.store.Ref(ptr + 2132 + 3276 + 0 + 12, x["VPN"]["ThirdPartyVPN"]["ExtensionID"]["DevicePolicy"]);
              A.store.Ref(ptr + 2132 + 3276 + 0 + 16, x["VPN"]["ThirdPartyVPN"]["ExtensionID"]["UserSetting"]);
              A.store.Ref(ptr + 2132 + 3276 + 0 + 20, x["VPN"]["ThirdPartyVPN"]["ExtensionID"]["SharedSetting"]);
              A.store.Bool(
                ptr + 2132 + 3276 + 0 + 26,
                "UserEditable" in x["VPN"]["ThirdPartyVPN"]["ExtensionID"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 3276 + 0 + 24,
                x["VPN"]["ThirdPartyVPN"]["ExtensionID"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 3276 + 0 + 27,
                "DeviceEditable" in x["VPN"]["ThirdPartyVPN"]["ExtensionID"] ? true : false
              );
              A.store.Bool(
                ptr + 2132 + 3276 + 0 + 25,
                x["VPN"]["ThirdPartyVPN"]["ExtensionID"]["DeviceEditable"] ? true : false
              );
            }
            A.store.Ref(ptr + 2132 + 3276 + 32, x["VPN"]["ThirdPartyVPN"]["ProviderName"]);
          }

          if (typeof x["VPN"]["Type"] === "undefined") {
            A.store.Bool(ptr + 2132 + 3316 + 28, false);
            A.store.Ref(ptr + 2132 + 3316 + 0, undefined);
            A.store.Ref(ptr + 2132 + 3316 + 4, undefined);
            A.store.Ref(ptr + 2132 + 3316 + 8, undefined);
            A.store.Ref(ptr + 2132 + 3316 + 12, undefined);
            A.store.Ref(ptr + 2132 + 3316 + 16, undefined);
            A.store.Ref(ptr + 2132 + 3316 + 20, undefined);
            A.store.Bool(ptr + 2132 + 3316 + 26, false);
            A.store.Bool(ptr + 2132 + 3316 + 24, false);
            A.store.Bool(ptr + 2132 + 3316 + 27, false);
            A.store.Bool(ptr + 2132 + 3316 + 25, false);
          } else {
            A.store.Bool(ptr + 2132 + 3316 + 28, true);
            A.store.Ref(ptr + 2132 + 3316 + 0, x["VPN"]["Type"]["Active"]);
            A.store.Ref(ptr + 2132 + 3316 + 4, x["VPN"]["Type"]["Effective"]);
            A.store.Ref(ptr + 2132 + 3316 + 8, x["VPN"]["Type"]["UserPolicy"]);
            A.store.Ref(ptr + 2132 + 3316 + 12, x["VPN"]["Type"]["DevicePolicy"]);
            A.store.Ref(ptr + 2132 + 3316 + 16, x["VPN"]["Type"]["UserSetting"]);
            A.store.Ref(ptr + 2132 + 3316 + 20, x["VPN"]["Type"]["SharedSetting"]);
            A.store.Bool(ptr + 2132 + 3316 + 26, "UserEditable" in x["VPN"]["Type"] ? true : false);
            A.store.Bool(ptr + 2132 + 3316 + 24, x["VPN"]["Type"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 2132 + 3316 + 27, "DeviceEditable" in x["VPN"]["Type"] ? true : false);
            A.store.Bool(ptr + 2132 + 3316 + 25, x["VPN"]["Type"]["DeviceEditable"] ? true : false);
          }
        }

        if (typeof x["WiFi"] === "undefined") {
          A.store.Bool(ptr + 5480 + 1026, false);

          A.store.Bool(ptr + 5480 + 0 + 21, false);
          A.store.Bool(ptr + 5480 + 0 + 14, false);
          A.store.Bool(ptr + 5480 + 0 + 0, false);
          A.store.Ref(ptr + 5480 + 0 + 4, undefined);
          A.store.Bool(ptr + 5480 + 0 + 15, false);
          A.store.Bool(ptr + 5480 + 0 + 8, false);
          A.store.Bool(ptr + 5480 + 0 + 16, false);
          A.store.Bool(ptr + 5480 + 0 + 9, false);
          A.store.Bool(ptr + 5480 + 0 + 17, false);
          A.store.Bool(ptr + 5480 + 0 + 10, false);
          A.store.Bool(ptr + 5480 + 0 + 18, false);
          A.store.Bool(ptr + 5480 + 0 + 11, false);
          A.store.Bool(ptr + 5480 + 0 + 19, false);
          A.store.Bool(ptr + 5480 + 0 + 12, false);
          A.store.Bool(ptr + 5480 + 0 + 20, false);
          A.store.Bool(ptr + 5480 + 0 + 13, false);

          A.store.Bool(ptr + 5480 + 24 + 21, false);
          A.store.Bool(ptr + 5480 + 24 + 14, false);
          A.store.Bool(ptr + 5480 + 24 + 0, false);
          A.store.Ref(ptr + 5480 + 24 + 4, undefined);
          A.store.Bool(ptr + 5480 + 24 + 15, false);
          A.store.Bool(ptr + 5480 + 24 + 8, false);
          A.store.Bool(ptr + 5480 + 24 + 16, false);
          A.store.Bool(ptr + 5480 + 24 + 9, false);
          A.store.Bool(ptr + 5480 + 24 + 17, false);
          A.store.Bool(ptr + 5480 + 24 + 10, false);
          A.store.Bool(ptr + 5480 + 24 + 18, false);
          A.store.Bool(ptr + 5480 + 24 + 11, false);
          A.store.Bool(ptr + 5480 + 24 + 19, false);
          A.store.Bool(ptr + 5480 + 24 + 12, false);
          A.store.Bool(ptr + 5480 + 24 + 20, false);
          A.store.Bool(ptr + 5480 + 24 + 13, false);
          A.store.Ref(ptr + 5480 + 48, undefined);

          A.store.Bool(ptr + 5480 + 52 + 806, false);

          A.store.Bool(ptr + 5480 + 52 + 0 + 28, false);
          A.store.Ref(ptr + 5480 + 52 + 0 + 0, undefined);
          A.store.Ref(ptr + 5480 + 52 + 0 + 4, undefined);
          A.store.Ref(ptr + 5480 + 52 + 0 + 8, undefined);
          A.store.Ref(ptr + 5480 + 52 + 0 + 12, undefined);
          A.store.Ref(ptr + 5480 + 52 + 0 + 16, undefined);
          A.store.Ref(ptr + 5480 + 52 + 0 + 20, undefined);
          A.store.Bool(ptr + 5480 + 52 + 0 + 26, false);
          A.store.Bool(ptr + 5480 + 52 + 0 + 24, false);
          A.store.Bool(ptr + 5480 + 52 + 0 + 27, false);
          A.store.Bool(ptr + 5480 + 52 + 0 + 25, false);

          A.store.Bool(ptr + 5480 + 52 + 32 + 318, false);

          A.store.Bool(ptr + 5480 + 52 + 32 + 0 + 28, false);
          A.store.Ref(ptr + 5480 + 52 + 32 + 0 + 0, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 0 + 4, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 0 + 8, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 0 + 12, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 0 + 16, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 0 + 20, undefined);
          A.store.Bool(ptr + 5480 + 52 + 32 + 0 + 26, false);
          A.store.Bool(ptr + 5480 + 52 + 32 + 0 + 24, false);
          A.store.Bool(ptr + 5480 + 52 + 32 + 0 + 27, false);
          A.store.Bool(ptr + 5480 + 52 + 32 + 0 + 25, false);

          A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 125, false);

          A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 0 + 28, false);
          A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 0 + 0, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 0 + 4, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 0 + 8, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 0 + 12, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 0 + 16, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 0 + 20, undefined);
          A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 0 + 26, false);
          A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 0 + 24, false);
          A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 0 + 27, false);
          A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 0 + 25, false);

          A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 32 + 28, false);
          A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 32 + 0, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 32 + 4, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 32 + 8, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 32 + 12, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 32 + 16, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 32 + 20, undefined);
          A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 32 + 26, false);
          A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 32 + 24, false);
          A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 32 + 27, false);
          A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 32 + 25, false);

          A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 64 + 28, false);
          A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 64 + 0, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 64 + 4, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 64 + 8, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 64 + 12, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 64 + 16, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 64 + 20, undefined);
          A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 64 + 26, false);
          A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 64 + 24, false);
          A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 64 + 27, false);
          A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 64 + 25, false);

          A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 96 + 28, false);
          A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 96 + 0, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 96 + 4, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 96 + 8, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 96 + 12, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 96 + 16, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 96 + 20, undefined);
          A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 96 + 26, false);
          A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 96 + 24, false);
          A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 96 + 27, false);
          A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 96 + 25, false);

          A.store.Bool(ptr + 5480 + 52 + 32 + 160 + 28, false);
          A.store.Ref(ptr + 5480 + 52 + 32 + 160 + 0, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 160 + 4, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 160 + 8, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 160 + 12, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 160 + 16, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 160 + 20, undefined);
          A.store.Bool(ptr + 5480 + 52 + 32 + 160 + 26, false);
          A.store.Bool(ptr + 5480 + 52 + 32 + 160 + 24, false);
          A.store.Bool(ptr + 5480 + 52 + 32 + 160 + 27, false);
          A.store.Bool(ptr + 5480 + 52 + 32 + 160 + 25, false);

          A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 125, false);

          A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 0 + 28, false);
          A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 0 + 0, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 0 + 4, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 0 + 8, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 0 + 12, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 0 + 16, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 0 + 20, undefined);
          A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 0 + 26, false);
          A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 0 + 24, false);
          A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 0 + 27, false);
          A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 0 + 25, false);

          A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 32 + 28, false);
          A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 32 + 0, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 32 + 4, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 32 + 8, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 32 + 12, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 32 + 16, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 32 + 20, undefined);
          A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 32 + 26, false);
          A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 32 + 24, false);
          A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 32 + 27, false);
          A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 32 + 25, false);

          A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 64 + 28, false);
          A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 64 + 0, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 64 + 4, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 64 + 8, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 64 + 12, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 64 + 16, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 64 + 20, undefined);
          A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 64 + 26, false);
          A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 64 + 24, false);
          A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 64 + 27, false);
          A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 64 + 25, false);

          A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 96 + 28, false);
          A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 96 + 0, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 96 + 4, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 96 + 8, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 96 + 12, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 96 + 16, undefined);
          A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 96 + 20, undefined);
          A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 96 + 26, false);
          A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 96 + 24, false);
          A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 96 + 27, false);
          A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 96 + 25, false);

          A.store.Bool(ptr + 5480 + 52 + 352 + 28, false);
          A.store.Ref(ptr + 5480 + 52 + 352 + 0, undefined);
          A.store.Ref(ptr + 5480 + 52 + 352 + 4, undefined);
          A.store.Ref(ptr + 5480 + 52 + 352 + 8, undefined);
          A.store.Ref(ptr + 5480 + 52 + 352 + 12, undefined);
          A.store.Ref(ptr + 5480 + 52 + 352 + 16, undefined);
          A.store.Ref(ptr + 5480 + 52 + 352 + 20, undefined);
          A.store.Bool(ptr + 5480 + 52 + 352 + 26, false);
          A.store.Bool(ptr + 5480 + 52 + 352 + 24, false);
          A.store.Bool(ptr + 5480 + 52 + 352 + 27, false);
          A.store.Bool(ptr + 5480 + 52 + 352 + 25, false);

          A.store.Bool(ptr + 5480 + 52 + 384 + 28, false);
          A.store.Ref(ptr + 5480 + 52 + 384 + 0, undefined);
          A.store.Ref(ptr + 5480 + 52 + 384 + 4, undefined);
          A.store.Ref(ptr + 5480 + 52 + 384 + 8, undefined);
          A.store.Ref(ptr + 5480 + 52 + 384 + 12, undefined);
          A.store.Ref(ptr + 5480 + 52 + 384 + 16, undefined);
          A.store.Ref(ptr + 5480 + 52 + 384 + 20, undefined);
          A.store.Bool(ptr + 5480 + 52 + 384 + 26, false);
          A.store.Bool(ptr + 5480 + 52 + 384 + 24, false);
          A.store.Bool(ptr + 5480 + 52 + 384 + 27, false);
          A.store.Bool(ptr + 5480 + 52 + 384 + 25, false);

          A.store.Bool(ptr + 5480 + 52 + 416 + 28, false);
          A.store.Ref(ptr + 5480 + 52 + 416 + 0, undefined);
          A.store.Ref(ptr + 5480 + 52 + 416 + 4, undefined);
          A.store.Ref(ptr + 5480 + 52 + 416 + 8, undefined);
          A.store.Ref(ptr + 5480 + 52 + 416 + 12, undefined);
          A.store.Ref(ptr + 5480 + 52 + 416 + 16, undefined);
          A.store.Ref(ptr + 5480 + 52 + 416 + 20, undefined);
          A.store.Bool(ptr + 5480 + 52 + 416 + 26, false);
          A.store.Bool(ptr + 5480 + 52 + 416 + 24, false);
          A.store.Bool(ptr + 5480 + 52 + 416 + 27, false);
          A.store.Bool(ptr + 5480 + 52 + 416 + 25, false);

          A.store.Bool(ptr + 5480 + 52 + 448 + 28, false);
          A.store.Ref(ptr + 5480 + 52 + 448 + 0, undefined);
          A.store.Ref(ptr + 5480 + 52 + 448 + 4, undefined);
          A.store.Ref(ptr + 5480 + 52 + 448 + 8, undefined);
          A.store.Ref(ptr + 5480 + 52 + 448 + 12, undefined);
          A.store.Ref(ptr + 5480 + 52 + 448 + 16, undefined);
          A.store.Ref(ptr + 5480 + 52 + 448 + 20, undefined);
          A.store.Bool(ptr + 5480 + 52 + 448 + 26, false);
          A.store.Bool(ptr + 5480 + 52 + 448 + 24, false);
          A.store.Bool(ptr + 5480 + 52 + 448 + 27, false);
          A.store.Bool(ptr + 5480 + 52 + 448 + 25, false);

          A.store.Bool(ptr + 5480 + 52 + 480 + 28, false);
          A.store.Ref(ptr + 5480 + 52 + 480 + 0, undefined);
          A.store.Ref(ptr + 5480 + 52 + 480 + 4, undefined);
          A.store.Ref(ptr + 5480 + 52 + 480 + 8, undefined);
          A.store.Ref(ptr + 5480 + 52 + 480 + 12, undefined);
          A.store.Ref(ptr + 5480 + 52 + 480 + 16, undefined);
          A.store.Ref(ptr + 5480 + 52 + 480 + 20, undefined);
          A.store.Bool(ptr + 5480 + 52 + 480 + 26, false);
          A.store.Bool(ptr + 5480 + 52 + 480 + 24, false);
          A.store.Bool(ptr + 5480 + 52 + 480 + 27, false);
          A.store.Bool(ptr + 5480 + 52 + 480 + 25, false);

          A.store.Bool(ptr + 5480 + 52 + 512 + 28, false);
          A.store.Ref(ptr + 5480 + 52 + 512 + 0, undefined);
          A.store.Ref(ptr + 5480 + 52 + 512 + 4, undefined);
          A.store.Ref(ptr + 5480 + 52 + 512 + 8, undefined);
          A.store.Ref(ptr + 5480 + 52 + 512 + 12, undefined);
          A.store.Ref(ptr + 5480 + 52 + 512 + 16, undefined);
          A.store.Ref(ptr + 5480 + 52 + 512 + 20, undefined);
          A.store.Bool(ptr + 5480 + 52 + 512 + 26, false);
          A.store.Bool(ptr + 5480 + 52 + 512 + 24, false);
          A.store.Bool(ptr + 5480 + 52 + 512 + 27, false);
          A.store.Bool(ptr + 5480 + 52 + 512 + 25, false);

          A.store.Bool(ptr + 5480 + 52 + 544 + 28, false);
          A.store.Ref(ptr + 5480 + 52 + 544 + 0, undefined);
          A.store.Ref(ptr + 5480 + 52 + 544 + 4, undefined);
          A.store.Ref(ptr + 5480 + 52 + 544 + 8, undefined);
          A.store.Ref(ptr + 5480 + 52 + 544 + 12, undefined);
          A.store.Ref(ptr + 5480 + 52 + 544 + 16, undefined);
          A.store.Ref(ptr + 5480 + 52 + 544 + 20, undefined);
          A.store.Bool(ptr + 5480 + 52 + 544 + 26, false);
          A.store.Bool(ptr + 5480 + 52 + 544 + 24, false);
          A.store.Bool(ptr + 5480 + 52 + 544 + 27, false);
          A.store.Bool(ptr + 5480 + 52 + 544 + 25, false);

          A.store.Bool(ptr + 5480 + 52 + 576 + 28, false);
          A.store.Ref(ptr + 5480 + 52 + 576 + 0, undefined);
          A.store.Ref(ptr + 5480 + 52 + 576 + 4, undefined);
          A.store.Ref(ptr + 5480 + 52 + 576 + 8, undefined);
          A.store.Ref(ptr + 5480 + 52 + 576 + 12, undefined);
          A.store.Ref(ptr + 5480 + 52 + 576 + 16, undefined);
          A.store.Ref(ptr + 5480 + 52 + 576 + 20, undefined);
          A.store.Bool(ptr + 5480 + 52 + 576 + 26, false);
          A.store.Bool(ptr + 5480 + 52 + 576 + 24, false);
          A.store.Bool(ptr + 5480 + 52 + 576 + 27, false);
          A.store.Bool(ptr + 5480 + 52 + 576 + 25, false);

          A.store.Bool(ptr + 5480 + 52 + 608 + 21, false);
          A.store.Bool(ptr + 5480 + 52 + 608 + 14, false);
          A.store.Bool(ptr + 5480 + 52 + 608 + 0, false);
          A.store.Ref(ptr + 5480 + 52 + 608 + 4, undefined);
          A.store.Bool(ptr + 5480 + 52 + 608 + 15, false);
          A.store.Bool(ptr + 5480 + 52 + 608 + 8, false);
          A.store.Bool(ptr + 5480 + 52 + 608 + 16, false);
          A.store.Bool(ptr + 5480 + 52 + 608 + 9, false);
          A.store.Bool(ptr + 5480 + 52 + 608 + 17, false);
          A.store.Bool(ptr + 5480 + 52 + 608 + 10, false);
          A.store.Bool(ptr + 5480 + 52 + 608 + 18, false);
          A.store.Bool(ptr + 5480 + 52 + 608 + 11, false);
          A.store.Bool(ptr + 5480 + 52 + 608 + 19, false);
          A.store.Bool(ptr + 5480 + 52 + 608 + 12, false);
          A.store.Bool(ptr + 5480 + 52 + 608 + 20, false);
          A.store.Bool(ptr + 5480 + 52 + 608 + 13, false);

          A.store.Bool(ptr + 5480 + 52 + 632 + 28, false);
          A.store.Ref(ptr + 5480 + 52 + 632 + 0, undefined);
          A.store.Ref(ptr + 5480 + 52 + 632 + 4, undefined);
          A.store.Ref(ptr + 5480 + 52 + 632 + 8, undefined);
          A.store.Ref(ptr + 5480 + 52 + 632 + 12, undefined);
          A.store.Ref(ptr + 5480 + 52 + 632 + 16, undefined);
          A.store.Ref(ptr + 5480 + 52 + 632 + 20, undefined);
          A.store.Bool(ptr + 5480 + 52 + 632 + 26, false);
          A.store.Bool(ptr + 5480 + 52 + 632 + 24, false);
          A.store.Bool(ptr + 5480 + 52 + 632 + 27, false);
          A.store.Bool(ptr + 5480 + 52 + 632 + 25, false);

          A.store.Bool(ptr + 5480 + 52 + 664 + 28, false);
          A.store.Ref(ptr + 5480 + 52 + 664 + 0, undefined);
          A.store.Ref(ptr + 5480 + 52 + 664 + 4, undefined);
          A.store.Ref(ptr + 5480 + 52 + 664 + 8, undefined);
          A.store.Ref(ptr + 5480 + 52 + 664 + 12, undefined);
          A.store.Ref(ptr + 5480 + 52 + 664 + 16, undefined);
          A.store.Ref(ptr + 5480 + 52 + 664 + 20, undefined);
          A.store.Bool(ptr + 5480 + 52 + 664 + 26, false);
          A.store.Bool(ptr + 5480 + 52 + 664 + 24, false);
          A.store.Bool(ptr + 5480 + 52 + 664 + 27, false);
          A.store.Bool(ptr + 5480 + 52 + 664 + 25, false);

          A.store.Bool(ptr + 5480 + 52 + 696 + 28, false);
          A.store.Ref(ptr + 5480 + 52 + 696 + 0, undefined);
          A.store.Ref(ptr + 5480 + 52 + 696 + 4, undefined);
          A.store.Ref(ptr + 5480 + 52 + 696 + 8, undefined);
          A.store.Ref(ptr + 5480 + 52 + 696 + 12, undefined);
          A.store.Ref(ptr + 5480 + 52 + 696 + 16, undefined);
          A.store.Ref(ptr + 5480 + 52 + 696 + 20, undefined);
          A.store.Bool(ptr + 5480 + 52 + 696 + 26, false);
          A.store.Bool(ptr + 5480 + 52 + 696 + 24, false);
          A.store.Bool(ptr + 5480 + 52 + 696 + 27, false);
          A.store.Bool(ptr + 5480 + 52 + 696 + 25, false);

          A.store.Bool(ptr + 5480 + 52 + 728 + 28, false);
          A.store.Ref(ptr + 5480 + 52 + 728 + 0, undefined);
          A.store.Ref(ptr + 5480 + 52 + 728 + 4, undefined);
          A.store.Ref(ptr + 5480 + 52 + 728 + 8, undefined);
          A.store.Ref(ptr + 5480 + 52 + 728 + 12, undefined);
          A.store.Ref(ptr + 5480 + 52 + 728 + 16, undefined);
          A.store.Ref(ptr + 5480 + 52 + 728 + 20, undefined);
          A.store.Bool(ptr + 5480 + 52 + 728 + 26, false);
          A.store.Bool(ptr + 5480 + 52 + 728 + 24, false);
          A.store.Bool(ptr + 5480 + 52 + 728 + 27, false);
          A.store.Bool(ptr + 5480 + 52 + 728 + 25, false);

          A.store.Bool(ptr + 5480 + 52 + 760 + 21, false);
          A.store.Bool(ptr + 5480 + 52 + 760 + 14, false);
          A.store.Bool(ptr + 5480 + 52 + 760 + 0, false);
          A.store.Ref(ptr + 5480 + 52 + 760 + 4, undefined);
          A.store.Bool(ptr + 5480 + 52 + 760 + 15, false);
          A.store.Bool(ptr + 5480 + 52 + 760 + 8, false);
          A.store.Bool(ptr + 5480 + 52 + 760 + 16, false);
          A.store.Bool(ptr + 5480 + 52 + 760 + 9, false);
          A.store.Bool(ptr + 5480 + 52 + 760 + 17, false);
          A.store.Bool(ptr + 5480 + 52 + 760 + 10, false);
          A.store.Bool(ptr + 5480 + 52 + 760 + 18, false);
          A.store.Bool(ptr + 5480 + 52 + 760 + 11, false);
          A.store.Bool(ptr + 5480 + 52 + 760 + 19, false);
          A.store.Bool(ptr + 5480 + 52 + 760 + 12, false);
          A.store.Bool(ptr + 5480 + 52 + 760 + 20, false);
          A.store.Bool(ptr + 5480 + 52 + 760 + 13, false);

          A.store.Bool(ptr + 5480 + 52 + 784 + 21, false);
          A.store.Bool(ptr + 5480 + 52 + 784 + 14, false);
          A.store.Bool(ptr + 5480 + 52 + 784 + 0, false);
          A.store.Ref(ptr + 5480 + 52 + 784 + 4, undefined);
          A.store.Bool(ptr + 5480 + 52 + 784 + 15, false);
          A.store.Bool(ptr + 5480 + 52 + 784 + 8, false);
          A.store.Bool(ptr + 5480 + 52 + 784 + 16, false);
          A.store.Bool(ptr + 5480 + 52 + 784 + 9, false);
          A.store.Bool(ptr + 5480 + 52 + 784 + 17, false);
          A.store.Bool(ptr + 5480 + 52 + 784 + 10, false);
          A.store.Bool(ptr + 5480 + 52 + 784 + 18, false);
          A.store.Bool(ptr + 5480 + 52 + 784 + 11, false);
          A.store.Bool(ptr + 5480 + 52 + 784 + 19, false);
          A.store.Bool(ptr + 5480 + 52 + 784 + 12, false);
          A.store.Bool(ptr + 5480 + 52 + 784 + 20, false);
          A.store.Bool(ptr + 5480 + 52 + 784 + 13, false);
          A.store.Bool(ptr + 5480 + 1024, false);
          A.store.Int32(ptr + 5480 + 860, 0);
          A.store.Ref(ptr + 5480 + 864, undefined);

          A.store.Bool(ptr + 5480 + 868 + 28, false);
          A.store.Ref(ptr + 5480 + 868 + 0, undefined);
          A.store.Ref(ptr + 5480 + 868 + 4, undefined);
          A.store.Ref(ptr + 5480 + 868 + 8, undefined);
          A.store.Ref(ptr + 5480 + 868 + 12, undefined);
          A.store.Ref(ptr + 5480 + 868 + 16, undefined);
          A.store.Ref(ptr + 5480 + 868 + 20, undefined);
          A.store.Bool(ptr + 5480 + 868 + 26, false);
          A.store.Bool(ptr + 5480 + 868 + 24, false);
          A.store.Bool(ptr + 5480 + 868 + 27, false);
          A.store.Bool(ptr + 5480 + 868 + 25, false);

          A.store.Bool(ptr + 5480 + 900 + 21, false);
          A.store.Bool(ptr + 5480 + 900 + 14, false);
          A.store.Bool(ptr + 5480 + 900 + 0, false);
          A.store.Ref(ptr + 5480 + 900 + 4, undefined);
          A.store.Bool(ptr + 5480 + 900 + 15, false);
          A.store.Bool(ptr + 5480 + 900 + 8, false);
          A.store.Bool(ptr + 5480 + 900 + 16, false);
          A.store.Bool(ptr + 5480 + 900 + 9, false);
          A.store.Bool(ptr + 5480 + 900 + 17, false);
          A.store.Bool(ptr + 5480 + 900 + 10, false);
          A.store.Bool(ptr + 5480 + 900 + 18, false);
          A.store.Bool(ptr + 5480 + 900 + 11, false);
          A.store.Bool(ptr + 5480 + 900 + 19, false);
          A.store.Bool(ptr + 5480 + 900 + 12, false);
          A.store.Bool(ptr + 5480 + 900 + 20, false);
          A.store.Bool(ptr + 5480 + 900 + 13, false);

          A.store.Bool(ptr + 5480 + 924 + 28, false);
          A.store.Ref(ptr + 5480 + 924 + 0, undefined);
          A.store.Ref(ptr + 5480 + 924 + 4, undefined);
          A.store.Ref(ptr + 5480 + 924 + 8, undefined);
          A.store.Ref(ptr + 5480 + 924 + 12, undefined);
          A.store.Ref(ptr + 5480 + 924 + 16, undefined);
          A.store.Ref(ptr + 5480 + 924 + 20, undefined);
          A.store.Bool(ptr + 5480 + 924 + 26, false);
          A.store.Bool(ptr + 5480 + 924 + 24, false);
          A.store.Bool(ptr + 5480 + 924 + 27, false);
          A.store.Bool(ptr + 5480 + 924 + 25, false);

          A.store.Bool(ptr + 5480 + 956 + 28, false);
          A.store.Ref(ptr + 5480 + 956 + 0, undefined);
          A.store.Ref(ptr + 5480 + 956 + 4, undefined);
          A.store.Ref(ptr + 5480 + 956 + 8, undefined);
          A.store.Ref(ptr + 5480 + 956 + 12, undefined);
          A.store.Ref(ptr + 5480 + 956 + 16, undefined);
          A.store.Ref(ptr + 5480 + 956 + 20, undefined);
          A.store.Bool(ptr + 5480 + 956 + 26, false);
          A.store.Bool(ptr + 5480 + 956 + 24, false);
          A.store.Bool(ptr + 5480 + 956 + 27, false);
          A.store.Bool(ptr + 5480 + 956 + 25, false);

          A.store.Bool(ptr + 5480 + 988 + 28, false);
          A.store.Ref(ptr + 5480 + 988 + 0, undefined);
          A.store.Ref(ptr + 5480 + 988 + 4, undefined);
          A.store.Ref(ptr + 5480 + 988 + 8, undefined);
          A.store.Ref(ptr + 5480 + 988 + 12, undefined);
          A.store.Ref(ptr + 5480 + 988 + 16, undefined);
          A.store.Ref(ptr + 5480 + 988 + 20, undefined);
          A.store.Bool(ptr + 5480 + 988 + 26, false);
          A.store.Bool(ptr + 5480 + 988 + 24, false);
          A.store.Bool(ptr + 5480 + 988 + 27, false);
          A.store.Bool(ptr + 5480 + 988 + 25, false);
          A.store.Bool(ptr + 5480 + 1025, false);
          A.store.Int32(ptr + 5480 + 1020, 0);
        } else {
          A.store.Bool(ptr + 5480 + 1026, true);

          if (typeof x["WiFi"]["AllowGatewayARPPolling"] === "undefined") {
            A.store.Bool(ptr + 5480 + 0 + 21, false);
            A.store.Bool(ptr + 5480 + 0 + 14, false);
            A.store.Bool(ptr + 5480 + 0 + 0, false);
            A.store.Ref(ptr + 5480 + 0 + 4, undefined);
            A.store.Bool(ptr + 5480 + 0 + 15, false);
            A.store.Bool(ptr + 5480 + 0 + 8, false);
            A.store.Bool(ptr + 5480 + 0 + 16, false);
            A.store.Bool(ptr + 5480 + 0 + 9, false);
            A.store.Bool(ptr + 5480 + 0 + 17, false);
            A.store.Bool(ptr + 5480 + 0 + 10, false);
            A.store.Bool(ptr + 5480 + 0 + 18, false);
            A.store.Bool(ptr + 5480 + 0 + 11, false);
            A.store.Bool(ptr + 5480 + 0 + 19, false);
            A.store.Bool(ptr + 5480 + 0 + 12, false);
            A.store.Bool(ptr + 5480 + 0 + 20, false);
            A.store.Bool(ptr + 5480 + 0 + 13, false);
          } else {
            A.store.Bool(ptr + 5480 + 0 + 21, true);
            A.store.Bool(ptr + 5480 + 0 + 14, "Active" in x["WiFi"]["AllowGatewayARPPolling"] ? true : false);
            A.store.Bool(ptr + 5480 + 0 + 0, x["WiFi"]["AllowGatewayARPPolling"]["Active"] ? true : false);
            A.store.Ref(ptr + 5480 + 0 + 4, x["WiFi"]["AllowGatewayARPPolling"]["Effective"]);
            A.store.Bool(ptr + 5480 + 0 + 15, "UserPolicy" in x["WiFi"]["AllowGatewayARPPolling"] ? true : false);
            A.store.Bool(ptr + 5480 + 0 + 8, x["WiFi"]["AllowGatewayARPPolling"]["UserPolicy"] ? true : false);
            A.store.Bool(ptr + 5480 + 0 + 16, "DevicePolicy" in x["WiFi"]["AllowGatewayARPPolling"] ? true : false);
            A.store.Bool(ptr + 5480 + 0 + 9, x["WiFi"]["AllowGatewayARPPolling"]["DevicePolicy"] ? true : false);
            A.store.Bool(ptr + 5480 + 0 + 17, "UserSetting" in x["WiFi"]["AllowGatewayARPPolling"] ? true : false);
            A.store.Bool(ptr + 5480 + 0 + 10, x["WiFi"]["AllowGatewayARPPolling"]["UserSetting"] ? true : false);
            A.store.Bool(ptr + 5480 + 0 + 18, "SharedSetting" in x["WiFi"]["AllowGatewayARPPolling"] ? true : false);
            A.store.Bool(ptr + 5480 + 0 + 11, x["WiFi"]["AllowGatewayARPPolling"]["SharedSetting"] ? true : false);
            A.store.Bool(ptr + 5480 + 0 + 19, "UserEditable" in x["WiFi"]["AllowGatewayARPPolling"] ? true : false);
            A.store.Bool(ptr + 5480 + 0 + 12, x["WiFi"]["AllowGatewayARPPolling"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 5480 + 0 + 20, "DeviceEditable" in x["WiFi"]["AllowGatewayARPPolling"] ? true : false);
            A.store.Bool(ptr + 5480 + 0 + 13, x["WiFi"]["AllowGatewayARPPolling"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["WiFi"]["AutoConnect"] === "undefined") {
            A.store.Bool(ptr + 5480 + 24 + 21, false);
            A.store.Bool(ptr + 5480 + 24 + 14, false);
            A.store.Bool(ptr + 5480 + 24 + 0, false);
            A.store.Ref(ptr + 5480 + 24 + 4, undefined);
            A.store.Bool(ptr + 5480 + 24 + 15, false);
            A.store.Bool(ptr + 5480 + 24 + 8, false);
            A.store.Bool(ptr + 5480 + 24 + 16, false);
            A.store.Bool(ptr + 5480 + 24 + 9, false);
            A.store.Bool(ptr + 5480 + 24 + 17, false);
            A.store.Bool(ptr + 5480 + 24 + 10, false);
            A.store.Bool(ptr + 5480 + 24 + 18, false);
            A.store.Bool(ptr + 5480 + 24 + 11, false);
            A.store.Bool(ptr + 5480 + 24 + 19, false);
            A.store.Bool(ptr + 5480 + 24 + 12, false);
            A.store.Bool(ptr + 5480 + 24 + 20, false);
            A.store.Bool(ptr + 5480 + 24 + 13, false);
          } else {
            A.store.Bool(ptr + 5480 + 24 + 21, true);
            A.store.Bool(ptr + 5480 + 24 + 14, "Active" in x["WiFi"]["AutoConnect"] ? true : false);
            A.store.Bool(ptr + 5480 + 24 + 0, x["WiFi"]["AutoConnect"]["Active"] ? true : false);
            A.store.Ref(ptr + 5480 + 24 + 4, x["WiFi"]["AutoConnect"]["Effective"]);
            A.store.Bool(ptr + 5480 + 24 + 15, "UserPolicy" in x["WiFi"]["AutoConnect"] ? true : false);
            A.store.Bool(ptr + 5480 + 24 + 8, x["WiFi"]["AutoConnect"]["UserPolicy"] ? true : false);
            A.store.Bool(ptr + 5480 + 24 + 16, "DevicePolicy" in x["WiFi"]["AutoConnect"] ? true : false);
            A.store.Bool(ptr + 5480 + 24 + 9, x["WiFi"]["AutoConnect"]["DevicePolicy"] ? true : false);
            A.store.Bool(ptr + 5480 + 24 + 17, "UserSetting" in x["WiFi"]["AutoConnect"] ? true : false);
            A.store.Bool(ptr + 5480 + 24 + 10, x["WiFi"]["AutoConnect"]["UserSetting"] ? true : false);
            A.store.Bool(ptr + 5480 + 24 + 18, "SharedSetting" in x["WiFi"]["AutoConnect"] ? true : false);
            A.store.Bool(ptr + 5480 + 24 + 11, x["WiFi"]["AutoConnect"]["SharedSetting"] ? true : false);
            A.store.Bool(ptr + 5480 + 24 + 19, "UserEditable" in x["WiFi"]["AutoConnect"] ? true : false);
            A.store.Bool(ptr + 5480 + 24 + 12, x["WiFi"]["AutoConnect"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 5480 + 24 + 20, "DeviceEditable" in x["WiFi"]["AutoConnect"] ? true : false);
            A.store.Bool(ptr + 5480 + 24 + 13, x["WiFi"]["AutoConnect"]["DeviceEditable"] ? true : false);
          }
          A.store.Ref(ptr + 5480 + 48, x["WiFi"]["BSSID"]);

          if (typeof x["WiFi"]["EAP"] === "undefined") {
            A.store.Bool(ptr + 5480 + 52 + 806, false);

            A.store.Bool(ptr + 5480 + 52 + 0 + 28, false);
            A.store.Ref(ptr + 5480 + 52 + 0 + 0, undefined);
            A.store.Ref(ptr + 5480 + 52 + 0 + 4, undefined);
            A.store.Ref(ptr + 5480 + 52 + 0 + 8, undefined);
            A.store.Ref(ptr + 5480 + 52 + 0 + 12, undefined);
            A.store.Ref(ptr + 5480 + 52 + 0 + 16, undefined);
            A.store.Ref(ptr + 5480 + 52 + 0 + 20, undefined);
            A.store.Bool(ptr + 5480 + 52 + 0 + 26, false);
            A.store.Bool(ptr + 5480 + 52 + 0 + 24, false);
            A.store.Bool(ptr + 5480 + 52 + 0 + 27, false);
            A.store.Bool(ptr + 5480 + 52 + 0 + 25, false);

            A.store.Bool(ptr + 5480 + 52 + 32 + 318, false);

            A.store.Bool(ptr + 5480 + 52 + 32 + 0 + 28, false);
            A.store.Ref(ptr + 5480 + 52 + 32 + 0 + 0, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 0 + 4, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 0 + 8, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 0 + 12, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 0 + 16, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 0 + 20, undefined);
            A.store.Bool(ptr + 5480 + 52 + 32 + 0 + 26, false);
            A.store.Bool(ptr + 5480 + 52 + 32 + 0 + 24, false);
            A.store.Bool(ptr + 5480 + 52 + 32 + 0 + 27, false);
            A.store.Bool(ptr + 5480 + 52 + 32 + 0 + 25, false);

            A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 125, false);

            A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 0 + 28, false);
            A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 0 + 0, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 0 + 4, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 0 + 8, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 0 + 12, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 0 + 16, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 0 + 20, undefined);
            A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 0 + 26, false);
            A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 0 + 24, false);
            A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 0 + 27, false);
            A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 0 + 25, false);

            A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 32 + 28, false);
            A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 32 + 0, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 32 + 4, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 32 + 8, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 32 + 12, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 32 + 16, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 32 + 20, undefined);
            A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 32 + 26, false);
            A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 32 + 24, false);
            A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 32 + 27, false);
            A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 32 + 25, false);

            A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 64 + 28, false);
            A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 64 + 0, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 64 + 4, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 64 + 8, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 64 + 12, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 64 + 16, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 64 + 20, undefined);
            A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 64 + 26, false);
            A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 64 + 24, false);
            A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 64 + 27, false);
            A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 64 + 25, false);

            A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 96 + 28, false);
            A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 96 + 0, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 96 + 4, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 96 + 8, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 96 + 12, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 96 + 16, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 96 + 20, undefined);
            A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 96 + 26, false);
            A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 96 + 24, false);
            A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 96 + 27, false);
            A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 96 + 25, false);

            A.store.Bool(ptr + 5480 + 52 + 32 + 160 + 28, false);
            A.store.Ref(ptr + 5480 + 52 + 32 + 160 + 0, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 160 + 4, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 160 + 8, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 160 + 12, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 160 + 16, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 160 + 20, undefined);
            A.store.Bool(ptr + 5480 + 52 + 32 + 160 + 26, false);
            A.store.Bool(ptr + 5480 + 52 + 32 + 160 + 24, false);
            A.store.Bool(ptr + 5480 + 52 + 32 + 160 + 27, false);
            A.store.Bool(ptr + 5480 + 52 + 32 + 160 + 25, false);

            A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 125, false);

            A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 0 + 28, false);
            A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 0 + 0, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 0 + 4, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 0 + 8, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 0 + 12, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 0 + 16, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 0 + 20, undefined);
            A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 0 + 26, false);
            A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 0 + 24, false);
            A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 0 + 27, false);
            A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 0 + 25, false);

            A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 32 + 28, false);
            A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 32 + 0, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 32 + 4, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 32 + 8, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 32 + 12, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 32 + 16, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 32 + 20, undefined);
            A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 32 + 26, false);
            A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 32 + 24, false);
            A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 32 + 27, false);
            A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 32 + 25, false);

            A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 64 + 28, false);
            A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 64 + 0, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 64 + 4, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 64 + 8, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 64 + 12, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 64 + 16, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 64 + 20, undefined);
            A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 64 + 26, false);
            A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 64 + 24, false);
            A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 64 + 27, false);
            A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 64 + 25, false);

            A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 96 + 28, false);
            A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 96 + 0, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 96 + 4, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 96 + 8, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 96 + 12, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 96 + 16, undefined);
            A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 96 + 20, undefined);
            A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 96 + 26, false);
            A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 96 + 24, false);
            A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 96 + 27, false);
            A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 96 + 25, false);

            A.store.Bool(ptr + 5480 + 52 + 352 + 28, false);
            A.store.Ref(ptr + 5480 + 52 + 352 + 0, undefined);
            A.store.Ref(ptr + 5480 + 52 + 352 + 4, undefined);
            A.store.Ref(ptr + 5480 + 52 + 352 + 8, undefined);
            A.store.Ref(ptr + 5480 + 52 + 352 + 12, undefined);
            A.store.Ref(ptr + 5480 + 52 + 352 + 16, undefined);
            A.store.Ref(ptr + 5480 + 52 + 352 + 20, undefined);
            A.store.Bool(ptr + 5480 + 52 + 352 + 26, false);
            A.store.Bool(ptr + 5480 + 52 + 352 + 24, false);
            A.store.Bool(ptr + 5480 + 52 + 352 + 27, false);
            A.store.Bool(ptr + 5480 + 52 + 352 + 25, false);

            A.store.Bool(ptr + 5480 + 52 + 384 + 28, false);
            A.store.Ref(ptr + 5480 + 52 + 384 + 0, undefined);
            A.store.Ref(ptr + 5480 + 52 + 384 + 4, undefined);
            A.store.Ref(ptr + 5480 + 52 + 384 + 8, undefined);
            A.store.Ref(ptr + 5480 + 52 + 384 + 12, undefined);
            A.store.Ref(ptr + 5480 + 52 + 384 + 16, undefined);
            A.store.Ref(ptr + 5480 + 52 + 384 + 20, undefined);
            A.store.Bool(ptr + 5480 + 52 + 384 + 26, false);
            A.store.Bool(ptr + 5480 + 52 + 384 + 24, false);
            A.store.Bool(ptr + 5480 + 52 + 384 + 27, false);
            A.store.Bool(ptr + 5480 + 52 + 384 + 25, false);

            A.store.Bool(ptr + 5480 + 52 + 416 + 28, false);
            A.store.Ref(ptr + 5480 + 52 + 416 + 0, undefined);
            A.store.Ref(ptr + 5480 + 52 + 416 + 4, undefined);
            A.store.Ref(ptr + 5480 + 52 + 416 + 8, undefined);
            A.store.Ref(ptr + 5480 + 52 + 416 + 12, undefined);
            A.store.Ref(ptr + 5480 + 52 + 416 + 16, undefined);
            A.store.Ref(ptr + 5480 + 52 + 416 + 20, undefined);
            A.store.Bool(ptr + 5480 + 52 + 416 + 26, false);
            A.store.Bool(ptr + 5480 + 52 + 416 + 24, false);
            A.store.Bool(ptr + 5480 + 52 + 416 + 27, false);
            A.store.Bool(ptr + 5480 + 52 + 416 + 25, false);

            A.store.Bool(ptr + 5480 + 52 + 448 + 28, false);
            A.store.Ref(ptr + 5480 + 52 + 448 + 0, undefined);
            A.store.Ref(ptr + 5480 + 52 + 448 + 4, undefined);
            A.store.Ref(ptr + 5480 + 52 + 448 + 8, undefined);
            A.store.Ref(ptr + 5480 + 52 + 448 + 12, undefined);
            A.store.Ref(ptr + 5480 + 52 + 448 + 16, undefined);
            A.store.Ref(ptr + 5480 + 52 + 448 + 20, undefined);
            A.store.Bool(ptr + 5480 + 52 + 448 + 26, false);
            A.store.Bool(ptr + 5480 + 52 + 448 + 24, false);
            A.store.Bool(ptr + 5480 + 52 + 448 + 27, false);
            A.store.Bool(ptr + 5480 + 52 + 448 + 25, false);

            A.store.Bool(ptr + 5480 + 52 + 480 + 28, false);
            A.store.Ref(ptr + 5480 + 52 + 480 + 0, undefined);
            A.store.Ref(ptr + 5480 + 52 + 480 + 4, undefined);
            A.store.Ref(ptr + 5480 + 52 + 480 + 8, undefined);
            A.store.Ref(ptr + 5480 + 52 + 480 + 12, undefined);
            A.store.Ref(ptr + 5480 + 52 + 480 + 16, undefined);
            A.store.Ref(ptr + 5480 + 52 + 480 + 20, undefined);
            A.store.Bool(ptr + 5480 + 52 + 480 + 26, false);
            A.store.Bool(ptr + 5480 + 52 + 480 + 24, false);
            A.store.Bool(ptr + 5480 + 52 + 480 + 27, false);
            A.store.Bool(ptr + 5480 + 52 + 480 + 25, false);

            A.store.Bool(ptr + 5480 + 52 + 512 + 28, false);
            A.store.Ref(ptr + 5480 + 52 + 512 + 0, undefined);
            A.store.Ref(ptr + 5480 + 52 + 512 + 4, undefined);
            A.store.Ref(ptr + 5480 + 52 + 512 + 8, undefined);
            A.store.Ref(ptr + 5480 + 52 + 512 + 12, undefined);
            A.store.Ref(ptr + 5480 + 52 + 512 + 16, undefined);
            A.store.Ref(ptr + 5480 + 52 + 512 + 20, undefined);
            A.store.Bool(ptr + 5480 + 52 + 512 + 26, false);
            A.store.Bool(ptr + 5480 + 52 + 512 + 24, false);
            A.store.Bool(ptr + 5480 + 52 + 512 + 27, false);
            A.store.Bool(ptr + 5480 + 52 + 512 + 25, false);

            A.store.Bool(ptr + 5480 + 52 + 544 + 28, false);
            A.store.Ref(ptr + 5480 + 52 + 544 + 0, undefined);
            A.store.Ref(ptr + 5480 + 52 + 544 + 4, undefined);
            A.store.Ref(ptr + 5480 + 52 + 544 + 8, undefined);
            A.store.Ref(ptr + 5480 + 52 + 544 + 12, undefined);
            A.store.Ref(ptr + 5480 + 52 + 544 + 16, undefined);
            A.store.Ref(ptr + 5480 + 52 + 544 + 20, undefined);
            A.store.Bool(ptr + 5480 + 52 + 544 + 26, false);
            A.store.Bool(ptr + 5480 + 52 + 544 + 24, false);
            A.store.Bool(ptr + 5480 + 52 + 544 + 27, false);
            A.store.Bool(ptr + 5480 + 52 + 544 + 25, false);

            A.store.Bool(ptr + 5480 + 52 + 576 + 28, false);
            A.store.Ref(ptr + 5480 + 52 + 576 + 0, undefined);
            A.store.Ref(ptr + 5480 + 52 + 576 + 4, undefined);
            A.store.Ref(ptr + 5480 + 52 + 576 + 8, undefined);
            A.store.Ref(ptr + 5480 + 52 + 576 + 12, undefined);
            A.store.Ref(ptr + 5480 + 52 + 576 + 16, undefined);
            A.store.Ref(ptr + 5480 + 52 + 576 + 20, undefined);
            A.store.Bool(ptr + 5480 + 52 + 576 + 26, false);
            A.store.Bool(ptr + 5480 + 52 + 576 + 24, false);
            A.store.Bool(ptr + 5480 + 52 + 576 + 27, false);
            A.store.Bool(ptr + 5480 + 52 + 576 + 25, false);

            A.store.Bool(ptr + 5480 + 52 + 608 + 21, false);
            A.store.Bool(ptr + 5480 + 52 + 608 + 14, false);
            A.store.Bool(ptr + 5480 + 52 + 608 + 0, false);
            A.store.Ref(ptr + 5480 + 52 + 608 + 4, undefined);
            A.store.Bool(ptr + 5480 + 52 + 608 + 15, false);
            A.store.Bool(ptr + 5480 + 52 + 608 + 8, false);
            A.store.Bool(ptr + 5480 + 52 + 608 + 16, false);
            A.store.Bool(ptr + 5480 + 52 + 608 + 9, false);
            A.store.Bool(ptr + 5480 + 52 + 608 + 17, false);
            A.store.Bool(ptr + 5480 + 52 + 608 + 10, false);
            A.store.Bool(ptr + 5480 + 52 + 608 + 18, false);
            A.store.Bool(ptr + 5480 + 52 + 608 + 11, false);
            A.store.Bool(ptr + 5480 + 52 + 608 + 19, false);
            A.store.Bool(ptr + 5480 + 52 + 608 + 12, false);
            A.store.Bool(ptr + 5480 + 52 + 608 + 20, false);
            A.store.Bool(ptr + 5480 + 52 + 608 + 13, false);

            A.store.Bool(ptr + 5480 + 52 + 632 + 28, false);
            A.store.Ref(ptr + 5480 + 52 + 632 + 0, undefined);
            A.store.Ref(ptr + 5480 + 52 + 632 + 4, undefined);
            A.store.Ref(ptr + 5480 + 52 + 632 + 8, undefined);
            A.store.Ref(ptr + 5480 + 52 + 632 + 12, undefined);
            A.store.Ref(ptr + 5480 + 52 + 632 + 16, undefined);
            A.store.Ref(ptr + 5480 + 52 + 632 + 20, undefined);
            A.store.Bool(ptr + 5480 + 52 + 632 + 26, false);
            A.store.Bool(ptr + 5480 + 52 + 632 + 24, false);
            A.store.Bool(ptr + 5480 + 52 + 632 + 27, false);
            A.store.Bool(ptr + 5480 + 52 + 632 + 25, false);

            A.store.Bool(ptr + 5480 + 52 + 664 + 28, false);
            A.store.Ref(ptr + 5480 + 52 + 664 + 0, undefined);
            A.store.Ref(ptr + 5480 + 52 + 664 + 4, undefined);
            A.store.Ref(ptr + 5480 + 52 + 664 + 8, undefined);
            A.store.Ref(ptr + 5480 + 52 + 664 + 12, undefined);
            A.store.Ref(ptr + 5480 + 52 + 664 + 16, undefined);
            A.store.Ref(ptr + 5480 + 52 + 664 + 20, undefined);
            A.store.Bool(ptr + 5480 + 52 + 664 + 26, false);
            A.store.Bool(ptr + 5480 + 52 + 664 + 24, false);
            A.store.Bool(ptr + 5480 + 52 + 664 + 27, false);
            A.store.Bool(ptr + 5480 + 52 + 664 + 25, false);

            A.store.Bool(ptr + 5480 + 52 + 696 + 28, false);
            A.store.Ref(ptr + 5480 + 52 + 696 + 0, undefined);
            A.store.Ref(ptr + 5480 + 52 + 696 + 4, undefined);
            A.store.Ref(ptr + 5480 + 52 + 696 + 8, undefined);
            A.store.Ref(ptr + 5480 + 52 + 696 + 12, undefined);
            A.store.Ref(ptr + 5480 + 52 + 696 + 16, undefined);
            A.store.Ref(ptr + 5480 + 52 + 696 + 20, undefined);
            A.store.Bool(ptr + 5480 + 52 + 696 + 26, false);
            A.store.Bool(ptr + 5480 + 52 + 696 + 24, false);
            A.store.Bool(ptr + 5480 + 52 + 696 + 27, false);
            A.store.Bool(ptr + 5480 + 52 + 696 + 25, false);

            A.store.Bool(ptr + 5480 + 52 + 728 + 28, false);
            A.store.Ref(ptr + 5480 + 52 + 728 + 0, undefined);
            A.store.Ref(ptr + 5480 + 52 + 728 + 4, undefined);
            A.store.Ref(ptr + 5480 + 52 + 728 + 8, undefined);
            A.store.Ref(ptr + 5480 + 52 + 728 + 12, undefined);
            A.store.Ref(ptr + 5480 + 52 + 728 + 16, undefined);
            A.store.Ref(ptr + 5480 + 52 + 728 + 20, undefined);
            A.store.Bool(ptr + 5480 + 52 + 728 + 26, false);
            A.store.Bool(ptr + 5480 + 52 + 728 + 24, false);
            A.store.Bool(ptr + 5480 + 52 + 728 + 27, false);
            A.store.Bool(ptr + 5480 + 52 + 728 + 25, false);

            A.store.Bool(ptr + 5480 + 52 + 760 + 21, false);
            A.store.Bool(ptr + 5480 + 52 + 760 + 14, false);
            A.store.Bool(ptr + 5480 + 52 + 760 + 0, false);
            A.store.Ref(ptr + 5480 + 52 + 760 + 4, undefined);
            A.store.Bool(ptr + 5480 + 52 + 760 + 15, false);
            A.store.Bool(ptr + 5480 + 52 + 760 + 8, false);
            A.store.Bool(ptr + 5480 + 52 + 760 + 16, false);
            A.store.Bool(ptr + 5480 + 52 + 760 + 9, false);
            A.store.Bool(ptr + 5480 + 52 + 760 + 17, false);
            A.store.Bool(ptr + 5480 + 52 + 760 + 10, false);
            A.store.Bool(ptr + 5480 + 52 + 760 + 18, false);
            A.store.Bool(ptr + 5480 + 52 + 760 + 11, false);
            A.store.Bool(ptr + 5480 + 52 + 760 + 19, false);
            A.store.Bool(ptr + 5480 + 52 + 760 + 12, false);
            A.store.Bool(ptr + 5480 + 52 + 760 + 20, false);
            A.store.Bool(ptr + 5480 + 52 + 760 + 13, false);

            A.store.Bool(ptr + 5480 + 52 + 784 + 21, false);
            A.store.Bool(ptr + 5480 + 52 + 784 + 14, false);
            A.store.Bool(ptr + 5480 + 52 + 784 + 0, false);
            A.store.Ref(ptr + 5480 + 52 + 784 + 4, undefined);
            A.store.Bool(ptr + 5480 + 52 + 784 + 15, false);
            A.store.Bool(ptr + 5480 + 52 + 784 + 8, false);
            A.store.Bool(ptr + 5480 + 52 + 784 + 16, false);
            A.store.Bool(ptr + 5480 + 52 + 784 + 9, false);
            A.store.Bool(ptr + 5480 + 52 + 784 + 17, false);
            A.store.Bool(ptr + 5480 + 52 + 784 + 10, false);
            A.store.Bool(ptr + 5480 + 52 + 784 + 18, false);
            A.store.Bool(ptr + 5480 + 52 + 784 + 11, false);
            A.store.Bool(ptr + 5480 + 52 + 784 + 19, false);
            A.store.Bool(ptr + 5480 + 52 + 784 + 12, false);
            A.store.Bool(ptr + 5480 + 52 + 784 + 20, false);
            A.store.Bool(ptr + 5480 + 52 + 784 + 13, false);
          } else {
            A.store.Bool(ptr + 5480 + 52 + 806, true);

            if (typeof x["WiFi"]["EAP"]["AnonymousIdentity"] === "undefined") {
              A.store.Bool(ptr + 5480 + 52 + 0 + 28, false);
              A.store.Ref(ptr + 5480 + 52 + 0 + 0, undefined);
              A.store.Ref(ptr + 5480 + 52 + 0 + 4, undefined);
              A.store.Ref(ptr + 5480 + 52 + 0 + 8, undefined);
              A.store.Ref(ptr + 5480 + 52 + 0 + 12, undefined);
              A.store.Ref(ptr + 5480 + 52 + 0 + 16, undefined);
              A.store.Ref(ptr + 5480 + 52 + 0 + 20, undefined);
              A.store.Bool(ptr + 5480 + 52 + 0 + 26, false);
              A.store.Bool(ptr + 5480 + 52 + 0 + 24, false);
              A.store.Bool(ptr + 5480 + 52 + 0 + 27, false);
              A.store.Bool(ptr + 5480 + 52 + 0 + 25, false);
            } else {
              A.store.Bool(ptr + 5480 + 52 + 0 + 28, true);
              A.store.Ref(ptr + 5480 + 52 + 0 + 0, x["WiFi"]["EAP"]["AnonymousIdentity"]["Active"]);
              A.store.Ref(ptr + 5480 + 52 + 0 + 4, x["WiFi"]["EAP"]["AnonymousIdentity"]["Effective"]);
              A.store.Ref(ptr + 5480 + 52 + 0 + 8, x["WiFi"]["EAP"]["AnonymousIdentity"]["UserPolicy"]);
              A.store.Ref(ptr + 5480 + 52 + 0 + 12, x["WiFi"]["EAP"]["AnonymousIdentity"]["DevicePolicy"]);
              A.store.Ref(ptr + 5480 + 52 + 0 + 16, x["WiFi"]["EAP"]["AnonymousIdentity"]["UserSetting"]);
              A.store.Ref(ptr + 5480 + 52 + 0 + 20, x["WiFi"]["EAP"]["AnonymousIdentity"]["SharedSetting"]);
              A.store.Bool(
                ptr + 5480 + 52 + 0 + 26,
                "UserEditable" in x["WiFi"]["EAP"]["AnonymousIdentity"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 0 + 24,
                x["WiFi"]["EAP"]["AnonymousIdentity"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 0 + 27,
                "DeviceEditable" in x["WiFi"]["EAP"]["AnonymousIdentity"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 0 + 25,
                x["WiFi"]["EAP"]["AnonymousIdentity"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["WiFi"]["EAP"]["ClientCertPattern"] === "undefined") {
              A.store.Bool(ptr + 5480 + 52 + 32 + 318, false);

              A.store.Bool(ptr + 5480 + 52 + 32 + 0 + 28, false);
              A.store.Ref(ptr + 5480 + 52 + 32 + 0 + 0, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 0 + 4, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 0 + 8, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 0 + 12, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 0 + 16, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 0 + 20, undefined);
              A.store.Bool(ptr + 5480 + 52 + 32 + 0 + 26, false);
              A.store.Bool(ptr + 5480 + 52 + 32 + 0 + 24, false);
              A.store.Bool(ptr + 5480 + 52 + 32 + 0 + 27, false);
              A.store.Bool(ptr + 5480 + 52 + 32 + 0 + 25, false);

              A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 125, false);

              A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 0 + 28, false);
              A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 0 + 0, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 0 + 4, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 0 + 8, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 0 + 12, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 0 + 16, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 0 + 20, undefined);
              A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 0 + 26, false);
              A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 0 + 24, false);
              A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 0 + 27, false);
              A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 0 + 25, false);

              A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 32 + 28, false);
              A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 32 + 0, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 32 + 4, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 32 + 8, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 32 + 12, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 32 + 16, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 32 + 20, undefined);
              A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 32 + 26, false);
              A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 32 + 24, false);
              A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 32 + 27, false);
              A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 32 + 25, false);

              A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 64 + 28, false);
              A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 64 + 0, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 64 + 4, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 64 + 8, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 64 + 12, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 64 + 16, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 64 + 20, undefined);
              A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 64 + 26, false);
              A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 64 + 24, false);
              A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 64 + 27, false);
              A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 64 + 25, false);

              A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 96 + 28, false);
              A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 96 + 0, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 96 + 4, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 96 + 8, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 96 + 12, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 96 + 16, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 96 + 20, undefined);
              A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 96 + 26, false);
              A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 96 + 24, false);
              A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 96 + 27, false);
              A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 96 + 25, false);

              A.store.Bool(ptr + 5480 + 52 + 32 + 160 + 28, false);
              A.store.Ref(ptr + 5480 + 52 + 32 + 160 + 0, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 160 + 4, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 160 + 8, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 160 + 12, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 160 + 16, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 160 + 20, undefined);
              A.store.Bool(ptr + 5480 + 52 + 32 + 160 + 26, false);
              A.store.Bool(ptr + 5480 + 52 + 32 + 160 + 24, false);
              A.store.Bool(ptr + 5480 + 52 + 32 + 160 + 27, false);
              A.store.Bool(ptr + 5480 + 52 + 32 + 160 + 25, false);

              A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 125, false);

              A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 0 + 28, false);
              A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 0 + 0, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 0 + 4, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 0 + 8, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 0 + 12, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 0 + 16, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 0 + 20, undefined);
              A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 0 + 26, false);
              A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 0 + 24, false);
              A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 0 + 27, false);
              A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 0 + 25, false);

              A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 32 + 28, false);
              A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 32 + 0, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 32 + 4, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 32 + 8, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 32 + 12, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 32 + 16, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 32 + 20, undefined);
              A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 32 + 26, false);
              A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 32 + 24, false);
              A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 32 + 27, false);
              A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 32 + 25, false);

              A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 64 + 28, false);
              A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 64 + 0, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 64 + 4, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 64 + 8, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 64 + 12, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 64 + 16, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 64 + 20, undefined);
              A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 64 + 26, false);
              A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 64 + 24, false);
              A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 64 + 27, false);
              A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 64 + 25, false);

              A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 96 + 28, false);
              A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 96 + 0, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 96 + 4, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 96 + 8, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 96 + 12, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 96 + 16, undefined);
              A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 96 + 20, undefined);
              A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 96 + 26, false);
              A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 96 + 24, false);
              A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 96 + 27, false);
              A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 96 + 25, false);
            } else {
              A.store.Bool(ptr + 5480 + 52 + 32 + 318, true);

              if (typeof x["WiFi"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] === "undefined") {
                A.store.Bool(ptr + 5480 + 52 + 32 + 0 + 28, false);
                A.store.Ref(ptr + 5480 + 52 + 32 + 0 + 0, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 0 + 4, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 0 + 8, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 0 + 12, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 0 + 16, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 0 + 20, undefined);
                A.store.Bool(ptr + 5480 + 52 + 32 + 0 + 26, false);
                A.store.Bool(ptr + 5480 + 52 + 32 + 0 + 24, false);
                A.store.Bool(ptr + 5480 + 52 + 32 + 0 + 27, false);
                A.store.Bool(ptr + 5480 + 52 + 32 + 0 + 25, false);
              } else {
                A.store.Bool(ptr + 5480 + 52 + 32 + 0 + 28, true);
                A.store.Ref(
                  ptr + 5480 + 52 + 32 + 0 + 0,
                  x["WiFi"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["Active"]
                );
                A.store.Ref(
                  ptr + 5480 + 52 + 32 + 0 + 4,
                  x["WiFi"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["Effective"]
                );
                A.store.Ref(
                  ptr + 5480 + 52 + 32 + 0 + 8,
                  x["WiFi"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 5480 + 52 + 32 + 0 + 12,
                  x["WiFi"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 5480 + 52 + 32 + 0 + 16,
                  x["WiFi"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 5480 + 52 + 32 + 0 + 20,
                  x["WiFi"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 5480 + 52 + 32 + 0 + 26,
                  "UserEditable" in x["WiFi"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] ? true : false
                );
                A.store.Bool(
                  ptr + 5480 + 52 + 32 + 0 + 24,
                  x["WiFi"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 5480 + 52 + 32 + 0 + 27,
                  "DeviceEditable" in x["WiFi"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] ? true : false
                );
                A.store.Bool(
                  ptr + 5480 + 52 + 32 + 0 + 25,
                  x["WiFi"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"] === "undefined") {
                A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 125, false);

                A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 0 + 28, false);
                A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 0 + 0, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 0 + 4, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 0 + 8, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 0 + 12, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 0 + 16, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 0 + 20, undefined);
                A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 0 + 26, false);
                A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 0 + 24, false);
                A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 0 + 27, false);
                A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 0 + 25, false);

                A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 32 + 28, false);
                A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 32 + 0, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 32 + 4, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 32 + 8, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 32 + 12, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 32 + 16, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 32 + 20, undefined);
                A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 32 + 26, false);
                A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 32 + 24, false);
                A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 32 + 27, false);
                A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 32 + 25, false);

                A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 64 + 28, false);
                A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 64 + 0, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 64 + 4, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 64 + 8, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 64 + 12, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 64 + 16, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 64 + 20, undefined);
                A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 64 + 26, false);
                A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 64 + 24, false);
                A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 64 + 27, false);
                A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 64 + 25, false);

                A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 96 + 28, false);
                A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 96 + 0, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 96 + 4, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 96 + 8, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 96 + 12, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 96 + 16, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 96 + 20, undefined);
                A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 96 + 26, false);
                A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 96 + 24, false);
                A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 96 + 27, false);
                A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 96 + 25, false);
              } else {
                A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 125, true);

                if (typeof x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] === "undefined") {
                  A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 0 + 28, false);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 0 + 0, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 0 + 4, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 0 + 8, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 0 + 12, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 0 + 16, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 0 + 20, undefined);
                  A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 0 + 26, false);
                  A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 0 + 24, false);
                  A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 0 + 27, false);
                  A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 0 + 25, false);
                } else {
                  A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 0 + 28, true);
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 32 + 0 + 0,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 32 + 0 + 4,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 32 + 0 + 8,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 32 + 0 + 12,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 32 + 0 + 16,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 32 + 0 + 20,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 5480 + 52 + 32 + 32 + 0 + 26,
                    "UserEditable" in x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 5480 + 52 + 32 + 32 + 0 + 24,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 5480 + 52 + 32 + 32 + 0 + 27,
                    "DeviceEditable" in x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 5480 + 52 + 32 + 32 + 0 + 25,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"] ? true : false
                  );
                }

                if (typeof x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] === "undefined") {
                  A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 32 + 28, false);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 32 + 0, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 32 + 4, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 32 + 8, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 32 + 12, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 32 + 16, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 32 + 20, undefined);
                  A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 32 + 26, false);
                  A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 32 + 24, false);
                  A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 32 + 27, false);
                  A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 32 + 25, false);
                } else {
                  A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 32 + 28, true);
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 32 + 32 + 0,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 32 + 32 + 4,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 32 + 32 + 8,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 32 + 32 + 12,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 32 + 32 + 16,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 32 + 32 + 20,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 5480 + 52 + 32 + 32 + 32 + 26,
                    "UserEditable" in x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 5480 + 52 + 32 + 32 + 32 + 24,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 5480 + 52 + 32 + 32 + 32 + 27,
                    "DeviceEditable" in x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 5480 + 52 + 32 + 32 + 32 + 25,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"] ? true : false
                  );
                }

                if (typeof x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] === "undefined") {
                  A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 64 + 28, false);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 64 + 0, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 64 + 4, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 64 + 8, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 64 + 12, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 64 + 16, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 64 + 20, undefined);
                  A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 64 + 26, false);
                  A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 64 + 24, false);
                  A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 64 + 27, false);
                  A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 64 + 25, false);
                } else {
                  A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 64 + 28, true);
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 32 + 64 + 0,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 32 + 64 + 4,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 32 + 64 + 8,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 32 + 64 + 12,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 32 + 64 + 16,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 32 + 64 + 20,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 5480 + 52 + 32 + 32 + 64 + 26,
                    "UserEditable" in x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 5480 + 52 + 32 + 32 + 64 + 24,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 5480 + 52 + 32 + 32 + 64 + 27,
                    "DeviceEditable" in x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 5480 + 52 + 32 + 32 + 64 + 25,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"] ? true : false
                  );
                }

                if (typeof x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] === "undefined") {
                  A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 96 + 28, false);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 96 + 0, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 96 + 4, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 96 + 8, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 96 + 12, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 96 + 16, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 32 + 96 + 20, undefined);
                  A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 96 + 26, false);
                  A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 96 + 24, false);
                  A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 96 + 27, false);
                  A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 96 + 25, false);
                } else {
                  A.store.Bool(ptr + 5480 + 52 + 32 + 32 + 96 + 28, true);
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 32 + 96 + 0,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 32 + 96 + 4,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 32 + 96 + 8,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 32 + 96 + 12,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 32 + 96 + 16,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 32 + 96 + 20,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 5480 + 52 + 32 + 32 + 96 + 26,
                    "UserEditable" in x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]
                      ? true
                      : false
                  );
                  A.store.Bool(
                    ptr + 5480 + 52 + 32 + 32 + 96 + 24,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 5480 + 52 + 32 + 32 + 96 + 27,
                    "DeviceEditable" in x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]
                      ? true
                      : false
                  );
                  A.store.Bool(
                    ptr + 5480 + 52 + 32 + 32 + 96 + 25,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"]
                      ? true
                      : false
                  );
                }
              }

              if (typeof x["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCARef"] === "undefined") {
                A.store.Bool(ptr + 5480 + 52 + 32 + 160 + 28, false);
                A.store.Ref(ptr + 5480 + 52 + 32 + 160 + 0, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 160 + 4, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 160 + 8, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 160 + 12, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 160 + 16, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 160 + 20, undefined);
                A.store.Bool(ptr + 5480 + 52 + 32 + 160 + 26, false);
                A.store.Bool(ptr + 5480 + 52 + 32 + 160 + 24, false);
                A.store.Bool(ptr + 5480 + 52 + 32 + 160 + 27, false);
                A.store.Bool(ptr + 5480 + 52 + 32 + 160 + 25, false);
              } else {
                A.store.Bool(ptr + 5480 + 52 + 32 + 160 + 28, true);
                A.store.Ref(
                  ptr + 5480 + 52 + 32 + 160 + 0,
                  x["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["Active"]
                );
                A.store.Ref(
                  ptr + 5480 + 52 + 32 + 160 + 4,
                  x["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["Effective"]
                );
                A.store.Ref(
                  ptr + 5480 + 52 + 32 + 160 + 8,
                  x["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserPolicy"]
                );
                A.store.Ref(
                  ptr + 5480 + 52 + 32 + 160 + 12,
                  x["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["DevicePolicy"]
                );
                A.store.Ref(
                  ptr + 5480 + 52 + 32 + 160 + 16,
                  x["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserSetting"]
                );
                A.store.Ref(
                  ptr + 5480 + 52 + 32 + 160 + 20,
                  x["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["SharedSetting"]
                );
                A.store.Bool(
                  ptr + 5480 + 52 + 32 + 160 + 26,
                  "UserEditable" in x["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCARef"] ? true : false
                );
                A.store.Bool(
                  ptr + 5480 + 52 + 32 + 160 + 24,
                  x["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserEditable"] ? true : false
                );
                A.store.Bool(
                  ptr + 5480 + 52 + 32 + 160 + 27,
                  "DeviceEditable" in x["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCARef"] ? true : false
                );
                A.store.Bool(
                  ptr + 5480 + 52 + 32 + 160 + 25,
                  x["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"] ? true : false
                );
              }

              if (typeof x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"] === "undefined") {
                A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 125, false);

                A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 0 + 28, false);
                A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 0 + 0, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 0 + 4, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 0 + 8, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 0 + 12, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 0 + 16, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 0 + 20, undefined);
                A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 0 + 26, false);
                A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 0 + 24, false);
                A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 0 + 27, false);
                A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 0 + 25, false);

                A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 32 + 28, false);
                A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 32 + 0, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 32 + 4, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 32 + 8, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 32 + 12, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 32 + 16, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 32 + 20, undefined);
                A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 32 + 26, false);
                A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 32 + 24, false);
                A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 32 + 27, false);
                A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 32 + 25, false);

                A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 64 + 28, false);
                A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 64 + 0, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 64 + 4, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 64 + 8, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 64 + 12, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 64 + 16, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 64 + 20, undefined);
                A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 64 + 26, false);
                A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 64 + 24, false);
                A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 64 + 27, false);
                A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 64 + 25, false);

                A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 96 + 28, false);
                A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 96 + 0, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 96 + 4, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 96 + 8, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 96 + 12, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 96 + 16, undefined);
                A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 96 + 20, undefined);
                A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 96 + 26, false);
                A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 96 + 24, false);
                A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 96 + 27, false);
                A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 96 + 25, false);
              } else {
                A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 125, true);

                if (typeof x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] === "undefined") {
                  A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 0 + 28, false);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 0 + 0, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 0 + 4, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 0 + 8, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 0 + 12, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 0 + 16, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 0 + 20, undefined);
                  A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 0 + 26, false);
                  A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 0 + 24, false);
                  A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 0 + 27, false);
                  A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 0 + 25, false);
                } else {
                  A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 0 + 28, true);
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 192 + 0 + 0,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 192 + 0 + 4,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 192 + 0 + 8,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 192 + 0 + 12,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 192 + 0 + 16,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 192 + 0 + 20,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 5480 + 52 + 32 + 192 + 0 + 26,
                    "UserEditable" in x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 5480 + 52 + 32 + 192 + 0 + 24,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 5480 + 52 + 32 + 192 + 0 + 27,
                    "DeviceEditable" in x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 5480 + 52 + 32 + 192 + 0 + 25,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"] ? true : false
                  );
                }

                if (typeof x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"] === "undefined") {
                  A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 32 + 28, false);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 32 + 0, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 32 + 4, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 32 + 8, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 32 + 12, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 32 + 16, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 32 + 20, undefined);
                  A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 32 + 26, false);
                  A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 32 + 24, false);
                  A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 32 + 27, false);
                  A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 32 + 25, false);
                } else {
                  A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 32 + 28, true);
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 192 + 32 + 0,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 192 + 32 + 4,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 192 + 32 + 8,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 192 + 32 + 12,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 192 + 32 + 16,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 192 + 32 + 20,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 5480 + 52 + 32 + 192 + 32 + 26,
                    "UserEditable" in x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 5480 + 52 + 32 + 192 + 32 + 24,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 5480 + 52 + 32 + 192 + 32 + 27,
                    "DeviceEditable" in x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 5480 + 52 + 32 + 192 + 32 + 25,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"] ? true : false
                  );
                }

                if (typeof x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"] === "undefined") {
                  A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 64 + 28, false);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 64 + 0, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 64 + 4, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 64 + 8, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 64 + 12, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 64 + 16, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 64 + 20, undefined);
                  A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 64 + 26, false);
                  A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 64 + 24, false);
                  A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 64 + 27, false);
                  A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 64 + 25, false);
                } else {
                  A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 64 + 28, true);
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 192 + 64 + 0,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 192 + 64 + 4,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 192 + 64 + 8,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 192 + 64 + 12,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 192 + 64 + 16,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 192 + 64 + 20,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 5480 + 52 + 32 + 192 + 64 + 26,
                    "UserEditable" in x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 5480 + 52 + 32 + 192 + 64 + 24,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 5480 + 52 + 32 + 192 + 64 + 27,
                    "DeviceEditable" in x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"] ? true : false
                  );
                  A.store.Bool(
                    ptr + 5480 + 52 + 32 + 192 + 64 + 25,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"] ? true : false
                  );
                }

                if (typeof x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] === "undefined") {
                  A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 96 + 28, false);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 96 + 0, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 96 + 4, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 96 + 8, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 96 + 12, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 96 + 16, undefined);
                  A.store.Ref(ptr + 5480 + 52 + 32 + 192 + 96 + 20, undefined);
                  A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 96 + 26, false);
                  A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 96 + 24, false);
                  A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 96 + 27, false);
                  A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 96 + 25, false);
                } else {
                  A.store.Bool(ptr + 5480 + 52 + 32 + 192 + 96 + 28, true);
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 192 + 96 + 0,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Active"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 192 + 96 + 4,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Effective"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 192 + 96 + 8,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserPolicy"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 192 + 96 + 12,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DevicePolicy"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 192 + 96 + 16,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserSetting"]
                  );
                  A.store.Ref(
                    ptr + 5480 + 52 + 32 + 192 + 96 + 20,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["SharedSetting"]
                  );
                  A.store.Bool(
                    ptr + 5480 + 52 + 32 + 192 + 96 + 26,
                    "UserEditable" in x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]
                      ? true
                      : false
                  );
                  A.store.Bool(
                    ptr + 5480 + 52 + 32 + 192 + 96 + 24,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"]
                      ? true
                      : false
                  );
                  A.store.Bool(
                    ptr + 5480 + 52 + 32 + 192 + 96 + 27,
                    "DeviceEditable" in x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]
                      ? true
                      : false
                  );
                  A.store.Bool(
                    ptr + 5480 + 52 + 32 + 192 + 96 + 25,
                    x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"]
                      ? true
                      : false
                  );
                }
              }
            }

            if (typeof x["WiFi"]["EAP"]["ClientCertPKCS11Id"] === "undefined") {
              A.store.Bool(ptr + 5480 + 52 + 352 + 28, false);
              A.store.Ref(ptr + 5480 + 52 + 352 + 0, undefined);
              A.store.Ref(ptr + 5480 + 52 + 352 + 4, undefined);
              A.store.Ref(ptr + 5480 + 52 + 352 + 8, undefined);
              A.store.Ref(ptr + 5480 + 52 + 352 + 12, undefined);
              A.store.Ref(ptr + 5480 + 52 + 352 + 16, undefined);
              A.store.Ref(ptr + 5480 + 52 + 352 + 20, undefined);
              A.store.Bool(ptr + 5480 + 52 + 352 + 26, false);
              A.store.Bool(ptr + 5480 + 52 + 352 + 24, false);
              A.store.Bool(ptr + 5480 + 52 + 352 + 27, false);
              A.store.Bool(ptr + 5480 + 52 + 352 + 25, false);
            } else {
              A.store.Bool(ptr + 5480 + 52 + 352 + 28, true);
              A.store.Ref(ptr + 5480 + 52 + 352 + 0, x["WiFi"]["EAP"]["ClientCertPKCS11Id"]["Active"]);
              A.store.Ref(ptr + 5480 + 52 + 352 + 4, x["WiFi"]["EAP"]["ClientCertPKCS11Id"]["Effective"]);
              A.store.Ref(ptr + 5480 + 52 + 352 + 8, x["WiFi"]["EAP"]["ClientCertPKCS11Id"]["UserPolicy"]);
              A.store.Ref(ptr + 5480 + 52 + 352 + 12, x["WiFi"]["EAP"]["ClientCertPKCS11Id"]["DevicePolicy"]);
              A.store.Ref(ptr + 5480 + 52 + 352 + 16, x["WiFi"]["EAP"]["ClientCertPKCS11Id"]["UserSetting"]);
              A.store.Ref(ptr + 5480 + 52 + 352 + 20, x["WiFi"]["EAP"]["ClientCertPKCS11Id"]["SharedSetting"]);
              A.store.Bool(
                ptr + 5480 + 52 + 352 + 26,
                "UserEditable" in x["WiFi"]["EAP"]["ClientCertPKCS11Id"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 352 + 24,
                x["WiFi"]["EAP"]["ClientCertPKCS11Id"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 352 + 27,
                "DeviceEditable" in x["WiFi"]["EAP"]["ClientCertPKCS11Id"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 352 + 25,
                x["WiFi"]["EAP"]["ClientCertPKCS11Id"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["WiFi"]["EAP"]["ClientCertProvisioningProfileId"] === "undefined") {
              A.store.Bool(ptr + 5480 + 52 + 384 + 28, false);
              A.store.Ref(ptr + 5480 + 52 + 384 + 0, undefined);
              A.store.Ref(ptr + 5480 + 52 + 384 + 4, undefined);
              A.store.Ref(ptr + 5480 + 52 + 384 + 8, undefined);
              A.store.Ref(ptr + 5480 + 52 + 384 + 12, undefined);
              A.store.Ref(ptr + 5480 + 52 + 384 + 16, undefined);
              A.store.Ref(ptr + 5480 + 52 + 384 + 20, undefined);
              A.store.Bool(ptr + 5480 + 52 + 384 + 26, false);
              A.store.Bool(ptr + 5480 + 52 + 384 + 24, false);
              A.store.Bool(ptr + 5480 + 52 + 384 + 27, false);
              A.store.Bool(ptr + 5480 + 52 + 384 + 25, false);
            } else {
              A.store.Bool(ptr + 5480 + 52 + 384 + 28, true);
              A.store.Ref(ptr + 5480 + 52 + 384 + 0, x["WiFi"]["EAP"]["ClientCertProvisioningProfileId"]["Active"]);
              A.store.Ref(ptr + 5480 + 52 + 384 + 4, x["WiFi"]["EAP"]["ClientCertProvisioningProfileId"]["Effective"]);
              A.store.Ref(ptr + 5480 + 52 + 384 + 8, x["WiFi"]["EAP"]["ClientCertProvisioningProfileId"]["UserPolicy"]);
              A.store.Ref(
                ptr + 5480 + 52 + 384 + 12,
                x["WiFi"]["EAP"]["ClientCertProvisioningProfileId"]["DevicePolicy"]
              );
              A.store.Ref(
                ptr + 5480 + 52 + 384 + 16,
                x["WiFi"]["EAP"]["ClientCertProvisioningProfileId"]["UserSetting"]
              );
              A.store.Ref(
                ptr + 5480 + 52 + 384 + 20,
                x["WiFi"]["EAP"]["ClientCertProvisioningProfileId"]["SharedSetting"]
              );
              A.store.Bool(
                ptr + 5480 + 52 + 384 + 26,
                "UserEditable" in x["WiFi"]["EAP"]["ClientCertProvisioningProfileId"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 384 + 24,
                x["WiFi"]["EAP"]["ClientCertProvisioningProfileId"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 384 + 27,
                "DeviceEditable" in x["WiFi"]["EAP"]["ClientCertProvisioningProfileId"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 384 + 25,
                x["WiFi"]["EAP"]["ClientCertProvisioningProfileId"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["WiFi"]["EAP"]["ClientCertRef"] === "undefined") {
              A.store.Bool(ptr + 5480 + 52 + 416 + 28, false);
              A.store.Ref(ptr + 5480 + 52 + 416 + 0, undefined);
              A.store.Ref(ptr + 5480 + 52 + 416 + 4, undefined);
              A.store.Ref(ptr + 5480 + 52 + 416 + 8, undefined);
              A.store.Ref(ptr + 5480 + 52 + 416 + 12, undefined);
              A.store.Ref(ptr + 5480 + 52 + 416 + 16, undefined);
              A.store.Ref(ptr + 5480 + 52 + 416 + 20, undefined);
              A.store.Bool(ptr + 5480 + 52 + 416 + 26, false);
              A.store.Bool(ptr + 5480 + 52 + 416 + 24, false);
              A.store.Bool(ptr + 5480 + 52 + 416 + 27, false);
              A.store.Bool(ptr + 5480 + 52 + 416 + 25, false);
            } else {
              A.store.Bool(ptr + 5480 + 52 + 416 + 28, true);
              A.store.Ref(ptr + 5480 + 52 + 416 + 0, x["WiFi"]["EAP"]["ClientCertRef"]["Active"]);
              A.store.Ref(ptr + 5480 + 52 + 416 + 4, x["WiFi"]["EAP"]["ClientCertRef"]["Effective"]);
              A.store.Ref(ptr + 5480 + 52 + 416 + 8, x["WiFi"]["EAP"]["ClientCertRef"]["UserPolicy"]);
              A.store.Ref(ptr + 5480 + 52 + 416 + 12, x["WiFi"]["EAP"]["ClientCertRef"]["DevicePolicy"]);
              A.store.Ref(ptr + 5480 + 52 + 416 + 16, x["WiFi"]["EAP"]["ClientCertRef"]["UserSetting"]);
              A.store.Ref(ptr + 5480 + 52 + 416 + 20, x["WiFi"]["EAP"]["ClientCertRef"]["SharedSetting"]);
              A.store.Bool(
                ptr + 5480 + 52 + 416 + 26,
                "UserEditable" in x["WiFi"]["EAP"]["ClientCertRef"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 416 + 24,
                x["WiFi"]["EAP"]["ClientCertRef"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 416 + 27,
                "DeviceEditable" in x["WiFi"]["EAP"]["ClientCertRef"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 416 + 25,
                x["WiFi"]["EAP"]["ClientCertRef"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["WiFi"]["EAP"]["ClientCertType"] === "undefined") {
              A.store.Bool(ptr + 5480 + 52 + 448 + 28, false);
              A.store.Ref(ptr + 5480 + 52 + 448 + 0, undefined);
              A.store.Ref(ptr + 5480 + 52 + 448 + 4, undefined);
              A.store.Ref(ptr + 5480 + 52 + 448 + 8, undefined);
              A.store.Ref(ptr + 5480 + 52 + 448 + 12, undefined);
              A.store.Ref(ptr + 5480 + 52 + 448 + 16, undefined);
              A.store.Ref(ptr + 5480 + 52 + 448 + 20, undefined);
              A.store.Bool(ptr + 5480 + 52 + 448 + 26, false);
              A.store.Bool(ptr + 5480 + 52 + 448 + 24, false);
              A.store.Bool(ptr + 5480 + 52 + 448 + 27, false);
              A.store.Bool(ptr + 5480 + 52 + 448 + 25, false);
            } else {
              A.store.Bool(ptr + 5480 + 52 + 448 + 28, true);
              A.store.Ref(ptr + 5480 + 52 + 448 + 0, x["WiFi"]["EAP"]["ClientCertType"]["Active"]);
              A.store.Ref(ptr + 5480 + 52 + 448 + 4, x["WiFi"]["EAP"]["ClientCertType"]["Effective"]);
              A.store.Ref(ptr + 5480 + 52 + 448 + 8, x["WiFi"]["EAP"]["ClientCertType"]["UserPolicy"]);
              A.store.Ref(ptr + 5480 + 52 + 448 + 12, x["WiFi"]["EAP"]["ClientCertType"]["DevicePolicy"]);
              A.store.Ref(ptr + 5480 + 52 + 448 + 16, x["WiFi"]["EAP"]["ClientCertType"]["UserSetting"]);
              A.store.Ref(ptr + 5480 + 52 + 448 + 20, x["WiFi"]["EAP"]["ClientCertType"]["SharedSetting"]);
              A.store.Bool(
                ptr + 5480 + 52 + 448 + 26,
                "UserEditable" in x["WiFi"]["EAP"]["ClientCertType"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 448 + 24,
                x["WiFi"]["EAP"]["ClientCertType"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 448 + 27,
                "DeviceEditable" in x["WiFi"]["EAP"]["ClientCertType"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 448 + 25,
                x["WiFi"]["EAP"]["ClientCertType"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["WiFi"]["EAP"]["Identity"] === "undefined") {
              A.store.Bool(ptr + 5480 + 52 + 480 + 28, false);
              A.store.Ref(ptr + 5480 + 52 + 480 + 0, undefined);
              A.store.Ref(ptr + 5480 + 52 + 480 + 4, undefined);
              A.store.Ref(ptr + 5480 + 52 + 480 + 8, undefined);
              A.store.Ref(ptr + 5480 + 52 + 480 + 12, undefined);
              A.store.Ref(ptr + 5480 + 52 + 480 + 16, undefined);
              A.store.Ref(ptr + 5480 + 52 + 480 + 20, undefined);
              A.store.Bool(ptr + 5480 + 52 + 480 + 26, false);
              A.store.Bool(ptr + 5480 + 52 + 480 + 24, false);
              A.store.Bool(ptr + 5480 + 52 + 480 + 27, false);
              A.store.Bool(ptr + 5480 + 52 + 480 + 25, false);
            } else {
              A.store.Bool(ptr + 5480 + 52 + 480 + 28, true);
              A.store.Ref(ptr + 5480 + 52 + 480 + 0, x["WiFi"]["EAP"]["Identity"]["Active"]);
              A.store.Ref(ptr + 5480 + 52 + 480 + 4, x["WiFi"]["EAP"]["Identity"]["Effective"]);
              A.store.Ref(ptr + 5480 + 52 + 480 + 8, x["WiFi"]["EAP"]["Identity"]["UserPolicy"]);
              A.store.Ref(ptr + 5480 + 52 + 480 + 12, x["WiFi"]["EAP"]["Identity"]["DevicePolicy"]);
              A.store.Ref(ptr + 5480 + 52 + 480 + 16, x["WiFi"]["EAP"]["Identity"]["UserSetting"]);
              A.store.Ref(ptr + 5480 + 52 + 480 + 20, x["WiFi"]["EAP"]["Identity"]["SharedSetting"]);
              A.store.Bool(ptr + 5480 + 52 + 480 + 26, "UserEditable" in x["WiFi"]["EAP"]["Identity"] ? true : false);
              A.store.Bool(ptr + 5480 + 52 + 480 + 24, x["WiFi"]["EAP"]["Identity"]["UserEditable"] ? true : false);
              A.store.Bool(ptr + 5480 + 52 + 480 + 27, "DeviceEditable" in x["WiFi"]["EAP"]["Identity"] ? true : false);
              A.store.Bool(ptr + 5480 + 52 + 480 + 25, x["WiFi"]["EAP"]["Identity"]["DeviceEditable"] ? true : false);
            }

            if (typeof x["WiFi"]["EAP"]["Inner"] === "undefined") {
              A.store.Bool(ptr + 5480 + 52 + 512 + 28, false);
              A.store.Ref(ptr + 5480 + 52 + 512 + 0, undefined);
              A.store.Ref(ptr + 5480 + 52 + 512 + 4, undefined);
              A.store.Ref(ptr + 5480 + 52 + 512 + 8, undefined);
              A.store.Ref(ptr + 5480 + 52 + 512 + 12, undefined);
              A.store.Ref(ptr + 5480 + 52 + 512 + 16, undefined);
              A.store.Ref(ptr + 5480 + 52 + 512 + 20, undefined);
              A.store.Bool(ptr + 5480 + 52 + 512 + 26, false);
              A.store.Bool(ptr + 5480 + 52 + 512 + 24, false);
              A.store.Bool(ptr + 5480 + 52 + 512 + 27, false);
              A.store.Bool(ptr + 5480 + 52 + 512 + 25, false);
            } else {
              A.store.Bool(ptr + 5480 + 52 + 512 + 28, true);
              A.store.Ref(ptr + 5480 + 52 + 512 + 0, x["WiFi"]["EAP"]["Inner"]["Active"]);
              A.store.Ref(ptr + 5480 + 52 + 512 + 4, x["WiFi"]["EAP"]["Inner"]["Effective"]);
              A.store.Ref(ptr + 5480 + 52 + 512 + 8, x["WiFi"]["EAP"]["Inner"]["UserPolicy"]);
              A.store.Ref(ptr + 5480 + 52 + 512 + 12, x["WiFi"]["EAP"]["Inner"]["DevicePolicy"]);
              A.store.Ref(ptr + 5480 + 52 + 512 + 16, x["WiFi"]["EAP"]["Inner"]["UserSetting"]);
              A.store.Ref(ptr + 5480 + 52 + 512 + 20, x["WiFi"]["EAP"]["Inner"]["SharedSetting"]);
              A.store.Bool(ptr + 5480 + 52 + 512 + 26, "UserEditable" in x["WiFi"]["EAP"]["Inner"] ? true : false);
              A.store.Bool(ptr + 5480 + 52 + 512 + 24, x["WiFi"]["EAP"]["Inner"]["UserEditable"] ? true : false);
              A.store.Bool(ptr + 5480 + 52 + 512 + 27, "DeviceEditable" in x["WiFi"]["EAP"]["Inner"] ? true : false);
              A.store.Bool(ptr + 5480 + 52 + 512 + 25, x["WiFi"]["EAP"]["Inner"]["DeviceEditable"] ? true : false);
            }

            if (typeof x["WiFi"]["EAP"]["Outer"] === "undefined") {
              A.store.Bool(ptr + 5480 + 52 + 544 + 28, false);
              A.store.Ref(ptr + 5480 + 52 + 544 + 0, undefined);
              A.store.Ref(ptr + 5480 + 52 + 544 + 4, undefined);
              A.store.Ref(ptr + 5480 + 52 + 544 + 8, undefined);
              A.store.Ref(ptr + 5480 + 52 + 544 + 12, undefined);
              A.store.Ref(ptr + 5480 + 52 + 544 + 16, undefined);
              A.store.Ref(ptr + 5480 + 52 + 544 + 20, undefined);
              A.store.Bool(ptr + 5480 + 52 + 544 + 26, false);
              A.store.Bool(ptr + 5480 + 52 + 544 + 24, false);
              A.store.Bool(ptr + 5480 + 52 + 544 + 27, false);
              A.store.Bool(ptr + 5480 + 52 + 544 + 25, false);
            } else {
              A.store.Bool(ptr + 5480 + 52 + 544 + 28, true);
              A.store.Ref(ptr + 5480 + 52 + 544 + 0, x["WiFi"]["EAP"]["Outer"]["Active"]);
              A.store.Ref(ptr + 5480 + 52 + 544 + 4, x["WiFi"]["EAP"]["Outer"]["Effective"]);
              A.store.Ref(ptr + 5480 + 52 + 544 + 8, x["WiFi"]["EAP"]["Outer"]["UserPolicy"]);
              A.store.Ref(ptr + 5480 + 52 + 544 + 12, x["WiFi"]["EAP"]["Outer"]["DevicePolicy"]);
              A.store.Ref(ptr + 5480 + 52 + 544 + 16, x["WiFi"]["EAP"]["Outer"]["UserSetting"]);
              A.store.Ref(ptr + 5480 + 52 + 544 + 20, x["WiFi"]["EAP"]["Outer"]["SharedSetting"]);
              A.store.Bool(ptr + 5480 + 52 + 544 + 26, "UserEditable" in x["WiFi"]["EAP"]["Outer"] ? true : false);
              A.store.Bool(ptr + 5480 + 52 + 544 + 24, x["WiFi"]["EAP"]["Outer"]["UserEditable"] ? true : false);
              A.store.Bool(ptr + 5480 + 52 + 544 + 27, "DeviceEditable" in x["WiFi"]["EAP"]["Outer"] ? true : false);
              A.store.Bool(ptr + 5480 + 52 + 544 + 25, x["WiFi"]["EAP"]["Outer"]["DeviceEditable"] ? true : false);
            }

            if (typeof x["WiFi"]["EAP"]["Password"] === "undefined") {
              A.store.Bool(ptr + 5480 + 52 + 576 + 28, false);
              A.store.Ref(ptr + 5480 + 52 + 576 + 0, undefined);
              A.store.Ref(ptr + 5480 + 52 + 576 + 4, undefined);
              A.store.Ref(ptr + 5480 + 52 + 576 + 8, undefined);
              A.store.Ref(ptr + 5480 + 52 + 576 + 12, undefined);
              A.store.Ref(ptr + 5480 + 52 + 576 + 16, undefined);
              A.store.Ref(ptr + 5480 + 52 + 576 + 20, undefined);
              A.store.Bool(ptr + 5480 + 52 + 576 + 26, false);
              A.store.Bool(ptr + 5480 + 52 + 576 + 24, false);
              A.store.Bool(ptr + 5480 + 52 + 576 + 27, false);
              A.store.Bool(ptr + 5480 + 52 + 576 + 25, false);
            } else {
              A.store.Bool(ptr + 5480 + 52 + 576 + 28, true);
              A.store.Ref(ptr + 5480 + 52 + 576 + 0, x["WiFi"]["EAP"]["Password"]["Active"]);
              A.store.Ref(ptr + 5480 + 52 + 576 + 4, x["WiFi"]["EAP"]["Password"]["Effective"]);
              A.store.Ref(ptr + 5480 + 52 + 576 + 8, x["WiFi"]["EAP"]["Password"]["UserPolicy"]);
              A.store.Ref(ptr + 5480 + 52 + 576 + 12, x["WiFi"]["EAP"]["Password"]["DevicePolicy"]);
              A.store.Ref(ptr + 5480 + 52 + 576 + 16, x["WiFi"]["EAP"]["Password"]["UserSetting"]);
              A.store.Ref(ptr + 5480 + 52 + 576 + 20, x["WiFi"]["EAP"]["Password"]["SharedSetting"]);
              A.store.Bool(ptr + 5480 + 52 + 576 + 26, "UserEditable" in x["WiFi"]["EAP"]["Password"] ? true : false);
              A.store.Bool(ptr + 5480 + 52 + 576 + 24, x["WiFi"]["EAP"]["Password"]["UserEditable"] ? true : false);
              A.store.Bool(ptr + 5480 + 52 + 576 + 27, "DeviceEditable" in x["WiFi"]["EAP"]["Password"] ? true : false);
              A.store.Bool(ptr + 5480 + 52 + 576 + 25, x["WiFi"]["EAP"]["Password"]["DeviceEditable"] ? true : false);
            }

            if (typeof x["WiFi"]["EAP"]["SaveCredentials"] === "undefined") {
              A.store.Bool(ptr + 5480 + 52 + 608 + 21, false);
              A.store.Bool(ptr + 5480 + 52 + 608 + 14, false);
              A.store.Bool(ptr + 5480 + 52 + 608 + 0, false);
              A.store.Ref(ptr + 5480 + 52 + 608 + 4, undefined);
              A.store.Bool(ptr + 5480 + 52 + 608 + 15, false);
              A.store.Bool(ptr + 5480 + 52 + 608 + 8, false);
              A.store.Bool(ptr + 5480 + 52 + 608 + 16, false);
              A.store.Bool(ptr + 5480 + 52 + 608 + 9, false);
              A.store.Bool(ptr + 5480 + 52 + 608 + 17, false);
              A.store.Bool(ptr + 5480 + 52 + 608 + 10, false);
              A.store.Bool(ptr + 5480 + 52 + 608 + 18, false);
              A.store.Bool(ptr + 5480 + 52 + 608 + 11, false);
              A.store.Bool(ptr + 5480 + 52 + 608 + 19, false);
              A.store.Bool(ptr + 5480 + 52 + 608 + 12, false);
              A.store.Bool(ptr + 5480 + 52 + 608 + 20, false);
              A.store.Bool(ptr + 5480 + 52 + 608 + 13, false);
            } else {
              A.store.Bool(ptr + 5480 + 52 + 608 + 21, true);
              A.store.Bool(ptr + 5480 + 52 + 608 + 14, "Active" in x["WiFi"]["EAP"]["SaveCredentials"] ? true : false);
              A.store.Bool(ptr + 5480 + 52 + 608 + 0, x["WiFi"]["EAP"]["SaveCredentials"]["Active"] ? true : false);
              A.store.Ref(ptr + 5480 + 52 + 608 + 4, x["WiFi"]["EAP"]["SaveCredentials"]["Effective"]);
              A.store.Bool(
                ptr + 5480 + 52 + 608 + 15,
                "UserPolicy" in x["WiFi"]["EAP"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(ptr + 5480 + 52 + 608 + 8, x["WiFi"]["EAP"]["SaveCredentials"]["UserPolicy"] ? true : false);
              A.store.Bool(
                ptr + 5480 + 52 + 608 + 16,
                "DevicePolicy" in x["WiFi"]["EAP"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 608 + 9,
                x["WiFi"]["EAP"]["SaveCredentials"]["DevicePolicy"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 608 + 17,
                "UserSetting" in x["WiFi"]["EAP"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 608 + 10,
                x["WiFi"]["EAP"]["SaveCredentials"]["UserSetting"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 608 + 18,
                "SharedSetting" in x["WiFi"]["EAP"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 608 + 11,
                x["WiFi"]["EAP"]["SaveCredentials"]["SharedSetting"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 608 + 19,
                "UserEditable" in x["WiFi"]["EAP"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 608 + 12,
                x["WiFi"]["EAP"]["SaveCredentials"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 608 + 20,
                "DeviceEditable" in x["WiFi"]["EAP"]["SaveCredentials"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 608 + 13,
                x["WiFi"]["EAP"]["SaveCredentials"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["WiFi"]["EAP"]["ServerCAPEMs"] === "undefined") {
              A.store.Bool(ptr + 5480 + 52 + 632 + 28, false);
              A.store.Ref(ptr + 5480 + 52 + 632 + 0, undefined);
              A.store.Ref(ptr + 5480 + 52 + 632 + 4, undefined);
              A.store.Ref(ptr + 5480 + 52 + 632 + 8, undefined);
              A.store.Ref(ptr + 5480 + 52 + 632 + 12, undefined);
              A.store.Ref(ptr + 5480 + 52 + 632 + 16, undefined);
              A.store.Ref(ptr + 5480 + 52 + 632 + 20, undefined);
              A.store.Bool(ptr + 5480 + 52 + 632 + 26, false);
              A.store.Bool(ptr + 5480 + 52 + 632 + 24, false);
              A.store.Bool(ptr + 5480 + 52 + 632 + 27, false);
              A.store.Bool(ptr + 5480 + 52 + 632 + 25, false);
            } else {
              A.store.Bool(ptr + 5480 + 52 + 632 + 28, true);
              A.store.Ref(ptr + 5480 + 52 + 632 + 0, x["WiFi"]["EAP"]["ServerCAPEMs"]["Active"]);
              A.store.Ref(ptr + 5480 + 52 + 632 + 4, x["WiFi"]["EAP"]["ServerCAPEMs"]["Effective"]);
              A.store.Ref(ptr + 5480 + 52 + 632 + 8, x["WiFi"]["EAP"]["ServerCAPEMs"]["UserPolicy"]);
              A.store.Ref(ptr + 5480 + 52 + 632 + 12, x["WiFi"]["EAP"]["ServerCAPEMs"]["DevicePolicy"]);
              A.store.Ref(ptr + 5480 + 52 + 632 + 16, x["WiFi"]["EAP"]["ServerCAPEMs"]["UserSetting"]);
              A.store.Ref(ptr + 5480 + 52 + 632 + 20, x["WiFi"]["EAP"]["ServerCAPEMs"]["SharedSetting"]);
              A.store.Bool(
                ptr + 5480 + 52 + 632 + 26,
                "UserEditable" in x["WiFi"]["EAP"]["ServerCAPEMs"] ? true : false
              );
              A.store.Bool(ptr + 5480 + 52 + 632 + 24, x["WiFi"]["EAP"]["ServerCAPEMs"]["UserEditable"] ? true : false);
              A.store.Bool(
                ptr + 5480 + 52 + 632 + 27,
                "DeviceEditable" in x["WiFi"]["EAP"]["ServerCAPEMs"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 632 + 25,
                x["WiFi"]["EAP"]["ServerCAPEMs"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["WiFi"]["EAP"]["ServerCARefs"] === "undefined") {
              A.store.Bool(ptr + 5480 + 52 + 664 + 28, false);
              A.store.Ref(ptr + 5480 + 52 + 664 + 0, undefined);
              A.store.Ref(ptr + 5480 + 52 + 664 + 4, undefined);
              A.store.Ref(ptr + 5480 + 52 + 664 + 8, undefined);
              A.store.Ref(ptr + 5480 + 52 + 664 + 12, undefined);
              A.store.Ref(ptr + 5480 + 52 + 664 + 16, undefined);
              A.store.Ref(ptr + 5480 + 52 + 664 + 20, undefined);
              A.store.Bool(ptr + 5480 + 52 + 664 + 26, false);
              A.store.Bool(ptr + 5480 + 52 + 664 + 24, false);
              A.store.Bool(ptr + 5480 + 52 + 664 + 27, false);
              A.store.Bool(ptr + 5480 + 52 + 664 + 25, false);
            } else {
              A.store.Bool(ptr + 5480 + 52 + 664 + 28, true);
              A.store.Ref(ptr + 5480 + 52 + 664 + 0, x["WiFi"]["EAP"]["ServerCARefs"]["Active"]);
              A.store.Ref(ptr + 5480 + 52 + 664 + 4, x["WiFi"]["EAP"]["ServerCARefs"]["Effective"]);
              A.store.Ref(ptr + 5480 + 52 + 664 + 8, x["WiFi"]["EAP"]["ServerCARefs"]["UserPolicy"]);
              A.store.Ref(ptr + 5480 + 52 + 664 + 12, x["WiFi"]["EAP"]["ServerCARefs"]["DevicePolicy"]);
              A.store.Ref(ptr + 5480 + 52 + 664 + 16, x["WiFi"]["EAP"]["ServerCARefs"]["UserSetting"]);
              A.store.Ref(ptr + 5480 + 52 + 664 + 20, x["WiFi"]["EAP"]["ServerCARefs"]["SharedSetting"]);
              A.store.Bool(
                ptr + 5480 + 52 + 664 + 26,
                "UserEditable" in x["WiFi"]["EAP"]["ServerCARefs"] ? true : false
              );
              A.store.Bool(ptr + 5480 + 52 + 664 + 24, x["WiFi"]["EAP"]["ServerCARefs"]["UserEditable"] ? true : false);
              A.store.Bool(
                ptr + 5480 + 52 + 664 + 27,
                "DeviceEditable" in x["WiFi"]["EAP"]["ServerCARefs"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 664 + 25,
                x["WiFi"]["EAP"]["ServerCARefs"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["WiFi"]["EAP"]["SubjectMatch"] === "undefined") {
              A.store.Bool(ptr + 5480 + 52 + 696 + 28, false);
              A.store.Ref(ptr + 5480 + 52 + 696 + 0, undefined);
              A.store.Ref(ptr + 5480 + 52 + 696 + 4, undefined);
              A.store.Ref(ptr + 5480 + 52 + 696 + 8, undefined);
              A.store.Ref(ptr + 5480 + 52 + 696 + 12, undefined);
              A.store.Ref(ptr + 5480 + 52 + 696 + 16, undefined);
              A.store.Ref(ptr + 5480 + 52 + 696 + 20, undefined);
              A.store.Bool(ptr + 5480 + 52 + 696 + 26, false);
              A.store.Bool(ptr + 5480 + 52 + 696 + 24, false);
              A.store.Bool(ptr + 5480 + 52 + 696 + 27, false);
              A.store.Bool(ptr + 5480 + 52 + 696 + 25, false);
            } else {
              A.store.Bool(ptr + 5480 + 52 + 696 + 28, true);
              A.store.Ref(ptr + 5480 + 52 + 696 + 0, x["WiFi"]["EAP"]["SubjectMatch"]["Active"]);
              A.store.Ref(ptr + 5480 + 52 + 696 + 4, x["WiFi"]["EAP"]["SubjectMatch"]["Effective"]);
              A.store.Ref(ptr + 5480 + 52 + 696 + 8, x["WiFi"]["EAP"]["SubjectMatch"]["UserPolicy"]);
              A.store.Ref(ptr + 5480 + 52 + 696 + 12, x["WiFi"]["EAP"]["SubjectMatch"]["DevicePolicy"]);
              A.store.Ref(ptr + 5480 + 52 + 696 + 16, x["WiFi"]["EAP"]["SubjectMatch"]["UserSetting"]);
              A.store.Ref(ptr + 5480 + 52 + 696 + 20, x["WiFi"]["EAP"]["SubjectMatch"]["SharedSetting"]);
              A.store.Bool(
                ptr + 5480 + 52 + 696 + 26,
                "UserEditable" in x["WiFi"]["EAP"]["SubjectMatch"] ? true : false
              );
              A.store.Bool(ptr + 5480 + 52 + 696 + 24, x["WiFi"]["EAP"]["SubjectMatch"]["UserEditable"] ? true : false);
              A.store.Bool(
                ptr + 5480 + 52 + 696 + 27,
                "DeviceEditable" in x["WiFi"]["EAP"]["SubjectMatch"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 696 + 25,
                x["WiFi"]["EAP"]["SubjectMatch"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["WiFi"]["EAP"]["TLSVersionMax"] === "undefined") {
              A.store.Bool(ptr + 5480 + 52 + 728 + 28, false);
              A.store.Ref(ptr + 5480 + 52 + 728 + 0, undefined);
              A.store.Ref(ptr + 5480 + 52 + 728 + 4, undefined);
              A.store.Ref(ptr + 5480 + 52 + 728 + 8, undefined);
              A.store.Ref(ptr + 5480 + 52 + 728 + 12, undefined);
              A.store.Ref(ptr + 5480 + 52 + 728 + 16, undefined);
              A.store.Ref(ptr + 5480 + 52 + 728 + 20, undefined);
              A.store.Bool(ptr + 5480 + 52 + 728 + 26, false);
              A.store.Bool(ptr + 5480 + 52 + 728 + 24, false);
              A.store.Bool(ptr + 5480 + 52 + 728 + 27, false);
              A.store.Bool(ptr + 5480 + 52 + 728 + 25, false);
            } else {
              A.store.Bool(ptr + 5480 + 52 + 728 + 28, true);
              A.store.Ref(ptr + 5480 + 52 + 728 + 0, x["WiFi"]["EAP"]["TLSVersionMax"]["Active"]);
              A.store.Ref(ptr + 5480 + 52 + 728 + 4, x["WiFi"]["EAP"]["TLSVersionMax"]["Effective"]);
              A.store.Ref(ptr + 5480 + 52 + 728 + 8, x["WiFi"]["EAP"]["TLSVersionMax"]["UserPolicy"]);
              A.store.Ref(ptr + 5480 + 52 + 728 + 12, x["WiFi"]["EAP"]["TLSVersionMax"]["DevicePolicy"]);
              A.store.Ref(ptr + 5480 + 52 + 728 + 16, x["WiFi"]["EAP"]["TLSVersionMax"]["UserSetting"]);
              A.store.Ref(ptr + 5480 + 52 + 728 + 20, x["WiFi"]["EAP"]["TLSVersionMax"]["SharedSetting"]);
              A.store.Bool(
                ptr + 5480 + 52 + 728 + 26,
                "UserEditable" in x["WiFi"]["EAP"]["TLSVersionMax"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 728 + 24,
                x["WiFi"]["EAP"]["TLSVersionMax"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 728 + 27,
                "DeviceEditable" in x["WiFi"]["EAP"]["TLSVersionMax"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 728 + 25,
                x["WiFi"]["EAP"]["TLSVersionMax"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["WiFi"]["EAP"]["UseProactiveKeyCaching"] === "undefined") {
              A.store.Bool(ptr + 5480 + 52 + 760 + 21, false);
              A.store.Bool(ptr + 5480 + 52 + 760 + 14, false);
              A.store.Bool(ptr + 5480 + 52 + 760 + 0, false);
              A.store.Ref(ptr + 5480 + 52 + 760 + 4, undefined);
              A.store.Bool(ptr + 5480 + 52 + 760 + 15, false);
              A.store.Bool(ptr + 5480 + 52 + 760 + 8, false);
              A.store.Bool(ptr + 5480 + 52 + 760 + 16, false);
              A.store.Bool(ptr + 5480 + 52 + 760 + 9, false);
              A.store.Bool(ptr + 5480 + 52 + 760 + 17, false);
              A.store.Bool(ptr + 5480 + 52 + 760 + 10, false);
              A.store.Bool(ptr + 5480 + 52 + 760 + 18, false);
              A.store.Bool(ptr + 5480 + 52 + 760 + 11, false);
              A.store.Bool(ptr + 5480 + 52 + 760 + 19, false);
              A.store.Bool(ptr + 5480 + 52 + 760 + 12, false);
              A.store.Bool(ptr + 5480 + 52 + 760 + 20, false);
              A.store.Bool(ptr + 5480 + 52 + 760 + 13, false);
            } else {
              A.store.Bool(ptr + 5480 + 52 + 760 + 21, true);
              A.store.Bool(
                ptr + 5480 + 52 + 760 + 14,
                "Active" in x["WiFi"]["EAP"]["UseProactiveKeyCaching"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 760 + 0,
                x["WiFi"]["EAP"]["UseProactiveKeyCaching"]["Active"] ? true : false
              );
              A.store.Ref(ptr + 5480 + 52 + 760 + 4, x["WiFi"]["EAP"]["UseProactiveKeyCaching"]["Effective"]);
              A.store.Bool(
                ptr + 5480 + 52 + 760 + 15,
                "UserPolicy" in x["WiFi"]["EAP"]["UseProactiveKeyCaching"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 760 + 8,
                x["WiFi"]["EAP"]["UseProactiveKeyCaching"]["UserPolicy"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 760 + 16,
                "DevicePolicy" in x["WiFi"]["EAP"]["UseProactiveKeyCaching"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 760 + 9,
                x["WiFi"]["EAP"]["UseProactiveKeyCaching"]["DevicePolicy"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 760 + 17,
                "UserSetting" in x["WiFi"]["EAP"]["UseProactiveKeyCaching"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 760 + 10,
                x["WiFi"]["EAP"]["UseProactiveKeyCaching"]["UserSetting"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 760 + 18,
                "SharedSetting" in x["WiFi"]["EAP"]["UseProactiveKeyCaching"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 760 + 11,
                x["WiFi"]["EAP"]["UseProactiveKeyCaching"]["SharedSetting"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 760 + 19,
                "UserEditable" in x["WiFi"]["EAP"]["UseProactiveKeyCaching"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 760 + 12,
                x["WiFi"]["EAP"]["UseProactiveKeyCaching"]["UserEditable"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 760 + 20,
                "DeviceEditable" in x["WiFi"]["EAP"]["UseProactiveKeyCaching"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 760 + 13,
                x["WiFi"]["EAP"]["UseProactiveKeyCaching"]["DeviceEditable"] ? true : false
              );
            }

            if (typeof x["WiFi"]["EAP"]["UseSystemCAs"] === "undefined") {
              A.store.Bool(ptr + 5480 + 52 + 784 + 21, false);
              A.store.Bool(ptr + 5480 + 52 + 784 + 14, false);
              A.store.Bool(ptr + 5480 + 52 + 784 + 0, false);
              A.store.Ref(ptr + 5480 + 52 + 784 + 4, undefined);
              A.store.Bool(ptr + 5480 + 52 + 784 + 15, false);
              A.store.Bool(ptr + 5480 + 52 + 784 + 8, false);
              A.store.Bool(ptr + 5480 + 52 + 784 + 16, false);
              A.store.Bool(ptr + 5480 + 52 + 784 + 9, false);
              A.store.Bool(ptr + 5480 + 52 + 784 + 17, false);
              A.store.Bool(ptr + 5480 + 52 + 784 + 10, false);
              A.store.Bool(ptr + 5480 + 52 + 784 + 18, false);
              A.store.Bool(ptr + 5480 + 52 + 784 + 11, false);
              A.store.Bool(ptr + 5480 + 52 + 784 + 19, false);
              A.store.Bool(ptr + 5480 + 52 + 784 + 12, false);
              A.store.Bool(ptr + 5480 + 52 + 784 + 20, false);
              A.store.Bool(ptr + 5480 + 52 + 784 + 13, false);
            } else {
              A.store.Bool(ptr + 5480 + 52 + 784 + 21, true);
              A.store.Bool(ptr + 5480 + 52 + 784 + 14, "Active" in x["WiFi"]["EAP"]["UseSystemCAs"] ? true : false);
              A.store.Bool(ptr + 5480 + 52 + 784 + 0, x["WiFi"]["EAP"]["UseSystemCAs"]["Active"] ? true : false);
              A.store.Ref(ptr + 5480 + 52 + 784 + 4, x["WiFi"]["EAP"]["UseSystemCAs"]["Effective"]);
              A.store.Bool(ptr + 5480 + 52 + 784 + 15, "UserPolicy" in x["WiFi"]["EAP"]["UseSystemCAs"] ? true : false);
              A.store.Bool(ptr + 5480 + 52 + 784 + 8, x["WiFi"]["EAP"]["UseSystemCAs"]["UserPolicy"] ? true : false);
              A.store.Bool(
                ptr + 5480 + 52 + 784 + 16,
                "DevicePolicy" in x["WiFi"]["EAP"]["UseSystemCAs"] ? true : false
              );
              A.store.Bool(ptr + 5480 + 52 + 784 + 9, x["WiFi"]["EAP"]["UseSystemCAs"]["DevicePolicy"] ? true : false);
              A.store.Bool(
                ptr + 5480 + 52 + 784 + 17,
                "UserSetting" in x["WiFi"]["EAP"]["UseSystemCAs"] ? true : false
              );
              A.store.Bool(ptr + 5480 + 52 + 784 + 10, x["WiFi"]["EAP"]["UseSystemCAs"]["UserSetting"] ? true : false);
              A.store.Bool(
                ptr + 5480 + 52 + 784 + 18,
                "SharedSetting" in x["WiFi"]["EAP"]["UseSystemCAs"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 784 + 11,
                x["WiFi"]["EAP"]["UseSystemCAs"]["SharedSetting"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 784 + 19,
                "UserEditable" in x["WiFi"]["EAP"]["UseSystemCAs"] ? true : false
              );
              A.store.Bool(ptr + 5480 + 52 + 784 + 12, x["WiFi"]["EAP"]["UseSystemCAs"]["UserEditable"] ? true : false);
              A.store.Bool(
                ptr + 5480 + 52 + 784 + 20,
                "DeviceEditable" in x["WiFi"]["EAP"]["UseSystemCAs"] ? true : false
              );
              A.store.Bool(
                ptr + 5480 + 52 + 784 + 13,
                x["WiFi"]["EAP"]["UseSystemCAs"]["DeviceEditable"] ? true : false
              );
            }
          }
          A.store.Bool(ptr + 5480 + 1024, "Frequency" in x["WiFi"] ? true : false);
          A.store.Int32(
            ptr + 5480 + 860,
            x["WiFi"]["Frequency"] === undefined ? 0 : (x["WiFi"]["Frequency"] as number)
          );
          A.store.Ref(ptr + 5480 + 864, x["WiFi"]["FrequencyList"]);

          if (typeof x["WiFi"]["HexSSID"] === "undefined") {
            A.store.Bool(ptr + 5480 + 868 + 28, false);
            A.store.Ref(ptr + 5480 + 868 + 0, undefined);
            A.store.Ref(ptr + 5480 + 868 + 4, undefined);
            A.store.Ref(ptr + 5480 + 868 + 8, undefined);
            A.store.Ref(ptr + 5480 + 868 + 12, undefined);
            A.store.Ref(ptr + 5480 + 868 + 16, undefined);
            A.store.Ref(ptr + 5480 + 868 + 20, undefined);
            A.store.Bool(ptr + 5480 + 868 + 26, false);
            A.store.Bool(ptr + 5480 + 868 + 24, false);
            A.store.Bool(ptr + 5480 + 868 + 27, false);
            A.store.Bool(ptr + 5480 + 868 + 25, false);
          } else {
            A.store.Bool(ptr + 5480 + 868 + 28, true);
            A.store.Ref(ptr + 5480 + 868 + 0, x["WiFi"]["HexSSID"]["Active"]);
            A.store.Ref(ptr + 5480 + 868 + 4, x["WiFi"]["HexSSID"]["Effective"]);
            A.store.Ref(ptr + 5480 + 868 + 8, x["WiFi"]["HexSSID"]["UserPolicy"]);
            A.store.Ref(ptr + 5480 + 868 + 12, x["WiFi"]["HexSSID"]["DevicePolicy"]);
            A.store.Ref(ptr + 5480 + 868 + 16, x["WiFi"]["HexSSID"]["UserSetting"]);
            A.store.Ref(ptr + 5480 + 868 + 20, x["WiFi"]["HexSSID"]["SharedSetting"]);
            A.store.Bool(ptr + 5480 + 868 + 26, "UserEditable" in x["WiFi"]["HexSSID"] ? true : false);
            A.store.Bool(ptr + 5480 + 868 + 24, x["WiFi"]["HexSSID"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 5480 + 868 + 27, "DeviceEditable" in x["WiFi"]["HexSSID"] ? true : false);
            A.store.Bool(ptr + 5480 + 868 + 25, x["WiFi"]["HexSSID"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["WiFi"]["HiddenSSID"] === "undefined") {
            A.store.Bool(ptr + 5480 + 900 + 21, false);
            A.store.Bool(ptr + 5480 + 900 + 14, false);
            A.store.Bool(ptr + 5480 + 900 + 0, false);
            A.store.Ref(ptr + 5480 + 900 + 4, undefined);
            A.store.Bool(ptr + 5480 + 900 + 15, false);
            A.store.Bool(ptr + 5480 + 900 + 8, false);
            A.store.Bool(ptr + 5480 + 900 + 16, false);
            A.store.Bool(ptr + 5480 + 900 + 9, false);
            A.store.Bool(ptr + 5480 + 900 + 17, false);
            A.store.Bool(ptr + 5480 + 900 + 10, false);
            A.store.Bool(ptr + 5480 + 900 + 18, false);
            A.store.Bool(ptr + 5480 + 900 + 11, false);
            A.store.Bool(ptr + 5480 + 900 + 19, false);
            A.store.Bool(ptr + 5480 + 900 + 12, false);
            A.store.Bool(ptr + 5480 + 900 + 20, false);
            A.store.Bool(ptr + 5480 + 900 + 13, false);
          } else {
            A.store.Bool(ptr + 5480 + 900 + 21, true);
            A.store.Bool(ptr + 5480 + 900 + 14, "Active" in x["WiFi"]["HiddenSSID"] ? true : false);
            A.store.Bool(ptr + 5480 + 900 + 0, x["WiFi"]["HiddenSSID"]["Active"] ? true : false);
            A.store.Ref(ptr + 5480 + 900 + 4, x["WiFi"]["HiddenSSID"]["Effective"]);
            A.store.Bool(ptr + 5480 + 900 + 15, "UserPolicy" in x["WiFi"]["HiddenSSID"] ? true : false);
            A.store.Bool(ptr + 5480 + 900 + 8, x["WiFi"]["HiddenSSID"]["UserPolicy"] ? true : false);
            A.store.Bool(ptr + 5480 + 900 + 16, "DevicePolicy" in x["WiFi"]["HiddenSSID"] ? true : false);
            A.store.Bool(ptr + 5480 + 900 + 9, x["WiFi"]["HiddenSSID"]["DevicePolicy"] ? true : false);
            A.store.Bool(ptr + 5480 + 900 + 17, "UserSetting" in x["WiFi"]["HiddenSSID"] ? true : false);
            A.store.Bool(ptr + 5480 + 900 + 10, x["WiFi"]["HiddenSSID"]["UserSetting"] ? true : false);
            A.store.Bool(ptr + 5480 + 900 + 18, "SharedSetting" in x["WiFi"]["HiddenSSID"] ? true : false);
            A.store.Bool(ptr + 5480 + 900 + 11, x["WiFi"]["HiddenSSID"]["SharedSetting"] ? true : false);
            A.store.Bool(ptr + 5480 + 900 + 19, "UserEditable" in x["WiFi"]["HiddenSSID"] ? true : false);
            A.store.Bool(ptr + 5480 + 900 + 12, x["WiFi"]["HiddenSSID"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 5480 + 900 + 20, "DeviceEditable" in x["WiFi"]["HiddenSSID"] ? true : false);
            A.store.Bool(ptr + 5480 + 900 + 13, x["WiFi"]["HiddenSSID"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["WiFi"]["Passphrase"] === "undefined") {
            A.store.Bool(ptr + 5480 + 924 + 28, false);
            A.store.Ref(ptr + 5480 + 924 + 0, undefined);
            A.store.Ref(ptr + 5480 + 924 + 4, undefined);
            A.store.Ref(ptr + 5480 + 924 + 8, undefined);
            A.store.Ref(ptr + 5480 + 924 + 12, undefined);
            A.store.Ref(ptr + 5480 + 924 + 16, undefined);
            A.store.Ref(ptr + 5480 + 924 + 20, undefined);
            A.store.Bool(ptr + 5480 + 924 + 26, false);
            A.store.Bool(ptr + 5480 + 924 + 24, false);
            A.store.Bool(ptr + 5480 + 924 + 27, false);
            A.store.Bool(ptr + 5480 + 924 + 25, false);
          } else {
            A.store.Bool(ptr + 5480 + 924 + 28, true);
            A.store.Ref(ptr + 5480 + 924 + 0, x["WiFi"]["Passphrase"]["Active"]);
            A.store.Ref(ptr + 5480 + 924 + 4, x["WiFi"]["Passphrase"]["Effective"]);
            A.store.Ref(ptr + 5480 + 924 + 8, x["WiFi"]["Passphrase"]["UserPolicy"]);
            A.store.Ref(ptr + 5480 + 924 + 12, x["WiFi"]["Passphrase"]["DevicePolicy"]);
            A.store.Ref(ptr + 5480 + 924 + 16, x["WiFi"]["Passphrase"]["UserSetting"]);
            A.store.Ref(ptr + 5480 + 924 + 20, x["WiFi"]["Passphrase"]["SharedSetting"]);
            A.store.Bool(ptr + 5480 + 924 + 26, "UserEditable" in x["WiFi"]["Passphrase"] ? true : false);
            A.store.Bool(ptr + 5480 + 924 + 24, x["WiFi"]["Passphrase"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 5480 + 924 + 27, "DeviceEditable" in x["WiFi"]["Passphrase"] ? true : false);
            A.store.Bool(ptr + 5480 + 924 + 25, x["WiFi"]["Passphrase"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["WiFi"]["SSID"] === "undefined") {
            A.store.Bool(ptr + 5480 + 956 + 28, false);
            A.store.Ref(ptr + 5480 + 956 + 0, undefined);
            A.store.Ref(ptr + 5480 + 956 + 4, undefined);
            A.store.Ref(ptr + 5480 + 956 + 8, undefined);
            A.store.Ref(ptr + 5480 + 956 + 12, undefined);
            A.store.Ref(ptr + 5480 + 956 + 16, undefined);
            A.store.Ref(ptr + 5480 + 956 + 20, undefined);
            A.store.Bool(ptr + 5480 + 956 + 26, false);
            A.store.Bool(ptr + 5480 + 956 + 24, false);
            A.store.Bool(ptr + 5480 + 956 + 27, false);
            A.store.Bool(ptr + 5480 + 956 + 25, false);
          } else {
            A.store.Bool(ptr + 5480 + 956 + 28, true);
            A.store.Ref(ptr + 5480 + 956 + 0, x["WiFi"]["SSID"]["Active"]);
            A.store.Ref(ptr + 5480 + 956 + 4, x["WiFi"]["SSID"]["Effective"]);
            A.store.Ref(ptr + 5480 + 956 + 8, x["WiFi"]["SSID"]["UserPolicy"]);
            A.store.Ref(ptr + 5480 + 956 + 12, x["WiFi"]["SSID"]["DevicePolicy"]);
            A.store.Ref(ptr + 5480 + 956 + 16, x["WiFi"]["SSID"]["UserSetting"]);
            A.store.Ref(ptr + 5480 + 956 + 20, x["WiFi"]["SSID"]["SharedSetting"]);
            A.store.Bool(ptr + 5480 + 956 + 26, "UserEditable" in x["WiFi"]["SSID"] ? true : false);
            A.store.Bool(ptr + 5480 + 956 + 24, x["WiFi"]["SSID"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 5480 + 956 + 27, "DeviceEditable" in x["WiFi"]["SSID"] ? true : false);
            A.store.Bool(ptr + 5480 + 956 + 25, x["WiFi"]["SSID"]["DeviceEditable"] ? true : false);
          }

          if (typeof x["WiFi"]["Security"] === "undefined") {
            A.store.Bool(ptr + 5480 + 988 + 28, false);
            A.store.Ref(ptr + 5480 + 988 + 0, undefined);
            A.store.Ref(ptr + 5480 + 988 + 4, undefined);
            A.store.Ref(ptr + 5480 + 988 + 8, undefined);
            A.store.Ref(ptr + 5480 + 988 + 12, undefined);
            A.store.Ref(ptr + 5480 + 988 + 16, undefined);
            A.store.Ref(ptr + 5480 + 988 + 20, undefined);
            A.store.Bool(ptr + 5480 + 988 + 26, false);
            A.store.Bool(ptr + 5480 + 988 + 24, false);
            A.store.Bool(ptr + 5480 + 988 + 27, false);
            A.store.Bool(ptr + 5480 + 988 + 25, false);
          } else {
            A.store.Bool(ptr + 5480 + 988 + 28, true);
            A.store.Ref(ptr + 5480 + 988 + 0, x["WiFi"]["Security"]["Active"]);
            A.store.Ref(ptr + 5480 + 988 + 4, x["WiFi"]["Security"]["Effective"]);
            A.store.Ref(ptr + 5480 + 988 + 8, x["WiFi"]["Security"]["UserPolicy"]);
            A.store.Ref(ptr + 5480 + 988 + 12, x["WiFi"]["Security"]["DevicePolicy"]);
            A.store.Ref(ptr + 5480 + 988 + 16, x["WiFi"]["Security"]["UserSetting"]);
            A.store.Ref(ptr + 5480 + 988 + 20, x["WiFi"]["Security"]["SharedSetting"]);
            A.store.Bool(ptr + 5480 + 988 + 26, "UserEditable" in x["WiFi"]["Security"] ? true : false);
            A.store.Bool(ptr + 5480 + 988 + 24, x["WiFi"]["Security"]["UserEditable"] ? true : false);
            A.store.Bool(ptr + 5480 + 988 + 27, "DeviceEditable" in x["WiFi"]["Security"] ? true : false);
            A.store.Bool(ptr + 5480 + 988 + 25, x["WiFi"]["Security"]["DeviceEditable"] ? true : false);
          }
          A.store.Bool(ptr + 5480 + 1025, "SignalStrength" in x["WiFi"] ? true : false);
          A.store.Int32(
            ptr + 5480 + 1020,
            x["WiFi"]["SignalStrength"] === undefined ? 0 : (x["WiFi"]["SignalStrength"] as number)
          );
        }
      }
    },
    "load_ManagedProperties": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      if (A.load.Bool(ptr + 0 + 458)) {
        x["Cellular"] = {};
        if (A.load.Bool(ptr + 0 + 0 + 21)) {
          x["Cellular"]["AutoConnect"] = {};
          if (A.load.Bool(ptr + 0 + 0 + 14)) {
            x["Cellular"]["AutoConnect"]["Active"] = A.load.Bool(ptr + 0 + 0 + 0);
          } else {
            delete x["Cellular"]["AutoConnect"]["Active"];
          }
          x["Cellular"]["AutoConnect"]["Effective"] = A.load.Ref(ptr + 0 + 0 + 4, undefined);
          if (A.load.Bool(ptr + 0 + 0 + 15)) {
            x["Cellular"]["AutoConnect"]["UserPolicy"] = A.load.Bool(ptr + 0 + 0 + 8);
          } else {
            delete x["Cellular"]["AutoConnect"]["UserPolicy"];
          }
          if (A.load.Bool(ptr + 0 + 0 + 16)) {
            x["Cellular"]["AutoConnect"]["DevicePolicy"] = A.load.Bool(ptr + 0 + 0 + 9);
          } else {
            delete x["Cellular"]["AutoConnect"]["DevicePolicy"];
          }
          if (A.load.Bool(ptr + 0 + 0 + 17)) {
            x["Cellular"]["AutoConnect"]["UserSetting"] = A.load.Bool(ptr + 0 + 0 + 10);
          } else {
            delete x["Cellular"]["AutoConnect"]["UserSetting"];
          }
          if (A.load.Bool(ptr + 0 + 0 + 18)) {
            x["Cellular"]["AutoConnect"]["SharedSetting"] = A.load.Bool(ptr + 0 + 0 + 11);
          } else {
            delete x["Cellular"]["AutoConnect"]["SharedSetting"];
          }
          if (A.load.Bool(ptr + 0 + 0 + 19)) {
            x["Cellular"]["AutoConnect"]["UserEditable"] = A.load.Bool(ptr + 0 + 0 + 12);
          } else {
            delete x["Cellular"]["AutoConnect"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 0 + 0 + 20)) {
            x["Cellular"]["AutoConnect"]["DeviceEditable"] = A.load.Bool(ptr + 0 + 0 + 13);
          } else {
            delete x["Cellular"]["AutoConnect"]["DeviceEditable"];
          }
        } else {
          delete x["Cellular"]["AutoConnect"];
        }
        if (A.load.Bool(ptr + 0 + 24 + 221)) {
          x["Cellular"]["APN"] = {};
          if (A.load.Bool(ptr + 0 + 24 + 0 + 28)) {
            x["Cellular"]["APN"]["AccessPointName"] = {};
            x["Cellular"]["APN"]["AccessPointName"]["Active"] = A.load.Ref(ptr + 0 + 24 + 0 + 0, undefined);
            x["Cellular"]["APN"]["AccessPointName"]["Effective"] = A.load.Ref(ptr + 0 + 24 + 0 + 4, undefined);
            x["Cellular"]["APN"]["AccessPointName"]["UserPolicy"] = A.load.Ref(ptr + 0 + 24 + 0 + 8, undefined);
            x["Cellular"]["APN"]["AccessPointName"]["DevicePolicy"] = A.load.Ref(ptr + 0 + 24 + 0 + 12, undefined);
            x["Cellular"]["APN"]["AccessPointName"]["UserSetting"] = A.load.Ref(ptr + 0 + 24 + 0 + 16, undefined);
            x["Cellular"]["APN"]["AccessPointName"]["SharedSetting"] = A.load.Ref(ptr + 0 + 24 + 0 + 20, undefined);
            if (A.load.Bool(ptr + 0 + 24 + 0 + 26)) {
              x["Cellular"]["APN"]["AccessPointName"]["UserEditable"] = A.load.Bool(ptr + 0 + 24 + 0 + 24);
            } else {
              delete x["Cellular"]["APN"]["AccessPointName"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 0 + 24 + 0 + 27)) {
              x["Cellular"]["APN"]["AccessPointName"]["DeviceEditable"] = A.load.Bool(ptr + 0 + 24 + 0 + 25);
            } else {
              delete x["Cellular"]["APN"]["AccessPointName"]["DeviceEditable"];
            }
          } else {
            delete x["Cellular"]["APN"]["AccessPointName"];
          }
          if (A.load.Bool(ptr + 0 + 24 + 32 + 28)) {
            x["Cellular"]["APN"]["Authentication"] = {};
            x["Cellular"]["APN"]["Authentication"]["Active"] = A.load.Ref(ptr + 0 + 24 + 32 + 0, undefined);
            x["Cellular"]["APN"]["Authentication"]["Effective"] = A.load.Ref(ptr + 0 + 24 + 32 + 4, undefined);
            x["Cellular"]["APN"]["Authentication"]["UserPolicy"] = A.load.Ref(ptr + 0 + 24 + 32 + 8, undefined);
            x["Cellular"]["APN"]["Authentication"]["DevicePolicy"] = A.load.Ref(ptr + 0 + 24 + 32 + 12, undefined);
            x["Cellular"]["APN"]["Authentication"]["UserSetting"] = A.load.Ref(ptr + 0 + 24 + 32 + 16, undefined);
            x["Cellular"]["APN"]["Authentication"]["SharedSetting"] = A.load.Ref(ptr + 0 + 24 + 32 + 20, undefined);
            if (A.load.Bool(ptr + 0 + 24 + 32 + 26)) {
              x["Cellular"]["APN"]["Authentication"]["UserEditable"] = A.load.Bool(ptr + 0 + 24 + 32 + 24);
            } else {
              delete x["Cellular"]["APN"]["Authentication"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 0 + 24 + 32 + 27)) {
              x["Cellular"]["APN"]["Authentication"]["DeviceEditable"] = A.load.Bool(ptr + 0 + 24 + 32 + 25);
            } else {
              delete x["Cellular"]["APN"]["Authentication"]["DeviceEditable"];
            }
          } else {
            delete x["Cellular"]["APN"]["Authentication"];
          }
          if (A.load.Bool(ptr + 0 + 24 + 64 + 28)) {
            x["Cellular"]["APN"]["Language"] = {};
            x["Cellular"]["APN"]["Language"]["Active"] = A.load.Ref(ptr + 0 + 24 + 64 + 0, undefined);
            x["Cellular"]["APN"]["Language"]["Effective"] = A.load.Ref(ptr + 0 + 24 + 64 + 4, undefined);
            x["Cellular"]["APN"]["Language"]["UserPolicy"] = A.load.Ref(ptr + 0 + 24 + 64 + 8, undefined);
            x["Cellular"]["APN"]["Language"]["DevicePolicy"] = A.load.Ref(ptr + 0 + 24 + 64 + 12, undefined);
            x["Cellular"]["APN"]["Language"]["UserSetting"] = A.load.Ref(ptr + 0 + 24 + 64 + 16, undefined);
            x["Cellular"]["APN"]["Language"]["SharedSetting"] = A.load.Ref(ptr + 0 + 24 + 64 + 20, undefined);
            if (A.load.Bool(ptr + 0 + 24 + 64 + 26)) {
              x["Cellular"]["APN"]["Language"]["UserEditable"] = A.load.Bool(ptr + 0 + 24 + 64 + 24);
            } else {
              delete x["Cellular"]["APN"]["Language"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 0 + 24 + 64 + 27)) {
              x["Cellular"]["APN"]["Language"]["DeviceEditable"] = A.load.Bool(ptr + 0 + 24 + 64 + 25);
            } else {
              delete x["Cellular"]["APN"]["Language"]["DeviceEditable"];
            }
          } else {
            delete x["Cellular"]["APN"]["Language"];
          }
          if (A.load.Bool(ptr + 0 + 24 + 96 + 28)) {
            x["Cellular"]["APN"]["LocalizedName"] = {};
            x["Cellular"]["APN"]["LocalizedName"]["Active"] = A.load.Ref(ptr + 0 + 24 + 96 + 0, undefined);
            x["Cellular"]["APN"]["LocalizedName"]["Effective"] = A.load.Ref(ptr + 0 + 24 + 96 + 4, undefined);
            x["Cellular"]["APN"]["LocalizedName"]["UserPolicy"] = A.load.Ref(ptr + 0 + 24 + 96 + 8, undefined);
            x["Cellular"]["APN"]["LocalizedName"]["DevicePolicy"] = A.load.Ref(ptr + 0 + 24 + 96 + 12, undefined);
            x["Cellular"]["APN"]["LocalizedName"]["UserSetting"] = A.load.Ref(ptr + 0 + 24 + 96 + 16, undefined);
            x["Cellular"]["APN"]["LocalizedName"]["SharedSetting"] = A.load.Ref(ptr + 0 + 24 + 96 + 20, undefined);
            if (A.load.Bool(ptr + 0 + 24 + 96 + 26)) {
              x["Cellular"]["APN"]["LocalizedName"]["UserEditable"] = A.load.Bool(ptr + 0 + 24 + 96 + 24);
            } else {
              delete x["Cellular"]["APN"]["LocalizedName"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 0 + 24 + 96 + 27)) {
              x["Cellular"]["APN"]["LocalizedName"]["DeviceEditable"] = A.load.Bool(ptr + 0 + 24 + 96 + 25);
            } else {
              delete x["Cellular"]["APN"]["LocalizedName"]["DeviceEditable"];
            }
          } else {
            delete x["Cellular"]["APN"]["LocalizedName"];
          }
          if (A.load.Bool(ptr + 0 + 24 + 128 + 28)) {
            x["Cellular"]["APN"]["Name"] = {};
            x["Cellular"]["APN"]["Name"]["Active"] = A.load.Ref(ptr + 0 + 24 + 128 + 0, undefined);
            x["Cellular"]["APN"]["Name"]["Effective"] = A.load.Ref(ptr + 0 + 24 + 128 + 4, undefined);
            x["Cellular"]["APN"]["Name"]["UserPolicy"] = A.load.Ref(ptr + 0 + 24 + 128 + 8, undefined);
            x["Cellular"]["APN"]["Name"]["DevicePolicy"] = A.load.Ref(ptr + 0 + 24 + 128 + 12, undefined);
            x["Cellular"]["APN"]["Name"]["UserSetting"] = A.load.Ref(ptr + 0 + 24 + 128 + 16, undefined);
            x["Cellular"]["APN"]["Name"]["SharedSetting"] = A.load.Ref(ptr + 0 + 24 + 128 + 20, undefined);
            if (A.load.Bool(ptr + 0 + 24 + 128 + 26)) {
              x["Cellular"]["APN"]["Name"]["UserEditable"] = A.load.Bool(ptr + 0 + 24 + 128 + 24);
            } else {
              delete x["Cellular"]["APN"]["Name"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 0 + 24 + 128 + 27)) {
              x["Cellular"]["APN"]["Name"]["DeviceEditable"] = A.load.Bool(ptr + 0 + 24 + 128 + 25);
            } else {
              delete x["Cellular"]["APN"]["Name"]["DeviceEditable"];
            }
          } else {
            delete x["Cellular"]["APN"]["Name"];
          }
          if (A.load.Bool(ptr + 0 + 24 + 160 + 28)) {
            x["Cellular"]["APN"]["Password"] = {};
            x["Cellular"]["APN"]["Password"]["Active"] = A.load.Ref(ptr + 0 + 24 + 160 + 0, undefined);
            x["Cellular"]["APN"]["Password"]["Effective"] = A.load.Ref(ptr + 0 + 24 + 160 + 4, undefined);
            x["Cellular"]["APN"]["Password"]["UserPolicy"] = A.load.Ref(ptr + 0 + 24 + 160 + 8, undefined);
            x["Cellular"]["APN"]["Password"]["DevicePolicy"] = A.load.Ref(ptr + 0 + 24 + 160 + 12, undefined);
            x["Cellular"]["APN"]["Password"]["UserSetting"] = A.load.Ref(ptr + 0 + 24 + 160 + 16, undefined);
            x["Cellular"]["APN"]["Password"]["SharedSetting"] = A.load.Ref(ptr + 0 + 24 + 160 + 20, undefined);
            if (A.load.Bool(ptr + 0 + 24 + 160 + 26)) {
              x["Cellular"]["APN"]["Password"]["UserEditable"] = A.load.Bool(ptr + 0 + 24 + 160 + 24);
            } else {
              delete x["Cellular"]["APN"]["Password"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 0 + 24 + 160 + 27)) {
              x["Cellular"]["APN"]["Password"]["DeviceEditable"] = A.load.Bool(ptr + 0 + 24 + 160 + 25);
            } else {
              delete x["Cellular"]["APN"]["Password"]["DeviceEditable"];
            }
          } else {
            delete x["Cellular"]["APN"]["Password"];
          }
          if (A.load.Bool(ptr + 0 + 24 + 192 + 28)) {
            x["Cellular"]["APN"]["Username"] = {};
            x["Cellular"]["APN"]["Username"]["Active"] = A.load.Ref(ptr + 0 + 24 + 192 + 0, undefined);
            x["Cellular"]["APN"]["Username"]["Effective"] = A.load.Ref(ptr + 0 + 24 + 192 + 4, undefined);
            x["Cellular"]["APN"]["Username"]["UserPolicy"] = A.load.Ref(ptr + 0 + 24 + 192 + 8, undefined);
            x["Cellular"]["APN"]["Username"]["DevicePolicy"] = A.load.Ref(ptr + 0 + 24 + 192 + 12, undefined);
            x["Cellular"]["APN"]["Username"]["UserSetting"] = A.load.Ref(ptr + 0 + 24 + 192 + 16, undefined);
            x["Cellular"]["APN"]["Username"]["SharedSetting"] = A.load.Ref(ptr + 0 + 24 + 192 + 20, undefined);
            if (A.load.Bool(ptr + 0 + 24 + 192 + 26)) {
              x["Cellular"]["APN"]["Username"]["UserEditable"] = A.load.Bool(ptr + 0 + 24 + 192 + 24);
            } else {
              delete x["Cellular"]["APN"]["Username"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 0 + 24 + 192 + 27)) {
              x["Cellular"]["APN"]["Username"]["DeviceEditable"] = A.load.Bool(ptr + 0 + 24 + 192 + 25);
            } else {
              delete x["Cellular"]["APN"]["Username"]["DeviceEditable"];
            }
          } else {
            delete x["Cellular"]["APN"]["Username"];
          }
        } else {
          delete x["Cellular"]["APN"];
        }
        if (A.load.Bool(ptr + 0 + 248 + 28)) {
          x["Cellular"]["APNList"] = {};
          x["Cellular"]["APNList"]["Active"] = A.load.Ref(ptr + 0 + 248 + 0, undefined);
          x["Cellular"]["APNList"]["Effective"] = A.load.Ref(ptr + 0 + 248 + 4, undefined);
          x["Cellular"]["APNList"]["UserPolicy"] = A.load.Ref(ptr + 0 + 248 + 8, undefined);
          x["Cellular"]["APNList"]["DevicePolicy"] = A.load.Ref(ptr + 0 + 248 + 12, undefined);
          x["Cellular"]["APNList"]["UserSetting"] = A.load.Ref(ptr + 0 + 248 + 16, undefined);
          x["Cellular"]["APNList"]["SharedSetting"] = A.load.Ref(ptr + 0 + 248 + 20, undefined);
          if (A.load.Bool(ptr + 0 + 248 + 26)) {
            x["Cellular"]["APNList"]["UserEditable"] = A.load.Bool(ptr + 0 + 248 + 24);
          } else {
            delete x["Cellular"]["APNList"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 0 + 248 + 27)) {
            x["Cellular"]["APNList"]["DeviceEditable"] = A.load.Bool(ptr + 0 + 248 + 25);
          } else {
            delete x["Cellular"]["APNList"]["DeviceEditable"];
          }
        } else {
          delete x["Cellular"]["APNList"];
        }
        x["Cellular"]["ActivationType"] = A.load.Ref(ptr + 0 + 280, undefined);
        x["Cellular"]["ActivationState"] = A.load.Enum(ptr + 0 + 284, [
          "Activated",
          "Activating",
          "NotActivated",
          "PartiallyActivated",
        ]);
        if (A.load.Bool(ptr + 0 + 453)) {
          x["Cellular"]["AllowRoaming"] = A.load.Bool(ptr + 0 + 288);
        } else {
          delete x["Cellular"]["AllowRoaming"];
        }
        x["Cellular"]["ESN"] = A.load.Ref(ptr + 0 + 292, undefined);
        x["Cellular"]["Family"] = A.load.Ref(ptr + 0 + 296, undefined);
        x["Cellular"]["FirmwareRevision"] = A.load.Ref(ptr + 0 + 300, undefined);
        x["Cellular"]["FoundNetworks"] = A.load.Ref(ptr + 0 + 304, undefined);
        x["Cellular"]["HardwareRevision"] = A.load.Ref(ptr + 0 + 308, undefined);
        if (A.load.Bool(ptr + 0 + 312 + 12)) {
          x["Cellular"]["HomeProvider"] = {};
          x["Cellular"]["HomeProvider"]["Name"] = A.load.Ref(ptr + 0 + 312 + 0, undefined);
          x["Cellular"]["HomeProvider"]["Code"] = A.load.Ref(ptr + 0 + 312 + 4, undefined);
          x["Cellular"]["HomeProvider"]["Country"] = A.load.Ref(ptr + 0 + 312 + 8, undefined);
        } else {
          delete x["Cellular"]["HomeProvider"];
        }
        x["Cellular"]["ICCID"] = A.load.Ref(ptr + 0 + 328, undefined);
        x["Cellular"]["IMEI"] = A.load.Ref(ptr + 0 + 332, undefined);
        if (A.load.Bool(ptr + 0 + 336 + 28)) {
          x["Cellular"]["LastGoodAPN"] = {};
          x["Cellular"]["LastGoodAPN"]["AccessPointName"] = A.load.Ref(ptr + 0 + 336 + 0, undefined);
          x["Cellular"]["LastGoodAPN"]["Authentication"] = A.load.Ref(ptr + 0 + 336 + 4, undefined);
          x["Cellular"]["LastGoodAPN"]["Language"] = A.load.Ref(ptr + 0 + 336 + 8, undefined);
          x["Cellular"]["LastGoodAPN"]["LocalizedName"] = A.load.Ref(ptr + 0 + 336 + 12, undefined);
          x["Cellular"]["LastGoodAPN"]["Name"] = A.load.Ref(ptr + 0 + 336 + 16, undefined);
          x["Cellular"]["LastGoodAPN"]["Password"] = A.load.Ref(ptr + 0 + 336 + 20, undefined);
          x["Cellular"]["LastGoodAPN"]["Username"] = A.load.Ref(ptr + 0 + 336 + 24, undefined);
        } else {
          delete x["Cellular"]["LastGoodAPN"];
        }
        x["Cellular"]["Manufacturer"] = A.load.Ref(ptr + 0 + 368, undefined);
        x["Cellular"]["MDN"] = A.load.Ref(ptr + 0 + 372, undefined);
        x["Cellular"]["MEID"] = A.load.Ref(ptr + 0 + 376, undefined);
        x["Cellular"]["MIN"] = A.load.Ref(ptr + 0 + 380, undefined);
        x["Cellular"]["ModelID"] = A.load.Ref(ptr + 0 + 384, undefined);
        x["Cellular"]["NetworkTechnology"] = A.load.Ref(ptr + 0 + 388, undefined);
        if (A.load.Bool(ptr + 0 + 392 + 12)) {
          x["Cellular"]["PaymentPortal"] = {};
          x["Cellular"]["PaymentPortal"]["Method"] = A.load.Ref(ptr + 0 + 392 + 0, undefined);
          x["Cellular"]["PaymentPortal"]["PostData"] = A.load.Ref(ptr + 0 + 392 + 4, undefined);
          x["Cellular"]["PaymentPortal"]["Url"] = A.load.Ref(ptr + 0 + 392 + 8, undefined);
        } else {
          delete x["Cellular"]["PaymentPortal"];
        }
        x["Cellular"]["RoamingState"] = A.load.Ref(ptr + 0 + 408, undefined);
        if (A.load.Bool(ptr + 0 + 454)) {
          x["Cellular"]["Scanning"] = A.load.Bool(ptr + 0 + 412);
        } else {
          delete x["Cellular"]["Scanning"];
        }
        if (A.load.Bool(ptr + 0 + 416 + 12)) {
          x["Cellular"]["ServingOperator"] = {};
          x["Cellular"]["ServingOperator"]["Name"] = A.load.Ref(ptr + 0 + 416 + 0, undefined);
          x["Cellular"]["ServingOperator"]["Code"] = A.load.Ref(ptr + 0 + 416 + 4, undefined);
          x["Cellular"]["ServingOperator"]["Country"] = A.load.Ref(ptr + 0 + 416 + 8, undefined);
        } else {
          delete x["Cellular"]["ServingOperator"];
        }
        if (A.load.Bool(ptr + 0 + 432 + 14)) {
          x["Cellular"]["SIMLockStatus"] = {};
          x["Cellular"]["SIMLockStatus"]["LockType"] = A.load.Ref(ptr + 0 + 432 + 0, undefined);
          if (A.load.Bool(ptr + 0 + 432 + 12)) {
            x["Cellular"]["SIMLockStatus"]["LockEnabled"] = A.load.Bool(ptr + 0 + 432 + 4);
          } else {
            delete x["Cellular"]["SIMLockStatus"]["LockEnabled"];
          }
          if (A.load.Bool(ptr + 0 + 432 + 13)) {
            x["Cellular"]["SIMLockStatus"]["RetriesLeft"] = A.load.Int32(ptr + 0 + 432 + 8);
          } else {
            delete x["Cellular"]["SIMLockStatus"]["RetriesLeft"];
          }
        } else {
          delete x["Cellular"]["SIMLockStatus"];
        }
        if (A.load.Bool(ptr + 0 + 455)) {
          x["Cellular"]["SIMPresent"] = A.load.Bool(ptr + 0 + 447);
        } else {
          delete x["Cellular"]["SIMPresent"];
        }
        if (A.load.Bool(ptr + 0 + 456)) {
          x["Cellular"]["SignalStrength"] = A.load.Int32(ptr + 0 + 448);
        } else {
          delete x["Cellular"]["SignalStrength"];
        }
        if (A.load.Bool(ptr + 0 + 457)) {
          x["Cellular"]["SupportNetworkScan"] = A.load.Bool(ptr + 0 + 452);
        } else {
          delete x["Cellular"]["SupportNetworkScan"];
        }
      } else {
        delete x["Cellular"];
      }
      if (A.load.Bool(ptr + 6507)) {
        x["Connectable"] = A.load.Bool(ptr + 459);
      } else {
        delete x["Connectable"];
      }
      x["ConnectionState"] = A.load.Enum(ptr + 460, ["Connected", "Connecting", "NotConnected"]);
      x["ErrorState"] = A.load.Ref(ptr + 464, undefined);
      if (A.load.Bool(ptr + 468 + 863)) {
        x["Ethernet"] = {};
        if (A.load.Bool(ptr + 468 + 0 + 21)) {
          x["Ethernet"]["AutoConnect"] = {};
          if (A.load.Bool(ptr + 468 + 0 + 14)) {
            x["Ethernet"]["AutoConnect"]["Active"] = A.load.Bool(ptr + 468 + 0 + 0);
          } else {
            delete x["Ethernet"]["AutoConnect"]["Active"];
          }
          x["Ethernet"]["AutoConnect"]["Effective"] = A.load.Ref(ptr + 468 + 0 + 4, undefined);
          if (A.load.Bool(ptr + 468 + 0 + 15)) {
            x["Ethernet"]["AutoConnect"]["UserPolicy"] = A.load.Bool(ptr + 468 + 0 + 8);
          } else {
            delete x["Ethernet"]["AutoConnect"]["UserPolicy"];
          }
          if (A.load.Bool(ptr + 468 + 0 + 16)) {
            x["Ethernet"]["AutoConnect"]["DevicePolicy"] = A.load.Bool(ptr + 468 + 0 + 9);
          } else {
            delete x["Ethernet"]["AutoConnect"]["DevicePolicy"];
          }
          if (A.load.Bool(ptr + 468 + 0 + 17)) {
            x["Ethernet"]["AutoConnect"]["UserSetting"] = A.load.Bool(ptr + 468 + 0 + 10);
          } else {
            delete x["Ethernet"]["AutoConnect"]["UserSetting"];
          }
          if (A.load.Bool(ptr + 468 + 0 + 18)) {
            x["Ethernet"]["AutoConnect"]["SharedSetting"] = A.load.Bool(ptr + 468 + 0 + 11);
          } else {
            delete x["Ethernet"]["AutoConnect"]["SharedSetting"];
          }
          if (A.load.Bool(ptr + 468 + 0 + 19)) {
            x["Ethernet"]["AutoConnect"]["UserEditable"] = A.load.Bool(ptr + 468 + 0 + 12);
          } else {
            delete x["Ethernet"]["AutoConnect"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 468 + 0 + 20)) {
            x["Ethernet"]["AutoConnect"]["DeviceEditable"] = A.load.Bool(ptr + 468 + 0 + 13);
          } else {
            delete x["Ethernet"]["AutoConnect"]["DeviceEditable"];
          }
        } else {
          delete x["Ethernet"]["AutoConnect"];
        }
        if (A.load.Bool(ptr + 468 + 24 + 28)) {
          x["Ethernet"]["Authentication"] = {};
          x["Ethernet"]["Authentication"]["Active"] = A.load.Ref(ptr + 468 + 24 + 0, undefined);
          x["Ethernet"]["Authentication"]["Effective"] = A.load.Ref(ptr + 468 + 24 + 4, undefined);
          x["Ethernet"]["Authentication"]["UserPolicy"] = A.load.Ref(ptr + 468 + 24 + 8, undefined);
          x["Ethernet"]["Authentication"]["DevicePolicy"] = A.load.Ref(ptr + 468 + 24 + 12, undefined);
          x["Ethernet"]["Authentication"]["UserSetting"] = A.load.Ref(ptr + 468 + 24 + 16, undefined);
          x["Ethernet"]["Authentication"]["SharedSetting"] = A.load.Ref(ptr + 468 + 24 + 20, undefined);
          if (A.load.Bool(ptr + 468 + 24 + 26)) {
            x["Ethernet"]["Authentication"]["UserEditable"] = A.load.Bool(ptr + 468 + 24 + 24);
          } else {
            delete x["Ethernet"]["Authentication"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 468 + 24 + 27)) {
            x["Ethernet"]["Authentication"]["DeviceEditable"] = A.load.Bool(ptr + 468 + 24 + 25);
          } else {
            delete x["Ethernet"]["Authentication"]["DeviceEditable"];
          }
        } else {
          delete x["Ethernet"]["Authentication"];
        }
        if (A.load.Bool(ptr + 468 + 56 + 806)) {
          x["Ethernet"]["EAP"] = {};
          if (A.load.Bool(ptr + 468 + 56 + 0 + 28)) {
            x["Ethernet"]["EAP"]["AnonymousIdentity"] = {};
            x["Ethernet"]["EAP"]["AnonymousIdentity"]["Active"] = A.load.Ref(ptr + 468 + 56 + 0 + 0, undefined);
            x["Ethernet"]["EAP"]["AnonymousIdentity"]["Effective"] = A.load.Ref(ptr + 468 + 56 + 0 + 4, undefined);
            x["Ethernet"]["EAP"]["AnonymousIdentity"]["UserPolicy"] = A.load.Ref(ptr + 468 + 56 + 0 + 8, undefined);
            x["Ethernet"]["EAP"]["AnonymousIdentity"]["DevicePolicy"] = A.load.Ref(ptr + 468 + 56 + 0 + 12, undefined);
            x["Ethernet"]["EAP"]["AnonymousIdentity"]["UserSetting"] = A.load.Ref(ptr + 468 + 56 + 0 + 16, undefined);
            x["Ethernet"]["EAP"]["AnonymousIdentity"]["SharedSetting"] = A.load.Ref(ptr + 468 + 56 + 0 + 20, undefined);
            if (A.load.Bool(ptr + 468 + 56 + 0 + 26)) {
              x["Ethernet"]["EAP"]["AnonymousIdentity"]["UserEditable"] = A.load.Bool(ptr + 468 + 56 + 0 + 24);
            } else {
              delete x["Ethernet"]["EAP"]["AnonymousIdentity"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 468 + 56 + 0 + 27)) {
              x["Ethernet"]["EAP"]["AnonymousIdentity"]["DeviceEditable"] = A.load.Bool(ptr + 468 + 56 + 0 + 25);
            } else {
              delete x["Ethernet"]["EAP"]["AnonymousIdentity"]["DeviceEditable"];
            }
          } else {
            delete x["Ethernet"]["EAP"]["AnonymousIdentity"];
          }
          if (A.load.Bool(ptr + 468 + 56 + 32 + 318)) {
            x["Ethernet"]["EAP"]["ClientCertPattern"] = {};
            if (A.load.Bool(ptr + 468 + 56 + 32 + 0 + 28)) {
              x["Ethernet"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] = {};
              x["Ethernet"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["Active"] = A.load.Ref(
                ptr + 468 + 56 + 32 + 0 + 0,
                undefined
              );
              x["Ethernet"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["Effective"] = A.load.Ref(
                ptr + 468 + 56 + 32 + 0 + 4,
                undefined
              );
              x["Ethernet"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserPolicy"] = A.load.Ref(
                ptr + 468 + 56 + 32 + 0 + 8,
                undefined
              );
              x["Ethernet"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["DevicePolicy"] = A.load.Ref(
                ptr + 468 + 56 + 32 + 0 + 12,
                undefined
              );
              x["Ethernet"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserSetting"] = A.load.Ref(
                ptr + 468 + 56 + 32 + 0 + 16,
                undefined
              );
              x["Ethernet"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["SharedSetting"] = A.load.Ref(
                ptr + 468 + 56 + 32 + 0 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 468 + 56 + 32 + 0 + 26)) {
                x["Ethernet"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserEditable"] = A.load.Bool(
                  ptr + 468 + 56 + 32 + 0 + 24
                );
              } else {
                delete x["Ethernet"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 468 + 56 + 32 + 0 + 27)) {
                x["Ethernet"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"] = A.load.Bool(
                  ptr + 468 + 56 + 32 + 0 + 25
                );
              } else {
                delete x["Ethernet"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"];
              }
            } else {
              delete x["Ethernet"]["EAP"]["ClientCertPattern"]["EnrollmentURI"];
            }
            if (A.load.Bool(ptr + 468 + 56 + 32 + 32 + 125)) {
              x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"] = {};
              if (A.load.Bool(ptr + 468 + 56 + 32 + 32 + 0 + 28)) {
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] = {};
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["Active"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 32 + 0 + 0,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["Effective"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 32 + 0 + 4,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserPolicy"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 32 + 0 + 8,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["DevicePolicy"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 32 + 0 + 12,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserSetting"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 32 + 0 + 16,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["SharedSetting"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 32 + 0 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 468 + 56 + 32 + 32 + 0 + 26)) {
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"] = A.load.Bool(
                    ptr + 468 + 56 + 32 + 32 + 0 + 24
                  );
                } else {
                  delete x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 468 + 56 + 32 + 32 + 0 + 27)) {
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"] = A.load.Bool(
                    ptr + 468 + 56 + 32 + 32 + 0 + 25
                  );
                } else {
                  delete x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"];
                }
              } else {
                delete x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"];
              }
              if (A.load.Bool(ptr + 468 + 56 + 32 + 32 + 32 + 28)) {
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] = {};
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["Active"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 32 + 32 + 0,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["Effective"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 32 + 32 + 4,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserPolicy"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 32 + 32 + 8,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["DevicePolicy"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 32 + 32 + 12,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserSetting"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 32 + 32 + 16,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["SharedSetting"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 32 + 32 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 468 + 56 + 32 + 32 + 32 + 26)) {
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"] = A.load.Bool(
                    ptr + 468 + 56 + 32 + 32 + 32 + 24
                  );
                } else {
                  delete x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 468 + 56 + 32 + 32 + 32 + 27)) {
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"] = A.load.Bool(
                    ptr + 468 + 56 + 32 + 32 + 32 + 25
                  );
                } else {
                  delete x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"];
                }
              } else {
                delete x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"];
              }
              if (A.load.Bool(ptr + 468 + 56 + 32 + 32 + 64 + 28)) {
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] = {};
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["Active"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 32 + 64 + 0,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["Effective"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 32 + 64 + 4,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserPolicy"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 32 + 64 + 8,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["DevicePolicy"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 32 + 64 + 12,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserSetting"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 32 + 64 + 16,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["SharedSetting"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 32 + 64 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 468 + 56 + 32 + 32 + 64 + 26)) {
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"] = A.load.Bool(
                    ptr + 468 + 56 + 32 + 32 + 64 + 24
                  );
                } else {
                  delete x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 468 + 56 + 32 + 32 + 64 + 27)) {
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"] = A.load.Bool(
                    ptr + 468 + 56 + 32 + 32 + 64 + 25
                  );
                } else {
                  delete x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"];
                }
              } else {
                delete x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"];
              }
              if (A.load.Bool(ptr + 468 + 56 + 32 + 32 + 96 + 28)) {
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = {};
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Active"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 32 + 96 + 0,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Effective"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 32 + 96 + 4,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserPolicy"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 32 + 96 + 8,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DevicePolicy"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 32 + 96 + 12,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserSetting"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 32 + 96 + 16,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["SharedSetting"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 32 + 96 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 468 + 56 + 32 + 32 + 96 + 26)) {
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"] =
                    A.load.Bool(ptr + 468 + 56 + 32 + 32 + 96 + 24);
                } else {
                  delete x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 468 + 56 + 32 + 32 + 96 + 27)) {
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"] =
                    A.load.Bool(ptr + 468 + 56 + 32 + 32 + 96 + 25);
                } else {
                  delete x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"];
                }
              } else {
                delete x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"];
              }
            } else {
              delete x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"];
            }
            if (A.load.Bool(ptr + 468 + 56 + 32 + 160 + 28)) {
              x["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCARef"] = {};
              x["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["Active"] = A.load.Ref(
                ptr + 468 + 56 + 32 + 160 + 0,
                undefined
              );
              x["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["Effective"] = A.load.Ref(
                ptr + 468 + 56 + 32 + 160 + 4,
                undefined
              );
              x["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserPolicy"] = A.load.Ref(
                ptr + 468 + 56 + 32 + 160 + 8,
                undefined
              );
              x["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["DevicePolicy"] = A.load.Ref(
                ptr + 468 + 56 + 32 + 160 + 12,
                undefined
              );
              x["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserSetting"] = A.load.Ref(
                ptr + 468 + 56 + 32 + 160 + 16,
                undefined
              );
              x["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["SharedSetting"] = A.load.Ref(
                ptr + 468 + 56 + 32 + 160 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 468 + 56 + 32 + 160 + 26)) {
                x["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserEditable"] = A.load.Bool(
                  ptr + 468 + 56 + 32 + 160 + 24
                );
              } else {
                delete x["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 468 + 56 + 32 + 160 + 27)) {
                x["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"] = A.load.Bool(
                  ptr + 468 + 56 + 32 + 160 + 25
                );
              } else {
                delete x["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"];
              }
            } else {
              delete x["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCARef"];
            }
            if (A.load.Bool(ptr + 468 + 56 + 32 + 192 + 125)) {
              x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"] = {};
              if (A.load.Bool(ptr + 468 + 56 + 32 + 192 + 0 + 28)) {
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] = {};
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["Active"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 192 + 0 + 0,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["Effective"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 192 + 0 + 4,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserPolicy"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 192 + 0 + 8,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["DevicePolicy"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 192 + 0 + 12,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserSetting"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 192 + 0 + 16,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["SharedSetting"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 192 + 0 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 468 + 56 + 32 + 192 + 0 + 26)) {
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"] = A.load.Bool(
                    ptr + 468 + 56 + 32 + 192 + 0 + 24
                  );
                } else {
                  delete x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 468 + 56 + 32 + 192 + 0 + 27)) {
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"] = A.load.Bool(
                    ptr + 468 + 56 + 32 + 192 + 0 + 25
                  );
                } else {
                  delete x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"];
                }
              } else {
                delete x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"];
              }
              if (A.load.Bool(ptr + 468 + 56 + 32 + 192 + 32 + 28)) {
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"] = {};
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["Active"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 192 + 32 + 0,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["Effective"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 192 + 32 + 4,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserPolicy"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 192 + 32 + 8,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["DevicePolicy"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 192 + 32 + 12,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserSetting"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 192 + 32 + 16,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["SharedSetting"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 192 + 32 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 468 + 56 + 32 + 192 + 32 + 26)) {
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"] = A.load.Bool(
                    ptr + 468 + 56 + 32 + 192 + 32 + 24
                  );
                } else {
                  delete x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 468 + 56 + 32 + 192 + 32 + 27)) {
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"] = A.load.Bool(
                    ptr + 468 + 56 + 32 + 192 + 32 + 25
                  );
                } else {
                  delete x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"];
                }
              } else {
                delete x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"];
              }
              if (A.load.Bool(ptr + 468 + 56 + 32 + 192 + 64 + 28)) {
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"] = {};
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["Active"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 192 + 64 + 0,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["Effective"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 192 + 64 + 4,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserPolicy"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 192 + 64 + 8,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["DevicePolicy"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 192 + 64 + 12,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserSetting"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 192 + 64 + 16,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["SharedSetting"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 192 + 64 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 468 + 56 + 32 + 192 + 64 + 26)) {
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"] = A.load.Bool(
                    ptr + 468 + 56 + 32 + 192 + 64 + 24
                  );
                } else {
                  delete x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 468 + 56 + 32 + 192 + 64 + 27)) {
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"] = A.load.Bool(
                    ptr + 468 + 56 + 32 + 192 + 64 + 25
                  );
                } else {
                  delete x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"];
                }
              } else {
                delete x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"];
              }
              if (A.load.Bool(ptr + 468 + 56 + 32 + 192 + 96 + 28)) {
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = {};
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Active"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 192 + 96 + 0,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Effective"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 192 + 96 + 4,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserPolicy"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 192 + 96 + 8,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DevicePolicy"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 192 + 96 + 12,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserSetting"] = A.load.Ref(
                  ptr + 468 + 56 + 32 + 192 + 96 + 16,
                  undefined
                );
                x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["SharedSetting"] =
                  A.load.Ref(ptr + 468 + 56 + 32 + 192 + 96 + 20, undefined);
                if (A.load.Bool(ptr + 468 + 56 + 32 + 192 + 96 + 26)) {
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"] =
                    A.load.Bool(ptr + 468 + 56 + 32 + 192 + 96 + 24);
                } else {
                  delete x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 468 + 56 + 32 + 192 + 96 + 27)) {
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"] =
                    A.load.Bool(ptr + 468 + 56 + 32 + 192 + 96 + 25);
                } else {
                  delete x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"];
                }
              } else {
                delete x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"];
              }
            } else {
              delete x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"];
            }
          } else {
            delete x["Ethernet"]["EAP"]["ClientCertPattern"];
          }
          if (A.load.Bool(ptr + 468 + 56 + 352 + 28)) {
            x["Ethernet"]["EAP"]["ClientCertPKCS11Id"] = {};
            x["Ethernet"]["EAP"]["ClientCertPKCS11Id"]["Active"] = A.load.Ref(ptr + 468 + 56 + 352 + 0, undefined);
            x["Ethernet"]["EAP"]["ClientCertPKCS11Id"]["Effective"] = A.load.Ref(ptr + 468 + 56 + 352 + 4, undefined);
            x["Ethernet"]["EAP"]["ClientCertPKCS11Id"]["UserPolicy"] = A.load.Ref(ptr + 468 + 56 + 352 + 8, undefined);
            x["Ethernet"]["EAP"]["ClientCertPKCS11Id"]["DevicePolicy"] = A.load.Ref(
              ptr + 468 + 56 + 352 + 12,
              undefined
            );
            x["Ethernet"]["EAP"]["ClientCertPKCS11Id"]["UserSetting"] = A.load.Ref(
              ptr + 468 + 56 + 352 + 16,
              undefined
            );
            x["Ethernet"]["EAP"]["ClientCertPKCS11Id"]["SharedSetting"] = A.load.Ref(
              ptr + 468 + 56 + 352 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 468 + 56 + 352 + 26)) {
              x["Ethernet"]["EAP"]["ClientCertPKCS11Id"]["UserEditable"] = A.load.Bool(ptr + 468 + 56 + 352 + 24);
            } else {
              delete x["Ethernet"]["EAP"]["ClientCertPKCS11Id"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 468 + 56 + 352 + 27)) {
              x["Ethernet"]["EAP"]["ClientCertPKCS11Id"]["DeviceEditable"] = A.load.Bool(ptr + 468 + 56 + 352 + 25);
            } else {
              delete x["Ethernet"]["EAP"]["ClientCertPKCS11Id"]["DeviceEditable"];
            }
          } else {
            delete x["Ethernet"]["EAP"]["ClientCertPKCS11Id"];
          }
          if (A.load.Bool(ptr + 468 + 56 + 384 + 28)) {
            x["Ethernet"]["EAP"]["ClientCertProvisioningProfileId"] = {};
            x["Ethernet"]["EAP"]["ClientCertProvisioningProfileId"]["Active"] = A.load.Ref(
              ptr + 468 + 56 + 384 + 0,
              undefined
            );
            x["Ethernet"]["EAP"]["ClientCertProvisioningProfileId"]["Effective"] = A.load.Ref(
              ptr + 468 + 56 + 384 + 4,
              undefined
            );
            x["Ethernet"]["EAP"]["ClientCertProvisioningProfileId"]["UserPolicy"] = A.load.Ref(
              ptr + 468 + 56 + 384 + 8,
              undefined
            );
            x["Ethernet"]["EAP"]["ClientCertProvisioningProfileId"]["DevicePolicy"] = A.load.Ref(
              ptr + 468 + 56 + 384 + 12,
              undefined
            );
            x["Ethernet"]["EAP"]["ClientCertProvisioningProfileId"]["UserSetting"] = A.load.Ref(
              ptr + 468 + 56 + 384 + 16,
              undefined
            );
            x["Ethernet"]["EAP"]["ClientCertProvisioningProfileId"]["SharedSetting"] = A.load.Ref(
              ptr + 468 + 56 + 384 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 468 + 56 + 384 + 26)) {
              x["Ethernet"]["EAP"]["ClientCertProvisioningProfileId"]["UserEditable"] = A.load.Bool(
                ptr + 468 + 56 + 384 + 24
              );
            } else {
              delete x["Ethernet"]["EAP"]["ClientCertProvisioningProfileId"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 468 + 56 + 384 + 27)) {
              x["Ethernet"]["EAP"]["ClientCertProvisioningProfileId"]["DeviceEditable"] = A.load.Bool(
                ptr + 468 + 56 + 384 + 25
              );
            } else {
              delete x["Ethernet"]["EAP"]["ClientCertProvisioningProfileId"]["DeviceEditable"];
            }
          } else {
            delete x["Ethernet"]["EAP"]["ClientCertProvisioningProfileId"];
          }
          if (A.load.Bool(ptr + 468 + 56 + 416 + 28)) {
            x["Ethernet"]["EAP"]["ClientCertRef"] = {};
            x["Ethernet"]["EAP"]["ClientCertRef"]["Active"] = A.load.Ref(ptr + 468 + 56 + 416 + 0, undefined);
            x["Ethernet"]["EAP"]["ClientCertRef"]["Effective"] = A.load.Ref(ptr + 468 + 56 + 416 + 4, undefined);
            x["Ethernet"]["EAP"]["ClientCertRef"]["UserPolicy"] = A.load.Ref(ptr + 468 + 56 + 416 + 8, undefined);
            x["Ethernet"]["EAP"]["ClientCertRef"]["DevicePolicy"] = A.load.Ref(ptr + 468 + 56 + 416 + 12, undefined);
            x["Ethernet"]["EAP"]["ClientCertRef"]["UserSetting"] = A.load.Ref(ptr + 468 + 56 + 416 + 16, undefined);
            x["Ethernet"]["EAP"]["ClientCertRef"]["SharedSetting"] = A.load.Ref(ptr + 468 + 56 + 416 + 20, undefined);
            if (A.load.Bool(ptr + 468 + 56 + 416 + 26)) {
              x["Ethernet"]["EAP"]["ClientCertRef"]["UserEditable"] = A.load.Bool(ptr + 468 + 56 + 416 + 24);
            } else {
              delete x["Ethernet"]["EAP"]["ClientCertRef"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 468 + 56 + 416 + 27)) {
              x["Ethernet"]["EAP"]["ClientCertRef"]["DeviceEditable"] = A.load.Bool(ptr + 468 + 56 + 416 + 25);
            } else {
              delete x["Ethernet"]["EAP"]["ClientCertRef"]["DeviceEditable"];
            }
          } else {
            delete x["Ethernet"]["EAP"]["ClientCertRef"];
          }
          if (A.load.Bool(ptr + 468 + 56 + 448 + 28)) {
            x["Ethernet"]["EAP"]["ClientCertType"] = {};
            x["Ethernet"]["EAP"]["ClientCertType"]["Active"] = A.load.Ref(ptr + 468 + 56 + 448 + 0, undefined);
            x["Ethernet"]["EAP"]["ClientCertType"]["Effective"] = A.load.Ref(ptr + 468 + 56 + 448 + 4, undefined);
            x["Ethernet"]["EAP"]["ClientCertType"]["UserPolicy"] = A.load.Ref(ptr + 468 + 56 + 448 + 8, undefined);
            x["Ethernet"]["EAP"]["ClientCertType"]["DevicePolicy"] = A.load.Ref(ptr + 468 + 56 + 448 + 12, undefined);
            x["Ethernet"]["EAP"]["ClientCertType"]["UserSetting"] = A.load.Ref(ptr + 468 + 56 + 448 + 16, undefined);
            x["Ethernet"]["EAP"]["ClientCertType"]["SharedSetting"] = A.load.Ref(ptr + 468 + 56 + 448 + 20, undefined);
            if (A.load.Bool(ptr + 468 + 56 + 448 + 26)) {
              x["Ethernet"]["EAP"]["ClientCertType"]["UserEditable"] = A.load.Bool(ptr + 468 + 56 + 448 + 24);
            } else {
              delete x["Ethernet"]["EAP"]["ClientCertType"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 468 + 56 + 448 + 27)) {
              x["Ethernet"]["EAP"]["ClientCertType"]["DeviceEditable"] = A.load.Bool(ptr + 468 + 56 + 448 + 25);
            } else {
              delete x["Ethernet"]["EAP"]["ClientCertType"]["DeviceEditable"];
            }
          } else {
            delete x["Ethernet"]["EAP"]["ClientCertType"];
          }
          if (A.load.Bool(ptr + 468 + 56 + 480 + 28)) {
            x["Ethernet"]["EAP"]["Identity"] = {};
            x["Ethernet"]["EAP"]["Identity"]["Active"] = A.load.Ref(ptr + 468 + 56 + 480 + 0, undefined);
            x["Ethernet"]["EAP"]["Identity"]["Effective"] = A.load.Ref(ptr + 468 + 56 + 480 + 4, undefined);
            x["Ethernet"]["EAP"]["Identity"]["UserPolicy"] = A.load.Ref(ptr + 468 + 56 + 480 + 8, undefined);
            x["Ethernet"]["EAP"]["Identity"]["DevicePolicy"] = A.load.Ref(ptr + 468 + 56 + 480 + 12, undefined);
            x["Ethernet"]["EAP"]["Identity"]["UserSetting"] = A.load.Ref(ptr + 468 + 56 + 480 + 16, undefined);
            x["Ethernet"]["EAP"]["Identity"]["SharedSetting"] = A.load.Ref(ptr + 468 + 56 + 480 + 20, undefined);
            if (A.load.Bool(ptr + 468 + 56 + 480 + 26)) {
              x["Ethernet"]["EAP"]["Identity"]["UserEditable"] = A.load.Bool(ptr + 468 + 56 + 480 + 24);
            } else {
              delete x["Ethernet"]["EAP"]["Identity"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 468 + 56 + 480 + 27)) {
              x["Ethernet"]["EAP"]["Identity"]["DeviceEditable"] = A.load.Bool(ptr + 468 + 56 + 480 + 25);
            } else {
              delete x["Ethernet"]["EAP"]["Identity"]["DeviceEditable"];
            }
          } else {
            delete x["Ethernet"]["EAP"]["Identity"];
          }
          if (A.load.Bool(ptr + 468 + 56 + 512 + 28)) {
            x["Ethernet"]["EAP"]["Inner"] = {};
            x["Ethernet"]["EAP"]["Inner"]["Active"] = A.load.Ref(ptr + 468 + 56 + 512 + 0, undefined);
            x["Ethernet"]["EAP"]["Inner"]["Effective"] = A.load.Ref(ptr + 468 + 56 + 512 + 4, undefined);
            x["Ethernet"]["EAP"]["Inner"]["UserPolicy"] = A.load.Ref(ptr + 468 + 56 + 512 + 8, undefined);
            x["Ethernet"]["EAP"]["Inner"]["DevicePolicy"] = A.load.Ref(ptr + 468 + 56 + 512 + 12, undefined);
            x["Ethernet"]["EAP"]["Inner"]["UserSetting"] = A.load.Ref(ptr + 468 + 56 + 512 + 16, undefined);
            x["Ethernet"]["EAP"]["Inner"]["SharedSetting"] = A.load.Ref(ptr + 468 + 56 + 512 + 20, undefined);
            if (A.load.Bool(ptr + 468 + 56 + 512 + 26)) {
              x["Ethernet"]["EAP"]["Inner"]["UserEditable"] = A.load.Bool(ptr + 468 + 56 + 512 + 24);
            } else {
              delete x["Ethernet"]["EAP"]["Inner"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 468 + 56 + 512 + 27)) {
              x["Ethernet"]["EAP"]["Inner"]["DeviceEditable"] = A.load.Bool(ptr + 468 + 56 + 512 + 25);
            } else {
              delete x["Ethernet"]["EAP"]["Inner"]["DeviceEditable"];
            }
          } else {
            delete x["Ethernet"]["EAP"]["Inner"];
          }
          if (A.load.Bool(ptr + 468 + 56 + 544 + 28)) {
            x["Ethernet"]["EAP"]["Outer"] = {};
            x["Ethernet"]["EAP"]["Outer"]["Active"] = A.load.Ref(ptr + 468 + 56 + 544 + 0, undefined);
            x["Ethernet"]["EAP"]["Outer"]["Effective"] = A.load.Ref(ptr + 468 + 56 + 544 + 4, undefined);
            x["Ethernet"]["EAP"]["Outer"]["UserPolicy"] = A.load.Ref(ptr + 468 + 56 + 544 + 8, undefined);
            x["Ethernet"]["EAP"]["Outer"]["DevicePolicy"] = A.load.Ref(ptr + 468 + 56 + 544 + 12, undefined);
            x["Ethernet"]["EAP"]["Outer"]["UserSetting"] = A.load.Ref(ptr + 468 + 56 + 544 + 16, undefined);
            x["Ethernet"]["EAP"]["Outer"]["SharedSetting"] = A.load.Ref(ptr + 468 + 56 + 544 + 20, undefined);
            if (A.load.Bool(ptr + 468 + 56 + 544 + 26)) {
              x["Ethernet"]["EAP"]["Outer"]["UserEditable"] = A.load.Bool(ptr + 468 + 56 + 544 + 24);
            } else {
              delete x["Ethernet"]["EAP"]["Outer"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 468 + 56 + 544 + 27)) {
              x["Ethernet"]["EAP"]["Outer"]["DeviceEditable"] = A.load.Bool(ptr + 468 + 56 + 544 + 25);
            } else {
              delete x["Ethernet"]["EAP"]["Outer"]["DeviceEditable"];
            }
          } else {
            delete x["Ethernet"]["EAP"]["Outer"];
          }
          if (A.load.Bool(ptr + 468 + 56 + 576 + 28)) {
            x["Ethernet"]["EAP"]["Password"] = {};
            x["Ethernet"]["EAP"]["Password"]["Active"] = A.load.Ref(ptr + 468 + 56 + 576 + 0, undefined);
            x["Ethernet"]["EAP"]["Password"]["Effective"] = A.load.Ref(ptr + 468 + 56 + 576 + 4, undefined);
            x["Ethernet"]["EAP"]["Password"]["UserPolicy"] = A.load.Ref(ptr + 468 + 56 + 576 + 8, undefined);
            x["Ethernet"]["EAP"]["Password"]["DevicePolicy"] = A.load.Ref(ptr + 468 + 56 + 576 + 12, undefined);
            x["Ethernet"]["EAP"]["Password"]["UserSetting"] = A.load.Ref(ptr + 468 + 56 + 576 + 16, undefined);
            x["Ethernet"]["EAP"]["Password"]["SharedSetting"] = A.load.Ref(ptr + 468 + 56 + 576 + 20, undefined);
            if (A.load.Bool(ptr + 468 + 56 + 576 + 26)) {
              x["Ethernet"]["EAP"]["Password"]["UserEditable"] = A.load.Bool(ptr + 468 + 56 + 576 + 24);
            } else {
              delete x["Ethernet"]["EAP"]["Password"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 468 + 56 + 576 + 27)) {
              x["Ethernet"]["EAP"]["Password"]["DeviceEditable"] = A.load.Bool(ptr + 468 + 56 + 576 + 25);
            } else {
              delete x["Ethernet"]["EAP"]["Password"]["DeviceEditable"];
            }
          } else {
            delete x["Ethernet"]["EAP"]["Password"];
          }
          if (A.load.Bool(ptr + 468 + 56 + 608 + 21)) {
            x["Ethernet"]["EAP"]["SaveCredentials"] = {};
            if (A.load.Bool(ptr + 468 + 56 + 608 + 14)) {
              x["Ethernet"]["EAP"]["SaveCredentials"]["Active"] = A.load.Bool(ptr + 468 + 56 + 608 + 0);
            } else {
              delete x["Ethernet"]["EAP"]["SaveCredentials"]["Active"];
            }
            x["Ethernet"]["EAP"]["SaveCredentials"]["Effective"] = A.load.Ref(ptr + 468 + 56 + 608 + 4, undefined);
            if (A.load.Bool(ptr + 468 + 56 + 608 + 15)) {
              x["Ethernet"]["EAP"]["SaveCredentials"]["UserPolicy"] = A.load.Bool(ptr + 468 + 56 + 608 + 8);
            } else {
              delete x["Ethernet"]["EAP"]["SaveCredentials"]["UserPolicy"];
            }
            if (A.load.Bool(ptr + 468 + 56 + 608 + 16)) {
              x["Ethernet"]["EAP"]["SaveCredentials"]["DevicePolicy"] = A.load.Bool(ptr + 468 + 56 + 608 + 9);
            } else {
              delete x["Ethernet"]["EAP"]["SaveCredentials"]["DevicePolicy"];
            }
            if (A.load.Bool(ptr + 468 + 56 + 608 + 17)) {
              x["Ethernet"]["EAP"]["SaveCredentials"]["UserSetting"] = A.load.Bool(ptr + 468 + 56 + 608 + 10);
            } else {
              delete x["Ethernet"]["EAP"]["SaveCredentials"]["UserSetting"];
            }
            if (A.load.Bool(ptr + 468 + 56 + 608 + 18)) {
              x["Ethernet"]["EAP"]["SaveCredentials"]["SharedSetting"] = A.load.Bool(ptr + 468 + 56 + 608 + 11);
            } else {
              delete x["Ethernet"]["EAP"]["SaveCredentials"]["SharedSetting"];
            }
            if (A.load.Bool(ptr + 468 + 56 + 608 + 19)) {
              x["Ethernet"]["EAP"]["SaveCredentials"]["UserEditable"] = A.load.Bool(ptr + 468 + 56 + 608 + 12);
            } else {
              delete x["Ethernet"]["EAP"]["SaveCredentials"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 468 + 56 + 608 + 20)) {
              x["Ethernet"]["EAP"]["SaveCredentials"]["DeviceEditable"] = A.load.Bool(ptr + 468 + 56 + 608 + 13);
            } else {
              delete x["Ethernet"]["EAP"]["SaveCredentials"]["DeviceEditable"];
            }
          } else {
            delete x["Ethernet"]["EAP"]["SaveCredentials"];
          }
          if (A.load.Bool(ptr + 468 + 56 + 632 + 28)) {
            x["Ethernet"]["EAP"]["ServerCAPEMs"] = {};
            x["Ethernet"]["EAP"]["ServerCAPEMs"]["Active"] = A.load.Ref(ptr + 468 + 56 + 632 + 0, undefined);
            x["Ethernet"]["EAP"]["ServerCAPEMs"]["Effective"] = A.load.Ref(ptr + 468 + 56 + 632 + 4, undefined);
            x["Ethernet"]["EAP"]["ServerCAPEMs"]["UserPolicy"] = A.load.Ref(ptr + 468 + 56 + 632 + 8, undefined);
            x["Ethernet"]["EAP"]["ServerCAPEMs"]["DevicePolicy"] = A.load.Ref(ptr + 468 + 56 + 632 + 12, undefined);
            x["Ethernet"]["EAP"]["ServerCAPEMs"]["UserSetting"] = A.load.Ref(ptr + 468 + 56 + 632 + 16, undefined);
            x["Ethernet"]["EAP"]["ServerCAPEMs"]["SharedSetting"] = A.load.Ref(ptr + 468 + 56 + 632 + 20, undefined);
            if (A.load.Bool(ptr + 468 + 56 + 632 + 26)) {
              x["Ethernet"]["EAP"]["ServerCAPEMs"]["UserEditable"] = A.load.Bool(ptr + 468 + 56 + 632 + 24);
            } else {
              delete x["Ethernet"]["EAP"]["ServerCAPEMs"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 468 + 56 + 632 + 27)) {
              x["Ethernet"]["EAP"]["ServerCAPEMs"]["DeviceEditable"] = A.load.Bool(ptr + 468 + 56 + 632 + 25);
            } else {
              delete x["Ethernet"]["EAP"]["ServerCAPEMs"]["DeviceEditable"];
            }
          } else {
            delete x["Ethernet"]["EAP"]["ServerCAPEMs"];
          }
          if (A.load.Bool(ptr + 468 + 56 + 664 + 28)) {
            x["Ethernet"]["EAP"]["ServerCARefs"] = {};
            x["Ethernet"]["EAP"]["ServerCARefs"]["Active"] = A.load.Ref(ptr + 468 + 56 + 664 + 0, undefined);
            x["Ethernet"]["EAP"]["ServerCARefs"]["Effective"] = A.load.Ref(ptr + 468 + 56 + 664 + 4, undefined);
            x["Ethernet"]["EAP"]["ServerCARefs"]["UserPolicy"] = A.load.Ref(ptr + 468 + 56 + 664 + 8, undefined);
            x["Ethernet"]["EAP"]["ServerCARefs"]["DevicePolicy"] = A.load.Ref(ptr + 468 + 56 + 664 + 12, undefined);
            x["Ethernet"]["EAP"]["ServerCARefs"]["UserSetting"] = A.load.Ref(ptr + 468 + 56 + 664 + 16, undefined);
            x["Ethernet"]["EAP"]["ServerCARefs"]["SharedSetting"] = A.load.Ref(ptr + 468 + 56 + 664 + 20, undefined);
            if (A.load.Bool(ptr + 468 + 56 + 664 + 26)) {
              x["Ethernet"]["EAP"]["ServerCARefs"]["UserEditable"] = A.load.Bool(ptr + 468 + 56 + 664 + 24);
            } else {
              delete x["Ethernet"]["EAP"]["ServerCARefs"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 468 + 56 + 664 + 27)) {
              x["Ethernet"]["EAP"]["ServerCARefs"]["DeviceEditable"] = A.load.Bool(ptr + 468 + 56 + 664 + 25);
            } else {
              delete x["Ethernet"]["EAP"]["ServerCARefs"]["DeviceEditable"];
            }
          } else {
            delete x["Ethernet"]["EAP"]["ServerCARefs"];
          }
          if (A.load.Bool(ptr + 468 + 56 + 696 + 28)) {
            x["Ethernet"]["EAP"]["SubjectMatch"] = {};
            x["Ethernet"]["EAP"]["SubjectMatch"]["Active"] = A.load.Ref(ptr + 468 + 56 + 696 + 0, undefined);
            x["Ethernet"]["EAP"]["SubjectMatch"]["Effective"] = A.load.Ref(ptr + 468 + 56 + 696 + 4, undefined);
            x["Ethernet"]["EAP"]["SubjectMatch"]["UserPolicy"] = A.load.Ref(ptr + 468 + 56 + 696 + 8, undefined);
            x["Ethernet"]["EAP"]["SubjectMatch"]["DevicePolicy"] = A.load.Ref(ptr + 468 + 56 + 696 + 12, undefined);
            x["Ethernet"]["EAP"]["SubjectMatch"]["UserSetting"] = A.load.Ref(ptr + 468 + 56 + 696 + 16, undefined);
            x["Ethernet"]["EAP"]["SubjectMatch"]["SharedSetting"] = A.load.Ref(ptr + 468 + 56 + 696 + 20, undefined);
            if (A.load.Bool(ptr + 468 + 56 + 696 + 26)) {
              x["Ethernet"]["EAP"]["SubjectMatch"]["UserEditable"] = A.load.Bool(ptr + 468 + 56 + 696 + 24);
            } else {
              delete x["Ethernet"]["EAP"]["SubjectMatch"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 468 + 56 + 696 + 27)) {
              x["Ethernet"]["EAP"]["SubjectMatch"]["DeviceEditable"] = A.load.Bool(ptr + 468 + 56 + 696 + 25);
            } else {
              delete x["Ethernet"]["EAP"]["SubjectMatch"]["DeviceEditable"];
            }
          } else {
            delete x["Ethernet"]["EAP"]["SubjectMatch"];
          }
          if (A.load.Bool(ptr + 468 + 56 + 728 + 28)) {
            x["Ethernet"]["EAP"]["TLSVersionMax"] = {};
            x["Ethernet"]["EAP"]["TLSVersionMax"]["Active"] = A.load.Ref(ptr + 468 + 56 + 728 + 0, undefined);
            x["Ethernet"]["EAP"]["TLSVersionMax"]["Effective"] = A.load.Ref(ptr + 468 + 56 + 728 + 4, undefined);
            x["Ethernet"]["EAP"]["TLSVersionMax"]["UserPolicy"] = A.load.Ref(ptr + 468 + 56 + 728 + 8, undefined);
            x["Ethernet"]["EAP"]["TLSVersionMax"]["DevicePolicy"] = A.load.Ref(ptr + 468 + 56 + 728 + 12, undefined);
            x["Ethernet"]["EAP"]["TLSVersionMax"]["UserSetting"] = A.load.Ref(ptr + 468 + 56 + 728 + 16, undefined);
            x["Ethernet"]["EAP"]["TLSVersionMax"]["SharedSetting"] = A.load.Ref(ptr + 468 + 56 + 728 + 20, undefined);
            if (A.load.Bool(ptr + 468 + 56 + 728 + 26)) {
              x["Ethernet"]["EAP"]["TLSVersionMax"]["UserEditable"] = A.load.Bool(ptr + 468 + 56 + 728 + 24);
            } else {
              delete x["Ethernet"]["EAP"]["TLSVersionMax"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 468 + 56 + 728 + 27)) {
              x["Ethernet"]["EAP"]["TLSVersionMax"]["DeviceEditable"] = A.load.Bool(ptr + 468 + 56 + 728 + 25);
            } else {
              delete x["Ethernet"]["EAP"]["TLSVersionMax"]["DeviceEditable"];
            }
          } else {
            delete x["Ethernet"]["EAP"]["TLSVersionMax"];
          }
          if (A.load.Bool(ptr + 468 + 56 + 760 + 21)) {
            x["Ethernet"]["EAP"]["UseProactiveKeyCaching"] = {};
            if (A.load.Bool(ptr + 468 + 56 + 760 + 14)) {
              x["Ethernet"]["EAP"]["UseProactiveKeyCaching"]["Active"] = A.load.Bool(ptr + 468 + 56 + 760 + 0);
            } else {
              delete x["Ethernet"]["EAP"]["UseProactiveKeyCaching"]["Active"];
            }
            x["Ethernet"]["EAP"]["UseProactiveKeyCaching"]["Effective"] = A.load.Ref(
              ptr + 468 + 56 + 760 + 4,
              undefined
            );
            if (A.load.Bool(ptr + 468 + 56 + 760 + 15)) {
              x["Ethernet"]["EAP"]["UseProactiveKeyCaching"]["UserPolicy"] = A.load.Bool(ptr + 468 + 56 + 760 + 8);
            } else {
              delete x["Ethernet"]["EAP"]["UseProactiveKeyCaching"]["UserPolicy"];
            }
            if (A.load.Bool(ptr + 468 + 56 + 760 + 16)) {
              x["Ethernet"]["EAP"]["UseProactiveKeyCaching"]["DevicePolicy"] = A.load.Bool(ptr + 468 + 56 + 760 + 9);
            } else {
              delete x["Ethernet"]["EAP"]["UseProactiveKeyCaching"]["DevicePolicy"];
            }
            if (A.load.Bool(ptr + 468 + 56 + 760 + 17)) {
              x["Ethernet"]["EAP"]["UseProactiveKeyCaching"]["UserSetting"] = A.load.Bool(ptr + 468 + 56 + 760 + 10);
            } else {
              delete x["Ethernet"]["EAP"]["UseProactiveKeyCaching"]["UserSetting"];
            }
            if (A.load.Bool(ptr + 468 + 56 + 760 + 18)) {
              x["Ethernet"]["EAP"]["UseProactiveKeyCaching"]["SharedSetting"] = A.load.Bool(ptr + 468 + 56 + 760 + 11);
            } else {
              delete x["Ethernet"]["EAP"]["UseProactiveKeyCaching"]["SharedSetting"];
            }
            if (A.load.Bool(ptr + 468 + 56 + 760 + 19)) {
              x["Ethernet"]["EAP"]["UseProactiveKeyCaching"]["UserEditable"] = A.load.Bool(ptr + 468 + 56 + 760 + 12);
            } else {
              delete x["Ethernet"]["EAP"]["UseProactiveKeyCaching"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 468 + 56 + 760 + 20)) {
              x["Ethernet"]["EAP"]["UseProactiveKeyCaching"]["DeviceEditable"] = A.load.Bool(ptr + 468 + 56 + 760 + 13);
            } else {
              delete x["Ethernet"]["EAP"]["UseProactiveKeyCaching"]["DeviceEditable"];
            }
          } else {
            delete x["Ethernet"]["EAP"]["UseProactiveKeyCaching"];
          }
          if (A.load.Bool(ptr + 468 + 56 + 784 + 21)) {
            x["Ethernet"]["EAP"]["UseSystemCAs"] = {};
            if (A.load.Bool(ptr + 468 + 56 + 784 + 14)) {
              x["Ethernet"]["EAP"]["UseSystemCAs"]["Active"] = A.load.Bool(ptr + 468 + 56 + 784 + 0);
            } else {
              delete x["Ethernet"]["EAP"]["UseSystemCAs"]["Active"];
            }
            x["Ethernet"]["EAP"]["UseSystemCAs"]["Effective"] = A.load.Ref(ptr + 468 + 56 + 784 + 4, undefined);
            if (A.load.Bool(ptr + 468 + 56 + 784 + 15)) {
              x["Ethernet"]["EAP"]["UseSystemCAs"]["UserPolicy"] = A.load.Bool(ptr + 468 + 56 + 784 + 8);
            } else {
              delete x["Ethernet"]["EAP"]["UseSystemCAs"]["UserPolicy"];
            }
            if (A.load.Bool(ptr + 468 + 56 + 784 + 16)) {
              x["Ethernet"]["EAP"]["UseSystemCAs"]["DevicePolicy"] = A.load.Bool(ptr + 468 + 56 + 784 + 9);
            } else {
              delete x["Ethernet"]["EAP"]["UseSystemCAs"]["DevicePolicy"];
            }
            if (A.load.Bool(ptr + 468 + 56 + 784 + 17)) {
              x["Ethernet"]["EAP"]["UseSystemCAs"]["UserSetting"] = A.load.Bool(ptr + 468 + 56 + 784 + 10);
            } else {
              delete x["Ethernet"]["EAP"]["UseSystemCAs"]["UserSetting"];
            }
            if (A.load.Bool(ptr + 468 + 56 + 784 + 18)) {
              x["Ethernet"]["EAP"]["UseSystemCAs"]["SharedSetting"] = A.load.Bool(ptr + 468 + 56 + 784 + 11);
            } else {
              delete x["Ethernet"]["EAP"]["UseSystemCAs"]["SharedSetting"];
            }
            if (A.load.Bool(ptr + 468 + 56 + 784 + 19)) {
              x["Ethernet"]["EAP"]["UseSystemCAs"]["UserEditable"] = A.load.Bool(ptr + 468 + 56 + 784 + 12);
            } else {
              delete x["Ethernet"]["EAP"]["UseSystemCAs"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 468 + 56 + 784 + 20)) {
              x["Ethernet"]["EAP"]["UseSystemCAs"]["DeviceEditable"] = A.load.Bool(ptr + 468 + 56 + 784 + 13);
            } else {
              delete x["Ethernet"]["EAP"]["UseSystemCAs"]["DeviceEditable"];
            }
          } else {
            delete x["Ethernet"]["EAP"]["UseSystemCAs"];
          }
        } else {
          delete x["Ethernet"]["EAP"];
        }
      } else {
        delete x["Ethernet"];
      }
      x["GUID"] = A.load.Ref(ptr + 1332, undefined);
      if (A.load.Bool(ptr + 1336 + 28)) {
        x["IPAddressConfigType"] = {};
        x["IPAddressConfigType"]["Active"] = A.load.Enum(ptr + 1336 + 0, ["DHCP", "Static"]);
        x["IPAddressConfigType"]["Effective"] = A.load.Ref(ptr + 1336 + 4, undefined);
        x["IPAddressConfigType"]["UserPolicy"] = A.load.Enum(ptr + 1336 + 8, ["DHCP", "Static"]);
        x["IPAddressConfigType"]["DevicePolicy"] = A.load.Enum(ptr + 1336 + 12, ["DHCP", "Static"]);
        x["IPAddressConfigType"]["UserSetting"] = A.load.Enum(ptr + 1336 + 16, ["DHCP", "Static"]);
        x["IPAddressConfigType"]["SharedSetting"] = A.load.Enum(ptr + 1336 + 20, ["DHCP", "Static"]);
        if (A.load.Bool(ptr + 1336 + 26)) {
          x["IPAddressConfigType"]["UserEditable"] = A.load.Bool(ptr + 1336 + 24);
        } else {
          delete x["IPAddressConfigType"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 1336 + 27)) {
          x["IPAddressConfigType"]["DeviceEditable"] = A.load.Bool(ptr + 1336 + 25);
        } else {
          delete x["IPAddressConfigType"]["DeviceEditable"];
        }
      } else {
        delete x["IPAddressConfigType"];
      }
      x["IPConfigs"] = A.load.Ref(ptr + 1368, undefined);
      x["MacAddress"] = A.load.Ref(ptr + 1372, undefined);
      if (A.load.Bool(ptr + 1376 + 21)) {
        x["Metered"] = {};
        if (A.load.Bool(ptr + 1376 + 14)) {
          x["Metered"]["Active"] = A.load.Bool(ptr + 1376 + 0);
        } else {
          delete x["Metered"]["Active"];
        }
        x["Metered"]["Effective"] = A.load.Ref(ptr + 1376 + 4, undefined);
        if (A.load.Bool(ptr + 1376 + 15)) {
          x["Metered"]["UserPolicy"] = A.load.Bool(ptr + 1376 + 8);
        } else {
          delete x["Metered"]["UserPolicy"];
        }
        if (A.load.Bool(ptr + 1376 + 16)) {
          x["Metered"]["DevicePolicy"] = A.load.Bool(ptr + 1376 + 9);
        } else {
          delete x["Metered"]["DevicePolicy"];
        }
        if (A.load.Bool(ptr + 1376 + 17)) {
          x["Metered"]["UserSetting"] = A.load.Bool(ptr + 1376 + 10);
        } else {
          delete x["Metered"]["UserSetting"];
        }
        if (A.load.Bool(ptr + 1376 + 18)) {
          x["Metered"]["SharedSetting"] = A.load.Bool(ptr + 1376 + 11);
        } else {
          delete x["Metered"]["SharedSetting"];
        }
        if (A.load.Bool(ptr + 1376 + 19)) {
          x["Metered"]["UserEditable"] = A.load.Bool(ptr + 1376 + 12);
        } else {
          delete x["Metered"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 1376 + 20)) {
          x["Metered"]["DeviceEditable"] = A.load.Bool(ptr + 1376 + 13);
        } else {
          delete x["Metered"]["DeviceEditable"];
        }
      } else {
        delete x["Metered"];
      }
      if (A.load.Bool(ptr + 1400 + 28)) {
        x["Name"] = {};
        x["Name"]["Active"] = A.load.Ref(ptr + 1400 + 0, undefined);
        x["Name"]["Effective"] = A.load.Ref(ptr + 1400 + 4, undefined);
        x["Name"]["UserPolicy"] = A.load.Ref(ptr + 1400 + 8, undefined);
        x["Name"]["DevicePolicy"] = A.load.Ref(ptr + 1400 + 12, undefined);
        x["Name"]["UserSetting"] = A.load.Ref(ptr + 1400 + 16, undefined);
        x["Name"]["SharedSetting"] = A.load.Ref(ptr + 1400 + 20, undefined);
        if (A.load.Bool(ptr + 1400 + 26)) {
          x["Name"]["UserEditable"] = A.load.Bool(ptr + 1400 + 24);
        } else {
          delete x["Name"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 1400 + 27)) {
          x["Name"]["DeviceEditable"] = A.load.Bool(ptr + 1400 + 25);
        } else {
          delete x["Name"]["DeviceEditable"];
        }
      } else {
        delete x["Name"];
      }
      if (A.load.Bool(ptr + 1432 + 28)) {
        x["NameServersConfigType"] = {};
        x["NameServersConfigType"]["Active"] = A.load.Enum(ptr + 1432 + 0, ["DHCP", "Static"]);
        x["NameServersConfigType"]["Effective"] = A.load.Ref(ptr + 1432 + 4, undefined);
        x["NameServersConfigType"]["UserPolicy"] = A.load.Enum(ptr + 1432 + 8, ["DHCP", "Static"]);
        x["NameServersConfigType"]["DevicePolicy"] = A.load.Enum(ptr + 1432 + 12, ["DHCP", "Static"]);
        x["NameServersConfigType"]["UserSetting"] = A.load.Enum(ptr + 1432 + 16, ["DHCP", "Static"]);
        x["NameServersConfigType"]["SharedSetting"] = A.load.Enum(ptr + 1432 + 20, ["DHCP", "Static"]);
        if (A.load.Bool(ptr + 1432 + 26)) {
          x["NameServersConfigType"]["UserEditable"] = A.load.Bool(ptr + 1432 + 24);
        } else {
          delete x["NameServersConfigType"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 1432 + 27)) {
          x["NameServersConfigType"]["DeviceEditable"] = A.load.Bool(ptr + 1432 + 25);
        } else {
          delete x["NameServersConfigType"]["DeviceEditable"];
        }
      } else {
        delete x["NameServersConfigType"];
      }
      if (A.load.Bool(ptr + 1464 + 33)) {
        x["Priority"] = {};
        if (A.load.Bool(ptr + 1464 + 26)) {
          x["Priority"]["Active"] = A.load.Int32(ptr + 1464 + 0);
        } else {
          delete x["Priority"]["Active"];
        }
        x["Priority"]["Effective"] = A.load.Ref(ptr + 1464 + 4, undefined);
        if (A.load.Bool(ptr + 1464 + 27)) {
          x["Priority"]["UserPolicy"] = A.load.Int32(ptr + 1464 + 8);
        } else {
          delete x["Priority"]["UserPolicy"];
        }
        if (A.load.Bool(ptr + 1464 + 28)) {
          x["Priority"]["DevicePolicy"] = A.load.Int32(ptr + 1464 + 12);
        } else {
          delete x["Priority"]["DevicePolicy"];
        }
        if (A.load.Bool(ptr + 1464 + 29)) {
          x["Priority"]["UserSetting"] = A.load.Int32(ptr + 1464 + 16);
        } else {
          delete x["Priority"]["UserSetting"];
        }
        if (A.load.Bool(ptr + 1464 + 30)) {
          x["Priority"]["SharedSetting"] = A.load.Int32(ptr + 1464 + 20);
        } else {
          delete x["Priority"]["SharedSetting"];
        }
        if (A.load.Bool(ptr + 1464 + 31)) {
          x["Priority"]["UserEditable"] = A.load.Bool(ptr + 1464 + 24);
        } else {
          delete x["Priority"]["UserEditable"];
        }
        if (A.load.Bool(ptr + 1464 + 32)) {
          x["Priority"]["DeviceEditable"] = A.load.Bool(ptr + 1464 + 25);
        } else {
          delete x["Priority"]["DeviceEditable"];
        }
      } else {
        delete x["Priority"];
      }
      if (A.load.Bool(ptr + 1500 + 365)) {
        x["ProxySettings"] = {};
        if (A.load.Bool(ptr + 1500 + 0 + 28)) {
          x["ProxySettings"]["Type"] = {};
          x["ProxySettings"]["Type"]["Active"] = A.load.Enum(ptr + 1500 + 0 + 0, ["Direct", "Manual", "PAC", "WPAD"]);
          x["ProxySettings"]["Type"]["Effective"] = A.load.Ref(ptr + 1500 + 0 + 4, undefined);
          x["ProxySettings"]["Type"]["UserPolicy"] = A.load.Enum(ptr + 1500 + 0 + 8, [
            "Direct",
            "Manual",
            "PAC",
            "WPAD",
          ]);
          x["ProxySettings"]["Type"]["DevicePolicy"] = A.load.Enum(ptr + 1500 + 0 + 12, [
            "Direct",
            "Manual",
            "PAC",
            "WPAD",
          ]);
          x["ProxySettings"]["Type"]["UserSetting"] = A.load.Enum(ptr + 1500 + 0 + 16, [
            "Direct",
            "Manual",
            "PAC",
            "WPAD",
          ]);
          x["ProxySettings"]["Type"]["SharedSetting"] = A.load.Enum(ptr + 1500 + 0 + 20, [
            "Direct",
            "Manual",
            "PAC",
            "WPAD",
          ]);
          if (A.load.Bool(ptr + 1500 + 0 + 26)) {
            x["ProxySettings"]["Type"]["UserEditable"] = A.load.Bool(ptr + 1500 + 0 + 24);
          } else {
            delete x["ProxySettings"]["Type"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1500 + 0 + 27)) {
            x["ProxySettings"]["Type"]["DeviceEditable"] = A.load.Bool(ptr + 1500 + 0 + 25);
          } else {
            delete x["ProxySettings"]["Type"]["DeviceEditable"];
          }
        } else {
          delete x["ProxySettings"]["Type"];
        }
        if (A.load.Bool(ptr + 1500 + 32 + 271)) {
          x["ProxySettings"]["Manual"] = {};
          if (A.load.Bool(ptr + 1500 + 32 + 0 + 66)) {
            x["ProxySettings"]["Manual"]["HTTPProxy"] = {};
            if (A.load.Bool(ptr + 1500 + 32 + 0 + 0 + 28)) {
              x["ProxySettings"]["Manual"]["HTTPProxy"]["Host"] = {};
              x["ProxySettings"]["Manual"]["HTTPProxy"]["Host"]["Active"] = A.load.Ref(
                ptr + 1500 + 32 + 0 + 0 + 0,
                undefined
              );
              x["ProxySettings"]["Manual"]["HTTPProxy"]["Host"]["Effective"] = A.load.Ref(
                ptr + 1500 + 32 + 0 + 0 + 4,
                undefined
              );
              x["ProxySettings"]["Manual"]["HTTPProxy"]["Host"]["UserPolicy"] = A.load.Ref(
                ptr + 1500 + 32 + 0 + 0 + 8,
                undefined
              );
              x["ProxySettings"]["Manual"]["HTTPProxy"]["Host"]["DevicePolicy"] = A.load.Ref(
                ptr + 1500 + 32 + 0 + 0 + 12,
                undefined
              );
              x["ProxySettings"]["Manual"]["HTTPProxy"]["Host"]["UserSetting"] = A.load.Ref(
                ptr + 1500 + 32 + 0 + 0 + 16,
                undefined
              );
              x["ProxySettings"]["Manual"]["HTTPProxy"]["Host"]["SharedSetting"] = A.load.Ref(
                ptr + 1500 + 32 + 0 + 0 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 1500 + 32 + 0 + 0 + 26)) {
                x["ProxySettings"]["Manual"]["HTTPProxy"]["Host"]["UserEditable"] = A.load.Bool(
                  ptr + 1500 + 32 + 0 + 0 + 24
                );
              } else {
                delete x["ProxySettings"]["Manual"]["HTTPProxy"]["Host"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 1500 + 32 + 0 + 0 + 27)) {
                x["ProxySettings"]["Manual"]["HTTPProxy"]["Host"]["DeviceEditable"] = A.load.Bool(
                  ptr + 1500 + 32 + 0 + 0 + 25
                );
              } else {
                delete x["ProxySettings"]["Manual"]["HTTPProxy"]["Host"]["DeviceEditable"];
              }
            } else {
              delete x["ProxySettings"]["Manual"]["HTTPProxy"]["Host"];
            }
            if (A.load.Bool(ptr + 1500 + 32 + 0 + 32 + 33)) {
              x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"] = {};
              if (A.load.Bool(ptr + 1500 + 32 + 0 + 32 + 26)) {
                x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"]["Active"] = A.load.Int32(
                  ptr + 1500 + 32 + 0 + 32 + 0
                );
              } else {
                delete x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"]["Active"];
              }
              x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"]["Effective"] = A.load.Ref(
                ptr + 1500 + 32 + 0 + 32 + 4,
                undefined
              );
              if (A.load.Bool(ptr + 1500 + 32 + 0 + 32 + 27)) {
                x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"]["UserPolicy"] = A.load.Int32(
                  ptr + 1500 + 32 + 0 + 32 + 8
                );
              } else {
                delete x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"]["UserPolicy"];
              }
              if (A.load.Bool(ptr + 1500 + 32 + 0 + 32 + 28)) {
                x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"]["DevicePolicy"] = A.load.Int32(
                  ptr + 1500 + 32 + 0 + 32 + 12
                );
              } else {
                delete x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"]["DevicePolicy"];
              }
              if (A.load.Bool(ptr + 1500 + 32 + 0 + 32 + 29)) {
                x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"]["UserSetting"] = A.load.Int32(
                  ptr + 1500 + 32 + 0 + 32 + 16
                );
              } else {
                delete x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"]["UserSetting"];
              }
              if (A.load.Bool(ptr + 1500 + 32 + 0 + 32 + 30)) {
                x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"]["SharedSetting"] = A.load.Int32(
                  ptr + 1500 + 32 + 0 + 32 + 20
                );
              } else {
                delete x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"]["SharedSetting"];
              }
              if (A.load.Bool(ptr + 1500 + 32 + 0 + 32 + 31)) {
                x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"]["UserEditable"] = A.load.Bool(
                  ptr + 1500 + 32 + 0 + 32 + 24
                );
              } else {
                delete x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 1500 + 32 + 0 + 32 + 32)) {
                x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"]["DeviceEditable"] = A.load.Bool(
                  ptr + 1500 + 32 + 0 + 32 + 25
                );
              } else {
                delete x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"]["DeviceEditable"];
              }
            } else {
              delete x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"];
            }
          } else {
            delete x["ProxySettings"]["Manual"]["HTTPProxy"];
          }
          if (A.load.Bool(ptr + 1500 + 32 + 68 + 66)) {
            x["ProxySettings"]["Manual"]["SecureHTTPProxy"] = {};
            if (A.load.Bool(ptr + 1500 + 32 + 68 + 0 + 28)) {
              x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Host"] = {};
              x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Host"]["Active"] = A.load.Ref(
                ptr + 1500 + 32 + 68 + 0 + 0,
                undefined
              );
              x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Host"]["Effective"] = A.load.Ref(
                ptr + 1500 + 32 + 68 + 0 + 4,
                undefined
              );
              x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Host"]["UserPolicy"] = A.load.Ref(
                ptr + 1500 + 32 + 68 + 0 + 8,
                undefined
              );
              x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Host"]["DevicePolicy"] = A.load.Ref(
                ptr + 1500 + 32 + 68 + 0 + 12,
                undefined
              );
              x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Host"]["UserSetting"] = A.load.Ref(
                ptr + 1500 + 32 + 68 + 0 + 16,
                undefined
              );
              x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Host"]["SharedSetting"] = A.load.Ref(
                ptr + 1500 + 32 + 68 + 0 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 1500 + 32 + 68 + 0 + 26)) {
                x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Host"]["UserEditable"] = A.load.Bool(
                  ptr + 1500 + 32 + 68 + 0 + 24
                );
              } else {
                delete x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Host"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 1500 + 32 + 68 + 0 + 27)) {
                x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Host"]["DeviceEditable"] = A.load.Bool(
                  ptr + 1500 + 32 + 68 + 0 + 25
                );
              } else {
                delete x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Host"]["DeviceEditable"];
              }
            } else {
              delete x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Host"];
            }
            if (A.load.Bool(ptr + 1500 + 32 + 68 + 32 + 33)) {
              x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"] = {};
              if (A.load.Bool(ptr + 1500 + 32 + 68 + 32 + 26)) {
                x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"]["Active"] = A.load.Int32(
                  ptr + 1500 + 32 + 68 + 32 + 0
                );
              } else {
                delete x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"]["Active"];
              }
              x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"]["Effective"] = A.load.Ref(
                ptr + 1500 + 32 + 68 + 32 + 4,
                undefined
              );
              if (A.load.Bool(ptr + 1500 + 32 + 68 + 32 + 27)) {
                x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"]["UserPolicy"] = A.load.Int32(
                  ptr + 1500 + 32 + 68 + 32 + 8
                );
              } else {
                delete x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"]["UserPolicy"];
              }
              if (A.load.Bool(ptr + 1500 + 32 + 68 + 32 + 28)) {
                x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"]["DevicePolicy"] = A.load.Int32(
                  ptr + 1500 + 32 + 68 + 32 + 12
                );
              } else {
                delete x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"]["DevicePolicy"];
              }
              if (A.load.Bool(ptr + 1500 + 32 + 68 + 32 + 29)) {
                x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"]["UserSetting"] = A.load.Int32(
                  ptr + 1500 + 32 + 68 + 32 + 16
                );
              } else {
                delete x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"]["UserSetting"];
              }
              if (A.load.Bool(ptr + 1500 + 32 + 68 + 32 + 30)) {
                x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"]["SharedSetting"] = A.load.Int32(
                  ptr + 1500 + 32 + 68 + 32 + 20
                );
              } else {
                delete x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"]["SharedSetting"];
              }
              if (A.load.Bool(ptr + 1500 + 32 + 68 + 32 + 31)) {
                x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"]["UserEditable"] = A.load.Bool(
                  ptr + 1500 + 32 + 68 + 32 + 24
                );
              } else {
                delete x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 1500 + 32 + 68 + 32 + 32)) {
                x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"]["DeviceEditable"] = A.load.Bool(
                  ptr + 1500 + 32 + 68 + 32 + 25
                );
              } else {
                delete x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"]["DeviceEditable"];
              }
            } else {
              delete x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"];
            }
          } else {
            delete x["ProxySettings"]["Manual"]["SecureHTTPProxy"];
          }
          if (A.load.Bool(ptr + 1500 + 32 + 136 + 66)) {
            x["ProxySettings"]["Manual"]["FTPProxy"] = {};
            if (A.load.Bool(ptr + 1500 + 32 + 136 + 0 + 28)) {
              x["ProxySettings"]["Manual"]["FTPProxy"]["Host"] = {};
              x["ProxySettings"]["Manual"]["FTPProxy"]["Host"]["Active"] = A.load.Ref(
                ptr + 1500 + 32 + 136 + 0 + 0,
                undefined
              );
              x["ProxySettings"]["Manual"]["FTPProxy"]["Host"]["Effective"] = A.load.Ref(
                ptr + 1500 + 32 + 136 + 0 + 4,
                undefined
              );
              x["ProxySettings"]["Manual"]["FTPProxy"]["Host"]["UserPolicy"] = A.load.Ref(
                ptr + 1500 + 32 + 136 + 0 + 8,
                undefined
              );
              x["ProxySettings"]["Manual"]["FTPProxy"]["Host"]["DevicePolicy"] = A.load.Ref(
                ptr + 1500 + 32 + 136 + 0 + 12,
                undefined
              );
              x["ProxySettings"]["Manual"]["FTPProxy"]["Host"]["UserSetting"] = A.load.Ref(
                ptr + 1500 + 32 + 136 + 0 + 16,
                undefined
              );
              x["ProxySettings"]["Manual"]["FTPProxy"]["Host"]["SharedSetting"] = A.load.Ref(
                ptr + 1500 + 32 + 136 + 0 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 1500 + 32 + 136 + 0 + 26)) {
                x["ProxySettings"]["Manual"]["FTPProxy"]["Host"]["UserEditable"] = A.load.Bool(
                  ptr + 1500 + 32 + 136 + 0 + 24
                );
              } else {
                delete x["ProxySettings"]["Manual"]["FTPProxy"]["Host"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 1500 + 32 + 136 + 0 + 27)) {
                x["ProxySettings"]["Manual"]["FTPProxy"]["Host"]["DeviceEditable"] = A.load.Bool(
                  ptr + 1500 + 32 + 136 + 0 + 25
                );
              } else {
                delete x["ProxySettings"]["Manual"]["FTPProxy"]["Host"]["DeviceEditable"];
              }
            } else {
              delete x["ProxySettings"]["Manual"]["FTPProxy"]["Host"];
            }
            if (A.load.Bool(ptr + 1500 + 32 + 136 + 32 + 33)) {
              x["ProxySettings"]["Manual"]["FTPProxy"]["Port"] = {};
              if (A.load.Bool(ptr + 1500 + 32 + 136 + 32 + 26)) {
                x["ProxySettings"]["Manual"]["FTPProxy"]["Port"]["Active"] = A.load.Int32(
                  ptr + 1500 + 32 + 136 + 32 + 0
                );
              } else {
                delete x["ProxySettings"]["Manual"]["FTPProxy"]["Port"]["Active"];
              }
              x["ProxySettings"]["Manual"]["FTPProxy"]["Port"]["Effective"] = A.load.Ref(
                ptr + 1500 + 32 + 136 + 32 + 4,
                undefined
              );
              if (A.load.Bool(ptr + 1500 + 32 + 136 + 32 + 27)) {
                x["ProxySettings"]["Manual"]["FTPProxy"]["Port"]["UserPolicy"] = A.load.Int32(
                  ptr + 1500 + 32 + 136 + 32 + 8
                );
              } else {
                delete x["ProxySettings"]["Manual"]["FTPProxy"]["Port"]["UserPolicy"];
              }
              if (A.load.Bool(ptr + 1500 + 32 + 136 + 32 + 28)) {
                x["ProxySettings"]["Manual"]["FTPProxy"]["Port"]["DevicePolicy"] = A.load.Int32(
                  ptr + 1500 + 32 + 136 + 32 + 12
                );
              } else {
                delete x["ProxySettings"]["Manual"]["FTPProxy"]["Port"]["DevicePolicy"];
              }
              if (A.load.Bool(ptr + 1500 + 32 + 136 + 32 + 29)) {
                x["ProxySettings"]["Manual"]["FTPProxy"]["Port"]["UserSetting"] = A.load.Int32(
                  ptr + 1500 + 32 + 136 + 32 + 16
                );
              } else {
                delete x["ProxySettings"]["Manual"]["FTPProxy"]["Port"]["UserSetting"];
              }
              if (A.load.Bool(ptr + 1500 + 32 + 136 + 32 + 30)) {
                x["ProxySettings"]["Manual"]["FTPProxy"]["Port"]["SharedSetting"] = A.load.Int32(
                  ptr + 1500 + 32 + 136 + 32 + 20
                );
              } else {
                delete x["ProxySettings"]["Manual"]["FTPProxy"]["Port"]["SharedSetting"];
              }
              if (A.load.Bool(ptr + 1500 + 32 + 136 + 32 + 31)) {
                x["ProxySettings"]["Manual"]["FTPProxy"]["Port"]["UserEditable"] = A.load.Bool(
                  ptr + 1500 + 32 + 136 + 32 + 24
                );
              } else {
                delete x["ProxySettings"]["Manual"]["FTPProxy"]["Port"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 1500 + 32 + 136 + 32 + 32)) {
                x["ProxySettings"]["Manual"]["FTPProxy"]["Port"]["DeviceEditable"] = A.load.Bool(
                  ptr + 1500 + 32 + 136 + 32 + 25
                );
              } else {
                delete x["ProxySettings"]["Manual"]["FTPProxy"]["Port"]["DeviceEditable"];
              }
            } else {
              delete x["ProxySettings"]["Manual"]["FTPProxy"]["Port"];
            }
          } else {
            delete x["ProxySettings"]["Manual"]["FTPProxy"];
          }
          if (A.load.Bool(ptr + 1500 + 32 + 204 + 66)) {
            x["ProxySettings"]["Manual"]["SOCKS"] = {};
            if (A.load.Bool(ptr + 1500 + 32 + 204 + 0 + 28)) {
              x["ProxySettings"]["Manual"]["SOCKS"]["Host"] = {};
              x["ProxySettings"]["Manual"]["SOCKS"]["Host"]["Active"] = A.load.Ref(
                ptr + 1500 + 32 + 204 + 0 + 0,
                undefined
              );
              x["ProxySettings"]["Manual"]["SOCKS"]["Host"]["Effective"] = A.load.Ref(
                ptr + 1500 + 32 + 204 + 0 + 4,
                undefined
              );
              x["ProxySettings"]["Manual"]["SOCKS"]["Host"]["UserPolicy"] = A.load.Ref(
                ptr + 1500 + 32 + 204 + 0 + 8,
                undefined
              );
              x["ProxySettings"]["Manual"]["SOCKS"]["Host"]["DevicePolicy"] = A.load.Ref(
                ptr + 1500 + 32 + 204 + 0 + 12,
                undefined
              );
              x["ProxySettings"]["Manual"]["SOCKS"]["Host"]["UserSetting"] = A.load.Ref(
                ptr + 1500 + 32 + 204 + 0 + 16,
                undefined
              );
              x["ProxySettings"]["Manual"]["SOCKS"]["Host"]["SharedSetting"] = A.load.Ref(
                ptr + 1500 + 32 + 204 + 0 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 1500 + 32 + 204 + 0 + 26)) {
                x["ProxySettings"]["Manual"]["SOCKS"]["Host"]["UserEditable"] = A.load.Bool(
                  ptr + 1500 + 32 + 204 + 0 + 24
                );
              } else {
                delete x["ProxySettings"]["Manual"]["SOCKS"]["Host"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 1500 + 32 + 204 + 0 + 27)) {
                x["ProxySettings"]["Manual"]["SOCKS"]["Host"]["DeviceEditable"] = A.load.Bool(
                  ptr + 1500 + 32 + 204 + 0 + 25
                );
              } else {
                delete x["ProxySettings"]["Manual"]["SOCKS"]["Host"]["DeviceEditable"];
              }
            } else {
              delete x["ProxySettings"]["Manual"]["SOCKS"]["Host"];
            }
            if (A.load.Bool(ptr + 1500 + 32 + 204 + 32 + 33)) {
              x["ProxySettings"]["Manual"]["SOCKS"]["Port"] = {};
              if (A.load.Bool(ptr + 1500 + 32 + 204 + 32 + 26)) {
                x["ProxySettings"]["Manual"]["SOCKS"]["Port"]["Active"] = A.load.Int32(ptr + 1500 + 32 + 204 + 32 + 0);
              } else {
                delete x["ProxySettings"]["Manual"]["SOCKS"]["Port"]["Active"];
              }
              x["ProxySettings"]["Manual"]["SOCKS"]["Port"]["Effective"] = A.load.Ref(
                ptr + 1500 + 32 + 204 + 32 + 4,
                undefined
              );
              if (A.load.Bool(ptr + 1500 + 32 + 204 + 32 + 27)) {
                x["ProxySettings"]["Manual"]["SOCKS"]["Port"]["UserPolicy"] = A.load.Int32(
                  ptr + 1500 + 32 + 204 + 32 + 8
                );
              } else {
                delete x["ProxySettings"]["Manual"]["SOCKS"]["Port"]["UserPolicy"];
              }
              if (A.load.Bool(ptr + 1500 + 32 + 204 + 32 + 28)) {
                x["ProxySettings"]["Manual"]["SOCKS"]["Port"]["DevicePolicy"] = A.load.Int32(
                  ptr + 1500 + 32 + 204 + 32 + 12
                );
              } else {
                delete x["ProxySettings"]["Manual"]["SOCKS"]["Port"]["DevicePolicy"];
              }
              if (A.load.Bool(ptr + 1500 + 32 + 204 + 32 + 29)) {
                x["ProxySettings"]["Manual"]["SOCKS"]["Port"]["UserSetting"] = A.load.Int32(
                  ptr + 1500 + 32 + 204 + 32 + 16
                );
              } else {
                delete x["ProxySettings"]["Manual"]["SOCKS"]["Port"]["UserSetting"];
              }
              if (A.load.Bool(ptr + 1500 + 32 + 204 + 32 + 30)) {
                x["ProxySettings"]["Manual"]["SOCKS"]["Port"]["SharedSetting"] = A.load.Int32(
                  ptr + 1500 + 32 + 204 + 32 + 20
                );
              } else {
                delete x["ProxySettings"]["Manual"]["SOCKS"]["Port"]["SharedSetting"];
              }
              if (A.load.Bool(ptr + 1500 + 32 + 204 + 32 + 31)) {
                x["ProxySettings"]["Manual"]["SOCKS"]["Port"]["UserEditable"] = A.load.Bool(
                  ptr + 1500 + 32 + 204 + 32 + 24
                );
              } else {
                delete x["ProxySettings"]["Manual"]["SOCKS"]["Port"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 1500 + 32 + 204 + 32 + 32)) {
                x["ProxySettings"]["Manual"]["SOCKS"]["Port"]["DeviceEditable"] = A.load.Bool(
                  ptr + 1500 + 32 + 204 + 32 + 25
                );
              } else {
                delete x["ProxySettings"]["Manual"]["SOCKS"]["Port"]["DeviceEditable"];
              }
            } else {
              delete x["ProxySettings"]["Manual"]["SOCKS"]["Port"];
            }
          } else {
            delete x["ProxySettings"]["Manual"]["SOCKS"];
          }
        } else {
          delete x["ProxySettings"]["Manual"];
        }
        if (A.load.Bool(ptr + 1500 + 304 + 28)) {
          x["ProxySettings"]["ExcludeDomains"] = {};
          x["ProxySettings"]["ExcludeDomains"]["Active"] = A.load.Ref(ptr + 1500 + 304 + 0, undefined);
          x["ProxySettings"]["ExcludeDomains"]["Effective"] = A.load.Ref(ptr + 1500 + 304 + 4, undefined);
          x["ProxySettings"]["ExcludeDomains"]["UserPolicy"] = A.load.Ref(ptr + 1500 + 304 + 8, undefined);
          x["ProxySettings"]["ExcludeDomains"]["DevicePolicy"] = A.load.Ref(ptr + 1500 + 304 + 12, undefined);
          x["ProxySettings"]["ExcludeDomains"]["UserSetting"] = A.load.Ref(ptr + 1500 + 304 + 16, undefined);
          x["ProxySettings"]["ExcludeDomains"]["SharedSetting"] = A.load.Ref(ptr + 1500 + 304 + 20, undefined);
          if (A.load.Bool(ptr + 1500 + 304 + 26)) {
            x["ProxySettings"]["ExcludeDomains"]["UserEditable"] = A.load.Bool(ptr + 1500 + 304 + 24);
          } else {
            delete x["ProxySettings"]["ExcludeDomains"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1500 + 304 + 27)) {
            x["ProxySettings"]["ExcludeDomains"]["DeviceEditable"] = A.load.Bool(ptr + 1500 + 304 + 25);
          } else {
            delete x["ProxySettings"]["ExcludeDomains"]["DeviceEditable"];
          }
        } else {
          delete x["ProxySettings"]["ExcludeDomains"];
        }
        if (A.load.Bool(ptr + 1500 + 336 + 28)) {
          x["ProxySettings"]["PAC"] = {};
          x["ProxySettings"]["PAC"]["Active"] = A.load.Ref(ptr + 1500 + 336 + 0, undefined);
          x["ProxySettings"]["PAC"]["Effective"] = A.load.Ref(ptr + 1500 + 336 + 4, undefined);
          x["ProxySettings"]["PAC"]["UserPolicy"] = A.load.Ref(ptr + 1500 + 336 + 8, undefined);
          x["ProxySettings"]["PAC"]["DevicePolicy"] = A.load.Ref(ptr + 1500 + 336 + 12, undefined);
          x["ProxySettings"]["PAC"]["UserSetting"] = A.load.Ref(ptr + 1500 + 336 + 16, undefined);
          x["ProxySettings"]["PAC"]["SharedSetting"] = A.load.Ref(ptr + 1500 + 336 + 20, undefined);
          if (A.load.Bool(ptr + 1500 + 336 + 26)) {
            x["ProxySettings"]["PAC"]["UserEditable"] = A.load.Bool(ptr + 1500 + 336 + 24);
          } else {
            delete x["ProxySettings"]["PAC"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1500 + 336 + 27)) {
            x["ProxySettings"]["PAC"]["DeviceEditable"] = A.load.Bool(ptr + 1500 + 336 + 25);
          } else {
            delete x["ProxySettings"]["PAC"]["DeviceEditable"];
          }
        } else {
          delete x["ProxySettings"]["PAC"];
        }
      } else {
        delete x["ProxySettings"];
      }
      if (A.load.Bool(ptr + 6508)) {
        x["RestrictedConnectivity"] = A.load.Bool(ptr + 1866);
      } else {
        delete x["RestrictedConnectivity"];
      }
      if (A.load.Bool(ptr + 1868 + 193)) {
        x["StaticIPConfig"] = {};
        if (A.load.Bool(ptr + 1868 + 0 + 28)) {
          x["StaticIPConfig"]["Gateway"] = {};
          x["StaticIPConfig"]["Gateway"]["Active"] = A.load.Ref(ptr + 1868 + 0 + 0, undefined);
          x["StaticIPConfig"]["Gateway"]["Effective"] = A.load.Ref(ptr + 1868 + 0 + 4, undefined);
          x["StaticIPConfig"]["Gateway"]["UserPolicy"] = A.load.Ref(ptr + 1868 + 0 + 8, undefined);
          x["StaticIPConfig"]["Gateway"]["DevicePolicy"] = A.load.Ref(ptr + 1868 + 0 + 12, undefined);
          x["StaticIPConfig"]["Gateway"]["UserSetting"] = A.load.Ref(ptr + 1868 + 0 + 16, undefined);
          x["StaticIPConfig"]["Gateway"]["SharedSetting"] = A.load.Ref(ptr + 1868 + 0 + 20, undefined);
          if (A.load.Bool(ptr + 1868 + 0 + 26)) {
            x["StaticIPConfig"]["Gateway"]["UserEditable"] = A.load.Bool(ptr + 1868 + 0 + 24);
          } else {
            delete x["StaticIPConfig"]["Gateway"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1868 + 0 + 27)) {
            x["StaticIPConfig"]["Gateway"]["DeviceEditable"] = A.load.Bool(ptr + 1868 + 0 + 25);
          } else {
            delete x["StaticIPConfig"]["Gateway"]["DeviceEditable"];
          }
        } else {
          delete x["StaticIPConfig"]["Gateway"];
        }
        if (A.load.Bool(ptr + 1868 + 32 + 28)) {
          x["StaticIPConfig"]["IPAddress"] = {};
          x["StaticIPConfig"]["IPAddress"]["Active"] = A.load.Ref(ptr + 1868 + 32 + 0, undefined);
          x["StaticIPConfig"]["IPAddress"]["Effective"] = A.load.Ref(ptr + 1868 + 32 + 4, undefined);
          x["StaticIPConfig"]["IPAddress"]["UserPolicy"] = A.load.Ref(ptr + 1868 + 32 + 8, undefined);
          x["StaticIPConfig"]["IPAddress"]["DevicePolicy"] = A.load.Ref(ptr + 1868 + 32 + 12, undefined);
          x["StaticIPConfig"]["IPAddress"]["UserSetting"] = A.load.Ref(ptr + 1868 + 32 + 16, undefined);
          x["StaticIPConfig"]["IPAddress"]["SharedSetting"] = A.load.Ref(ptr + 1868 + 32 + 20, undefined);
          if (A.load.Bool(ptr + 1868 + 32 + 26)) {
            x["StaticIPConfig"]["IPAddress"]["UserEditable"] = A.load.Bool(ptr + 1868 + 32 + 24);
          } else {
            delete x["StaticIPConfig"]["IPAddress"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1868 + 32 + 27)) {
            x["StaticIPConfig"]["IPAddress"]["DeviceEditable"] = A.load.Bool(ptr + 1868 + 32 + 25);
          } else {
            delete x["StaticIPConfig"]["IPAddress"]["DeviceEditable"];
          }
        } else {
          delete x["StaticIPConfig"]["IPAddress"];
        }
        if (A.load.Bool(ptr + 1868 + 64 + 28)) {
          x["StaticIPConfig"]["NameServers"] = {};
          x["StaticIPConfig"]["NameServers"]["Active"] = A.load.Ref(ptr + 1868 + 64 + 0, undefined);
          x["StaticIPConfig"]["NameServers"]["Effective"] = A.load.Ref(ptr + 1868 + 64 + 4, undefined);
          x["StaticIPConfig"]["NameServers"]["UserPolicy"] = A.load.Ref(ptr + 1868 + 64 + 8, undefined);
          x["StaticIPConfig"]["NameServers"]["DevicePolicy"] = A.load.Ref(ptr + 1868 + 64 + 12, undefined);
          x["StaticIPConfig"]["NameServers"]["UserSetting"] = A.load.Ref(ptr + 1868 + 64 + 16, undefined);
          x["StaticIPConfig"]["NameServers"]["SharedSetting"] = A.load.Ref(ptr + 1868 + 64 + 20, undefined);
          if (A.load.Bool(ptr + 1868 + 64 + 26)) {
            x["StaticIPConfig"]["NameServers"]["UserEditable"] = A.load.Bool(ptr + 1868 + 64 + 24);
          } else {
            delete x["StaticIPConfig"]["NameServers"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1868 + 64 + 27)) {
            x["StaticIPConfig"]["NameServers"]["DeviceEditable"] = A.load.Bool(ptr + 1868 + 64 + 25);
          } else {
            delete x["StaticIPConfig"]["NameServers"]["DeviceEditable"];
          }
        } else {
          delete x["StaticIPConfig"]["NameServers"];
        }
        if (A.load.Bool(ptr + 1868 + 96 + 33)) {
          x["StaticIPConfig"]["RoutingPrefix"] = {};
          if (A.load.Bool(ptr + 1868 + 96 + 26)) {
            x["StaticIPConfig"]["RoutingPrefix"]["Active"] = A.load.Int32(ptr + 1868 + 96 + 0);
          } else {
            delete x["StaticIPConfig"]["RoutingPrefix"]["Active"];
          }
          x["StaticIPConfig"]["RoutingPrefix"]["Effective"] = A.load.Ref(ptr + 1868 + 96 + 4, undefined);
          if (A.load.Bool(ptr + 1868 + 96 + 27)) {
            x["StaticIPConfig"]["RoutingPrefix"]["UserPolicy"] = A.load.Int32(ptr + 1868 + 96 + 8);
          } else {
            delete x["StaticIPConfig"]["RoutingPrefix"]["UserPolicy"];
          }
          if (A.load.Bool(ptr + 1868 + 96 + 28)) {
            x["StaticIPConfig"]["RoutingPrefix"]["DevicePolicy"] = A.load.Int32(ptr + 1868 + 96 + 12);
          } else {
            delete x["StaticIPConfig"]["RoutingPrefix"]["DevicePolicy"];
          }
          if (A.load.Bool(ptr + 1868 + 96 + 29)) {
            x["StaticIPConfig"]["RoutingPrefix"]["UserSetting"] = A.load.Int32(ptr + 1868 + 96 + 16);
          } else {
            delete x["StaticIPConfig"]["RoutingPrefix"]["UserSetting"];
          }
          if (A.load.Bool(ptr + 1868 + 96 + 30)) {
            x["StaticIPConfig"]["RoutingPrefix"]["SharedSetting"] = A.load.Int32(ptr + 1868 + 96 + 20);
          } else {
            delete x["StaticIPConfig"]["RoutingPrefix"]["SharedSetting"];
          }
          if (A.load.Bool(ptr + 1868 + 96 + 31)) {
            x["StaticIPConfig"]["RoutingPrefix"]["UserEditable"] = A.load.Bool(ptr + 1868 + 96 + 24);
          } else {
            delete x["StaticIPConfig"]["RoutingPrefix"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1868 + 96 + 32)) {
            x["StaticIPConfig"]["RoutingPrefix"]["DeviceEditable"] = A.load.Bool(ptr + 1868 + 96 + 25);
          } else {
            delete x["StaticIPConfig"]["RoutingPrefix"]["DeviceEditable"];
          }
        } else {
          delete x["StaticIPConfig"]["RoutingPrefix"];
        }
        if (A.load.Bool(ptr + 1868 + 132 + 28)) {
          x["StaticIPConfig"]["Type"] = {};
          x["StaticIPConfig"]["Type"]["Active"] = A.load.Ref(ptr + 1868 + 132 + 0, undefined);
          x["StaticIPConfig"]["Type"]["Effective"] = A.load.Ref(ptr + 1868 + 132 + 4, undefined);
          x["StaticIPConfig"]["Type"]["UserPolicy"] = A.load.Ref(ptr + 1868 + 132 + 8, undefined);
          x["StaticIPConfig"]["Type"]["DevicePolicy"] = A.load.Ref(ptr + 1868 + 132 + 12, undefined);
          x["StaticIPConfig"]["Type"]["UserSetting"] = A.load.Ref(ptr + 1868 + 132 + 16, undefined);
          x["StaticIPConfig"]["Type"]["SharedSetting"] = A.load.Ref(ptr + 1868 + 132 + 20, undefined);
          if (A.load.Bool(ptr + 1868 + 132 + 26)) {
            x["StaticIPConfig"]["Type"]["UserEditable"] = A.load.Bool(ptr + 1868 + 132 + 24);
          } else {
            delete x["StaticIPConfig"]["Type"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1868 + 132 + 27)) {
            x["StaticIPConfig"]["Type"]["DeviceEditable"] = A.load.Bool(ptr + 1868 + 132 + 25);
          } else {
            delete x["StaticIPConfig"]["Type"]["DeviceEditable"];
          }
        } else {
          delete x["StaticIPConfig"]["Type"];
        }
        if (A.load.Bool(ptr + 1868 + 164 + 28)) {
          x["StaticIPConfig"]["WebProxyAutoDiscoveryUrl"] = {};
          x["StaticIPConfig"]["WebProxyAutoDiscoveryUrl"]["Active"] = A.load.Ref(ptr + 1868 + 164 + 0, undefined);
          x["StaticIPConfig"]["WebProxyAutoDiscoveryUrl"]["Effective"] = A.load.Ref(ptr + 1868 + 164 + 4, undefined);
          x["StaticIPConfig"]["WebProxyAutoDiscoveryUrl"]["UserPolicy"] = A.load.Ref(ptr + 1868 + 164 + 8, undefined);
          x["StaticIPConfig"]["WebProxyAutoDiscoveryUrl"]["DevicePolicy"] = A.load.Ref(
            ptr + 1868 + 164 + 12,
            undefined
          );
          x["StaticIPConfig"]["WebProxyAutoDiscoveryUrl"]["UserSetting"] = A.load.Ref(ptr + 1868 + 164 + 16, undefined);
          x["StaticIPConfig"]["WebProxyAutoDiscoveryUrl"]["SharedSetting"] = A.load.Ref(
            ptr + 1868 + 164 + 20,
            undefined
          );
          if (A.load.Bool(ptr + 1868 + 164 + 26)) {
            x["StaticIPConfig"]["WebProxyAutoDiscoveryUrl"]["UserEditable"] = A.load.Bool(ptr + 1868 + 164 + 24);
          } else {
            delete x["StaticIPConfig"]["WebProxyAutoDiscoveryUrl"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 1868 + 164 + 27)) {
            x["StaticIPConfig"]["WebProxyAutoDiscoveryUrl"]["DeviceEditable"] = A.load.Bool(ptr + 1868 + 164 + 25);
          } else {
            delete x["StaticIPConfig"]["WebProxyAutoDiscoveryUrl"]["DeviceEditable"];
          }
        } else {
          delete x["StaticIPConfig"]["WebProxyAutoDiscoveryUrl"];
        }
      } else {
        delete x["StaticIPConfig"];
      }
      if (A.load.Bool(ptr + 2064 + 37)) {
        x["SavedIPConfig"] = {};
        x["SavedIPConfig"]["Gateway"] = A.load.Ref(ptr + 2064 + 0, undefined);
        x["SavedIPConfig"]["IPAddress"] = A.load.Ref(ptr + 2064 + 4, undefined);
        x["SavedIPConfig"]["ExcludedRoutes"] = A.load.Ref(ptr + 2064 + 8, undefined);
        x["SavedIPConfig"]["IncludedRoutes"] = A.load.Ref(ptr + 2064 + 12, undefined);
        x["SavedIPConfig"]["NameServers"] = A.load.Ref(ptr + 2064 + 16, undefined);
        x["SavedIPConfig"]["SearchDomains"] = A.load.Ref(ptr + 2064 + 20, undefined);
        if (A.load.Bool(ptr + 2064 + 36)) {
          x["SavedIPConfig"]["RoutingPrefix"] = A.load.Int32(ptr + 2064 + 24);
        } else {
          delete x["SavedIPConfig"]["RoutingPrefix"];
        }
        x["SavedIPConfig"]["Type"] = A.load.Ref(ptr + 2064 + 28, undefined);
        x["SavedIPConfig"]["WebProxyAutoDiscoveryUrl"] = A.load.Ref(ptr + 2064 + 32, undefined);
      } else {
        delete x["SavedIPConfig"];
      }
      x["Source"] = A.load.Ref(ptr + 2104, undefined);
      if (A.load.Bool(ptr + 2108 + 19)) {
        x["Tether"] = {};
        if (A.load.Bool(ptr + 2108 + 16)) {
          x["Tether"]["BatteryPercentage"] = A.load.Int32(ptr + 2108 + 0);
        } else {
          delete x["Tether"]["BatteryPercentage"];
        }
        x["Tether"]["Carrier"] = A.load.Ref(ptr + 2108 + 4, undefined);
        if (A.load.Bool(ptr + 2108 + 17)) {
          x["Tether"]["HasConnectedToHost"] = A.load.Bool(ptr + 2108 + 8);
        } else {
          delete x["Tether"]["HasConnectedToHost"];
        }
        if (A.load.Bool(ptr + 2108 + 18)) {
          x["Tether"]["SignalStrength"] = A.load.Int32(ptr + 2108 + 12);
        } else {
          delete x["Tether"]["SignalStrength"];
        }
      } else {
        delete x["Tether"];
      }
      x["Type"] = A.load.Enum(ptr + 2128, ["All", "Cellular", "Ethernet", "Tether", "VPN", "Wireless", "WiFi"]);
      if (A.load.Bool(ptr + 2132 + 3345)) {
        x["VPN"] = {};
        if (A.load.Bool(ptr + 2132 + 0 + 21)) {
          x["VPN"]["AutoConnect"] = {};
          if (A.load.Bool(ptr + 2132 + 0 + 14)) {
            x["VPN"]["AutoConnect"]["Active"] = A.load.Bool(ptr + 2132 + 0 + 0);
          } else {
            delete x["VPN"]["AutoConnect"]["Active"];
          }
          x["VPN"]["AutoConnect"]["Effective"] = A.load.Ref(ptr + 2132 + 0 + 4, undefined);
          if (A.load.Bool(ptr + 2132 + 0 + 15)) {
            x["VPN"]["AutoConnect"]["UserPolicy"] = A.load.Bool(ptr + 2132 + 0 + 8);
          } else {
            delete x["VPN"]["AutoConnect"]["UserPolicy"];
          }
          if (A.load.Bool(ptr + 2132 + 0 + 16)) {
            x["VPN"]["AutoConnect"]["DevicePolicy"] = A.load.Bool(ptr + 2132 + 0 + 9);
          } else {
            delete x["VPN"]["AutoConnect"]["DevicePolicy"];
          }
          if (A.load.Bool(ptr + 2132 + 0 + 17)) {
            x["VPN"]["AutoConnect"]["UserSetting"] = A.load.Bool(ptr + 2132 + 0 + 10);
          } else {
            delete x["VPN"]["AutoConnect"]["UserSetting"];
          }
          if (A.load.Bool(ptr + 2132 + 0 + 18)) {
            x["VPN"]["AutoConnect"]["SharedSetting"] = A.load.Bool(ptr + 2132 + 0 + 11);
          } else {
            delete x["VPN"]["AutoConnect"]["SharedSetting"];
          }
          if (A.load.Bool(ptr + 2132 + 0 + 19)) {
            x["VPN"]["AutoConnect"]["UserEditable"] = A.load.Bool(ptr + 2132 + 0 + 12);
          } else {
            delete x["VPN"]["AutoConnect"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 2132 + 0 + 20)) {
            x["VPN"]["AutoConnect"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 0 + 13);
          } else {
            delete x["VPN"]["AutoConnect"]["DeviceEditable"];
          }
        } else {
          delete x["VPN"]["AutoConnect"];
        }
        if (A.load.Bool(ptr + 2132 + 24 + 28)) {
          x["VPN"]["Host"] = {};
          x["VPN"]["Host"]["Active"] = A.load.Ref(ptr + 2132 + 24 + 0, undefined);
          x["VPN"]["Host"]["Effective"] = A.load.Ref(ptr + 2132 + 24 + 4, undefined);
          x["VPN"]["Host"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 24 + 8, undefined);
          x["VPN"]["Host"]["DevicePolicy"] = A.load.Ref(ptr + 2132 + 24 + 12, undefined);
          x["VPN"]["Host"]["UserSetting"] = A.load.Ref(ptr + 2132 + 24 + 16, undefined);
          x["VPN"]["Host"]["SharedSetting"] = A.load.Ref(ptr + 2132 + 24 + 20, undefined);
          if (A.load.Bool(ptr + 2132 + 24 + 26)) {
            x["VPN"]["Host"]["UserEditable"] = A.load.Bool(ptr + 2132 + 24 + 24);
          } else {
            delete x["VPN"]["Host"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 2132 + 24 + 27)) {
            x["VPN"]["Host"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 24 + 25);
          } else {
            delete x["VPN"]["Host"]["DeviceEditable"];
          }
        } else {
          delete x["VPN"]["Host"];
        }
        if (A.load.Bool(ptr + 2132 + 56 + 1562)) {
          x["VPN"]["IPsec"] = {};
          if (A.load.Bool(ptr + 2132 + 56 + 0 + 28)) {
            x["VPN"]["IPsec"]["AuthenticationType"] = {};
            x["VPN"]["IPsec"]["AuthenticationType"]["Active"] = A.load.Ref(ptr + 2132 + 56 + 0 + 0, undefined);
            x["VPN"]["IPsec"]["AuthenticationType"]["Effective"] = A.load.Ref(ptr + 2132 + 56 + 0 + 4, undefined);
            x["VPN"]["IPsec"]["AuthenticationType"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 56 + 0 + 8, undefined);
            x["VPN"]["IPsec"]["AuthenticationType"]["DevicePolicy"] = A.load.Ref(ptr + 2132 + 56 + 0 + 12, undefined);
            x["VPN"]["IPsec"]["AuthenticationType"]["UserSetting"] = A.load.Ref(ptr + 2132 + 56 + 0 + 16, undefined);
            x["VPN"]["IPsec"]["AuthenticationType"]["SharedSetting"] = A.load.Ref(ptr + 2132 + 56 + 0 + 20, undefined);
            if (A.load.Bool(ptr + 2132 + 56 + 0 + 26)) {
              x["VPN"]["IPsec"]["AuthenticationType"]["UserEditable"] = A.load.Bool(ptr + 2132 + 56 + 0 + 24);
            } else {
              delete x["VPN"]["IPsec"]["AuthenticationType"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 0 + 27)) {
              x["VPN"]["IPsec"]["AuthenticationType"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 56 + 0 + 25);
            } else {
              delete x["VPN"]["IPsec"]["AuthenticationType"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["IPsec"]["AuthenticationType"];
          }
          if (A.load.Bool(ptr + 2132 + 56 + 32 + 318)) {
            x["VPN"]["IPsec"]["ClientCertPattern"] = {};
            if (A.load.Bool(ptr + 2132 + 56 + 32 + 0 + 28)) {
              x["VPN"]["IPsec"]["ClientCertPattern"]["EnrollmentURI"] = {};
              x["VPN"]["IPsec"]["ClientCertPattern"]["EnrollmentURI"]["Active"] = A.load.Ref(
                ptr + 2132 + 56 + 32 + 0 + 0,
                undefined
              );
              x["VPN"]["IPsec"]["ClientCertPattern"]["EnrollmentURI"]["Effective"] = A.load.Ref(
                ptr + 2132 + 56 + 32 + 0 + 4,
                undefined
              );
              x["VPN"]["IPsec"]["ClientCertPattern"]["EnrollmentURI"]["UserPolicy"] = A.load.Ref(
                ptr + 2132 + 56 + 32 + 0 + 8,
                undefined
              );
              x["VPN"]["IPsec"]["ClientCertPattern"]["EnrollmentURI"]["DevicePolicy"] = A.load.Ref(
                ptr + 2132 + 56 + 32 + 0 + 12,
                undefined
              );
              x["VPN"]["IPsec"]["ClientCertPattern"]["EnrollmentURI"]["UserSetting"] = A.load.Ref(
                ptr + 2132 + 56 + 32 + 0 + 16,
                undefined
              );
              x["VPN"]["IPsec"]["ClientCertPattern"]["EnrollmentURI"]["SharedSetting"] = A.load.Ref(
                ptr + 2132 + 56 + 32 + 0 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 2132 + 56 + 32 + 0 + 26)) {
                x["VPN"]["IPsec"]["ClientCertPattern"]["EnrollmentURI"]["UserEditable"] = A.load.Bool(
                  ptr + 2132 + 56 + 32 + 0 + 24
                );
              } else {
                delete x["VPN"]["IPsec"]["ClientCertPattern"]["EnrollmentURI"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 32 + 0 + 27)) {
                x["VPN"]["IPsec"]["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"] = A.load.Bool(
                  ptr + 2132 + 56 + 32 + 0 + 25
                );
              } else {
                delete x["VPN"]["IPsec"]["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"];
              }
            } else {
              delete x["VPN"]["IPsec"]["ClientCertPattern"]["EnrollmentURI"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 32 + 32 + 125)) {
              x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"] = {};
              if (A.load.Bool(ptr + 2132 + 56 + 32 + 32 + 0 + 28)) {
                x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"] = {};
                x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]["Active"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 32 + 0 + 0,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]["Effective"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 32 + 0 + 4,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserPolicy"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 32 + 0 + 8,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]["DevicePolicy"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 32 + 0 + 12,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserSetting"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 32 + 0 + 16,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]["SharedSetting"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 32 + 0 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 2132 + 56 + 32 + 32 + 0 + 26)) {
                  x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"] = A.load.Bool(
                    ptr + 2132 + 56 + 32 + 32 + 0 + 24
                  );
                } else {
                  delete x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 2132 + 56 + 32 + 32 + 0 + 27)) {
                  x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"] = A.load.Bool(
                    ptr + 2132 + 56 + 32 + 32 + 0 + 25
                  );
                } else {
                  delete x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"];
                }
              } else {
                delete x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 32 + 32 + 32 + 28)) {
                x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"] = {};
                x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]["Active"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 32 + 32 + 0,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]["Effective"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 32 + 32 + 4,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]["UserPolicy"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 32 + 32 + 8,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]["DevicePolicy"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 32 + 32 + 12,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]["UserSetting"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 32 + 32 + 16,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]["SharedSetting"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 32 + 32 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 2132 + 56 + 32 + 32 + 32 + 26)) {
                  x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"] = A.load.Bool(
                    ptr + 2132 + 56 + 32 + 32 + 32 + 24
                  );
                } else {
                  delete x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 2132 + 56 + 32 + 32 + 32 + 27)) {
                  x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"] = A.load.Bool(
                    ptr + 2132 + 56 + 32 + 32 + 32 + 25
                  );
                } else {
                  delete x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"];
                }
              } else {
                delete x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 32 + 32 + 64 + 28)) {
                x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"] = {};
                x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]["Active"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 32 + 64 + 0,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]["Effective"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 32 + 64 + 4,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]["UserPolicy"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 32 + 64 + 8,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]["DevicePolicy"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 32 + 64 + 12,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]["UserSetting"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 32 + 64 + 16,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]["SharedSetting"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 32 + 64 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 2132 + 56 + 32 + 32 + 64 + 26)) {
                  x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"] = A.load.Bool(
                    ptr + 2132 + 56 + 32 + 32 + 64 + 24
                  );
                } else {
                  delete x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 2132 + 56 + 32 + 32 + 64 + 27)) {
                  x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"] = A.load.Bool(
                    ptr + 2132 + 56 + 32 + 32 + 64 + 25
                  );
                } else {
                  delete x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"];
                }
              } else {
                delete x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 32 + 32 + 96 + 28)) {
                x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = {};
                x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Active"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 32 + 96 + 0,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Effective"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 32 + 96 + 4,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserPolicy"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 32 + 96 + 8,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DevicePolicy"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 32 + 96 + 12,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserSetting"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 32 + 96 + 16,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["SharedSetting"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 32 + 96 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 2132 + 56 + 32 + 32 + 96 + 26)) {
                  x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"] = A.load.Bool(
                    ptr + 2132 + 56 + 32 + 32 + 96 + 24
                  );
                } else {
                  delete x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 2132 + 56 + 32 + 32 + 96 + 27)) {
                  x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"] =
                    A.load.Bool(ptr + 2132 + 56 + 32 + 32 + 96 + 25);
                } else {
                  delete x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"];
                }
              } else {
                delete x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"];
              }
            } else {
              delete x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 32 + 160 + 28)) {
              x["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCARef"] = {};
              x["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCARef"]["Active"] = A.load.Ref(
                ptr + 2132 + 56 + 32 + 160 + 0,
                undefined
              );
              x["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCARef"]["Effective"] = A.load.Ref(
                ptr + 2132 + 56 + 32 + 160 + 4,
                undefined
              );
              x["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCARef"]["UserPolicy"] = A.load.Ref(
                ptr + 2132 + 56 + 32 + 160 + 8,
                undefined
              );
              x["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCARef"]["DevicePolicy"] = A.load.Ref(
                ptr + 2132 + 56 + 32 + 160 + 12,
                undefined
              );
              x["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCARef"]["UserSetting"] = A.load.Ref(
                ptr + 2132 + 56 + 32 + 160 + 16,
                undefined
              );
              x["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCARef"]["SharedSetting"] = A.load.Ref(
                ptr + 2132 + 56 + 32 + 160 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 2132 + 56 + 32 + 160 + 26)) {
                x["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCARef"]["UserEditable"] = A.load.Bool(
                  ptr + 2132 + 56 + 32 + 160 + 24
                );
              } else {
                delete x["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCARef"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 32 + 160 + 27)) {
                x["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"] = A.load.Bool(
                  ptr + 2132 + 56 + 32 + 160 + 25
                );
              } else {
                delete x["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"];
              }
            } else {
              delete x["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCARef"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 32 + 192 + 125)) {
              x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"] = {};
              if (A.load.Bool(ptr + 2132 + 56 + 32 + 192 + 0 + 28)) {
                x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"] = {};
                x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]["Active"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 192 + 0 + 0,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]["Effective"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 192 + 0 + 4,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]["UserPolicy"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 192 + 0 + 8,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]["DevicePolicy"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 192 + 0 + 12,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]["UserSetting"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 192 + 0 + 16,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]["SharedSetting"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 192 + 0 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 2132 + 56 + 32 + 192 + 0 + 26)) {
                  x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"] = A.load.Bool(
                    ptr + 2132 + 56 + 32 + 192 + 0 + 24
                  );
                } else {
                  delete x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 2132 + 56 + 32 + 192 + 0 + 27)) {
                  x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"] = A.load.Bool(
                    ptr + 2132 + 56 + 32 + 192 + 0 + 25
                  );
                } else {
                  delete x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"];
                }
              } else {
                delete x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 32 + 192 + 32 + 28)) {
                x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Locality"] = {};
                x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]["Active"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 192 + 32 + 0,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]["Effective"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 192 + 32 + 4,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]["UserPolicy"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 192 + 32 + 8,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]["DevicePolicy"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 192 + 32 + 12,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]["UserSetting"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 192 + 32 + 16,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]["SharedSetting"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 192 + 32 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 2132 + 56 + 32 + 192 + 32 + 26)) {
                  x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"] = A.load.Bool(
                    ptr + 2132 + 56 + 32 + 192 + 32 + 24
                  );
                } else {
                  delete x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 2132 + 56 + 32 + 192 + 32 + 27)) {
                  x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"] = A.load.Bool(
                    ptr + 2132 + 56 + 32 + 192 + 32 + 25
                  );
                } else {
                  delete x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"];
                }
              } else {
                delete x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Locality"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 32 + 192 + 64 + 28)) {
                x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Organization"] = {};
                x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]["Active"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 192 + 64 + 0,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]["Effective"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 192 + 64 + 4,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]["UserPolicy"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 192 + 64 + 8,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]["DevicePolicy"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 192 + 64 + 12,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]["UserSetting"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 192 + 64 + 16,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]["SharedSetting"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 192 + 64 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 2132 + 56 + 32 + 192 + 64 + 26)) {
                  x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"] = A.load.Bool(
                    ptr + 2132 + 56 + 32 + 192 + 64 + 24
                  );
                } else {
                  delete x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 2132 + 56 + 32 + 192 + 64 + 27)) {
                  x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"] = A.load.Bool(
                    ptr + 2132 + 56 + 32 + 192 + 64 + 25
                  );
                } else {
                  delete x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"];
                }
              } else {
                delete x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Organization"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 32 + 192 + 96 + 28)) {
                x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = {};
                x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Active"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 192 + 96 + 0,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Effective"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 192 + 96 + 4,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserPolicy"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 192 + 96 + 8,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DevicePolicy"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 192 + 96 + 12,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserSetting"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 192 + 96 + 16,
                  undefined
                );
                x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["SharedSetting"] = A.load.Ref(
                  ptr + 2132 + 56 + 32 + 192 + 96 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 2132 + 56 + 32 + 192 + 96 + 26)) {
                  x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"] = A.load.Bool(
                    ptr + 2132 + 56 + 32 + 192 + 96 + 24
                  );
                } else {
                  delete x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 2132 + 56 + 32 + 192 + 96 + 27)) {
                  x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"] =
                    A.load.Bool(ptr + 2132 + 56 + 32 + 192 + 96 + 25);
                } else {
                  delete x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"];
                }
              } else {
                delete x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"];
              }
            } else {
              delete x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"];
            }
          } else {
            delete x["VPN"]["IPsec"]["ClientCertPattern"];
          }
          if (A.load.Bool(ptr + 2132 + 56 + 352 + 28)) {
            x["VPN"]["IPsec"]["ClientCertPKCS11Id"] = {};
            x["VPN"]["IPsec"]["ClientCertPKCS11Id"]["Active"] = A.load.Ref(ptr + 2132 + 56 + 352 + 0, undefined);
            x["VPN"]["IPsec"]["ClientCertPKCS11Id"]["Effective"] = A.load.Ref(ptr + 2132 + 56 + 352 + 4, undefined);
            x["VPN"]["IPsec"]["ClientCertPKCS11Id"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 56 + 352 + 8, undefined);
            x["VPN"]["IPsec"]["ClientCertPKCS11Id"]["DevicePolicy"] = A.load.Ref(ptr + 2132 + 56 + 352 + 12, undefined);
            x["VPN"]["IPsec"]["ClientCertPKCS11Id"]["UserSetting"] = A.load.Ref(ptr + 2132 + 56 + 352 + 16, undefined);
            x["VPN"]["IPsec"]["ClientCertPKCS11Id"]["SharedSetting"] = A.load.Ref(
              ptr + 2132 + 56 + 352 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 2132 + 56 + 352 + 26)) {
              x["VPN"]["IPsec"]["ClientCertPKCS11Id"]["UserEditable"] = A.load.Bool(ptr + 2132 + 56 + 352 + 24);
            } else {
              delete x["VPN"]["IPsec"]["ClientCertPKCS11Id"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 352 + 27)) {
              x["VPN"]["IPsec"]["ClientCertPKCS11Id"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 56 + 352 + 25);
            } else {
              delete x["VPN"]["IPsec"]["ClientCertPKCS11Id"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["IPsec"]["ClientCertPKCS11Id"];
          }
          if (A.load.Bool(ptr + 2132 + 56 + 384 + 28)) {
            x["VPN"]["IPsec"]["ClientCertProvisioningProfileId"] = {};
            x["VPN"]["IPsec"]["ClientCertProvisioningProfileId"]["Active"] = A.load.Ref(
              ptr + 2132 + 56 + 384 + 0,
              undefined
            );
            x["VPN"]["IPsec"]["ClientCertProvisioningProfileId"]["Effective"] = A.load.Ref(
              ptr + 2132 + 56 + 384 + 4,
              undefined
            );
            x["VPN"]["IPsec"]["ClientCertProvisioningProfileId"]["UserPolicy"] = A.load.Ref(
              ptr + 2132 + 56 + 384 + 8,
              undefined
            );
            x["VPN"]["IPsec"]["ClientCertProvisioningProfileId"]["DevicePolicy"] = A.load.Ref(
              ptr + 2132 + 56 + 384 + 12,
              undefined
            );
            x["VPN"]["IPsec"]["ClientCertProvisioningProfileId"]["UserSetting"] = A.load.Ref(
              ptr + 2132 + 56 + 384 + 16,
              undefined
            );
            x["VPN"]["IPsec"]["ClientCertProvisioningProfileId"]["SharedSetting"] = A.load.Ref(
              ptr + 2132 + 56 + 384 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 2132 + 56 + 384 + 26)) {
              x["VPN"]["IPsec"]["ClientCertProvisioningProfileId"]["UserEditable"] = A.load.Bool(
                ptr + 2132 + 56 + 384 + 24
              );
            } else {
              delete x["VPN"]["IPsec"]["ClientCertProvisioningProfileId"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 384 + 27)) {
              x["VPN"]["IPsec"]["ClientCertProvisioningProfileId"]["DeviceEditable"] = A.load.Bool(
                ptr + 2132 + 56 + 384 + 25
              );
            } else {
              delete x["VPN"]["IPsec"]["ClientCertProvisioningProfileId"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["IPsec"]["ClientCertProvisioningProfileId"];
          }
          if (A.load.Bool(ptr + 2132 + 56 + 416 + 28)) {
            x["VPN"]["IPsec"]["ClientCertRef"] = {};
            x["VPN"]["IPsec"]["ClientCertRef"]["Active"] = A.load.Ref(ptr + 2132 + 56 + 416 + 0, undefined);
            x["VPN"]["IPsec"]["ClientCertRef"]["Effective"] = A.load.Ref(ptr + 2132 + 56 + 416 + 4, undefined);
            x["VPN"]["IPsec"]["ClientCertRef"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 56 + 416 + 8, undefined);
            x["VPN"]["IPsec"]["ClientCertRef"]["DevicePolicy"] = A.load.Ref(ptr + 2132 + 56 + 416 + 12, undefined);
            x["VPN"]["IPsec"]["ClientCertRef"]["UserSetting"] = A.load.Ref(ptr + 2132 + 56 + 416 + 16, undefined);
            x["VPN"]["IPsec"]["ClientCertRef"]["SharedSetting"] = A.load.Ref(ptr + 2132 + 56 + 416 + 20, undefined);
            if (A.load.Bool(ptr + 2132 + 56 + 416 + 26)) {
              x["VPN"]["IPsec"]["ClientCertRef"]["UserEditable"] = A.load.Bool(ptr + 2132 + 56 + 416 + 24);
            } else {
              delete x["VPN"]["IPsec"]["ClientCertRef"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 416 + 27)) {
              x["VPN"]["IPsec"]["ClientCertRef"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 56 + 416 + 25);
            } else {
              delete x["VPN"]["IPsec"]["ClientCertRef"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["IPsec"]["ClientCertRef"];
          }
          if (A.load.Bool(ptr + 2132 + 56 + 448 + 28)) {
            x["VPN"]["IPsec"]["ClientCertType"] = {};
            x["VPN"]["IPsec"]["ClientCertType"]["Active"] = A.load.Ref(ptr + 2132 + 56 + 448 + 0, undefined);
            x["VPN"]["IPsec"]["ClientCertType"]["Effective"] = A.load.Ref(ptr + 2132 + 56 + 448 + 4, undefined);
            x["VPN"]["IPsec"]["ClientCertType"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 56 + 448 + 8, undefined);
            x["VPN"]["IPsec"]["ClientCertType"]["DevicePolicy"] = A.load.Ref(ptr + 2132 + 56 + 448 + 12, undefined);
            x["VPN"]["IPsec"]["ClientCertType"]["UserSetting"] = A.load.Ref(ptr + 2132 + 56 + 448 + 16, undefined);
            x["VPN"]["IPsec"]["ClientCertType"]["SharedSetting"] = A.load.Ref(ptr + 2132 + 56 + 448 + 20, undefined);
            if (A.load.Bool(ptr + 2132 + 56 + 448 + 26)) {
              x["VPN"]["IPsec"]["ClientCertType"]["UserEditable"] = A.load.Bool(ptr + 2132 + 56 + 448 + 24);
            } else {
              delete x["VPN"]["IPsec"]["ClientCertType"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 448 + 27)) {
              x["VPN"]["IPsec"]["ClientCertType"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 56 + 448 + 25);
            } else {
              delete x["VPN"]["IPsec"]["ClientCertType"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["IPsec"]["ClientCertType"];
          }
          if (A.load.Bool(ptr + 2132 + 56 + 480 + 806)) {
            x["VPN"]["IPsec"]["EAP"] = {};
            if (A.load.Bool(ptr + 2132 + 56 + 480 + 0 + 28)) {
              x["VPN"]["IPsec"]["EAP"]["AnonymousIdentity"] = {};
              x["VPN"]["IPsec"]["EAP"]["AnonymousIdentity"]["Active"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 0 + 0,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["AnonymousIdentity"]["Effective"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 0 + 4,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["AnonymousIdentity"]["UserPolicy"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 0 + 8,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["AnonymousIdentity"]["DevicePolicy"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 0 + 12,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["AnonymousIdentity"]["UserSetting"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 0 + 16,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["AnonymousIdentity"]["SharedSetting"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 0 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 0 + 26)) {
                x["VPN"]["IPsec"]["EAP"]["AnonymousIdentity"]["UserEditable"] = A.load.Bool(
                  ptr + 2132 + 56 + 480 + 0 + 24
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["AnonymousIdentity"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 0 + 27)) {
                x["VPN"]["IPsec"]["EAP"]["AnonymousIdentity"]["DeviceEditable"] = A.load.Bool(
                  ptr + 2132 + 56 + 480 + 0 + 25
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["AnonymousIdentity"]["DeviceEditable"];
              }
            } else {
              delete x["VPN"]["IPsec"]["EAP"]["AnonymousIdentity"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 318)) {
              x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"] = {};
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 0 + 28)) {
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] = {};
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["Active"] = A.load.Ref(
                  ptr + 2132 + 56 + 480 + 32 + 0 + 0,
                  undefined
                );
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["Effective"] = A.load.Ref(
                  ptr + 2132 + 56 + 480 + 32 + 0 + 4,
                  undefined
                );
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserPolicy"] = A.load.Ref(
                  ptr + 2132 + 56 + 480 + 32 + 0 + 8,
                  undefined
                );
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["DevicePolicy"] = A.load.Ref(
                  ptr + 2132 + 56 + 480 + 32 + 0 + 12,
                  undefined
                );
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserSetting"] = A.load.Ref(
                  ptr + 2132 + 56 + 480 + 32 + 0 + 16,
                  undefined
                );
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["SharedSetting"] = A.load.Ref(
                  ptr + 2132 + 56 + 480 + 32 + 0 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 0 + 26)) {
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserEditable"] = A.load.Bool(
                    ptr + 2132 + 56 + 480 + 32 + 0 + 24
                  );
                } else {
                  delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 0 + 27)) {
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"] = A.load.Bool(
                    ptr + 2132 + 56 + 480 + 32 + 0 + 25
                  );
                } else {
                  delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"];
                }
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 125)) {
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"] = {};
                if (A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 28)) {
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] = {};
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["Active"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 0,
                    undefined
                  );
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["Effective"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 4,
                    undefined
                  );
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserPolicy"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 8,
                    undefined
                  );
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["DevicePolicy"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 12,
                    undefined
                  );
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserSetting"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 16,
                    undefined
                  );
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["SharedSetting"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 20,
                    undefined
                  );
                  if (A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 26)) {
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"] = A.load.Bool(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 24
                    );
                  } else {
                    delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"];
                  }
                  if (A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 27)) {
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"] =
                      A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 0 + 25);
                  } else {
                    delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"];
                  }
                } else {
                  delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"];
                }
                if (A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 28)) {
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] = {};
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["Active"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 0,
                    undefined
                  );
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["Effective"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 4,
                    undefined
                  );
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserPolicy"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 8,
                    undefined
                  );
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["DevicePolicy"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 12,
                    undefined
                  );
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserSetting"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 16,
                    undefined
                  );
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["SharedSetting"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 20,
                    undefined
                  );
                  if (A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 26)) {
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"] = A.load.Bool(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 24
                    );
                  } else {
                    delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"];
                  }
                  if (A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 27)) {
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"] = A.load.Bool(
                      ptr + 2132 + 56 + 480 + 32 + 32 + 32 + 25
                    );
                  } else {
                    delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"];
                  }
                } else {
                  delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"];
                }
                if (A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 28)) {
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] = {};
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["Active"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 0,
                    undefined
                  );
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["Effective"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 4,
                    undefined
                  );
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserPolicy"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 8,
                    undefined
                  );
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["DevicePolicy"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 12,
                    undefined
                  );
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserSetting"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 16,
                    undefined
                  );
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["SharedSetting"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 20,
                    undefined
                  );
                  if (A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 26)) {
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"] =
                      A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 24);
                  } else {
                    delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"];
                  }
                  if (A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 27)) {
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"] =
                      A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 64 + 25);
                  } else {
                    delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"];
                  }
                } else {
                  delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"];
                }
                if (A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 28)) {
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = {};
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Active"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 0,
                    undefined
                  );
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Effective"] =
                    A.load.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 4, undefined);
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserPolicy"] =
                    A.load.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 8, undefined);
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DevicePolicy"] =
                    A.load.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 12, undefined);
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserSetting"] =
                    A.load.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 16, undefined);
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["SharedSetting"] =
                    A.load.Ref(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 20, undefined);
                  if (A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 26)) {
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"] =
                      A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 24);
                  } else {
                    delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"][
                      "UserEditable"
                    ];
                  }
                  if (A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 27)) {
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"] =
                      A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 32 + 96 + 25);
                  } else {
                    delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"][
                      "DeviceEditable"
                    ];
                  }
                } else {
                  delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"];
                }
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 160 + 28)) {
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"] = {};
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["Active"] = A.load.Ref(
                  ptr + 2132 + 56 + 480 + 32 + 160 + 0,
                  undefined
                );
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["Effective"] = A.load.Ref(
                  ptr + 2132 + 56 + 480 + 32 + 160 + 4,
                  undefined
                );
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserPolicy"] = A.load.Ref(
                  ptr + 2132 + 56 + 480 + 32 + 160 + 8,
                  undefined
                );
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["DevicePolicy"] = A.load.Ref(
                  ptr + 2132 + 56 + 480 + 32 + 160 + 12,
                  undefined
                );
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserSetting"] = A.load.Ref(
                  ptr + 2132 + 56 + 480 + 32 + 160 + 16,
                  undefined
                );
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["SharedSetting"] = A.load.Ref(
                  ptr + 2132 + 56 + 480 + 32 + 160 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 160 + 26)) {
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserEditable"] = A.load.Bool(
                    ptr + 2132 + 56 + 480 + 32 + 160 + 24
                  );
                } else {
                  delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 160 + 27)) {
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"] = A.load.Bool(
                    ptr + 2132 + 56 + 480 + 32 + 160 + 25
                  );
                } else {
                  delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"];
                }
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 125)) {
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"] = {};
                if (A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 28)) {
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] = {};
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["Active"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 0,
                    undefined
                  );
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["Effective"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 4,
                    undefined
                  );
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserPolicy"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 8,
                    undefined
                  );
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["DevicePolicy"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 12,
                    undefined
                  );
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserSetting"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 16,
                    undefined
                  );
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["SharedSetting"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 20,
                    undefined
                  );
                  if (A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 26)) {
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"] =
                      A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 24);
                  } else {
                    delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"];
                  }
                  if (A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 27)) {
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"] =
                      A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 0 + 25);
                  } else {
                    delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"];
                  }
                } else {
                  delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"];
                }
                if (A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 28)) {
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"] = {};
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["Active"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 0,
                    undefined
                  );
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["Effective"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 4,
                    undefined
                  );
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserPolicy"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 8,
                    undefined
                  );
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["DevicePolicy"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 12,
                    undefined
                  );
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserSetting"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 16,
                    undefined
                  );
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["SharedSetting"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 20,
                    undefined
                  );
                  if (A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 26)) {
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"] = A.load.Bool(
                      ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 24
                    );
                  } else {
                    delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"];
                  }
                  if (A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 27)) {
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"] =
                      A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 32 + 25);
                  } else {
                    delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"];
                  }
                } else {
                  delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"];
                }
                if (A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 28)) {
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"] = {};
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["Active"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 0,
                    undefined
                  );
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["Effective"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 4,
                    undefined
                  );
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserPolicy"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 8,
                    undefined
                  );
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["DevicePolicy"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 12,
                    undefined
                  );
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserSetting"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 16,
                    undefined
                  );
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["SharedSetting"] =
                    A.load.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 20, undefined);
                  if (A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 26)) {
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"] =
                      A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 24);
                  } else {
                    delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"];
                  }
                  if (A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 27)) {
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"] =
                      A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 64 + 25);
                  } else {
                    delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"];
                  }
                } else {
                  delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"];
                }
                if (A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 28)) {
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = {};
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Active"] = A.load.Ref(
                    ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 0,
                    undefined
                  );
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Effective"] =
                    A.load.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 4, undefined);
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserPolicy"] =
                    A.load.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 8, undefined);
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DevicePolicy"] =
                    A.load.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 12, undefined);
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserSetting"] =
                    A.load.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 16, undefined);
                  x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["SharedSetting"] =
                    A.load.Ref(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 20, undefined);
                  if (A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 26)) {
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"] =
                      A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 24);
                  } else {
                    delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"][
                      "UserEditable"
                    ];
                  }
                  if (A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 27)) {
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"] =
                      A.load.Bool(ptr + 2132 + 56 + 480 + 32 + 192 + 96 + 25);
                  } else {
                    delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"][
                      "DeviceEditable"
                    ];
                  }
                } else {
                  delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"];
                }
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"];
              }
            } else {
              delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 480 + 352 + 28)) {
              x["VPN"]["IPsec"]["EAP"]["ClientCertPKCS11Id"] = {};
              x["VPN"]["IPsec"]["EAP"]["ClientCertPKCS11Id"]["Active"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 352 + 0,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["ClientCertPKCS11Id"]["Effective"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 352 + 4,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["ClientCertPKCS11Id"]["UserPolicy"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 352 + 8,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["ClientCertPKCS11Id"]["DevicePolicy"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 352 + 12,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["ClientCertPKCS11Id"]["UserSetting"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 352 + 16,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["ClientCertPKCS11Id"]["SharedSetting"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 352 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 352 + 26)) {
                x["VPN"]["IPsec"]["EAP"]["ClientCertPKCS11Id"]["UserEditable"] = A.load.Bool(
                  ptr + 2132 + 56 + 480 + 352 + 24
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["ClientCertPKCS11Id"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 352 + 27)) {
                x["VPN"]["IPsec"]["EAP"]["ClientCertPKCS11Id"]["DeviceEditable"] = A.load.Bool(
                  ptr + 2132 + 56 + 480 + 352 + 25
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["ClientCertPKCS11Id"]["DeviceEditable"];
              }
            } else {
              delete x["VPN"]["IPsec"]["EAP"]["ClientCertPKCS11Id"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 480 + 384 + 28)) {
              x["VPN"]["IPsec"]["EAP"]["ClientCertProvisioningProfileId"] = {};
              x["VPN"]["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]["Active"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 384 + 0,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]["Effective"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 384 + 4,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]["UserPolicy"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 384 + 8,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]["DevicePolicy"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 384 + 12,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]["UserSetting"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 384 + 16,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]["SharedSetting"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 384 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 384 + 26)) {
                x["VPN"]["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]["UserEditable"] = A.load.Bool(
                  ptr + 2132 + 56 + 480 + 384 + 24
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 384 + 27)) {
                x["VPN"]["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]["DeviceEditable"] = A.load.Bool(
                  ptr + 2132 + 56 + 480 + 384 + 25
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]["DeviceEditable"];
              }
            } else {
              delete x["VPN"]["IPsec"]["EAP"]["ClientCertProvisioningProfileId"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 480 + 416 + 28)) {
              x["VPN"]["IPsec"]["EAP"]["ClientCertRef"] = {};
              x["VPN"]["IPsec"]["EAP"]["ClientCertRef"]["Active"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 416 + 0,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["ClientCertRef"]["Effective"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 416 + 4,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["ClientCertRef"]["UserPolicy"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 416 + 8,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["ClientCertRef"]["DevicePolicy"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 416 + 12,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["ClientCertRef"]["UserSetting"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 416 + 16,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["ClientCertRef"]["SharedSetting"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 416 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 416 + 26)) {
                x["VPN"]["IPsec"]["EAP"]["ClientCertRef"]["UserEditable"] = A.load.Bool(
                  ptr + 2132 + 56 + 480 + 416 + 24
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["ClientCertRef"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 416 + 27)) {
                x["VPN"]["IPsec"]["EAP"]["ClientCertRef"]["DeviceEditable"] = A.load.Bool(
                  ptr + 2132 + 56 + 480 + 416 + 25
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["ClientCertRef"]["DeviceEditable"];
              }
            } else {
              delete x["VPN"]["IPsec"]["EAP"]["ClientCertRef"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 480 + 448 + 28)) {
              x["VPN"]["IPsec"]["EAP"]["ClientCertType"] = {};
              x["VPN"]["IPsec"]["EAP"]["ClientCertType"]["Active"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 448 + 0,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["ClientCertType"]["Effective"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 448 + 4,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["ClientCertType"]["UserPolicy"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 448 + 8,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["ClientCertType"]["DevicePolicy"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 448 + 12,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["ClientCertType"]["UserSetting"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 448 + 16,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["ClientCertType"]["SharedSetting"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 448 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 448 + 26)) {
                x["VPN"]["IPsec"]["EAP"]["ClientCertType"]["UserEditable"] = A.load.Bool(
                  ptr + 2132 + 56 + 480 + 448 + 24
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["ClientCertType"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 448 + 27)) {
                x["VPN"]["IPsec"]["EAP"]["ClientCertType"]["DeviceEditable"] = A.load.Bool(
                  ptr + 2132 + 56 + 480 + 448 + 25
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["ClientCertType"]["DeviceEditable"];
              }
            } else {
              delete x["VPN"]["IPsec"]["EAP"]["ClientCertType"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 480 + 480 + 28)) {
              x["VPN"]["IPsec"]["EAP"]["Identity"] = {};
              x["VPN"]["IPsec"]["EAP"]["Identity"]["Active"] = A.load.Ref(ptr + 2132 + 56 + 480 + 480 + 0, undefined);
              x["VPN"]["IPsec"]["EAP"]["Identity"]["Effective"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 480 + 4,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["Identity"]["UserPolicy"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 480 + 8,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["Identity"]["DevicePolicy"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 480 + 12,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["Identity"]["UserSetting"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 480 + 16,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["Identity"]["SharedSetting"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 480 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 480 + 26)) {
                x["VPN"]["IPsec"]["EAP"]["Identity"]["UserEditable"] = A.load.Bool(ptr + 2132 + 56 + 480 + 480 + 24);
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["Identity"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 480 + 27)) {
                x["VPN"]["IPsec"]["EAP"]["Identity"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 56 + 480 + 480 + 25);
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["Identity"]["DeviceEditable"];
              }
            } else {
              delete x["VPN"]["IPsec"]["EAP"]["Identity"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 480 + 512 + 28)) {
              x["VPN"]["IPsec"]["EAP"]["Inner"] = {};
              x["VPN"]["IPsec"]["EAP"]["Inner"]["Active"] = A.load.Ref(ptr + 2132 + 56 + 480 + 512 + 0, undefined);
              x["VPN"]["IPsec"]["EAP"]["Inner"]["Effective"] = A.load.Ref(ptr + 2132 + 56 + 480 + 512 + 4, undefined);
              x["VPN"]["IPsec"]["EAP"]["Inner"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 56 + 480 + 512 + 8, undefined);
              x["VPN"]["IPsec"]["EAP"]["Inner"]["DevicePolicy"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 512 + 12,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["Inner"]["UserSetting"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 512 + 16,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["Inner"]["SharedSetting"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 512 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 512 + 26)) {
                x["VPN"]["IPsec"]["EAP"]["Inner"]["UserEditable"] = A.load.Bool(ptr + 2132 + 56 + 480 + 512 + 24);
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["Inner"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 512 + 27)) {
                x["VPN"]["IPsec"]["EAP"]["Inner"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 56 + 480 + 512 + 25);
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["Inner"]["DeviceEditable"];
              }
            } else {
              delete x["VPN"]["IPsec"]["EAP"]["Inner"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 480 + 544 + 28)) {
              x["VPN"]["IPsec"]["EAP"]["Outer"] = {};
              x["VPN"]["IPsec"]["EAP"]["Outer"]["Active"] = A.load.Ref(ptr + 2132 + 56 + 480 + 544 + 0, undefined);
              x["VPN"]["IPsec"]["EAP"]["Outer"]["Effective"] = A.load.Ref(ptr + 2132 + 56 + 480 + 544 + 4, undefined);
              x["VPN"]["IPsec"]["EAP"]["Outer"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 56 + 480 + 544 + 8, undefined);
              x["VPN"]["IPsec"]["EAP"]["Outer"]["DevicePolicy"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 544 + 12,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["Outer"]["UserSetting"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 544 + 16,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["Outer"]["SharedSetting"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 544 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 544 + 26)) {
                x["VPN"]["IPsec"]["EAP"]["Outer"]["UserEditable"] = A.load.Bool(ptr + 2132 + 56 + 480 + 544 + 24);
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["Outer"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 544 + 27)) {
                x["VPN"]["IPsec"]["EAP"]["Outer"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 56 + 480 + 544 + 25);
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["Outer"]["DeviceEditable"];
              }
            } else {
              delete x["VPN"]["IPsec"]["EAP"]["Outer"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 480 + 576 + 28)) {
              x["VPN"]["IPsec"]["EAP"]["Password"] = {};
              x["VPN"]["IPsec"]["EAP"]["Password"]["Active"] = A.load.Ref(ptr + 2132 + 56 + 480 + 576 + 0, undefined);
              x["VPN"]["IPsec"]["EAP"]["Password"]["Effective"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 576 + 4,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["Password"]["UserPolicy"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 576 + 8,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["Password"]["DevicePolicy"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 576 + 12,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["Password"]["UserSetting"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 576 + 16,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["Password"]["SharedSetting"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 576 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 576 + 26)) {
                x["VPN"]["IPsec"]["EAP"]["Password"]["UserEditable"] = A.load.Bool(ptr + 2132 + 56 + 480 + 576 + 24);
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["Password"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 576 + 27)) {
                x["VPN"]["IPsec"]["EAP"]["Password"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 56 + 480 + 576 + 25);
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["Password"]["DeviceEditable"];
              }
            } else {
              delete x["VPN"]["IPsec"]["EAP"]["Password"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 480 + 608 + 21)) {
              x["VPN"]["IPsec"]["EAP"]["SaveCredentials"] = {};
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 608 + 14)) {
                x["VPN"]["IPsec"]["EAP"]["SaveCredentials"]["Active"] = A.load.Bool(ptr + 2132 + 56 + 480 + 608 + 0);
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["SaveCredentials"]["Active"];
              }
              x["VPN"]["IPsec"]["EAP"]["SaveCredentials"]["Effective"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 608 + 4,
                undefined
              );
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 608 + 15)) {
                x["VPN"]["IPsec"]["EAP"]["SaveCredentials"]["UserPolicy"] = A.load.Bool(
                  ptr + 2132 + 56 + 480 + 608 + 8
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["SaveCredentials"]["UserPolicy"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 608 + 16)) {
                x["VPN"]["IPsec"]["EAP"]["SaveCredentials"]["DevicePolicy"] = A.load.Bool(
                  ptr + 2132 + 56 + 480 + 608 + 9
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["SaveCredentials"]["DevicePolicy"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 608 + 17)) {
                x["VPN"]["IPsec"]["EAP"]["SaveCredentials"]["UserSetting"] = A.load.Bool(
                  ptr + 2132 + 56 + 480 + 608 + 10
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["SaveCredentials"]["UserSetting"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 608 + 18)) {
                x["VPN"]["IPsec"]["EAP"]["SaveCredentials"]["SharedSetting"] = A.load.Bool(
                  ptr + 2132 + 56 + 480 + 608 + 11
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["SaveCredentials"]["SharedSetting"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 608 + 19)) {
                x["VPN"]["IPsec"]["EAP"]["SaveCredentials"]["UserEditable"] = A.load.Bool(
                  ptr + 2132 + 56 + 480 + 608 + 12
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["SaveCredentials"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 608 + 20)) {
                x["VPN"]["IPsec"]["EAP"]["SaveCredentials"]["DeviceEditable"] = A.load.Bool(
                  ptr + 2132 + 56 + 480 + 608 + 13
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["SaveCredentials"]["DeviceEditable"];
              }
            } else {
              delete x["VPN"]["IPsec"]["EAP"]["SaveCredentials"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 480 + 632 + 28)) {
              x["VPN"]["IPsec"]["EAP"]["ServerCAPEMs"] = {};
              x["VPN"]["IPsec"]["EAP"]["ServerCAPEMs"]["Active"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 632 + 0,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["ServerCAPEMs"]["Effective"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 632 + 4,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["ServerCAPEMs"]["UserPolicy"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 632 + 8,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["ServerCAPEMs"]["DevicePolicy"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 632 + 12,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["ServerCAPEMs"]["UserSetting"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 632 + 16,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["ServerCAPEMs"]["SharedSetting"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 632 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 632 + 26)) {
                x["VPN"]["IPsec"]["EAP"]["ServerCAPEMs"]["UserEditable"] = A.load.Bool(
                  ptr + 2132 + 56 + 480 + 632 + 24
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["ServerCAPEMs"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 632 + 27)) {
                x["VPN"]["IPsec"]["EAP"]["ServerCAPEMs"]["DeviceEditable"] = A.load.Bool(
                  ptr + 2132 + 56 + 480 + 632 + 25
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["ServerCAPEMs"]["DeviceEditable"];
              }
            } else {
              delete x["VPN"]["IPsec"]["EAP"]["ServerCAPEMs"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 480 + 664 + 28)) {
              x["VPN"]["IPsec"]["EAP"]["ServerCARefs"] = {};
              x["VPN"]["IPsec"]["EAP"]["ServerCARefs"]["Active"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 664 + 0,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["ServerCARefs"]["Effective"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 664 + 4,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["ServerCARefs"]["UserPolicy"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 664 + 8,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["ServerCARefs"]["DevicePolicy"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 664 + 12,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["ServerCARefs"]["UserSetting"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 664 + 16,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["ServerCARefs"]["SharedSetting"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 664 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 664 + 26)) {
                x["VPN"]["IPsec"]["EAP"]["ServerCARefs"]["UserEditable"] = A.load.Bool(
                  ptr + 2132 + 56 + 480 + 664 + 24
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["ServerCARefs"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 664 + 27)) {
                x["VPN"]["IPsec"]["EAP"]["ServerCARefs"]["DeviceEditable"] = A.load.Bool(
                  ptr + 2132 + 56 + 480 + 664 + 25
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["ServerCARefs"]["DeviceEditable"];
              }
            } else {
              delete x["VPN"]["IPsec"]["EAP"]["ServerCARefs"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 480 + 696 + 28)) {
              x["VPN"]["IPsec"]["EAP"]["SubjectMatch"] = {};
              x["VPN"]["IPsec"]["EAP"]["SubjectMatch"]["Active"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 696 + 0,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["SubjectMatch"]["Effective"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 696 + 4,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["SubjectMatch"]["UserPolicy"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 696 + 8,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["SubjectMatch"]["DevicePolicy"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 696 + 12,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["SubjectMatch"]["UserSetting"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 696 + 16,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["SubjectMatch"]["SharedSetting"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 696 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 696 + 26)) {
                x["VPN"]["IPsec"]["EAP"]["SubjectMatch"]["UserEditable"] = A.load.Bool(
                  ptr + 2132 + 56 + 480 + 696 + 24
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["SubjectMatch"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 696 + 27)) {
                x["VPN"]["IPsec"]["EAP"]["SubjectMatch"]["DeviceEditable"] = A.load.Bool(
                  ptr + 2132 + 56 + 480 + 696 + 25
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["SubjectMatch"]["DeviceEditable"];
              }
            } else {
              delete x["VPN"]["IPsec"]["EAP"]["SubjectMatch"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 480 + 728 + 28)) {
              x["VPN"]["IPsec"]["EAP"]["TLSVersionMax"] = {};
              x["VPN"]["IPsec"]["EAP"]["TLSVersionMax"]["Active"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 728 + 0,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["TLSVersionMax"]["Effective"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 728 + 4,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["TLSVersionMax"]["UserPolicy"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 728 + 8,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["TLSVersionMax"]["DevicePolicy"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 728 + 12,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["TLSVersionMax"]["UserSetting"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 728 + 16,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["TLSVersionMax"]["SharedSetting"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 728 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 728 + 26)) {
                x["VPN"]["IPsec"]["EAP"]["TLSVersionMax"]["UserEditable"] = A.load.Bool(
                  ptr + 2132 + 56 + 480 + 728 + 24
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["TLSVersionMax"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 728 + 27)) {
                x["VPN"]["IPsec"]["EAP"]["TLSVersionMax"]["DeviceEditable"] = A.load.Bool(
                  ptr + 2132 + 56 + 480 + 728 + 25
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["TLSVersionMax"]["DeviceEditable"];
              }
            } else {
              delete x["VPN"]["IPsec"]["EAP"]["TLSVersionMax"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 480 + 760 + 21)) {
              x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"] = {};
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 760 + 14)) {
                x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"]["Active"] = A.load.Bool(
                  ptr + 2132 + 56 + 480 + 760 + 0
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"]["Active"];
              }
              x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"]["Effective"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 760 + 4,
                undefined
              );
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 760 + 15)) {
                x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"]["UserPolicy"] = A.load.Bool(
                  ptr + 2132 + 56 + 480 + 760 + 8
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"]["UserPolicy"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 760 + 16)) {
                x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"]["DevicePolicy"] = A.load.Bool(
                  ptr + 2132 + 56 + 480 + 760 + 9
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"]["DevicePolicy"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 760 + 17)) {
                x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"]["UserSetting"] = A.load.Bool(
                  ptr + 2132 + 56 + 480 + 760 + 10
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"]["UserSetting"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 760 + 18)) {
                x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"]["SharedSetting"] = A.load.Bool(
                  ptr + 2132 + 56 + 480 + 760 + 11
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"]["SharedSetting"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 760 + 19)) {
                x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"]["UserEditable"] = A.load.Bool(
                  ptr + 2132 + 56 + 480 + 760 + 12
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 760 + 20)) {
                x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"]["DeviceEditable"] = A.load.Bool(
                  ptr + 2132 + 56 + 480 + 760 + 13
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"]["DeviceEditable"];
              }
            } else {
              delete x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 480 + 784 + 21)) {
              x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"] = {};
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 784 + 14)) {
                x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"]["Active"] = A.load.Bool(ptr + 2132 + 56 + 480 + 784 + 0);
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"]["Active"];
              }
              x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"]["Effective"] = A.load.Ref(
                ptr + 2132 + 56 + 480 + 784 + 4,
                undefined
              );
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 784 + 15)) {
                x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"]["UserPolicy"] = A.load.Bool(ptr + 2132 + 56 + 480 + 784 + 8);
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"]["UserPolicy"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 784 + 16)) {
                x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"]["DevicePolicy"] = A.load.Bool(ptr + 2132 + 56 + 480 + 784 + 9);
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"]["DevicePolicy"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 784 + 17)) {
                x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"]["UserSetting"] = A.load.Bool(ptr + 2132 + 56 + 480 + 784 + 10);
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"]["UserSetting"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 784 + 18)) {
                x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"]["SharedSetting"] = A.load.Bool(
                  ptr + 2132 + 56 + 480 + 784 + 11
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"]["SharedSetting"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 784 + 19)) {
                x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"]["UserEditable"] = A.load.Bool(
                  ptr + 2132 + 56 + 480 + 784 + 12
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 480 + 784 + 20)) {
                x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"]["DeviceEditable"] = A.load.Bool(
                  ptr + 2132 + 56 + 480 + 784 + 13
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"]["DeviceEditable"];
              }
            } else {
              delete x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"];
            }
          } else {
            delete x["VPN"]["IPsec"]["EAP"];
          }
          if (A.load.Bool(ptr + 2132 + 56 + 1288 + 28)) {
            x["VPN"]["IPsec"]["Group"] = {};
            x["VPN"]["IPsec"]["Group"]["Active"] = A.load.Ref(ptr + 2132 + 56 + 1288 + 0, undefined);
            x["VPN"]["IPsec"]["Group"]["Effective"] = A.load.Ref(ptr + 2132 + 56 + 1288 + 4, undefined);
            x["VPN"]["IPsec"]["Group"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 56 + 1288 + 8, undefined);
            x["VPN"]["IPsec"]["Group"]["DevicePolicy"] = A.load.Ref(ptr + 2132 + 56 + 1288 + 12, undefined);
            x["VPN"]["IPsec"]["Group"]["UserSetting"] = A.load.Ref(ptr + 2132 + 56 + 1288 + 16, undefined);
            x["VPN"]["IPsec"]["Group"]["SharedSetting"] = A.load.Ref(ptr + 2132 + 56 + 1288 + 20, undefined);
            if (A.load.Bool(ptr + 2132 + 56 + 1288 + 26)) {
              x["VPN"]["IPsec"]["Group"]["UserEditable"] = A.load.Bool(ptr + 2132 + 56 + 1288 + 24);
            } else {
              delete x["VPN"]["IPsec"]["Group"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 1288 + 27)) {
              x["VPN"]["IPsec"]["Group"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 56 + 1288 + 25);
            } else {
              delete x["VPN"]["IPsec"]["Group"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["IPsec"]["Group"];
          }
          if (A.load.Bool(ptr + 2132 + 56 + 1320 + 33)) {
            x["VPN"]["IPsec"]["IKEVersion"] = {};
            if (A.load.Bool(ptr + 2132 + 56 + 1320 + 26)) {
              x["VPN"]["IPsec"]["IKEVersion"]["Active"] = A.load.Int32(ptr + 2132 + 56 + 1320 + 0);
            } else {
              delete x["VPN"]["IPsec"]["IKEVersion"]["Active"];
            }
            x["VPN"]["IPsec"]["IKEVersion"]["Effective"] = A.load.Ref(ptr + 2132 + 56 + 1320 + 4, undefined);
            if (A.load.Bool(ptr + 2132 + 56 + 1320 + 27)) {
              x["VPN"]["IPsec"]["IKEVersion"]["UserPolicy"] = A.load.Int32(ptr + 2132 + 56 + 1320 + 8);
            } else {
              delete x["VPN"]["IPsec"]["IKEVersion"]["UserPolicy"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 1320 + 28)) {
              x["VPN"]["IPsec"]["IKEVersion"]["DevicePolicy"] = A.load.Int32(ptr + 2132 + 56 + 1320 + 12);
            } else {
              delete x["VPN"]["IPsec"]["IKEVersion"]["DevicePolicy"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 1320 + 29)) {
              x["VPN"]["IPsec"]["IKEVersion"]["UserSetting"] = A.load.Int32(ptr + 2132 + 56 + 1320 + 16);
            } else {
              delete x["VPN"]["IPsec"]["IKEVersion"]["UserSetting"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 1320 + 30)) {
              x["VPN"]["IPsec"]["IKEVersion"]["SharedSetting"] = A.load.Int32(ptr + 2132 + 56 + 1320 + 20);
            } else {
              delete x["VPN"]["IPsec"]["IKEVersion"]["SharedSetting"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 1320 + 31)) {
              x["VPN"]["IPsec"]["IKEVersion"]["UserEditable"] = A.load.Bool(ptr + 2132 + 56 + 1320 + 24);
            } else {
              delete x["VPN"]["IPsec"]["IKEVersion"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 1320 + 32)) {
              x["VPN"]["IPsec"]["IKEVersion"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 56 + 1320 + 25);
            } else {
              delete x["VPN"]["IPsec"]["IKEVersion"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["IPsec"]["IKEVersion"];
          }
          if (A.load.Bool(ptr + 2132 + 56 + 1356 + 28)) {
            x["VPN"]["IPsec"]["PSK"] = {};
            x["VPN"]["IPsec"]["PSK"]["Active"] = A.load.Ref(ptr + 2132 + 56 + 1356 + 0, undefined);
            x["VPN"]["IPsec"]["PSK"]["Effective"] = A.load.Ref(ptr + 2132 + 56 + 1356 + 4, undefined);
            x["VPN"]["IPsec"]["PSK"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 56 + 1356 + 8, undefined);
            x["VPN"]["IPsec"]["PSK"]["DevicePolicy"] = A.load.Ref(ptr + 2132 + 56 + 1356 + 12, undefined);
            x["VPN"]["IPsec"]["PSK"]["UserSetting"] = A.load.Ref(ptr + 2132 + 56 + 1356 + 16, undefined);
            x["VPN"]["IPsec"]["PSK"]["SharedSetting"] = A.load.Ref(ptr + 2132 + 56 + 1356 + 20, undefined);
            if (A.load.Bool(ptr + 2132 + 56 + 1356 + 26)) {
              x["VPN"]["IPsec"]["PSK"]["UserEditable"] = A.load.Bool(ptr + 2132 + 56 + 1356 + 24);
            } else {
              delete x["VPN"]["IPsec"]["PSK"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 1356 + 27)) {
              x["VPN"]["IPsec"]["PSK"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 56 + 1356 + 25);
            } else {
              delete x["VPN"]["IPsec"]["PSK"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["IPsec"]["PSK"];
          }
          if (A.load.Bool(ptr + 2132 + 56 + 1388 + 21)) {
            x["VPN"]["IPsec"]["SaveCredentials"] = {};
            if (A.load.Bool(ptr + 2132 + 56 + 1388 + 14)) {
              x["VPN"]["IPsec"]["SaveCredentials"]["Active"] = A.load.Bool(ptr + 2132 + 56 + 1388 + 0);
            } else {
              delete x["VPN"]["IPsec"]["SaveCredentials"]["Active"];
            }
            x["VPN"]["IPsec"]["SaveCredentials"]["Effective"] = A.load.Ref(ptr + 2132 + 56 + 1388 + 4, undefined);
            if (A.load.Bool(ptr + 2132 + 56 + 1388 + 15)) {
              x["VPN"]["IPsec"]["SaveCredentials"]["UserPolicy"] = A.load.Bool(ptr + 2132 + 56 + 1388 + 8);
            } else {
              delete x["VPN"]["IPsec"]["SaveCredentials"]["UserPolicy"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 1388 + 16)) {
              x["VPN"]["IPsec"]["SaveCredentials"]["DevicePolicy"] = A.load.Bool(ptr + 2132 + 56 + 1388 + 9);
            } else {
              delete x["VPN"]["IPsec"]["SaveCredentials"]["DevicePolicy"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 1388 + 17)) {
              x["VPN"]["IPsec"]["SaveCredentials"]["UserSetting"] = A.load.Bool(ptr + 2132 + 56 + 1388 + 10);
            } else {
              delete x["VPN"]["IPsec"]["SaveCredentials"]["UserSetting"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 1388 + 18)) {
              x["VPN"]["IPsec"]["SaveCredentials"]["SharedSetting"] = A.load.Bool(ptr + 2132 + 56 + 1388 + 11);
            } else {
              delete x["VPN"]["IPsec"]["SaveCredentials"]["SharedSetting"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 1388 + 19)) {
              x["VPN"]["IPsec"]["SaveCredentials"]["UserEditable"] = A.load.Bool(ptr + 2132 + 56 + 1388 + 12);
            } else {
              delete x["VPN"]["IPsec"]["SaveCredentials"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 1388 + 20)) {
              x["VPN"]["IPsec"]["SaveCredentials"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 56 + 1388 + 13);
            } else {
              delete x["VPN"]["IPsec"]["SaveCredentials"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["IPsec"]["SaveCredentials"];
          }
          if (A.load.Bool(ptr + 2132 + 56 + 1412 + 28)) {
            x["VPN"]["IPsec"]["ServerCAPEMs"] = {};
            x["VPN"]["IPsec"]["ServerCAPEMs"]["Active"] = A.load.Ref(ptr + 2132 + 56 + 1412 + 0, undefined);
            x["VPN"]["IPsec"]["ServerCAPEMs"]["Effective"] = A.load.Ref(ptr + 2132 + 56 + 1412 + 4, undefined);
            x["VPN"]["IPsec"]["ServerCAPEMs"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 56 + 1412 + 8, undefined);
            x["VPN"]["IPsec"]["ServerCAPEMs"]["DevicePolicy"] = A.load.Ref(ptr + 2132 + 56 + 1412 + 12, undefined);
            x["VPN"]["IPsec"]["ServerCAPEMs"]["UserSetting"] = A.load.Ref(ptr + 2132 + 56 + 1412 + 16, undefined);
            x["VPN"]["IPsec"]["ServerCAPEMs"]["SharedSetting"] = A.load.Ref(ptr + 2132 + 56 + 1412 + 20, undefined);
            if (A.load.Bool(ptr + 2132 + 56 + 1412 + 26)) {
              x["VPN"]["IPsec"]["ServerCAPEMs"]["UserEditable"] = A.load.Bool(ptr + 2132 + 56 + 1412 + 24);
            } else {
              delete x["VPN"]["IPsec"]["ServerCAPEMs"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 1412 + 27)) {
              x["VPN"]["IPsec"]["ServerCAPEMs"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 56 + 1412 + 25);
            } else {
              delete x["VPN"]["IPsec"]["ServerCAPEMs"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["IPsec"]["ServerCAPEMs"];
          }
          if (A.load.Bool(ptr + 2132 + 56 + 1444 + 28)) {
            x["VPN"]["IPsec"]["ServerCARefs"] = {};
            x["VPN"]["IPsec"]["ServerCARefs"]["Active"] = A.load.Ref(ptr + 2132 + 56 + 1444 + 0, undefined);
            x["VPN"]["IPsec"]["ServerCARefs"]["Effective"] = A.load.Ref(ptr + 2132 + 56 + 1444 + 4, undefined);
            x["VPN"]["IPsec"]["ServerCARefs"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 56 + 1444 + 8, undefined);
            x["VPN"]["IPsec"]["ServerCARefs"]["DevicePolicy"] = A.load.Ref(ptr + 2132 + 56 + 1444 + 12, undefined);
            x["VPN"]["IPsec"]["ServerCARefs"]["UserSetting"] = A.load.Ref(ptr + 2132 + 56 + 1444 + 16, undefined);
            x["VPN"]["IPsec"]["ServerCARefs"]["SharedSetting"] = A.load.Ref(ptr + 2132 + 56 + 1444 + 20, undefined);
            if (A.load.Bool(ptr + 2132 + 56 + 1444 + 26)) {
              x["VPN"]["IPsec"]["ServerCARefs"]["UserEditable"] = A.load.Bool(ptr + 2132 + 56 + 1444 + 24);
            } else {
              delete x["VPN"]["IPsec"]["ServerCARefs"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 1444 + 27)) {
              x["VPN"]["IPsec"]["ServerCARefs"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 56 + 1444 + 25);
            } else {
              delete x["VPN"]["IPsec"]["ServerCARefs"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["IPsec"]["ServerCARefs"];
          }
          if (A.load.Bool(ptr + 2132 + 56 + 1476 + 85)) {
            x["VPN"]["IPsec"]["XAUTH"] = {};
            if (A.load.Bool(ptr + 2132 + 56 + 1476 + 0 + 28)) {
              x["VPN"]["IPsec"]["XAUTH"]["Password"] = {};
              x["VPN"]["IPsec"]["XAUTH"]["Password"]["Active"] = A.load.Ref(ptr + 2132 + 56 + 1476 + 0 + 0, undefined);
              x["VPN"]["IPsec"]["XAUTH"]["Password"]["Effective"] = A.load.Ref(
                ptr + 2132 + 56 + 1476 + 0 + 4,
                undefined
              );
              x["VPN"]["IPsec"]["XAUTH"]["Password"]["UserPolicy"] = A.load.Ref(
                ptr + 2132 + 56 + 1476 + 0 + 8,
                undefined
              );
              x["VPN"]["IPsec"]["XAUTH"]["Password"]["DevicePolicy"] = A.load.Ref(
                ptr + 2132 + 56 + 1476 + 0 + 12,
                undefined
              );
              x["VPN"]["IPsec"]["XAUTH"]["Password"]["UserSetting"] = A.load.Ref(
                ptr + 2132 + 56 + 1476 + 0 + 16,
                undefined
              );
              x["VPN"]["IPsec"]["XAUTH"]["Password"]["SharedSetting"] = A.load.Ref(
                ptr + 2132 + 56 + 1476 + 0 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 2132 + 56 + 1476 + 0 + 26)) {
                x["VPN"]["IPsec"]["XAUTH"]["Password"]["UserEditable"] = A.load.Bool(ptr + 2132 + 56 + 1476 + 0 + 24);
              } else {
                delete x["VPN"]["IPsec"]["XAUTH"]["Password"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 1476 + 0 + 27)) {
                x["VPN"]["IPsec"]["XAUTH"]["Password"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 56 + 1476 + 0 + 25);
              } else {
                delete x["VPN"]["IPsec"]["XAUTH"]["Password"]["DeviceEditable"];
              }
            } else {
              delete x["VPN"]["IPsec"]["XAUTH"]["Password"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 1476 + 32 + 21)) {
              x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"] = {};
              if (A.load.Bool(ptr + 2132 + 56 + 1476 + 32 + 14)) {
                x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"]["Active"] = A.load.Bool(ptr + 2132 + 56 + 1476 + 32 + 0);
              } else {
                delete x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"]["Active"];
              }
              x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"]["Effective"] = A.load.Ref(
                ptr + 2132 + 56 + 1476 + 32 + 4,
                undefined
              );
              if (A.load.Bool(ptr + 2132 + 56 + 1476 + 32 + 15)) {
                x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"]["UserPolicy"] = A.load.Bool(
                  ptr + 2132 + 56 + 1476 + 32 + 8
                );
              } else {
                delete x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"]["UserPolicy"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 1476 + 32 + 16)) {
                x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"]["DevicePolicy"] = A.load.Bool(
                  ptr + 2132 + 56 + 1476 + 32 + 9
                );
              } else {
                delete x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"]["DevicePolicy"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 1476 + 32 + 17)) {
                x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"]["UserSetting"] = A.load.Bool(
                  ptr + 2132 + 56 + 1476 + 32 + 10
                );
              } else {
                delete x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"]["UserSetting"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 1476 + 32 + 18)) {
                x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"]["SharedSetting"] = A.load.Bool(
                  ptr + 2132 + 56 + 1476 + 32 + 11
                );
              } else {
                delete x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"]["SharedSetting"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 1476 + 32 + 19)) {
                x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"]["UserEditable"] = A.load.Bool(
                  ptr + 2132 + 56 + 1476 + 32 + 12
                );
              } else {
                delete x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 1476 + 32 + 20)) {
                x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"]["DeviceEditable"] = A.load.Bool(
                  ptr + 2132 + 56 + 1476 + 32 + 13
                );
              } else {
                delete x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"]["DeviceEditable"];
              }
            } else {
              delete x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"];
            }
            if (A.load.Bool(ptr + 2132 + 56 + 1476 + 56 + 28)) {
              x["VPN"]["IPsec"]["XAUTH"]["Username"] = {};
              x["VPN"]["IPsec"]["XAUTH"]["Username"]["Active"] = A.load.Ref(ptr + 2132 + 56 + 1476 + 56 + 0, undefined);
              x["VPN"]["IPsec"]["XAUTH"]["Username"]["Effective"] = A.load.Ref(
                ptr + 2132 + 56 + 1476 + 56 + 4,
                undefined
              );
              x["VPN"]["IPsec"]["XAUTH"]["Username"]["UserPolicy"] = A.load.Ref(
                ptr + 2132 + 56 + 1476 + 56 + 8,
                undefined
              );
              x["VPN"]["IPsec"]["XAUTH"]["Username"]["DevicePolicy"] = A.load.Ref(
                ptr + 2132 + 56 + 1476 + 56 + 12,
                undefined
              );
              x["VPN"]["IPsec"]["XAUTH"]["Username"]["UserSetting"] = A.load.Ref(
                ptr + 2132 + 56 + 1476 + 56 + 16,
                undefined
              );
              x["VPN"]["IPsec"]["XAUTH"]["Username"]["SharedSetting"] = A.load.Ref(
                ptr + 2132 + 56 + 1476 + 56 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 2132 + 56 + 1476 + 56 + 26)) {
                x["VPN"]["IPsec"]["XAUTH"]["Username"]["UserEditable"] = A.load.Bool(ptr + 2132 + 56 + 1476 + 56 + 24);
              } else {
                delete x["VPN"]["IPsec"]["XAUTH"]["Username"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 2132 + 56 + 1476 + 56 + 27)) {
                x["VPN"]["IPsec"]["XAUTH"]["Username"]["DeviceEditable"] = A.load.Bool(
                  ptr + 2132 + 56 + 1476 + 56 + 25
                );
              } else {
                delete x["VPN"]["IPsec"]["XAUTH"]["Username"]["DeviceEditable"];
              }
            } else {
              delete x["VPN"]["IPsec"]["XAUTH"]["Username"];
            }
          } else {
            delete x["VPN"]["IPsec"]["XAUTH"];
          }
        } else {
          delete x["VPN"]["IPsec"];
        }
        if (A.load.Bool(ptr + 2132 + 1620 + 109)) {
          x["VPN"]["L2TP"] = {};
          if (A.load.Bool(ptr + 2132 + 1620 + 0 + 21)) {
            x["VPN"]["L2TP"]["LcpEchoDisabled"] = {};
            if (A.load.Bool(ptr + 2132 + 1620 + 0 + 14)) {
              x["VPN"]["L2TP"]["LcpEchoDisabled"]["Active"] = A.load.Bool(ptr + 2132 + 1620 + 0 + 0);
            } else {
              delete x["VPN"]["L2TP"]["LcpEchoDisabled"]["Active"];
            }
            x["VPN"]["L2TP"]["LcpEchoDisabled"]["Effective"] = A.load.Ref(ptr + 2132 + 1620 + 0 + 4, undefined);
            if (A.load.Bool(ptr + 2132 + 1620 + 0 + 15)) {
              x["VPN"]["L2TP"]["LcpEchoDisabled"]["UserPolicy"] = A.load.Bool(ptr + 2132 + 1620 + 0 + 8);
            } else {
              delete x["VPN"]["L2TP"]["LcpEchoDisabled"]["UserPolicy"];
            }
            if (A.load.Bool(ptr + 2132 + 1620 + 0 + 16)) {
              x["VPN"]["L2TP"]["LcpEchoDisabled"]["DevicePolicy"] = A.load.Bool(ptr + 2132 + 1620 + 0 + 9);
            } else {
              delete x["VPN"]["L2TP"]["LcpEchoDisabled"]["DevicePolicy"];
            }
            if (A.load.Bool(ptr + 2132 + 1620 + 0 + 17)) {
              x["VPN"]["L2TP"]["LcpEchoDisabled"]["UserSetting"] = A.load.Bool(ptr + 2132 + 1620 + 0 + 10);
            } else {
              delete x["VPN"]["L2TP"]["LcpEchoDisabled"]["UserSetting"];
            }
            if (A.load.Bool(ptr + 2132 + 1620 + 0 + 18)) {
              x["VPN"]["L2TP"]["LcpEchoDisabled"]["SharedSetting"] = A.load.Bool(ptr + 2132 + 1620 + 0 + 11);
            } else {
              delete x["VPN"]["L2TP"]["LcpEchoDisabled"]["SharedSetting"];
            }
            if (A.load.Bool(ptr + 2132 + 1620 + 0 + 19)) {
              x["VPN"]["L2TP"]["LcpEchoDisabled"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1620 + 0 + 12);
            } else {
              delete x["VPN"]["L2TP"]["LcpEchoDisabled"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1620 + 0 + 20)) {
              x["VPN"]["L2TP"]["LcpEchoDisabled"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1620 + 0 + 13);
            } else {
              delete x["VPN"]["L2TP"]["LcpEchoDisabled"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["L2TP"]["LcpEchoDisabled"];
          }
          if (A.load.Bool(ptr + 2132 + 1620 + 24 + 28)) {
            x["VPN"]["L2TP"]["Password"] = {};
            x["VPN"]["L2TP"]["Password"]["Active"] = A.load.Ref(ptr + 2132 + 1620 + 24 + 0, undefined);
            x["VPN"]["L2TP"]["Password"]["Effective"] = A.load.Ref(ptr + 2132 + 1620 + 24 + 4, undefined);
            x["VPN"]["L2TP"]["Password"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 1620 + 24 + 8, undefined);
            x["VPN"]["L2TP"]["Password"]["DevicePolicy"] = A.load.Ref(ptr + 2132 + 1620 + 24 + 12, undefined);
            x["VPN"]["L2TP"]["Password"]["UserSetting"] = A.load.Ref(ptr + 2132 + 1620 + 24 + 16, undefined);
            x["VPN"]["L2TP"]["Password"]["SharedSetting"] = A.load.Ref(ptr + 2132 + 1620 + 24 + 20, undefined);
            if (A.load.Bool(ptr + 2132 + 1620 + 24 + 26)) {
              x["VPN"]["L2TP"]["Password"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1620 + 24 + 24);
            } else {
              delete x["VPN"]["L2TP"]["Password"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1620 + 24 + 27)) {
              x["VPN"]["L2TP"]["Password"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1620 + 24 + 25);
            } else {
              delete x["VPN"]["L2TP"]["Password"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["L2TP"]["Password"];
          }
          if (A.load.Bool(ptr + 2132 + 1620 + 56 + 21)) {
            x["VPN"]["L2TP"]["SaveCredentials"] = {};
            if (A.load.Bool(ptr + 2132 + 1620 + 56 + 14)) {
              x["VPN"]["L2TP"]["SaveCredentials"]["Active"] = A.load.Bool(ptr + 2132 + 1620 + 56 + 0);
            } else {
              delete x["VPN"]["L2TP"]["SaveCredentials"]["Active"];
            }
            x["VPN"]["L2TP"]["SaveCredentials"]["Effective"] = A.load.Ref(ptr + 2132 + 1620 + 56 + 4, undefined);
            if (A.load.Bool(ptr + 2132 + 1620 + 56 + 15)) {
              x["VPN"]["L2TP"]["SaveCredentials"]["UserPolicy"] = A.load.Bool(ptr + 2132 + 1620 + 56 + 8);
            } else {
              delete x["VPN"]["L2TP"]["SaveCredentials"]["UserPolicy"];
            }
            if (A.load.Bool(ptr + 2132 + 1620 + 56 + 16)) {
              x["VPN"]["L2TP"]["SaveCredentials"]["DevicePolicy"] = A.load.Bool(ptr + 2132 + 1620 + 56 + 9);
            } else {
              delete x["VPN"]["L2TP"]["SaveCredentials"]["DevicePolicy"];
            }
            if (A.load.Bool(ptr + 2132 + 1620 + 56 + 17)) {
              x["VPN"]["L2TP"]["SaveCredentials"]["UserSetting"] = A.load.Bool(ptr + 2132 + 1620 + 56 + 10);
            } else {
              delete x["VPN"]["L2TP"]["SaveCredentials"]["UserSetting"];
            }
            if (A.load.Bool(ptr + 2132 + 1620 + 56 + 18)) {
              x["VPN"]["L2TP"]["SaveCredentials"]["SharedSetting"] = A.load.Bool(ptr + 2132 + 1620 + 56 + 11);
            } else {
              delete x["VPN"]["L2TP"]["SaveCredentials"]["SharedSetting"];
            }
            if (A.load.Bool(ptr + 2132 + 1620 + 56 + 19)) {
              x["VPN"]["L2TP"]["SaveCredentials"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1620 + 56 + 12);
            } else {
              delete x["VPN"]["L2TP"]["SaveCredentials"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1620 + 56 + 20)) {
              x["VPN"]["L2TP"]["SaveCredentials"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1620 + 56 + 13);
            } else {
              delete x["VPN"]["L2TP"]["SaveCredentials"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["L2TP"]["SaveCredentials"];
          }
          if (A.load.Bool(ptr + 2132 + 1620 + 80 + 28)) {
            x["VPN"]["L2TP"]["Username"] = {};
            x["VPN"]["L2TP"]["Username"]["Active"] = A.load.Ref(ptr + 2132 + 1620 + 80 + 0, undefined);
            x["VPN"]["L2TP"]["Username"]["Effective"] = A.load.Ref(ptr + 2132 + 1620 + 80 + 4, undefined);
            x["VPN"]["L2TP"]["Username"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 1620 + 80 + 8, undefined);
            x["VPN"]["L2TP"]["Username"]["DevicePolicy"] = A.load.Ref(ptr + 2132 + 1620 + 80 + 12, undefined);
            x["VPN"]["L2TP"]["Username"]["UserSetting"] = A.load.Ref(ptr + 2132 + 1620 + 80 + 16, undefined);
            x["VPN"]["L2TP"]["Username"]["SharedSetting"] = A.load.Ref(ptr + 2132 + 1620 + 80 + 20, undefined);
            if (A.load.Bool(ptr + 2132 + 1620 + 80 + 26)) {
              x["VPN"]["L2TP"]["Username"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1620 + 80 + 24);
            } else {
              delete x["VPN"]["L2TP"]["Username"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1620 + 80 + 27)) {
              x["VPN"]["L2TP"]["Username"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1620 + 80 + 25);
            } else {
              delete x["VPN"]["L2TP"]["Username"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["L2TP"]["Username"];
          }
        } else {
          delete x["VPN"]["L2TP"];
        }
        if (A.load.Bool(ptr + 2132 + 1732 + 1542)) {
          x["VPN"]["OpenVPN"] = {};
          if (A.load.Bool(ptr + 2132 + 1732 + 0 + 28)) {
            x["VPN"]["OpenVPN"]["Auth"] = {};
            x["VPN"]["OpenVPN"]["Auth"]["Active"] = A.load.Ref(ptr + 2132 + 1732 + 0 + 0, undefined);
            x["VPN"]["OpenVPN"]["Auth"]["Effective"] = A.load.Ref(ptr + 2132 + 1732 + 0 + 4, undefined);
            x["VPN"]["OpenVPN"]["Auth"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 1732 + 0 + 8, undefined);
            x["VPN"]["OpenVPN"]["Auth"]["DevicePolicy"] = A.load.Ref(ptr + 2132 + 1732 + 0 + 12, undefined);
            x["VPN"]["OpenVPN"]["Auth"]["UserSetting"] = A.load.Ref(ptr + 2132 + 1732 + 0 + 16, undefined);
            x["VPN"]["OpenVPN"]["Auth"]["SharedSetting"] = A.load.Ref(ptr + 2132 + 1732 + 0 + 20, undefined);
            if (A.load.Bool(ptr + 2132 + 1732 + 0 + 26)) {
              x["VPN"]["OpenVPN"]["Auth"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1732 + 0 + 24);
            } else {
              delete x["VPN"]["OpenVPN"]["Auth"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 0 + 27)) {
              x["VPN"]["OpenVPN"]["Auth"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1732 + 0 + 25);
            } else {
              delete x["VPN"]["OpenVPN"]["Auth"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["Auth"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 32 + 28)) {
            x["VPN"]["OpenVPN"]["AuthRetry"] = {};
            x["VPN"]["OpenVPN"]["AuthRetry"]["Active"] = A.load.Ref(ptr + 2132 + 1732 + 32 + 0, undefined);
            x["VPN"]["OpenVPN"]["AuthRetry"]["Effective"] = A.load.Ref(ptr + 2132 + 1732 + 32 + 4, undefined);
            x["VPN"]["OpenVPN"]["AuthRetry"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 1732 + 32 + 8, undefined);
            x["VPN"]["OpenVPN"]["AuthRetry"]["DevicePolicy"] = A.load.Ref(ptr + 2132 + 1732 + 32 + 12, undefined);
            x["VPN"]["OpenVPN"]["AuthRetry"]["UserSetting"] = A.load.Ref(ptr + 2132 + 1732 + 32 + 16, undefined);
            x["VPN"]["OpenVPN"]["AuthRetry"]["SharedSetting"] = A.load.Ref(ptr + 2132 + 1732 + 32 + 20, undefined);
            if (A.load.Bool(ptr + 2132 + 1732 + 32 + 26)) {
              x["VPN"]["OpenVPN"]["AuthRetry"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1732 + 32 + 24);
            } else {
              delete x["VPN"]["OpenVPN"]["AuthRetry"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 32 + 27)) {
              x["VPN"]["OpenVPN"]["AuthRetry"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1732 + 32 + 25);
            } else {
              delete x["VPN"]["OpenVPN"]["AuthRetry"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["AuthRetry"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 64 + 21)) {
            x["VPN"]["OpenVPN"]["AuthNoCache"] = {};
            if (A.load.Bool(ptr + 2132 + 1732 + 64 + 14)) {
              x["VPN"]["OpenVPN"]["AuthNoCache"]["Active"] = A.load.Bool(ptr + 2132 + 1732 + 64 + 0);
            } else {
              delete x["VPN"]["OpenVPN"]["AuthNoCache"]["Active"];
            }
            x["VPN"]["OpenVPN"]["AuthNoCache"]["Effective"] = A.load.Ref(ptr + 2132 + 1732 + 64 + 4, undefined);
            if (A.load.Bool(ptr + 2132 + 1732 + 64 + 15)) {
              x["VPN"]["OpenVPN"]["AuthNoCache"]["UserPolicy"] = A.load.Bool(ptr + 2132 + 1732 + 64 + 8);
            } else {
              delete x["VPN"]["OpenVPN"]["AuthNoCache"]["UserPolicy"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 64 + 16)) {
              x["VPN"]["OpenVPN"]["AuthNoCache"]["DevicePolicy"] = A.load.Bool(ptr + 2132 + 1732 + 64 + 9);
            } else {
              delete x["VPN"]["OpenVPN"]["AuthNoCache"]["DevicePolicy"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 64 + 17)) {
              x["VPN"]["OpenVPN"]["AuthNoCache"]["UserSetting"] = A.load.Bool(ptr + 2132 + 1732 + 64 + 10);
            } else {
              delete x["VPN"]["OpenVPN"]["AuthNoCache"]["UserSetting"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 64 + 18)) {
              x["VPN"]["OpenVPN"]["AuthNoCache"]["SharedSetting"] = A.load.Bool(ptr + 2132 + 1732 + 64 + 11);
            } else {
              delete x["VPN"]["OpenVPN"]["AuthNoCache"]["SharedSetting"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 64 + 19)) {
              x["VPN"]["OpenVPN"]["AuthNoCache"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1732 + 64 + 12);
            } else {
              delete x["VPN"]["OpenVPN"]["AuthNoCache"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 64 + 20)) {
              x["VPN"]["OpenVPN"]["AuthNoCache"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1732 + 64 + 13);
            } else {
              delete x["VPN"]["OpenVPN"]["AuthNoCache"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["AuthNoCache"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 88 + 28)) {
            x["VPN"]["OpenVPN"]["Cipher"] = {};
            x["VPN"]["OpenVPN"]["Cipher"]["Active"] = A.load.Ref(ptr + 2132 + 1732 + 88 + 0, undefined);
            x["VPN"]["OpenVPN"]["Cipher"]["Effective"] = A.load.Ref(ptr + 2132 + 1732 + 88 + 4, undefined);
            x["VPN"]["OpenVPN"]["Cipher"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 1732 + 88 + 8, undefined);
            x["VPN"]["OpenVPN"]["Cipher"]["DevicePolicy"] = A.load.Ref(ptr + 2132 + 1732 + 88 + 12, undefined);
            x["VPN"]["OpenVPN"]["Cipher"]["UserSetting"] = A.load.Ref(ptr + 2132 + 1732 + 88 + 16, undefined);
            x["VPN"]["OpenVPN"]["Cipher"]["SharedSetting"] = A.load.Ref(ptr + 2132 + 1732 + 88 + 20, undefined);
            if (A.load.Bool(ptr + 2132 + 1732 + 88 + 26)) {
              x["VPN"]["OpenVPN"]["Cipher"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1732 + 88 + 24);
            } else {
              delete x["VPN"]["OpenVPN"]["Cipher"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 88 + 27)) {
              x["VPN"]["OpenVPN"]["Cipher"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1732 + 88 + 25);
            } else {
              delete x["VPN"]["OpenVPN"]["Cipher"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["Cipher"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 120 + 28)) {
            x["VPN"]["OpenVPN"]["ClientCertPKCS11Id"] = {};
            x["VPN"]["OpenVPN"]["ClientCertPKCS11Id"]["Active"] = A.load.Ref(ptr + 2132 + 1732 + 120 + 0, undefined);
            x["VPN"]["OpenVPN"]["ClientCertPKCS11Id"]["Effective"] = A.load.Ref(ptr + 2132 + 1732 + 120 + 4, undefined);
            x["VPN"]["OpenVPN"]["ClientCertPKCS11Id"]["UserPolicy"] = A.load.Ref(
              ptr + 2132 + 1732 + 120 + 8,
              undefined
            );
            x["VPN"]["OpenVPN"]["ClientCertPKCS11Id"]["DevicePolicy"] = A.load.Ref(
              ptr + 2132 + 1732 + 120 + 12,
              undefined
            );
            x["VPN"]["OpenVPN"]["ClientCertPKCS11Id"]["UserSetting"] = A.load.Ref(
              ptr + 2132 + 1732 + 120 + 16,
              undefined
            );
            x["VPN"]["OpenVPN"]["ClientCertPKCS11Id"]["SharedSetting"] = A.load.Ref(
              ptr + 2132 + 1732 + 120 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 2132 + 1732 + 120 + 26)) {
              x["VPN"]["OpenVPN"]["ClientCertPKCS11Id"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1732 + 120 + 24);
            } else {
              delete x["VPN"]["OpenVPN"]["ClientCertPKCS11Id"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 120 + 27)) {
              x["VPN"]["OpenVPN"]["ClientCertPKCS11Id"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1732 + 120 + 25);
            } else {
              delete x["VPN"]["OpenVPN"]["ClientCertPKCS11Id"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["ClientCertPKCS11Id"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 152 + 318)) {
            x["VPN"]["OpenVPN"]["ClientCertPattern"] = {};
            if (A.load.Bool(ptr + 2132 + 1732 + 152 + 0 + 28)) {
              x["VPN"]["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"] = {};
              x["VPN"]["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]["Active"] = A.load.Ref(
                ptr + 2132 + 1732 + 152 + 0 + 0,
                undefined
              );
              x["VPN"]["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]["Effective"] = A.load.Ref(
                ptr + 2132 + 1732 + 152 + 0 + 4,
                undefined
              );
              x["VPN"]["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]["UserPolicy"] = A.load.Ref(
                ptr + 2132 + 1732 + 152 + 0 + 8,
                undefined
              );
              x["VPN"]["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]["DevicePolicy"] = A.load.Ref(
                ptr + 2132 + 1732 + 152 + 0 + 12,
                undefined
              );
              x["VPN"]["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]["UserSetting"] = A.load.Ref(
                ptr + 2132 + 1732 + 152 + 0 + 16,
                undefined
              );
              x["VPN"]["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]["SharedSetting"] = A.load.Ref(
                ptr + 2132 + 1732 + 152 + 0 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 2132 + 1732 + 152 + 0 + 26)) {
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]["UserEditable"] = A.load.Bool(
                  ptr + 2132 + 1732 + 152 + 0 + 24
                );
              } else {
                delete x["VPN"]["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 2132 + 1732 + 152 + 0 + 27)) {
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"] = A.load.Bool(
                  ptr + 2132 + 1732 + 152 + 0 + 25
                );
              } else {
                delete x["VPN"]["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"];
              }
            } else {
              delete x["VPN"]["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 152 + 32 + 125)) {
              x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"] = {};
              if (A.load.Bool(ptr + 2132 + 1732 + 152 + 32 + 0 + 28)) {
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"] = {};
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]["Active"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 32 + 0 + 0,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]["Effective"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 32 + 0 + 4,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserPolicy"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 32 + 0 + 8,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]["DevicePolicy"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 32 + 0 + 12,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserSetting"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 32 + 0 + 16,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]["SharedSetting"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 32 + 0 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 2132 + 1732 + 152 + 32 + 0 + 26)) {
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"] = A.load.Bool(
                    ptr + 2132 + 1732 + 152 + 32 + 0 + 24
                  );
                } else {
                  delete x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 2132 + 1732 + 152 + 32 + 0 + 27)) {
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"] = A.load.Bool(
                    ptr + 2132 + 1732 + 152 + 32 + 0 + 25
                  );
                } else {
                  delete x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"];
                }
              } else {
                delete x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"];
              }
              if (A.load.Bool(ptr + 2132 + 1732 + 152 + 32 + 32 + 28)) {
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"] = {};
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]["Active"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 32 + 32 + 0,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]["Effective"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 32 + 32 + 4,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]["UserPolicy"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 32 + 32 + 8,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]["DevicePolicy"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 32 + 32 + 12,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]["UserSetting"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 32 + 32 + 16,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]["SharedSetting"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 32 + 32 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 2132 + 1732 + 152 + 32 + 32 + 26)) {
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"] = A.load.Bool(
                    ptr + 2132 + 1732 + 152 + 32 + 32 + 24
                  );
                } else {
                  delete x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 2132 + 1732 + 152 + 32 + 32 + 27)) {
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"] = A.load.Bool(
                    ptr + 2132 + 1732 + 152 + 32 + 32 + 25
                  );
                } else {
                  delete x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"];
                }
              } else {
                delete x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"];
              }
              if (A.load.Bool(ptr + 2132 + 1732 + 152 + 32 + 64 + 28)) {
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"] = {};
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]["Active"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 32 + 64 + 0,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]["Effective"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 32 + 64 + 4,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]["UserPolicy"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 32 + 64 + 8,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]["DevicePolicy"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 32 + 64 + 12,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]["UserSetting"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 32 + 64 + 16,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]["SharedSetting"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 32 + 64 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 2132 + 1732 + 152 + 32 + 64 + 26)) {
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"] = A.load.Bool(
                    ptr + 2132 + 1732 + 152 + 32 + 64 + 24
                  );
                } else {
                  delete x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 2132 + 1732 + 152 + 32 + 64 + 27)) {
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"] = A.load.Bool(
                    ptr + 2132 + 1732 + 152 + 32 + 64 + 25
                  );
                } else {
                  delete x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"];
                }
              } else {
                delete x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"];
              }
              if (A.load.Bool(ptr + 2132 + 1732 + 152 + 32 + 96 + 28)) {
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = {};
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Active"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 32 + 96 + 0,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Effective"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 32 + 96 + 4,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserPolicy"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 32 + 96 + 8,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DevicePolicy"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 32 + 96 + 12,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserSetting"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 32 + 96 + 16,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["SharedSetting"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 32 + 96 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 2132 + 1732 + 152 + 32 + 96 + 26)) {
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"] =
                    A.load.Bool(ptr + 2132 + 1732 + 152 + 32 + 96 + 24);
                } else {
                  delete x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 2132 + 1732 + 152 + 32 + 96 + 27)) {
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"] =
                    A.load.Bool(ptr + 2132 + 1732 + 152 + 32 + 96 + 25);
                } else {
                  delete x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"];
                }
              } else {
                delete x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"];
              }
            } else {
              delete x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 152 + 160 + 28)) {
              x["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCARef"] = {};
              x["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]["Active"] = A.load.Ref(
                ptr + 2132 + 1732 + 152 + 160 + 0,
                undefined
              );
              x["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]["Effective"] = A.load.Ref(
                ptr + 2132 + 1732 + 152 + 160 + 4,
                undefined
              );
              x["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]["UserPolicy"] = A.load.Ref(
                ptr + 2132 + 1732 + 152 + 160 + 8,
                undefined
              );
              x["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]["DevicePolicy"] = A.load.Ref(
                ptr + 2132 + 1732 + 152 + 160 + 12,
                undefined
              );
              x["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]["UserSetting"] = A.load.Ref(
                ptr + 2132 + 1732 + 152 + 160 + 16,
                undefined
              );
              x["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]["SharedSetting"] = A.load.Ref(
                ptr + 2132 + 1732 + 152 + 160 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 2132 + 1732 + 152 + 160 + 26)) {
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]["UserEditable"] = A.load.Bool(
                  ptr + 2132 + 1732 + 152 + 160 + 24
                );
              } else {
                delete x["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 2132 + 1732 + 152 + 160 + 27)) {
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"] = A.load.Bool(
                  ptr + 2132 + 1732 + 152 + 160 + 25
                );
              } else {
                delete x["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"];
              }
            } else {
              delete x["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCARef"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 152 + 192 + 125)) {
              x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"] = {};
              if (A.load.Bool(ptr + 2132 + 1732 + 152 + 192 + 0 + 28)) {
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"] = {};
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]["Active"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 192 + 0 + 0,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]["Effective"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 192 + 0 + 4,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]["UserPolicy"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 192 + 0 + 8,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]["DevicePolicy"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 192 + 0 + 12,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]["UserSetting"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 192 + 0 + 16,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]["SharedSetting"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 192 + 0 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 2132 + 1732 + 152 + 192 + 0 + 26)) {
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"] = A.load.Bool(
                    ptr + 2132 + 1732 + 152 + 192 + 0 + 24
                  );
                } else {
                  delete x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 2132 + 1732 + 152 + 192 + 0 + 27)) {
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"] = A.load.Bool(
                    ptr + 2132 + 1732 + 152 + 192 + 0 + 25
                  );
                } else {
                  delete x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"];
                }
              } else {
                delete x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"];
              }
              if (A.load.Bool(ptr + 2132 + 1732 + 152 + 192 + 32 + 28)) {
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"] = {};
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]["Active"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 192 + 32 + 0,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]["Effective"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 192 + 32 + 4,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]["UserPolicy"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 192 + 32 + 8,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]["DevicePolicy"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 192 + 32 + 12,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]["UserSetting"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 192 + 32 + 16,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]["SharedSetting"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 192 + 32 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 2132 + 1732 + 152 + 192 + 32 + 26)) {
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"] = A.load.Bool(
                    ptr + 2132 + 1732 + 152 + 192 + 32 + 24
                  );
                } else {
                  delete x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 2132 + 1732 + 152 + 192 + 32 + 27)) {
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"] = A.load.Bool(
                    ptr + 2132 + 1732 + 152 + 192 + 32 + 25
                  );
                } else {
                  delete x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"];
                }
              } else {
                delete x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"];
              }
              if (A.load.Bool(ptr + 2132 + 1732 + 152 + 192 + 64 + 28)) {
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"] = {};
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]["Active"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 192 + 64 + 0,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]["Effective"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 192 + 64 + 4,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]["UserPolicy"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 192 + 64 + 8,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]["DevicePolicy"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 192 + 64 + 12,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]["UserSetting"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 192 + 64 + 16,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]["SharedSetting"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 192 + 64 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 2132 + 1732 + 152 + 192 + 64 + 26)) {
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"] = A.load.Bool(
                    ptr + 2132 + 1732 + 152 + 192 + 64 + 24
                  );
                } else {
                  delete x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 2132 + 1732 + 152 + 192 + 64 + 27)) {
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"] = A.load.Bool(
                    ptr + 2132 + 1732 + 152 + 192 + 64 + 25
                  );
                } else {
                  delete x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"];
                }
              } else {
                delete x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"];
              }
              if (A.load.Bool(ptr + 2132 + 1732 + 152 + 192 + 96 + 28)) {
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = {};
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Active"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 192 + 96 + 0,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Effective"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 192 + 96 + 4,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserPolicy"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 192 + 96 + 8,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DevicePolicy"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 192 + 96 + 12,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserSetting"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 192 + 96 + 16,
                  undefined
                );
                x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["SharedSetting"] = A.load.Ref(
                  ptr + 2132 + 1732 + 152 + 192 + 96 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 2132 + 1732 + 152 + 192 + 96 + 26)) {
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"] =
                    A.load.Bool(ptr + 2132 + 1732 + 152 + 192 + 96 + 24);
                } else {
                  delete x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 2132 + 1732 + 152 + 192 + 96 + 27)) {
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"] =
                    A.load.Bool(ptr + 2132 + 1732 + 152 + 192 + 96 + 25);
                } else {
                  delete x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"];
                }
              } else {
                delete x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"];
              }
            } else {
              delete x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["ClientCertPattern"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 472 + 28)) {
            x["VPN"]["OpenVPN"]["ClientCertProvisioningProfileId"] = {};
            x["VPN"]["OpenVPN"]["ClientCertProvisioningProfileId"]["Active"] = A.load.Ref(
              ptr + 2132 + 1732 + 472 + 0,
              undefined
            );
            x["VPN"]["OpenVPN"]["ClientCertProvisioningProfileId"]["Effective"] = A.load.Ref(
              ptr + 2132 + 1732 + 472 + 4,
              undefined
            );
            x["VPN"]["OpenVPN"]["ClientCertProvisioningProfileId"]["UserPolicy"] = A.load.Ref(
              ptr + 2132 + 1732 + 472 + 8,
              undefined
            );
            x["VPN"]["OpenVPN"]["ClientCertProvisioningProfileId"]["DevicePolicy"] = A.load.Ref(
              ptr + 2132 + 1732 + 472 + 12,
              undefined
            );
            x["VPN"]["OpenVPN"]["ClientCertProvisioningProfileId"]["UserSetting"] = A.load.Ref(
              ptr + 2132 + 1732 + 472 + 16,
              undefined
            );
            x["VPN"]["OpenVPN"]["ClientCertProvisioningProfileId"]["SharedSetting"] = A.load.Ref(
              ptr + 2132 + 1732 + 472 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 2132 + 1732 + 472 + 26)) {
              x["VPN"]["OpenVPN"]["ClientCertProvisioningProfileId"]["UserEditable"] = A.load.Bool(
                ptr + 2132 + 1732 + 472 + 24
              );
            } else {
              delete x["VPN"]["OpenVPN"]["ClientCertProvisioningProfileId"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 472 + 27)) {
              x["VPN"]["OpenVPN"]["ClientCertProvisioningProfileId"]["DeviceEditable"] = A.load.Bool(
                ptr + 2132 + 1732 + 472 + 25
              );
            } else {
              delete x["VPN"]["OpenVPN"]["ClientCertProvisioningProfileId"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["ClientCertProvisioningProfileId"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 504 + 28)) {
            x["VPN"]["OpenVPN"]["ClientCertRef"] = {};
            x["VPN"]["OpenVPN"]["ClientCertRef"]["Active"] = A.load.Ref(ptr + 2132 + 1732 + 504 + 0, undefined);
            x["VPN"]["OpenVPN"]["ClientCertRef"]["Effective"] = A.load.Ref(ptr + 2132 + 1732 + 504 + 4, undefined);
            x["VPN"]["OpenVPN"]["ClientCertRef"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 1732 + 504 + 8, undefined);
            x["VPN"]["OpenVPN"]["ClientCertRef"]["DevicePolicy"] = A.load.Ref(ptr + 2132 + 1732 + 504 + 12, undefined);
            x["VPN"]["OpenVPN"]["ClientCertRef"]["UserSetting"] = A.load.Ref(ptr + 2132 + 1732 + 504 + 16, undefined);
            x["VPN"]["OpenVPN"]["ClientCertRef"]["SharedSetting"] = A.load.Ref(ptr + 2132 + 1732 + 504 + 20, undefined);
            if (A.load.Bool(ptr + 2132 + 1732 + 504 + 26)) {
              x["VPN"]["OpenVPN"]["ClientCertRef"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1732 + 504 + 24);
            } else {
              delete x["VPN"]["OpenVPN"]["ClientCertRef"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 504 + 27)) {
              x["VPN"]["OpenVPN"]["ClientCertRef"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1732 + 504 + 25);
            } else {
              delete x["VPN"]["OpenVPN"]["ClientCertRef"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["ClientCertRef"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 536 + 28)) {
            x["VPN"]["OpenVPN"]["ClientCertType"] = {};
            x["VPN"]["OpenVPN"]["ClientCertType"]["Active"] = A.load.Ref(ptr + 2132 + 1732 + 536 + 0, undefined);
            x["VPN"]["OpenVPN"]["ClientCertType"]["Effective"] = A.load.Ref(ptr + 2132 + 1732 + 536 + 4, undefined);
            x["VPN"]["OpenVPN"]["ClientCertType"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 1732 + 536 + 8, undefined);
            x["VPN"]["OpenVPN"]["ClientCertType"]["DevicePolicy"] = A.load.Ref(ptr + 2132 + 1732 + 536 + 12, undefined);
            x["VPN"]["OpenVPN"]["ClientCertType"]["UserSetting"] = A.load.Ref(ptr + 2132 + 1732 + 536 + 16, undefined);
            x["VPN"]["OpenVPN"]["ClientCertType"]["SharedSetting"] = A.load.Ref(
              ptr + 2132 + 1732 + 536 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 2132 + 1732 + 536 + 26)) {
              x["VPN"]["OpenVPN"]["ClientCertType"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1732 + 536 + 24);
            } else {
              delete x["VPN"]["OpenVPN"]["ClientCertType"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 536 + 27)) {
              x["VPN"]["OpenVPN"]["ClientCertType"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1732 + 536 + 25);
            } else {
              delete x["VPN"]["OpenVPN"]["ClientCertType"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["ClientCertType"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 568 + 28)) {
            x["VPN"]["OpenVPN"]["CompLZO"] = {};
            x["VPN"]["OpenVPN"]["CompLZO"]["Active"] = A.load.Ref(ptr + 2132 + 1732 + 568 + 0, undefined);
            x["VPN"]["OpenVPN"]["CompLZO"]["Effective"] = A.load.Ref(ptr + 2132 + 1732 + 568 + 4, undefined);
            x["VPN"]["OpenVPN"]["CompLZO"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 1732 + 568 + 8, undefined);
            x["VPN"]["OpenVPN"]["CompLZO"]["DevicePolicy"] = A.load.Ref(ptr + 2132 + 1732 + 568 + 12, undefined);
            x["VPN"]["OpenVPN"]["CompLZO"]["UserSetting"] = A.load.Ref(ptr + 2132 + 1732 + 568 + 16, undefined);
            x["VPN"]["OpenVPN"]["CompLZO"]["SharedSetting"] = A.load.Ref(ptr + 2132 + 1732 + 568 + 20, undefined);
            if (A.load.Bool(ptr + 2132 + 1732 + 568 + 26)) {
              x["VPN"]["OpenVPN"]["CompLZO"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1732 + 568 + 24);
            } else {
              delete x["VPN"]["OpenVPN"]["CompLZO"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 568 + 27)) {
              x["VPN"]["OpenVPN"]["CompLZO"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1732 + 568 + 25);
            } else {
              delete x["VPN"]["OpenVPN"]["CompLZO"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["CompLZO"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 600 + 21)) {
            x["VPN"]["OpenVPN"]["CompNoAdapt"] = {};
            if (A.load.Bool(ptr + 2132 + 1732 + 600 + 14)) {
              x["VPN"]["OpenVPN"]["CompNoAdapt"]["Active"] = A.load.Bool(ptr + 2132 + 1732 + 600 + 0);
            } else {
              delete x["VPN"]["OpenVPN"]["CompNoAdapt"]["Active"];
            }
            x["VPN"]["OpenVPN"]["CompNoAdapt"]["Effective"] = A.load.Ref(ptr + 2132 + 1732 + 600 + 4, undefined);
            if (A.load.Bool(ptr + 2132 + 1732 + 600 + 15)) {
              x["VPN"]["OpenVPN"]["CompNoAdapt"]["UserPolicy"] = A.load.Bool(ptr + 2132 + 1732 + 600 + 8);
            } else {
              delete x["VPN"]["OpenVPN"]["CompNoAdapt"]["UserPolicy"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 600 + 16)) {
              x["VPN"]["OpenVPN"]["CompNoAdapt"]["DevicePolicy"] = A.load.Bool(ptr + 2132 + 1732 + 600 + 9);
            } else {
              delete x["VPN"]["OpenVPN"]["CompNoAdapt"]["DevicePolicy"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 600 + 17)) {
              x["VPN"]["OpenVPN"]["CompNoAdapt"]["UserSetting"] = A.load.Bool(ptr + 2132 + 1732 + 600 + 10);
            } else {
              delete x["VPN"]["OpenVPN"]["CompNoAdapt"]["UserSetting"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 600 + 18)) {
              x["VPN"]["OpenVPN"]["CompNoAdapt"]["SharedSetting"] = A.load.Bool(ptr + 2132 + 1732 + 600 + 11);
            } else {
              delete x["VPN"]["OpenVPN"]["CompNoAdapt"]["SharedSetting"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 600 + 19)) {
              x["VPN"]["OpenVPN"]["CompNoAdapt"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1732 + 600 + 12);
            } else {
              delete x["VPN"]["OpenVPN"]["CompNoAdapt"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 600 + 20)) {
              x["VPN"]["OpenVPN"]["CompNoAdapt"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1732 + 600 + 13);
            } else {
              delete x["VPN"]["OpenVPN"]["CompNoAdapt"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["CompNoAdapt"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 624 + 28)) {
            x["VPN"]["OpenVPN"]["ExtraHosts"] = {};
            x["VPN"]["OpenVPN"]["ExtraHosts"]["Active"] = A.load.Ref(ptr + 2132 + 1732 + 624 + 0, undefined);
            x["VPN"]["OpenVPN"]["ExtraHosts"]["Effective"] = A.load.Ref(ptr + 2132 + 1732 + 624 + 4, undefined);
            x["VPN"]["OpenVPN"]["ExtraHosts"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 1732 + 624 + 8, undefined);
            x["VPN"]["OpenVPN"]["ExtraHosts"]["DevicePolicy"] = A.load.Ref(ptr + 2132 + 1732 + 624 + 12, undefined);
            x["VPN"]["OpenVPN"]["ExtraHosts"]["UserSetting"] = A.load.Ref(ptr + 2132 + 1732 + 624 + 16, undefined);
            x["VPN"]["OpenVPN"]["ExtraHosts"]["SharedSetting"] = A.load.Ref(ptr + 2132 + 1732 + 624 + 20, undefined);
            if (A.load.Bool(ptr + 2132 + 1732 + 624 + 26)) {
              x["VPN"]["OpenVPN"]["ExtraHosts"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1732 + 624 + 24);
            } else {
              delete x["VPN"]["OpenVPN"]["ExtraHosts"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 624 + 27)) {
              x["VPN"]["OpenVPN"]["ExtraHosts"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1732 + 624 + 25);
            } else {
              delete x["VPN"]["OpenVPN"]["ExtraHosts"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["ExtraHosts"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 656 + 21)) {
            x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"] = {};
            if (A.load.Bool(ptr + 2132 + 1732 + 656 + 14)) {
              x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"]["Active"] = A.load.Bool(ptr + 2132 + 1732 + 656 + 0);
            } else {
              delete x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"]["Active"];
            }
            x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"]["Effective"] = A.load.Ref(ptr + 2132 + 1732 + 656 + 4, undefined);
            if (A.load.Bool(ptr + 2132 + 1732 + 656 + 15)) {
              x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"]["UserPolicy"] = A.load.Bool(ptr + 2132 + 1732 + 656 + 8);
            } else {
              delete x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"]["UserPolicy"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 656 + 16)) {
              x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"]["DevicePolicy"] = A.load.Bool(ptr + 2132 + 1732 + 656 + 9);
            } else {
              delete x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"]["DevicePolicy"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 656 + 17)) {
              x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"]["UserSetting"] = A.load.Bool(ptr + 2132 + 1732 + 656 + 10);
            } else {
              delete x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"]["UserSetting"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 656 + 18)) {
              x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"]["SharedSetting"] = A.load.Bool(ptr + 2132 + 1732 + 656 + 11);
            } else {
              delete x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"]["SharedSetting"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 656 + 19)) {
              x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1732 + 656 + 12);
            } else {
              delete x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 656 + 20)) {
              x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1732 + 656 + 13);
            } else {
              delete x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 680 + 28)) {
            x["VPN"]["OpenVPN"]["KeyDirection"] = {};
            x["VPN"]["OpenVPN"]["KeyDirection"]["Active"] = A.load.Ref(ptr + 2132 + 1732 + 680 + 0, undefined);
            x["VPN"]["OpenVPN"]["KeyDirection"]["Effective"] = A.load.Ref(ptr + 2132 + 1732 + 680 + 4, undefined);
            x["VPN"]["OpenVPN"]["KeyDirection"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 1732 + 680 + 8, undefined);
            x["VPN"]["OpenVPN"]["KeyDirection"]["DevicePolicy"] = A.load.Ref(ptr + 2132 + 1732 + 680 + 12, undefined);
            x["VPN"]["OpenVPN"]["KeyDirection"]["UserSetting"] = A.load.Ref(ptr + 2132 + 1732 + 680 + 16, undefined);
            x["VPN"]["OpenVPN"]["KeyDirection"]["SharedSetting"] = A.load.Ref(ptr + 2132 + 1732 + 680 + 20, undefined);
            if (A.load.Bool(ptr + 2132 + 1732 + 680 + 26)) {
              x["VPN"]["OpenVPN"]["KeyDirection"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1732 + 680 + 24);
            } else {
              delete x["VPN"]["OpenVPN"]["KeyDirection"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 680 + 27)) {
              x["VPN"]["OpenVPN"]["KeyDirection"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1732 + 680 + 25);
            } else {
              delete x["VPN"]["OpenVPN"]["KeyDirection"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["KeyDirection"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 712 + 28)) {
            x["VPN"]["OpenVPN"]["NsCertType"] = {};
            x["VPN"]["OpenVPN"]["NsCertType"]["Active"] = A.load.Ref(ptr + 2132 + 1732 + 712 + 0, undefined);
            x["VPN"]["OpenVPN"]["NsCertType"]["Effective"] = A.load.Ref(ptr + 2132 + 1732 + 712 + 4, undefined);
            x["VPN"]["OpenVPN"]["NsCertType"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 1732 + 712 + 8, undefined);
            x["VPN"]["OpenVPN"]["NsCertType"]["DevicePolicy"] = A.load.Ref(ptr + 2132 + 1732 + 712 + 12, undefined);
            x["VPN"]["OpenVPN"]["NsCertType"]["UserSetting"] = A.load.Ref(ptr + 2132 + 1732 + 712 + 16, undefined);
            x["VPN"]["OpenVPN"]["NsCertType"]["SharedSetting"] = A.load.Ref(ptr + 2132 + 1732 + 712 + 20, undefined);
            if (A.load.Bool(ptr + 2132 + 1732 + 712 + 26)) {
              x["VPN"]["OpenVPN"]["NsCertType"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1732 + 712 + 24);
            } else {
              delete x["VPN"]["OpenVPN"]["NsCertType"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 712 + 27)) {
              x["VPN"]["OpenVPN"]["NsCertType"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1732 + 712 + 25);
            } else {
              delete x["VPN"]["OpenVPN"]["NsCertType"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["NsCertType"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 744 + 28)) {
            x["VPN"]["OpenVPN"]["OTP"] = {};
            x["VPN"]["OpenVPN"]["OTP"]["Active"] = A.load.Ref(ptr + 2132 + 1732 + 744 + 0, undefined);
            x["VPN"]["OpenVPN"]["OTP"]["Effective"] = A.load.Ref(ptr + 2132 + 1732 + 744 + 4, undefined);
            x["VPN"]["OpenVPN"]["OTP"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 1732 + 744 + 8, undefined);
            x["VPN"]["OpenVPN"]["OTP"]["DevicePolicy"] = A.load.Ref(ptr + 2132 + 1732 + 744 + 12, undefined);
            x["VPN"]["OpenVPN"]["OTP"]["UserSetting"] = A.load.Ref(ptr + 2132 + 1732 + 744 + 16, undefined);
            x["VPN"]["OpenVPN"]["OTP"]["SharedSetting"] = A.load.Ref(ptr + 2132 + 1732 + 744 + 20, undefined);
            if (A.load.Bool(ptr + 2132 + 1732 + 744 + 26)) {
              x["VPN"]["OpenVPN"]["OTP"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1732 + 744 + 24);
            } else {
              delete x["VPN"]["OpenVPN"]["OTP"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 744 + 27)) {
              x["VPN"]["OpenVPN"]["OTP"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1732 + 744 + 25);
            } else {
              delete x["VPN"]["OpenVPN"]["OTP"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["OTP"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 776 + 28)) {
            x["VPN"]["OpenVPN"]["Password"] = {};
            x["VPN"]["OpenVPN"]["Password"]["Active"] = A.load.Ref(ptr + 2132 + 1732 + 776 + 0, undefined);
            x["VPN"]["OpenVPN"]["Password"]["Effective"] = A.load.Ref(ptr + 2132 + 1732 + 776 + 4, undefined);
            x["VPN"]["OpenVPN"]["Password"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 1732 + 776 + 8, undefined);
            x["VPN"]["OpenVPN"]["Password"]["DevicePolicy"] = A.load.Ref(ptr + 2132 + 1732 + 776 + 12, undefined);
            x["VPN"]["OpenVPN"]["Password"]["UserSetting"] = A.load.Ref(ptr + 2132 + 1732 + 776 + 16, undefined);
            x["VPN"]["OpenVPN"]["Password"]["SharedSetting"] = A.load.Ref(ptr + 2132 + 1732 + 776 + 20, undefined);
            if (A.load.Bool(ptr + 2132 + 1732 + 776 + 26)) {
              x["VPN"]["OpenVPN"]["Password"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1732 + 776 + 24);
            } else {
              delete x["VPN"]["OpenVPN"]["Password"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 776 + 27)) {
              x["VPN"]["OpenVPN"]["Password"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1732 + 776 + 25);
            } else {
              delete x["VPN"]["OpenVPN"]["Password"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["Password"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 808 + 33)) {
            x["VPN"]["OpenVPN"]["Port"] = {};
            if (A.load.Bool(ptr + 2132 + 1732 + 808 + 26)) {
              x["VPN"]["OpenVPN"]["Port"]["Active"] = A.load.Int32(ptr + 2132 + 1732 + 808 + 0);
            } else {
              delete x["VPN"]["OpenVPN"]["Port"]["Active"];
            }
            x["VPN"]["OpenVPN"]["Port"]["Effective"] = A.load.Ref(ptr + 2132 + 1732 + 808 + 4, undefined);
            if (A.load.Bool(ptr + 2132 + 1732 + 808 + 27)) {
              x["VPN"]["OpenVPN"]["Port"]["UserPolicy"] = A.load.Int32(ptr + 2132 + 1732 + 808 + 8);
            } else {
              delete x["VPN"]["OpenVPN"]["Port"]["UserPolicy"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 808 + 28)) {
              x["VPN"]["OpenVPN"]["Port"]["DevicePolicy"] = A.load.Int32(ptr + 2132 + 1732 + 808 + 12);
            } else {
              delete x["VPN"]["OpenVPN"]["Port"]["DevicePolicy"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 808 + 29)) {
              x["VPN"]["OpenVPN"]["Port"]["UserSetting"] = A.load.Int32(ptr + 2132 + 1732 + 808 + 16);
            } else {
              delete x["VPN"]["OpenVPN"]["Port"]["UserSetting"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 808 + 30)) {
              x["VPN"]["OpenVPN"]["Port"]["SharedSetting"] = A.load.Int32(ptr + 2132 + 1732 + 808 + 20);
            } else {
              delete x["VPN"]["OpenVPN"]["Port"]["SharedSetting"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 808 + 31)) {
              x["VPN"]["OpenVPN"]["Port"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1732 + 808 + 24);
            } else {
              delete x["VPN"]["OpenVPN"]["Port"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 808 + 32)) {
              x["VPN"]["OpenVPN"]["Port"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1732 + 808 + 25);
            } else {
              delete x["VPN"]["OpenVPN"]["Port"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["Port"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 844 + 28)) {
            x["VPN"]["OpenVPN"]["Proto"] = {};
            x["VPN"]["OpenVPN"]["Proto"]["Active"] = A.load.Ref(ptr + 2132 + 1732 + 844 + 0, undefined);
            x["VPN"]["OpenVPN"]["Proto"]["Effective"] = A.load.Ref(ptr + 2132 + 1732 + 844 + 4, undefined);
            x["VPN"]["OpenVPN"]["Proto"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 1732 + 844 + 8, undefined);
            x["VPN"]["OpenVPN"]["Proto"]["DevicePolicy"] = A.load.Ref(ptr + 2132 + 1732 + 844 + 12, undefined);
            x["VPN"]["OpenVPN"]["Proto"]["UserSetting"] = A.load.Ref(ptr + 2132 + 1732 + 844 + 16, undefined);
            x["VPN"]["OpenVPN"]["Proto"]["SharedSetting"] = A.load.Ref(ptr + 2132 + 1732 + 844 + 20, undefined);
            if (A.load.Bool(ptr + 2132 + 1732 + 844 + 26)) {
              x["VPN"]["OpenVPN"]["Proto"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1732 + 844 + 24);
            } else {
              delete x["VPN"]["OpenVPN"]["Proto"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 844 + 27)) {
              x["VPN"]["OpenVPN"]["Proto"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1732 + 844 + 25);
            } else {
              delete x["VPN"]["OpenVPN"]["Proto"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["Proto"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 876 + 21)) {
            x["VPN"]["OpenVPN"]["PushPeerInfo"] = {};
            if (A.load.Bool(ptr + 2132 + 1732 + 876 + 14)) {
              x["VPN"]["OpenVPN"]["PushPeerInfo"]["Active"] = A.load.Bool(ptr + 2132 + 1732 + 876 + 0);
            } else {
              delete x["VPN"]["OpenVPN"]["PushPeerInfo"]["Active"];
            }
            x["VPN"]["OpenVPN"]["PushPeerInfo"]["Effective"] = A.load.Ref(ptr + 2132 + 1732 + 876 + 4, undefined);
            if (A.load.Bool(ptr + 2132 + 1732 + 876 + 15)) {
              x["VPN"]["OpenVPN"]["PushPeerInfo"]["UserPolicy"] = A.load.Bool(ptr + 2132 + 1732 + 876 + 8);
            } else {
              delete x["VPN"]["OpenVPN"]["PushPeerInfo"]["UserPolicy"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 876 + 16)) {
              x["VPN"]["OpenVPN"]["PushPeerInfo"]["DevicePolicy"] = A.load.Bool(ptr + 2132 + 1732 + 876 + 9);
            } else {
              delete x["VPN"]["OpenVPN"]["PushPeerInfo"]["DevicePolicy"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 876 + 17)) {
              x["VPN"]["OpenVPN"]["PushPeerInfo"]["UserSetting"] = A.load.Bool(ptr + 2132 + 1732 + 876 + 10);
            } else {
              delete x["VPN"]["OpenVPN"]["PushPeerInfo"]["UserSetting"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 876 + 18)) {
              x["VPN"]["OpenVPN"]["PushPeerInfo"]["SharedSetting"] = A.load.Bool(ptr + 2132 + 1732 + 876 + 11);
            } else {
              delete x["VPN"]["OpenVPN"]["PushPeerInfo"]["SharedSetting"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 876 + 19)) {
              x["VPN"]["OpenVPN"]["PushPeerInfo"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1732 + 876 + 12);
            } else {
              delete x["VPN"]["OpenVPN"]["PushPeerInfo"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 876 + 20)) {
              x["VPN"]["OpenVPN"]["PushPeerInfo"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1732 + 876 + 13);
            } else {
              delete x["VPN"]["OpenVPN"]["PushPeerInfo"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["PushPeerInfo"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 900 + 28)) {
            x["VPN"]["OpenVPN"]["RemoteCertEKU"] = {};
            x["VPN"]["OpenVPN"]["RemoteCertEKU"]["Active"] = A.load.Ref(ptr + 2132 + 1732 + 900 + 0, undefined);
            x["VPN"]["OpenVPN"]["RemoteCertEKU"]["Effective"] = A.load.Ref(ptr + 2132 + 1732 + 900 + 4, undefined);
            x["VPN"]["OpenVPN"]["RemoteCertEKU"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 1732 + 900 + 8, undefined);
            x["VPN"]["OpenVPN"]["RemoteCertEKU"]["DevicePolicy"] = A.load.Ref(ptr + 2132 + 1732 + 900 + 12, undefined);
            x["VPN"]["OpenVPN"]["RemoteCertEKU"]["UserSetting"] = A.load.Ref(ptr + 2132 + 1732 + 900 + 16, undefined);
            x["VPN"]["OpenVPN"]["RemoteCertEKU"]["SharedSetting"] = A.load.Ref(ptr + 2132 + 1732 + 900 + 20, undefined);
            if (A.load.Bool(ptr + 2132 + 1732 + 900 + 26)) {
              x["VPN"]["OpenVPN"]["RemoteCertEKU"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1732 + 900 + 24);
            } else {
              delete x["VPN"]["OpenVPN"]["RemoteCertEKU"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 900 + 27)) {
              x["VPN"]["OpenVPN"]["RemoteCertEKU"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1732 + 900 + 25);
            } else {
              delete x["VPN"]["OpenVPN"]["RemoteCertEKU"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["RemoteCertEKU"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 932 + 28)) {
            x["VPN"]["OpenVPN"]["RemoteCertKU"] = {};
            x["VPN"]["OpenVPN"]["RemoteCertKU"]["Active"] = A.load.Ref(ptr + 2132 + 1732 + 932 + 0, undefined);
            x["VPN"]["OpenVPN"]["RemoteCertKU"]["Effective"] = A.load.Ref(ptr + 2132 + 1732 + 932 + 4, undefined);
            x["VPN"]["OpenVPN"]["RemoteCertKU"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 1732 + 932 + 8, undefined);
            x["VPN"]["OpenVPN"]["RemoteCertKU"]["DevicePolicy"] = A.load.Ref(ptr + 2132 + 1732 + 932 + 12, undefined);
            x["VPN"]["OpenVPN"]["RemoteCertKU"]["UserSetting"] = A.load.Ref(ptr + 2132 + 1732 + 932 + 16, undefined);
            x["VPN"]["OpenVPN"]["RemoteCertKU"]["SharedSetting"] = A.load.Ref(ptr + 2132 + 1732 + 932 + 20, undefined);
            if (A.load.Bool(ptr + 2132 + 1732 + 932 + 26)) {
              x["VPN"]["OpenVPN"]["RemoteCertKU"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1732 + 932 + 24);
            } else {
              delete x["VPN"]["OpenVPN"]["RemoteCertKU"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 932 + 27)) {
              x["VPN"]["OpenVPN"]["RemoteCertKU"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1732 + 932 + 25);
            } else {
              delete x["VPN"]["OpenVPN"]["RemoteCertKU"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["RemoteCertKU"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 964 + 28)) {
            x["VPN"]["OpenVPN"]["RemoteCertTLS"] = {};
            x["VPN"]["OpenVPN"]["RemoteCertTLS"]["Active"] = A.load.Ref(ptr + 2132 + 1732 + 964 + 0, undefined);
            x["VPN"]["OpenVPN"]["RemoteCertTLS"]["Effective"] = A.load.Ref(ptr + 2132 + 1732 + 964 + 4, undefined);
            x["VPN"]["OpenVPN"]["RemoteCertTLS"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 1732 + 964 + 8, undefined);
            x["VPN"]["OpenVPN"]["RemoteCertTLS"]["DevicePolicy"] = A.load.Ref(ptr + 2132 + 1732 + 964 + 12, undefined);
            x["VPN"]["OpenVPN"]["RemoteCertTLS"]["UserSetting"] = A.load.Ref(ptr + 2132 + 1732 + 964 + 16, undefined);
            x["VPN"]["OpenVPN"]["RemoteCertTLS"]["SharedSetting"] = A.load.Ref(ptr + 2132 + 1732 + 964 + 20, undefined);
            if (A.load.Bool(ptr + 2132 + 1732 + 964 + 26)) {
              x["VPN"]["OpenVPN"]["RemoteCertTLS"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1732 + 964 + 24);
            } else {
              delete x["VPN"]["OpenVPN"]["RemoteCertTLS"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 964 + 27)) {
              x["VPN"]["OpenVPN"]["RemoteCertTLS"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1732 + 964 + 25);
            } else {
              delete x["VPN"]["OpenVPN"]["RemoteCertTLS"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["RemoteCertTLS"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 996 + 33)) {
            x["VPN"]["OpenVPN"]["RenegSec"] = {};
            if (A.load.Bool(ptr + 2132 + 1732 + 996 + 26)) {
              x["VPN"]["OpenVPN"]["RenegSec"]["Active"] = A.load.Int32(ptr + 2132 + 1732 + 996 + 0);
            } else {
              delete x["VPN"]["OpenVPN"]["RenegSec"]["Active"];
            }
            x["VPN"]["OpenVPN"]["RenegSec"]["Effective"] = A.load.Ref(ptr + 2132 + 1732 + 996 + 4, undefined);
            if (A.load.Bool(ptr + 2132 + 1732 + 996 + 27)) {
              x["VPN"]["OpenVPN"]["RenegSec"]["UserPolicy"] = A.load.Int32(ptr + 2132 + 1732 + 996 + 8);
            } else {
              delete x["VPN"]["OpenVPN"]["RenegSec"]["UserPolicy"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 996 + 28)) {
              x["VPN"]["OpenVPN"]["RenegSec"]["DevicePolicy"] = A.load.Int32(ptr + 2132 + 1732 + 996 + 12);
            } else {
              delete x["VPN"]["OpenVPN"]["RenegSec"]["DevicePolicy"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 996 + 29)) {
              x["VPN"]["OpenVPN"]["RenegSec"]["UserSetting"] = A.load.Int32(ptr + 2132 + 1732 + 996 + 16);
            } else {
              delete x["VPN"]["OpenVPN"]["RenegSec"]["UserSetting"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 996 + 30)) {
              x["VPN"]["OpenVPN"]["RenegSec"]["SharedSetting"] = A.load.Int32(ptr + 2132 + 1732 + 996 + 20);
            } else {
              delete x["VPN"]["OpenVPN"]["RenegSec"]["SharedSetting"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 996 + 31)) {
              x["VPN"]["OpenVPN"]["RenegSec"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1732 + 996 + 24);
            } else {
              delete x["VPN"]["OpenVPN"]["RenegSec"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 996 + 32)) {
              x["VPN"]["OpenVPN"]["RenegSec"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1732 + 996 + 25);
            } else {
              delete x["VPN"]["OpenVPN"]["RenegSec"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["RenegSec"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 1032 + 21)) {
            x["VPN"]["OpenVPN"]["SaveCredentials"] = {};
            if (A.load.Bool(ptr + 2132 + 1732 + 1032 + 14)) {
              x["VPN"]["OpenVPN"]["SaveCredentials"]["Active"] = A.load.Bool(ptr + 2132 + 1732 + 1032 + 0);
            } else {
              delete x["VPN"]["OpenVPN"]["SaveCredentials"]["Active"];
            }
            x["VPN"]["OpenVPN"]["SaveCredentials"]["Effective"] = A.load.Ref(ptr + 2132 + 1732 + 1032 + 4, undefined);
            if (A.load.Bool(ptr + 2132 + 1732 + 1032 + 15)) {
              x["VPN"]["OpenVPN"]["SaveCredentials"]["UserPolicy"] = A.load.Bool(ptr + 2132 + 1732 + 1032 + 8);
            } else {
              delete x["VPN"]["OpenVPN"]["SaveCredentials"]["UserPolicy"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 1032 + 16)) {
              x["VPN"]["OpenVPN"]["SaveCredentials"]["DevicePolicy"] = A.load.Bool(ptr + 2132 + 1732 + 1032 + 9);
            } else {
              delete x["VPN"]["OpenVPN"]["SaveCredentials"]["DevicePolicy"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 1032 + 17)) {
              x["VPN"]["OpenVPN"]["SaveCredentials"]["UserSetting"] = A.load.Bool(ptr + 2132 + 1732 + 1032 + 10);
            } else {
              delete x["VPN"]["OpenVPN"]["SaveCredentials"]["UserSetting"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 1032 + 18)) {
              x["VPN"]["OpenVPN"]["SaveCredentials"]["SharedSetting"] = A.load.Bool(ptr + 2132 + 1732 + 1032 + 11);
            } else {
              delete x["VPN"]["OpenVPN"]["SaveCredentials"]["SharedSetting"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 1032 + 19)) {
              x["VPN"]["OpenVPN"]["SaveCredentials"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1732 + 1032 + 12);
            } else {
              delete x["VPN"]["OpenVPN"]["SaveCredentials"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 1032 + 20)) {
              x["VPN"]["OpenVPN"]["SaveCredentials"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1732 + 1032 + 13);
            } else {
              delete x["VPN"]["OpenVPN"]["SaveCredentials"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["SaveCredentials"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 1056 + 28)) {
            x["VPN"]["OpenVPN"]["ServerCAPEMs"] = {};
            x["VPN"]["OpenVPN"]["ServerCAPEMs"]["Active"] = A.load.Ref(ptr + 2132 + 1732 + 1056 + 0, undefined);
            x["VPN"]["OpenVPN"]["ServerCAPEMs"]["Effective"] = A.load.Ref(ptr + 2132 + 1732 + 1056 + 4, undefined);
            x["VPN"]["OpenVPN"]["ServerCAPEMs"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 1732 + 1056 + 8, undefined);
            x["VPN"]["OpenVPN"]["ServerCAPEMs"]["DevicePolicy"] = A.load.Ref(ptr + 2132 + 1732 + 1056 + 12, undefined);
            x["VPN"]["OpenVPN"]["ServerCAPEMs"]["UserSetting"] = A.load.Ref(ptr + 2132 + 1732 + 1056 + 16, undefined);
            x["VPN"]["OpenVPN"]["ServerCAPEMs"]["SharedSetting"] = A.load.Ref(ptr + 2132 + 1732 + 1056 + 20, undefined);
            if (A.load.Bool(ptr + 2132 + 1732 + 1056 + 26)) {
              x["VPN"]["OpenVPN"]["ServerCAPEMs"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1732 + 1056 + 24);
            } else {
              delete x["VPN"]["OpenVPN"]["ServerCAPEMs"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 1056 + 27)) {
              x["VPN"]["OpenVPN"]["ServerCAPEMs"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1732 + 1056 + 25);
            } else {
              delete x["VPN"]["OpenVPN"]["ServerCAPEMs"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["ServerCAPEMs"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 1088 + 28)) {
            x["VPN"]["OpenVPN"]["ServerCARefs"] = {};
            x["VPN"]["OpenVPN"]["ServerCARefs"]["Active"] = A.load.Ref(ptr + 2132 + 1732 + 1088 + 0, undefined);
            x["VPN"]["OpenVPN"]["ServerCARefs"]["Effective"] = A.load.Ref(ptr + 2132 + 1732 + 1088 + 4, undefined);
            x["VPN"]["OpenVPN"]["ServerCARefs"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 1732 + 1088 + 8, undefined);
            x["VPN"]["OpenVPN"]["ServerCARefs"]["DevicePolicy"] = A.load.Ref(ptr + 2132 + 1732 + 1088 + 12, undefined);
            x["VPN"]["OpenVPN"]["ServerCARefs"]["UserSetting"] = A.load.Ref(ptr + 2132 + 1732 + 1088 + 16, undefined);
            x["VPN"]["OpenVPN"]["ServerCARefs"]["SharedSetting"] = A.load.Ref(ptr + 2132 + 1732 + 1088 + 20, undefined);
            if (A.load.Bool(ptr + 2132 + 1732 + 1088 + 26)) {
              x["VPN"]["OpenVPN"]["ServerCARefs"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1732 + 1088 + 24);
            } else {
              delete x["VPN"]["OpenVPN"]["ServerCARefs"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 1088 + 27)) {
              x["VPN"]["OpenVPN"]["ServerCARefs"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1732 + 1088 + 25);
            } else {
              delete x["VPN"]["OpenVPN"]["ServerCARefs"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["ServerCARefs"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 1120 + 28)) {
            x["VPN"]["OpenVPN"]["ServerCertRef"] = {};
            x["VPN"]["OpenVPN"]["ServerCertRef"]["Active"] = A.load.Ref(ptr + 2132 + 1732 + 1120 + 0, undefined);
            x["VPN"]["OpenVPN"]["ServerCertRef"]["Effective"] = A.load.Ref(ptr + 2132 + 1732 + 1120 + 4, undefined);
            x["VPN"]["OpenVPN"]["ServerCertRef"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 1732 + 1120 + 8, undefined);
            x["VPN"]["OpenVPN"]["ServerCertRef"]["DevicePolicy"] = A.load.Ref(ptr + 2132 + 1732 + 1120 + 12, undefined);
            x["VPN"]["OpenVPN"]["ServerCertRef"]["UserSetting"] = A.load.Ref(ptr + 2132 + 1732 + 1120 + 16, undefined);
            x["VPN"]["OpenVPN"]["ServerCertRef"]["SharedSetting"] = A.load.Ref(
              ptr + 2132 + 1732 + 1120 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 2132 + 1732 + 1120 + 26)) {
              x["VPN"]["OpenVPN"]["ServerCertRef"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1732 + 1120 + 24);
            } else {
              delete x["VPN"]["OpenVPN"]["ServerCertRef"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 1120 + 27)) {
              x["VPN"]["OpenVPN"]["ServerCertRef"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1732 + 1120 + 25);
            } else {
              delete x["VPN"]["OpenVPN"]["ServerCertRef"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["ServerCertRef"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 1152 + 33)) {
            x["VPN"]["OpenVPN"]["ServerPollTimeout"] = {};
            if (A.load.Bool(ptr + 2132 + 1732 + 1152 + 26)) {
              x["VPN"]["OpenVPN"]["ServerPollTimeout"]["Active"] = A.load.Int32(ptr + 2132 + 1732 + 1152 + 0);
            } else {
              delete x["VPN"]["OpenVPN"]["ServerPollTimeout"]["Active"];
            }
            x["VPN"]["OpenVPN"]["ServerPollTimeout"]["Effective"] = A.load.Ref(ptr + 2132 + 1732 + 1152 + 4, undefined);
            if (A.load.Bool(ptr + 2132 + 1732 + 1152 + 27)) {
              x["VPN"]["OpenVPN"]["ServerPollTimeout"]["UserPolicy"] = A.load.Int32(ptr + 2132 + 1732 + 1152 + 8);
            } else {
              delete x["VPN"]["OpenVPN"]["ServerPollTimeout"]["UserPolicy"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 1152 + 28)) {
              x["VPN"]["OpenVPN"]["ServerPollTimeout"]["DevicePolicy"] = A.load.Int32(ptr + 2132 + 1732 + 1152 + 12);
            } else {
              delete x["VPN"]["OpenVPN"]["ServerPollTimeout"]["DevicePolicy"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 1152 + 29)) {
              x["VPN"]["OpenVPN"]["ServerPollTimeout"]["UserSetting"] = A.load.Int32(ptr + 2132 + 1732 + 1152 + 16);
            } else {
              delete x["VPN"]["OpenVPN"]["ServerPollTimeout"]["UserSetting"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 1152 + 30)) {
              x["VPN"]["OpenVPN"]["ServerPollTimeout"]["SharedSetting"] = A.load.Int32(ptr + 2132 + 1732 + 1152 + 20);
            } else {
              delete x["VPN"]["OpenVPN"]["ServerPollTimeout"]["SharedSetting"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 1152 + 31)) {
              x["VPN"]["OpenVPN"]["ServerPollTimeout"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1732 + 1152 + 24);
            } else {
              delete x["VPN"]["OpenVPN"]["ServerPollTimeout"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 1152 + 32)) {
              x["VPN"]["OpenVPN"]["ServerPollTimeout"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1732 + 1152 + 25);
            } else {
              delete x["VPN"]["OpenVPN"]["ServerPollTimeout"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["ServerPollTimeout"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 1188 + 33)) {
            x["VPN"]["OpenVPN"]["Shaper"] = {};
            if (A.load.Bool(ptr + 2132 + 1732 + 1188 + 26)) {
              x["VPN"]["OpenVPN"]["Shaper"]["Active"] = A.load.Int32(ptr + 2132 + 1732 + 1188 + 0);
            } else {
              delete x["VPN"]["OpenVPN"]["Shaper"]["Active"];
            }
            x["VPN"]["OpenVPN"]["Shaper"]["Effective"] = A.load.Ref(ptr + 2132 + 1732 + 1188 + 4, undefined);
            if (A.load.Bool(ptr + 2132 + 1732 + 1188 + 27)) {
              x["VPN"]["OpenVPN"]["Shaper"]["UserPolicy"] = A.load.Int32(ptr + 2132 + 1732 + 1188 + 8);
            } else {
              delete x["VPN"]["OpenVPN"]["Shaper"]["UserPolicy"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 1188 + 28)) {
              x["VPN"]["OpenVPN"]["Shaper"]["DevicePolicy"] = A.load.Int32(ptr + 2132 + 1732 + 1188 + 12);
            } else {
              delete x["VPN"]["OpenVPN"]["Shaper"]["DevicePolicy"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 1188 + 29)) {
              x["VPN"]["OpenVPN"]["Shaper"]["UserSetting"] = A.load.Int32(ptr + 2132 + 1732 + 1188 + 16);
            } else {
              delete x["VPN"]["OpenVPN"]["Shaper"]["UserSetting"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 1188 + 30)) {
              x["VPN"]["OpenVPN"]["Shaper"]["SharedSetting"] = A.load.Int32(ptr + 2132 + 1732 + 1188 + 20);
            } else {
              delete x["VPN"]["OpenVPN"]["Shaper"]["SharedSetting"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 1188 + 31)) {
              x["VPN"]["OpenVPN"]["Shaper"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1732 + 1188 + 24);
            } else {
              delete x["VPN"]["OpenVPN"]["Shaper"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 1188 + 32)) {
              x["VPN"]["OpenVPN"]["Shaper"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1732 + 1188 + 25);
            } else {
              delete x["VPN"]["OpenVPN"]["Shaper"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["Shaper"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 1224 + 28)) {
            x["VPN"]["OpenVPN"]["StaticChallenge"] = {};
            x["VPN"]["OpenVPN"]["StaticChallenge"]["Active"] = A.load.Ref(ptr + 2132 + 1732 + 1224 + 0, undefined);
            x["VPN"]["OpenVPN"]["StaticChallenge"]["Effective"] = A.load.Ref(ptr + 2132 + 1732 + 1224 + 4, undefined);
            x["VPN"]["OpenVPN"]["StaticChallenge"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 1732 + 1224 + 8, undefined);
            x["VPN"]["OpenVPN"]["StaticChallenge"]["DevicePolicy"] = A.load.Ref(
              ptr + 2132 + 1732 + 1224 + 12,
              undefined
            );
            x["VPN"]["OpenVPN"]["StaticChallenge"]["UserSetting"] = A.load.Ref(
              ptr + 2132 + 1732 + 1224 + 16,
              undefined
            );
            x["VPN"]["OpenVPN"]["StaticChallenge"]["SharedSetting"] = A.load.Ref(
              ptr + 2132 + 1732 + 1224 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 2132 + 1732 + 1224 + 26)) {
              x["VPN"]["OpenVPN"]["StaticChallenge"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1732 + 1224 + 24);
            } else {
              delete x["VPN"]["OpenVPN"]["StaticChallenge"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 1224 + 27)) {
              x["VPN"]["OpenVPN"]["StaticChallenge"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1732 + 1224 + 25);
            } else {
              delete x["VPN"]["OpenVPN"]["StaticChallenge"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["StaticChallenge"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 1256 + 28)) {
            x["VPN"]["OpenVPN"]["TLSAuthContents"] = {};
            x["VPN"]["OpenVPN"]["TLSAuthContents"]["Active"] = A.load.Ref(ptr + 2132 + 1732 + 1256 + 0, undefined);
            x["VPN"]["OpenVPN"]["TLSAuthContents"]["Effective"] = A.load.Ref(ptr + 2132 + 1732 + 1256 + 4, undefined);
            x["VPN"]["OpenVPN"]["TLSAuthContents"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 1732 + 1256 + 8, undefined);
            x["VPN"]["OpenVPN"]["TLSAuthContents"]["DevicePolicy"] = A.load.Ref(
              ptr + 2132 + 1732 + 1256 + 12,
              undefined
            );
            x["VPN"]["OpenVPN"]["TLSAuthContents"]["UserSetting"] = A.load.Ref(
              ptr + 2132 + 1732 + 1256 + 16,
              undefined
            );
            x["VPN"]["OpenVPN"]["TLSAuthContents"]["SharedSetting"] = A.load.Ref(
              ptr + 2132 + 1732 + 1256 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 2132 + 1732 + 1256 + 26)) {
              x["VPN"]["OpenVPN"]["TLSAuthContents"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1732 + 1256 + 24);
            } else {
              delete x["VPN"]["OpenVPN"]["TLSAuthContents"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 1256 + 27)) {
              x["VPN"]["OpenVPN"]["TLSAuthContents"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1732 + 1256 + 25);
            } else {
              delete x["VPN"]["OpenVPN"]["TLSAuthContents"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["TLSAuthContents"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 1288 + 28)) {
            x["VPN"]["OpenVPN"]["TLSRemote"] = {};
            x["VPN"]["OpenVPN"]["TLSRemote"]["Active"] = A.load.Ref(ptr + 2132 + 1732 + 1288 + 0, undefined);
            x["VPN"]["OpenVPN"]["TLSRemote"]["Effective"] = A.load.Ref(ptr + 2132 + 1732 + 1288 + 4, undefined);
            x["VPN"]["OpenVPN"]["TLSRemote"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 1732 + 1288 + 8, undefined);
            x["VPN"]["OpenVPN"]["TLSRemote"]["DevicePolicy"] = A.load.Ref(ptr + 2132 + 1732 + 1288 + 12, undefined);
            x["VPN"]["OpenVPN"]["TLSRemote"]["UserSetting"] = A.load.Ref(ptr + 2132 + 1732 + 1288 + 16, undefined);
            x["VPN"]["OpenVPN"]["TLSRemote"]["SharedSetting"] = A.load.Ref(ptr + 2132 + 1732 + 1288 + 20, undefined);
            if (A.load.Bool(ptr + 2132 + 1732 + 1288 + 26)) {
              x["VPN"]["OpenVPN"]["TLSRemote"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1732 + 1288 + 24);
            } else {
              delete x["VPN"]["OpenVPN"]["TLSRemote"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 1288 + 27)) {
              x["VPN"]["OpenVPN"]["TLSRemote"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1732 + 1288 + 25);
            } else {
              delete x["VPN"]["OpenVPN"]["TLSRemote"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["TLSRemote"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 1320 + 28)) {
            x["VPN"]["OpenVPN"]["TLSVersionMin"] = {};
            x["VPN"]["OpenVPN"]["TLSVersionMin"]["Active"] = A.load.Ref(ptr + 2132 + 1732 + 1320 + 0, undefined);
            x["VPN"]["OpenVPN"]["TLSVersionMin"]["Effective"] = A.load.Ref(ptr + 2132 + 1732 + 1320 + 4, undefined);
            x["VPN"]["OpenVPN"]["TLSVersionMin"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 1732 + 1320 + 8, undefined);
            x["VPN"]["OpenVPN"]["TLSVersionMin"]["DevicePolicy"] = A.load.Ref(ptr + 2132 + 1732 + 1320 + 12, undefined);
            x["VPN"]["OpenVPN"]["TLSVersionMin"]["UserSetting"] = A.load.Ref(ptr + 2132 + 1732 + 1320 + 16, undefined);
            x["VPN"]["OpenVPN"]["TLSVersionMin"]["SharedSetting"] = A.load.Ref(
              ptr + 2132 + 1732 + 1320 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 2132 + 1732 + 1320 + 26)) {
              x["VPN"]["OpenVPN"]["TLSVersionMin"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1732 + 1320 + 24);
            } else {
              delete x["VPN"]["OpenVPN"]["TLSVersionMin"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 1320 + 27)) {
              x["VPN"]["OpenVPN"]["TLSVersionMin"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1732 + 1320 + 25);
            } else {
              delete x["VPN"]["OpenVPN"]["TLSVersionMin"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["TLSVersionMin"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 1352 + 28)) {
            x["VPN"]["OpenVPN"]["UserAuthenticationType"] = {};
            x["VPN"]["OpenVPN"]["UserAuthenticationType"]["Active"] = A.load.Ref(
              ptr + 2132 + 1732 + 1352 + 0,
              undefined
            );
            x["VPN"]["OpenVPN"]["UserAuthenticationType"]["Effective"] = A.load.Ref(
              ptr + 2132 + 1732 + 1352 + 4,
              undefined
            );
            x["VPN"]["OpenVPN"]["UserAuthenticationType"]["UserPolicy"] = A.load.Ref(
              ptr + 2132 + 1732 + 1352 + 8,
              undefined
            );
            x["VPN"]["OpenVPN"]["UserAuthenticationType"]["DevicePolicy"] = A.load.Ref(
              ptr + 2132 + 1732 + 1352 + 12,
              undefined
            );
            x["VPN"]["OpenVPN"]["UserAuthenticationType"]["UserSetting"] = A.load.Ref(
              ptr + 2132 + 1732 + 1352 + 16,
              undefined
            );
            x["VPN"]["OpenVPN"]["UserAuthenticationType"]["SharedSetting"] = A.load.Ref(
              ptr + 2132 + 1732 + 1352 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 2132 + 1732 + 1352 + 26)) {
              x["VPN"]["OpenVPN"]["UserAuthenticationType"]["UserEditable"] = A.load.Bool(
                ptr + 2132 + 1732 + 1352 + 24
              );
            } else {
              delete x["VPN"]["OpenVPN"]["UserAuthenticationType"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 1352 + 27)) {
              x["VPN"]["OpenVPN"]["UserAuthenticationType"]["DeviceEditable"] = A.load.Bool(
                ptr + 2132 + 1732 + 1352 + 25
              );
            } else {
              delete x["VPN"]["OpenVPN"]["UserAuthenticationType"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["UserAuthenticationType"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 1384 + 28)) {
            x["VPN"]["OpenVPN"]["Username"] = {};
            x["VPN"]["OpenVPN"]["Username"]["Active"] = A.load.Ref(ptr + 2132 + 1732 + 1384 + 0, undefined);
            x["VPN"]["OpenVPN"]["Username"]["Effective"] = A.load.Ref(ptr + 2132 + 1732 + 1384 + 4, undefined);
            x["VPN"]["OpenVPN"]["Username"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 1732 + 1384 + 8, undefined);
            x["VPN"]["OpenVPN"]["Username"]["DevicePolicy"] = A.load.Ref(ptr + 2132 + 1732 + 1384 + 12, undefined);
            x["VPN"]["OpenVPN"]["Username"]["UserSetting"] = A.load.Ref(ptr + 2132 + 1732 + 1384 + 16, undefined);
            x["VPN"]["OpenVPN"]["Username"]["SharedSetting"] = A.load.Ref(ptr + 2132 + 1732 + 1384 + 20, undefined);
            if (A.load.Bool(ptr + 2132 + 1732 + 1384 + 26)) {
              x["VPN"]["OpenVPN"]["Username"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1732 + 1384 + 24);
            } else {
              delete x["VPN"]["OpenVPN"]["Username"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 1384 + 27)) {
              x["VPN"]["OpenVPN"]["Username"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1732 + 1384 + 25);
            } else {
              delete x["VPN"]["OpenVPN"]["Username"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["Username"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 1416 + 28)) {
            x["VPN"]["OpenVPN"]["Verb"] = {};
            x["VPN"]["OpenVPN"]["Verb"]["Active"] = A.load.Ref(ptr + 2132 + 1732 + 1416 + 0, undefined);
            x["VPN"]["OpenVPN"]["Verb"]["Effective"] = A.load.Ref(ptr + 2132 + 1732 + 1416 + 4, undefined);
            x["VPN"]["OpenVPN"]["Verb"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 1732 + 1416 + 8, undefined);
            x["VPN"]["OpenVPN"]["Verb"]["DevicePolicy"] = A.load.Ref(ptr + 2132 + 1732 + 1416 + 12, undefined);
            x["VPN"]["OpenVPN"]["Verb"]["UserSetting"] = A.load.Ref(ptr + 2132 + 1732 + 1416 + 16, undefined);
            x["VPN"]["OpenVPN"]["Verb"]["SharedSetting"] = A.load.Ref(ptr + 2132 + 1732 + 1416 + 20, undefined);
            if (A.load.Bool(ptr + 2132 + 1732 + 1416 + 26)) {
              x["VPN"]["OpenVPN"]["Verb"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1732 + 1416 + 24);
            } else {
              delete x["VPN"]["OpenVPN"]["Verb"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 1416 + 27)) {
              x["VPN"]["OpenVPN"]["Verb"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1732 + 1416 + 25);
            } else {
              delete x["VPN"]["OpenVPN"]["Verb"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["Verb"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 1448 + 28)) {
            x["VPN"]["OpenVPN"]["VerifyHash"] = {};
            x["VPN"]["OpenVPN"]["VerifyHash"]["Active"] = A.load.Ref(ptr + 2132 + 1732 + 1448 + 0, undefined);
            x["VPN"]["OpenVPN"]["VerifyHash"]["Effective"] = A.load.Ref(ptr + 2132 + 1732 + 1448 + 4, undefined);
            x["VPN"]["OpenVPN"]["VerifyHash"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 1732 + 1448 + 8, undefined);
            x["VPN"]["OpenVPN"]["VerifyHash"]["DevicePolicy"] = A.load.Ref(ptr + 2132 + 1732 + 1448 + 12, undefined);
            x["VPN"]["OpenVPN"]["VerifyHash"]["UserSetting"] = A.load.Ref(ptr + 2132 + 1732 + 1448 + 16, undefined);
            x["VPN"]["OpenVPN"]["VerifyHash"]["SharedSetting"] = A.load.Ref(ptr + 2132 + 1732 + 1448 + 20, undefined);
            if (A.load.Bool(ptr + 2132 + 1732 + 1448 + 26)) {
              x["VPN"]["OpenVPN"]["VerifyHash"]["UserEditable"] = A.load.Bool(ptr + 2132 + 1732 + 1448 + 24);
            } else {
              delete x["VPN"]["OpenVPN"]["VerifyHash"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 1448 + 27)) {
              x["VPN"]["OpenVPN"]["VerifyHash"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 1732 + 1448 + 25);
            } else {
              delete x["VPN"]["OpenVPN"]["VerifyHash"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["VerifyHash"];
          }
          if (A.load.Bool(ptr + 2132 + 1732 + 1480 + 61)) {
            x["VPN"]["OpenVPN"]["VerifyX509"] = {};
            if (A.load.Bool(ptr + 2132 + 1732 + 1480 + 0 + 28)) {
              x["VPN"]["OpenVPN"]["VerifyX509"]["Name"] = {};
              x["VPN"]["OpenVPN"]["VerifyX509"]["Name"]["Active"] = A.load.Ref(
                ptr + 2132 + 1732 + 1480 + 0 + 0,
                undefined
              );
              x["VPN"]["OpenVPN"]["VerifyX509"]["Name"]["Effective"] = A.load.Ref(
                ptr + 2132 + 1732 + 1480 + 0 + 4,
                undefined
              );
              x["VPN"]["OpenVPN"]["VerifyX509"]["Name"]["UserPolicy"] = A.load.Ref(
                ptr + 2132 + 1732 + 1480 + 0 + 8,
                undefined
              );
              x["VPN"]["OpenVPN"]["VerifyX509"]["Name"]["DevicePolicy"] = A.load.Ref(
                ptr + 2132 + 1732 + 1480 + 0 + 12,
                undefined
              );
              x["VPN"]["OpenVPN"]["VerifyX509"]["Name"]["UserSetting"] = A.load.Ref(
                ptr + 2132 + 1732 + 1480 + 0 + 16,
                undefined
              );
              x["VPN"]["OpenVPN"]["VerifyX509"]["Name"]["SharedSetting"] = A.load.Ref(
                ptr + 2132 + 1732 + 1480 + 0 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 2132 + 1732 + 1480 + 0 + 26)) {
                x["VPN"]["OpenVPN"]["VerifyX509"]["Name"]["UserEditable"] = A.load.Bool(
                  ptr + 2132 + 1732 + 1480 + 0 + 24
                );
              } else {
                delete x["VPN"]["OpenVPN"]["VerifyX509"]["Name"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 2132 + 1732 + 1480 + 0 + 27)) {
                x["VPN"]["OpenVPN"]["VerifyX509"]["Name"]["DeviceEditable"] = A.load.Bool(
                  ptr + 2132 + 1732 + 1480 + 0 + 25
                );
              } else {
                delete x["VPN"]["OpenVPN"]["VerifyX509"]["Name"]["DeviceEditable"];
              }
            } else {
              delete x["VPN"]["OpenVPN"]["VerifyX509"]["Name"];
            }
            if (A.load.Bool(ptr + 2132 + 1732 + 1480 + 32 + 28)) {
              x["VPN"]["OpenVPN"]["VerifyX509"]["Type"] = {};
              x["VPN"]["OpenVPN"]["VerifyX509"]["Type"]["Active"] = A.load.Ref(
                ptr + 2132 + 1732 + 1480 + 32 + 0,
                undefined
              );
              x["VPN"]["OpenVPN"]["VerifyX509"]["Type"]["Effective"] = A.load.Ref(
                ptr + 2132 + 1732 + 1480 + 32 + 4,
                undefined
              );
              x["VPN"]["OpenVPN"]["VerifyX509"]["Type"]["UserPolicy"] = A.load.Ref(
                ptr + 2132 + 1732 + 1480 + 32 + 8,
                undefined
              );
              x["VPN"]["OpenVPN"]["VerifyX509"]["Type"]["DevicePolicy"] = A.load.Ref(
                ptr + 2132 + 1732 + 1480 + 32 + 12,
                undefined
              );
              x["VPN"]["OpenVPN"]["VerifyX509"]["Type"]["UserSetting"] = A.load.Ref(
                ptr + 2132 + 1732 + 1480 + 32 + 16,
                undefined
              );
              x["VPN"]["OpenVPN"]["VerifyX509"]["Type"]["SharedSetting"] = A.load.Ref(
                ptr + 2132 + 1732 + 1480 + 32 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 2132 + 1732 + 1480 + 32 + 26)) {
                x["VPN"]["OpenVPN"]["VerifyX509"]["Type"]["UserEditable"] = A.load.Bool(
                  ptr + 2132 + 1732 + 1480 + 32 + 24
                );
              } else {
                delete x["VPN"]["OpenVPN"]["VerifyX509"]["Type"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 2132 + 1732 + 1480 + 32 + 27)) {
                x["VPN"]["OpenVPN"]["VerifyX509"]["Type"]["DeviceEditable"] = A.load.Bool(
                  ptr + 2132 + 1732 + 1480 + 32 + 25
                );
              } else {
                delete x["VPN"]["OpenVPN"]["VerifyX509"]["Type"]["DeviceEditable"];
              }
            } else {
              delete x["VPN"]["OpenVPN"]["VerifyX509"]["Type"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["VerifyX509"];
          }
        } else {
          delete x["VPN"]["OpenVPN"];
        }
        if (A.load.Bool(ptr + 2132 + 3276 + 36)) {
          x["VPN"]["ThirdPartyVPN"] = {};
          if (A.load.Bool(ptr + 2132 + 3276 + 0 + 28)) {
            x["VPN"]["ThirdPartyVPN"]["ExtensionID"] = {};
            x["VPN"]["ThirdPartyVPN"]["ExtensionID"]["Active"] = A.load.Ref(ptr + 2132 + 3276 + 0 + 0, undefined);
            x["VPN"]["ThirdPartyVPN"]["ExtensionID"]["Effective"] = A.load.Ref(ptr + 2132 + 3276 + 0 + 4, undefined);
            x["VPN"]["ThirdPartyVPN"]["ExtensionID"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 3276 + 0 + 8, undefined);
            x["VPN"]["ThirdPartyVPN"]["ExtensionID"]["DevicePolicy"] = A.load.Ref(
              ptr + 2132 + 3276 + 0 + 12,
              undefined
            );
            x["VPN"]["ThirdPartyVPN"]["ExtensionID"]["UserSetting"] = A.load.Ref(ptr + 2132 + 3276 + 0 + 16, undefined);
            x["VPN"]["ThirdPartyVPN"]["ExtensionID"]["SharedSetting"] = A.load.Ref(
              ptr + 2132 + 3276 + 0 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 2132 + 3276 + 0 + 26)) {
              x["VPN"]["ThirdPartyVPN"]["ExtensionID"]["UserEditable"] = A.load.Bool(ptr + 2132 + 3276 + 0 + 24);
            } else {
              delete x["VPN"]["ThirdPartyVPN"]["ExtensionID"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 2132 + 3276 + 0 + 27)) {
              x["VPN"]["ThirdPartyVPN"]["ExtensionID"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 3276 + 0 + 25);
            } else {
              delete x["VPN"]["ThirdPartyVPN"]["ExtensionID"]["DeviceEditable"];
            }
          } else {
            delete x["VPN"]["ThirdPartyVPN"]["ExtensionID"];
          }
          x["VPN"]["ThirdPartyVPN"]["ProviderName"] = A.load.Ref(ptr + 2132 + 3276 + 32, undefined);
        } else {
          delete x["VPN"]["ThirdPartyVPN"];
        }
        if (A.load.Bool(ptr + 2132 + 3316 + 28)) {
          x["VPN"]["Type"] = {};
          x["VPN"]["Type"]["Active"] = A.load.Ref(ptr + 2132 + 3316 + 0, undefined);
          x["VPN"]["Type"]["Effective"] = A.load.Ref(ptr + 2132 + 3316 + 4, undefined);
          x["VPN"]["Type"]["UserPolicy"] = A.load.Ref(ptr + 2132 + 3316 + 8, undefined);
          x["VPN"]["Type"]["DevicePolicy"] = A.load.Ref(ptr + 2132 + 3316 + 12, undefined);
          x["VPN"]["Type"]["UserSetting"] = A.load.Ref(ptr + 2132 + 3316 + 16, undefined);
          x["VPN"]["Type"]["SharedSetting"] = A.load.Ref(ptr + 2132 + 3316 + 20, undefined);
          if (A.load.Bool(ptr + 2132 + 3316 + 26)) {
            x["VPN"]["Type"]["UserEditable"] = A.load.Bool(ptr + 2132 + 3316 + 24);
          } else {
            delete x["VPN"]["Type"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 2132 + 3316 + 27)) {
            x["VPN"]["Type"]["DeviceEditable"] = A.load.Bool(ptr + 2132 + 3316 + 25);
          } else {
            delete x["VPN"]["Type"]["DeviceEditable"];
          }
        } else {
          delete x["VPN"]["Type"];
        }
      } else {
        delete x["VPN"];
      }
      if (A.load.Bool(ptr + 5480 + 1026)) {
        x["WiFi"] = {};
        if (A.load.Bool(ptr + 5480 + 0 + 21)) {
          x["WiFi"]["AllowGatewayARPPolling"] = {};
          if (A.load.Bool(ptr + 5480 + 0 + 14)) {
            x["WiFi"]["AllowGatewayARPPolling"]["Active"] = A.load.Bool(ptr + 5480 + 0 + 0);
          } else {
            delete x["WiFi"]["AllowGatewayARPPolling"]["Active"];
          }
          x["WiFi"]["AllowGatewayARPPolling"]["Effective"] = A.load.Ref(ptr + 5480 + 0 + 4, undefined);
          if (A.load.Bool(ptr + 5480 + 0 + 15)) {
            x["WiFi"]["AllowGatewayARPPolling"]["UserPolicy"] = A.load.Bool(ptr + 5480 + 0 + 8);
          } else {
            delete x["WiFi"]["AllowGatewayARPPolling"]["UserPolicy"];
          }
          if (A.load.Bool(ptr + 5480 + 0 + 16)) {
            x["WiFi"]["AllowGatewayARPPolling"]["DevicePolicy"] = A.load.Bool(ptr + 5480 + 0 + 9);
          } else {
            delete x["WiFi"]["AllowGatewayARPPolling"]["DevicePolicy"];
          }
          if (A.load.Bool(ptr + 5480 + 0 + 17)) {
            x["WiFi"]["AllowGatewayARPPolling"]["UserSetting"] = A.load.Bool(ptr + 5480 + 0 + 10);
          } else {
            delete x["WiFi"]["AllowGatewayARPPolling"]["UserSetting"];
          }
          if (A.load.Bool(ptr + 5480 + 0 + 18)) {
            x["WiFi"]["AllowGatewayARPPolling"]["SharedSetting"] = A.load.Bool(ptr + 5480 + 0 + 11);
          } else {
            delete x["WiFi"]["AllowGatewayARPPolling"]["SharedSetting"];
          }
          if (A.load.Bool(ptr + 5480 + 0 + 19)) {
            x["WiFi"]["AllowGatewayARPPolling"]["UserEditable"] = A.load.Bool(ptr + 5480 + 0 + 12);
          } else {
            delete x["WiFi"]["AllowGatewayARPPolling"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 5480 + 0 + 20)) {
            x["WiFi"]["AllowGatewayARPPolling"]["DeviceEditable"] = A.load.Bool(ptr + 5480 + 0 + 13);
          } else {
            delete x["WiFi"]["AllowGatewayARPPolling"]["DeviceEditable"];
          }
        } else {
          delete x["WiFi"]["AllowGatewayARPPolling"];
        }
        if (A.load.Bool(ptr + 5480 + 24 + 21)) {
          x["WiFi"]["AutoConnect"] = {};
          if (A.load.Bool(ptr + 5480 + 24 + 14)) {
            x["WiFi"]["AutoConnect"]["Active"] = A.load.Bool(ptr + 5480 + 24 + 0);
          } else {
            delete x["WiFi"]["AutoConnect"]["Active"];
          }
          x["WiFi"]["AutoConnect"]["Effective"] = A.load.Ref(ptr + 5480 + 24 + 4, undefined);
          if (A.load.Bool(ptr + 5480 + 24 + 15)) {
            x["WiFi"]["AutoConnect"]["UserPolicy"] = A.load.Bool(ptr + 5480 + 24 + 8);
          } else {
            delete x["WiFi"]["AutoConnect"]["UserPolicy"];
          }
          if (A.load.Bool(ptr + 5480 + 24 + 16)) {
            x["WiFi"]["AutoConnect"]["DevicePolicy"] = A.load.Bool(ptr + 5480 + 24 + 9);
          } else {
            delete x["WiFi"]["AutoConnect"]["DevicePolicy"];
          }
          if (A.load.Bool(ptr + 5480 + 24 + 17)) {
            x["WiFi"]["AutoConnect"]["UserSetting"] = A.load.Bool(ptr + 5480 + 24 + 10);
          } else {
            delete x["WiFi"]["AutoConnect"]["UserSetting"];
          }
          if (A.load.Bool(ptr + 5480 + 24 + 18)) {
            x["WiFi"]["AutoConnect"]["SharedSetting"] = A.load.Bool(ptr + 5480 + 24 + 11);
          } else {
            delete x["WiFi"]["AutoConnect"]["SharedSetting"];
          }
          if (A.load.Bool(ptr + 5480 + 24 + 19)) {
            x["WiFi"]["AutoConnect"]["UserEditable"] = A.load.Bool(ptr + 5480 + 24 + 12);
          } else {
            delete x["WiFi"]["AutoConnect"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 5480 + 24 + 20)) {
            x["WiFi"]["AutoConnect"]["DeviceEditable"] = A.load.Bool(ptr + 5480 + 24 + 13);
          } else {
            delete x["WiFi"]["AutoConnect"]["DeviceEditable"];
          }
        } else {
          delete x["WiFi"]["AutoConnect"];
        }
        x["WiFi"]["BSSID"] = A.load.Ref(ptr + 5480 + 48, undefined);
        if (A.load.Bool(ptr + 5480 + 52 + 806)) {
          x["WiFi"]["EAP"] = {};
          if (A.load.Bool(ptr + 5480 + 52 + 0 + 28)) {
            x["WiFi"]["EAP"]["AnonymousIdentity"] = {};
            x["WiFi"]["EAP"]["AnonymousIdentity"]["Active"] = A.load.Ref(ptr + 5480 + 52 + 0 + 0, undefined);
            x["WiFi"]["EAP"]["AnonymousIdentity"]["Effective"] = A.load.Ref(ptr + 5480 + 52 + 0 + 4, undefined);
            x["WiFi"]["EAP"]["AnonymousIdentity"]["UserPolicy"] = A.load.Ref(ptr + 5480 + 52 + 0 + 8, undefined);
            x["WiFi"]["EAP"]["AnonymousIdentity"]["DevicePolicy"] = A.load.Ref(ptr + 5480 + 52 + 0 + 12, undefined);
            x["WiFi"]["EAP"]["AnonymousIdentity"]["UserSetting"] = A.load.Ref(ptr + 5480 + 52 + 0 + 16, undefined);
            x["WiFi"]["EAP"]["AnonymousIdentity"]["SharedSetting"] = A.load.Ref(ptr + 5480 + 52 + 0 + 20, undefined);
            if (A.load.Bool(ptr + 5480 + 52 + 0 + 26)) {
              x["WiFi"]["EAP"]["AnonymousIdentity"]["UserEditable"] = A.load.Bool(ptr + 5480 + 52 + 0 + 24);
            } else {
              delete x["WiFi"]["EAP"]["AnonymousIdentity"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 5480 + 52 + 0 + 27)) {
              x["WiFi"]["EAP"]["AnonymousIdentity"]["DeviceEditable"] = A.load.Bool(ptr + 5480 + 52 + 0 + 25);
            } else {
              delete x["WiFi"]["EAP"]["AnonymousIdentity"]["DeviceEditable"];
            }
          } else {
            delete x["WiFi"]["EAP"]["AnonymousIdentity"];
          }
          if (A.load.Bool(ptr + 5480 + 52 + 32 + 318)) {
            x["WiFi"]["EAP"]["ClientCertPattern"] = {};
            if (A.load.Bool(ptr + 5480 + 52 + 32 + 0 + 28)) {
              x["WiFi"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] = {};
              x["WiFi"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["Active"] = A.load.Ref(
                ptr + 5480 + 52 + 32 + 0 + 0,
                undefined
              );
              x["WiFi"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["Effective"] = A.load.Ref(
                ptr + 5480 + 52 + 32 + 0 + 4,
                undefined
              );
              x["WiFi"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserPolicy"] = A.load.Ref(
                ptr + 5480 + 52 + 32 + 0 + 8,
                undefined
              );
              x["WiFi"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["DevicePolicy"] = A.load.Ref(
                ptr + 5480 + 52 + 32 + 0 + 12,
                undefined
              );
              x["WiFi"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserSetting"] = A.load.Ref(
                ptr + 5480 + 52 + 32 + 0 + 16,
                undefined
              );
              x["WiFi"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["SharedSetting"] = A.load.Ref(
                ptr + 5480 + 52 + 32 + 0 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 5480 + 52 + 32 + 0 + 26)) {
                x["WiFi"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserEditable"] = A.load.Bool(
                  ptr + 5480 + 52 + 32 + 0 + 24
                );
              } else {
                delete x["WiFi"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 5480 + 52 + 32 + 0 + 27)) {
                x["WiFi"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"] = A.load.Bool(
                  ptr + 5480 + 52 + 32 + 0 + 25
                );
              } else {
                delete x["WiFi"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]["DeviceEditable"];
              }
            } else {
              delete x["WiFi"]["EAP"]["ClientCertPattern"]["EnrollmentURI"];
            }
            if (A.load.Bool(ptr + 5480 + 52 + 32 + 32 + 125)) {
              x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"] = {};
              if (A.load.Bool(ptr + 5480 + 52 + 32 + 32 + 0 + 28)) {
                x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] = {};
                x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["Active"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 32 + 0 + 0,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["Effective"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 32 + 0 + 4,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserPolicy"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 32 + 0 + 8,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["DevicePolicy"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 32 + 0 + 12,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserSetting"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 32 + 0 + 16,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["SharedSetting"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 32 + 0 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 5480 + 52 + 32 + 32 + 0 + 26)) {
                  x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"] = A.load.Bool(
                    ptr + 5480 + 52 + 32 + 32 + 0 + 24
                  );
                } else {
                  delete x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 5480 + 52 + 32 + 32 + 0 + 27)) {
                  x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"] = A.load.Bool(
                    ptr + 5480 + 52 + 32 + 32 + 0 + 25
                  );
                } else {
                  delete x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]["DeviceEditable"];
                }
              } else {
                delete x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"];
              }
              if (A.load.Bool(ptr + 5480 + 52 + 32 + 32 + 32 + 28)) {
                x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] = {};
                x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["Active"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 32 + 32 + 0,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["Effective"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 32 + 32 + 4,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserPolicy"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 32 + 32 + 8,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["DevicePolicy"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 32 + 32 + 12,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserSetting"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 32 + 32 + 16,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["SharedSetting"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 32 + 32 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 5480 + 52 + 32 + 32 + 32 + 26)) {
                  x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"] = A.load.Bool(
                    ptr + 5480 + 52 + 32 + 32 + 32 + 24
                  );
                } else {
                  delete x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 5480 + 52 + 32 + 32 + 32 + 27)) {
                  x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"] = A.load.Bool(
                    ptr + 5480 + 52 + 32 + 32 + 32 + 25
                  );
                } else {
                  delete x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]["DeviceEditable"];
                }
              } else {
                delete x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"];
              }
              if (A.load.Bool(ptr + 5480 + 52 + 32 + 32 + 64 + 28)) {
                x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] = {};
                x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["Active"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 32 + 64 + 0,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["Effective"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 32 + 64 + 4,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserPolicy"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 32 + 64 + 8,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["DevicePolicy"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 32 + 64 + 12,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserSetting"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 32 + 64 + 16,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["SharedSetting"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 32 + 64 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 5480 + 52 + 32 + 32 + 64 + 26)) {
                  x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"] = A.load.Bool(
                    ptr + 5480 + 52 + 32 + 32 + 64 + 24
                  );
                } else {
                  delete x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 5480 + 52 + 32 + 32 + 64 + 27)) {
                  x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"] = A.load.Bool(
                    ptr + 5480 + 52 + 32 + 32 + 64 + 25
                  );
                } else {
                  delete x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]["DeviceEditable"];
                }
              } else {
                delete x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"];
              }
              if (A.load.Bool(ptr + 5480 + 52 + 32 + 32 + 96 + 28)) {
                x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = {};
                x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Active"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 32 + 96 + 0,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["Effective"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 32 + 96 + 4,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserPolicy"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 32 + 96 + 8,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DevicePolicy"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 32 + 96 + 12,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserSetting"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 32 + 96 + 16,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["SharedSetting"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 32 + 96 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 5480 + 52 + 32 + 32 + 96 + 26)) {
                  x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"] = A.load.Bool(
                    ptr + 5480 + 52 + 32 + 32 + 96 + 24
                  );
                } else {
                  delete x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 5480 + 52 + 32 + 32 + 96 + 27)) {
                  x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"] = A.load.Bool(
                    ptr + 5480 + 52 + 32 + 32 + 96 + 25
                  );
                } else {
                  delete x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]["DeviceEditable"];
                }
              } else {
                delete x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"];
              }
            } else {
              delete x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"];
            }
            if (A.load.Bool(ptr + 5480 + 52 + 32 + 160 + 28)) {
              x["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCARef"] = {};
              x["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["Active"] = A.load.Ref(
                ptr + 5480 + 52 + 32 + 160 + 0,
                undefined
              );
              x["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["Effective"] = A.load.Ref(
                ptr + 5480 + 52 + 32 + 160 + 4,
                undefined
              );
              x["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserPolicy"] = A.load.Ref(
                ptr + 5480 + 52 + 32 + 160 + 8,
                undefined
              );
              x["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["DevicePolicy"] = A.load.Ref(
                ptr + 5480 + 52 + 32 + 160 + 12,
                undefined
              );
              x["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserSetting"] = A.load.Ref(
                ptr + 5480 + 52 + 32 + 160 + 16,
                undefined
              );
              x["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["SharedSetting"] = A.load.Ref(
                ptr + 5480 + 52 + 32 + 160 + 20,
                undefined
              );
              if (A.load.Bool(ptr + 5480 + 52 + 32 + 160 + 26)) {
                x["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserEditable"] = A.load.Bool(
                  ptr + 5480 + 52 + 32 + 160 + 24
                );
              } else {
                delete x["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["UserEditable"];
              }
              if (A.load.Bool(ptr + 5480 + 52 + 32 + 160 + 27)) {
                x["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"] = A.load.Bool(
                  ptr + 5480 + 52 + 32 + 160 + 25
                );
              } else {
                delete x["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCARef"]["DeviceEditable"];
              }
            } else {
              delete x["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCARef"];
            }
            if (A.load.Bool(ptr + 5480 + 52 + 32 + 192 + 125)) {
              x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"] = {};
              if (A.load.Bool(ptr + 5480 + 52 + 32 + 192 + 0 + 28)) {
                x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] = {};
                x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["Active"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 192 + 0 + 0,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["Effective"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 192 + 0 + 4,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserPolicy"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 192 + 0 + 8,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["DevicePolicy"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 192 + 0 + 12,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserSetting"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 192 + 0 + 16,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["SharedSetting"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 192 + 0 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 5480 + 52 + 32 + 192 + 0 + 26)) {
                  x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"] = A.load.Bool(
                    ptr + 5480 + 52 + 32 + 192 + 0 + 24
                  );
                } else {
                  delete x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 5480 + 52 + 32 + 192 + 0 + 27)) {
                  x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"] = A.load.Bool(
                    ptr + 5480 + 52 + 32 + 192 + 0 + 25
                  );
                } else {
                  delete x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]["DeviceEditable"];
                }
              } else {
                delete x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"];
              }
              if (A.load.Bool(ptr + 5480 + 52 + 32 + 192 + 32 + 28)) {
                x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"] = {};
                x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["Active"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 192 + 32 + 0,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["Effective"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 192 + 32 + 4,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserPolicy"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 192 + 32 + 8,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["DevicePolicy"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 192 + 32 + 12,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserSetting"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 192 + 32 + 16,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["SharedSetting"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 192 + 32 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 5480 + 52 + 32 + 192 + 32 + 26)) {
                  x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"] = A.load.Bool(
                    ptr + 5480 + 52 + 32 + 192 + 32 + 24
                  );
                } else {
                  delete x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 5480 + 52 + 32 + 192 + 32 + 27)) {
                  x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"] = A.load.Bool(
                    ptr + 5480 + 52 + 32 + 192 + 32 + 25
                  );
                } else {
                  delete x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]["DeviceEditable"];
                }
              } else {
                delete x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"];
              }
              if (A.load.Bool(ptr + 5480 + 52 + 32 + 192 + 64 + 28)) {
                x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"] = {};
                x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["Active"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 192 + 64 + 0,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["Effective"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 192 + 64 + 4,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserPolicy"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 192 + 64 + 8,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["DevicePolicy"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 192 + 64 + 12,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserSetting"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 192 + 64 + 16,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["SharedSetting"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 192 + 64 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 5480 + 52 + 32 + 192 + 64 + 26)) {
                  x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"] = A.load.Bool(
                    ptr + 5480 + 52 + 32 + 192 + 64 + 24
                  );
                } else {
                  delete x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 5480 + 52 + 32 + 192 + 64 + 27)) {
                  x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"] = A.load.Bool(
                    ptr + 5480 + 52 + 32 + 192 + 64 + 25
                  );
                } else {
                  delete x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]["DeviceEditable"];
                }
              } else {
                delete x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"];
              }
              if (A.load.Bool(ptr + 5480 + 52 + 32 + 192 + 96 + 28)) {
                x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = {};
                x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Active"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 192 + 96 + 0,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["Effective"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 192 + 96 + 4,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserPolicy"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 192 + 96 + 8,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DevicePolicy"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 192 + 96 + 12,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserSetting"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 192 + 96 + 16,
                  undefined
                );
                x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["SharedSetting"] = A.load.Ref(
                  ptr + 5480 + 52 + 32 + 192 + 96 + 20,
                  undefined
                );
                if (A.load.Bool(ptr + 5480 + 52 + 32 + 192 + 96 + 26)) {
                  x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"] = A.load.Bool(
                    ptr + 5480 + 52 + 32 + 192 + 96 + 24
                  );
                } else {
                  delete x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["UserEditable"];
                }
                if (A.load.Bool(ptr + 5480 + 52 + 32 + 192 + 96 + 27)) {
                  x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"] =
                    A.load.Bool(ptr + 5480 + 52 + 32 + 192 + 96 + 25);
                } else {
                  delete x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]["DeviceEditable"];
                }
              } else {
                delete x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"];
              }
            } else {
              delete x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"];
            }
          } else {
            delete x["WiFi"]["EAP"]["ClientCertPattern"];
          }
          if (A.load.Bool(ptr + 5480 + 52 + 352 + 28)) {
            x["WiFi"]["EAP"]["ClientCertPKCS11Id"] = {};
            x["WiFi"]["EAP"]["ClientCertPKCS11Id"]["Active"] = A.load.Ref(ptr + 5480 + 52 + 352 + 0, undefined);
            x["WiFi"]["EAP"]["ClientCertPKCS11Id"]["Effective"] = A.load.Ref(ptr + 5480 + 52 + 352 + 4, undefined);
            x["WiFi"]["EAP"]["ClientCertPKCS11Id"]["UserPolicy"] = A.load.Ref(ptr + 5480 + 52 + 352 + 8, undefined);
            x["WiFi"]["EAP"]["ClientCertPKCS11Id"]["DevicePolicy"] = A.load.Ref(ptr + 5480 + 52 + 352 + 12, undefined);
            x["WiFi"]["EAP"]["ClientCertPKCS11Id"]["UserSetting"] = A.load.Ref(ptr + 5480 + 52 + 352 + 16, undefined);
            x["WiFi"]["EAP"]["ClientCertPKCS11Id"]["SharedSetting"] = A.load.Ref(ptr + 5480 + 52 + 352 + 20, undefined);
            if (A.load.Bool(ptr + 5480 + 52 + 352 + 26)) {
              x["WiFi"]["EAP"]["ClientCertPKCS11Id"]["UserEditable"] = A.load.Bool(ptr + 5480 + 52 + 352 + 24);
            } else {
              delete x["WiFi"]["EAP"]["ClientCertPKCS11Id"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 5480 + 52 + 352 + 27)) {
              x["WiFi"]["EAP"]["ClientCertPKCS11Id"]["DeviceEditable"] = A.load.Bool(ptr + 5480 + 52 + 352 + 25);
            } else {
              delete x["WiFi"]["EAP"]["ClientCertPKCS11Id"]["DeviceEditable"];
            }
          } else {
            delete x["WiFi"]["EAP"]["ClientCertPKCS11Id"];
          }
          if (A.load.Bool(ptr + 5480 + 52 + 384 + 28)) {
            x["WiFi"]["EAP"]["ClientCertProvisioningProfileId"] = {};
            x["WiFi"]["EAP"]["ClientCertProvisioningProfileId"]["Active"] = A.load.Ref(
              ptr + 5480 + 52 + 384 + 0,
              undefined
            );
            x["WiFi"]["EAP"]["ClientCertProvisioningProfileId"]["Effective"] = A.load.Ref(
              ptr + 5480 + 52 + 384 + 4,
              undefined
            );
            x["WiFi"]["EAP"]["ClientCertProvisioningProfileId"]["UserPolicy"] = A.load.Ref(
              ptr + 5480 + 52 + 384 + 8,
              undefined
            );
            x["WiFi"]["EAP"]["ClientCertProvisioningProfileId"]["DevicePolicy"] = A.load.Ref(
              ptr + 5480 + 52 + 384 + 12,
              undefined
            );
            x["WiFi"]["EAP"]["ClientCertProvisioningProfileId"]["UserSetting"] = A.load.Ref(
              ptr + 5480 + 52 + 384 + 16,
              undefined
            );
            x["WiFi"]["EAP"]["ClientCertProvisioningProfileId"]["SharedSetting"] = A.load.Ref(
              ptr + 5480 + 52 + 384 + 20,
              undefined
            );
            if (A.load.Bool(ptr + 5480 + 52 + 384 + 26)) {
              x["WiFi"]["EAP"]["ClientCertProvisioningProfileId"]["UserEditable"] = A.load.Bool(
                ptr + 5480 + 52 + 384 + 24
              );
            } else {
              delete x["WiFi"]["EAP"]["ClientCertProvisioningProfileId"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 5480 + 52 + 384 + 27)) {
              x["WiFi"]["EAP"]["ClientCertProvisioningProfileId"]["DeviceEditable"] = A.load.Bool(
                ptr + 5480 + 52 + 384 + 25
              );
            } else {
              delete x["WiFi"]["EAP"]["ClientCertProvisioningProfileId"]["DeviceEditable"];
            }
          } else {
            delete x["WiFi"]["EAP"]["ClientCertProvisioningProfileId"];
          }
          if (A.load.Bool(ptr + 5480 + 52 + 416 + 28)) {
            x["WiFi"]["EAP"]["ClientCertRef"] = {};
            x["WiFi"]["EAP"]["ClientCertRef"]["Active"] = A.load.Ref(ptr + 5480 + 52 + 416 + 0, undefined);
            x["WiFi"]["EAP"]["ClientCertRef"]["Effective"] = A.load.Ref(ptr + 5480 + 52 + 416 + 4, undefined);
            x["WiFi"]["EAP"]["ClientCertRef"]["UserPolicy"] = A.load.Ref(ptr + 5480 + 52 + 416 + 8, undefined);
            x["WiFi"]["EAP"]["ClientCertRef"]["DevicePolicy"] = A.load.Ref(ptr + 5480 + 52 + 416 + 12, undefined);
            x["WiFi"]["EAP"]["ClientCertRef"]["UserSetting"] = A.load.Ref(ptr + 5480 + 52 + 416 + 16, undefined);
            x["WiFi"]["EAP"]["ClientCertRef"]["SharedSetting"] = A.load.Ref(ptr + 5480 + 52 + 416 + 20, undefined);
            if (A.load.Bool(ptr + 5480 + 52 + 416 + 26)) {
              x["WiFi"]["EAP"]["ClientCertRef"]["UserEditable"] = A.load.Bool(ptr + 5480 + 52 + 416 + 24);
            } else {
              delete x["WiFi"]["EAP"]["ClientCertRef"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 5480 + 52 + 416 + 27)) {
              x["WiFi"]["EAP"]["ClientCertRef"]["DeviceEditable"] = A.load.Bool(ptr + 5480 + 52 + 416 + 25);
            } else {
              delete x["WiFi"]["EAP"]["ClientCertRef"]["DeviceEditable"];
            }
          } else {
            delete x["WiFi"]["EAP"]["ClientCertRef"];
          }
          if (A.load.Bool(ptr + 5480 + 52 + 448 + 28)) {
            x["WiFi"]["EAP"]["ClientCertType"] = {};
            x["WiFi"]["EAP"]["ClientCertType"]["Active"] = A.load.Ref(ptr + 5480 + 52 + 448 + 0, undefined);
            x["WiFi"]["EAP"]["ClientCertType"]["Effective"] = A.load.Ref(ptr + 5480 + 52 + 448 + 4, undefined);
            x["WiFi"]["EAP"]["ClientCertType"]["UserPolicy"] = A.load.Ref(ptr + 5480 + 52 + 448 + 8, undefined);
            x["WiFi"]["EAP"]["ClientCertType"]["DevicePolicy"] = A.load.Ref(ptr + 5480 + 52 + 448 + 12, undefined);
            x["WiFi"]["EAP"]["ClientCertType"]["UserSetting"] = A.load.Ref(ptr + 5480 + 52 + 448 + 16, undefined);
            x["WiFi"]["EAP"]["ClientCertType"]["SharedSetting"] = A.load.Ref(ptr + 5480 + 52 + 448 + 20, undefined);
            if (A.load.Bool(ptr + 5480 + 52 + 448 + 26)) {
              x["WiFi"]["EAP"]["ClientCertType"]["UserEditable"] = A.load.Bool(ptr + 5480 + 52 + 448 + 24);
            } else {
              delete x["WiFi"]["EAP"]["ClientCertType"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 5480 + 52 + 448 + 27)) {
              x["WiFi"]["EAP"]["ClientCertType"]["DeviceEditable"] = A.load.Bool(ptr + 5480 + 52 + 448 + 25);
            } else {
              delete x["WiFi"]["EAP"]["ClientCertType"]["DeviceEditable"];
            }
          } else {
            delete x["WiFi"]["EAP"]["ClientCertType"];
          }
          if (A.load.Bool(ptr + 5480 + 52 + 480 + 28)) {
            x["WiFi"]["EAP"]["Identity"] = {};
            x["WiFi"]["EAP"]["Identity"]["Active"] = A.load.Ref(ptr + 5480 + 52 + 480 + 0, undefined);
            x["WiFi"]["EAP"]["Identity"]["Effective"] = A.load.Ref(ptr + 5480 + 52 + 480 + 4, undefined);
            x["WiFi"]["EAP"]["Identity"]["UserPolicy"] = A.load.Ref(ptr + 5480 + 52 + 480 + 8, undefined);
            x["WiFi"]["EAP"]["Identity"]["DevicePolicy"] = A.load.Ref(ptr + 5480 + 52 + 480 + 12, undefined);
            x["WiFi"]["EAP"]["Identity"]["UserSetting"] = A.load.Ref(ptr + 5480 + 52 + 480 + 16, undefined);
            x["WiFi"]["EAP"]["Identity"]["SharedSetting"] = A.load.Ref(ptr + 5480 + 52 + 480 + 20, undefined);
            if (A.load.Bool(ptr + 5480 + 52 + 480 + 26)) {
              x["WiFi"]["EAP"]["Identity"]["UserEditable"] = A.load.Bool(ptr + 5480 + 52 + 480 + 24);
            } else {
              delete x["WiFi"]["EAP"]["Identity"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 5480 + 52 + 480 + 27)) {
              x["WiFi"]["EAP"]["Identity"]["DeviceEditable"] = A.load.Bool(ptr + 5480 + 52 + 480 + 25);
            } else {
              delete x["WiFi"]["EAP"]["Identity"]["DeviceEditable"];
            }
          } else {
            delete x["WiFi"]["EAP"]["Identity"];
          }
          if (A.load.Bool(ptr + 5480 + 52 + 512 + 28)) {
            x["WiFi"]["EAP"]["Inner"] = {};
            x["WiFi"]["EAP"]["Inner"]["Active"] = A.load.Ref(ptr + 5480 + 52 + 512 + 0, undefined);
            x["WiFi"]["EAP"]["Inner"]["Effective"] = A.load.Ref(ptr + 5480 + 52 + 512 + 4, undefined);
            x["WiFi"]["EAP"]["Inner"]["UserPolicy"] = A.load.Ref(ptr + 5480 + 52 + 512 + 8, undefined);
            x["WiFi"]["EAP"]["Inner"]["DevicePolicy"] = A.load.Ref(ptr + 5480 + 52 + 512 + 12, undefined);
            x["WiFi"]["EAP"]["Inner"]["UserSetting"] = A.load.Ref(ptr + 5480 + 52 + 512 + 16, undefined);
            x["WiFi"]["EAP"]["Inner"]["SharedSetting"] = A.load.Ref(ptr + 5480 + 52 + 512 + 20, undefined);
            if (A.load.Bool(ptr + 5480 + 52 + 512 + 26)) {
              x["WiFi"]["EAP"]["Inner"]["UserEditable"] = A.load.Bool(ptr + 5480 + 52 + 512 + 24);
            } else {
              delete x["WiFi"]["EAP"]["Inner"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 5480 + 52 + 512 + 27)) {
              x["WiFi"]["EAP"]["Inner"]["DeviceEditable"] = A.load.Bool(ptr + 5480 + 52 + 512 + 25);
            } else {
              delete x["WiFi"]["EAP"]["Inner"]["DeviceEditable"];
            }
          } else {
            delete x["WiFi"]["EAP"]["Inner"];
          }
          if (A.load.Bool(ptr + 5480 + 52 + 544 + 28)) {
            x["WiFi"]["EAP"]["Outer"] = {};
            x["WiFi"]["EAP"]["Outer"]["Active"] = A.load.Ref(ptr + 5480 + 52 + 544 + 0, undefined);
            x["WiFi"]["EAP"]["Outer"]["Effective"] = A.load.Ref(ptr + 5480 + 52 + 544 + 4, undefined);
            x["WiFi"]["EAP"]["Outer"]["UserPolicy"] = A.load.Ref(ptr + 5480 + 52 + 544 + 8, undefined);
            x["WiFi"]["EAP"]["Outer"]["DevicePolicy"] = A.load.Ref(ptr + 5480 + 52 + 544 + 12, undefined);
            x["WiFi"]["EAP"]["Outer"]["UserSetting"] = A.load.Ref(ptr + 5480 + 52 + 544 + 16, undefined);
            x["WiFi"]["EAP"]["Outer"]["SharedSetting"] = A.load.Ref(ptr + 5480 + 52 + 544 + 20, undefined);
            if (A.load.Bool(ptr + 5480 + 52 + 544 + 26)) {
              x["WiFi"]["EAP"]["Outer"]["UserEditable"] = A.load.Bool(ptr + 5480 + 52 + 544 + 24);
            } else {
              delete x["WiFi"]["EAP"]["Outer"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 5480 + 52 + 544 + 27)) {
              x["WiFi"]["EAP"]["Outer"]["DeviceEditable"] = A.load.Bool(ptr + 5480 + 52 + 544 + 25);
            } else {
              delete x["WiFi"]["EAP"]["Outer"]["DeviceEditable"];
            }
          } else {
            delete x["WiFi"]["EAP"]["Outer"];
          }
          if (A.load.Bool(ptr + 5480 + 52 + 576 + 28)) {
            x["WiFi"]["EAP"]["Password"] = {};
            x["WiFi"]["EAP"]["Password"]["Active"] = A.load.Ref(ptr + 5480 + 52 + 576 + 0, undefined);
            x["WiFi"]["EAP"]["Password"]["Effective"] = A.load.Ref(ptr + 5480 + 52 + 576 + 4, undefined);
            x["WiFi"]["EAP"]["Password"]["UserPolicy"] = A.load.Ref(ptr + 5480 + 52 + 576 + 8, undefined);
            x["WiFi"]["EAP"]["Password"]["DevicePolicy"] = A.load.Ref(ptr + 5480 + 52 + 576 + 12, undefined);
            x["WiFi"]["EAP"]["Password"]["UserSetting"] = A.load.Ref(ptr + 5480 + 52 + 576 + 16, undefined);
            x["WiFi"]["EAP"]["Password"]["SharedSetting"] = A.load.Ref(ptr + 5480 + 52 + 576 + 20, undefined);
            if (A.load.Bool(ptr + 5480 + 52 + 576 + 26)) {
              x["WiFi"]["EAP"]["Password"]["UserEditable"] = A.load.Bool(ptr + 5480 + 52 + 576 + 24);
            } else {
              delete x["WiFi"]["EAP"]["Password"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 5480 + 52 + 576 + 27)) {
              x["WiFi"]["EAP"]["Password"]["DeviceEditable"] = A.load.Bool(ptr + 5480 + 52 + 576 + 25);
            } else {
              delete x["WiFi"]["EAP"]["Password"]["DeviceEditable"];
            }
          } else {
            delete x["WiFi"]["EAP"]["Password"];
          }
          if (A.load.Bool(ptr + 5480 + 52 + 608 + 21)) {
            x["WiFi"]["EAP"]["SaveCredentials"] = {};
            if (A.load.Bool(ptr + 5480 + 52 + 608 + 14)) {
              x["WiFi"]["EAP"]["SaveCredentials"]["Active"] = A.load.Bool(ptr + 5480 + 52 + 608 + 0);
            } else {
              delete x["WiFi"]["EAP"]["SaveCredentials"]["Active"];
            }
            x["WiFi"]["EAP"]["SaveCredentials"]["Effective"] = A.load.Ref(ptr + 5480 + 52 + 608 + 4, undefined);
            if (A.load.Bool(ptr + 5480 + 52 + 608 + 15)) {
              x["WiFi"]["EAP"]["SaveCredentials"]["UserPolicy"] = A.load.Bool(ptr + 5480 + 52 + 608 + 8);
            } else {
              delete x["WiFi"]["EAP"]["SaveCredentials"]["UserPolicy"];
            }
            if (A.load.Bool(ptr + 5480 + 52 + 608 + 16)) {
              x["WiFi"]["EAP"]["SaveCredentials"]["DevicePolicy"] = A.load.Bool(ptr + 5480 + 52 + 608 + 9);
            } else {
              delete x["WiFi"]["EAP"]["SaveCredentials"]["DevicePolicy"];
            }
            if (A.load.Bool(ptr + 5480 + 52 + 608 + 17)) {
              x["WiFi"]["EAP"]["SaveCredentials"]["UserSetting"] = A.load.Bool(ptr + 5480 + 52 + 608 + 10);
            } else {
              delete x["WiFi"]["EAP"]["SaveCredentials"]["UserSetting"];
            }
            if (A.load.Bool(ptr + 5480 + 52 + 608 + 18)) {
              x["WiFi"]["EAP"]["SaveCredentials"]["SharedSetting"] = A.load.Bool(ptr + 5480 + 52 + 608 + 11);
            } else {
              delete x["WiFi"]["EAP"]["SaveCredentials"]["SharedSetting"];
            }
            if (A.load.Bool(ptr + 5480 + 52 + 608 + 19)) {
              x["WiFi"]["EAP"]["SaveCredentials"]["UserEditable"] = A.load.Bool(ptr + 5480 + 52 + 608 + 12);
            } else {
              delete x["WiFi"]["EAP"]["SaveCredentials"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 5480 + 52 + 608 + 20)) {
              x["WiFi"]["EAP"]["SaveCredentials"]["DeviceEditable"] = A.load.Bool(ptr + 5480 + 52 + 608 + 13);
            } else {
              delete x["WiFi"]["EAP"]["SaveCredentials"]["DeviceEditable"];
            }
          } else {
            delete x["WiFi"]["EAP"]["SaveCredentials"];
          }
          if (A.load.Bool(ptr + 5480 + 52 + 632 + 28)) {
            x["WiFi"]["EAP"]["ServerCAPEMs"] = {};
            x["WiFi"]["EAP"]["ServerCAPEMs"]["Active"] = A.load.Ref(ptr + 5480 + 52 + 632 + 0, undefined);
            x["WiFi"]["EAP"]["ServerCAPEMs"]["Effective"] = A.load.Ref(ptr + 5480 + 52 + 632 + 4, undefined);
            x["WiFi"]["EAP"]["ServerCAPEMs"]["UserPolicy"] = A.load.Ref(ptr + 5480 + 52 + 632 + 8, undefined);
            x["WiFi"]["EAP"]["ServerCAPEMs"]["DevicePolicy"] = A.load.Ref(ptr + 5480 + 52 + 632 + 12, undefined);
            x["WiFi"]["EAP"]["ServerCAPEMs"]["UserSetting"] = A.load.Ref(ptr + 5480 + 52 + 632 + 16, undefined);
            x["WiFi"]["EAP"]["ServerCAPEMs"]["SharedSetting"] = A.load.Ref(ptr + 5480 + 52 + 632 + 20, undefined);
            if (A.load.Bool(ptr + 5480 + 52 + 632 + 26)) {
              x["WiFi"]["EAP"]["ServerCAPEMs"]["UserEditable"] = A.load.Bool(ptr + 5480 + 52 + 632 + 24);
            } else {
              delete x["WiFi"]["EAP"]["ServerCAPEMs"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 5480 + 52 + 632 + 27)) {
              x["WiFi"]["EAP"]["ServerCAPEMs"]["DeviceEditable"] = A.load.Bool(ptr + 5480 + 52 + 632 + 25);
            } else {
              delete x["WiFi"]["EAP"]["ServerCAPEMs"]["DeviceEditable"];
            }
          } else {
            delete x["WiFi"]["EAP"]["ServerCAPEMs"];
          }
          if (A.load.Bool(ptr + 5480 + 52 + 664 + 28)) {
            x["WiFi"]["EAP"]["ServerCARefs"] = {};
            x["WiFi"]["EAP"]["ServerCARefs"]["Active"] = A.load.Ref(ptr + 5480 + 52 + 664 + 0, undefined);
            x["WiFi"]["EAP"]["ServerCARefs"]["Effective"] = A.load.Ref(ptr + 5480 + 52 + 664 + 4, undefined);
            x["WiFi"]["EAP"]["ServerCARefs"]["UserPolicy"] = A.load.Ref(ptr + 5480 + 52 + 664 + 8, undefined);
            x["WiFi"]["EAP"]["ServerCARefs"]["DevicePolicy"] = A.load.Ref(ptr + 5480 + 52 + 664 + 12, undefined);
            x["WiFi"]["EAP"]["ServerCARefs"]["UserSetting"] = A.load.Ref(ptr + 5480 + 52 + 664 + 16, undefined);
            x["WiFi"]["EAP"]["ServerCARefs"]["SharedSetting"] = A.load.Ref(ptr + 5480 + 52 + 664 + 20, undefined);
            if (A.load.Bool(ptr + 5480 + 52 + 664 + 26)) {
              x["WiFi"]["EAP"]["ServerCARefs"]["UserEditable"] = A.load.Bool(ptr + 5480 + 52 + 664 + 24);
            } else {
              delete x["WiFi"]["EAP"]["ServerCARefs"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 5480 + 52 + 664 + 27)) {
              x["WiFi"]["EAP"]["ServerCARefs"]["DeviceEditable"] = A.load.Bool(ptr + 5480 + 52 + 664 + 25);
            } else {
              delete x["WiFi"]["EAP"]["ServerCARefs"]["DeviceEditable"];
            }
          } else {
            delete x["WiFi"]["EAP"]["ServerCARefs"];
          }
          if (A.load.Bool(ptr + 5480 + 52 + 696 + 28)) {
            x["WiFi"]["EAP"]["SubjectMatch"] = {};
            x["WiFi"]["EAP"]["SubjectMatch"]["Active"] = A.load.Ref(ptr + 5480 + 52 + 696 + 0, undefined);
            x["WiFi"]["EAP"]["SubjectMatch"]["Effective"] = A.load.Ref(ptr + 5480 + 52 + 696 + 4, undefined);
            x["WiFi"]["EAP"]["SubjectMatch"]["UserPolicy"] = A.load.Ref(ptr + 5480 + 52 + 696 + 8, undefined);
            x["WiFi"]["EAP"]["SubjectMatch"]["DevicePolicy"] = A.load.Ref(ptr + 5480 + 52 + 696 + 12, undefined);
            x["WiFi"]["EAP"]["SubjectMatch"]["UserSetting"] = A.load.Ref(ptr + 5480 + 52 + 696 + 16, undefined);
            x["WiFi"]["EAP"]["SubjectMatch"]["SharedSetting"] = A.load.Ref(ptr + 5480 + 52 + 696 + 20, undefined);
            if (A.load.Bool(ptr + 5480 + 52 + 696 + 26)) {
              x["WiFi"]["EAP"]["SubjectMatch"]["UserEditable"] = A.load.Bool(ptr + 5480 + 52 + 696 + 24);
            } else {
              delete x["WiFi"]["EAP"]["SubjectMatch"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 5480 + 52 + 696 + 27)) {
              x["WiFi"]["EAP"]["SubjectMatch"]["DeviceEditable"] = A.load.Bool(ptr + 5480 + 52 + 696 + 25);
            } else {
              delete x["WiFi"]["EAP"]["SubjectMatch"]["DeviceEditable"];
            }
          } else {
            delete x["WiFi"]["EAP"]["SubjectMatch"];
          }
          if (A.load.Bool(ptr + 5480 + 52 + 728 + 28)) {
            x["WiFi"]["EAP"]["TLSVersionMax"] = {};
            x["WiFi"]["EAP"]["TLSVersionMax"]["Active"] = A.load.Ref(ptr + 5480 + 52 + 728 + 0, undefined);
            x["WiFi"]["EAP"]["TLSVersionMax"]["Effective"] = A.load.Ref(ptr + 5480 + 52 + 728 + 4, undefined);
            x["WiFi"]["EAP"]["TLSVersionMax"]["UserPolicy"] = A.load.Ref(ptr + 5480 + 52 + 728 + 8, undefined);
            x["WiFi"]["EAP"]["TLSVersionMax"]["DevicePolicy"] = A.load.Ref(ptr + 5480 + 52 + 728 + 12, undefined);
            x["WiFi"]["EAP"]["TLSVersionMax"]["UserSetting"] = A.load.Ref(ptr + 5480 + 52 + 728 + 16, undefined);
            x["WiFi"]["EAP"]["TLSVersionMax"]["SharedSetting"] = A.load.Ref(ptr + 5480 + 52 + 728 + 20, undefined);
            if (A.load.Bool(ptr + 5480 + 52 + 728 + 26)) {
              x["WiFi"]["EAP"]["TLSVersionMax"]["UserEditable"] = A.load.Bool(ptr + 5480 + 52 + 728 + 24);
            } else {
              delete x["WiFi"]["EAP"]["TLSVersionMax"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 5480 + 52 + 728 + 27)) {
              x["WiFi"]["EAP"]["TLSVersionMax"]["DeviceEditable"] = A.load.Bool(ptr + 5480 + 52 + 728 + 25);
            } else {
              delete x["WiFi"]["EAP"]["TLSVersionMax"]["DeviceEditable"];
            }
          } else {
            delete x["WiFi"]["EAP"]["TLSVersionMax"];
          }
          if (A.load.Bool(ptr + 5480 + 52 + 760 + 21)) {
            x["WiFi"]["EAP"]["UseProactiveKeyCaching"] = {};
            if (A.load.Bool(ptr + 5480 + 52 + 760 + 14)) {
              x["WiFi"]["EAP"]["UseProactiveKeyCaching"]["Active"] = A.load.Bool(ptr + 5480 + 52 + 760 + 0);
            } else {
              delete x["WiFi"]["EAP"]["UseProactiveKeyCaching"]["Active"];
            }
            x["WiFi"]["EAP"]["UseProactiveKeyCaching"]["Effective"] = A.load.Ref(ptr + 5480 + 52 + 760 + 4, undefined);
            if (A.load.Bool(ptr + 5480 + 52 + 760 + 15)) {
              x["WiFi"]["EAP"]["UseProactiveKeyCaching"]["UserPolicy"] = A.load.Bool(ptr + 5480 + 52 + 760 + 8);
            } else {
              delete x["WiFi"]["EAP"]["UseProactiveKeyCaching"]["UserPolicy"];
            }
            if (A.load.Bool(ptr + 5480 + 52 + 760 + 16)) {
              x["WiFi"]["EAP"]["UseProactiveKeyCaching"]["DevicePolicy"] = A.load.Bool(ptr + 5480 + 52 + 760 + 9);
            } else {
              delete x["WiFi"]["EAP"]["UseProactiveKeyCaching"]["DevicePolicy"];
            }
            if (A.load.Bool(ptr + 5480 + 52 + 760 + 17)) {
              x["WiFi"]["EAP"]["UseProactiveKeyCaching"]["UserSetting"] = A.load.Bool(ptr + 5480 + 52 + 760 + 10);
            } else {
              delete x["WiFi"]["EAP"]["UseProactiveKeyCaching"]["UserSetting"];
            }
            if (A.load.Bool(ptr + 5480 + 52 + 760 + 18)) {
              x["WiFi"]["EAP"]["UseProactiveKeyCaching"]["SharedSetting"] = A.load.Bool(ptr + 5480 + 52 + 760 + 11);
            } else {
              delete x["WiFi"]["EAP"]["UseProactiveKeyCaching"]["SharedSetting"];
            }
            if (A.load.Bool(ptr + 5480 + 52 + 760 + 19)) {
              x["WiFi"]["EAP"]["UseProactiveKeyCaching"]["UserEditable"] = A.load.Bool(ptr + 5480 + 52 + 760 + 12);
            } else {
              delete x["WiFi"]["EAP"]["UseProactiveKeyCaching"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 5480 + 52 + 760 + 20)) {
              x["WiFi"]["EAP"]["UseProactiveKeyCaching"]["DeviceEditable"] = A.load.Bool(ptr + 5480 + 52 + 760 + 13);
            } else {
              delete x["WiFi"]["EAP"]["UseProactiveKeyCaching"]["DeviceEditable"];
            }
          } else {
            delete x["WiFi"]["EAP"]["UseProactiveKeyCaching"];
          }
          if (A.load.Bool(ptr + 5480 + 52 + 784 + 21)) {
            x["WiFi"]["EAP"]["UseSystemCAs"] = {};
            if (A.load.Bool(ptr + 5480 + 52 + 784 + 14)) {
              x["WiFi"]["EAP"]["UseSystemCAs"]["Active"] = A.load.Bool(ptr + 5480 + 52 + 784 + 0);
            } else {
              delete x["WiFi"]["EAP"]["UseSystemCAs"]["Active"];
            }
            x["WiFi"]["EAP"]["UseSystemCAs"]["Effective"] = A.load.Ref(ptr + 5480 + 52 + 784 + 4, undefined);
            if (A.load.Bool(ptr + 5480 + 52 + 784 + 15)) {
              x["WiFi"]["EAP"]["UseSystemCAs"]["UserPolicy"] = A.load.Bool(ptr + 5480 + 52 + 784 + 8);
            } else {
              delete x["WiFi"]["EAP"]["UseSystemCAs"]["UserPolicy"];
            }
            if (A.load.Bool(ptr + 5480 + 52 + 784 + 16)) {
              x["WiFi"]["EAP"]["UseSystemCAs"]["DevicePolicy"] = A.load.Bool(ptr + 5480 + 52 + 784 + 9);
            } else {
              delete x["WiFi"]["EAP"]["UseSystemCAs"]["DevicePolicy"];
            }
            if (A.load.Bool(ptr + 5480 + 52 + 784 + 17)) {
              x["WiFi"]["EAP"]["UseSystemCAs"]["UserSetting"] = A.load.Bool(ptr + 5480 + 52 + 784 + 10);
            } else {
              delete x["WiFi"]["EAP"]["UseSystemCAs"]["UserSetting"];
            }
            if (A.load.Bool(ptr + 5480 + 52 + 784 + 18)) {
              x["WiFi"]["EAP"]["UseSystemCAs"]["SharedSetting"] = A.load.Bool(ptr + 5480 + 52 + 784 + 11);
            } else {
              delete x["WiFi"]["EAP"]["UseSystemCAs"]["SharedSetting"];
            }
            if (A.load.Bool(ptr + 5480 + 52 + 784 + 19)) {
              x["WiFi"]["EAP"]["UseSystemCAs"]["UserEditable"] = A.load.Bool(ptr + 5480 + 52 + 784 + 12);
            } else {
              delete x["WiFi"]["EAP"]["UseSystemCAs"]["UserEditable"];
            }
            if (A.load.Bool(ptr + 5480 + 52 + 784 + 20)) {
              x["WiFi"]["EAP"]["UseSystemCAs"]["DeviceEditable"] = A.load.Bool(ptr + 5480 + 52 + 784 + 13);
            } else {
              delete x["WiFi"]["EAP"]["UseSystemCAs"]["DeviceEditable"];
            }
          } else {
            delete x["WiFi"]["EAP"]["UseSystemCAs"];
          }
        } else {
          delete x["WiFi"]["EAP"];
        }
        if (A.load.Bool(ptr + 5480 + 1024)) {
          x["WiFi"]["Frequency"] = A.load.Int32(ptr + 5480 + 860);
        } else {
          delete x["WiFi"]["Frequency"];
        }
        x["WiFi"]["FrequencyList"] = A.load.Ref(ptr + 5480 + 864, undefined);
        if (A.load.Bool(ptr + 5480 + 868 + 28)) {
          x["WiFi"]["HexSSID"] = {};
          x["WiFi"]["HexSSID"]["Active"] = A.load.Ref(ptr + 5480 + 868 + 0, undefined);
          x["WiFi"]["HexSSID"]["Effective"] = A.load.Ref(ptr + 5480 + 868 + 4, undefined);
          x["WiFi"]["HexSSID"]["UserPolicy"] = A.load.Ref(ptr + 5480 + 868 + 8, undefined);
          x["WiFi"]["HexSSID"]["DevicePolicy"] = A.load.Ref(ptr + 5480 + 868 + 12, undefined);
          x["WiFi"]["HexSSID"]["UserSetting"] = A.load.Ref(ptr + 5480 + 868 + 16, undefined);
          x["WiFi"]["HexSSID"]["SharedSetting"] = A.load.Ref(ptr + 5480 + 868 + 20, undefined);
          if (A.load.Bool(ptr + 5480 + 868 + 26)) {
            x["WiFi"]["HexSSID"]["UserEditable"] = A.load.Bool(ptr + 5480 + 868 + 24);
          } else {
            delete x["WiFi"]["HexSSID"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 5480 + 868 + 27)) {
            x["WiFi"]["HexSSID"]["DeviceEditable"] = A.load.Bool(ptr + 5480 + 868 + 25);
          } else {
            delete x["WiFi"]["HexSSID"]["DeviceEditable"];
          }
        } else {
          delete x["WiFi"]["HexSSID"];
        }
        if (A.load.Bool(ptr + 5480 + 900 + 21)) {
          x["WiFi"]["HiddenSSID"] = {};
          if (A.load.Bool(ptr + 5480 + 900 + 14)) {
            x["WiFi"]["HiddenSSID"]["Active"] = A.load.Bool(ptr + 5480 + 900 + 0);
          } else {
            delete x["WiFi"]["HiddenSSID"]["Active"];
          }
          x["WiFi"]["HiddenSSID"]["Effective"] = A.load.Ref(ptr + 5480 + 900 + 4, undefined);
          if (A.load.Bool(ptr + 5480 + 900 + 15)) {
            x["WiFi"]["HiddenSSID"]["UserPolicy"] = A.load.Bool(ptr + 5480 + 900 + 8);
          } else {
            delete x["WiFi"]["HiddenSSID"]["UserPolicy"];
          }
          if (A.load.Bool(ptr + 5480 + 900 + 16)) {
            x["WiFi"]["HiddenSSID"]["DevicePolicy"] = A.load.Bool(ptr + 5480 + 900 + 9);
          } else {
            delete x["WiFi"]["HiddenSSID"]["DevicePolicy"];
          }
          if (A.load.Bool(ptr + 5480 + 900 + 17)) {
            x["WiFi"]["HiddenSSID"]["UserSetting"] = A.load.Bool(ptr + 5480 + 900 + 10);
          } else {
            delete x["WiFi"]["HiddenSSID"]["UserSetting"];
          }
          if (A.load.Bool(ptr + 5480 + 900 + 18)) {
            x["WiFi"]["HiddenSSID"]["SharedSetting"] = A.load.Bool(ptr + 5480 + 900 + 11);
          } else {
            delete x["WiFi"]["HiddenSSID"]["SharedSetting"];
          }
          if (A.load.Bool(ptr + 5480 + 900 + 19)) {
            x["WiFi"]["HiddenSSID"]["UserEditable"] = A.load.Bool(ptr + 5480 + 900 + 12);
          } else {
            delete x["WiFi"]["HiddenSSID"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 5480 + 900 + 20)) {
            x["WiFi"]["HiddenSSID"]["DeviceEditable"] = A.load.Bool(ptr + 5480 + 900 + 13);
          } else {
            delete x["WiFi"]["HiddenSSID"]["DeviceEditable"];
          }
        } else {
          delete x["WiFi"]["HiddenSSID"];
        }
        if (A.load.Bool(ptr + 5480 + 924 + 28)) {
          x["WiFi"]["Passphrase"] = {};
          x["WiFi"]["Passphrase"]["Active"] = A.load.Ref(ptr + 5480 + 924 + 0, undefined);
          x["WiFi"]["Passphrase"]["Effective"] = A.load.Ref(ptr + 5480 + 924 + 4, undefined);
          x["WiFi"]["Passphrase"]["UserPolicy"] = A.load.Ref(ptr + 5480 + 924 + 8, undefined);
          x["WiFi"]["Passphrase"]["DevicePolicy"] = A.load.Ref(ptr + 5480 + 924 + 12, undefined);
          x["WiFi"]["Passphrase"]["UserSetting"] = A.load.Ref(ptr + 5480 + 924 + 16, undefined);
          x["WiFi"]["Passphrase"]["SharedSetting"] = A.load.Ref(ptr + 5480 + 924 + 20, undefined);
          if (A.load.Bool(ptr + 5480 + 924 + 26)) {
            x["WiFi"]["Passphrase"]["UserEditable"] = A.load.Bool(ptr + 5480 + 924 + 24);
          } else {
            delete x["WiFi"]["Passphrase"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 5480 + 924 + 27)) {
            x["WiFi"]["Passphrase"]["DeviceEditable"] = A.load.Bool(ptr + 5480 + 924 + 25);
          } else {
            delete x["WiFi"]["Passphrase"]["DeviceEditable"];
          }
        } else {
          delete x["WiFi"]["Passphrase"];
        }
        if (A.load.Bool(ptr + 5480 + 956 + 28)) {
          x["WiFi"]["SSID"] = {};
          x["WiFi"]["SSID"]["Active"] = A.load.Ref(ptr + 5480 + 956 + 0, undefined);
          x["WiFi"]["SSID"]["Effective"] = A.load.Ref(ptr + 5480 + 956 + 4, undefined);
          x["WiFi"]["SSID"]["UserPolicy"] = A.load.Ref(ptr + 5480 + 956 + 8, undefined);
          x["WiFi"]["SSID"]["DevicePolicy"] = A.load.Ref(ptr + 5480 + 956 + 12, undefined);
          x["WiFi"]["SSID"]["UserSetting"] = A.load.Ref(ptr + 5480 + 956 + 16, undefined);
          x["WiFi"]["SSID"]["SharedSetting"] = A.load.Ref(ptr + 5480 + 956 + 20, undefined);
          if (A.load.Bool(ptr + 5480 + 956 + 26)) {
            x["WiFi"]["SSID"]["UserEditable"] = A.load.Bool(ptr + 5480 + 956 + 24);
          } else {
            delete x["WiFi"]["SSID"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 5480 + 956 + 27)) {
            x["WiFi"]["SSID"]["DeviceEditable"] = A.load.Bool(ptr + 5480 + 956 + 25);
          } else {
            delete x["WiFi"]["SSID"]["DeviceEditable"];
          }
        } else {
          delete x["WiFi"]["SSID"];
        }
        if (A.load.Bool(ptr + 5480 + 988 + 28)) {
          x["WiFi"]["Security"] = {};
          x["WiFi"]["Security"]["Active"] = A.load.Ref(ptr + 5480 + 988 + 0, undefined);
          x["WiFi"]["Security"]["Effective"] = A.load.Ref(ptr + 5480 + 988 + 4, undefined);
          x["WiFi"]["Security"]["UserPolicy"] = A.load.Ref(ptr + 5480 + 988 + 8, undefined);
          x["WiFi"]["Security"]["DevicePolicy"] = A.load.Ref(ptr + 5480 + 988 + 12, undefined);
          x["WiFi"]["Security"]["UserSetting"] = A.load.Ref(ptr + 5480 + 988 + 16, undefined);
          x["WiFi"]["Security"]["SharedSetting"] = A.load.Ref(ptr + 5480 + 988 + 20, undefined);
          if (A.load.Bool(ptr + 5480 + 988 + 26)) {
            x["WiFi"]["Security"]["UserEditable"] = A.load.Bool(ptr + 5480 + 988 + 24);
          } else {
            delete x["WiFi"]["Security"]["UserEditable"];
          }
          if (A.load.Bool(ptr + 5480 + 988 + 27)) {
            x["WiFi"]["Security"]["DeviceEditable"] = A.load.Bool(ptr + 5480 + 988 + 25);
          } else {
            delete x["WiFi"]["Security"]["DeviceEditable"];
          }
        } else {
          delete x["WiFi"]["Security"];
        }
        if (A.load.Bool(ptr + 5480 + 1025)) {
          x["WiFi"]["SignalStrength"] = A.load.Int32(ptr + 5480 + 1020);
        } else {
          delete x["WiFi"]["SignalStrength"];
        }
      } else {
        delete x["WiFi"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_XAUTHProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 13, false);
        A.store.Ref(ptr + 0, undefined);
        A.store.Bool(ptr + 12, false);
        A.store.Bool(ptr + 4, false);
        A.store.Ref(ptr + 8, undefined);
      } else {
        A.store.Bool(ptr + 13, true);
        A.store.Ref(ptr + 0, x["Password"]);
        A.store.Bool(ptr + 12, "SaveCredentials" in x ? true : false);
        A.store.Bool(ptr + 4, x["SaveCredentials"] ? true : false);
        A.store.Ref(ptr + 8, x["Username"]);
      }
    },
    "load_XAUTHProperties": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      x["Password"] = A.load.Ref(ptr + 0, undefined);
      if (A.load.Bool(ptr + 12)) {
        x["SaveCredentials"] = A.load.Bool(ptr + 4);
      } else {
        delete x["SaveCredentials"];
      }
      x["Username"] = A.load.Ref(ptr + 8, undefined);
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_IPSecProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 236, false);
        A.store.Ref(ptr + 0, undefined);

        A.store.Bool(ptr + 4 + 49, false);
        A.store.Ref(ptr + 4 + 0, undefined);

        A.store.Bool(ptr + 4 + 4 + 16, false);
        A.store.Ref(ptr + 4 + 4 + 0, undefined);
        A.store.Ref(ptr + 4 + 4 + 4, undefined);
        A.store.Ref(ptr + 4 + 4 + 8, undefined);
        A.store.Ref(ptr + 4 + 4 + 12, undefined);
        A.store.Ref(ptr + 4 + 24, undefined);
        A.store.Ref(ptr + 4 + 28, undefined);

        A.store.Bool(ptr + 4 + 32 + 16, false);
        A.store.Ref(ptr + 4 + 32 + 0, undefined);
        A.store.Ref(ptr + 4 + 32 + 4, undefined);
        A.store.Ref(ptr + 4 + 32 + 8, undefined);
        A.store.Ref(ptr + 4 + 32 + 12, undefined);
        A.store.Ref(ptr + 56, undefined);
        A.store.Ref(ptr + 60, undefined);
        A.store.Ref(ptr + 64, undefined);
        A.store.Ref(ptr + 68, undefined);

        A.store.Bool(ptr + 72 + 113, false);
        A.store.Ref(ptr + 72 + 0, undefined);

        A.store.Bool(ptr + 72 + 4 + 49, false);
        A.store.Ref(ptr + 72 + 4 + 0, undefined);

        A.store.Bool(ptr + 72 + 4 + 4 + 16, false);
        A.store.Ref(ptr + 72 + 4 + 4 + 0, undefined);
        A.store.Ref(ptr + 72 + 4 + 4 + 4, undefined);
        A.store.Ref(ptr + 72 + 4 + 4 + 8, undefined);
        A.store.Ref(ptr + 72 + 4 + 4 + 12, undefined);
        A.store.Ref(ptr + 72 + 4 + 24, undefined);
        A.store.Ref(ptr + 72 + 4 + 28, undefined);

        A.store.Bool(ptr + 72 + 4 + 32 + 16, false);
        A.store.Ref(ptr + 72 + 4 + 32 + 0, undefined);
        A.store.Ref(ptr + 72 + 4 + 32 + 4, undefined);
        A.store.Ref(ptr + 72 + 4 + 32 + 8, undefined);
        A.store.Ref(ptr + 72 + 4 + 32 + 12, undefined);
        A.store.Ref(ptr + 72 + 56, undefined);
        A.store.Ref(ptr + 72 + 60, undefined);
        A.store.Ref(ptr + 72 + 64, undefined);
        A.store.Ref(ptr + 72 + 68, undefined);
        A.store.Ref(ptr + 72 + 72, undefined);
        A.store.Ref(ptr + 72 + 76, undefined);
        A.store.Ref(ptr + 72 + 80, undefined);
        A.store.Ref(ptr + 72 + 84, undefined);
        A.store.Bool(ptr + 72 + 110, false);
        A.store.Bool(ptr + 72 + 88, false);
        A.store.Ref(ptr + 72 + 92, undefined);
        A.store.Ref(ptr + 72 + 96, undefined);
        A.store.Ref(ptr + 72 + 100, undefined);
        A.store.Ref(ptr + 72 + 104, undefined);
        A.store.Bool(ptr + 72 + 111, false);
        A.store.Bool(ptr + 72 + 108, false);
        A.store.Bool(ptr + 72 + 112, false);
        A.store.Bool(ptr + 72 + 109, false);
        A.store.Ref(ptr + 188, undefined);
        A.store.Bool(ptr + 234, false);
        A.store.Int32(ptr + 192, 0);
        A.store.Ref(ptr + 196, undefined);
        A.store.Ref(ptr + 200, undefined);
        A.store.Ref(ptr + 204, undefined);
        A.store.Bool(ptr + 235, false);
        A.store.Bool(ptr + 208, false);
        A.store.Ref(ptr + 212, undefined);
        A.store.Ref(ptr + 216, undefined);

        A.store.Bool(ptr + 220 + 13, false);
        A.store.Ref(ptr + 220 + 0, undefined);
        A.store.Bool(ptr + 220 + 12, false);
        A.store.Bool(ptr + 220 + 4, false);
        A.store.Ref(ptr + 220 + 8, undefined);
      } else {
        A.store.Bool(ptr + 236, true);
        A.store.Ref(ptr + 0, x["AuthenticationType"]);

        if (typeof x["ClientCertPattern"] === "undefined") {
          A.store.Bool(ptr + 4 + 49, false);
          A.store.Ref(ptr + 4 + 0, undefined);

          A.store.Bool(ptr + 4 + 4 + 16, false);
          A.store.Ref(ptr + 4 + 4 + 0, undefined);
          A.store.Ref(ptr + 4 + 4 + 4, undefined);
          A.store.Ref(ptr + 4 + 4 + 8, undefined);
          A.store.Ref(ptr + 4 + 4 + 12, undefined);
          A.store.Ref(ptr + 4 + 24, undefined);
          A.store.Ref(ptr + 4 + 28, undefined);

          A.store.Bool(ptr + 4 + 32 + 16, false);
          A.store.Ref(ptr + 4 + 32 + 0, undefined);
          A.store.Ref(ptr + 4 + 32 + 4, undefined);
          A.store.Ref(ptr + 4 + 32 + 8, undefined);
          A.store.Ref(ptr + 4 + 32 + 12, undefined);
        } else {
          A.store.Bool(ptr + 4 + 49, true);
          A.store.Ref(ptr + 4 + 0, x["ClientCertPattern"]["EnrollmentURI"]);

          if (typeof x["ClientCertPattern"]["Issuer"] === "undefined") {
            A.store.Bool(ptr + 4 + 4 + 16, false);
            A.store.Ref(ptr + 4 + 4 + 0, undefined);
            A.store.Ref(ptr + 4 + 4 + 4, undefined);
            A.store.Ref(ptr + 4 + 4 + 8, undefined);
            A.store.Ref(ptr + 4 + 4 + 12, undefined);
          } else {
            A.store.Bool(ptr + 4 + 4 + 16, true);
            A.store.Ref(ptr + 4 + 4 + 0, x["ClientCertPattern"]["Issuer"]["CommonName"]);
            A.store.Ref(ptr + 4 + 4 + 4, x["ClientCertPattern"]["Issuer"]["Locality"]);
            A.store.Ref(ptr + 4 + 4 + 8, x["ClientCertPattern"]["Issuer"]["Organization"]);
            A.store.Ref(ptr + 4 + 4 + 12, x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]);
          }
          A.store.Ref(ptr + 4 + 24, x["ClientCertPattern"]["IssuerCAPEMs"]);
          A.store.Ref(ptr + 4 + 28, x["ClientCertPattern"]["IssuerCARef"]);

          if (typeof x["ClientCertPattern"]["Subject"] === "undefined") {
            A.store.Bool(ptr + 4 + 32 + 16, false);
            A.store.Ref(ptr + 4 + 32 + 0, undefined);
            A.store.Ref(ptr + 4 + 32 + 4, undefined);
            A.store.Ref(ptr + 4 + 32 + 8, undefined);
            A.store.Ref(ptr + 4 + 32 + 12, undefined);
          } else {
            A.store.Bool(ptr + 4 + 32 + 16, true);
            A.store.Ref(ptr + 4 + 32 + 0, x["ClientCertPattern"]["Subject"]["CommonName"]);
            A.store.Ref(ptr + 4 + 32 + 4, x["ClientCertPattern"]["Subject"]["Locality"]);
            A.store.Ref(ptr + 4 + 32 + 8, x["ClientCertPattern"]["Subject"]["Organization"]);
            A.store.Ref(ptr + 4 + 32 + 12, x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]);
          }
        }
        A.store.Ref(ptr + 56, x["ClientCertPKCS11Id"]);
        A.store.Ref(ptr + 60, x["ClientCertProvisioningProfileId"]);
        A.store.Ref(ptr + 64, x["ClientCertRef"]);
        A.store.Ref(ptr + 68, x["ClientCertType"]);

        if (typeof x["EAP"] === "undefined") {
          A.store.Bool(ptr + 72 + 113, false);
          A.store.Ref(ptr + 72 + 0, undefined);

          A.store.Bool(ptr + 72 + 4 + 49, false);
          A.store.Ref(ptr + 72 + 4 + 0, undefined);

          A.store.Bool(ptr + 72 + 4 + 4 + 16, false);
          A.store.Ref(ptr + 72 + 4 + 4 + 0, undefined);
          A.store.Ref(ptr + 72 + 4 + 4 + 4, undefined);
          A.store.Ref(ptr + 72 + 4 + 4 + 8, undefined);
          A.store.Ref(ptr + 72 + 4 + 4 + 12, undefined);
          A.store.Ref(ptr + 72 + 4 + 24, undefined);
          A.store.Ref(ptr + 72 + 4 + 28, undefined);

          A.store.Bool(ptr + 72 + 4 + 32 + 16, false);
          A.store.Ref(ptr + 72 + 4 + 32 + 0, undefined);
          A.store.Ref(ptr + 72 + 4 + 32 + 4, undefined);
          A.store.Ref(ptr + 72 + 4 + 32 + 8, undefined);
          A.store.Ref(ptr + 72 + 4 + 32 + 12, undefined);
          A.store.Ref(ptr + 72 + 56, undefined);
          A.store.Ref(ptr + 72 + 60, undefined);
          A.store.Ref(ptr + 72 + 64, undefined);
          A.store.Ref(ptr + 72 + 68, undefined);
          A.store.Ref(ptr + 72 + 72, undefined);
          A.store.Ref(ptr + 72 + 76, undefined);
          A.store.Ref(ptr + 72 + 80, undefined);
          A.store.Ref(ptr + 72 + 84, undefined);
          A.store.Bool(ptr + 72 + 110, false);
          A.store.Bool(ptr + 72 + 88, false);
          A.store.Ref(ptr + 72 + 92, undefined);
          A.store.Ref(ptr + 72 + 96, undefined);
          A.store.Ref(ptr + 72 + 100, undefined);
          A.store.Ref(ptr + 72 + 104, undefined);
          A.store.Bool(ptr + 72 + 111, false);
          A.store.Bool(ptr + 72 + 108, false);
          A.store.Bool(ptr + 72 + 112, false);
          A.store.Bool(ptr + 72 + 109, false);
        } else {
          A.store.Bool(ptr + 72 + 113, true);
          A.store.Ref(ptr + 72 + 0, x["EAP"]["AnonymousIdentity"]);

          if (typeof x["EAP"]["ClientCertPattern"] === "undefined") {
            A.store.Bool(ptr + 72 + 4 + 49, false);
            A.store.Ref(ptr + 72 + 4 + 0, undefined);

            A.store.Bool(ptr + 72 + 4 + 4 + 16, false);
            A.store.Ref(ptr + 72 + 4 + 4 + 0, undefined);
            A.store.Ref(ptr + 72 + 4 + 4 + 4, undefined);
            A.store.Ref(ptr + 72 + 4 + 4 + 8, undefined);
            A.store.Ref(ptr + 72 + 4 + 4 + 12, undefined);
            A.store.Ref(ptr + 72 + 4 + 24, undefined);
            A.store.Ref(ptr + 72 + 4 + 28, undefined);

            A.store.Bool(ptr + 72 + 4 + 32 + 16, false);
            A.store.Ref(ptr + 72 + 4 + 32 + 0, undefined);
            A.store.Ref(ptr + 72 + 4 + 32 + 4, undefined);
            A.store.Ref(ptr + 72 + 4 + 32 + 8, undefined);
            A.store.Ref(ptr + 72 + 4 + 32 + 12, undefined);
          } else {
            A.store.Bool(ptr + 72 + 4 + 49, true);
            A.store.Ref(ptr + 72 + 4 + 0, x["EAP"]["ClientCertPattern"]["EnrollmentURI"]);

            if (typeof x["EAP"]["ClientCertPattern"]["Issuer"] === "undefined") {
              A.store.Bool(ptr + 72 + 4 + 4 + 16, false);
              A.store.Ref(ptr + 72 + 4 + 4 + 0, undefined);
              A.store.Ref(ptr + 72 + 4 + 4 + 4, undefined);
              A.store.Ref(ptr + 72 + 4 + 4 + 8, undefined);
              A.store.Ref(ptr + 72 + 4 + 4 + 12, undefined);
            } else {
              A.store.Bool(ptr + 72 + 4 + 4 + 16, true);
              A.store.Ref(ptr + 72 + 4 + 4 + 0, x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]);
              A.store.Ref(ptr + 72 + 4 + 4 + 4, x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]);
              A.store.Ref(ptr + 72 + 4 + 4 + 8, x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]);
              A.store.Ref(ptr + 72 + 4 + 4 + 12, x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]);
            }
            A.store.Ref(ptr + 72 + 4 + 24, x["EAP"]["ClientCertPattern"]["IssuerCAPEMs"]);
            A.store.Ref(ptr + 72 + 4 + 28, x["EAP"]["ClientCertPattern"]["IssuerCARef"]);

            if (typeof x["EAP"]["ClientCertPattern"]["Subject"] === "undefined") {
              A.store.Bool(ptr + 72 + 4 + 32 + 16, false);
              A.store.Ref(ptr + 72 + 4 + 32 + 0, undefined);
              A.store.Ref(ptr + 72 + 4 + 32 + 4, undefined);
              A.store.Ref(ptr + 72 + 4 + 32 + 8, undefined);
              A.store.Ref(ptr + 72 + 4 + 32 + 12, undefined);
            } else {
              A.store.Bool(ptr + 72 + 4 + 32 + 16, true);
              A.store.Ref(ptr + 72 + 4 + 32 + 0, x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]);
              A.store.Ref(ptr + 72 + 4 + 32 + 4, x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]);
              A.store.Ref(ptr + 72 + 4 + 32 + 8, x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]);
              A.store.Ref(ptr + 72 + 4 + 32 + 12, x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]);
            }
          }
          A.store.Ref(ptr + 72 + 56, x["EAP"]["ClientCertPKCS11Id"]);
          A.store.Ref(ptr + 72 + 60, x["EAP"]["ClientCertProvisioningProfileId"]);
          A.store.Ref(ptr + 72 + 64, x["EAP"]["ClientCertRef"]);
          A.store.Ref(ptr + 72 + 68, x["EAP"]["ClientCertType"]);
          A.store.Ref(ptr + 72 + 72, x["EAP"]["Identity"]);
          A.store.Ref(ptr + 72 + 76, x["EAP"]["Inner"]);
          A.store.Ref(ptr + 72 + 80, x["EAP"]["Outer"]);
          A.store.Ref(ptr + 72 + 84, x["EAP"]["Password"]);
          A.store.Bool(ptr + 72 + 110, "SaveCredentials" in x["EAP"] ? true : false);
          A.store.Bool(ptr + 72 + 88, x["EAP"]["SaveCredentials"] ? true : false);
          A.store.Ref(ptr + 72 + 92, x["EAP"]["ServerCAPEMs"]);
          A.store.Ref(ptr + 72 + 96, x["EAP"]["ServerCARefs"]);
          A.store.Ref(ptr + 72 + 100, x["EAP"]["SubjectMatch"]);
          A.store.Ref(ptr + 72 + 104, x["EAP"]["TLSVersionMax"]);
          A.store.Bool(ptr + 72 + 111, "UseProactiveKeyCaching" in x["EAP"] ? true : false);
          A.store.Bool(ptr + 72 + 108, x["EAP"]["UseProactiveKeyCaching"] ? true : false);
          A.store.Bool(ptr + 72 + 112, "UseSystemCAs" in x["EAP"] ? true : false);
          A.store.Bool(ptr + 72 + 109, x["EAP"]["UseSystemCAs"] ? true : false);
        }
        A.store.Ref(ptr + 188, x["Group"]);
        A.store.Bool(ptr + 234, "IKEVersion" in x ? true : false);
        A.store.Int32(ptr + 192, x["IKEVersion"] === undefined ? 0 : (x["IKEVersion"] as number));
        A.store.Ref(ptr + 196, x["LocalIdentity"]);
        A.store.Ref(ptr + 200, x["PSK"]);
        A.store.Ref(ptr + 204, x["RemoteIdentity"]);
        A.store.Bool(ptr + 235, "SaveCredentials" in x ? true : false);
        A.store.Bool(ptr + 208, x["SaveCredentials"] ? true : false);
        A.store.Ref(ptr + 212, x["ServerCAPEMs"]);
        A.store.Ref(ptr + 216, x["ServerCARefs"]);

        if (typeof x["XAUTH"] === "undefined") {
          A.store.Bool(ptr + 220 + 13, false);
          A.store.Ref(ptr + 220 + 0, undefined);
          A.store.Bool(ptr + 220 + 12, false);
          A.store.Bool(ptr + 220 + 4, false);
          A.store.Ref(ptr + 220 + 8, undefined);
        } else {
          A.store.Bool(ptr + 220 + 13, true);
          A.store.Ref(ptr + 220 + 0, x["XAUTH"]["Password"]);
          A.store.Bool(ptr + 220 + 12, "SaveCredentials" in x["XAUTH"] ? true : false);
          A.store.Bool(ptr + 220 + 4, x["XAUTH"]["SaveCredentials"] ? true : false);
          A.store.Ref(ptr + 220 + 8, x["XAUTH"]["Username"]);
        }
      }
    },
    "load_IPSecProperties": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      x["AuthenticationType"] = A.load.Ref(ptr + 0, undefined);
      if (A.load.Bool(ptr + 4 + 49)) {
        x["ClientCertPattern"] = {};
        x["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(ptr + 4 + 0, undefined);
        if (A.load.Bool(ptr + 4 + 4 + 16)) {
          x["ClientCertPattern"]["Issuer"] = {};
          x["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(ptr + 4 + 4 + 0, undefined);
          x["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(ptr + 4 + 4 + 4, undefined);
          x["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(ptr + 4 + 4 + 8, undefined);
          x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(ptr + 4 + 4 + 12, undefined);
        } else {
          delete x["ClientCertPattern"]["Issuer"];
        }
        x["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(ptr + 4 + 24, undefined);
        x["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(ptr + 4 + 28, undefined);
        if (A.load.Bool(ptr + 4 + 32 + 16)) {
          x["ClientCertPattern"]["Subject"] = {};
          x["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(ptr + 4 + 32 + 0, undefined);
          x["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(ptr + 4 + 32 + 4, undefined);
          x["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(ptr + 4 + 32 + 8, undefined);
          x["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(ptr + 4 + 32 + 12, undefined);
        } else {
          delete x["ClientCertPattern"]["Subject"];
        }
      } else {
        delete x["ClientCertPattern"];
      }
      x["ClientCertPKCS11Id"] = A.load.Ref(ptr + 56, undefined);
      x["ClientCertProvisioningProfileId"] = A.load.Ref(ptr + 60, undefined);
      x["ClientCertRef"] = A.load.Ref(ptr + 64, undefined);
      x["ClientCertType"] = A.load.Ref(ptr + 68, undefined);
      if (A.load.Bool(ptr + 72 + 113)) {
        x["EAP"] = {};
        x["EAP"]["AnonymousIdentity"] = A.load.Ref(ptr + 72 + 0, undefined);
        if (A.load.Bool(ptr + 72 + 4 + 49)) {
          x["EAP"]["ClientCertPattern"] = {};
          x["EAP"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(ptr + 72 + 4 + 0, undefined);
          if (A.load.Bool(ptr + 72 + 4 + 4 + 16)) {
            x["EAP"]["ClientCertPattern"]["Issuer"] = {};
            x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(ptr + 72 + 4 + 4 + 0, undefined);
            x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(ptr + 72 + 4 + 4 + 4, undefined);
            x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(ptr + 72 + 4 + 4 + 8, undefined);
            x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(
              ptr + 72 + 4 + 4 + 12,
              undefined
            );
          } else {
            delete x["EAP"]["ClientCertPattern"]["Issuer"];
          }
          x["EAP"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(ptr + 72 + 4 + 24, undefined);
          x["EAP"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(ptr + 72 + 4 + 28, undefined);
          if (A.load.Bool(ptr + 72 + 4 + 32 + 16)) {
            x["EAP"]["ClientCertPattern"]["Subject"] = {};
            x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(ptr + 72 + 4 + 32 + 0, undefined);
            x["EAP"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(ptr + 72 + 4 + 32 + 4, undefined);
            x["EAP"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(ptr + 72 + 4 + 32 + 8, undefined);
            x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(
              ptr + 72 + 4 + 32 + 12,
              undefined
            );
          } else {
            delete x["EAP"]["ClientCertPattern"]["Subject"];
          }
        } else {
          delete x["EAP"]["ClientCertPattern"];
        }
        x["EAP"]["ClientCertPKCS11Id"] = A.load.Ref(ptr + 72 + 56, undefined);
        x["EAP"]["ClientCertProvisioningProfileId"] = A.load.Ref(ptr + 72 + 60, undefined);
        x["EAP"]["ClientCertRef"] = A.load.Ref(ptr + 72 + 64, undefined);
        x["EAP"]["ClientCertType"] = A.load.Ref(ptr + 72 + 68, undefined);
        x["EAP"]["Identity"] = A.load.Ref(ptr + 72 + 72, undefined);
        x["EAP"]["Inner"] = A.load.Ref(ptr + 72 + 76, undefined);
        x["EAP"]["Outer"] = A.load.Ref(ptr + 72 + 80, undefined);
        x["EAP"]["Password"] = A.load.Ref(ptr + 72 + 84, undefined);
        if (A.load.Bool(ptr + 72 + 110)) {
          x["EAP"]["SaveCredentials"] = A.load.Bool(ptr + 72 + 88);
        } else {
          delete x["EAP"]["SaveCredentials"];
        }
        x["EAP"]["ServerCAPEMs"] = A.load.Ref(ptr + 72 + 92, undefined);
        x["EAP"]["ServerCARefs"] = A.load.Ref(ptr + 72 + 96, undefined);
        x["EAP"]["SubjectMatch"] = A.load.Ref(ptr + 72 + 100, undefined);
        x["EAP"]["TLSVersionMax"] = A.load.Ref(ptr + 72 + 104, undefined);
        if (A.load.Bool(ptr + 72 + 111)) {
          x["EAP"]["UseProactiveKeyCaching"] = A.load.Bool(ptr + 72 + 108);
        } else {
          delete x["EAP"]["UseProactiveKeyCaching"];
        }
        if (A.load.Bool(ptr + 72 + 112)) {
          x["EAP"]["UseSystemCAs"] = A.load.Bool(ptr + 72 + 109);
        } else {
          delete x["EAP"]["UseSystemCAs"];
        }
      } else {
        delete x["EAP"];
      }
      x["Group"] = A.load.Ref(ptr + 188, undefined);
      if (A.load.Bool(ptr + 234)) {
        x["IKEVersion"] = A.load.Int32(ptr + 192);
      } else {
        delete x["IKEVersion"];
      }
      x["LocalIdentity"] = A.load.Ref(ptr + 196, undefined);
      x["PSK"] = A.load.Ref(ptr + 200, undefined);
      x["RemoteIdentity"] = A.load.Ref(ptr + 204, undefined);
      if (A.load.Bool(ptr + 235)) {
        x["SaveCredentials"] = A.load.Bool(ptr + 208);
      } else {
        delete x["SaveCredentials"];
      }
      x["ServerCAPEMs"] = A.load.Ref(ptr + 212, undefined);
      x["ServerCARefs"] = A.load.Ref(ptr + 216, undefined);
      if (A.load.Bool(ptr + 220 + 13)) {
        x["XAUTH"] = {};
        x["XAUTH"]["Password"] = A.load.Ref(ptr + 220 + 0, undefined);
        if (A.load.Bool(ptr + 220 + 12)) {
          x["XAUTH"]["SaveCredentials"] = A.load.Bool(ptr + 220 + 4);
        } else {
          delete x["XAUTH"]["SaveCredentials"];
        }
        x["XAUTH"]["Username"] = A.load.Ref(ptr + 220 + 8, undefined);
      } else {
        delete x["XAUTH"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_ThirdPartyVPNProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 8, false);
        A.store.Ref(ptr + 0, undefined);
        A.store.Ref(ptr + 4, undefined);
      } else {
        A.store.Bool(ptr + 8, true);
        A.store.Ref(ptr + 0, x["ExtensionID"]);
        A.store.Ref(ptr + 4, x["ProviderName"]);
      }
    },
    "load_ThirdPartyVPNProperties": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      x["ExtensionID"] = A.load.Ref(ptr + 0, undefined);
      x["ProviderName"] = A.load.Ref(ptr + 4, undefined);
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_VPNStateProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 253, false);
        A.store.Ref(ptr + 0, undefined);

        A.store.Bool(ptr + 4 + 236, false);
        A.store.Ref(ptr + 4 + 0, undefined);

        A.store.Bool(ptr + 4 + 4 + 49, false);
        A.store.Ref(ptr + 4 + 4 + 0, undefined);

        A.store.Bool(ptr + 4 + 4 + 4 + 16, false);
        A.store.Ref(ptr + 4 + 4 + 4 + 0, undefined);
        A.store.Ref(ptr + 4 + 4 + 4 + 4, undefined);
        A.store.Ref(ptr + 4 + 4 + 4 + 8, undefined);
        A.store.Ref(ptr + 4 + 4 + 4 + 12, undefined);
        A.store.Ref(ptr + 4 + 4 + 24, undefined);
        A.store.Ref(ptr + 4 + 4 + 28, undefined);

        A.store.Bool(ptr + 4 + 4 + 32 + 16, false);
        A.store.Ref(ptr + 4 + 4 + 32 + 0, undefined);
        A.store.Ref(ptr + 4 + 4 + 32 + 4, undefined);
        A.store.Ref(ptr + 4 + 4 + 32 + 8, undefined);
        A.store.Ref(ptr + 4 + 4 + 32 + 12, undefined);
        A.store.Ref(ptr + 4 + 56, undefined);
        A.store.Ref(ptr + 4 + 60, undefined);
        A.store.Ref(ptr + 4 + 64, undefined);
        A.store.Ref(ptr + 4 + 68, undefined);

        A.store.Bool(ptr + 4 + 72 + 113, false);
        A.store.Ref(ptr + 4 + 72 + 0, undefined);

        A.store.Bool(ptr + 4 + 72 + 4 + 49, false);
        A.store.Ref(ptr + 4 + 72 + 4 + 0, undefined);

        A.store.Bool(ptr + 4 + 72 + 4 + 4 + 16, false);
        A.store.Ref(ptr + 4 + 72 + 4 + 4 + 0, undefined);
        A.store.Ref(ptr + 4 + 72 + 4 + 4 + 4, undefined);
        A.store.Ref(ptr + 4 + 72 + 4 + 4 + 8, undefined);
        A.store.Ref(ptr + 4 + 72 + 4 + 4 + 12, undefined);
        A.store.Ref(ptr + 4 + 72 + 4 + 24, undefined);
        A.store.Ref(ptr + 4 + 72 + 4 + 28, undefined);

        A.store.Bool(ptr + 4 + 72 + 4 + 32 + 16, false);
        A.store.Ref(ptr + 4 + 72 + 4 + 32 + 0, undefined);
        A.store.Ref(ptr + 4 + 72 + 4 + 32 + 4, undefined);
        A.store.Ref(ptr + 4 + 72 + 4 + 32 + 8, undefined);
        A.store.Ref(ptr + 4 + 72 + 4 + 32 + 12, undefined);
        A.store.Ref(ptr + 4 + 72 + 56, undefined);
        A.store.Ref(ptr + 4 + 72 + 60, undefined);
        A.store.Ref(ptr + 4 + 72 + 64, undefined);
        A.store.Ref(ptr + 4 + 72 + 68, undefined);
        A.store.Ref(ptr + 4 + 72 + 72, undefined);
        A.store.Ref(ptr + 4 + 72 + 76, undefined);
        A.store.Ref(ptr + 4 + 72 + 80, undefined);
        A.store.Ref(ptr + 4 + 72 + 84, undefined);
        A.store.Bool(ptr + 4 + 72 + 110, false);
        A.store.Bool(ptr + 4 + 72 + 88, false);
        A.store.Ref(ptr + 4 + 72 + 92, undefined);
        A.store.Ref(ptr + 4 + 72 + 96, undefined);
        A.store.Ref(ptr + 4 + 72 + 100, undefined);
        A.store.Ref(ptr + 4 + 72 + 104, undefined);
        A.store.Bool(ptr + 4 + 72 + 111, false);
        A.store.Bool(ptr + 4 + 72 + 108, false);
        A.store.Bool(ptr + 4 + 72 + 112, false);
        A.store.Bool(ptr + 4 + 72 + 109, false);
        A.store.Ref(ptr + 4 + 188, undefined);
        A.store.Bool(ptr + 4 + 234, false);
        A.store.Int32(ptr + 4 + 192, 0);
        A.store.Ref(ptr + 4 + 196, undefined);
        A.store.Ref(ptr + 4 + 200, undefined);
        A.store.Ref(ptr + 4 + 204, undefined);
        A.store.Bool(ptr + 4 + 235, false);
        A.store.Bool(ptr + 4 + 208, false);
        A.store.Ref(ptr + 4 + 212, undefined);
        A.store.Ref(ptr + 4 + 216, undefined);

        A.store.Bool(ptr + 4 + 220 + 13, false);
        A.store.Ref(ptr + 4 + 220 + 0, undefined);
        A.store.Bool(ptr + 4 + 220 + 12, false);
        A.store.Bool(ptr + 4 + 220 + 4, false);
        A.store.Ref(ptr + 4 + 220 + 8, undefined);

        A.store.Bool(ptr + 244 + 8, false);
        A.store.Ref(ptr + 244 + 0, undefined);
        A.store.Ref(ptr + 244 + 4, undefined);
      } else {
        A.store.Bool(ptr + 253, true);
        A.store.Ref(ptr + 0, x["Type"]);

        if (typeof x["IPsec"] === "undefined") {
          A.store.Bool(ptr + 4 + 236, false);
          A.store.Ref(ptr + 4 + 0, undefined);

          A.store.Bool(ptr + 4 + 4 + 49, false);
          A.store.Ref(ptr + 4 + 4 + 0, undefined);

          A.store.Bool(ptr + 4 + 4 + 4 + 16, false);
          A.store.Ref(ptr + 4 + 4 + 4 + 0, undefined);
          A.store.Ref(ptr + 4 + 4 + 4 + 4, undefined);
          A.store.Ref(ptr + 4 + 4 + 4 + 8, undefined);
          A.store.Ref(ptr + 4 + 4 + 4 + 12, undefined);
          A.store.Ref(ptr + 4 + 4 + 24, undefined);
          A.store.Ref(ptr + 4 + 4 + 28, undefined);

          A.store.Bool(ptr + 4 + 4 + 32 + 16, false);
          A.store.Ref(ptr + 4 + 4 + 32 + 0, undefined);
          A.store.Ref(ptr + 4 + 4 + 32 + 4, undefined);
          A.store.Ref(ptr + 4 + 4 + 32 + 8, undefined);
          A.store.Ref(ptr + 4 + 4 + 32 + 12, undefined);
          A.store.Ref(ptr + 4 + 56, undefined);
          A.store.Ref(ptr + 4 + 60, undefined);
          A.store.Ref(ptr + 4 + 64, undefined);
          A.store.Ref(ptr + 4 + 68, undefined);

          A.store.Bool(ptr + 4 + 72 + 113, false);
          A.store.Ref(ptr + 4 + 72 + 0, undefined);

          A.store.Bool(ptr + 4 + 72 + 4 + 49, false);
          A.store.Ref(ptr + 4 + 72 + 4 + 0, undefined);

          A.store.Bool(ptr + 4 + 72 + 4 + 4 + 16, false);
          A.store.Ref(ptr + 4 + 72 + 4 + 4 + 0, undefined);
          A.store.Ref(ptr + 4 + 72 + 4 + 4 + 4, undefined);
          A.store.Ref(ptr + 4 + 72 + 4 + 4 + 8, undefined);
          A.store.Ref(ptr + 4 + 72 + 4 + 4 + 12, undefined);
          A.store.Ref(ptr + 4 + 72 + 4 + 24, undefined);
          A.store.Ref(ptr + 4 + 72 + 4 + 28, undefined);

          A.store.Bool(ptr + 4 + 72 + 4 + 32 + 16, false);
          A.store.Ref(ptr + 4 + 72 + 4 + 32 + 0, undefined);
          A.store.Ref(ptr + 4 + 72 + 4 + 32 + 4, undefined);
          A.store.Ref(ptr + 4 + 72 + 4 + 32 + 8, undefined);
          A.store.Ref(ptr + 4 + 72 + 4 + 32 + 12, undefined);
          A.store.Ref(ptr + 4 + 72 + 56, undefined);
          A.store.Ref(ptr + 4 + 72 + 60, undefined);
          A.store.Ref(ptr + 4 + 72 + 64, undefined);
          A.store.Ref(ptr + 4 + 72 + 68, undefined);
          A.store.Ref(ptr + 4 + 72 + 72, undefined);
          A.store.Ref(ptr + 4 + 72 + 76, undefined);
          A.store.Ref(ptr + 4 + 72 + 80, undefined);
          A.store.Ref(ptr + 4 + 72 + 84, undefined);
          A.store.Bool(ptr + 4 + 72 + 110, false);
          A.store.Bool(ptr + 4 + 72 + 88, false);
          A.store.Ref(ptr + 4 + 72 + 92, undefined);
          A.store.Ref(ptr + 4 + 72 + 96, undefined);
          A.store.Ref(ptr + 4 + 72 + 100, undefined);
          A.store.Ref(ptr + 4 + 72 + 104, undefined);
          A.store.Bool(ptr + 4 + 72 + 111, false);
          A.store.Bool(ptr + 4 + 72 + 108, false);
          A.store.Bool(ptr + 4 + 72 + 112, false);
          A.store.Bool(ptr + 4 + 72 + 109, false);
          A.store.Ref(ptr + 4 + 188, undefined);
          A.store.Bool(ptr + 4 + 234, false);
          A.store.Int32(ptr + 4 + 192, 0);
          A.store.Ref(ptr + 4 + 196, undefined);
          A.store.Ref(ptr + 4 + 200, undefined);
          A.store.Ref(ptr + 4 + 204, undefined);
          A.store.Bool(ptr + 4 + 235, false);
          A.store.Bool(ptr + 4 + 208, false);
          A.store.Ref(ptr + 4 + 212, undefined);
          A.store.Ref(ptr + 4 + 216, undefined);

          A.store.Bool(ptr + 4 + 220 + 13, false);
          A.store.Ref(ptr + 4 + 220 + 0, undefined);
          A.store.Bool(ptr + 4 + 220 + 12, false);
          A.store.Bool(ptr + 4 + 220 + 4, false);
          A.store.Ref(ptr + 4 + 220 + 8, undefined);
        } else {
          A.store.Bool(ptr + 4 + 236, true);
          A.store.Ref(ptr + 4 + 0, x["IPsec"]["AuthenticationType"]);

          if (typeof x["IPsec"]["ClientCertPattern"] === "undefined") {
            A.store.Bool(ptr + 4 + 4 + 49, false);
            A.store.Ref(ptr + 4 + 4 + 0, undefined);

            A.store.Bool(ptr + 4 + 4 + 4 + 16, false);
            A.store.Ref(ptr + 4 + 4 + 4 + 0, undefined);
            A.store.Ref(ptr + 4 + 4 + 4 + 4, undefined);
            A.store.Ref(ptr + 4 + 4 + 4 + 8, undefined);
            A.store.Ref(ptr + 4 + 4 + 4 + 12, undefined);
            A.store.Ref(ptr + 4 + 4 + 24, undefined);
            A.store.Ref(ptr + 4 + 4 + 28, undefined);

            A.store.Bool(ptr + 4 + 4 + 32 + 16, false);
            A.store.Ref(ptr + 4 + 4 + 32 + 0, undefined);
            A.store.Ref(ptr + 4 + 4 + 32 + 4, undefined);
            A.store.Ref(ptr + 4 + 4 + 32 + 8, undefined);
            A.store.Ref(ptr + 4 + 4 + 32 + 12, undefined);
          } else {
            A.store.Bool(ptr + 4 + 4 + 49, true);
            A.store.Ref(ptr + 4 + 4 + 0, x["IPsec"]["ClientCertPattern"]["EnrollmentURI"]);

            if (typeof x["IPsec"]["ClientCertPattern"]["Issuer"] === "undefined") {
              A.store.Bool(ptr + 4 + 4 + 4 + 16, false);
              A.store.Ref(ptr + 4 + 4 + 4 + 0, undefined);
              A.store.Ref(ptr + 4 + 4 + 4 + 4, undefined);
              A.store.Ref(ptr + 4 + 4 + 4 + 8, undefined);
              A.store.Ref(ptr + 4 + 4 + 4 + 12, undefined);
            } else {
              A.store.Bool(ptr + 4 + 4 + 4 + 16, true);
              A.store.Ref(ptr + 4 + 4 + 4 + 0, x["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]);
              A.store.Ref(ptr + 4 + 4 + 4 + 4, x["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]);
              A.store.Ref(ptr + 4 + 4 + 4 + 8, x["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]);
              A.store.Ref(ptr + 4 + 4 + 4 + 12, x["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]);
            }
            A.store.Ref(ptr + 4 + 4 + 24, x["IPsec"]["ClientCertPattern"]["IssuerCAPEMs"]);
            A.store.Ref(ptr + 4 + 4 + 28, x["IPsec"]["ClientCertPattern"]["IssuerCARef"]);

            if (typeof x["IPsec"]["ClientCertPattern"]["Subject"] === "undefined") {
              A.store.Bool(ptr + 4 + 4 + 32 + 16, false);
              A.store.Ref(ptr + 4 + 4 + 32 + 0, undefined);
              A.store.Ref(ptr + 4 + 4 + 32 + 4, undefined);
              A.store.Ref(ptr + 4 + 4 + 32 + 8, undefined);
              A.store.Ref(ptr + 4 + 4 + 32 + 12, undefined);
            } else {
              A.store.Bool(ptr + 4 + 4 + 32 + 16, true);
              A.store.Ref(ptr + 4 + 4 + 32 + 0, x["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]);
              A.store.Ref(ptr + 4 + 4 + 32 + 4, x["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]);
              A.store.Ref(ptr + 4 + 4 + 32 + 8, x["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]);
              A.store.Ref(ptr + 4 + 4 + 32 + 12, x["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]);
            }
          }
          A.store.Ref(ptr + 4 + 56, x["IPsec"]["ClientCertPKCS11Id"]);
          A.store.Ref(ptr + 4 + 60, x["IPsec"]["ClientCertProvisioningProfileId"]);
          A.store.Ref(ptr + 4 + 64, x["IPsec"]["ClientCertRef"]);
          A.store.Ref(ptr + 4 + 68, x["IPsec"]["ClientCertType"]);

          if (typeof x["IPsec"]["EAP"] === "undefined") {
            A.store.Bool(ptr + 4 + 72 + 113, false);
            A.store.Ref(ptr + 4 + 72 + 0, undefined);

            A.store.Bool(ptr + 4 + 72 + 4 + 49, false);
            A.store.Ref(ptr + 4 + 72 + 4 + 0, undefined);

            A.store.Bool(ptr + 4 + 72 + 4 + 4 + 16, false);
            A.store.Ref(ptr + 4 + 72 + 4 + 4 + 0, undefined);
            A.store.Ref(ptr + 4 + 72 + 4 + 4 + 4, undefined);
            A.store.Ref(ptr + 4 + 72 + 4 + 4 + 8, undefined);
            A.store.Ref(ptr + 4 + 72 + 4 + 4 + 12, undefined);
            A.store.Ref(ptr + 4 + 72 + 4 + 24, undefined);
            A.store.Ref(ptr + 4 + 72 + 4 + 28, undefined);

            A.store.Bool(ptr + 4 + 72 + 4 + 32 + 16, false);
            A.store.Ref(ptr + 4 + 72 + 4 + 32 + 0, undefined);
            A.store.Ref(ptr + 4 + 72 + 4 + 32 + 4, undefined);
            A.store.Ref(ptr + 4 + 72 + 4 + 32 + 8, undefined);
            A.store.Ref(ptr + 4 + 72 + 4 + 32 + 12, undefined);
            A.store.Ref(ptr + 4 + 72 + 56, undefined);
            A.store.Ref(ptr + 4 + 72 + 60, undefined);
            A.store.Ref(ptr + 4 + 72 + 64, undefined);
            A.store.Ref(ptr + 4 + 72 + 68, undefined);
            A.store.Ref(ptr + 4 + 72 + 72, undefined);
            A.store.Ref(ptr + 4 + 72 + 76, undefined);
            A.store.Ref(ptr + 4 + 72 + 80, undefined);
            A.store.Ref(ptr + 4 + 72 + 84, undefined);
            A.store.Bool(ptr + 4 + 72 + 110, false);
            A.store.Bool(ptr + 4 + 72 + 88, false);
            A.store.Ref(ptr + 4 + 72 + 92, undefined);
            A.store.Ref(ptr + 4 + 72 + 96, undefined);
            A.store.Ref(ptr + 4 + 72 + 100, undefined);
            A.store.Ref(ptr + 4 + 72 + 104, undefined);
            A.store.Bool(ptr + 4 + 72 + 111, false);
            A.store.Bool(ptr + 4 + 72 + 108, false);
            A.store.Bool(ptr + 4 + 72 + 112, false);
            A.store.Bool(ptr + 4 + 72 + 109, false);
          } else {
            A.store.Bool(ptr + 4 + 72 + 113, true);
            A.store.Ref(ptr + 4 + 72 + 0, x["IPsec"]["EAP"]["AnonymousIdentity"]);

            if (typeof x["IPsec"]["EAP"]["ClientCertPattern"] === "undefined") {
              A.store.Bool(ptr + 4 + 72 + 4 + 49, false);
              A.store.Ref(ptr + 4 + 72 + 4 + 0, undefined);

              A.store.Bool(ptr + 4 + 72 + 4 + 4 + 16, false);
              A.store.Ref(ptr + 4 + 72 + 4 + 4 + 0, undefined);
              A.store.Ref(ptr + 4 + 72 + 4 + 4 + 4, undefined);
              A.store.Ref(ptr + 4 + 72 + 4 + 4 + 8, undefined);
              A.store.Ref(ptr + 4 + 72 + 4 + 4 + 12, undefined);
              A.store.Ref(ptr + 4 + 72 + 4 + 24, undefined);
              A.store.Ref(ptr + 4 + 72 + 4 + 28, undefined);

              A.store.Bool(ptr + 4 + 72 + 4 + 32 + 16, false);
              A.store.Ref(ptr + 4 + 72 + 4 + 32 + 0, undefined);
              A.store.Ref(ptr + 4 + 72 + 4 + 32 + 4, undefined);
              A.store.Ref(ptr + 4 + 72 + 4 + 32 + 8, undefined);
              A.store.Ref(ptr + 4 + 72 + 4 + 32 + 12, undefined);
            } else {
              A.store.Bool(ptr + 4 + 72 + 4 + 49, true);
              A.store.Ref(ptr + 4 + 72 + 4 + 0, x["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]);

              if (typeof x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"] === "undefined") {
                A.store.Bool(ptr + 4 + 72 + 4 + 4 + 16, false);
                A.store.Ref(ptr + 4 + 72 + 4 + 4 + 0, undefined);
                A.store.Ref(ptr + 4 + 72 + 4 + 4 + 4, undefined);
                A.store.Ref(ptr + 4 + 72 + 4 + 4 + 8, undefined);
                A.store.Ref(ptr + 4 + 72 + 4 + 4 + 12, undefined);
              } else {
                A.store.Bool(ptr + 4 + 72 + 4 + 4 + 16, true);
                A.store.Ref(ptr + 4 + 72 + 4 + 4 + 0, x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]);
                A.store.Ref(ptr + 4 + 72 + 4 + 4 + 4, x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]);
                A.store.Ref(ptr + 4 + 72 + 4 + 4 + 8, x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]);
                A.store.Ref(
                  ptr + 4 + 72 + 4 + 4 + 12,
                  x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]
                );
              }
              A.store.Ref(ptr + 4 + 72 + 4 + 24, x["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCAPEMs"]);
              A.store.Ref(ptr + 4 + 72 + 4 + 28, x["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]);

              if (typeof x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"] === "undefined") {
                A.store.Bool(ptr + 4 + 72 + 4 + 32 + 16, false);
                A.store.Ref(ptr + 4 + 72 + 4 + 32 + 0, undefined);
                A.store.Ref(ptr + 4 + 72 + 4 + 32 + 4, undefined);
                A.store.Ref(ptr + 4 + 72 + 4 + 32 + 8, undefined);
                A.store.Ref(ptr + 4 + 72 + 4 + 32 + 12, undefined);
              } else {
                A.store.Bool(ptr + 4 + 72 + 4 + 32 + 16, true);
                A.store.Ref(ptr + 4 + 72 + 4 + 32 + 0, x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]);
                A.store.Ref(ptr + 4 + 72 + 4 + 32 + 4, x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]);
                A.store.Ref(
                  ptr + 4 + 72 + 4 + 32 + 8,
                  x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]
                );
                A.store.Ref(
                  ptr + 4 + 72 + 4 + 32 + 12,
                  x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]
                );
              }
            }
            A.store.Ref(ptr + 4 + 72 + 56, x["IPsec"]["EAP"]["ClientCertPKCS11Id"]);
            A.store.Ref(ptr + 4 + 72 + 60, x["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]);
            A.store.Ref(ptr + 4 + 72 + 64, x["IPsec"]["EAP"]["ClientCertRef"]);
            A.store.Ref(ptr + 4 + 72 + 68, x["IPsec"]["EAP"]["ClientCertType"]);
            A.store.Ref(ptr + 4 + 72 + 72, x["IPsec"]["EAP"]["Identity"]);
            A.store.Ref(ptr + 4 + 72 + 76, x["IPsec"]["EAP"]["Inner"]);
            A.store.Ref(ptr + 4 + 72 + 80, x["IPsec"]["EAP"]["Outer"]);
            A.store.Ref(ptr + 4 + 72 + 84, x["IPsec"]["EAP"]["Password"]);
            A.store.Bool(ptr + 4 + 72 + 110, "SaveCredentials" in x["IPsec"]["EAP"] ? true : false);
            A.store.Bool(ptr + 4 + 72 + 88, x["IPsec"]["EAP"]["SaveCredentials"] ? true : false);
            A.store.Ref(ptr + 4 + 72 + 92, x["IPsec"]["EAP"]["ServerCAPEMs"]);
            A.store.Ref(ptr + 4 + 72 + 96, x["IPsec"]["EAP"]["ServerCARefs"]);
            A.store.Ref(ptr + 4 + 72 + 100, x["IPsec"]["EAP"]["SubjectMatch"]);
            A.store.Ref(ptr + 4 + 72 + 104, x["IPsec"]["EAP"]["TLSVersionMax"]);
            A.store.Bool(ptr + 4 + 72 + 111, "UseProactiveKeyCaching" in x["IPsec"]["EAP"] ? true : false);
            A.store.Bool(ptr + 4 + 72 + 108, x["IPsec"]["EAP"]["UseProactiveKeyCaching"] ? true : false);
            A.store.Bool(ptr + 4 + 72 + 112, "UseSystemCAs" in x["IPsec"]["EAP"] ? true : false);
            A.store.Bool(ptr + 4 + 72 + 109, x["IPsec"]["EAP"]["UseSystemCAs"] ? true : false);
          }
          A.store.Ref(ptr + 4 + 188, x["IPsec"]["Group"]);
          A.store.Bool(ptr + 4 + 234, "IKEVersion" in x["IPsec"] ? true : false);
          A.store.Int32(
            ptr + 4 + 192,
            x["IPsec"]["IKEVersion"] === undefined ? 0 : (x["IPsec"]["IKEVersion"] as number)
          );
          A.store.Ref(ptr + 4 + 196, x["IPsec"]["LocalIdentity"]);
          A.store.Ref(ptr + 4 + 200, x["IPsec"]["PSK"]);
          A.store.Ref(ptr + 4 + 204, x["IPsec"]["RemoteIdentity"]);
          A.store.Bool(ptr + 4 + 235, "SaveCredentials" in x["IPsec"] ? true : false);
          A.store.Bool(ptr + 4 + 208, x["IPsec"]["SaveCredentials"] ? true : false);
          A.store.Ref(ptr + 4 + 212, x["IPsec"]["ServerCAPEMs"]);
          A.store.Ref(ptr + 4 + 216, x["IPsec"]["ServerCARefs"]);

          if (typeof x["IPsec"]["XAUTH"] === "undefined") {
            A.store.Bool(ptr + 4 + 220 + 13, false);
            A.store.Ref(ptr + 4 + 220 + 0, undefined);
            A.store.Bool(ptr + 4 + 220 + 12, false);
            A.store.Bool(ptr + 4 + 220 + 4, false);
            A.store.Ref(ptr + 4 + 220 + 8, undefined);
          } else {
            A.store.Bool(ptr + 4 + 220 + 13, true);
            A.store.Ref(ptr + 4 + 220 + 0, x["IPsec"]["XAUTH"]["Password"]);
            A.store.Bool(ptr + 4 + 220 + 12, "SaveCredentials" in x["IPsec"]["XAUTH"] ? true : false);
            A.store.Bool(ptr + 4 + 220 + 4, x["IPsec"]["XAUTH"]["SaveCredentials"] ? true : false);
            A.store.Ref(ptr + 4 + 220 + 8, x["IPsec"]["XAUTH"]["Username"]);
          }
        }

        if (typeof x["ThirdPartyVPN"] === "undefined") {
          A.store.Bool(ptr + 244 + 8, false);
          A.store.Ref(ptr + 244 + 0, undefined);
          A.store.Ref(ptr + 244 + 4, undefined);
        } else {
          A.store.Bool(ptr + 244 + 8, true);
          A.store.Ref(ptr + 244 + 0, x["ThirdPartyVPN"]["ExtensionID"]);
          A.store.Ref(ptr + 244 + 4, x["ThirdPartyVPN"]["ProviderName"]);
        }
      }
    },
    "load_VPNStateProperties": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      x["Type"] = A.load.Ref(ptr + 0, undefined);
      if (A.load.Bool(ptr + 4 + 236)) {
        x["IPsec"] = {};
        x["IPsec"]["AuthenticationType"] = A.load.Ref(ptr + 4 + 0, undefined);
        if (A.load.Bool(ptr + 4 + 4 + 49)) {
          x["IPsec"]["ClientCertPattern"] = {};
          x["IPsec"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(ptr + 4 + 4 + 0, undefined);
          if (A.load.Bool(ptr + 4 + 4 + 4 + 16)) {
            x["IPsec"]["ClientCertPattern"]["Issuer"] = {};
            x["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(ptr + 4 + 4 + 4 + 0, undefined);
            x["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(ptr + 4 + 4 + 4 + 4, undefined);
            x["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(ptr + 4 + 4 + 4 + 8, undefined);
            x["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(
              ptr + 4 + 4 + 4 + 12,
              undefined
            );
          } else {
            delete x["IPsec"]["ClientCertPattern"]["Issuer"];
          }
          x["IPsec"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(ptr + 4 + 4 + 24, undefined);
          x["IPsec"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(ptr + 4 + 4 + 28, undefined);
          if (A.load.Bool(ptr + 4 + 4 + 32 + 16)) {
            x["IPsec"]["ClientCertPattern"]["Subject"] = {};
            x["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(ptr + 4 + 4 + 32 + 0, undefined);
            x["IPsec"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(ptr + 4 + 4 + 32 + 4, undefined);
            x["IPsec"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(ptr + 4 + 4 + 32 + 8, undefined);
            x["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(
              ptr + 4 + 4 + 32 + 12,
              undefined
            );
          } else {
            delete x["IPsec"]["ClientCertPattern"]["Subject"];
          }
        } else {
          delete x["IPsec"]["ClientCertPattern"];
        }
        x["IPsec"]["ClientCertPKCS11Id"] = A.load.Ref(ptr + 4 + 56, undefined);
        x["IPsec"]["ClientCertProvisioningProfileId"] = A.load.Ref(ptr + 4 + 60, undefined);
        x["IPsec"]["ClientCertRef"] = A.load.Ref(ptr + 4 + 64, undefined);
        x["IPsec"]["ClientCertType"] = A.load.Ref(ptr + 4 + 68, undefined);
        if (A.load.Bool(ptr + 4 + 72 + 113)) {
          x["IPsec"]["EAP"] = {};
          x["IPsec"]["EAP"]["AnonymousIdentity"] = A.load.Ref(ptr + 4 + 72 + 0, undefined);
          if (A.load.Bool(ptr + 4 + 72 + 4 + 49)) {
            x["IPsec"]["EAP"]["ClientCertPattern"] = {};
            x["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(ptr + 4 + 72 + 4 + 0, undefined);
            if (A.load.Bool(ptr + 4 + 72 + 4 + 4 + 16)) {
              x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"] = {};
              x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(
                ptr + 4 + 72 + 4 + 4 + 0,
                undefined
              );
              x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(
                ptr + 4 + 72 + 4 + 4 + 4,
                undefined
              );
              x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(
                ptr + 4 + 72 + 4 + 4 + 8,
                undefined
              );
              x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(
                ptr + 4 + 72 + 4 + 4 + 12,
                undefined
              );
            } else {
              delete x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"];
            }
            x["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(ptr + 4 + 72 + 4 + 24, undefined);
            x["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(ptr + 4 + 72 + 4 + 28, undefined);
            if (A.load.Bool(ptr + 4 + 72 + 4 + 32 + 16)) {
              x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"] = {};
              x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(
                ptr + 4 + 72 + 4 + 32 + 0,
                undefined
              );
              x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(
                ptr + 4 + 72 + 4 + 32 + 4,
                undefined
              );
              x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(
                ptr + 4 + 72 + 4 + 32 + 8,
                undefined
              );
              x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(
                ptr + 4 + 72 + 4 + 32 + 12,
                undefined
              );
            } else {
              delete x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"];
            }
          } else {
            delete x["IPsec"]["EAP"]["ClientCertPattern"];
          }
          x["IPsec"]["EAP"]["ClientCertPKCS11Id"] = A.load.Ref(ptr + 4 + 72 + 56, undefined);
          x["IPsec"]["EAP"]["ClientCertProvisioningProfileId"] = A.load.Ref(ptr + 4 + 72 + 60, undefined);
          x["IPsec"]["EAP"]["ClientCertRef"] = A.load.Ref(ptr + 4 + 72 + 64, undefined);
          x["IPsec"]["EAP"]["ClientCertType"] = A.load.Ref(ptr + 4 + 72 + 68, undefined);
          x["IPsec"]["EAP"]["Identity"] = A.load.Ref(ptr + 4 + 72 + 72, undefined);
          x["IPsec"]["EAP"]["Inner"] = A.load.Ref(ptr + 4 + 72 + 76, undefined);
          x["IPsec"]["EAP"]["Outer"] = A.load.Ref(ptr + 4 + 72 + 80, undefined);
          x["IPsec"]["EAP"]["Password"] = A.load.Ref(ptr + 4 + 72 + 84, undefined);
          if (A.load.Bool(ptr + 4 + 72 + 110)) {
            x["IPsec"]["EAP"]["SaveCredentials"] = A.load.Bool(ptr + 4 + 72 + 88);
          } else {
            delete x["IPsec"]["EAP"]["SaveCredentials"];
          }
          x["IPsec"]["EAP"]["ServerCAPEMs"] = A.load.Ref(ptr + 4 + 72 + 92, undefined);
          x["IPsec"]["EAP"]["ServerCARefs"] = A.load.Ref(ptr + 4 + 72 + 96, undefined);
          x["IPsec"]["EAP"]["SubjectMatch"] = A.load.Ref(ptr + 4 + 72 + 100, undefined);
          x["IPsec"]["EAP"]["TLSVersionMax"] = A.load.Ref(ptr + 4 + 72 + 104, undefined);
          if (A.load.Bool(ptr + 4 + 72 + 111)) {
            x["IPsec"]["EAP"]["UseProactiveKeyCaching"] = A.load.Bool(ptr + 4 + 72 + 108);
          } else {
            delete x["IPsec"]["EAP"]["UseProactiveKeyCaching"];
          }
          if (A.load.Bool(ptr + 4 + 72 + 112)) {
            x["IPsec"]["EAP"]["UseSystemCAs"] = A.load.Bool(ptr + 4 + 72 + 109);
          } else {
            delete x["IPsec"]["EAP"]["UseSystemCAs"];
          }
        } else {
          delete x["IPsec"]["EAP"];
        }
        x["IPsec"]["Group"] = A.load.Ref(ptr + 4 + 188, undefined);
        if (A.load.Bool(ptr + 4 + 234)) {
          x["IPsec"]["IKEVersion"] = A.load.Int32(ptr + 4 + 192);
        } else {
          delete x["IPsec"]["IKEVersion"];
        }
        x["IPsec"]["LocalIdentity"] = A.load.Ref(ptr + 4 + 196, undefined);
        x["IPsec"]["PSK"] = A.load.Ref(ptr + 4 + 200, undefined);
        x["IPsec"]["RemoteIdentity"] = A.load.Ref(ptr + 4 + 204, undefined);
        if (A.load.Bool(ptr + 4 + 235)) {
          x["IPsec"]["SaveCredentials"] = A.load.Bool(ptr + 4 + 208);
        } else {
          delete x["IPsec"]["SaveCredentials"];
        }
        x["IPsec"]["ServerCAPEMs"] = A.load.Ref(ptr + 4 + 212, undefined);
        x["IPsec"]["ServerCARefs"] = A.load.Ref(ptr + 4 + 216, undefined);
        if (A.load.Bool(ptr + 4 + 220 + 13)) {
          x["IPsec"]["XAUTH"] = {};
          x["IPsec"]["XAUTH"]["Password"] = A.load.Ref(ptr + 4 + 220 + 0, undefined);
          if (A.load.Bool(ptr + 4 + 220 + 12)) {
            x["IPsec"]["XAUTH"]["SaveCredentials"] = A.load.Bool(ptr + 4 + 220 + 4);
          } else {
            delete x["IPsec"]["XAUTH"]["SaveCredentials"];
          }
          x["IPsec"]["XAUTH"]["Username"] = A.load.Ref(ptr + 4 + 220 + 8, undefined);
        } else {
          delete x["IPsec"]["XAUTH"];
        }
      } else {
        delete x["IPsec"];
      }
      if (A.load.Bool(ptr + 244 + 8)) {
        x["ThirdPartyVPN"] = {};
        x["ThirdPartyVPN"]["ExtensionID"] = A.load.Ref(ptr + 244 + 0, undefined);
        x["ThirdPartyVPN"]["ProviderName"] = A.load.Ref(ptr + 244 + 4, undefined);
      } else {
        delete x["ThirdPartyVPN"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_WiFiStateProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 34, false);
        A.store.Ref(ptr + 0, undefined);

        A.store.Bool(ptr + 4 + 4, false);
        A.store.Ref(ptr + 4 + 0, undefined);
        A.store.Bool(ptr + 32, false);
        A.store.Int32(ptr + 12, 0);
        A.store.Ref(ptr + 16, undefined);
        A.store.Ref(ptr + 20, undefined);
        A.store.Bool(ptr + 33, false);
        A.store.Int32(ptr + 24, 0);
        A.store.Ref(ptr + 28, undefined);
      } else {
        A.store.Bool(ptr + 34, true);
        A.store.Ref(ptr + 0, x["BSSID"]);

        if (typeof x["EAP"] === "undefined") {
          A.store.Bool(ptr + 4 + 4, false);
          A.store.Ref(ptr + 4 + 0, undefined);
        } else {
          A.store.Bool(ptr + 4 + 4, true);
          A.store.Ref(ptr + 4 + 0, x["EAP"]["Outer"]);
        }
        A.store.Bool(ptr + 32, "Frequency" in x ? true : false);
        A.store.Int32(ptr + 12, x["Frequency"] === undefined ? 0 : (x["Frequency"] as number));
        A.store.Ref(ptr + 16, x["HexSSID"]);
        A.store.Ref(ptr + 20, x["Security"]);
        A.store.Bool(ptr + 33, "SignalStrength" in x ? true : false);
        A.store.Int32(ptr + 24, x["SignalStrength"] === undefined ? 0 : (x["SignalStrength"] as number));
        A.store.Ref(ptr + 28, x["SSID"]);
      }
    },
    "load_WiFiStateProperties": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      x["BSSID"] = A.load.Ref(ptr + 0, undefined);
      if (A.load.Bool(ptr + 4 + 4)) {
        x["EAP"] = {};
        x["EAP"]["Outer"] = A.load.Ref(ptr + 4 + 0, undefined);
      } else {
        delete x["EAP"];
      }
      if (A.load.Bool(ptr + 32)) {
        x["Frequency"] = A.load.Int32(ptr + 12);
      } else {
        delete x["Frequency"];
      }
      x["HexSSID"] = A.load.Ref(ptr + 16, undefined);
      x["Security"] = A.load.Ref(ptr + 20, undefined);
      if (A.load.Bool(ptr + 33)) {
        x["SignalStrength"] = A.load.Int32(ptr + 24);
      } else {
        delete x["SignalStrength"];
      }
      x["SSID"] = A.load.Ref(ptr + 28, undefined);
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_NetworkStateProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 385, false);

        A.store.Bool(ptr + 0 + 31, false);
        A.store.Enum(ptr + 0 + 0, -1);
        A.store.Ref(ptr + 0 + 4, undefined);
        A.store.Ref(ptr + 0 + 8, undefined);
        A.store.Ref(ptr + 0 + 12, undefined);
        A.store.Ref(ptr + 0 + 16, undefined);
        A.store.Bool(ptr + 0 + 28, false);
        A.store.Bool(ptr + 0 + 20, false);
        A.store.Bool(ptr + 0 + 29, false);
        A.store.Bool(ptr + 0 + 21, false);
        A.store.Bool(ptr + 0 + 30, false);
        A.store.Int32(ptr + 0 + 24, 0);
        A.store.Bool(ptr + 383, false);
        A.store.Bool(ptr + 32, false);
        A.store.Enum(ptr + 36, -1);

        A.store.Bool(ptr + 40 + 4, false);
        A.store.Ref(ptr + 40 + 0, undefined);
        A.store.Ref(ptr + 48, undefined);
        A.store.Ref(ptr + 52, undefined);
        A.store.Ref(ptr + 56, undefined);
        A.store.Bool(ptr + 384, false);
        A.store.Int32(ptr + 60, 0);
        A.store.Ref(ptr + 64, undefined);

        A.store.Bool(ptr + 68 + 19, false);
        A.store.Bool(ptr + 68 + 16, false);
        A.store.Int32(ptr + 68 + 0, 0);
        A.store.Ref(ptr + 68 + 4, undefined);
        A.store.Bool(ptr + 68 + 17, false);
        A.store.Bool(ptr + 68 + 8, false);
        A.store.Bool(ptr + 68 + 18, false);
        A.store.Int32(ptr + 68 + 12, 0);
        A.store.Enum(ptr + 88, -1);

        A.store.Bool(ptr + 92 + 253, false);
        A.store.Ref(ptr + 92 + 0, undefined);

        A.store.Bool(ptr + 92 + 4 + 236, false);
        A.store.Ref(ptr + 92 + 4 + 0, undefined);

        A.store.Bool(ptr + 92 + 4 + 4 + 49, false);
        A.store.Ref(ptr + 92 + 4 + 4 + 0, undefined);

        A.store.Bool(ptr + 92 + 4 + 4 + 4 + 16, false);
        A.store.Ref(ptr + 92 + 4 + 4 + 4 + 0, undefined);
        A.store.Ref(ptr + 92 + 4 + 4 + 4 + 4, undefined);
        A.store.Ref(ptr + 92 + 4 + 4 + 4 + 8, undefined);
        A.store.Ref(ptr + 92 + 4 + 4 + 4 + 12, undefined);
        A.store.Ref(ptr + 92 + 4 + 4 + 24, undefined);
        A.store.Ref(ptr + 92 + 4 + 4 + 28, undefined);

        A.store.Bool(ptr + 92 + 4 + 4 + 32 + 16, false);
        A.store.Ref(ptr + 92 + 4 + 4 + 32 + 0, undefined);
        A.store.Ref(ptr + 92 + 4 + 4 + 32 + 4, undefined);
        A.store.Ref(ptr + 92 + 4 + 4 + 32 + 8, undefined);
        A.store.Ref(ptr + 92 + 4 + 4 + 32 + 12, undefined);
        A.store.Ref(ptr + 92 + 4 + 56, undefined);
        A.store.Ref(ptr + 92 + 4 + 60, undefined);
        A.store.Ref(ptr + 92 + 4 + 64, undefined);
        A.store.Ref(ptr + 92 + 4 + 68, undefined);

        A.store.Bool(ptr + 92 + 4 + 72 + 113, false);
        A.store.Ref(ptr + 92 + 4 + 72 + 0, undefined);

        A.store.Bool(ptr + 92 + 4 + 72 + 4 + 49, false);
        A.store.Ref(ptr + 92 + 4 + 72 + 4 + 0, undefined);

        A.store.Bool(ptr + 92 + 4 + 72 + 4 + 4 + 16, false);
        A.store.Ref(ptr + 92 + 4 + 72 + 4 + 4 + 0, undefined);
        A.store.Ref(ptr + 92 + 4 + 72 + 4 + 4 + 4, undefined);
        A.store.Ref(ptr + 92 + 4 + 72 + 4 + 4 + 8, undefined);
        A.store.Ref(ptr + 92 + 4 + 72 + 4 + 4 + 12, undefined);
        A.store.Ref(ptr + 92 + 4 + 72 + 4 + 24, undefined);
        A.store.Ref(ptr + 92 + 4 + 72 + 4 + 28, undefined);

        A.store.Bool(ptr + 92 + 4 + 72 + 4 + 32 + 16, false);
        A.store.Ref(ptr + 92 + 4 + 72 + 4 + 32 + 0, undefined);
        A.store.Ref(ptr + 92 + 4 + 72 + 4 + 32 + 4, undefined);
        A.store.Ref(ptr + 92 + 4 + 72 + 4 + 32 + 8, undefined);
        A.store.Ref(ptr + 92 + 4 + 72 + 4 + 32 + 12, undefined);
        A.store.Ref(ptr + 92 + 4 + 72 + 56, undefined);
        A.store.Ref(ptr + 92 + 4 + 72 + 60, undefined);
        A.store.Ref(ptr + 92 + 4 + 72 + 64, undefined);
        A.store.Ref(ptr + 92 + 4 + 72 + 68, undefined);
        A.store.Ref(ptr + 92 + 4 + 72 + 72, undefined);
        A.store.Ref(ptr + 92 + 4 + 72 + 76, undefined);
        A.store.Ref(ptr + 92 + 4 + 72 + 80, undefined);
        A.store.Ref(ptr + 92 + 4 + 72 + 84, undefined);
        A.store.Bool(ptr + 92 + 4 + 72 + 110, false);
        A.store.Bool(ptr + 92 + 4 + 72 + 88, false);
        A.store.Ref(ptr + 92 + 4 + 72 + 92, undefined);
        A.store.Ref(ptr + 92 + 4 + 72 + 96, undefined);
        A.store.Ref(ptr + 92 + 4 + 72 + 100, undefined);
        A.store.Ref(ptr + 92 + 4 + 72 + 104, undefined);
        A.store.Bool(ptr + 92 + 4 + 72 + 111, false);
        A.store.Bool(ptr + 92 + 4 + 72 + 108, false);
        A.store.Bool(ptr + 92 + 4 + 72 + 112, false);
        A.store.Bool(ptr + 92 + 4 + 72 + 109, false);
        A.store.Ref(ptr + 92 + 4 + 188, undefined);
        A.store.Bool(ptr + 92 + 4 + 234, false);
        A.store.Int32(ptr + 92 + 4 + 192, 0);
        A.store.Ref(ptr + 92 + 4 + 196, undefined);
        A.store.Ref(ptr + 92 + 4 + 200, undefined);
        A.store.Ref(ptr + 92 + 4 + 204, undefined);
        A.store.Bool(ptr + 92 + 4 + 235, false);
        A.store.Bool(ptr + 92 + 4 + 208, false);
        A.store.Ref(ptr + 92 + 4 + 212, undefined);
        A.store.Ref(ptr + 92 + 4 + 216, undefined);

        A.store.Bool(ptr + 92 + 4 + 220 + 13, false);
        A.store.Ref(ptr + 92 + 4 + 220 + 0, undefined);
        A.store.Bool(ptr + 92 + 4 + 220 + 12, false);
        A.store.Bool(ptr + 92 + 4 + 220 + 4, false);
        A.store.Ref(ptr + 92 + 4 + 220 + 8, undefined);

        A.store.Bool(ptr + 92 + 244 + 8, false);
        A.store.Ref(ptr + 92 + 244 + 0, undefined);
        A.store.Ref(ptr + 92 + 244 + 4, undefined);

        A.store.Bool(ptr + 348 + 34, false);
        A.store.Ref(ptr + 348 + 0, undefined);

        A.store.Bool(ptr + 348 + 4 + 4, false);
        A.store.Ref(ptr + 348 + 4 + 0, undefined);
        A.store.Bool(ptr + 348 + 32, false);
        A.store.Int32(ptr + 348 + 12, 0);
        A.store.Ref(ptr + 348 + 16, undefined);
        A.store.Ref(ptr + 348 + 20, undefined);
        A.store.Bool(ptr + 348 + 33, false);
        A.store.Int32(ptr + 348 + 24, 0);
        A.store.Ref(ptr + 348 + 28, undefined);
      } else {
        A.store.Bool(ptr + 385, true);

        if (typeof x["Cellular"] === "undefined") {
          A.store.Bool(ptr + 0 + 31, false);
          A.store.Enum(ptr + 0 + 0, -1);
          A.store.Ref(ptr + 0 + 4, undefined);
          A.store.Ref(ptr + 0 + 8, undefined);
          A.store.Ref(ptr + 0 + 12, undefined);
          A.store.Ref(ptr + 0 + 16, undefined);
          A.store.Bool(ptr + 0 + 28, false);
          A.store.Bool(ptr + 0 + 20, false);
          A.store.Bool(ptr + 0 + 29, false);
          A.store.Bool(ptr + 0 + 21, false);
          A.store.Bool(ptr + 0 + 30, false);
          A.store.Int32(ptr + 0 + 24, 0);
        } else {
          A.store.Bool(ptr + 0 + 31, true);
          A.store.Enum(
            ptr + 0 + 0,
            ["Activated", "Activating", "NotActivated", "PartiallyActivated"].indexOf(
              x["Cellular"]["ActivationState"] as string
            )
          );
          A.store.Ref(ptr + 0 + 4, x["Cellular"]["EID"]);
          A.store.Ref(ptr + 0 + 8, x["Cellular"]["ICCID"]);
          A.store.Ref(ptr + 0 + 12, x["Cellular"]["NetworkTechnology"]);
          A.store.Ref(ptr + 0 + 16, x["Cellular"]["RoamingState"]);
          A.store.Bool(ptr + 0 + 28, "Scanning" in x["Cellular"] ? true : false);
          A.store.Bool(ptr + 0 + 20, x["Cellular"]["Scanning"] ? true : false);
          A.store.Bool(ptr + 0 + 29, "SIMPresent" in x["Cellular"] ? true : false);
          A.store.Bool(ptr + 0 + 21, x["Cellular"]["SIMPresent"] ? true : false);
          A.store.Bool(ptr + 0 + 30, "SignalStrength" in x["Cellular"] ? true : false);
          A.store.Int32(
            ptr + 0 + 24,
            x["Cellular"]["SignalStrength"] === undefined ? 0 : (x["Cellular"]["SignalStrength"] as number)
          );
        }
        A.store.Bool(ptr + 383, "Connectable" in x ? true : false);
        A.store.Bool(ptr + 32, x["Connectable"] ? true : false);
        A.store.Enum(ptr + 36, ["Connected", "Connecting", "NotConnected"].indexOf(x["ConnectionState"] as string));

        if (typeof x["Ethernet"] === "undefined") {
          A.store.Bool(ptr + 40 + 4, false);
          A.store.Ref(ptr + 40 + 0, undefined);
        } else {
          A.store.Bool(ptr + 40 + 4, true);
          A.store.Ref(ptr + 40 + 0, x["Ethernet"]["Authentication"]);
        }
        A.store.Ref(ptr + 48, x["ErrorState"]);
        A.store.Ref(ptr + 52, x["GUID"]);
        A.store.Ref(ptr + 56, x["Name"]);
        A.store.Bool(ptr + 384, "Priority" in x ? true : false);
        A.store.Int32(ptr + 60, x["Priority"] === undefined ? 0 : (x["Priority"] as number));
        A.store.Ref(ptr + 64, x["Source"]);

        if (typeof x["Tether"] === "undefined") {
          A.store.Bool(ptr + 68 + 19, false);
          A.store.Bool(ptr + 68 + 16, false);
          A.store.Int32(ptr + 68 + 0, 0);
          A.store.Ref(ptr + 68 + 4, undefined);
          A.store.Bool(ptr + 68 + 17, false);
          A.store.Bool(ptr + 68 + 8, false);
          A.store.Bool(ptr + 68 + 18, false);
          A.store.Int32(ptr + 68 + 12, 0);
        } else {
          A.store.Bool(ptr + 68 + 19, true);
          A.store.Bool(ptr + 68 + 16, "BatteryPercentage" in x["Tether"] ? true : false);
          A.store.Int32(
            ptr + 68 + 0,
            x["Tether"]["BatteryPercentage"] === undefined ? 0 : (x["Tether"]["BatteryPercentage"] as number)
          );
          A.store.Ref(ptr + 68 + 4, x["Tether"]["Carrier"]);
          A.store.Bool(ptr + 68 + 17, "HasConnectedToHost" in x["Tether"] ? true : false);
          A.store.Bool(ptr + 68 + 8, x["Tether"]["HasConnectedToHost"] ? true : false);
          A.store.Bool(ptr + 68 + 18, "SignalStrength" in x["Tether"] ? true : false);
          A.store.Int32(
            ptr + 68 + 12,
            x["Tether"]["SignalStrength"] === undefined ? 0 : (x["Tether"]["SignalStrength"] as number)
          );
        }
        A.store.Enum(
          ptr + 88,
          ["All", "Cellular", "Ethernet", "Tether", "VPN", "Wireless", "WiFi"].indexOf(x["Type"] as string)
        );

        if (typeof x["VPN"] === "undefined") {
          A.store.Bool(ptr + 92 + 253, false);
          A.store.Ref(ptr + 92 + 0, undefined);

          A.store.Bool(ptr + 92 + 4 + 236, false);
          A.store.Ref(ptr + 92 + 4 + 0, undefined);

          A.store.Bool(ptr + 92 + 4 + 4 + 49, false);
          A.store.Ref(ptr + 92 + 4 + 4 + 0, undefined);

          A.store.Bool(ptr + 92 + 4 + 4 + 4 + 16, false);
          A.store.Ref(ptr + 92 + 4 + 4 + 4 + 0, undefined);
          A.store.Ref(ptr + 92 + 4 + 4 + 4 + 4, undefined);
          A.store.Ref(ptr + 92 + 4 + 4 + 4 + 8, undefined);
          A.store.Ref(ptr + 92 + 4 + 4 + 4 + 12, undefined);
          A.store.Ref(ptr + 92 + 4 + 4 + 24, undefined);
          A.store.Ref(ptr + 92 + 4 + 4 + 28, undefined);

          A.store.Bool(ptr + 92 + 4 + 4 + 32 + 16, false);
          A.store.Ref(ptr + 92 + 4 + 4 + 32 + 0, undefined);
          A.store.Ref(ptr + 92 + 4 + 4 + 32 + 4, undefined);
          A.store.Ref(ptr + 92 + 4 + 4 + 32 + 8, undefined);
          A.store.Ref(ptr + 92 + 4 + 4 + 32 + 12, undefined);
          A.store.Ref(ptr + 92 + 4 + 56, undefined);
          A.store.Ref(ptr + 92 + 4 + 60, undefined);
          A.store.Ref(ptr + 92 + 4 + 64, undefined);
          A.store.Ref(ptr + 92 + 4 + 68, undefined);

          A.store.Bool(ptr + 92 + 4 + 72 + 113, false);
          A.store.Ref(ptr + 92 + 4 + 72 + 0, undefined);

          A.store.Bool(ptr + 92 + 4 + 72 + 4 + 49, false);
          A.store.Ref(ptr + 92 + 4 + 72 + 4 + 0, undefined);

          A.store.Bool(ptr + 92 + 4 + 72 + 4 + 4 + 16, false);
          A.store.Ref(ptr + 92 + 4 + 72 + 4 + 4 + 0, undefined);
          A.store.Ref(ptr + 92 + 4 + 72 + 4 + 4 + 4, undefined);
          A.store.Ref(ptr + 92 + 4 + 72 + 4 + 4 + 8, undefined);
          A.store.Ref(ptr + 92 + 4 + 72 + 4 + 4 + 12, undefined);
          A.store.Ref(ptr + 92 + 4 + 72 + 4 + 24, undefined);
          A.store.Ref(ptr + 92 + 4 + 72 + 4 + 28, undefined);

          A.store.Bool(ptr + 92 + 4 + 72 + 4 + 32 + 16, false);
          A.store.Ref(ptr + 92 + 4 + 72 + 4 + 32 + 0, undefined);
          A.store.Ref(ptr + 92 + 4 + 72 + 4 + 32 + 4, undefined);
          A.store.Ref(ptr + 92 + 4 + 72 + 4 + 32 + 8, undefined);
          A.store.Ref(ptr + 92 + 4 + 72 + 4 + 32 + 12, undefined);
          A.store.Ref(ptr + 92 + 4 + 72 + 56, undefined);
          A.store.Ref(ptr + 92 + 4 + 72 + 60, undefined);
          A.store.Ref(ptr + 92 + 4 + 72 + 64, undefined);
          A.store.Ref(ptr + 92 + 4 + 72 + 68, undefined);
          A.store.Ref(ptr + 92 + 4 + 72 + 72, undefined);
          A.store.Ref(ptr + 92 + 4 + 72 + 76, undefined);
          A.store.Ref(ptr + 92 + 4 + 72 + 80, undefined);
          A.store.Ref(ptr + 92 + 4 + 72 + 84, undefined);
          A.store.Bool(ptr + 92 + 4 + 72 + 110, false);
          A.store.Bool(ptr + 92 + 4 + 72 + 88, false);
          A.store.Ref(ptr + 92 + 4 + 72 + 92, undefined);
          A.store.Ref(ptr + 92 + 4 + 72 + 96, undefined);
          A.store.Ref(ptr + 92 + 4 + 72 + 100, undefined);
          A.store.Ref(ptr + 92 + 4 + 72 + 104, undefined);
          A.store.Bool(ptr + 92 + 4 + 72 + 111, false);
          A.store.Bool(ptr + 92 + 4 + 72 + 108, false);
          A.store.Bool(ptr + 92 + 4 + 72 + 112, false);
          A.store.Bool(ptr + 92 + 4 + 72 + 109, false);
          A.store.Ref(ptr + 92 + 4 + 188, undefined);
          A.store.Bool(ptr + 92 + 4 + 234, false);
          A.store.Int32(ptr + 92 + 4 + 192, 0);
          A.store.Ref(ptr + 92 + 4 + 196, undefined);
          A.store.Ref(ptr + 92 + 4 + 200, undefined);
          A.store.Ref(ptr + 92 + 4 + 204, undefined);
          A.store.Bool(ptr + 92 + 4 + 235, false);
          A.store.Bool(ptr + 92 + 4 + 208, false);
          A.store.Ref(ptr + 92 + 4 + 212, undefined);
          A.store.Ref(ptr + 92 + 4 + 216, undefined);

          A.store.Bool(ptr + 92 + 4 + 220 + 13, false);
          A.store.Ref(ptr + 92 + 4 + 220 + 0, undefined);
          A.store.Bool(ptr + 92 + 4 + 220 + 12, false);
          A.store.Bool(ptr + 92 + 4 + 220 + 4, false);
          A.store.Ref(ptr + 92 + 4 + 220 + 8, undefined);

          A.store.Bool(ptr + 92 + 244 + 8, false);
          A.store.Ref(ptr + 92 + 244 + 0, undefined);
          A.store.Ref(ptr + 92 + 244 + 4, undefined);
        } else {
          A.store.Bool(ptr + 92 + 253, true);
          A.store.Ref(ptr + 92 + 0, x["VPN"]["Type"]);

          if (typeof x["VPN"]["IPsec"] === "undefined") {
            A.store.Bool(ptr + 92 + 4 + 236, false);
            A.store.Ref(ptr + 92 + 4 + 0, undefined);

            A.store.Bool(ptr + 92 + 4 + 4 + 49, false);
            A.store.Ref(ptr + 92 + 4 + 4 + 0, undefined);

            A.store.Bool(ptr + 92 + 4 + 4 + 4 + 16, false);
            A.store.Ref(ptr + 92 + 4 + 4 + 4 + 0, undefined);
            A.store.Ref(ptr + 92 + 4 + 4 + 4 + 4, undefined);
            A.store.Ref(ptr + 92 + 4 + 4 + 4 + 8, undefined);
            A.store.Ref(ptr + 92 + 4 + 4 + 4 + 12, undefined);
            A.store.Ref(ptr + 92 + 4 + 4 + 24, undefined);
            A.store.Ref(ptr + 92 + 4 + 4 + 28, undefined);

            A.store.Bool(ptr + 92 + 4 + 4 + 32 + 16, false);
            A.store.Ref(ptr + 92 + 4 + 4 + 32 + 0, undefined);
            A.store.Ref(ptr + 92 + 4 + 4 + 32 + 4, undefined);
            A.store.Ref(ptr + 92 + 4 + 4 + 32 + 8, undefined);
            A.store.Ref(ptr + 92 + 4 + 4 + 32 + 12, undefined);
            A.store.Ref(ptr + 92 + 4 + 56, undefined);
            A.store.Ref(ptr + 92 + 4 + 60, undefined);
            A.store.Ref(ptr + 92 + 4 + 64, undefined);
            A.store.Ref(ptr + 92 + 4 + 68, undefined);

            A.store.Bool(ptr + 92 + 4 + 72 + 113, false);
            A.store.Ref(ptr + 92 + 4 + 72 + 0, undefined);

            A.store.Bool(ptr + 92 + 4 + 72 + 4 + 49, false);
            A.store.Ref(ptr + 92 + 4 + 72 + 4 + 0, undefined);

            A.store.Bool(ptr + 92 + 4 + 72 + 4 + 4 + 16, false);
            A.store.Ref(ptr + 92 + 4 + 72 + 4 + 4 + 0, undefined);
            A.store.Ref(ptr + 92 + 4 + 72 + 4 + 4 + 4, undefined);
            A.store.Ref(ptr + 92 + 4 + 72 + 4 + 4 + 8, undefined);
            A.store.Ref(ptr + 92 + 4 + 72 + 4 + 4 + 12, undefined);
            A.store.Ref(ptr + 92 + 4 + 72 + 4 + 24, undefined);
            A.store.Ref(ptr + 92 + 4 + 72 + 4 + 28, undefined);

            A.store.Bool(ptr + 92 + 4 + 72 + 4 + 32 + 16, false);
            A.store.Ref(ptr + 92 + 4 + 72 + 4 + 32 + 0, undefined);
            A.store.Ref(ptr + 92 + 4 + 72 + 4 + 32 + 4, undefined);
            A.store.Ref(ptr + 92 + 4 + 72 + 4 + 32 + 8, undefined);
            A.store.Ref(ptr + 92 + 4 + 72 + 4 + 32 + 12, undefined);
            A.store.Ref(ptr + 92 + 4 + 72 + 56, undefined);
            A.store.Ref(ptr + 92 + 4 + 72 + 60, undefined);
            A.store.Ref(ptr + 92 + 4 + 72 + 64, undefined);
            A.store.Ref(ptr + 92 + 4 + 72 + 68, undefined);
            A.store.Ref(ptr + 92 + 4 + 72 + 72, undefined);
            A.store.Ref(ptr + 92 + 4 + 72 + 76, undefined);
            A.store.Ref(ptr + 92 + 4 + 72 + 80, undefined);
            A.store.Ref(ptr + 92 + 4 + 72 + 84, undefined);
            A.store.Bool(ptr + 92 + 4 + 72 + 110, false);
            A.store.Bool(ptr + 92 + 4 + 72 + 88, false);
            A.store.Ref(ptr + 92 + 4 + 72 + 92, undefined);
            A.store.Ref(ptr + 92 + 4 + 72 + 96, undefined);
            A.store.Ref(ptr + 92 + 4 + 72 + 100, undefined);
            A.store.Ref(ptr + 92 + 4 + 72 + 104, undefined);
            A.store.Bool(ptr + 92 + 4 + 72 + 111, false);
            A.store.Bool(ptr + 92 + 4 + 72 + 108, false);
            A.store.Bool(ptr + 92 + 4 + 72 + 112, false);
            A.store.Bool(ptr + 92 + 4 + 72 + 109, false);
            A.store.Ref(ptr + 92 + 4 + 188, undefined);
            A.store.Bool(ptr + 92 + 4 + 234, false);
            A.store.Int32(ptr + 92 + 4 + 192, 0);
            A.store.Ref(ptr + 92 + 4 + 196, undefined);
            A.store.Ref(ptr + 92 + 4 + 200, undefined);
            A.store.Ref(ptr + 92 + 4 + 204, undefined);
            A.store.Bool(ptr + 92 + 4 + 235, false);
            A.store.Bool(ptr + 92 + 4 + 208, false);
            A.store.Ref(ptr + 92 + 4 + 212, undefined);
            A.store.Ref(ptr + 92 + 4 + 216, undefined);

            A.store.Bool(ptr + 92 + 4 + 220 + 13, false);
            A.store.Ref(ptr + 92 + 4 + 220 + 0, undefined);
            A.store.Bool(ptr + 92 + 4 + 220 + 12, false);
            A.store.Bool(ptr + 92 + 4 + 220 + 4, false);
            A.store.Ref(ptr + 92 + 4 + 220 + 8, undefined);
          } else {
            A.store.Bool(ptr + 92 + 4 + 236, true);
            A.store.Ref(ptr + 92 + 4 + 0, x["VPN"]["IPsec"]["AuthenticationType"]);

            if (typeof x["VPN"]["IPsec"]["ClientCertPattern"] === "undefined") {
              A.store.Bool(ptr + 92 + 4 + 4 + 49, false);
              A.store.Ref(ptr + 92 + 4 + 4 + 0, undefined);

              A.store.Bool(ptr + 92 + 4 + 4 + 4 + 16, false);
              A.store.Ref(ptr + 92 + 4 + 4 + 4 + 0, undefined);
              A.store.Ref(ptr + 92 + 4 + 4 + 4 + 4, undefined);
              A.store.Ref(ptr + 92 + 4 + 4 + 4 + 8, undefined);
              A.store.Ref(ptr + 92 + 4 + 4 + 4 + 12, undefined);
              A.store.Ref(ptr + 92 + 4 + 4 + 24, undefined);
              A.store.Ref(ptr + 92 + 4 + 4 + 28, undefined);

              A.store.Bool(ptr + 92 + 4 + 4 + 32 + 16, false);
              A.store.Ref(ptr + 92 + 4 + 4 + 32 + 0, undefined);
              A.store.Ref(ptr + 92 + 4 + 4 + 32 + 4, undefined);
              A.store.Ref(ptr + 92 + 4 + 4 + 32 + 8, undefined);
              A.store.Ref(ptr + 92 + 4 + 4 + 32 + 12, undefined);
            } else {
              A.store.Bool(ptr + 92 + 4 + 4 + 49, true);
              A.store.Ref(ptr + 92 + 4 + 4 + 0, x["VPN"]["IPsec"]["ClientCertPattern"]["EnrollmentURI"]);

              if (typeof x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"] === "undefined") {
                A.store.Bool(ptr + 92 + 4 + 4 + 4 + 16, false);
                A.store.Ref(ptr + 92 + 4 + 4 + 4 + 0, undefined);
                A.store.Ref(ptr + 92 + 4 + 4 + 4 + 4, undefined);
                A.store.Ref(ptr + 92 + 4 + 4 + 4 + 8, undefined);
                A.store.Ref(ptr + 92 + 4 + 4 + 4 + 12, undefined);
              } else {
                A.store.Bool(ptr + 92 + 4 + 4 + 4 + 16, true);
                A.store.Ref(ptr + 92 + 4 + 4 + 4 + 0, x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]);
                A.store.Ref(ptr + 92 + 4 + 4 + 4 + 4, x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]);
                A.store.Ref(ptr + 92 + 4 + 4 + 4 + 8, x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]);
                A.store.Ref(
                  ptr + 92 + 4 + 4 + 4 + 12,
                  x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]
                );
              }
              A.store.Ref(ptr + 92 + 4 + 4 + 24, x["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCAPEMs"]);
              A.store.Ref(ptr + 92 + 4 + 4 + 28, x["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCARef"]);

              if (typeof x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"] === "undefined") {
                A.store.Bool(ptr + 92 + 4 + 4 + 32 + 16, false);
                A.store.Ref(ptr + 92 + 4 + 4 + 32 + 0, undefined);
                A.store.Ref(ptr + 92 + 4 + 4 + 32 + 4, undefined);
                A.store.Ref(ptr + 92 + 4 + 4 + 32 + 8, undefined);
                A.store.Ref(ptr + 92 + 4 + 4 + 32 + 12, undefined);
              } else {
                A.store.Bool(ptr + 92 + 4 + 4 + 32 + 16, true);
                A.store.Ref(ptr + 92 + 4 + 4 + 32 + 0, x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]);
                A.store.Ref(ptr + 92 + 4 + 4 + 32 + 4, x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]);
                A.store.Ref(
                  ptr + 92 + 4 + 4 + 32 + 8,
                  x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]
                );
                A.store.Ref(
                  ptr + 92 + 4 + 4 + 32 + 12,
                  x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]
                );
              }
            }
            A.store.Ref(ptr + 92 + 4 + 56, x["VPN"]["IPsec"]["ClientCertPKCS11Id"]);
            A.store.Ref(ptr + 92 + 4 + 60, x["VPN"]["IPsec"]["ClientCertProvisioningProfileId"]);
            A.store.Ref(ptr + 92 + 4 + 64, x["VPN"]["IPsec"]["ClientCertRef"]);
            A.store.Ref(ptr + 92 + 4 + 68, x["VPN"]["IPsec"]["ClientCertType"]);

            if (typeof x["VPN"]["IPsec"]["EAP"] === "undefined") {
              A.store.Bool(ptr + 92 + 4 + 72 + 113, false);
              A.store.Ref(ptr + 92 + 4 + 72 + 0, undefined);

              A.store.Bool(ptr + 92 + 4 + 72 + 4 + 49, false);
              A.store.Ref(ptr + 92 + 4 + 72 + 4 + 0, undefined);

              A.store.Bool(ptr + 92 + 4 + 72 + 4 + 4 + 16, false);
              A.store.Ref(ptr + 92 + 4 + 72 + 4 + 4 + 0, undefined);
              A.store.Ref(ptr + 92 + 4 + 72 + 4 + 4 + 4, undefined);
              A.store.Ref(ptr + 92 + 4 + 72 + 4 + 4 + 8, undefined);
              A.store.Ref(ptr + 92 + 4 + 72 + 4 + 4 + 12, undefined);
              A.store.Ref(ptr + 92 + 4 + 72 + 4 + 24, undefined);
              A.store.Ref(ptr + 92 + 4 + 72 + 4 + 28, undefined);

              A.store.Bool(ptr + 92 + 4 + 72 + 4 + 32 + 16, false);
              A.store.Ref(ptr + 92 + 4 + 72 + 4 + 32 + 0, undefined);
              A.store.Ref(ptr + 92 + 4 + 72 + 4 + 32 + 4, undefined);
              A.store.Ref(ptr + 92 + 4 + 72 + 4 + 32 + 8, undefined);
              A.store.Ref(ptr + 92 + 4 + 72 + 4 + 32 + 12, undefined);
              A.store.Ref(ptr + 92 + 4 + 72 + 56, undefined);
              A.store.Ref(ptr + 92 + 4 + 72 + 60, undefined);
              A.store.Ref(ptr + 92 + 4 + 72 + 64, undefined);
              A.store.Ref(ptr + 92 + 4 + 72 + 68, undefined);
              A.store.Ref(ptr + 92 + 4 + 72 + 72, undefined);
              A.store.Ref(ptr + 92 + 4 + 72 + 76, undefined);
              A.store.Ref(ptr + 92 + 4 + 72 + 80, undefined);
              A.store.Ref(ptr + 92 + 4 + 72 + 84, undefined);
              A.store.Bool(ptr + 92 + 4 + 72 + 110, false);
              A.store.Bool(ptr + 92 + 4 + 72 + 88, false);
              A.store.Ref(ptr + 92 + 4 + 72 + 92, undefined);
              A.store.Ref(ptr + 92 + 4 + 72 + 96, undefined);
              A.store.Ref(ptr + 92 + 4 + 72 + 100, undefined);
              A.store.Ref(ptr + 92 + 4 + 72 + 104, undefined);
              A.store.Bool(ptr + 92 + 4 + 72 + 111, false);
              A.store.Bool(ptr + 92 + 4 + 72 + 108, false);
              A.store.Bool(ptr + 92 + 4 + 72 + 112, false);
              A.store.Bool(ptr + 92 + 4 + 72 + 109, false);
            } else {
              A.store.Bool(ptr + 92 + 4 + 72 + 113, true);
              A.store.Ref(ptr + 92 + 4 + 72 + 0, x["VPN"]["IPsec"]["EAP"]["AnonymousIdentity"]);

              if (typeof x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"] === "undefined") {
                A.store.Bool(ptr + 92 + 4 + 72 + 4 + 49, false);
                A.store.Ref(ptr + 92 + 4 + 72 + 4 + 0, undefined);

                A.store.Bool(ptr + 92 + 4 + 72 + 4 + 4 + 16, false);
                A.store.Ref(ptr + 92 + 4 + 72 + 4 + 4 + 0, undefined);
                A.store.Ref(ptr + 92 + 4 + 72 + 4 + 4 + 4, undefined);
                A.store.Ref(ptr + 92 + 4 + 72 + 4 + 4 + 8, undefined);
                A.store.Ref(ptr + 92 + 4 + 72 + 4 + 4 + 12, undefined);
                A.store.Ref(ptr + 92 + 4 + 72 + 4 + 24, undefined);
                A.store.Ref(ptr + 92 + 4 + 72 + 4 + 28, undefined);

                A.store.Bool(ptr + 92 + 4 + 72 + 4 + 32 + 16, false);
                A.store.Ref(ptr + 92 + 4 + 72 + 4 + 32 + 0, undefined);
                A.store.Ref(ptr + 92 + 4 + 72 + 4 + 32 + 4, undefined);
                A.store.Ref(ptr + 92 + 4 + 72 + 4 + 32 + 8, undefined);
                A.store.Ref(ptr + 92 + 4 + 72 + 4 + 32 + 12, undefined);
              } else {
                A.store.Bool(ptr + 92 + 4 + 72 + 4 + 49, true);
                A.store.Ref(ptr + 92 + 4 + 72 + 4 + 0, x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]);

                if (typeof x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"] === "undefined") {
                  A.store.Bool(ptr + 92 + 4 + 72 + 4 + 4 + 16, false);
                  A.store.Ref(ptr + 92 + 4 + 72 + 4 + 4 + 0, undefined);
                  A.store.Ref(ptr + 92 + 4 + 72 + 4 + 4 + 4, undefined);
                  A.store.Ref(ptr + 92 + 4 + 72 + 4 + 4 + 8, undefined);
                  A.store.Ref(ptr + 92 + 4 + 72 + 4 + 4 + 12, undefined);
                } else {
                  A.store.Bool(ptr + 92 + 4 + 72 + 4 + 4 + 16, true);
                  A.store.Ref(
                    ptr + 92 + 4 + 72 + 4 + 4 + 0,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]
                  );
                  A.store.Ref(
                    ptr + 92 + 4 + 72 + 4 + 4 + 4,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]
                  );
                  A.store.Ref(
                    ptr + 92 + 4 + 72 + 4 + 4 + 8,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]
                  );
                  A.store.Ref(
                    ptr + 92 + 4 + 72 + 4 + 4 + 12,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]
                  );
                }
                A.store.Ref(ptr + 92 + 4 + 72 + 4 + 24, x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCAPEMs"]);
                A.store.Ref(ptr + 92 + 4 + 72 + 4 + 28, x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]);

                if (typeof x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"] === "undefined") {
                  A.store.Bool(ptr + 92 + 4 + 72 + 4 + 32 + 16, false);
                  A.store.Ref(ptr + 92 + 4 + 72 + 4 + 32 + 0, undefined);
                  A.store.Ref(ptr + 92 + 4 + 72 + 4 + 32 + 4, undefined);
                  A.store.Ref(ptr + 92 + 4 + 72 + 4 + 32 + 8, undefined);
                  A.store.Ref(ptr + 92 + 4 + 72 + 4 + 32 + 12, undefined);
                } else {
                  A.store.Bool(ptr + 92 + 4 + 72 + 4 + 32 + 16, true);
                  A.store.Ref(
                    ptr + 92 + 4 + 72 + 4 + 32 + 0,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]
                  );
                  A.store.Ref(
                    ptr + 92 + 4 + 72 + 4 + 32 + 4,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]
                  );
                  A.store.Ref(
                    ptr + 92 + 4 + 72 + 4 + 32 + 8,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]
                  );
                  A.store.Ref(
                    ptr + 92 + 4 + 72 + 4 + 32 + 12,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]
                  );
                }
              }
              A.store.Ref(ptr + 92 + 4 + 72 + 56, x["VPN"]["IPsec"]["EAP"]["ClientCertPKCS11Id"]);
              A.store.Ref(ptr + 92 + 4 + 72 + 60, x["VPN"]["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]);
              A.store.Ref(ptr + 92 + 4 + 72 + 64, x["VPN"]["IPsec"]["EAP"]["ClientCertRef"]);
              A.store.Ref(ptr + 92 + 4 + 72 + 68, x["VPN"]["IPsec"]["EAP"]["ClientCertType"]);
              A.store.Ref(ptr + 92 + 4 + 72 + 72, x["VPN"]["IPsec"]["EAP"]["Identity"]);
              A.store.Ref(ptr + 92 + 4 + 72 + 76, x["VPN"]["IPsec"]["EAP"]["Inner"]);
              A.store.Ref(ptr + 92 + 4 + 72 + 80, x["VPN"]["IPsec"]["EAP"]["Outer"]);
              A.store.Ref(ptr + 92 + 4 + 72 + 84, x["VPN"]["IPsec"]["EAP"]["Password"]);
              A.store.Bool(ptr + 92 + 4 + 72 + 110, "SaveCredentials" in x["VPN"]["IPsec"]["EAP"] ? true : false);
              A.store.Bool(ptr + 92 + 4 + 72 + 88, x["VPN"]["IPsec"]["EAP"]["SaveCredentials"] ? true : false);
              A.store.Ref(ptr + 92 + 4 + 72 + 92, x["VPN"]["IPsec"]["EAP"]["ServerCAPEMs"]);
              A.store.Ref(ptr + 92 + 4 + 72 + 96, x["VPN"]["IPsec"]["EAP"]["ServerCARefs"]);
              A.store.Ref(ptr + 92 + 4 + 72 + 100, x["VPN"]["IPsec"]["EAP"]["SubjectMatch"]);
              A.store.Ref(ptr + 92 + 4 + 72 + 104, x["VPN"]["IPsec"]["EAP"]["TLSVersionMax"]);
              A.store.Bool(
                ptr + 92 + 4 + 72 + 111,
                "UseProactiveKeyCaching" in x["VPN"]["IPsec"]["EAP"] ? true : false
              );
              A.store.Bool(ptr + 92 + 4 + 72 + 108, x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"] ? true : false);
              A.store.Bool(ptr + 92 + 4 + 72 + 112, "UseSystemCAs" in x["VPN"]["IPsec"]["EAP"] ? true : false);
              A.store.Bool(ptr + 92 + 4 + 72 + 109, x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"] ? true : false);
            }
            A.store.Ref(ptr + 92 + 4 + 188, x["VPN"]["IPsec"]["Group"]);
            A.store.Bool(ptr + 92 + 4 + 234, "IKEVersion" in x["VPN"]["IPsec"] ? true : false);
            A.store.Int32(
              ptr + 92 + 4 + 192,
              x["VPN"]["IPsec"]["IKEVersion"] === undefined ? 0 : (x["VPN"]["IPsec"]["IKEVersion"] as number)
            );
            A.store.Ref(ptr + 92 + 4 + 196, x["VPN"]["IPsec"]["LocalIdentity"]);
            A.store.Ref(ptr + 92 + 4 + 200, x["VPN"]["IPsec"]["PSK"]);
            A.store.Ref(ptr + 92 + 4 + 204, x["VPN"]["IPsec"]["RemoteIdentity"]);
            A.store.Bool(ptr + 92 + 4 + 235, "SaveCredentials" in x["VPN"]["IPsec"] ? true : false);
            A.store.Bool(ptr + 92 + 4 + 208, x["VPN"]["IPsec"]["SaveCredentials"] ? true : false);
            A.store.Ref(ptr + 92 + 4 + 212, x["VPN"]["IPsec"]["ServerCAPEMs"]);
            A.store.Ref(ptr + 92 + 4 + 216, x["VPN"]["IPsec"]["ServerCARefs"]);

            if (typeof x["VPN"]["IPsec"]["XAUTH"] === "undefined") {
              A.store.Bool(ptr + 92 + 4 + 220 + 13, false);
              A.store.Ref(ptr + 92 + 4 + 220 + 0, undefined);
              A.store.Bool(ptr + 92 + 4 + 220 + 12, false);
              A.store.Bool(ptr + 92 + 4 + 220 + 4, false);
              A.store.Ref(ptr + 92 + 4 + 220 + 8, undefined);
            } else {
              A.store.Bool(ptr + 92 + 4 + 220 + 13, true);
              A.store.Ref(ptr + 92 + 4 + 220 + 0, x["VPN"]["IPsec"]["XAUTH"]["Password"]);
              A.store.Bool(ptr + 92 + 4 + 220 + 12, "SaveCredentials" in x["VPN"]["IPsec"]["XAUTH"] ? true : false);
              A.store.Bool(ptr + 92 + 4 + 220 + 4, x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"] ? true : false);
              A.store.Ref(ptr + 92 + 4 + 220 + 8, x["VPN"]["IPsec"]["XAUTH"]["Username"]);
            }
          }

          if (typeof x["VPN"]["ThirdPartyVPN"] === "undefined") {
            A.store.Bool(ptr + 92 + 244 + 8, false);
            A.store.Ref(ptr + 92 + 244 + 0, undefined);
            A.store.Ref(ptr + 92 + 244 + 4, undefined);
          } else {
            A.store.Bool(ptr + 92 + 244 + 8, true);
            A.store.Ref(ptr + 92 + 244 + 0, x["VPN"]["ThirdPartyVPN"]["ExtensionID"]);
            A.store.Ref(ptr + 92 + 244 + 4, x["VPN"]["ThirdPartyVPN"]["ProviderName"]);
          }
        }

        if (typeof x["WiFi"] === "undefined") {
          A.store.Bool(ptr + 348 + 34, false);
          A.store.Ref(ptr + 348 + 0, undefined);

          A.store.Bool(ptr + 348 + 4 + 4, false);
          A.store.Ref(ptr + 348 + 4 + 0, undefined);
          A.store.Bool(ptr + 348 + 32, false);
          A.store.Int32(ptr + 348 + 12, 0);
          A.store.Ref(ptr + 348 + 16, undefined);
          A.store.Ref(ptr + 348 + 20, undefined);
          A.store.Bool(ptr + 348 + 33, false);
          A.store.Int32(ptr + 348 + 24, 0);
          A.store.Ref(ptr + 348 + 28, undefined);
        } else {
          A.store.Bool(ptr + 348 + 34, true);
          A.store.Ref(ptr + 348 + 0, x["WiFi"]["BSSID"]);

          if (typeof x["WiFi"]["EAP"] === "undefined") {
            A.store.Bool(ptr + 348 + 4 + 4, false);
            A.store.Ref(ptr + 348 + 4 + 0, undefined);
          } else {
            A.store.Bool(ptr + 348 + 4 + 4, true);
            A.store.Ref(ptr + 348 + 4 + 0, x["WiFi"]["EAP"]["Outer"]);
          }
          A.store.Bool(ptr + 348 + 32, "Frequency" in x["WiFi"] ? true : false);
          A.store.Int32(ptr + 348 + 12, x["WiFi"]["Frequency"] === undefined ? 0 : (x["WiFi"]["Frequency"] as number));
          A.store.Ref(ptr + 348 + 16, x["WiFi"]["HexSSID"]);
          A.store.Ref(ptr + 348 + 20, x["WiFi"]["Security"]);
          A.store.Bool(ptr + 348 + 33, "SignalStrength" in x["WiFi"] ? true : false);
          A.store.Int32(
            ptr + 348 + 24,
            x["WiFi"]["SignalStrength"] === undefined ? 0 : (x["WiFi"]["SignalStrength"] as number)
          );
          A.store.Ref(ptr + 348 + 28, x["WiFi"]["SSID"]);
        }
      }
    },
    "load_NetworkStateProperties": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      if (A.load.Bool(ptr + 0 + 31)) {
        x["Cellular"] = {};
        x["Cellular"]["ActivationState"] = A.load.Enum(ptr + 0 + 0, [
          "Activated",
          "Activating",
          "NotActivated",
          "PartiallyActivated",
        ]);
        x["Cellular"]["EID"] = A.load.Ref(ptr + 0 + 4, undefined);
        x["Cellular"]["ICCID"] = A.load.Ref(ptr + 0 + 8, undefined);
        x["Cellular"]["NetworkTechnology"] = A.load.Ref(ptr + 0 + 12, undefined);
        x["Cellular"]["RoamingState"] = A.load.Ref(ptr + 0 + 16, undefined);
        if (A.load.Bool(ptr + 0 + 28)) {
          x["Cellular"]["Scanning"] = A.load.Bool(ptr + 0 + 20);
        } else {
          delete x["Cellular"]["Scanning"];
        }
        if (A.load.Bool(ptr + 0 + 29)) {
          x["Cellular"]["SIMPresent"] = A.load.Bool(ptr + 0 + 21);
        } else {
          delete x["Cellular"]["SIMPresent"];
        }
        if (A.load.Bool(ptr + 0 + 30)) {
          x["Cellular"]["SignalStrength"] = A.load.Int32(ptr + 0 + 24);
        } else {
          delete x["Cellular"]["SignalStrength"];
        }
      } else {
        delete x["Cellular"];
      }
      if (A.load.Bool(ptr + 383)) {
        x["Connectable"] = A.load.Bool(ptr + 32);
      } else {
        delete x["Connectable"];
      }
      x["ConnectionState"] = A.load.Enum(ptr + 36, ["Connected", "Connecting", "NotConnected"]);
      if (A.load.Bool(ptr + 40 + 4)) {
        x["Ethernet"] = {};
        x["Ethernet"]["Authentication"] = A.load.Ref(ptr + 40 + 0, undefined);
      } else {
        delete x["Ethernet"];
      }
      x["ErrorState"] = A.load.Ref(ptr + 48, undefined);
      x["GUID"] = A.load.Ref(ptr + 52, undefined);
      x["Name"] = A.load.Ref(ptr + 56, undefined);
      if (A.load.Bool(ptr + 384)) {
        x["Priority"] = A.load.Int32(ptr + 60);
      } else {
        delete x["Priority"];
      }
      x["Source"] = A.load.Ref(ptr + 64, undefined);
      if (A.load.Bool(ptr + 68 + 19)) {
        x["Tether"] = {};
        if (A.load.Bool(ptr + 68 + 16)) {
          x["Tether"]["BatteryPercentage"] = A.load.Int32(ptr + 68 + 0);
        } else {
          delete x["Tether"]["BatteryPercentage"];
        }
        x["Tether"]["Carrier"] = A.load.Ref(ptr + 68 + 4, undefined);
        if (A.load.Bool(ptr + 68 + 17)) {
          x["Tether"]["HasConnectedToHost"] = A.load.Bool(ptr + 68 + 8);
        } else {
          delete x["Tether"]["HasConnectedToHost"];
        }
        if (A.load.Bool(ptr + 68 + 18)) {
          x["Tether"]["SignalStrength"] = A.load.Int32(ptr + 68 + 12);
        } else {
          delete x["Tether"]["SignalStrength"];
        }
      } else {
        delete x["Tether"];
      }
      x["Type"] = A.load.Enum(ptr + 88, ["All", "Cellular", "Ethernet", "Tether", "VPN", "Wireless", "WiFi"]);
      if (A.load.Bool(ptr + 92 + 253)) {
        x["VPN"] = {};
        x["VPN"]["Type"] = A.load.Ref(ptr + 92 + 0, undefined);
        if (A.load.Bool(ptr + 92 + 4 + 236)) {
          x["VPN"]["IPsec"] = {};
          x["VPN"]["IPsec"]["AuthenticationType"] = A.load.Ref(ptr + 92 + 4 + 0, undefined);
          if (A.load.Bool(ptr + 92 + 4 + 4 + 49)) {
            x["VPN"]["IPsec"]["ClientCertPattern"] = {};
            x["VPN"]["IPsec"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(ptr + 92 + 4 + 4 + 0, undefined);
            if (A.load.Bool(ptr + 92 + 4 + 4 + 4 + 16)) {
              x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"] = {};
              x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(
                ptr + 92 + 4 + 4 + 4 + 0,
                undefined
              );
              x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(
                ptr + 92 + 4 + 4 + 4 + 4,
                undefined
              );
              x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(
                ptr + 92 + 4 + 4 + 4 + 8,
                undefined
              );
              x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(
                ptr + 92 + 4 + 4 + 4 + 12,
                undefined
              );
            } else {
              delete x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"];
            }
            x["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(ptr + 92 + 4 + 4 + 24, undefined);
            x["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(ptr + 92 + 4 + 4 + 28, undefined);
            if (A.load.Bool(ptr + 92 + 4 + 4 + 32 + 16)) {
              x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"] = {};
              x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(
                ptr + 92 + 4 + 4 + 32 + 0,
                undefined
              );
              x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(
                ptr + 92 + 4 + 4 + 32 + 4,
                undefined
              );
              x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(
                ptr + 92 + 4 + 4 + 32 + 8,
                undefined
              );
              x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(
                ptr + 92 + 4 + 4 + 32 + 12,
                undefined
              );
            } else {
              delete x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"];
            }
          } else {
            delete x["VPN"]["IPsec"]["ClientCertPattern"];
          }
          x["VPN"]["IPsec"]["ClientCertPKCS11Id"] = A.load.Ref(ptr + 92 + 4 + 56, undefined);
          x["VPN"]["IPsec"]["ClientCertProvisioningProfileId"] = A.load.Ref(ptr + 92 + 4 + 60, undefined);
          x["VPN"]["IPsec"]["ClientCertRef"] = A.load.Ref(ptr + 92 + 4 + 64, undefined);
          x["VPN"]["IPsec"]["ClientCertType"] = A.load.Ref(ptr + 92 + 4 + 68, undefined);
          if (A.load.Bool(ptr + 92 + 4 + 72 + 113)) {
            x["VPN"]["IPsec"]["EAP"] = {};
            x["VPN"]["IPsec"]["EAP"]["AnonymousIdentity"] = A.load.Ref(ptr + 92 + 4 + 72 + 0, undefined);
            if (A.load.Bool(ptr + 92 + 4 + 72 + 4 + 49)) {
              x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"] = {};
              x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(
                ptr + 92 + 4 + 72 + 4 + 0,
                undefined
              );
              if (A.load.Bool(ptr + 92 + 4 + 72 + 4 + 4 + 16)) {
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"] = {};
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(
                  ptr + 92 + 4 + 72 + 4 + 4 + 0,
                  undefined
                );
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(
                  ptr + 92 + 4 + 72 + 4 + 4 + 4,
                  undefined
                );
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(
                  ptr + 92 + 4 + 72 + 4 + 4 + 8,
                  undefined
                );
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(
                  ptr + 92 + 4 + 72 + 4 + 4 + 12,
                  undefined
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"];
              }
              x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(
                ptr + 92 + 4 + 72 + 4 + 24,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(
                ptr + 92 + 4 + 72 + 4 + 28,
                undefined
              );
              if (A.load.Bool(ptr + 92 + 4 + 72 + 4 + 32 + 16)) {
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"] = {};
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(
                  ptr + 92 + 4 + 72 + 4 + 32 + 0,
                  undefined
                );
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(
                  ptr + 92 + 4 + 72 + 4 + 32 + 4,
                  undefined
                );
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(
                  ptr + 92 + 4 + 72 + 4 + 32 + 8,
                  undefined
                );
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(
                  ptr + 92 + 4 + 72 + 4 + 32 + 12,
                  undefined
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"];
              }
            } else {
              delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"];
            }
            x["VPN"]["IPsec"]["EAP"]["ClientCertPKCS11Id"] = A.load.Ref(ptr + 92 + 4 + 72 + 56, undefined);
            x["VPN"]["IPsec"]["EAP"]["ClientCertProvisioningProfileId"] = A.load.Ref(ptr + 92 + 4 + 72 + 60, undefined);
            x["VPN"]["IPsec"]["EAP"]["ClientCertRef"] = A.load.Ref(ptr + 92 + 4 + 72 + 64, undefined);
            x["VPN"]["IPsec"]["EAP"]["ClientCertType"] = A.load.Ref(ptr + 92 + 4 + 72 + 68, undefined);
            x["VPN"]["IPsec"]["EAP"]["Identity"] = A.load.Ref(ptr + 92 + 4 + 72 + 72, undefined);
            x["VPN"]["IPsec"]["EAP"]["Inner"] = A.load.Ref(ptr + 92 + 4 + 72 + 76, undefined);
            x["VPN"]["IPsec"]["EAP"]["Outer"] = A.load.Ref(ptr + 92 + 4 + 72 + 80, undefined);
            x["VPN"]["IPsec"]["EAP"]["Password"] = A.load.Ref(ptr + 92 + 4 + 72 + 84, undefined);
            if (A.load.Bool(ptr + 92 + 4 + 72 + 110)) {
              x["VPN"]["IPsec"]["EAP"]["SaveCredentials"] = A.load.Bool(ptr + 92 + 4 + 72 + 88);
            } else {
              delete x["VPN"]["IPsec"]["EAP"]["SaveCredentials"];
            }
            x["VPN"]["IPsec"]["EAP"]["ServerCAPEMs"] = A.load.Ref(ptr + 92 + 4 + 72 + 92, undefined);
            x["VPN"]["IPsec"]["EAP"]["ServerCARefs"] = A.load.Ref(ptr + 92 + 4 + 72 + 96, undefined);
            x["VPN"]["IPsec"]["EAP"]["SubjectMatch"] = A.load.Ref(ptr + 92 + 4 + 72 + 100, undefined);
            x["VPN"]["IPsec"]["EAP"]["TLSVersionMax"] = A.load.Ref(ptr + 92 + 4 + 72 + 104, undefined);
            if (A.load.Bool(ptr + 92 + 4 + 72 + 111)) {
              x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"] = A.load.Bool(ptr + 92 + 4 + 72 + 108);
            } else {
              delete x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"];
            }
            if (A.load.Bool(ptr + 92 + 4 + 72 + 112)) {
              x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"] = A.load.Bool(ptr + 92 + 4 + 72 + 109);
            } else {
              delete x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"];
            }
          } else {
            delete x["VPN"]["IPsec"]["EAP"];
          }
          x["VPN"]["IPsec"]["Group"] = A.load.Ref(ptr + 92 + 4 + 188, undefined);
          if (A.load.Bool(ptr + 92 + 4 + 234)) {
            x["VPN"]["IPsec"]["IKEVersion"] = A.load.Int32(ptr + 92 + 4 + 192);
          } else {
            delete x["VPN"]["IPsec"]["IKEVersion"];
          }
          x["VPN"]["IPsec"]["LocalIdentity"] = A.load.Ref(ptr + 92 + 4 + 196, undefined);
          x["VPN"]["IPsec"]["PSK"] = A.load.Ref(ptr + 92 + 4 + 200, undefined);
          x["VPN"]["IPsec"]["RemoteIdentity"] = A.load.Ref(ptr + 92 + 4 + 204, undefined);
          if (A.load.Bool(ptr + 92 + 4 + 235)) {
            x["VPN"]["IPsec"]["SaveCredentials"] = A.load.Bool(ptr + 92 + 4 + 208);
          } else {
            delete x["VPN"]["IPsec"]["SaveCredentials"];
          }
          x["VPN"]["IPsec"]["ServerCAPEMs"] = A.load.Ref(ptr + 92 + 4 + 212, undefined);
          x["VPN"]["IPsec"]["ServerCARefs"] = A.load.Ref(ptr + 92 + 4 + 216, undefined);
          if (A.load.Bool(ptr + 92 + 4 + 220 + 13)) {
            x["VPN"]["IPsec"]["XAUTH"] = {};
            x["VPN"]["IPsec"]["XAUTH"]["Password"] = A.load.Ref(ptr + 92 + 4 + 220 + 0, undefined);
            if (A.load.Bool(ptr + 92 + 4 + 220 + 12)) {
              x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"] = A.load.Bool(ptr + 92 + 4 + 220 + 4);
            } else {
              delete x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"];
            }
            x["VPN"]["IPsec"]["XAUTH"]["Username"] = A.load.Ref(ptr + 92 + 4 + 220 + 8, undefined);
          } else {
            delete x["VPN"]["IPsec"]["XAUTH"];
          }
        } else {
          delete x["VPN"]["IPsec"];
        }
        if (A.load.Bool(ptr + 92 + 244 + 8)) {
          x["VPN"]["ThirdPartyVPN"] = {};
          x["VPN"]["ThirdPartyVPN"]["ExtensionID"] = A.load.Ref(ptr + 92 + 244 + 0, undefined);
          x["VPN"]["ThirdPartyVPN"]["ProviderName"] = A.load.Ref(ptr + 92 + 244 + 4, undefined);
        } else {
          delete x["VPN"]["ThirdPartyVPN"];
        }
      } else {
        delete x["VPN"];
      }
      if (A.load.Bool(ptr + 348 + 34)) {
        x["WiFi"] = {};
        x["WiFi"]["BSSID"] = A.load.Ref(ptr + 348 + 0, undefined);
        if (A.load.Bool(ptr + 348 + 4 + 4)) {
          x["WiFi"]["EAP"] = {};
          x["WiFi"]["EAP"]["Outer"] = A.load.Ref(ptr + 348 + 4 + 0, undefined);
        } else {
          delete x["WiFi"]["EAP"];
        }
        if (A.load.Bool(ptr + 348 + 32)) {
          x["WiFi"]["Frequency"] = A.load.Int32(ptr + 348 + 12);
        } else {
          delete x["WiFi"]["Frequency"];
        }
        x["WiFi"]["HexSSID"] = A.load.Ref(ptr + 348 + 16, undefined);
        x["WiFi"]["Security"] = A.load.Ref(ptr + 348 + 20, undefined);
        if (A.load.Bool(ptr + 348 + 33)) {
          x["WiFi"]["SignalStrength"] = A.load.Int32(ptr + 348 + 24);
        } else {
          delete x["WiFi"]["SignalStrength"];
        }
        x["WiFi"]["SSID"] = A.load.Ref(ptr + 348 + 28, undefined);
      } else {
        delete x["WiFi"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_ProxyLocation": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 9, false);
        A.store.Ref(ptr + 0, undefined);
        A.store.Bool(ptr + 8, false);
        A.store.Int32(ptr + 4, 0);
      } else {
        A.store.Bool(ptr + 9, true);
        A.store.Ref(ptr + 0, x["Host"]);
        A.store.Bool(ptr + 8, "Port" in x ? true : false);
        A.store.Int32(ptr + 4, x["Port"] === undefined ? 0 : (x["Port"] as number));
      }
    },
    "load_ProxyLocation": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      x["Host"] = A.load.Ref(ptr + 0, undefined);
      if (A.load.Bool(ptr + 8)) {
        x["Port"] = A.load.Int32(ptr + 4);
      } else {
        delete x["Port"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_ManualProxySettings": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 46, false);

        A.store.Bool(ptr + 0 + 9, false);
        A.store.Ref(ptr + 0 + 0, undefined);
        A.store.Bool(ptr + 0 + 8, false);
        A.store.Int32(ptr + 0 + 4, 0);

        A.store.Bool(ptr + 12 + 9, false);
        A.store.Ref(ptr + 12 + 0, undefined);
        A.store.Bool(ptr + 12 + 8, false);
        A.store.Int32(ptr + 12 + 4, 0);

        A.store.Bool(ptr + 24 + 9, false);
        A.store.Ref(ptr + 24 + 0, undefined);
        A.store.Bool(ptr + 24 + 8, false);
        A.store.Int32(ptr + 24 + 4, 0);

        A.store.Bool(ptr + 36 + 9, false);
        A.store.Ref(ptr + 36 + 0, undefined);
        A.store.Bool(ptr + 36 + 8, false);
        A.store.Int32(ptr + 36 + 4, 0);
      } else {
        A.store.Bool(ptr + 46, true);

        if (typeof x["HTTPProxy"] === "undefined") {
          A.store.Bool(ptr + 0 + 9, false);
          A.store.Ref(ptr + 0 + 0, undefined);
          A.store.Bool(ptr + 0 + 8, false);
          A.store.Int32(ptr + 0 + 4, 0);
        } else {
          A.store.Bool(ptr + 0 + 9, true);
          A.store.Ref(ptr + 0 + 0, x["HTTPProxy"]["Host"]);
          A.store.Bool(ptr + 0 + 8, "Port" in x["HTTPProxy"] ? true : false);
          A.store.Int32(ptr + 0 + 4, x["HTTPProxy"]["Port"] === undefined ? 0 : (x["HTTPProxy"]["Port"] as number));
        }

        if (typeof x["SecureHTTPProxy"] === "undefined") {
          A.store.Bool(ptr + 12 + 9, false);
          A.store.Ref(ptr + 12 + 0, undefined);
          A.store.Bool(ptr + 12 + 8, false);
          A.store.Int32(ptr + 12 + 4, 0);
        } else {
          A.store.Bool(ptr + 12 + 9, true);
          A.store.Ref(ptr + 12 + 0, x["SecureHTTPProxy"]["Host"]);
          A.store.Bool(ptr + 12 + 8, "Port" in x["SecureHTTPProxy"] ? true : false);
          A.store.Int32(
            ptr + 12 + 4,
            x["SecureHTTPProxy"]["Port"] === undefined ? 0 : (x["SecureHTTPProxy"]["Port"] as number)
          );
        }

        if (typeof x["FTPProxy"] === "undefined") {
          A.store.Bool(ptr + 24 + 9, false);
          A.store.Ref(ptr + 24 + 0, undefined);
          A.store.Bool(ptr + 24 + 8, false);
          A.store.Int32(ptr + 24 + 4, 0);
        } else {
          A.store.Bool(ptr + 24 + 9, true);
          A.store.Ref(ptr + 24 + 0, x["FTPProxy"]["Host"]);
          A.store.Bool(ptr + 24 + 8, "Port" in x["FTPProxy"] ? true : false);
          A.store.Int32(ptr + 24 + 4, x["FTPProxy"]["Port"] === undefined ? 0 : (x["FTPProxy"]["Port"] as number));
        }

        if (typeof x["SOCKS"] === "undefined") {
          A.store.Bool(ptr + 36 + 9, false);
          A.store.Ref(ptr + 36 + 0, undefined);
          A.store.Bool(ptr + 36 + 8, false);
          A.store.Int32(ptr + 36 + 4, 0);
        } else {
          A.store.Bool(ptr + 36 + 9, true);
          A.store.Ref(ptr + 36 + 0, x["SOCKS"]["Host"]);
          A.store.Bool(ptr + 36 + 8, "Port" in x["SOCKS"] ? true : false);
          A.store.Int32(ptr + 36 + 4, x["SOCKS"]["Port"] === undefined ? 0 : (x["SOCKS"]["Port"] as number));
        }
      }
    },
    "load_ManualProxySettings": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      if (A.load.Bool(ptr + 0 + 9)) {
        x["HTTPProxy"] = {};
        x["HTTPProxy"]["Host"] = A.load.Ref(ptr + 0 + 0, undefined);
        if (A.load.Bool(ptr + 0 + 8)) {
          x["HTTPProxy"]["Port"] = A.load.Int32(ptr + 0 + 4);
        } else {
          delete x["HTTPProxy"]["Port"];
        }
      } else {
        delete x["HTTPProxy"];
      }
      if (A.load.Bool(ptr + 12 + 9)) {
        x["SecureHTTPProxy"] = {};
        x["SecureHTTPProxy"]["Host"] = A.load.Ref(ptr + 12 + 0, undefined);
        if (A.load.Bool(ptr + 12 + 8)) {
          x["SecureHTTPProxy"]["Port"] = A.load.Int32(ptr + 12 + 4);
        } else {
          delete x["SecureHTTPProxy"]["Port"];
        }
      } else {
        delete x["SecureHTTPProxy"];
      }
      if (A.load.Bool(ptr + 24 + 9)) {
        x["FTPProxy"] = {};
        x["FTPProxy"]["Host"] = A.load.Ref(ptr + 24 + 0, undefined);
        if (A.load.Bool(ptr + 24 + 8)) {
          x["FTPProxy"]["Port"] = A.load.Int32(ptr + 24 + 4);
        } else {
          delete x["FTPProxy"]["Port"];
        }
      } else {
        delete x["FTPProxy"];
      }
      if (A.load.Bool(ptr + 36 + 9)) {
        x["SOCKS"] = {};
        x["SOCKS"]["Host"] = A.load.Ref(ptr + 36 + 0, undefined);
        if (A.load.Bool(ptr + 36 + 8)) {
          x["SOCKS"]["Port"] = A.load.Int32(ptr + 36 + 4);
        } else {
          delete x["SOCKS"]["Port"];
        }
      } else {
        delete x["SOCKS"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_ProxySettings": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 60, false);
        A.store.Enum(ptr + 0, -1);

        A.store.Bool(ptr + 4 + 46, false);

        A.store.Bool(ptr + 4 + 0 + 9, false);
        A.store.Ref(ptr + 4 + 0 + 0, undefined);
        A.store.Bool(ptr + 4 + 0 + 8, false);
        A.store.Int32(ptr + 4 + 0 + 4, 0);

        A.store.Bool(ptr + 4 + 12 + 9, false);
        A.store.Ref(ptr + 4 + 12 + 0, undefined);
        A.store.Bool(ptr + 4 + 12 + 8, false);
        A.store.Int32(ptr + 4 + 12 + 4, 0);

        A.store.Bool(ptr + 4 + 24 + 9, false);
        A.store.Ref(ptr + 4 + 24 + 0, undefined);
        A.store.Bool(ptr + 4 + 24 + 8, false);
        A.store.Int32(ptr + 4 + 24 + 4, 0);

        A.store.Bool(ptr + 4 + 36 + 9, false);
        A.store.Ref(ptr + 4 + 36 + 0, undefined);
        A.store.Bool(ptr + 4 + 36 + 8, false);
        A.store.Int32(ptr + 4 + 36 + 4, 0);
        A.store.Ref(ptr + 52, undefined);
        A.store.Ref(ptr + 56, undefined);
      } else {
        A.store.Bool(ptr + 60, true);
        A.store.Enum(ptr + 0, ["Direct", "Manual", "PAC", "WPAD"].indexOf(x["Type"] as string));

        if (typeof x["Manual"] === "undefined") {
          A.store.Bool(ptr + 4 + 46, false);

          A.store.Bool(ptr + 4 + 0 + 9, false);
          A.store.Ref(ptr + 4 + 0 + 0, undefined);
          A.store.Bool(ptr + 4 + 0 + 8, false);
          A.store.Int32(ptr + 4 + 0 + 4, 0);

          A.store.Bool(ptr + 4 + 12 + 9, false);
          A.store.Ref(ptr + 4 + 12 + 0, undefined);
          A.store.Bool(ptr + 4 + 12 + 8, false);
          A.store.Int32(ptr + 4 + 12 + 4, 0);

          A.store.Bool(ptr + 4 + 24 + 9, false);
          A.store.Ref(ptr + 4 + 24 + 0, undefined);
          A.store.Bool(ptr + 4 + 24 + 8, false);
          A.store.Int32(ptr + 4 + 24 + 4, 0);

          A.store.Bool(ptr + 4 + 36 + 9, false);
          A.store.Ref(ptr + 4 + 36 + 0, undefined);
          A.store.Bool(ptr + 4 + 36 + 8, false);
          A.store.Int32(ptr + 4 + 36 + 4, 0);
        } else {
          A.store.Bool(ptr + 4 + 46, true);

          if (typeof x["Manual"]["HTTPProxy"] === "undefined") {
            A.store.Bool(ptr + 4 + 0 + 9, false);
            A.store.Ref(ptr + 4 + 0 + 0, undefined);
            A.store.Bool(ptr + 4 + 0 + 8, false);
            A.store.Int32(ptr + 4 + 0 + 4, 0);
          } else {
            A.store.Bool(ptr + 4 + 0 + 9, true);
            A.store.Ref(ptr + 4 + 0 + 0, x["Manual"]["HTTPProxy"]["Host"]);
            A.store.Bool(ptr + 4 + 0 + 8, "Port" in x["Manual"]["HTTPProxy"] ? true : false);
            A.store.Int32(
              ptr + 4 + 0 + 4,
              x["Manual"]["HTTPProxy"]["Port"] === undefined ? 0 : (x["Manual"]["HTTPProxy"]["Port"] as number)
            );
          }

          if (typeof x["Manual"]["SecureHTTPProxy"] === "undefined") {
            A.store.Bool(ptr + 4 + 12 + 9, false);
            A.store.Ref(ptr + 4 + 12 + 0, undefined);
            A.store.Bool(ptr + 4 + 12 + 8, false);
            A.store.Int32(ptr + 4 + 12 + 4, 0);
          } else {
            A.store.Bool(ptr + 4 + 12 + 9, true);
            A.store.Ref(ptr + 4 + 12 + 0, x["Manual"]["SecureHTTPProxy"]["Host"]);
            A.store.Bool(ptr + 4 + 12 + 8, "Port" in x["Manual"]["SecureHTTPProxy"] ? true : false);
            A.store.Int32(
              ptr + 4 + 12 + 4,
              x["Manual"]["SecureHTTPProxy"]["Port"] === undefined
                ? 0
                : (x["Manual"]["SecureHTTPProxy"]["Port"] as number)
            );
          }

          if (typeof x["Manual"]["FTPProxy"] === "undefined") {
            A.store.Bool(ptr + 4 + 24 + 9, false);
            A.store.Ref(ptr + 4 + 24 + 0, undefined);
            A.store.Bool(ptr + 4 + 24 + 8, false);
            A.store.Int32(ptr + 4 + 24 + 4, 0);
          } else {
            A.store.Bool(ptr + 4 + 24 + 9, true);
            A.store.Ref(ptr + 4 + 24 + 0, x["Manual"]["FTPProxy"]["Host"]);
            A.store.Bool(ptr + 4 + 24 + 8, "Port" in x["Manual"]["FTPProxy"] ? true : false);
            A.store.Int32(
              ptr + 4 + 24 + 4,
              x["Manual"]["FTPProxy"]["Port"] === undefined ? 0 : (x["Manual"]["FTPProxy"]["Port"] as number)
            );
          }

          if (typeof x["Manual"]["SOCKS"] === "undefined") {
            A.store.Bool(ptr + 4 + 36 + 9, false);
            A.store.Ref(ptr + 4 + 36 + 0, undefined);
            A.store.Bool(ptr + 4 + 36 + 8, false);
            A.store.Int32(ptr + 4 + 36 + 4, 0);
          } else {
            A.store.Bool(ptr + 4 + 36 + 9, true);
            A.store.Ref(ptr + 4 + 36 + 0, x["Manual"]["SOCKS"]["Host"]);
            A.store.Bool(ptr + 4 + 36 + 8, "Port" in x["Manual"]["SOCKS"] ? true : false);
            A.store.Int32(
              ptr + 4 + 36 + 4,
              x["Manual"]["SOCKS"]["Port"] === undefined ? 0 : (x["Manual"]["SOCKS"]["Port"] as number)
            );
          }
        }
        A.store.Ref(ptr + 52, x["ExcludeDomains"]);
        A.store.Ref(ptr + 56, x["PAC"]);
      }
    },
    "load_ProxySettings": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      x["Type"] = A.load.Enum(ptr + 0, ["Direct", "Manual", "PAC", "WPAD"]);
      if (A.load.Bool(ptr + 4 + 46)) {
        x["Manual"] = {};
        if (A.load.Bool(ptr + 4 + 0 + 9)) {
          x["Manual"]["HTTPProxy"] = {};
          x["Manual"]["HTTPProxy"]["Host"] = A.load.Ref(ptr + 4 + 0 + 0, undefined);
          if (A.load.Bool(ptr + 4 + 0 + 8)) {
            x["Manual"]["HTTPProxy"]["Port"] = A.load.Int32(ptr + 4 + 0 + 4);
          } else {
            delete x["Manual"]["HTTPProxy"]["Port"];
          }
        } else {
          delete x["Manual"]["HTTPProxy"];
        }
        if (A.load.Bool(ptr + 4 + 12 + 9)) {
          x["Manual"]["SecureHTTPProxy"] = {};
          x["Manual"]["SecureHTTPProxy"]["Host"] = A.load.Ref(ptr + 4 + 12 + 0, undefined);
          if (A.load.Bool(ptr + 4 + 12 + 8)) {
            x["Manual"]["SecureHTTPProxy"]["Port"] = A.load.Int32(ptr + 4 + 12 + 4);
          } else {
            delete x["Manual"]["SecureHTTPProxy"]["Port"];
          }
        } else {
          delete x["Manual"]["SecureHTTPProxy"];
        }
        if (A.load.Bool(ptr + 4 + 24 + 9)) {
          x["Manual"]["FTPProxy"] = {};
          x["Manual"]["FTPProxy"]["Host"] = A.load.Ref(ptr + 4 + 24 + 0, undefined);
          if (A.load.Bool(ptr + 4 + 24 + 8)) {
            x["Manual"]["FTPProxy"]["Port"] = A.load.Int32(ptr + 4 + 24 + 4);
          } else {
            delete x["Manual"]["FTPProxy"]["Port"];
          }
        } else {
          delete x["Manual"]["FTPProxy"];
        }
        if (A.load.Bool(ptr + 4 + 36 + 9)) {
          x["Manual"]["SOCKS"] = {};
          x["Manual"]["SOCKS"]["Host"] = A.load.Ref(ptr + 4 + 36 + 0, undefined);
          if (A.load.Bool(ptr + 4 + 36 + 8)) {
            x["Manual"]["SOCKS"]["Port"] = A.load.Int32(ptr + 4 + 36 + 4);
          } else {
            delete x["Manual"]["SOCKS"]["Port"];
          }
        } else {
          delete x["Manual"]["SOCKS"];
        }
      } else {
        delete x["Manual"];
      }
      x["ExcludeDomains"] = A.load.Ref(ptr + 52, undefined);
      x["PAC"] = A.load.Ref(ptr + 56, undefined);
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_L2TPProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 18, false);
        A.store.Bool(ptr + 16, false);
        A.store.Bool(ptr + 0, false);
        A.store.Ref(ptr + 4, undefined);
        A.store.Bool(ptr + 17, false);
        A.store.Bool(ptr + 8, false);
        A.store.Ref(ptr + 12, undefined);
      } else {
        A.store.Bool(ptr + 18, true);
        A.store.Bool(ptr + 16, "LcpEchoDisabled" in x ? true : false);
        A.store.Bool(ptr + 0, x["LcpEchoDisabled"] ? true : false);
        A.store.Ref(ptr + 4, x["Password"]);
        A.store.Bool(ptr + 17, "SaveCredentials" in x ? true : false);
        A.store.Bool(ptr + 8, x["SaveCredentials"] ? true : false);
        A.store.Ref(ptr + 12, x["Username"]);
      }
    },
    "load_L2TPProperties": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      if (A.load.Bool(ptr + 16)) {
        x["LcpEchoDisabled"] = A.load.Bool(ptr + 0);
      } else {
        delete x["LcpEchoDisabled"];
      }
      x["Password"] = A.load.Ref(ptr + 4, undefined);
      if (A.load.Bool(ptr + 17)) {
        x["SaveCredentials"] = A.load.Bool(ptr + 8);
      } else {
        delete x["SaveCredentials"];
      }
      x["Username"] = A.load.Ref(ptr + 12, undefined);
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_VerifyX509": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 8, false);
        A.store.Ref(ptr + 0, undefined);
        A.store.Ref(ptr + 4, undefined);
      } else {
        A.store.Bool(ptr + 8, true);
        A.store.Ref(ptr + 0, x["Name"]);
        A.store.Ref(ptr + 4, x["Type"]);
      }
    },
    "load_VerifyX509": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      x["Name"] = A.load.Ref(ptr + 0, undefined);
      x["Type"] = A.load.Ref(ptr + 4, undefined);
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_OpenVPNProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 218, false);
        A.store.Ref(ptr + 0, undefined);
        A.store.Ref(ptr + 4, undefined);
        A.store.Bool(ptr + 209, false);
        A.store.Bool(ptr + 8, false);
        A.store.Ref(ptr + 12, undefined);
        A.store.Ref(ptr + 16, undefined);

        A.store.Bool(ptr + 20 + 49, false);
        A.store.Ref(ptr + 20 + 0, undefined);

        A.store.Bool(ptr + 20 + 4 + 16, false);
        A.store.Ref(ptr + 20 + 4 + 0, undefined);
        A.store.Ref(ptr + 20 + 4 + 4, undefined);
        A.store.Ref(ptr + 20 + 4 + 8, undefined);
        A.store.Ref(ptr + 20 + 4 + 12, undefined);
        A.store.Ref(ptr + 20 + 24, undefined);
        A.store.Ref(ptr + 20 + 28, undefined);

        A.store.Bool(ptr + 20 + 32 + 16, false);
        A.store.Ref(ptr + 20 + 32 + 0, undefined);
        A.store.Ref(ptr + 20 + 32 + 4, undefined);
        A.store.Ref(ptr + 20 + 32 + 8, undefined);
        A.store.Ref(ptr + 20 + 32 + 12, undefined);
        A.store.Ref(ptr + 72, undefined);
        A.store.Ref(ptr + 76, undefined);
        A.store.Ref(ptr + 80, undefined);
        A.store.Ref(ptr + 84, undefined);
        A.store.Bool(ptr + 210, false);
        A.store.Bool(ptr + 88, false);
        A.store.Ref(ptr + 92, undefined);
        A.store.Bool(ptr + 211, false);
        A.store.Bool(ptr + 96, false);
        A.store.Ref(ptr + 100, undefined);
        A.store.Ref(ptr + 104, undefined);
        A.store.Ref(ptr + 108, undefined);
        A.store.Ref(ptr + 112, undefined);
        A.store.Bool(ptr + 212, false);
        A.store.Int32(ptr + 116, 0);
        A.store.Ref(ptr + 120, undefined);
        A.store.Bool(ptr + 213, false);
        A.store.Bool(ptr + 124, false);
        A.store.Ref(ptr + 128, undefined);
        A.store.Ref(ptr + 132, undefined);
        A.store.Ref(ptr + 136, undefined);
        A.store.Bool(ptr + 214, false);
        A.store.Int32(ptr + 140, 0);
        A.store.Bool(ptr + 215, false);
        A.store.Bool(ptr + 144, false);
        A.store.Ref(ptr + 148, undefined);
        A.store.Ref(ptr + 152, undefined);
        A.store.Ref(ptr + 156, undefined);
        A.store.Bool(ptr + 216, false);
        A.store.Int32(ptr + 160, 0);
        A.store.Bool(ptr + 217, false);
        A.store.Int32(ptr + 164, 0);
        A.store.Ref(ptr + 168, undefined);
        A.store.Ref(ptr + 172, undefined);
        A.store.Ref(ptr + 176, undefined);
        A.store.Ref(ptr + 180, undefined);
        A.store.Ref(ptr + 184, undefined);
        A.store.Ref(ptr + 188, undefined);
        A.store.Ref(ptr + 192, undefined);
        A.store.Ref(ptr + 196, undefined);

        A.store.Bool(ptr + 200 + 8, false);
        A.store.Ref(ptr + 200 + 0, undefined);
        A.store.Ref(ptr + 200 + 4, undefined);
      } else {
        A.store.Bool(ptr + 218, true);
        A.store.Ref(ptr + 0, x["Auth"]);
        A.store.Ref(ptr + 4, x["AuthRetry"]);
        A.store.Bool(ptr + 209, "AuthNoCache" in x ? true : false);
        A.store.Bool(ptr + 8, x["AuthNoCache"] ? true : false);
        A.store.Ref(ptr + 12, x["Cipher"]);
        A.store.Ref(ptr + 16, x["ClientCertPKCS11Id"]);

        if (typeof x["ClientCertPattern"] === "undefined") {
          A.store.Bool(ptr + 20 + 49, false);
          A.store.Ref(ptr + 20 + 0, undefined);

          A.store.Bool(ptr + 20 + 4 + 16, false);
          A.store.Ref(ptr + 20 + 4 + 0, undefined);
          A.store.Ref(ptr + 20 + 4 + 4, undefined);
          A.store.Ref(ptr + 20 + 4 + 8, undefined);
          A.store.Ref(ptr + 20 + 4 + 12, undefined);
          A.store.Ref(ptr + 20 + 24, undefined);
          A.store.Ref(ptr + 20 + 28, undefined);

          A.store.Bool(ptr + 20 + 32 + 16, false);
          A.store.Ref(ptr + 20 + 32 + 0, undefined);
          A.store.Ref(ptr + 20 + 32 + 4, undefined);
          A.store.Ref(ptr + 20 + 32 + 8, undefined);
          A.store.Ref(ptr + 20 + 32 + 12, undefined);
        } else {
          A.store.Bool(ptr + 20 + 49, true);
          A.store.Ref(ptr + 20 + 0, x["ClientCertPattern"]["EnrollmentURI"]);

          if (typeof x["ClientCertPattern"]["Issuer"] === "undefined") {
            A.store.Bool(ptr + 20 + 4 + 16, false);
            A.store.Ref(ptr + 20 + 4 + 0, undefined);
            A.store.Ref(ptr + 20 + 4 + 4, undefined);
            A.store.Ref(ptr + 20 + 4 + 8, undefined);
            A.store.Ref(ptr + 20 + 4 + 12, undefined);
          } else {
            A.store.Bool(ptr + 20 + 4 + 16, true);
            A.store.Ref(ptr + 20 + 4 + 0, x["ClientCertPattern"]["Issuer"]["CommonName"]);
            A.store.Ref(ptr + 20 + 4 + 4, x["ClientCertPattern"]["Issuer"]["Locality"]);
            A.store.Ref(ptr + 20 + 4 + 8, x["ClientCertPattern"]["Issuer"]["Organization"]);
            A.store.Ref(ptr + 20 + 4 + 12, x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]);
          }
          A.store.Ref(ptr + 20 + 24, x["ClientCertPattern"]["IssuerCAPEMs"]);
          A.store.Ref(ptr + 20 + 28, x["ClientCertPattern"]["IssuerCARef"]);

          if (typeof x["ClientCertPattern"]["Subject"] === "undefined") {
            A.store.Bool(ptr + 20 + 32 + 16, false);
            A.store.Ref(ptr + 20 + 32 + 0, undefined);
            A.store.Ref(ptr + 20 + 32 + 4, undefined);
            A.store.Ref(ptr + 20 + 32 + 8, undefined);
            A.store.Ref(ptr + 20 + 32 + 12, undefined);
          } else {
            A.store.Bool(ptr + 20 + 32 + 16, true);
            A.store.Ref(ptr + 20 + 32 + 0, x["ClientCertPattern"]["Subject"]["CommonName"]);
            A.store.Ref(ptr + 20 + 32 + 4, x["ClientCertPattern"]["Subject"]["Locality"]);
            A.store.Ref(ptr + 20 + 32 + 8, x["ClientCertPattern"]["Subject"]["Organization"]);
            A.store.Ref(ptr + 20 + 32 + 12, x["ClientCertPattern"]["Subject"]["OrganizationalUnit"]);
          }
        }
        A.store.Ref(ptr + 72, x["ClientCertProvisioningProfileId"]);
        A.store.Ref(ptr + 76, x["ClientCertRef"]);
        A.store.Ref(ptr + 80, x["ClientCertType"]);
        A.store.Ref(ptr + 84, x["CompLZO"]);
        A.store.Bool(ptr + 210, "CompNoAdapt" in x ? true : false);
        A.store.Bool(ptr + 88, x["CompNoAdapt"] ? true : false);
        A.store.Ref(ptr + 92, x["ExtraHosts"]);
        A.store.Bool(ptr + 211, "IgnoreDefaultRoute" in x ? true : false);
        A.store.Bool(ptr + 96, x["IgnoreDefaultRoute"] ? true : false);
        A.store.Ref(ptr + 100, x["KeyDirection"]);
        A.store.Ref(ptr + 104, x["NsCertType"]);
        A.store.Ref(ptr + 108, x["OTP"]);
        A.store.Ref(ptr + 112, x["Password"]);
        A.store.Bool(ptr + 212, "Port" in x ? true : false);
        A.store.Int32(ptr + 116, x["Port"] === undefined ? 0 : (x["Port"] as number));
        A.store.Ref(ptr + 120, x["Proto"]);
        A.store.Bool(ptr + 213, "PushPeerInfo" in x ? true : false);
        A.store.Bool(ptr + 124, x["PushPeerInfo"] ? true : false);
        A.store.Ref(ptr + 128, x["RemoteCertEKU"]);
        A.store.Ref(ptr + 132, x["RemoteCertKU"]);
        A.store.Ref(ptr + 136, x["RemoteCertTLS"]);
        A.store.Bool(ptr + 214, "RenegSec" in x ? true : false);
        A.store.Int32(ptr + 140, x["RenegSec"] === undefined ? 0 : (x["RenegSec"] as number));
        A.store.Bool(ptr + 215, "SaveCredentials" in x ? true : false);
        A.store.Bool(ptr + 144, x["SaveCredentials"] ? true : false);
        A.store.Ref(ptr + 148, x["ServerCAPEMs"]);
        A.store.Ref(ptr + 152, x["ServerCARefs"]);
        A.store.Ref(ptr + 156, x["ServerCertRef"]);
        A.store.Bool(ptr + 216, "ServerPollTimeout" in x ? true : false);
        A.store.Int32(ptr + 160, x["ServerPollTimeout"] === undefined ? 0 : (x["ServerPollTimeout"] as number));
        A.store.Bool(ptr + 217, "Shaper" in x ? true : false);
        A.store.Int32(ptr + 164, x["Shaper"] === undefined ? 0 : (x["Shaper"] as number));
        A.store.Ref(ptr + 168, x["StaticChallenge"]);
        A.store.Ref(ptr + 172, x["TLSAuthContents"]);
        A.store.Ref(ptr + 176, x["TLSRemote"]);
        A.store.Ref(ptr + 180, x["TLSVersionMin"]);
        A.store.Ref(ptr + 184, x["UserAuthenticationType"]);
        A.store.Ref(ptr + 188, x["Username"]);
        A.store.Ref(ptr + 192, x["Verb"]);
        A.store.Ref(ptr + 196, x["VerifyHash"]);

        if (typeof x["VerifyX509"] === "undefined") {
          A.store.Bool(ptr + 200 + 8, false);
          A.store.Ref(ptr + 200 + 0, undefined);
          A.store.Ref(ptr + 200 + 4, undefined);
        } else {
          A.store.Bool(ptr + 200 + 8, true);
          A.store.Ref(ptr + 200 + 0, x["VerifyX509"]["Name"]);
          A.store.Ref(ptr + 200 + 4, x["VerifyX509"]["Type"]);
        }
      }
    },
    "load_OpenVPNProperties": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      x["Auth"] = A.load.Ref(ptr + 0, undefined);
      x["AuthRetry"] = A.load.Ref(ptr + 4, undefined);
      if (A.load.Bool(ptr + 209)) {
        x["AuthNoCache"] = A.load.Bool(ptr + 8);
      } else {
        delete x["AuthNoCache"];
      }
      x["Cipher"] = A.load.Ref(ptr + 12, undefined);
      x["ClientCertPKCS11Id"] = A.load.Ref(ptr + 16, undefined);
      if (A.load.Bool(ptr + 20 + 49)) {
        x["ClientCertPattern"] = {};
        x["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(ptr + 20 + 0, undefined);
        if (A.load.Bool(ptr + 20 + 4 + 16)) {
          x["ClientCertPattern"]["Issuer"] = {};
          x["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(ptr + 20 + 4 + 0, undefined);
          x["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(ptr + 20 + 4 + 4, undefined);
          x["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(ptr + 20 + 4 + 8, undefined);
          x["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(ptr + 20 + 4 + 12, undefined);
        } else {
          delete x["ClientCertPattern"]["Issuer"];
        }
        x["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(ptr + 20 + 24, undefined);
        x["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(ptr + 20 + 28, undefined);
        if (A.load.Bool(ptr + 20 + 32 + 16)) {
          x["ClientCertPattern"]["Subject"] = {};
          x["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(ptr + 20 + 32 + 0, undefined);
          x["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(ptr + 20 + 32 + 4, undefined);
          x["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(ptr + 20 + 32 + 8, undefined);
          x["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(ptr + 20 + 32 + 12, undefined);
        } else {
          delete x["ClientCertPattern"]["Subject"];
        }
      } else {
        delete x["ClientCertPattern"];
      }
      x["ClientCertProvisioningProfileId"] = A.load.Ref(ptr + 72, undefined);
      x["ClientCertRef"] = A.load.Ref(ptr + 76, undefined);
      x["ClientCertType"] = A.load.Ref(ptr + 80, undefined);
      x["CompLZO"] = A.load.Ref(ptr + 84, undefined);
      if (A.load.Bool(ptr + 210)) {
        x["CompNoAdapt"] = A.load.Bool(ptr + 88);
      } else {
        delete x["CompNoAdapt"];
      }
      x["ExtraHosts"] = A.load.Ref(ptr + 92, undefined);
      if (A.load.Bool(ptr + 211)) {
        x["IgnoreDefaultRoute"] = A.load.Bool(ptr + 96);
      } else {
        delete x["IgnoreDefaultRoute"];
      }
      x["KeyDirection"] = A.load.Ref(ptr + 100, undefined);
      x["NsCertType"] = A.load.Ref(ptr + 104, undefined);
      x["OTP"] = A.load.Ref(ptr + 108, undefined);
      x["Password"] = A.load.Ref(ptr + 112, undefined);
      if (A.load.Bool(ptr + 212)) {
        x["Port"] = A.load.Int32(ptr + 116);
      } else {
        delete x["Port"];
      }
      x["Proto"] = A.load.Ref(ptr + 120, undefined);
      if (A.load.Bool(ptr + 213)) {
        x["PushPeerInfo"] = A.load.Bool(ptr + 124);
      } else {
        delete x["PushPeerInfo"];
      }
      x["RemoteCertEKU"] = A.load.Ref(ptr + 128, undefined);
      x["RemoteCertKU"] = A.load.Ref(ptr + 132, undefined);
      x["RemoteCertTLS"] = A.load.Ref(ptr + 136, undefined);
      if (A.load.Bool(ptr + 214)) {
        x["RenegSec"] = A.load.Int32(ptr + 140);
      } else {
        delete x["RenegSec"];
      }
      if (A.load.Bool(ptr + 215)) {
        x["SaveCredentials"] = A.load.Bool(ptr + 144);
      } else {
        delete x["SaveCredentials"];
      }
      x["ServerCAPEMs"] = A.load.Ref(ptr + 148, undefined);
      x["ServerCARefs"] = A.load.Ref(ptr + 152, undefined);
      x["ServerCertRef"] = A.load.Ref(ptr + 156, undefined);
      if (A.load.Bool(ptr + 216)) {
        x["ServerPollTimeout"] = A.load.Int32(ptr + 160);
      } else {
        delete x["ServerPollTimeout"];
      }
      if (A.load.Bool(ptr + 217)) {
        x["Shaper"] = A.load.Int32(ptr + 164);
      } else {
        delete x["Shaper"];
      }
      x["StaticChallenge"] = A.load.Ref(ptr + 168, undefined);
      x["TLSAuthContents"] = A.load.Ref(ptr + 172, undefined);
      x["TLSRemote"] = A.load.Ref(ptr + 176, undefined);
      x["TLSVersionMin"] = A.load.Ref(ptr + 180, undefined);
      x["UserAuthenticationType"] = A.load.Ref(ptr + 184, undefined);
      x["Username"] = A.load.Ref(ptr + 188, undefined);
      x["Verb"] = A.load.Ref(ptr + 192, undefined);
      x["VerifyHash"] = A.load.Ref(ptr + 196, undefined);
      if (A.load.Bool(ptr + 200 + 8)) {
        x["VerifyX509"] = {};
        x["VerifyX509"]["Name"] = A.load.Ref(ptr + 200 + 0, undefined);
        x["VerifyX509"]["Type"] = A.load.Ref(ptr + 200 + 4, undefined);
      } else {
        delete x["VerifyX509"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_VPNProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 505, false);
        A.store.Bool(ptr + 504, false);
        A.store.Bool(ptr + 0, false);
        A.store.Ref(ptr + 4, undefined);

        A.store.Bool(ptr + 8 + 236, false);
        A.store.Ref(ptr + 8 + 0, undefined);

        A.store.Bool(ptr + 8 + 4 + 49, false);
        A.store.Ref(ptr + 8 + 4 + 0, undefined);

        A.store.Bool(ptr + 8 + 4 + 4 + 16, false);
        A.store.Ref(ptr + 8 + 4 + 4 + 0, undefined);
        A.store.Ref(ptr + 8 + 4 + 4 + 4, undefined);
        A.store.Ref(ptr + 8 + 4 + 4 + 8, undefined);
        A.store.Ref(ptr + 8 + 4 + 4 + 12, undefined);
        A.store.Ref(ptr + 8 + 4 + 24, undefined);
        A.store.Ref(ptr + 8 + 4 + 28, undefined);

        A.store.Bool(ptr + 8 + 4 + 32 + 16, false);
        A.store.Ref(ptr + 8 + 4 + 32 + 0, undefined);
        A.store.Ref(ptr + 8 + 4 + 32 + 4, undefined);
        A.store.Ref(ptr + 8 + 4 + 32 + 8, undefined);
        A.store.Ref(ptr + 8 + 4 + 32 + 12, undefined);
        A.store.Ref(ptr + 8 + 56, undefined);
        A.store.Ref(ptr + 8 + 60, undefined);
        A.store.Ref(ptr + 8 + 64, undefined);
        A.store.Ref(ptr + 8 + 68, undefined);

        A.store.Bool(ptr + 8 + 72 + 113, false);
        A.store.Ref(ptr + 8 + 72 + 0, undefined);

        A.store.Bool(ptr + 8 + 72 + 4 + 49, false);
        A.store.Ref(ptr + 8 + 72 + 4 + 0, undefined);

        A.store.Bool(ptr + 8 + 72 + 4 + 4 + 16, false);
        A.store.Ref(ptr + 8 + 72 + 4 + 4 + 0, undefined);
        A.store.Ref(ptr + 8 + 72 + 4 + 4 + 4, undefined);
        A.store.Ref(ptr + 8 + 72 + 4 + 4 + 8, undefined);
        A.store.Ref(ptr + 8 + 72 + 4 + 4 + 12, undefined);
        A.store.Ref(ptr + 8 + 72 + 4 + 24, undefined);
        A.store.Ref(ptr + 8 + 72 + 4 + 28, undefined);

        A.store.Bool(ptr + 8 + 72 + 4 + 32 + 16, false);
        A.store.Ref(ptr + 8 + 72 + 4 + 32 + 0, undefined);
        A.store.Ref(ptr + 8 + 72 + 4 + 32 + 4, undefined);
        A.store.Ref(ptr + 8 + 72 + 4 + 32 + 8, undefined);
        A.store.Ref(ptr + 8 + 72 + 4 + 32 + 12, undefined);
        A.store.Ref(ptr + 8 + 72 + 56, undefined);
        A.store.Ref(ptr + 8 + 72 + 60, undefined);
        A.store.Ref(ptr + 8 + 72 + 64, undefined);
        A.store.Ref(ptr + 8 + 72 + 68, undefined);
        A.store.Ref(ptr + 8 + 72 + 72, undefined);
        A.store.Ref(ptr + 8 + 72 + 76, undefined);
        A.store.Ref(ptr + 8 + 72 + 80, undefined);
        A.store.Ref(ptr + 8 + 72 + 84, undefined);
        A.store.Bool(ptr + 8 + 72 + 110, false);
        A.store.Bool(ptr + 8 + 72 + 88, false);
        A.store.Ref(ptr + 8 + 72 + 92, undefined);
        A.store.Ref(ptr + 8 + 72 + 96, undefined);
        A.store.Ref(ptr + 8 + 72 + 100, undefined);
        A.store.Ref(ptr + 8 + 72 + 104, undefined);
        A.store.Bool(ptr + 8 + 72 + 111, false);
        A.store.Bool(ptr + 8 + 72 + 108, false);
        A.store.Bool(ptr + 8 + 72 + 112, false);
        A.store.Bool(ptr + 8 + 72 + 109, false);
        A.store.Ref(ptr + 8 + 188, undefined);
        A.store.Bool(ptr + 8 + 234, false);
        A.store.Int32(ptr + 8 + 192, 0);
        A.store.Ref(ptr + 8 + 196, undefined);
        A.store.Ref(ptr + 8 + 200, undefined);
        A.store.Ref(ptr + 8 + 204, undefined);
        A.store.Bool(ptr + 8 + 235, false);
        A.store.Bool(ptr + 8 + 208, false);
        A.store.Ref(ptr + 8 + 212, undefined);
        A.store.Ref(ptr + 8 + 216, undefined);

        A.store.Bool(ptr + 8 + 220 + 13, false);
        A.store.Ref(ptr + 8 + 220 + 0, undefined);
        A.store.Bool(ptr + 8 + 220 + 12, false);
        A.store.Bool(ptr + 8 + 220 + 4, false);
        A.store.Ref(ptr + 8 + 220 + 8, undefined);

        A.store.Bool(ptr + 248 + 18, false);
        A.store.Bool(ptr + 248 + 16, false);
        A.store.Bool(ptr + 248 + 0, false);
        A.store.Ref(ptr + 248 + 4, undefined);
        A.store.Bool(ptr + 248 + 17, false);
        A.store.Bool(ptr + 248 + 8, false);
        A.store.Ref(ptr + 248 + 12, undefined);

        A.store.Bool(ptr + 268 + 218, false);
        A.store.Ref(ptr + 268 + 0, undefined);
        A.store.Ref(ptr + 268 + 4, undefined);
        A.store.Bool(ptr + 268 + 209, false);
        A.store.Bool(ptr + 268 + 8, false);
        A.store.Ref(ptr + 268 + 12, undefined);
        A.store.Ref(ptr + 268 + 16, undefined);

        A.store.Bool(ptr + 268 + 20 + 49, false);
        A.store.Ref(ptr + 268 + 20 + 0, undefined);

        A.store.Bool(ptr + 268 + 20 + 4 + 16, false);
        A.store.Ref(ptr + 268 + 20 + 4 + 0, undefined);
        A.store.Ref(ptr + 268 + 20 + 4 + 4, undefined);
        A.store.Ref(ptr + 268 + 20 + 4 + 8, undefined);
        A.store.Ref(ptr + 268 + 20 + 4 + 12, undefined);
        A.store.Ref(ptr + 268 + 20 + 24, undefined);
        A.store.Ref(ptr + 268 + 20 + 28, undefined);

        A.store.Bool(ptr + 268 + 20 + 32 + 16, false);
        A.store.Ref(ptr + 268 + 20 + 32 + 0, undefined);
        A.store.Ref(ptr + 268 + 20 + 32 + 4, undefined);
        A.store.Ref(ptr + 268 + 20 + 32 + 8, undefined);
        A.store.Ref(ptr + 268 + 20 + 32 + 12, undefined);
        A.store.Ref(ptr + 268 + 72, undefined);
        A.store.Ref(ptr + 268 + 76, undefined);
        A.store.Ref(ptr + 268 + 80, undefined);
        A.store.Ref(ptr + 268 + 84, undefined);
        A.store.Bool(ptr + 268 + 210, false);
        A.store.Bool(ptr + 268 + 88, false);
        A.store.Ref(ptr + 268 + 92, undefined);
        A.store.Bool(ptr + 268 + 211, false);
        A.store.Bool(ptr + 268 + 96, false);
        A.store.Ref(ptr + 268 + 100, undefined);
        A.store.Ref(ptr + 268 + 104, undefined);
        A.store.Ref(ptr + 268 + 108, undefined);
        A.store.Ref(ptr + 268 + 112, undefined);
        A.store.Bool(ptr + 268 + 212, false);
        A.store.Int32(ptr + 268 + 116, 0);
        A.store.Ref(ptr + 268 + 120, undefined);
        A.store.Bool(ptr + 268 + 213, false);
        A.store.Bool(ptr + 268 + 124, false);
        A.store.Ref(ptr + 268 + 128, undefined);
        A.store.Ref(ptr + 268 + 132, undefined);
        A.store.Ref(ptr + 268 + 136, undefined);
        A.store.Bool(ptr + 268 + 214, false);
        A.store.Int32(ptr + 268 + 140, 0);
        A.store.Bool(ptr + 268 + 215, false);
        A.store.Bool(ptr + 268 + 144, false);
        A.store.Ref(ptr + 268 + 148, undefined);
        A.store.Ref(ptr + 268 + 152, undefined);
        A.store.Ref(ptr + 268 + 156, undefined);
        A.store.Bool(ptr + 268 + 216, false);
        A.store.Int32(ptr + 268 + 160, 0);
        A.store.Bool(ptr + 268 + 217, false);
        A.store.Int32(ptr + 268 + 164, 0);
        A.store.Ref(ptr + 268 + 168, undefined);
        A.store.Ref(ptr + 268 + 172, undefined);
        A.store.Ref(ptr + 268 + 176, undefined);
        A.store.Ref(ptr + 268 + 180, undefined);
        A.store.Ref(ptr + 268 + 184, undefined);
        A.store.Ref(ptr + 268 + 188, undefined);
        A.store.Ref(ptr + 268 + 192, undefined);
        A.store.Ref(ptr + 268 + 196, undefined);

        A.store.Bool(ptr + 268 + 200 + 8, false);
        A.store.Ref(ptr + 268 + 200 + 0, undefined);
        A.store.Ref(ptr + 268 + 200 + 4, undefined);

        A.store.Bool(ptr + 488 + 8, false);
        A.store.Ref(ptr + 488 + 0, undefined);
        A.store.Ref(ptr + 488 + 4, undefined);
        A.store.Ref(ptr + 500, undefined);
      } else {
        A.store.Bool(ptr + 505, true);
        A.store.Bool(ptr + 504, "AutoConnect" in x ? true : false);
        A.store.Bool(ptr + 0, x["AutoConnect"] ? true : false);
        A.store.Ref(ptr + 4, x["Host"]);

        if (typeof x["IPsec"] === "undefined") {
          A.store.Bool(ptr + 8 + 236, false);
          A.store.Ref(ptr + 8 + 0, undefined);

          A.store.Bool(ptr + 8 + 4 + 49, false);
          A.store.Ref(ptr + 8 + 4 + 0, undefined);

          A.store.Bool(ptr + 8 + 4 + 4 + 16, false);
          A.store.Ref(ptr + 8 + 4 + 4 + 0, undefined);
          A.store.Ref(ptr + 8 + 4 + 4 + 4, undefined);
          A.store.Ref(ptr + 8 + 4 + 4 + 8, undefined);
          A.store.Ref(ptr + 8 + 4 + 4 + 12, undefined);
          A.store.Ref(ptr + 8 + 4 + 24, undefined);
          A.store.Ref(ptr + 8 + 4 + 28, undefined);

          A.store.Bool(ptr + 8 + 4 + 32 + 16, false);
          A.store.Ref(ptr + 8 + 4 + 32 + 0, undefined);
          A.store.Ref(ptr + 8 + 4 + 32 + 4, undefined);
          A.store.Ref(ptr + 8 + 4 + 32 + 8, undefined);
          A.store.Ref(ptr + 8 + 4 + 32 + 12, undefined);
          A.store.Ref(ptr + 8 + 56, undefined);
          A.store.Ref(ptr + 8 + 60, undefined);
          A.store.Ref(ptr + 8 + 64, undefined);
          A.store.Ref(ptr + 8 + 68, undefined);

          A.store.Bool(ptr + 8 + 72 + 113, false);
          A.store.Ref(ptr + 8 + 72 + 0, undefined);

          A.store.Bool(ptr + 8 + 72 + 4 + 49, false);
          A.store.Ref(ptr + 8 + 72 + 4 + 0, undefined);

          A.store.Bool(ptr + 8 + 72 + 4 + 4 + 16, false);
          A.store.Ref(ptr + 8 + 72 + 4 + 4 + 0, undefined);
          A.store.Ref(ptr + 8 + 72 + 4 + 4 + 4, undefined);
          A.store.Ref(ptr + 8 + 72 + 4 + 4 + 8, undefined);
          A.store.Ref(ptr + 8 + 72 + 4 + 4 + 12, undefined);
          A.store.Ref(ptr + 8 + 72 + 4 + 24, undefined);
          A.store.Ref(ptr + 8 + 72 + 4 + 28, undefined);

          A.store.Bool(ptr + 8 + 72 + 4 + 32 + 16, false);
          A.store.Ref(ptr + 8 + 72 + 4 + 32 + 0, undefined);
          A.store.Ref(ptr + 8 + 72 + 4 + 32 + 4, undefined);
          A.store.Ref(ptr + 8 + 72 + 4 + 32 + 8, undefined);
          A.store.Ref(ptr + 8 + 72 + 4 + 32 + 12, undefined);
          A.store.Ref(ptr + 8 + 72 + 56, undefined);
          A.store.Ref(ptr + 8 + 72 + 60, undefined);
          A.store.Ref(ptr + 8 + 72 + 64, undefined);
          A.store.Ref(ptr + 8 + 72 + 68, undefined);
          A.store.Ref(ptr + 8 + 72 + 72, undefined);
          A.store.Ref(ptr + 8 + 72 + 76, undefined);
          A.store.Ref(ptr + 8 + 72 + 80, undefined);
          A.store.Ref(ptr + 8 + 72 + 84, undefined);
          A.store.Bool(ptr + 8 + 72 + 110, false);
          A.store.Bool(ptr + 8 + 72 + 88, false);
          A.store.Ref(ptr + 8 + 72 + 92, undefined);
          A.store.Ref(ptr + 8 + 72 + 96, undefined);
          A.store.Ref(ptr + 8 + 72 + 100, undefined);
          A.store.Ref(ptr + 8 + 72 + 104, undefined);
          A.store.Bool(ptr + 8 + 72 + 111, false);
          A.store.Bool(ptr + 8 + 72 + 108, false);
          A.store.Bool(ptr + 8 + 72 + 112, false);
          A.store.Bool(ptr + 8 + 72 + 109, false);
          A.store.Ref(ptr + 8 + 188, undefined);
          A.store.Bool(ptr + 8 + 234, false);
          A.store.Int32(ptr + 8 + 192, 0);
          A.store.Ref(ptr + 8 + 196, undefined);
          A.store.Ref(ptr + 8 + 200, undefined);
          A.store.Ref(ptr + 8 + 204, undefined);
          A.store.Bool(ptr + 8 + 235, false);
          A.store.Bool(ptr + 8 + 208, false);
          A.store.Ref(ptr + 8 + 212, undefined);
          A.store.Ref(ptr + 8 + 216, undefined);

          A.store.Bool(ptr + 8 + 220 + 13, false);
          A.store.Ref(ptr + 8 + 220 + 0, undefined);
          A.store.Bool(ptr + 8 + 220 + 12, false);
          A.store.Bool(ptr + 8 + 220 + 4, false);
          A.store.Ref(ptr + 8 + 220 + 8, undefined);
        } else {
          A.store.Bool(ptr + 8 + 236, true);
          A.store.Ref(ptr + 8 + 0, x["IPsec"]["AuthenticationType"]);

          if (typeof x["IPsec"]["ClientCertPattern"] === "undefined") {
            A.store.Bool(ptr + 8 + 4 + 49, false);
            A.store.Ref(ptr + 8 + 4 + 0, undefined);

            A.store.Bool(ptr + 8 + 4 + 4 + 16, false);
            A.store.Ref(ptr + 8 + 4 + 4 + 0, undefined);
            A.store.Ref(ptr + 8 + 4 + 4 + 4, undefined);
            A.store.Ref(ptr + 8 + 4 + 4 + 8, undefined);
            A.store.Ref(ptr + 8 + 4 + 4 + 12, undefined);
            A.store.Ref(ptr + 8 + 4 + 24, undefined);
            A.store.Ref(ptr + 8 + 4 + 28, undefined);

            A.store.Bool(ptr + 8 + 4 + 32 + 16, false);
            A.store.Ref(ptr + 8 + 4 + 32 + 0, undefined);
            A.store.Ref(ptr + 8 + 4 + 32 + 4, undefined);
            A.store.Ref(ptr + 8 + 4 + 32 + 8, undefined);
            A.store.Ref(ptr + 8 + 4 + 32 + 12, undefined);
          } else {
            A.store.Bool(ptr + 8 + 4 + 49, true);
            A.store.Ref(ptr + 8 + 4 + 0, x["IPsec"]["ClientCertPattern"]["EnrollmentURI"]);

            if (typeof x["IPsec"]["ClientCertPattern"]["Issuer"] === "undefined") {
              A.store.Bool(ptr + 8 + 4 + 4 + 16, false);
              A.store.Ref(ptr + 8 + 4 + 4 + 0, undefined);
              A.store.Ref(ptr + 8 + 4 + 4 + 4, undefined);
              A.store.Ref(ptr + 8 + 4 + 4 + 8, undefined);
              A.store.Ref(ptr + 8 + 4 + 4 + 12, undefined);
            } else {
              A.store.Bool(ptr + 8 + 4 + 4 + 16, true);
              A.store.Ref(ptr + 8 + 4 + 4 + 0, x["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]);
              A.store.Ref(ptr + 8 + 4 + 4 + 4, x["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]);
              A.store.Ref(ptr + 8 + 4 + 4 + 8, x["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]);
              A.store.Ref(ptr + 8 + 4 + 4 + 12, x["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]);
            }
            A.store.Ref(ptr + 8 + 4 + 24, x["IPsec"]["ClientCertPattern"]["IssuerCAPEMs"]);
            A.store.Ref(ptr + 8 + 4 + 28, x["IPsec"]["ClientCertPattern"]["IssuerCARef"]);

            if (typeof x["IPsec"]["ClientCertPattern"]["Subject"] === "undefined") {
              A.store.Bool(ptr + 8 + 4 + 32 + 16, false);
              A.store.Ref(ptr + 8 + 4 + 32 + 0, undefined);
              A.store.Ref(ptr + 8 + 4 + 32 + 4, undefined);
              A.store.Ref(ptr + 8 + 4 + 32 + 8, undefined);
              A.store.Ref(ptr + 8 + 4 + 32 + 12, undefined);
            } else {
              A.store.Bool(ptr + 8 + 4 + 32 + 16, true);
              A.store.Ref(ptr + 8 + 4 + 32 + 0, x["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]);
              A.store.Ref(ptr + 8 + 4 + 32 + 4, x["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]);
              A.store.Ref(ptr + 8 + 4 + 32 + 8, x["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]);
              A.store.Ref(ptr + 8 + 4 + 32 + 12, x["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]);
            }
          }
          A.store.Ref(ptr + 8 + 56, x["IPsec"]["ClientCertPKCS11Id"]);
          A.store.Ref(ptr + 8 + 60, x["IPsec"]["ClientCertProvisioningProfileId"]);
          A.store.Ref(ptr + 8 + 64, x["IPsec"]["ClientCertRef"]);
          A.store.Ref(ptr + 8 + 68, x["IPsec"]["ClientCertType"]);

          if (typeof x["IPsec"]["EAP"] === "undefined") {
            A.store.Bool(ptr + 8 + 72 + 113, false);
            A.store.Ref(ptr + 8 + 72 + 0, undefined);

            A.store.Bool(ptr + 8 + 72 + 4 + 49, false);
            A.store.Ref(ptr + 8 + 72 + 4 + 0, undefined);

            A.store.Bool(ptr + 8 + 72 + 4 + 4 + 16, false);
            A.store.Ref(ptr + 8 + 72 + 4 + 4 + 0, undefined);
            A.store.Ref(ptr + 8 + 72 + 4 + 4 + 4, undefined);
            A.store.Ref(ptr + 8 + 72 + 4 + 4 + 8, undefined);
            A.store.Ref(ptr + 8 + 72 + 4 + 4 + 12, undefined);
            A.store.Ref(ptr + 8 + 72 + 4 + 24, undefined);
            A.store.Ref(ptr + 8 + 72 + 4 + 28, undefined);

            A.store.Bool(ptr + 8 + 72 + 4 + 32 + 16, false);
            A.store.Ref(ptr + 8 + 72 + 4 + 32 + 0, undefined);
            A.store.Ref(ptr + 8 + 72 + 4 + 32 + 4, undefined);
            A.store.Ref(ptr + 8 + 72 + 4 + 32 + 8, undefined);
            A.store.Ref(ptr + 8 + 72 + 4 + 32 + 12, undefined);
            A.store.Ref(ptr + 8 + 72 + 56, undefined);
            A.store.Ref(ptr + 8 + 72 + 60, undefined);
            A.store.Ref(ptr + 8 + 72 + 64, undefined);
            A.store.Ref(ptr + 8 + 72 + 68, undefined);
            A.store.Ref(ptr + 8 + 72 + 72, undefined);
            A.store.Ref(ptr + 8 + 72 + 76, undefined);
            A.store.Ref(ptr + 8 + 72 + 80, undefined);
            A.store.Ref(ptr + 8 + 72 + 84, undefined);
            A.store.Bool(ptr + 8 + 72 + 110, false);
            A.store.Bool(ptr + 8 + 72 + 88, false);
            A.store.Ref(ptr + 8 + 72 + 92, undefined);
            A.store.Ref(ptr + 8 + 72 + 96, undefined);
            A.store.Ref(ptr + 8 + 72 + 100, undefined);
            A.store.Ref(ptr + 8 + 72 + 104, undefined);
            A.store.Bool(ptr + 8 + 72 + 111, false);
            A.store.Bool(ptr + 8 + 72 + 108, false);
            A.store.Bool(ptr + 8 + 72 + 112, false);
            A.store.Bool(ptr + 8 + 72 + 109, false);
          } else {
            A.store.Bool(ptr + 8 + 72 + 113, true);
            A.store.Ref(ptr + 8 + 72 + 0, x["IPsec"]["EAP"]["AnonymousIdentity"]);

            if (typeof x["IPsec"]["EAP"]["ClientCertPattern"] === "undefined") {
              A.store.Bool(ptr + 8 + 72 + 4 + 49, false);
              A.store.Ref(ptr + 8 + 72 + 4 + 0, undefined);

              A.store.Bool(ptr + 8 + 72 + 4 + 4 + 16, false);
              A.store.Ref(ptr + 8 + 72 + 4 + 4 + 0, undefined);
              A.store.Ref(ptr + 8 + 72 + 4 + 4 + 4, undefined);
              A.store.Ref(ptr + 8 + 72 + 4 + 4 + 8, undefined);
              A.store.Ref(ptr + 8 + 72 + 4 + 4 + 12, undefined);
              A.store.Ref(ptr + 8 + 72 + 4 + 24, undefined);
              A.store.Ref(ptr + 8 + 72 + 4 + 28, undefined);

              A.store.Bool(ptr + 8 + 72 + 4 + 32 + 16, false);
              A.store.Ref(ptr + 8 + 72 + 4 + 32 + 0, undefined);
              A.store.Ref(ptr + 8 + 72 + 4 + 32 + 4, undefined);
              A.store.Ref(ptr + 8 + 72 + 4 + 32 + 8, undefined);
              A.store.Ref(ptr + 8 + 72 + 4 + 32 + 12, undefined);
            } else {
              A.store.Bool(ptr + 8 + 72 + 4 + 49, true);
              A.store.Ref(ptr + 8 + 72 + 4 + 0, x["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]);

              if (typeof x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"] === "undefined") {
                A.store.Bool(ptr + 8 + 72 + 4 + 4 + 16, false);
                A.store.Ref(ptr + 8 + 72 + 4 + 4 + 0, undefined);
                A.store.Ref(ptr + 8 + 72 + 4 + 4 + 4, undefined);
                A.store.Ref(ptr + 8 + 72 + 4 + 4 + 8, undefined);
                A.store.Ref(ptr + 8 + 72 + 4 + 4 + 12, undefined);
              } else {
                A.store.Bool(ptr + 8 + 72 + 4 + 4 + 16, true);
                A.store.Ref(ptr + 8 + 72 + 4 + 4 + 0, x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]);
                A.store.Ref(ptr + 8 + 72 + 4 + 4 + 4, x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]);
                A.store.Ref(ptr + 8 + 72 + 4 + 4 + 8, x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]);
                A.store.Ref(
                  ptr + 8 + 72 + 4 + 4 + 12,
                  x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]
                );
              }
              A.store.Ref(ptr + 8 + 72 + 4 + 24, x["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCAPEMs"]);
              A.store.Ref(ptr + 8 + 72 + 4 + 28, x["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]);

              if (typeof x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"] === "undefined") {
                A.store.Bool(ptr + 8 + 72 + 4 + 32 + 16, false);
                A.store.Ref(ptr + 8 + 72 + 4 + 32 + 0, undefined);
                A.store.Ref(ptr + 8 + 72 + 4 + 32 + 4, undefined);
                A.store.Ref(ptr + 8 + 72 + 4 + 32 + 8, undefined);
                A.store.Ref(ptr + 8 + 72 + 4 + 32 + 12, undefined);
              } else {
                A.store.Bool(ptr + 8 + 72 + 4 + 32 + 16, true);
                A.store.Ref(ptr + 8 + 72 + 4 + 32 + 0, x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]);
                A.store.Ref(ptr + 8 + 72 + 4 + 32 + 4, x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]);
                A.store.Ref(
                  ptr + 8 + 72 + 4 + 32 + 8,
                  x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]
                );
                A.store.Ref(
                  ptr + 8 + 72 + 4 + 32 + 12,
                  x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]
                );
              }
            }
            A.store.Ref(ptr + 8 + 72 + 56, x["IPsec"]["EAP"]["ClientCertPKCS11Id"]);
            A.store.Ref(ptr + 8 + 72 + 60, x["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]);
            A.store.Ref(ptr + 8 + 72 + 64, x["IPsec"]["EAP"]["ClientCertRef"]);
            A.store.Ref(ptr + 8 + 72 + 68, x["IPsec"]["EAP"]["ClientCertType"]);
            A.store.Ref(ptr + 8 + 72 + 72, x["IPsec"]["EAP"]["Identity"]);
            A.store.Ref(ptr + 8 + 72 + 76, x["IPsec"]["EAP"]["Inner"]);
            A.store.Ref(ptr + 8 + 72 + 80, x["IPsec"]["EAP"]["Outer"]);
            A.store.Ref(ptr + 8 + 72 + 84, x["IPsec"]["EAP"]["Password"]);
            A.store.Bool(ptr + 8 + 72 + 110, "SaveCredentials" in x["IPsec"]["EAP"] ? true : false);
            A.store.Bool(ptr + 8 + 72 + 88, x["IPsec"]["EAP"]["SaveCredentials"] ? true : false);
            A.store.Ref(ptr + 8 + 72 + 92, x["IPsec"]["EAP"]["ServerCAPEMs"]);
            A.store.Ref(ptr + 8 + 72 + 96, x["IPsec"]["EAP"]["ServerCARefs"]);
            A.store.Ref(ptr + 8 + 72 + 100, x["IPsec"]["EAP"]["SubjectMatch"]);
            A.store.Ref(ptr + 8 + 72 + 104, x["IPsec"]["EAP"]["TLSVersionMax"]);
            A.store.Bool(ptr + 8 + 72 + 111, "UseProactiveKeyCaching" in x["IPsec"]["EAP"] ? true : false);
            A.store.Bool(ptr + 8 + 72 + 108, x["IPsec"]["EAP"]["UseProactiveKeyCaching"] ? true : false);
            A.store.Bool(ptr + 8 + 72 + 112, "UseSystemCAs" in x["IPsec"]["EAP"] ? true : false);
            A.store.Bool(ptr + 8 + 72 + 109, x["IPsec"]["EAP"]["UseSystemCAs"] ? true : false);
          }
          A.store.Ref(ptr + 8 + 188, x["IPsec"]["Group"]);
          A.store.Bool(ptr + 8 + 234, "IKEVersion" in x["IPsec"] ? true : false);
          A.store.Int32(
            ptr + 8 + 192,
            x["IPsec"]["IKEVersion"] === undefined ? 0 : (x["IPsec"]["IKEVersion"] as number)
          );
          A.store.Ref(ptr + 8 + 196, x["IPsec"]["LocalIdentity"]);
          A.store.Ref(ptr + 8 + 200, x["IPsec"]["PSK"]);
          A.store.Ref(ptr + 8 + 204, x["IPsec"]["RemoteIdentity"]);
          A.store.Bool(ptr + 8 + 235, "SaveCredentials" in x["IPsec"] ? true : false);
          A.store.Bool(ptr + 8 + 208, x["IPsec"]["SaveCredentials"] ? true : false);
          A.store.Ref(ptr + 8 + 212, x["IPsec"]["ServerCAPEMs"]);
          A.store.Ref(ptr + 8 + 216, x["IPsec"]["ServerCARefs"]);

          if (typeof x["IPsec"]["XAUTH"] === "undefined") {
            A.store.Bool(ptr + 8 + 220 + 13, false);
            A.store.Ref(ptr + 8 + 220 + 0, undefined);
            A.store.Bool(ptr + 8 + 220 + 12, false);
            A.store.Bool(ptr + 8 + 220 + 4, false);
            A.store.Ref(ptr + 8 + 220 + 8, undefined);
          } else {
            A.store.Bool(ptr + 8 + 220 + 13, true);
            A.store.Ref(ptr + 8 + 220 + 0, x["IPsec"]["XAUTH"]["Password"]);
            A.store.Bool(ptr + 8 + 220 + 12, "SaveCredentials" in x["IPsec"]["XAUTH"] ? true : false);
            A.store.Bool(ptr + 8 + 220 + 4, x["IPsec"]["XAUTH"]["SaveCredentials"] ? true : false);
            A.store.Ref(ptr + 8 + 220 + 8, x["IPsec"]["XAUTH"]["Username"]);
          }
        }

        if (typeof x["L2TP"] === "undefined") {
          A.store.Bool(ptr + 248 + 18, false);
          A.store.Bool(ptr + 248 + 16, false);
          A.store.Bool(ptr + 248 + 0, false);
          A.store.Ref(ptr + 248 + 4, undefined);
          A.store.Bool(ptr + 248 + 17, false);
          A.store.Bool(ptr + 248 + 8, false);
          A.store.Ref(ptr + 248 + 12, undefined);
        } else {
          A.store.Bool(ptr + 248 + 18, true);
          A.store.Bool(ptr + 248 + 16, "LcpEchoDisabled" in x["L2TP"] ? true : false);
          A.store.Bool(ptr + 248 + 0, x["L2TP"]["LcpEchoDisabled"] ? true : false);
          A.store.Ref(ptr + 248 + 4, x["L2TP"]["Password"]);
          A.store.Bool(ptr + 248 + 17, "SaveCredentials" in x["L2TP"] ? true : false);
          A.store.Bool(ptr + 248 + 8, x["L2TP"]["SaveCredentials"] ? true : false);
          A.store.Ref(ptr + 248 + 12, x["L2TP"]["Username"]);
        }

        if (typeof x["OpenVPN"] === "undefined") {
          A.store.Bool(ptr + 268 + 218, false);
          A.store.Ref(ptr + 268 + 0, undefined);
          A.store.Ref(ptr + 268 + 4, undefined);
          A.store.Bool(ptr + 268 + 209, false);
          A.store.Bool(ptr + 268 + 8, false);
          A.store.Ref(ptr + 268 + 12, undefined);
          A.store.Ref(ptr + 268 + 16, undefined);

          A.store.Bool(ptr + 268 + 20 + 49, false);
          A.store.Ref(ptr + 268 + 20 + 0, undefined);

          A.store.Bool(ptr + 268 + 20 + 4 + 16, false);
          A.store.Ref(ptr + 268 + 20 + 4 + 0, undefined);
          A.store.Ref(ptr + 268 + 20 + 4 + 4, undefined);
          A.store.Ref(ptr + 268 + 20 + 4 + 8, undefined);
          A.store.Ref(ptr + 268 + 20 + 4 + 12, undefined);
          A.store.Ref(ptr + 268 + 20 + 24, undefined);
          A.store.Ref(ptr + 268 + 20 + 28, undefined);

          A.store.Bool(ptr + 268 + 20 + 32 + 16, false);
          A.store.Ref(ptr + 268 + 20 + 32 + 0, undefined);
          A.store.Ref(ptr + 268 + 20 + 32 + 4, undefined);
          A.store.Ref(ptr + 268 + 20 + 32 + 8, undefined);
          A.store.Ref(ptr + 268 + 20 + 32 + 12, undefined);
          A.store.Ref(ptr + 268 + 72, undefined);
          A.store.Ref(ptr + 268 + 76, undefined);
          A.store.Ref(ptr + 268 + 80, undefined);
          A.store.Ref(ptr + 268 + 84, undefined);
          A.store.Bool(ptr + 268 + 210, false);
          A.store.Bool(ptr + 268 + 88, false);
          A.store.Ref(ptr + 268 + 92, undefined);
          A.store.Bool(ptr + 268 + 211, false);
          A.store.Bool(ptr + 268 + 96, false);
          A.store.Ref(ptr + 268 + 100, undefined);
          A.store.Ref(ptr + 268 + 104, undefined);
          A.store.Ref(ptr + 268 + 108, undefined);
          A.store.Ref(ptr + 268 + 112, undefined);
          A.store.Bool(ptr + 268 + 212, false);
          A.store.Int32(ptr + 268 + 116, 0);
          A.store.Ref(ptr + 268 + 120, undefined);
          A.store.Bool(ptr + 268 + 213, false);
          A.store.Bool(ptr + 268 + 124, false);
          A.store.Ref(ptr + 268 + 128, undefined);
          A.store.Ref(ptr + 268 + 132, undefined);
          A.store.Ref(ptr + 268 + 136, undefined);
          A.store.Bool(ptr + 268 + 214, false);
          A.store.Int32(ptr + 268 + 140, 0);
          A.store.Bool(ptr + 268 + 215, false);
          A.store.Bool(ptr + 268 + 144, false);
          A.store.Ref(ptr + 268 + 148, undefined);
          A.store.Ref(ptr + 268 + 152, undefined);
          A.store.Ref(ptr + 268 + 156, undefined);
          A.store.Bool(ptr + 268 + 216, false);
          A.store.Int32(ptr + 268 + 160, 0);
          A.store.Bool(ptr + 268 + 217, false);
          A.store.Int32(ptr + 268 + 164, 0);
          A.store.Ref(ptr + 268 + 168, undefined);
          A.store.Ref(ptr + 268 + 172, undefined);
          A.store.Ref(ptr + 268 + 176, undefined);
          A.store.Ref(ptr + 268 + 180, undefined);
          A.store.Ref(ptr + 268 + 184, undefined);
          A.store.Ref(ptr + 268 + 188, undefined);
          A.store.Ref(ptr + 268 + 192, undefined);
          A.store.Ref(ptr + 268 + 196, undefined);

          A.store.Bool(ptr + 268 + 200 + 8, false);
          A.store.Ref(ptr + 268 + 200 + 0, undefined);
          A.store.Ref(ptr + 268 + 200 + 4, undefined);
        } else {
          A.store.Bool(ptr + 268 + 218, true);
          A.store.Ref(ptr + 268 + 0, x["OpenVPN"]["Auth"]);
          A.store.Ref(ptr + 268 + 4, x["OpenVPN"]["AuthRetry"]);
          A.store.Bool(ptr + 268 + 209, "AuthNoCache" in x["OpenVPN"] ? true : false);
          A.store.Bool(ptr + 268 + 8, x["OpenVPN"]["AuthNoCache"] ? true : false);
          A.store.Ref(ptr + 268 + 12, x["OpenVPN"]["Cipher"]);
          A.store.Ref(ptr + 268 + 16, x["OpenVPN"]["ClientCertPKCS11Id"]);

          if (typeof x["OpenVPN"]["ClientCertPattern"] === "undefined") {
            A.store.Bool(ptr + 268 + 20 + 49, false);
            A.store.Ref(ptr + 268 + 20 + 0, undefined);

            A.store.Bool(ptr + 268 + 20 + 4 + 16, false);
            A.store.Ref(ptr + 268 + 20 + 4 + 0, undefined);
            A.store.Ref(ptr + 268 + 20 + 4 + 4, undefined);
            A.store.Ref(ptr + 268 + 20 + 4 + 8, undefined);
            A.store.Ref(ptr + 268 + 20 + 4 + 12, undefined);
            A.store.Ref(ptr + 268 + 20 + 24, undefined);
            A.store.Ref(ptr + 268 + 20 + 28, undefined);

            A.store.Bool(ptr + 268 + 20 + 32 + 16, false);
            A.store.Ref(ptr + 268 + 20 + 32 + 0, undefined);
            A.store.Ref(ptr + 268 + 20 + 32 + 4, undefined);
            A.store.Ref(ptr + 268 + 20 + 32 + 8, undefined);
            A.store.Ref(ptr + 268 + 20 + 32 + 12, undefined);
          } else {
            A.store.Bool(ptr + 268 + 20 + 49, true);
            A.store.Ref(ptr + 268 + 20 + 0, x["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]);

            if (typeof x["OpenVPN"]["ClientCertPattern"]["Issuer"] === "undefined") {
              A.store.Bool(ptr + 268 + 20 + 4 + 16, false);
              A.store.Ref(ptr + 268 + 20 + 4 + 0, undefined);
              A.store.Ref(ptr + 268 + 20 + 4 + 4, undefined);
              A.store.Ref(ptr + 268 + 20 + 4 + 8, undefined);
              A.store.Ref(ptr + 268 + 20 + 4 + 12, undefined);
            } else {
              A.store.Bool(ptr + 268 + 20 + 4 + 16, true);
              A.store.Ref(ptr + 268 + 20 + 4 + 0, x["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]);
              A.store.Ref(ptr + 268 + 20 + 4 + 4, x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]);
              A.store.Ref(ptr + 268 + 20 + 4 + 8, x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]);
              A.store.Ref(ptr + 268 + 20 + 4 + 12, x["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]);
            }
            A.store.Ref(ptr + 268 + 20 + 24, x["OpenVPN"]["ClientCertPattern"]["IssuerCAPEMs"]);
            A.store.Ref(ptr + 268 + 20 + 28, x["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]);

            if (typeof x["OpenVPN"]["ClientCertPattern"]["Subject"] === "undefined") {
              A.store.Bool(ptr + 268 + 20 + 32 + 16, false);
              A.store.Ref(ptr + 268 + 20 + 32 + 0, undefined);
              A.store.Ref(ptr + 268 + 20 + 32 + 4, undefined);
              A.store.Ref(ptr + 268 + 20 + 32 + 8, undefined);
              A.store.Ref(ptr + 268 + 20 + 32 + 12, undefined);
            } else {
              A.store.Bool(ptr + 268 + 20 + 32 + 16, true);
              A.store.Ref(ptr + 268 + 20 + 32 + 0, x["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]);
              A.store.Ref(ptr + 268 + 20 + 32 + 4, x["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]);
              A.store.Ref(ptr + 268 + 20 + 32 + 8, x["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]);
              A.store.Ref(ptr + 268 + 20 + 32 + 12, x["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]);
            }
          }
          A.store.Ref(ptr + 268 + 72, x["OpenVPN"]["ClientCertProvisioningProfileId"]);
          A.store.Ref(ptr + 268 + 76, x["OpenVPN"]["ClientCertRef"]);
          A.store.Ref(ptr + 268 + 80, x["OpenVPN"]["ClientCertType"]);
          A.store.Ref(ptr + 268 + 84, x["OpenVPN"]["CompLZO"]);
          A.store.Bool(ptr + 268 + 210, "CompNoAdapt" in x["OpenVPN"] ? true : false);
          A.store.Bool(ptr + 268 + 88, x["OpenVPN"]["CompNoAdapt"] ? true : false);
          A.store.Ref(ptr + 268 + 92, x["OpenVPN"]["ExtraHosts"]);
          A.store.Bool(ptr + 268 + 211, "IgnoreDefaultRoute" in x["OpenVPN"] ? true : false);
          A.store.Bool(ptr + 268 + 96, x["OpenVPN"]["IgnoreDefaultRoute"] ? true : false);
          A.store.Ref(ptr + 268 + 100, x["OpenVPN"]["KeyDirection"]);
          A.store.Ref(ptr + 268 + 104, x["OpenVPN"]["NsCertType"]);
          A.store.Ref(ptr + 268 + 108, x["OpenVPN"]["OTP"]);
          A.store.Ref(ptr + 268 + 112, x["OpenVPN"]["Password"]);
          A.store.Bool(ptr + 268 + 212, "Port" in x["OpenVPN"] ? true : false);
          A.store.Int32(ptr + 268 + 116, x["OpenVPN"]["Port"] === undefined ? 0 : (x["OpenVPN"]["Port"] as number));
          A.store.Ref(ptr + 268 + 120, x["OpenVPN"]["Proto"]);
          A.store.Bool(ptr + 268 + 213, "PushPeerInfo" in x["OpenVPN"] ? true : false);
          A.store.Bool(ptr + 268 + 124, x["OpenVPN"]["PushPeerInfo"] ? true : false);
          A.store.Ref(ptr + 268 + 128, x["OpenVPN"]["RemoteCertEKU"]);
          A.store.Ref(ptr + 268 + 132, x["OpenVPN"]["RemoteCertKU"]);
          A.store.Ref(ptr + 268 + 136, x["OpenVPN"]["RemoteCertTLS"]);
          A.store.Bool(ptr + 268 + 214, "RenegSec" in x["OpenVPN"] ? true : false);
          A.store.Int32(
            ptr + 268 + 140,
            x["OpenVPN"]["RenegSec"] === undefined ? 0 : (x["OpenVPN"]["RenegSec"] as number)
          );
          A.store.Bool(ptr + 268 + 215, "SaveCredentials" in x["OpenVPN"] ? true : false);
          A.store.Bool(ptr + 268 + 144, x["OpenVPN"]["SaveCredentials"] ? true : false);
          A.store.Ref(ptr + 268 + 148, x["OpenVPN"]["ServerCAPEMs"]);
          A.store.Ref(ptr + 268 + 152, x["OpenVPN"]["ServerCARefs"]);
          A.store.Ref(ptr + 268 + 156, x["OpenVPN"]["ServerCertRef"]);
          A.store.Bool(ptr + 268 + 216, "ServerPollTimeout" in x["OpenVPN"] ? true : false);
          A.store.Int32(
            ptr + 268 + 160,
            x["OpenVPN"]["ServerPollTimeout"] === undefined ? 0 : (x["OpenVPN"]["ServerPollTimeout"] as number)
          );
          A.store.Bool(ptr + 268 + 217, "Shaper" in x["OpenVPN"] ? true : false);
          A.store.Int32(ptr + 268 + 164, x["OpenVPN"]["Shaper"] === undefined ? 0 : (x["OpenVPN"]["Shaper"] as number));
          A.store.Ref(ptr + 268 + 168, x["OpenVPN"]["StaticChallenge"]);
          A.store.Ref(ptr + 268 + 172, x["OpenVPN"]["TLSAuthContents"]);
          A.store.Ref(ptr + 268 + 176, x["OpenVPN"]["TLSRemote"]);
          A.store.Ref(ptr + 268 + 180, x["OpenVPN"]["TLSVersionMin"]);
          A.store.Ref(ptr + 268 + 184, x["OpenVPN"]["UserAuthenticationType"]);
          A.store.Ref(ptr + 268 + 188, x["OpenVPN"]["Username"]);
          A.store.Ref(ptr + 268 + 192, x["OpenVPN"]["Verb"]);
          A.store.Ref(ptr + 268 + 196, x["OpenVPN"]["VerifyHash"]);

          if (typeof x["OpenVPN"]["VerifyX509"] === "undefined") {
            A.store.Bool(ptr + 268 + 200 + 8, false);
            A.store.Ref(ptr + 268 + 200 + 0, undefined);
            A.store.Ref(ptr + 268 + 200 + 4, undefined);
          } else {
            A.store.Bool(ptr + 268 + 200 + 8, true);
            A.store.Ref(ptr + 268 + 200 + 0, x["OpenVPN"]["VerifyX509"]["Name"]);
            A.store.Ref(ptr + 268 + 200 + 4, x["OpenVPN"]["VerifyX509"]["Type"]);
          }
        }

        if (typeof x["ThirdPartyVPN"] === "undefined") {
          A.store.Bool(ptr + 488 + 8, false);
          A.store.Ref(ptr + 488 + 0, undefined);
          A.store.Ref(ptr + 488 + 4, undefined);
        } else {
          A.store.Bool(ptr + 488 + 8, true);
          A.store.Ref(ptr + 488 + 0, x["ThirdPartyVPN"]["ExtensionID"]);
          A.store.Ref(ptr + 488 + 4, x["ThirdPartyVPN"]["ProviderName"]);
        }
        A.store.Ref(ptr + 500, x["Type"]);
      }
    },
    "load_VPNProperties": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      if (A.load.Bool(ptr + 504)) {
        x["AutoConnect"] = A.load.Bool(ptr + 0);
      } else {
        delete x["AutoConnect"];
      }
      x["Host"] = A.load.Ref(ptr + 4, undefined);
      if (A.load.Bool(ptr + 8 + 236)) {
        x["IPsec"] = {};
        x["IPsec"]["AuthenticationType"] = A.load.Ref(ptr + 8 + 0, undefined);
        if (A.load.Bool(ptr + 8 + 4 + 49)) {
          x["IPsec"]["ClientCertPattern"] = {};
          x["IPsec"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(ptr + 8 + 4 + 0, undefined);
          if (A.load.Bool(ptr + 8 + 4 + 4 + 16)) {
            x["IPsec"]["ClientCertPattern"]["Issuer"] = {};
            x["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(ptr + 8 + 4 + 4 + 0, undefined);
            x["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(ptr + 8 + 4 + 4 + 4, undefined);
            x["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(ptr + 8 + 4 + 4 + 8, undefined);
            x["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(
              ptr + 8 + 4 + 4 + 12,
              undefined
            );
          } else {
            delete x["IPsec"]["ClientCertPattern"]["Issuer"];
          }
          x["IPsec"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(ptr + 8 + 4 + 24, undefined);
          x["IPsec"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(ptr + 8 + 4 + 28, undefined);
          if (A.load.Bool(ptr + 8 + 4 + 32 + 16)) {
            x["IPsec"]["ClientCertPattern"]["Subject"] = {};
            x["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(ptr + 8 + 4 + 32 + 0, undefined);
            x["IPsec"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(ptr + 8 + 4 + 32 + 4, undefined);
            x["IPsec"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(ptr + 8 + 4 + 32 + 8, undefined);
            x["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(
              ptr + 8 + 4 + 32 + 12,
              undefined
            );
          } else {
            delete x["IPsec"]["ClientCertPattern"]["Subject"];
          }
        } else {
          delete x["IPsec"]["ClientCertPattern"];
        }
        x["IPsec"]["ClientCertPKCS11Id"] = A.load.Ref(ptr + 8 + 56, undefined);
        x["IPsec"]["ClientCertProvisioningProfileId"] = A.load.Ref(ptr + 8 + 60, undefined);
        x["IPsec"]["ClientCertRef"] = A.load.Ref(ptr + 8 + 64, undefined);
        x["IPsec"]["ClientCertType"] = A.load.Ref(ptr + 8 + 68, undefined);
        if (A.load.Bool(ptr + 8 + 72 + 113)) {
          x["IPsec"]["EAP"] = {};
          x["IPsec"]["EAP"]["AnonymousIdentity"] = A.load.Ref(ptr + 8 + 72 + 0, undefined);
          if (A.load.Bool(ptr + 8 + 72 + 4 + 49)) {
            x["IPsec"]["EAP"]["ClientCertPattern"] = {};
            x["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(ptr + 8 + 72 + 4 + 0, undefined);
            if (A.load.Bool(ptr + 8 + 72 + 4 + 4 + 16)) {
              x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"] = {};
              x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(
                ptr + 8 + 72 + 4 + 4 + 0,
                undefined
              );
              x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(
                ptr + 8 + 72 + 4 + 4 + 4,
                undefined
              );
              x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(
                ptr + 8 + 72 + 4 + 4 + 8,
                undefined
              );
              x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(
                ptr + 8 + 72 + 4 + 4 + 12,
                undefined
              );
            } else {
              delete x["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"];
            }
            x["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(ptr + 8 + 72 + 4 + 24, undefined);
            x["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(ptr + 8 + 72 + 4 + 28, undefined);
            if (A.load.Bool(ptr + 8 + 72 + 4 + 32 + 16)) {
              x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"] = {};
              x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(
                ptr + 8 + 72 + 4 + 32 + 0,
                undefined
              );
              x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(
                ptr + 8 + 72 + 4 + 32 + 4,
                undefined
              );
              x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(
                ptr + 8 + 72 + 4 + 32 + 8,
                undefined
              );
              x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(
                ptr + 8 + 72 + 4 + 32 + 12,
                undefined
              );
            } else {
              delete x["IPsec"]["EAP"]["ClientCertPattern"]["Subject"];
            }
          } else {
            delete x["IPsec"]["EAP"]["ClientCertPattern"];
          }
          x["IPsec"]["EAP"]["ClientCertPKCS11Id"] = A.load.Ref(ptr + 8 + 72 + 56, undefined);
          x["IPsec"]["EAP"]["ClientCertProvisioningProfileId"] = A.load.Ref(ptr + 8 + 72 + 60, undefined);
          x["IPsec"]["EAP"]["ClientCertRef"] = A.load.Ref(ptr + 8 + 72 + 64, undefined);
          x["IPsec"]["EAP"]["ClientCertType"] = A.load.Ref(ptr + 8 + 72 + 68, undefined);
          x["IPsec"]["EAP"]["Identity"] = A.load.Ref(ptr + 8 + 72 + 72, undefined);
          x["IPsec"]["EAP"]["Inner"] = A.load.Ref(ptr + 8 + 72 + 76, undefined);
          x["IPsec"]["EAP"]["Outer"] = A.load.Ref(ptr + 8 + 72 + 80, undefined);
          x["IPsec"]["EAP"]["Password"] = A.load.Ref(ptr + 8 + 72 + 84, undefined);
          if (A.load.Bool(ptr + 8 + 72 + 110)) {
            x["IPsec"]["EAP"]["SaveCredentials"] = A.load.Bool(ptr + 8 + 72 + 88);
          } else {
            delete x["IPsec"]["EAP"]["SaveCredentials"];
          }
          x["IPsec"]["EAP"]["ServerCAPEMs"] = A.load.Ref(ptr + 8 + 72 + 92, undefined);
          x["IPsec"]["EAP"]["ServerCARefs"] = A.load.Ref(ptr + 8 + 72 + 96, undefined);
          x["IPsec"]["EAP"]["SubjectMatch"] = A.load.Ref(ptr + 8 + 72 + 100, undefined);
          x["IPsec"]["EAP"]["TLSVersionMax"] = A.load.Ref(ptr + 8 + 72 + 104, undefined);
          if (A.load.Bool(ptr + 8 + 72 + 111)) {
            x["IPsec"]["EAP"]["UseProactiveKeyCaching"] = A.load.Bool(ptr + 8 + 72 + 108);
          } else {
            delete x["IPsec"]["EAP"]["UseProactiveKeyCaching"];
          }
          if (A.load.Bool(ptr + 8 + 72 + 112)) {
            x["IPsec"]["EAP"]["UseSystemCAs"] = A.load.Bool(ptr + 8 + 72 + 109);
          } else {
            delete x["IPsec"]["EAP"]["UseSystemCAs"];
          }
        } else {
          delete x["IPsec"]["EAP"];
        }
        x["IPsec"]["Group"] = A.load.Ref(ptr + 8 + 188, undefined);
        if (A.load.Bool(ptr + 8 + 234)) {
          x["IPsec"]["IKEVersion"] = A.load.Int32(ptr + 8 + 192);
        } else {
          delete x["IPsec"]["IKEVersion"];
        }
        x["IPsec"]["LocalIdentity"] = A.load.Ref(ptr + 8 + 196, undefined);
        x["IPsec"]["PSK"] = A.load.Ref(ptr + 8 + 200, undefined);
        x["IPsec"]["RemoteIdentity"] = A.load.Ref(ptr + 8 + 204, undefined);
        if (A.load.Bool(ptr + 8 + 235)) {
          x["IPsec"]["SaveCredentials"] = A.load.Bool(ptr + 8 + 208);
        } else {
          delete x["IPsec"]["SaveCredentials"];
        }
        x["IPsec"]["ServerCAPEMs"] = A.load.Ref(ptr + 8 + 212, undefined);
        x["IPsec"]["ServerCARefs"] = A.load.Ref(ptr + 8 + 216, undefined);
        if (A.load.Bool(ptr + 8 + 220 + 13)) {
          x["IPsec"]["XAUTH"] = {};
          x["IPsec"]["XAUTH"]["Password"] = A.load.Ref(ptr + 8 + 220 + 0, undefined);
          if (A.load.Bool(ptr + 8 + 220 + 12)) {
            x["IPsec"]["XAUTH"]["SaveCredentials"] = A.load.Bool(ptr + 8 + 220 + 4);
          } else {
            delete x["IPsec"]["XAUTH"]["SaveCredentials"];
          }
          x["IPsec"]["XAUTH"]["Username"] = A.load.Ref(ptr + 8 + 220 + 8, undefined);
        } else {
          delete x["IPsec"]["XAUTH"];
        }
      } else {
        delete x["IPsec"];
      }
      if (A.load.Bool(ptr + 248 + 18)) {
        x["L2TP"] = {};
        if (A.load.Bool(ptr + 248 + 16)) {
          x["L2TP"]["LcpEchoDisabled"] = A.load.Bool(ptr + 248 + 0);
        } else {
          delete x["L2TP"]["LcpEchoDisabled"];
        }
        x["L2TP"]["Password"] = A.load.Ref(ptr + 248 + 4, undefined);
        if (A.load.Bool(ptr + 248 + 17)) {
          x["L2TP"]["SaveCredentials"] = A.load.Bool(ptr + 248 + 8);
        } else {
          delete x["L2TP"]["SaveCredentials"];
        }
        x["L2TP"]["Username"] = A.load.Ref(ptr + 248 + 12, undefined);
      } else {
        delete x["L2TP"];
      }
      if (A.load.Bool(ptr + 268 + 218)) {
        x["OpenVPN"] = {};
        x["OpenVPN"]["Auth"] = A.load.Ref(ptr + 268 + 0, undefined);
        x["OpenVPN"]["AuthRetry"] = A.load.Ref(ptr + 268 + 4, undefined);
        if (A.load.Bool(ptr + 268 + 209)) {
          x["OpenVPN"]["AuthNoCache"] = A.load.Bool(ptr + 268 + 8);
        } else {
          delete x["OpenVPN"]["AuthNoCache"];
        }
        x["OpenVPN"]["Cipher"] = A.load.Ref(ptr + 268 + 12, undefined);
        x["OpenVPN"]["ClientCertPKCS11Id"] = A.load.Ref(ptr + 268 + 16, undefined);
        if (A.load.Bool(ptr + 268 + 20 + 49)) {
          x["OpenVPN"]["ClientCertPattern"] = {};
          x["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(ptr + 268 + 20 + 0, undefined);
          if (A.load.Bool(ptr + 268 + 20 + 4 + 16)) {
            x["OpenVPN"]["ClientCertPattern"]["Issuer"] = {};
            x["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(ptr + 268 + 20 + 4 + 0, undefined);
            x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(ptr + 268 + 20 + 4 + 4, undefined);
            x["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(ptr + 268 + 20 + 4 + 8, undefined);
            x["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(
              ptr + 268 + 20 + 4 + 12,
              undefined
            );
          } else {
            delete x["OpenVPN"]["ClientCertPattern"]["Issuer"];
          }
          x["OpenVPN"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(ptr + 268 + 20 + 24, undefined);
          x["OpenVPN"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(ptr + 268 + 20 + 28, undefined);
          if (A.load.Bool(ptr + 268 + 20 + 32 + 16)) {
            x["OpenVPN"]["ClientCertPattern"]["Subject"] = {};
            x["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(ptr + 268 + 20 + 32 + 0, undefined);
            x["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(ptr + 268 + 20 + 32 + 4, undefined);
            x["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(
              ptr + 268 + 20 + 32 + 8,
              undefined
            );
            x["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(
              ptr + 268 + 20 + 32 + 12,
              undefined
            );
          } else {
            delete x["OpenVPN"]["ClientCertPattern"]["Subject"];
          }
        } else {
          delete x["OpenVPN"]["ClientCertPattern"];
        }
        x["OpenVPN"]["ClientCertProvisioningProfileId"] = A.load.Ref(ptr + 268 + 72, undefined);
        x["OpenVPN"]["ClientCertRef"] = A.load.Ref(ptr + 268 + 76, undefined);
        x["OpenVPN"]["ClientCertType"] = A.load.Ref(ptr + 268 + 80, undefined);
        x["OpenVPN"]["CompLZO"] = A.load.Ref(ptr + 268 + 84, undefined);
        if (A.load.Bool(ptr + 268 + 210)) {
          x["OpenVPN"]["CompNoAdapt"] = A.load.Bool(ptr + 268 + 88);
        } else {
          delete x["OpenVPN"]["CompNoAdapt"];
        }
        x["OpenVPN"]["ExtraHosts"] = A.load.Ref(ptr + 268 + 92, undefined);
        if (A.load.Bool(ptr + 268 + 211)) {
          x["OpenVPN"]["IgnoreDefaultRoute"] = A.load.Bool(ptr + 268 + 96);
        } else {
          delete x["OpenVPN"]["IgnoreDefaultRoute"];
        }
        x["OpenVPN"]["KeyDirection"] = A.load.Ref(ptr + 268 + 100, undefined);
        x["OpenVPN"]["NsCertType"] = A.load.Ref(ptr + 268 + 104, undefined);
        x["OpenVPN"]["OTP"] = A.load.Ref(ptr + 268 + 108, undefined);
        x["OpenVPN"]["Password"] = A.load.Ref(ptr + 268 + 112, undefined);
        if (A.load.Bool(ptr + 268 + 212)) {
          x["OpenVPN"]["Port"] = A.load.Int32(ptr + 268 + 116);
        } else {
          delete x["OpenVPN"]["Port"];
        }
        x["OpenVPN"]["Proto"] = A.load.Ref(ptr + 268 + 120, undefined);
        if (A.load.Bool(ptr + 268 + 213)) {
          x["OpenVPN"]["PushPeerInfo"] = A.load.Bool(ptr + 268 + 124);
        } else {
          delete x["OpenVPN"]["PushPeerInfo"];
        }
        x["OpenVPN"]["RemoteCertEKU"] = A.load.Ref(ptr + 268 + 128, undefined);
        x["OpenVPN"]["RemoteCertKU"] = A.load.Ref(ptr + 268 + 132, undefined);
        x["OpenVPN"]["RemoteCertTLS"] = A.load.Ref(ptr + 268 + 136, undefined);
        if (A.load.Bool(ptr + 268 + 214)) {
          x["OpenVPN"]["RenegSec"] = A.load.Int32(ptr + 268 + 140);
        } else {
          delete x["OpenVPN"]["RenegSec"];
        }
        if (A.load.Bool(ptr + 268 + 215)) {
          x["OpenVPN"]["SaveCredentials"] = A.load.Bool(ptr + 268 + 144);
        } else {
          delete x["OpenVPN"]["SaveCredentials"];
        }
        x["OpenVPN"]["ServerCAPEMs"] = A.load.Ref(ptr + 268 + 148, undefined);
        x["OpenVPN"]["ServerCARefs"] = A.load.Ref(ptr + 268 + 152, undefined);
        x["OpenVPN"]["ServerCertRef"] = A.load.Ref(ptr + 268 + 156, undefined);
        if (A.load.Bool(ptr + 268 + 216)) {
          x["OpenVPN"]["ServerPollTimeout"] = A.load.Int32(ptr + 268 + 160);
        } else {
          delete x["OpenVPN"]["ServerPollTimeout"];
        }
        if (A.load.Bool(ptr + 268 + 217)) {
          x["OpenVPN"]["Shaper"] = A.load.Int32(ptr + 268 + 164);
        } else {
          delete x["OpenVPN"]["Shaper"];
        }
        x["OpenVPN"]["StaticChallenge"] = A.load.Ref(ptr + 268 + 168, undefined);
        x["OpenVPN"]["TLSAuthContents"] = A.load.Ref(ptr + 268 + 172, undefined);
        x["OpenVPN"]["TLSRemote"] = A.load.Ref(ptr + 268 + 176, undefined);
        x["OpenVPN"]["TLSVersionMin"] = A.load.Ref(ptr + 268 + 180, undefined);
        x["OpenVPN"]["UserAuthenticationType"] = A.load.Ref(ptr + 268 + 184, undefined);
        x["OpenVPN"]["Username"] = A.load.Ref(ptr + 268 + 188, undefined);
        x["OpenVPN"]["Verb"] = A.load.Ref(ptr + 268 + 192, undefined);
        x["OpenVPN"]["VerifyHash"] = A.load.Ref(ptr + 268 + 196, undefined);
        if (A.load.Bool(ptr + 268 + 200 + 8)) {
          x["OpenVPN"]["VerifyX509"] = {};
          x["OpenVPN"]["VerifyX509"]["Name"] = A.load.Ref(ptr + 268 + 200 + 0, undefined);
          x["OpenVPN"]["VerifyX509"]["Type"] = A.load.Ref(ptr + 268 + 200 + 4, undefined);
        } else {
          delete x["OpenVPN"]["VerifyX509"];
        }
      } else {
        delete x["OpenVPN"];
      }
      if (A.load.Bool(ptr + 488 + 8)) {
        x["ThirdPartyVPN"] = {};
        x["ThirdPartyVPN"]["ExtensionID"] = A.load.Ref(ptr + 488 + 0, undefined);
        x["ThirdPartyVPN"]["ProviderName"] = A.load.Ref(ptr + 488 + 4, undefined);
      } else {
        delete x["ThirdPartyVPN"];
      }
      x["Type"] = A.load.Ref(ptr + 500, undefined);
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_WiFiProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 161, false);
        A.store.Bool(ptr + 156, false);
        A.store.Bool(ptr + 0, false);
        A.store.Bool(ptr + 157, false);
        A.store.Bool(ptr + 1, false);
        A.store.Ref(ptr + 4, undefined);

        A.store.Bool(ptr + 8 + 113, false);
        A.store.Ref(ptr + 8 + 0, undefined);

        A.store.Bool(ptr + 8 + 4 + 49, false);
        A.store.Ref(ptr + 8 + 4 + 0, undefined);

        A.store.Bool(ptr + 8 + 4 + 4 + 16, false);
        A.store.Ref(ptr + 8 + 4 + 4 + 0, undefined);
        A.store.Ref(ptr + 8 + 4 + 4 + 4, undefined);
        A.store.Ref(ptr + 8 + 4 + 4 + 8, undefined);
        A.store.Ref(ptr + 8 + 4 + 4 + 12, undefined);
        A.store.Ref(ptr + 8 + 4 + 24, undefined);
        A.store.Ref(ptr + 8 + 4 + 28, undefined);

        A.store.Bool(ptr + 8 + 4 + 32 + 16, false);
        A.store.Ref(ptr + 8 + 4 + 32 + 0, undefined);
        A.store.Ref(ptr + 8 + 4 + 32 + 4, undefined);
        A.store.Ref(ptr + 8 + 4 + 32 + 8, undefined);
        A.store.Ref(ptr + 8 + 4 + 32 + 12, undefined);
        A.store.Ref(ptr + 8 + 56, undefined);
        A.store.Ref(ptr + 8 + 60, undefined);
        A.store.Ref(ptr + 8 + 64, undefined);
        A.store.Ref(ptr + 8 + 68, undefined);
        A.store.Ref(ptr + 8 + 72, undefined);
        A.store.Ref(ptr + 8 + 76, undefined);
        A.store.Ref(ptr + 8 + 80, undefined);
        A.store.Ref(ptr + 8 + 84, undefined);
        A.store.Bool(ptr + 8 + 110, false);
        A.store.Bool(ptr + 8 + 88, false);
        A.store.Ref(ptr + 8 + 92, undefined);
        A.store.Ref(ptr + 8 + 96, undefined);
        A.store.Ref(ptr + 8 + 100, undefined);
        A.store.Ref(ptr + 8 + 104, undefined);
        A.store.Bool(ptr + 8 + 111, false);
        A.store.Bool(ptr + 8 + 108, false);
        A.store.Bool(ptr + 8 + 112, false);
        A.store.Bool(ptr + 8 + 109, false);
        A.store.Bool(ptr + 158, false);
        A.store.Int32(ptr + 124, 0);
        A.store.Ref(ptr + 128, undefined);
        A.store.Ref(ptr + 132, undefined);
        A.store.Bool(ptr + 159, false);
        A.store.Bool(ptr + 136, false);
        A.store.Ref(ptr + 140, undefined);
        A.store.Ref(ptr + 144, undefined);
        A.store.Ref(ptr + 148, undefined);
        A.store.Bool(ptr + 160, false);
        A.store.Int32(ptr + 152, 0);
      } else {
        A.store.Bool(ptr + 161, true);
        A.store.Bool(ptr + 156, "AllowGatewayARPPolling" in x ? true : false);
        A.store.Bool(ptr + 0, x["AllowGatewayARPPolling"] ? true : false);
        A.store.Bool(ptr + 157, "AutoConnect" in x ? true : false);
        A.store.Bool(ptr + 1, x["AutoConnect"] ? true : false);
        A.store.Ref(ptr + 4, x["BSSID"]);

        if (typeof x["EAP"] === "undefined") {
          A.store.Bool(ptr + 8 + 113, false);
          A.store.Ref(ptr + 8 + 0, undefined);

          A.store.Bool(ptr + 8 + 4 + 49, false);
          A.store.Ref(ptr + 8 + 4 + 0, undefined);

          A.store.Bool(ptr + 8 + 4 + 4 + 16, false);
          A.store.Ref(ptr + 8 + 4 + 4 + 0, undefined);
          A.store.Ref(ptr + 8 + 4 + 4 + 4, undefined);
          A.store.Ref(ptr + 8 + 4 + 4 + 8, undefined);
          A.store.Ref(ptr + 8 + 4 + 4 + 12, undefined);
          A.store.Ref(ptr + 8 + 4 + 24, undefined);
          A.store.Ref(ptr + 8 + 4 + 28, undefined);

          A.store.Bool(ptr + 8 + 4 + 32 + 16, false);
          A.store.Ref(ptr + 8 + 4 + 32 + 0, undefined);
          A.store.Ref(ptr + 8 + 4 + 32 + 4, undefined);
          A.store.Ref(ptr + 8 + 4 + 32 + 8, undefined);
          A.store.Ref(ptr + 8 + 4 + 32 + 12, undefined);
          A.store.Ref(ptr + 8 + 56, undefined);
          A.store.Ref(ptr + 8 + 60, undefined);
          A.store.Ref(ptr + 8 + 64, undefined);
          A.store.Ref(ptr + 8 + 68, undefined);
          A.store.Ref(ptr + 8 + 72, undefined);
          A.store.Ref(ptr + 8 + 76, undefined);
          A.store.Ref(ptr + 8 + 80, undefined);
          A.store.Ref(ptr + 8 + 84, undefined);
          A.store.Bool(ptr + 8 + 110, false);
          A.store.Bool(ptr + 8 + 88, false);
          A.store.Ref(ptr + 8 + 92, undefined);
          A.store.Ref(ptr + 8 + 96, undefined);
          A.store.Ref(ptr + 8 + 100, undefined);
          A.store.Ref(ptr + 8 + 104, undefined);
          A.store.Bool(ptr + 8 + 111, false);
          A.store.Bool(ptr + 8 + 108, false);
          A.store.Bool(ptr + 8 + 112, false);
          A.store.Bool(ptr + 8 + 109, false);
        } else {
          A.store.Bool(ptr + 8 + 113, true);
          A.store.Ref(ptr + 8 + 0, x["EAP"]["AnonymousIdentity"]);

          if (typeof x["EAP"]["ClientCertPattern"] === "undefined") {
            A.store.Bool(ptr + 8 + 4 + 49, false);
            A.store.Ref(ptr + 8 + 4 + 0, undefined);

            A.store.Bool(ptr + 8 + 4 + 4 + 16, false);
            A.store.Ref(ptr + 8 + 4 + 4 + 0, undefined);
            A.store.Ref(ptr + 8 + 4 + 4 + 4, undefined);
            A.store.Ref(ptr + 8 + 4 + 4 + 8, undefined);
            A.store.Ref(ptr + 8 + 4 + 4 + 12, undefined);
            A.store.Ref(ptr + 8 + 4 + 24, undefined);
            A.store.Ref(ptr + 8 + 4 + 28, undefined);

            A.store.Bool(ptr + 8 + 4 + 32 + 16, false);
            A.store.Ref(ptr + 8 + 4 + 32 + 0, undefined);
            A.store.Ref(ptr + 8 + 4 + 32 + 4, undefined);
            A.store.Ref(ptr + 8 + 4 + 32 + 8, undefined);
            A.store.Ref(ptr + 8 + 4 + 32 + 12, undefined);
          } else {
            A.store.Bool(ptr + 8 + 4 + 49, true);
            A.store.Ref(ptr + 8 + 4 + 0, x["EAP"]["ClientCertPattern"]["EnrollmentURI"]);

            if (typeof x["EAP"]["ClientCertPattern"]["Issuer"] === "undefined") {
              A.store.Bool(ptr + 8 + 4 + 4 + 16, false);
              A.store.Ref(ptr + 8 + 4 + 4 + 0, undefined);
              A.store.Ref(ptr + 8 + 4 + 4 + 4, undefined);
              A.store.Ref(ptr + 8 + 4 + 4 + 8, undefined);
              A.store.Ref(ptr + 8 + 4 + 4 + 12, undefined);
            } else {
              A.store.Bool(ptr + 8 + 4 + 4 + 16, true);
              A.store.Ref(ptr + 8 + 4 + 4 + 0, x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]);
              A.store.Ref(ptr + 8 + 4 + 4 + 4, x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]);
              A.store.Ref(ptr + 8 + 4 + 4 + 8, x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]);
              A.store.Ref(ptr + 8 + 4 + 4 + 12, x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]);
            }
            A.store.Ref(ptr + 8 + 4 + 24, x["EAP"]["ClientCertPattern"]["IssuerCAPEMs"]);
            A.store.Ref(ptr + 8 + 4 + 28, x["EAP"]["ClientCertPattern"]["IssuerCARef"]);

            if (typeof x["EAP"]["ClientCertPattern"]["Subject"] === "undefined") {
              A.store.Bool(ptr + 8 + 4 + 32 + 16, false);
              A.store.Ref(ptr + 8 + 4 + 32 + 0, undefined);
              A.store.Ref(ptr + 8 + 4 + 32 + 4, undefined);
              A.store.Ref(ptr + 8 + 4 + 32 + 8, undefined);
              A.store.Ref(ptr + 8 + 4 + 32 + 12, undefined);
            } else {
              A.store.Bool(ptr + 8 + 4 + 32 + 16, true);
              A.store.Ref(ptr + 8 + 4 + 32 + 0, x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]);
              A.store.Ref(ptr + 8 + 4 + 32 + 4, x["EAP"]["ClientCertPattern"]["Subject"]["Locality"]);
              A.store.Ref(ptr + 8 + 4 + 32 + 8, x["EAP"]["ClientCertPattern"]["Subject"]["Organization"]);
              A.store.Ref(ptr + 8 + 4 + 32 + 12, x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]);
            }
          }
          A.store.Ref(ptr + 8 + 56, x["EAP"]["ClientCertPKCS11Id"]);
          A.store.Ref(ptr + 8 + 60, x["EAP"]["ClientCertProvisioningProfileId"]);
          A.store.Ref(ptr + 8 + 64, x["EAP"]["ClientCertRef"]);
          A.store.Ref(ptr + 8 + 68, x["EAP"]["ClientCertType"]);
          A.store.Ref(ptr + 8 + 72, x["EAP"]["Identity"]);
          A.store.Ref(ptr + 8 + 76, x["EAP"]["Inner"]);
          A.store.Ref(ptr + 8 + 80, x["EAP"]["Outer"]);
          A.store.Ref(ptr + 8 + 84, x["EAP"]["Password"]);
          A.store.Bool(ptr + 8 + 110, "SaveCredentials" in x["EAP"] ? true : false);
          A.store.Bool(ptr + 8 + 88, x["EAP"]["SaveCredentials"] ? true : false);
          A.store.Ref(ptr + 8 + 92, x["EAP"]["ServerCAPEMs"]);
          A.store.Ref(ptr + 8 + 96, x["EAP"]["ServerCARefs"]);
          A.store.Ref(ptr + 8 + 100, x["EAP"]["SubjectMatch"]);
          A.store.Ref(ptr + 8 + 104, x["EAP"]["TLSVersionMax"]);
          A.store.Bool(ptr + 8 + 111, "UseProactiveKeyCaching" in x["EAP"] ? true : false);
          A.store.Bool(ptr + 8 + 108, x["EAP"]["UseProactiveKeyCaching"] ? true : false);
          A.store.Bool(ptr + 8 + 112, "UseSystemCAs" in x["EAP"] ? true : false);
          A.store.Bool(ptr + 8 + 109, x["EAP"]["UseSystemCAs"] ? true : false);
        }
        A.store.Bool(ptr + 158, "Frequency" in x ? true : false);
        A.store.Int32(ptr + 124, x["Frequency"] === undefined ? 0 : (x["Frequency"] as number));
        A.store.Ref(ptr + 128, x["FrequencyList"]);
        A.store.Ref(ptr + 132, x["HexSSID"]);
        A.store.Bool(ptr + 159, "HiddenSSID" in x ? true : false);
        A.store.Bool(ptr + 136, x["HiddenSSID"] ? true : false);
        A.store.Ref(ptr + 140, x["Passphrase"]);
        A.store.Ref(ptr + 144, x["SSID"]);
        A.store.Ref(ptr + 148, x["Security"]);
        A.store.Bool(ptr + 160, "SignalStrength" in x ? true : false);
        A.store.Int32(ptr + 152, x["SignalStrength"] === undefined ? 0 : (x["SignalStrength"] as number));
      }
    },
    "load_WiFiProperties": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      if (A.load.Bool(ptr + 156)) {
        x["AllowGatewayARPPolling"] = A.load.Bool(ptr + 0);
      } else {
        delete x["AllowGatewayARPPolling"];
      }
      if (A.load.Bool(ptr + 157)) {
        x["AutoConnect"] = A.load.Bool(ptr + 1);
      } else {
        delete x["AutoConnect"];
      }
      x["BSSID"] = A.load.Ref(ptr + 4, undefined);
      if (A.load.Bool(ptr + 8 + 113)) {
        x["EAP"] = {};
        x["EAP"]["AnonymousIdentity"] = A.load.Ref(ptr + 8 + 0, undefined);
        if (A.load.Bool(ptr + 8 + 4 + 49)) {
          x["EAP"]["ClientCertPattern"] = {};
          x["EAP"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(ptr + 8 + 4 + 0, undefined);
          if (A.load.Bool(ptr + 8 + 4 + 4 + 16)) {
            x["EAP"]["ClientCertPattern"]["Issuer"] = {};
            x["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(ptr + 8 + 4 + 4 + 0, undefined);
            x["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(ptr + 8 + 4 + 4 + 4, undefined);
            x["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(ptr + 8 + 4 + 4 + 8, undefined);
            x["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(ptr + 8 + 4 + 4 + 12, undefined);
          } else {
            delete x["EAP"]["ClientCertPattern"]["Issuer"];
          }
          x["EAP"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(ptr + 8 + 4 + 24, undefined);
          x["EAP"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(ptr + 8 + 4 + 28, undefined);
          if (A.load.Bool(ptr + 8 + 4 + 32 + 16)) {
            x["EAP"]["ClientCertPattern"]["Subject"] = {};
            x["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(ptr + 8 + 4 + 32 + 0, undefined);
            x["EAP"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(ptr + 8 + 4 + 32 + 4, undefined);
            x["EAP"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(ptr + 8 + 4 + 32 + 8, undefined);
            x["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(
              ptr + 8 + 4 + 32 + 12,
              undefined
            );
          } else {
            delete x["EAP"]["ClientCertPattern"]["Subject"];
          }
        } else {
          delete x["EAP"]["ClientCertPattern"];
        }
        x["EAP"]["ClientCertPKCS11Id"] = A.load.Ref(ptr + 8 + 56, undefined);
        x["EAP"]["ClientCertProvisioningProfileId"] = A.load.Ref(ptr + 8 + 60, undefined);
        x["EAP"]["ClientCertRef"] = A.load.Ref(ptr + 8 + 64, undefined);
        x["EAP"]["ClientCertType"] = A.load.Ref(ptr + 8 + 68, undefined);
        x["EAP"]["Identity"] = A.load.Ref(ptr + 8 + 72, undefined);
        x["EAP"]["Inner"] = A.load.Ref(ptr + 8 + 76, undefined);
        x["EAP"]["Outer"] = A.load.Ref(ptr + 8 + 80, undefined);
        x["EAP"]["Password"] = A.load.Ref(ptr + 8 + 84, undefined);
        if (A.load.Bool(ptr + 8 + 110)) {
          x["EAP"]["SaveCredentials"] = A.load.Bool(ptr + 8 + 88);
        } else {
          delete x["EAP"]["SaveCredentials"];
        }
        x["EAP"]["ServerCAPEMs"] = A.load.Ref(ptr + 8 + 92, undefined);
        x["EAP"]["ServerCARefs"] = A.load.Ref(ptr + 8 + 96, undefined);
        x["EAP"]["SubjectMatch"] = A.load.Ref(ptr + 8 + 100, undefined);
        x["EAP"]["TLSVersionMax"] = A.load.Ref(ptr + 8 + 104, undefined);
        if (A.load.Bool(ptr + 8 + 111)) {
          x["EAP"]["UseProactiveKeyCaching"] = A.load.Bool(ptr + 8 + 108);
        } else {
          delete x["EAP"]["UseProactiveKeyCaching"];
        }
        if (A.load.Bool(ptr + 8 + 112)) {
          x["EAP"]["UseSystemCAs"] = A.load.Bool(ptr + 8 + 109);
        } else {
          delete x["EAP"]["UseSystemCAs"];
        }
      } else {
        delete x["EAP"];
      }
      if (A.load.Bool(ptr + 158)) {
        x["Frequency"] = A.load.Int32(ptr + 124);
      } else {
        delete x["Frequency"];
      }
      x["FrequencyList"] = A.load.Ref(ptr + 128, undefined);
      x["HexSSID"] = A.load.Ref(ptr + 132, undefined);
      if (A.load.Bool(ptr + 159)) {
        x["HiddenSSID"] = A.load.Bool(ptr + 136);
      } else {
        delete x["HiddenSSID"];
      }
      x["Passphrase"] = A.load.Ref(ptr + 140, undefined);
      x["SSID"] = A.load.Ref(ptr + 144, undefined);
      x["Security"] = A.load.Ref(ptr + 148, undefined);
      if (A.load.Bool(ptr + 160)) {
        x["SignalStrength"] = A.load.Int32(ptr + 152);
      } else {
        delete x["SignalStrength"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_NetworkProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 1234, false);

        A.store.Bool(ptr + 0 + 219, false);
        A.store.Bool(ptr + 0 + 213, false);
        A.store.Bool(ptr + 0 + 0, false);

        A.store.Bool(ptr + 0 + 4 + 28, false);
        A.store.Ref(ptr + 0 + 4 + 0, undefined);
        A.store.Ref(ptr + 0 + 4 + 4, undefined);
        A.store.Ref(ptr + 0 + 4 + 8, undefined);
        A.store.Ref(ptr + 0 + 4 + 12, undefined);
        A.store.Ref(ptr + 0 + 4 + 16, undefined);
        A.store.Ref(ptr + 0 + 4 + 20, undefined);
        A.store.Ref(ptr + 0 + 4 + 24, undefined);
        A.store.Ref(ptr + 0 + 36, undefined);
        A.store.Ref(ptr + 0 + 40, undefined);
        A.store.Enum(ptr + 0 + 44, -1);
        A.store.Bool(ptr + 0 + 214, false);
        A.store.Bool(ptr + 0 + 48, false);
        A.store.Ref(ptr + 0 + 52, undefined);
        A.store.Ref(ptr + 0 + 56, undefined);
        A.store.Ref(ptr + 0 + 60, undefined);
        A.store.Ref(ptr + 0 + 64, undefined);
        A.store.Ref(ptr + 0 + 68, undefined);

        A.store.Bool(ptr + 0 + 72 + 12, false);
        A.store.Ref(ptr + 0 + 72 + 0, undefined);
        A.store.Ref(ptr + 0 + 72 + 4, undefined);
        A.store.Ref(ptr + 0 + 72 + 8, undefined);
        A.store.Ref(ptr + 0 + 88, undefined);
        A.store.Ref(ptr + 0 + 92, undefined);

        A.store.Bool(ptr + 0 + 96 + 28, false);
        A.store.Ref(ptr + 0 + 96 + 0, undefined);
        A.store.Ref(ptr + 0 + 96 + 4, undefined);
        A.store.Ref(ptr + 0 + 96 + 8, undefined);
        A.store.Ref(ptr + 0 + 96 + 12, undefined);
        A.store.Ref(ptr + 0 + 96 + 16, undefined);
        A.store.Ref(ptr + 0 + 96 + 20, undefined);
        A.store.Ref(ptr + 0 + 96 + 24, undefined);
        A.store.Ref(ptr + 0 + 128, undefined);
        A.store.Ref(ptr + 0 + 132, undefined);
        A.store.Ref(ptr + 0 + 136, undefined);
        A.store.Ref(ptr + 0 + 140, undefined);
        A.store.Ref(ptr + 0 + 144, undefined);
        A.store.Ref(ptr + 0 + 148, undefined);

        A.store.Bool(ptr + 0 + 152 + 12, false);
        A.store.Ref(ptr + 0 + 152 + 0, undefined);
        A.store.Ref(ptr + 0 + 152 + 4, undefined);
        A.store.Ref(ptr + 0 + 152 + 8, undefined);
        A.store.Ref(ptr + 0 + 168, undefined);
        A.store.Bool(ptr + 0 + 215, false);
        A.store.Bool(ptr + 0 + 172, false);

        A.store.Bool(ptr + 0 + 176 + 12, false);
        A.store.Ref(ptr + 0 + 176 + 0, undefined);
        A.store.Ref(ptr + 0 + 176 + 4, undefined);
        A.store.Ref(ptr + 0 + 176 + 8, undefined);

        A.store.Bool(ptr + 0 + 192 + 14, false);
        A.store.Ref(ptr + 0 + 192 + 0, undefined);
        A.store.Bool(ptr + 0 + 192 + 12, false);
        A.store.Bool(ptr + 0 + 192 + 4, false);
        A.store.Bool(ptr + 0 + 192 + 13, false);
        A.store.Int32(ptr + 0 + 192 + 8, 0);
        A.store.Bool(ptr + 0 + 216, false);
        A.store.Bool(ptr + 0 + 207, false);
        A.store.Bool(ptr + 0 + 217, false);
        A.store.Int32(ptr + 0 + 208, 0);
        A.store.Bool(ptr + 0 + 218, false);
        A.store.Bool(ptr + 0 + 212, false);
        A.store.Bool(ptr + 1230, false);
        A.store.Bool(ptr + 220, false);
        A.store.Enum(ptr + 224, -1);
        A.store.Ref(ptr + 228, undefined);

        A.store.Bool(ptr + 232 + 123, false);
        A.store.Bool(ptr + 232 + 122, false);
        A.store.Bool(ptr + 232 + 0, false);
        A.store.Ref(ptr + 232 + 4, undefined);

        A.store.Bool(ptr + 232 + 8 + 113, false);
        A.store.Ref(ptr + 232 + 8 + 0, undefined);

        A.store.Bool(ptr + 232 + 8 + 4 + 49, false);
        A.store.Ref(ptr + 232 + 8 + 4 + 0, undefined);

        A.store.Bool(ptr + 232 + 8 + 4 + 4 + 16, false);
        A.store.Ref(ptr + 232 + 8 + 4 + 4 + 0, undefined);
        A.store.Ref(ptr + 232 + 8 + 4 + 4 + 4, undefined);
        A.store.Ref(ptr + 232 + 8 + 4 + 4 + 8, undefined);
        A.store.Ref(ptr + 232 + 8 + 4 + 4 + 12, undefined);
        A.store.Ref(ptr + 232 + 8 + 4 + 24, undefined);
        A.store.Ref(ptr + 232 + 8 + 4 + 28, undefined);

        A.store.Bool(ptr + 232 + 8 + 4 + 32 + 16, false);
        A.store.Ref(ptr + 232 + 8 + 4 + 32 + 0, undefined);
        A.store.Ref(ptr + 232 + 8 + 4 + 32 + 4, undefined);
        A.store.Ref(ptr + 232 + 8 + 4 + 32 + 8, undefined);
        A.store.Ref(ptr + 232 + 8 + 4 + 32 + 12, undefined);
        A.store.Ref(ptr + 232 + 8 + 56, undefined);
        A.store.Ref(ptr + 232 + 8 + 60, undefined);
        A.store.Ref(ptr + 232 + 8 + 64, undefined);
        A.store.Ref(ptr + 232 + 8 + 68, undefined);
        A.store.Ref(ptr + 232 + 8 + 72, undefined);
        A.store.Ref(ptr + 232 + 8 + 76, undefined);
        A.store.Ref(ptr + 232 + 8 + 80, undefined);
        A.store.Ref(ptr + 232 + 8 + 84, undefined);
        A.store.Bool(ptr + 232 + 8 + 110, false);
        A.store.Bool(ptr + 232 + 8 + 88, false);
        A.store.Ref(ptr + 232 + 8 + 92, undefined);
        A.store.Ref(ptr + 232 + 8 + 96, undefined);
        A.store.Ref(ptr + 232 + 8 + 100, undefined);
        A.store.Ref(ptr + 232 + 8 + 104, undefined);
        A.store.Bool(ptr + 232 + 8 + 111, false);
        A.store.Bool(ptr + 232 + 8 + 108, false);
        A.store.Bool(ptr + 232 + 8 + 112, false);
        A.store.Bool(ptr + 232 + 8 + 109, false);
        A.store.Ref(ptr + 356, undefined);
        A.store.Enum(ptr + 360, -1);
        A.store.Ref(ptr + 364, undefined);
        A.store.Ref(ptr + 368, undefined);
        A.store.Bool(ptr + 1231, false);
        A.store.Bool(ptr + 372, false);
        A.store.Ref(ptr + 376, undefined);
        A.store.Enum(ptr + 380, -1);
        A.store.Bool(ptr + 1232, false);
        A.store.Int32(ptr + 384, 0);

        A.store.Bool(ptr + 388 + 60, false);
        A.store.Enum(ptr + 388 + 0, -1);

        A.store.Bool(ptr + 388 + 4 + 46, false);

        A.store.Bool(ptr + 388 + 4 + 0 + 9, false);
        A.store.Ref(ptr + 388 + 4 + 0 + 0, undefined);
        A.store.Bool(ptr + 388 + 4 + 0 + 8, false);
        A.store.Int32(ptr + 388 + 4 + 0 + 4, 0);

        A.store.Bool(ptr + 388 + 4 + 12 + 9, false);
        A.store.Ref(ptr + 388 + 4 + 12 + 0, undefined);
        A.store.Bool(ptr + 388 + 4 + 12 + 8, false);
        A.store.Int32(ptr + 388 + 4 + 12 + 4, 0);

        A.store.Bool(ptr + 388 + 4 + 24 + 9, false);
        A.store.Ref(ptr + 388 + 4 + 24 + 0, undefined);
        A.store.Bool(ptr + 388 + 4 + 24 + 8, false);
        A.store.Int32(ptr + 388 + 4 + 24 + 4, 0);

        A.store.Bool(ptr + 388 + 4 + 36 + 9, false);
        A.store.Ref(ptr + 388 + 4 + 36 + 0, undefined);
        A.store.Bool(ptr + 388 + 4 + 36 + 8, false);
        A.store.Int32(ptr + 388 + 4 + 36 + 4, 0);
        A.store.Ref(ptr + 388 + 52, undefined);
        A.store.Ref(ptr + 388 + 56, undefined);
        A.store.Bool(ptr + 1233, false);
        A.store.Bool(ptr + 449, false);

        A.store.Bool(ptr + 452 + 37, false);
        A.store.Ref(ptr + 452 + 0, undefined);
        A.store.Ref(ptr + 452 + 4, undefined);
        A.store.Ref(ptr + 452 + 8, undefined);
        A.store.Ref(ptr + 452 + 12, undefined);
        A.store.Ref(ptr + 452 + 16, undefined);
        A.store.Ref(ptr + 452 + 20, undefined);
        A.store.Bool(ptr + 452 + 36, false);
        A.store.Int32(ptr + 452 + 24, 0);
        A.store.Ref(ptr + 452 + 28, undefined);
        A.store.Ref(ptr + 452 + 32, undefined);

        A.store.Bool(ptr + 492 + 37, false);
        A.store.Ref(ptr + 492 + 0, undefined);
        A.store.Ref(ptr + 492 + 4, undefined);
        A.store.Ref(ptr + 492 + 8, undefined);
        A.store.Ref(ptr + 492 + 12, undefined);
        A.store.Ref(ptr + 492 + 16, undefined);
        A.store.Ref(ptr + 492 + 20, undefined);
        A.store.Bool(ptr + 492 + 36, false);
        A.store.Int32(ptr + 492 + 24, 0);
        A.store.Ref(ptr + 492 + 28, undefined);
        A.store.Ref(ptr + 492 + 32, undefined);
        A.store.Ref(ptr + 532, undefined);

        A.store.Bool(ptr + 536 + 19, false);
        A.store.Bool(ptr + 536 + 16, false);
        A.store.Int32(ptr + 536 + 0, 0);
        A.store.Ref(ptr + 536 + 4, undefined);
        A.store.Bool(ptr + 536 + 17, false);
        A.store.Bool(ptr + 536 + 8, false);
        A.store.Bool(ptr + 536 + 18, false);
        A.store.Int32(ptr + 536 + 12, 0);
        A.store.Enum(ptr + 556, -1);

        A.store.Bool(ptr + 560 + 505, false);
        A.store.Bool(ptr + 560 + 504, false);
        A.store.Bool(ptr + 560 + 0, false);
        A.store.Ref(ptr + 560 + 4, undefined);

        A.store.Bool(ptr + 560 + 8 + 236, false);
        A.store.Ref(ptr + 560 + 8 + 0, undefined);

        A.store.Bool(ptr + 560 + 8 + 4 + 49, false);
        A.store.Ref(ptr + 560 + 8 + 4 + 0, undefined);

        A.store.Bool(ptr + 560 + 8 + 4 + 4 + 16, false);
        A.store.Ref(ptr + 560 + 8 + 4 + 4 + 0, undefined);
        A.store.Ref(ptr + 560 + 8 + 4 + 4 + 4, undefined);
        A.store.Ref(ptr + 560 + 8 + 4 + 4 + 8, undefined);
        A.store.Ref(ptr + 560 + 8 + 4 + 4 + 12, undefined);
        A.store.Ref(ptr + 560 + 8 + 4 + 24, undefined);
        A.store.Ref(ptr + 560 + 8 + 4 + 28, undefined);

        A.store.Bool(ptr + 560 + 8 + 4 + 32 + 16, false);
        A.store.Ref(ptr + 560 + 8 + 4 + 32 + 0, undefined);
        A.store.Ref(ptr + 560 + 8 + 4 + 32 + 4, undefined);
        A.store.Ref(ptr + 560 + 8 + 4 + 32 + 8, undefined);
        A.store.Ref(ptr + 560 + 8 + 4 + 32 + 12, undefined);
        A.store.Ref(ptr + 560 + 8 + 56, undefined);
        A.store.Ref(ptr + 560 + 8 + 60, undefined);
        A.store.Ref(ptr + 560 + 8 + 64, undefined);
        A.store.Ref(ptr + 560 + 8 + 68, undefined);

        A.store.Bool(ptr + 560 + 8 + 72 + 113, false);
        A.store.Ref(ptr + 560 + 8 + 72 + 0, undefined);

        A.store.Bool(ptr + 560 + 8 + 72 + 4 + 49, false);
        A.store.Ref(ptr + 560 + 8 + 72 + 4 + 0, undefined);

        A.store.Bool(ptr + 560 + 8 + 72 + 4 + 4 + 16, false);
        A.store.Ref(ptr + 560 + 8 + 72 + 4 + 4 + 0, undefined);
        A.store.Ref(ptr + 560 + 8 + 72 + 4 + 4 + 4, undefined);
        A.store.Ref(ptr + 560 + 8 + 72 + 4 + 4 + 8, undefined);
        A.store.Ref(ptr + 560 + 8 + 72 + 4 + 4 + 12, undefined);
        A.store.Ref(ptr + 560 + 8 + 72 + 4 + 24, undefined);
        A.store.Ref(ptr + 560 + 8 + 72 + 4 + 28, undefined);

        A.store.Bool(ptr + 560 + 8 + 72 + 4 + 32 + 16, false);
        A.store.Ref(ptr + 560 + 8 + 72 + 4 + 32 + 0, undefined);
        A.store.Ref(ptr + 560 + 8 + 72 + 4 + 32 + 4, undefined);
        A.store.Ref(ptr + 560 + 8 + 72 + 4 + 32 + 8, undefined);
        A.store.Ref(ptr + 560 + 8 + 72 + 4 + 32 + 12, undefined);
        A.store.Ref(ptr + 560 + 8 + 72 + 56, undefined);
        A.store.Ref(ptr + 560 + 8 + 72 + 60, undefined);
        A.store.Ref(ptr + 560 + 8 + 72 + 64, undefined);
        A.store.Ref(ptr + 560 + 8 + 72 + 68, undefined);
        A.store.Ref(ptr + 560 + 8 + 72 + 72, undefined);
        A.store.Ref(ptr + 560 + 8 + 72 + 76, undefined);
        A.store.Ref(ptr + 560 + 8 + 72 + 80, undefined);
        A.store.Ref(ptr + 560 + 8 + 72 + 84, undefined);
        A.store.Bool(ptr + 560 + 8 + 72 + 110, false);
        A.store.Bool(ptr + 560 + 8 + 72 + 88, false);
        A.store.Ref(ptr + 560 + 8 + 72 + 92, undefined);
        A.store.Ref(ptr + 560 + 8 + 72 + 96, undefined);
        A.store.Ref(ptr + 560 + 8 + 72 + 100, undefined);
        A.store.Ref(ptr + 560 + 8 + 72 + 104, undefined);
        A.store.Bool(ptr + 560 + 8 + 72 + 111, false);
        A.store.Bool(ptr + 560 + 8 + 72 + 108, false);
        A.store.Bool(ptr + 560 + 8 + 72 + 112, false);
        A.store.Bool(ptr + 560 + 8 + 72 + 109, false);
        A.store.Ref(ptr + 560 + 8 + 188, undefined);
        A.store.Bool(ptr + 560 + 8 + 234, false);
        A.store.Int32(ptr + 560 + 8 + 192, 0);
        A.store.Ref(ptr + 560 + 8 + 196, undefined);
        A.store.Ref(ptr + 560 + 8 + 200, undefined);
        A.store.Ref(ptr + 560 + 8 + 204, undefined);
        A.store.Bool(ptr + 560 + 8 + 235, false);
        A.store.Bool(ptr + 560 + 8 + 208, false);
        A.store.Ref(ptr + 560 + 8 + 212, undefined);
        A.store.Ref(ptr + 560 + 8 + 216, undefined);

        A.store.Bool(ptr + 560 + 8 + 220 + 13, false);
        A.store.Ref(ptr + 560 + 8 + 220 + 0, undefined);
        A.store.Bool(ptr + 560 + 8 + 220 + 12, false);
        A.store.Bool(ptr + 560 + 8 + 220 + 4, false);
        A.store.Ref(ptr + 560 + 8 + 220 + 8, undefined);

        A.store.Bool(ptr + 560 + 248 + 18, false);
        A.store.Bool(ptr + 560 + 248 + 16, false);
        A.store.Bool(ptr + 560 + 248 + 0, false);
        A.store.Ref(ptr + 560 + 248 + 4, undefined);
        A.store.Bool(ptr + 560 + 248 + 17, false);
        A.store.Bool(ptr + 560 + 248 + 8, false);
        A.store.Ref(ptr + 560 + 248 + 12, undefined);

        A.store.Bool(ptr + 560 + 268 + 218, false);
        A.store.Ref(ptr + 560 + 268 + 0, undefined);
        A.store.Ref(ptr + 560 + 268 + 4, undefined);
        A.store.Bool(ptr + 560 + 268 + 209, false);
        A.store.Bool(ptr + 560 + 268 + 8, false);
        A.store.Ref(ptr + 560 + 268 + 12, undefined);
        A.store.Ref(ptr + 560 + 268 + 16, undefined);

        A.store.Bool(ptr + 560 + 268 + 20 + 49, false);
        A.store.Ref(ptr + 560 + 268 + 20 + 0, undefined);

        A.store.Bool(ptr + 560 + 268 + 20 + 4 + 16, false);
        A.store.Ref(ptr + 560 + 268 + 20 + 4 + 0, undefined);
        A.store.Ref(ptr + 560 + 268 + 20 + 4 + 4, undefined);
        A.store.Ref(ptr + 560 + 268 + 20 + 4 + 8, undefined);
        A.store.Ref(ptr + 560 + 268 + 20 + 4 + 12, undefined);
        A.store.Ref(ptr + 560 + 268 + 20 + 24, undefined);
        A.store.Ref(ptr + 560 + 268 + 20 + 28, undefined);

        A.store.Bool(ptr + 560 + 268 + 20 + 32 + 16, false);
        A.store.Ref(ptr + 560 + 268 + 20 + 32 + 0, undefined);
        A.store.Ref(ptr + 560 + 268 + 20 + 32 + 4, undefined);
        A.store.Ref(ptr + 560 + 268 + 20 + 32 + 8, undefined);
        A.store.Ref(ptr + 560 + 268 + 20 + 32 + 12, undefined);
        A.store.Ref(ptr + 560 + 268 + 72, undefined);
        A.store.Ref(ptr + 560 + 268 + 76, undefined);
        A.store.Ref(ptr + 560 + 268 + 80, undefined);
        A.store.Ref(ptr + 560 + 268 + 84, undefined);
        A.store.Bool(ptr + 560 + 268 + 210, false);
        A.store.Bool(ptr + 560 + 268 + 88, false);
        A.store.Ref(ptr + 560 + 268 + 92, undefined);
        A.store.Bool(ptr + 560 + 268 + 211, false);
        A.store.Bool(ptr + 560 + 268 + 96, false);
        A.store.Ref(ptr + 560 + 268 + 100, undefined);
        A.store.Ref(ptr + 560 + 268 + 104, undefined);
        A.store.Ref(ptr + 560 + 268 + 108, undefined);
        A.store.Ref(ptr + 560 + 268 + 112, undefined);
        A.store.Bool(ptr + 560 + 268 + 212, false);
        A.store.Int32(ptr + 560 + 268 + 116, 0);
        A.store.Ref(ptr + 560 + 268 + 120, undefined);
        A.store.Bool(ptr + 560 + 268 + 213, false);
        A.store.Bool(ptr + 560 + 268 + 124, false);
        A.store.Ref(ptr + 560 + 268 + 128, undefined);
        A.store.Ref(ptr + 560 + 268 + 132, undefined);
        A.store.Ref(ptr + 560 + 268 + 136, undefined);
        A.store.Bool(ptr + 560 + 268 + 214, false);
        A.store.Int32(ptr + 560 + 268 + 140, 0);
        A.store.Bool(ptr + 560 + 268 + 215, false);
        A.store.Bool(ptr + 560 + 268 + 144, false);
        A.store.Ref(ptr + 560 + 268 + 148, undefined);
        A.store.Ref(ptr + 560 + 268 + 152, undefined);
        A.store.Ref(ptr + 560 + 268 + 156, undefined);
        A.store.Bool(ptr + 560 + 268 + 216, false);
        A.store.Int32(ptr + 560 + 268 + 160, 0);
        A.store.Bool(ptr + 560 + 268 + 217, false);
        A.store.Int32(ptr + 560 + 268 + 164, 0);
        A.store.Ref(ptr + 560 + 268 + 168, undefined);
        A.store.Ref(ptr + 560 + 268 + 172, undefined);
        A.store.Ref(ptr + 560 + 268 + 176, undefined);
        A.store.Ref(ptr + 560 + 268 + 180, undefined);
        A.store.Ref(ptr + 560 + 268 + 184, undefined);
        A.store.Ref(ptr + 560 + 268 + 188, undefined);
        A.store.Ref(ptr + 560 + 268 + 192, undefined);
        A.store.Ref(ptr + 560 + 268 + 196, undefined);

        A.store.Bool(ptr + 560 + 268 + 200 + 8, false);
        A.store.Ref(ptr + 560 + 268 + 200 + 0, undefined);
        A.store.Ref(ptr + 560 + 268 + 200 + 4, undefined);

        A.store.Bool(ptr + 560 + 488 + 8, false);
        A.store.Ref(ptr + 560 + 488 + 0, undefined);
        A.store.Ref(ptr + 560 + 488 + 4, undefined);
        A.store.Ref(ptr + 560 + 500, undefined);

        A.store.Bool(ptr + 1068 + 161, false);
        A.store.Bool(ptr + 1068 + 156, false);
        A.store.Bool(ptr + 1068 + 0, false);
        A.store.Bool(ptr + 1068 + 157, false);
        A.store.Bool(ptr + 1068 + 1, false);
        A.store.Ref(ptr + 1068 + 4, undefined);

        A.store.Bool(ptr + 1068 + 8 + 113, false);
        A.store.Ref(ptr + 1068 + 8 + 0, undefined);

        A.store.Bool(ptr + 1068 + 8 + 4 + 49, false);
        A.store.Ref(ptr + 1068 + 8 + 4 + 0, undefined);

        A.store.Bool(ptr + 1068 + 8 + 4 + 4 + 16, false);
        A.store.Ref(ptr + 1068 + 8 + 4 + 4 + 0, undefined);
        A.store.Ref(ptr + 1068 + 8 + 4 + 4 + 4, undefined);
        A.store.Ref(ptr + 1068 + 8 + 4 + 4 + 8, undefined);
        A.store.Ref(ptr + 1068 + 8 + 4 + 4 + 12, undefined);
        A.store.Ref(ptr + 1068 + 8 + 4 + 24, undefined);
        A.store.Ref(ptr + 1068 + 8 + 4 + 28, undefined);

        A.store.Bool(ptr + 1068 + 8 + 4 + 32 + 16, false);
        A.store.Ref(ptr + 1068 + 8 + 4 + 32 + 0, undefined);
        A.store.Ref(ptr + 1068 + 8 + 4 + 32 + 4, undefined);
        A.store.Ref(ptr + 1068 + 8 + 4 + 32 + 8, undefined);
        A.store.Ref(ptr + 1068 + 8 + 4 + 32 + 12, undefined);
        A.store.Ref(ptr + 1068 + 8 + 56, undefined);
        A.store.Ref(ptr + 1068 + 8 + 60, undefined);
        A.store.Ref(ptr + 1068 + 8 + 64, undefined);
        A.store.Ref(ptr + 1068 + 8 + 68, undefined);
        A.store.Ref(ptr + 1068 + 8 + 72, undefined);
        A.store.Ref(ptr + 1068 + 8 + 76, undefined);
        A.store.Ref(ptr + 1068 + 8 + 80, undefined);
        A.store.Ref(ptr + 1068 + 8 + 84, undefined);
        A.store.Bool(ptr + 1068 + 8 + 110, false);
        A.store.Bool(ptr + 1068 + 8 + 88, false);
        A.store.Ref(ptr + 1068 + 8 + 92, undefined);
        A.store.Ref(ptr + 1068 + 8 + 96, undefined);
        A.store.Ref(ptr + 1068 + 8 + 100, undefined);
        A.store.Ref(ptr + 1068 + 8 + 104, undefined);
        A.store.Bool(ptr + 1068 + 8 + 111, false);
        A.store.Bool(ptr + 1068 + 8 + 108, false);
        A.store.Bool(ptr + 1068 + 8 + 112, false);
        A.store.Bool(ptr + 1068 + 8 + 109, false);
        A.store.Bool(ptr + 1068 + 158, false);
        A.store.Int32(ptr + 1068 + 124, 0);
        A.store.Ref(ptr + 1068 + 128, undefined);
        A.store.Ref(ptr + 1068 + 132, undefined);
        A.store.Bool(ptr + 1068 + 159, false);
        A.store.Bool(ptr + 1068 + 136, false);
        A.store.Ref(ptr + 1068 + 140, undefined);
        A.store.Ref(ptr + 1068 + 144, undefined);
        A.store.Ref(ptr + 1068 + 148, undefined);
        A.store.Bool(ptr + 1068 + 160, false);
        A.store.Int32(ptr + 1068 + 152, 0);
      } else {
        A.store.Bool(ptr + 1234, true);

        if (typeof x["Cellular"] === "undefined") {
          A.store.Bool(ptr + 0 + 219, false);
          A.store.Bool(ptr + 0 + 213, false);
          A.store.Bool(ptr + 0 + 0, false);

          A.store.Bool(ptr + 0 + 4 + 28, false);
          A.store.Ref(ptr + 0 + 4 + 0, undefined);
          A.store.Ref(ptr + 0 + 4 + 4, undefined);
          A.store.Ref(ptr + 0 + 4 + 8, undefined);
          A.store.Ref(ptr + 0 + 4 + 12, undefined);
          A.store.Ref(ptr + 0 + 4 + 16, undefined);
          A.store.Ref(ptr + 0 + 4 + 20, undefined);
          A.store.Ref(ptr + 0 + 4 + 24, undefined);
          A.store.Ref(ptr + 0 + 36, undefined);
          A.store.Ref(ptr + 0 + 40, undefined);
          A.store.Enum(ptr + 0 + 44, -1);
          A.store.Bool(ptr + 0 + 214, false);
          A.store.Bool(ptr + 0 + 48, false);
          A.store.Ref(ptr + 0 + 52, undefined);
          A.store.Ref(ptr + 0 + 56, undefined);
          A.store.Ref(ptr + 0 + 60, undefined);
          A.store.Ref(ptr + 0 + 64, undefined);
          A.store.Ref(ptr + 0 + 68, undefined);

          A.store.Bool(ptr + 0 + 72 + 12, false);
          A.store.Ref(ptr + 0 + 72 + 0, undefined);
          A.store.Ref(ptr + 0 + 72 + 4, undefined);
          A.store.Ref(ptr + 0 + 72 + 8, undefined);
          A.store.Ref(ptr + 0 + 88, undefined);
          A.store.Ref(ptr + 0 + 92, undefined);

          A.store.Bool(ptr + 0 + 96 + 28, false);
          A.store.Ref(ptr + 0 + 96 + 0, undefined);
          A.store.Ref(ptr + 0 + 96 + 4, undefined);
          A.store.Ref(ptr + 0 + 96 + 8, undefined);
          A.store.Ref(ptr + 0 + 96 + 12, undefined);
          A.store.Ref(ptr + 0 + 96 + 16, undefined);
          A.store.Ref(ptr + 0 + 96 + 20, undefined);
          A.store.Ref(ptr + 0 + 96 + 24, undefined);
          A.store.Ref(ptr + 0 + 128, undefined);
          A.store.Ref(ptr + 0 + 132, undefined);
          A.store.Ref(ptr + 0 + 136, undefined);
          A.store.Ref(ptr + 0 + 140, undefined);
          A.store.Ref(ptr + 0 + 144, undefined);
          A.store.Ref(ptr + 0 + 148, undefined);

          A.store.Bool(ptr + 0 + 152 + 12, false);
          A.store.Ref(ptr + 0 + 152 + 0, undefined);
          A.store.Ref(ptr + 0 + 152 + 4, undefined);
          A.store.Ref(ptr + 0 + 152 + 8, undefined);
          A.store.Ref(ptr + 0 + 168, undefined);
          A.store.Bool(ptr + 0 + 215, false);
          A.store.Bool(ptr + 0 + 172, false);

          A.store.Bool(ptr + 0 + 176 + 12, false);
          A.store.Ref(ptr + 0 + 176 + 0, undefined);
          A.store.Ref(ptr + 0 + 176 + 4, undefined);
          A.store.Ref(ptr + 0 + 176 + 8, undefined);

          A.store.Bool(ptr + 0 + 192 + 14, false);
          A.store.Ref(ptr + 0 + 192 + 0, undefined);
          A.store.Bool(ptr + 0 + 192 + 12, false);
          A.store.Bool(ptr + 0 + 192 + 4, false);
          A.store.Bool(ptr + 0 + 192 + 13, false);
          A.store.Int32(ptr + 0 + 192 + 8, 0);
          A.store.Bool(ptr + 0 + 216, false);
          A.store.Bool(ptr + 0 + 207, false);
          A.store.Bool(ptr + 0 + 217, false);
          A.store.Int32(ptr + 0 + 208, 0);
          A.store.Bool(ptr + 0 + 218, false);
          A.store.Bool(ptr + 0 + 212, false);
        } else {
          A.store.Bool(ptr + 0 + 219, true);
          A.store.Bool(ptr + 0 + 213, "AutoConnect" in x["Cellular"] ? true : false);
          A.store.Bool(ptr + 0 + 0, x["Cellular"]["AutoConnect"] ? true : false);

          if (typeof x["Cellular"]["APN"] === "undefined") {
            A.store.Bool(ptr + 0 + 4 + 28, false);
            A.store.Ref(ptr + 0 + 4 + 0, undefined);
            A.store.Ref(ptr + 0 + 4 + 4, undefined);
            A.store.Ref(ptr + 0 + 4 + 8, undefined);
            A.store.Ref(ptr + 0 + 4 + 12, undefined);
            A.store.Ref(ptr + 0 + 4 + 16, undefined);
            A.store.Ref(ptr + 0 + 4 + 20, undefined);
            A.store.Ref(ptr + 0 + 4 + 24, undefined);
          } else {
            A.store.Bool(ptr + 0 + 4 + 28, true);
            A.store.Ref(ptr + 0 + 4 + 0, x["Cellular"]["APN"]["AccessPointName"]);
            A.store.Ref(ptr + 0 + 4 + 4, x["Cellular"]["APN"]["Authentication"]);
            A.store.Ref(ptr + 0 + 4 + 8, x["Cellular"]["APN"]["Language"]);
            A.store.Ref(ptr + 0 + 4 + 12, x["Cellular"]["APN"]["LocalizedName"]);
            A.store.Ref(ptr + 0 + 4 + 16, x["Cellular"]["APN"]["Name"]);
            A.store.Ref(ptr + 0 + 4 + 20, x["Cellular"]["APN"]["Password"]);
            A.store.Ref(ptr + 0 + 4 + 24, x["Cellular"]["APN"]["Username"]);
          }
          A.store.Ref(ptr + 0 + 36, x["Cellular"]["APNList"]);
          A.store.Ref(ptr + 0 + 40, x["Cellular"]["ActivationType"]);
          A.store.Enum(
            ptr + 0 + 44,
            ["Activated", "Activating", "NotActivated", "PartiallyActivated"].indexOf(
              x["Cellular"]["ActivationState"] as string
            )
          );
          A.store.Bool(ptr + 0 + 214, "AllowRoaming" in x["Cellular"] ? true : false);
          A.store.Bool(ptr + 0 + 48, x["Cellular"]["AllowRoaming"] ? true : false);
          A.store.Ref(ptr + 0 + 52, x["Cellular"]["ESN"]);
          A.store.Ref(ptr + 0 + 56, x["Cellular"]["Family"]);
          A.store.Ref(ptr + 0 + 60, x["Cellular"]["FirmwareRevision"]);
          A.store.Ref(ptr + 0 + 64, x["Cellular"]["FoundNetworks"]);
          A.store.Ref(ptr + 0 + 68, x["Cellular"]["HardwareRevision"]);

          if (typeof x["Cellular"]["HomeProvider"] === "undefined") {
            A.store.Bool(ptr + 0 + 72 + 12, false);
            A.store.Ref(ptr + 0 + 72 + 0, undefined);
            A.store.Ref(ptr + 0 + 72 + 4, undefined);
            A.store.Ref(ptr + 0 + 72 + 8, undefined);
          } else {
            A.store.Bool(ptr + 0 + 72 + 12, true);
            A.store.Ref(ptr + 0 + 72 + 0, x["Cellular"]["HomeProvider"]["Name"]);
            A.store.Ref(ptr + 0 + 72 + 4, x["Cellular"]["HomeProvider"]["Code"]);
            A.store.Ref(ptr + 0 + 72 + 8, x["Cellular"]["HomeProvider"]["Country"]);
          }
          A.store.Ref(ptr + 0 + 88, x["Cellular"]["ICCID"]);
          A.store.Ref(ptr + 0 + 92, x["Cellular"]["IMEI"]);

          if (typeof x["Cellular"]["LastGoodAPN"] === "undefined") {
            A.store.Bool(ptr + 0 + 96 + 28, false);
            A.store.Ref(ptr + 0 + 96 + 0, undefined);
            A.store.Ref(ptr + 0 + 96 + 4, undefined);
            A.store.Ref(ptr + 0 + 96 + 8, undefined);
            A.store.Ref(ptr + 0 + 96 + 12, undefined);
            A.store.Ref(ptr + 0 + 96 + 16, undefined);
            A.store.Ref(ptr + 0 + 96 + 20, undefined);
            A.store.Ref(ptr + 0 + 96 + 24, undefined);
          } else {
            A.store.Bool(ptr + 0 + 96 + 28, true);
            A.store.Ref(ptr + 0 + 96 + 0, x["Cellular"]["LastGoodAPN"]["AccessPointName"]);
            A.store.Ref(ptr + 0 + 96 + 4, x["Cellular"]["LastGoodAPN"]["Authentication"]);
            A.store.Ref(ptr + 0 + 96 + 8, x["Cellular"]["LastGoodAPN"]["Language"]);
            A.store.Ref(ptr + 0 + 96 + 12, x["Cellular"]["LastGoodAPN"]["LocalizedName"]);
            A.store.Ref(ptr + 0 + 96 + 16, x["Cellular"]["LastGoodAPN"]["Name"]);
            A.store.Ref(ptr + 0 + 96 + 20, x["Cellular"]["LastGoodAPN"]["Password"]);
            A.store.Ref(ptr + 0 + 96 + 24, x["Cellular"]["LastGoodAPN"]["Username"]);
          }
          A.store.Ref(ptr + 0 + 128, x["Cellular"]["Manufacturer"]);
          A.store.Ref(ptr + 0 + 132, x["Cellular"]["MDN"]);
          A.store.Ref(ptr + 0 + 136, x["Cellular"]["MEID"]);
          A.store.Ref(ptr + 0 + 140, x["Cellular"]["MIN"]);
          A.store.Ref(ptr + 0 + 144, x["Cellular"]["ModelID"]);
          A.store.Ref(ptr + 0 + 148, x["Cellular"]["NetworkTechnology"]);

          if (typeof x["Cellular"]["PaymentPortal"] === "undefined") {
            A.store.Bool(ptr + 0 + 152 + 12, false);
            A.store.Ref(ptr + 0 + 152 + 0, undefined);
            A.store.Ref(ptr + 0 + 152 + 4, undefined);
            A.store.Ref(ptr + 0 + 152 + 8, undefined);
          } else {
            A.store.Bool(ptr + 0 + 152 + 12, true);
            A.store.Ref(ptr + 0 + 152 + 0, x["Cellular"]["PaymentPortal"]["Method"]);
            A.store.Ref(ptr + 0 + 152 + 4, x["Cellular"]["PaymentPortal"]["PostData"]);
            A.store.Ref(ptr + 0 + 152 + 8, x["Cellular"]["PaymentPortal"]["Url"]);
          }
          A.store.Ref(ptr + 0 + 168, x["Cellular"]["RoamingState"]);
          A.store.Bool(ptr + 0 + 215, "Scanning" in x["Cellular"] ? true : false);
          A.store.Bool(ptr + 0 + 172, x["Cellular"]["Scanning"] ? true : false);

          if (typeof x["Cellular"]["ServingOperator"] === "undefined") {
            A.store.Bool(ptr + 0 + 176 + 12, false);
            A.store.Ref(ptr + 0 + 176 + 0, undefined);
            A.store.Ref(ptr + 0 + 176 + 4, undefined);
            A.store.Ref(ptr + 0 + 176 + 8, undefined);
          } else {
            A.store.Bool(ptr + 0 + 176 + 12, true);
            A.store.Ref(ptr + 0 + 176 + 0, x["Cellular"]["ServingOperator"]["Name"]);
            A.store.Ref(ptr + 0 + 176 + 4, x["Cellular"]["ServingOperator"]["Code"]);
            A.store.Ref(ptr + 0 + 176 + 8, x["Cellular"]["ServingOperator"]["Country"]);
          }

          if (typeof x["Cellular"]["SIMLockStatus"] === "undefined") {
            A.store.Bool(ptr + 0 + 192 + 14, false);
            A.store.Ref(ptr + 0 + 192 + 0, undefined);
            A.store.Bool(ptr + 0 + 192 + 12, false);
            A.store.Bool(ptr + 0 + 192 + 4, false);
            A.store.Bool(ptr + 0 + 192 + 13, false);
            A.store.Int32(ptr + 0 + 192 + 8, 0);
          } else {
            A.store.Bool(ptr + 0 + 192 + 14, true);
            A.store.Ref(ptr + 0 + 192 + 0, x["Cellular"]["SIMLockStatus"]["LockType"]);
            A.store.Bool(ptr + 0 + 192 + 12, "LockEnabled" in x["Cellular"]["SIMLockStatus"] ? true : false);
            A.store.Bool(ptr + 0 + 192 + 4, x["Cellular"]["SIMLockStatus"]["LockEnabled"] ? true : false);
            A.store.Bool(ptr + 0 + 192 + 13, "RetriesLeft" in x["Cellular"]["SIMLockStatus"] ? true : false);
            A.store.Int32(
              ptr + 0 + 192 + 8,
              x["Cellular"]["SIMLockStatus"]["RetriesLeft"] === undefined
                ? 0
                : (x["Cellular"]["SIMLockStatus"]["RetriesLeft"] as number)
            );
          }
          A.store.Bool(ptr + 0 + 216, "SIMPresent" in x["Cellular"] ? true : false);
          A.store.Bool(ptr + 0 + 207, x["Cellular"]["SIMPresent"] ? true : false);
          A.store.Bool(ptr + 0 + 217, "SignalStrength" in x["Cellular"] ? true : false);
          A.store.Int32(
            ptr + 0 + 208,
            x["Cellular"]["SignalStrength"] === undefined ? 0 : (x["Cellular"]["SignalStrength"] as number)
          );
          A.store.Bool(ptr + 0 + 218, "SupportNetworkScan" in x["Cellular"] ? true : false);
          A.store.Bool(ptr + 0 + 212, x["Cellular"]["SupportNetworkScan"] ? true : false);
        }
        A.store.Bool(ptr + 1230, "Connectable" in x ? true : false);
        A.store.Bool(ptr + 220, x["Connectable"] ? true : false);
        A.store.Enum(ptr + 224, ["Connected", "Connecting", "NotConnected"].indexOf(x["ConnectionState"] as string));
        A.store.Ref(ptr + 228, x["ErrorState"]);

        if (typeof x["Ethernet"] === "undefined") {
          A.store.Bool(ptr + 232 + 123, false);
          A.store.Bool(ptr + 232 + 122, false);
          A.store.Bool(ptr + 232 + 0, false);
          A.store.Ref(ptr + 232 + 4, undefined);

          A.store.Bool(ptr + 232 + 8 + 113, false);
          A.store.Ref(ptr + 232 + 8 + 0, undefined);

          A.store.Bool(ptr + 232 + 8 + 4 + 49, false);
          A.store.Ref(ptr + 232 + 8 + 4 + 0, undefined);

          A.store.Bool(ptr + 232 + 8 + 4 + 4 + 16, false);
          A.store.Ref(ptr + 232 + 8 + 4 + 4 + 0, undefined);
          A.store.Ref(ptr + 232 + 8 + 4 + 4 + 4, undefined);
          A.store.Ref(ptr + 232 + 8 + 4 + 4 + 8, undefined);
          A.store.Ref(ptr + 232 + 8 + 4 + 4 + 12, undefined);
          A.store.Ref(ptr + 232 + 8 + 4 + 24, undefined);
          A.store.Ref(ptr + 232 + 8 + 4 + 28, undefined);

          A.store.Bool(ptr + 232 + 8 + 4 + 32 + 16, false);
          A.store.Ref(ptr + 232 + 8 + 4 + 32 + 0, undefined);
          A.store.Ref(ptr + 232 + 8 + 4 + 32 + 4, undefined);
          A.store.Ref(ptr + 232 + 8 + 4 + 32 + 8, undefined);
          A.store.Ref(ptr + 232 + 8 + 4 + 32 + 12, undefined);
          A.store.Ref(ptr + 232 + 8 + 56, undefined);
          A.store.Ref(ptr + 232 + 8 + 60, undefined);
          A.store.Ref(ptr + 232 + 8 + 64, undefined);
          A.store.Ref(ptr + 232 + 8 + 68, undefined);
          A.store.Ref(ptr + 232 + 8 + 72, undefined);
          A.store.Ref(ptr + 232 + 8 + 76, undefined);
          A.store.Ref(ptr + 232 + 8 + 80, undefined);
          A.store.Ref(ptr + 232 + 8 + 84, undefined);
          A.store.Bool(ptr + 232 + 8 + 110, false);
          A.store.Bool(ptr + 232 + 8 + 88, false);
          A.store.Ref(ptr + 232 + 8 + 92, undefined);
          A.store.Ref(ptr + 232 + 8 + 96, undefined);
          A.store.Ref(ptr + 232 + 8 + 100, undefined);
          A.store.Ref(ptr + 232 + 8 + 104, undefined);
          A.store.Bool(ptr + 232 + 8 + 111, false);
          A.store.Bool(ptr + 232 + 8 + 108, false);
          A.store.Bool(ptr + 232 + 8 + 112, false);
          A.store.Bool(ptr + 232 + 8 + 109, false);
        } else {
          A.store.Bool(ptr + 232 + 123, true);
          A.store.Bool(ptr + 232 + 122, "AutoConnect" in x["Ethernet"] ? true : false);
          A.store.Bool(ptr + 232 + 0, x["Ethernet"]["AutoConnect"] ? true : false);
          A.store.Ref(ptr + 232 + 4, x["Ethernet"]["Authentication"]);

          if (typeof x["Ethernet"]["EAP"] === "undefined") {
            A.store.Bool(ptr + 232 + 8 + 113, false);
            A.store.Ref(ptr + 232 + 8 + 0, undefined);

            A.store.Bool(ptr + 232 + 8 + 4 + 49, false);
            A.store.Ref(ptr + 232 + 8 + 4 + 0, undefined);

            A.store.Bool(ptr + 232 + 8 + 4 + 4 + 16, false);
            A.store.Ref(ptr + 232 + 8 + 4 + 4 + 0, undefined);
            A.store.Ref(ptr + 232 + 8 + 4 + 4 + 4, undefined);
            A.store.Ref(ptr + 232 + 8 + 4 + 4 + 8, undefined);
            A.store.Ref(ptr + 232 + 8 + 4 + 4 + 12, undefined);
            A.store.Ref(ptr + 232 + 8 + 4 + 24, undefined);
            A.store.Ref(ptr + 232 + 8 + 4 + 28, undefined);

            A.store.Bool(ptr + 232 + 8 + 4 + 32 + 16, false);
            A.store.Ref(ptr + 232 + 8 + 4 + 32 + 0, undefined);
            A.store.Ref(ptr + 232 + 8 + 4 + 32 + 4, undefined);
            A.store.Ref(ptr + 232 + 8 + 4 + 32 + 8, undefined);
            A.store.Ref(ptr + 232 + 8 + 4 + 32 + 12, undefined);
            A.store.Ref(ptr + 232 + 8 + 56, undefined);
            A.store.Ref(ptr + 232 + 8 + 60, undefined);
            A.store.Ref(ptr + 232 + 8 + 64, undefined);
            A.store.Ref(ptr + 232 + 8 + 68, undefined);
            A.store.Ref(ptr + 232 + 8 + 72, undefined);
            A.store.Ref(ptr + 232 + 8 + 76, undefined);
            A.store.Ref(ptr + 232 + 8 + 80, undefined);
            A.store.Ref(ptr + 232 + 8 + 84, undefined);
            A.store.Bool(ptr + 232 + 8 + 110, false);
            A.store.Bool(ptr + 232 + 8 + 88, false);
            A.store.Ref(ptr + 232 + 8 + 92, undefined);
            A.store.Ref(ptr + 232 + 8 + 96, undefined);
            A.store.Ref(ptr + 232 + 8 + 100, undefined);
            A.store.Ref(ptr + 232 + 8 + 104, undefined);
            A.store.Bool(ptr + 232 + 8 + 111, false);
            A.store.Bool(ptr + 232 + 8 + 108, false);
            A.store.Bool(ptr + 232 + 8 + 112, false);
            A.store.Bool(ptr + 232 + 8 + 109, false);
          } else {
            A.store.Bool(ptr + 232 + 8 + 113, true);
            A.store.Ref(ptr + 232 + 8 + 0, x["Ethernet"]["EAP"]["AnonymousIdentity"]);

            if (typeof x["Ethernet"]["EAP"]["ClientCertPattern"] === "undefined") {
              A.store.Bool(ptr + 232 + 8 + 4 + 49, false);
              A.store.Ref(ptr + 232 + 8 + 4 + 0, undefined);

              A.store.Bool(ptr + 232 + 8 + 4 + 4 + 16, false);
              A.store.Ref(ptr + 232 + 8 + 4 + 4 + 0, undefined);
              A.store.Ref(ptr + 232 + 8 + 4 + 4 + 4, undefined);
              A.store.Ref(ptr + 232 + 8 + 4 + 4 + 8, undefined);
              A.store.Ref(ptr + 232 + 8 + 4 + 4 + 12, undefined);
              A.store.Ref(ptr + 232 + 8 + 4 + 24, undefined);
              A.store.Ref(ptr + 232 + 8 + 4 + 28, undefined);

              A.store.Bool(ptr + 232 + 8 + 4 + 32 + 16, false);
              A.store.Ref(ptr + 232 + 8 + 4 + 32 + 0, undefined);
              A.store.Ref(ptr + 232 + 8 + 4 + 32 + 4, undefined);
              A.store.Ref(ptr + 232 + 8 + 4 + 32 + 8, undefined);
              A.store.Ref(ptr + 232 + 8 + 4 + 32 + 12, undefined);
            } else {
              A.store.Bool(ptr + 232 + 8 + 4 + 49, true);
              A.store.Ref(ptr + 232 + 8 + 4 + 0, x["Ethernet"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]);

              if (typeof x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"] === "undefined") {
                A.store.Bool(ptr + 232 + 8 + 4 + 4 + 16, false);
                A.store.Ref(ptr + 232 + 8 + 4 + 4 + 0, undefined);
                A.store.Ref(ptr + 232 + 8 + 4 + 4 + 4, undefined);
                A.store.Ref(ptr + 232 + 8 + 4 + 4 + 8, undefined);
                A.store.Ref(ptr + 232 + 8 + 4 + 4 + 12, undefined);
              } else {
                A.store.Bool(ptr + 232 + 8 + 4 + 4 + 16, true);
                A.store.Ref(
                  ptr + 232 + 8 + 4 + 4 + 0,
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]
                );
                A.store.Ref(ptr + 232 + 8 + 4 + 4 + 4, x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]);
                A.store.Ref(
                  ptr + 232 + 8 + 4 + 4 + 8,
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]
                );
                A.store.Ref(
                  ptr + 232 + 8 + 4 + 4 + 12,
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]
                );
              }
              A.store.Ref(ptr + 232 + 8 + 4 + 24, x["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCAPEMs"]);
              A.store.Ref(ptr + 232 + 8 + 4 + 28, x["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCARef"]);

              if (typeof x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"] === "undefined") {
                A.store.Bool(ptr + 232 + 8 + 4 + 32 + 16, false);
                A.store.Ref(ptr + 232 + 8 + 4 + 32 + 0, undefined);
                A.store.Ref(ptr + 232 + 8 + 4 + 32 + 4, undefined);
                A.store.Ref(ptr + 232 + 8 + 4 + 32 + 8, undefined);
                A.store.Ref(ptr + 232 + 8 + 4 + 32 + 12, undefined);
              } else {
                A.store.Bool(ptr + 232 + 8 + 4 + 32 + 16, true);
                A.store.Ref(
                  ptr + 232 + 8 + 4 + 32 + 0,
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]
                );
                A.store.Ref(
                  ptr + 232 + 8 + 4 + 32 + 4,
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]
                );
                A.store.Ref(
                  ptr + 232 + 8 + 4 + 32 + 8,
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]
                );
                A.store.Ref(
                  ptr + 232 + 8 + 4 + 32 + 12,
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]
                );
              }
            }
            A.store.Ref(ptr + 232 + 8 + 56, x["Ethernet"]["EAP"]["ClientCertPKCS11Id"]);
            A.store.Ref(ptr + 232 + 8 + 60, x["Ethernet"]["EAP"]["ClientCertProvisioningProfileId"]);
            A.store.Ref(ptr + 232 + 8 + 64, x["Ethernet"]["EAP"]["ClientCertRef"]);
            A.store.Ref(ptr + 232 + 8 + 68, x["Ethernet"]["EAP"]["ClientCertType"]);
            A.store.Ref(ptr + 232 + 8 + 72, x["Ethernet"]["EAP"]["Identity"]);
            A.store.Ref(ptr + 232 + 8 + 76, x["Ethernet"]["EAP"]["Inner"]);
            A.store.Ref(ptr + 232 + 8 + 80, x["Ethernet"]["EAP"]["Outer"]);
            A.store.Ref(ptr + 232 + 8 + 84, x["Ethernet"]["EAP"]["Password"]);
            A.store.Bool(ptr + 232 + 8 + 110, "SaveCredentials" in x["Ethernet"]["EAP"] ? true : false);
            A.store.Bool(ptr + 232 + 8 + 88, x["Ethernet"]["EAP"]["SaveCredentials"] ? true : false);
            A.store.Ref(ptr + 232 + 8 + 92, x["Ethernet"]["EAP"]["ServerCAPEMs"]);
            A.store.Ref(ptr + 232 + 8 + 96, x["Ethernet"]["EAP"]["ServerCARefs"]);
            A.store.Ref(ptr + 232 + 8 + 100, x["Ethernet"]["EAP"]["SubjectMatch"]);
            A.store.Ref(ptr + 232 + 8 + 104, x["Ethernet"]["EAP"]["TLSVersionMax"]);
            A.store.Bool(ptr + 232 + 8 + 111, "UseProactiveKeyCaching" in x["Ethernet"]["EAP"] ? true : false);
            A.store.Bool(ptr + 232 + 8 + 108, x["Ethernet"]["EAP"]["UseProactiveKeyCaching"] ? true : false);
            A.store.Bool(ptr + 232 + 8 + 112, "UseSystemCAs" in x["Ethernet"]["EAP"] ? true : false);
            A.store.Bool(ptr + 232 + 8 + 109, x["Ethernet"]["EAP"]["UseSystemCAs"] ? true : false);
          }
        }
        A.store.Ref(ptr + 356, x["GUID"]);
        A.store.Enum(ptr + 360, ["DHCP", "Static"].indexOf(x["IPAddressConfigType"] as string));
        A.store.Ref(ptr + 364, x["IPConfigs"]);
        A.store.Ref(ptr + 368, x["MacAddress"]);
        A.store.Bool(ptr + 1231, "Metered" in x ? true : false);
        A.store.Bool(ptr + 372, x["Metered"] ? true : false);
        A.store.Ref(ptr + 376, x["Name"]);
        A.store.Enum(ptr + 380, ["DHCP", "Static"].indexOf(x["NameServersConfigType"] as string));
        A.store.Bool(ptr + 1232, "Priority" in x ? true : false);
        A.store.Int32(ptr + 384, x["Priority"] === undefined ? 0 : (x["Priority"] as number));

        if (typeof x["ProxySettings"] === "undefined") {
          A.store.Bool(ptr + 388 + 60, false);
          A.store.Enum(ptr + 388 + 0, -1);

          A.store.Bool(ptr + 388 + 4 + 46, false);

          A.store.Bool(ptr + 388 + 4 + 0 + 9, false);
          A.store.Ref(ptr + 388 + 4 + 0 + 0, undefined);
          A.store.Bool(ptr + 388 + 4 + 0 + 8, false);
          A.store.Int32(ptr + 388 + 4 + 0 + 4, 0);

          A.store.Bool(ptr + 388 + 4 + 12 + 9, false);
          A.store.Ref(ptr + 388 + 4 + 12 + 0, undefined);
          A.store.Bool(ptr + 388 + 4 + 12 + 8, false);
          A.store.Int32(ptr + 388 + 4 + 12 + 4, 0);

          A.store.Bool(ptr + 388 + 4 + 24 + 9, false);
          A.store.Ref(ptr + 388 + 4 + 24 + 0, undefined);
          A.store.Bool(ptr + 388 + 4 + 24 + 8, false);
          A.store.Int32(ptr + 388 + 4 + 24 + 4, 0);

          A.store.Bool(ptr + 388 + 4 + 36 + 9, false);
          A.store.Ref(ptr + 388 + 4 + 36 + 0, undefined);
          A.store.Bool(ptr + 388 + 4 + 36 + 8, false);
          A.store.Int32(ptr + 388 + 4 + 36 + 4, 0);
          A.store.Ref(ptr + 388 + 52, undefined);
          A.store.Ref(ptr + 388 + 56, undefined);
        } else {
          A.store.Bool(ptr + 388 + 60, true);
          A.store.Enum(
            ptr + 388 + 0,
            ["Direct", "Manual", "PAC", "WPAD"].indexOf(x["ProxySettings"]["Type"] as string)
          );

          if (typeof x["ProxySettings"]["Manual"] === "undefined") {
            A.store.Bool(ptr + 388 + 4 + 46, false);

            A.store.Bool(ptr + 388 + 4 + 0 + 9, false);
            A.store.Ref(ptr + 388 + 4 + 0 + 0, undefined);
            A.store.Bool(ptr + 388 + 4 + 0 + 8, false);
            A.store.Int32(ptr + 388 + 4 + 0 + 4, 0);

            A.store.Bool(ptr + 388 + 4 + 12 + 9, false);
            A.store.Ref(ptr + 388 + 4 + 12 + 0, undefined);
            A.store.Bool(ptr + 388 + 4 + 12 + 8, false);
            A.store.Int32(ptr + 388 + 4 + 12 + 4, 0);

            A.store.Bool(ptr + 388 + 4 + 24 + 9, false);
            A.store.Ref(ptr + 388 + 4 + 24 + 0, undefined);
            A.store.Bool(ptr + 388 + 4 + 24 + 8, false);
            A.store.Int32(ptr + 388 + 4 + 24 + 4, 0);

            A.store.Bool(ptr + 388 + 4 + 36 + 9, false);
            A.store.Ref(ptr + 388 + 4 + 36 + 0, undefined);
            A.store.Bool(ptr + 388 + 4 + 36 + 8, false);
            A.store.Int32(ptr + 388 + 4 + 36 + 4, 0);
          } else {
            A.store.Bool(ptr + 388 + 4 + 46, true);

            if (typeof x["ProxySettings"]["Manual"]["HTTPProxy"] === "undefined") {
              A.store.Bool(ptr + 388 + 4 + 0 + 9, false);
              A.store.Ref(ptr + 388 + 4 + 0 + 0, undefined);
              A.store.Bool(ptr + 388 + 4 + 0 + 8, false);
              A.store.Int32(ptr + 388 + 4 + 0 + 4, 0);
            } else {
              A.store.Bool(ptr + 388 + 4 + 0 + 9, true);
              A.store.Ref(ptr + 388 + 4 + 0 + 0, x["ProxySettings"]["Manual"]["HTTPProxy"]["Host"]);
              A.store.Bool(ptr + 388 + 4 + 0 + 8, "Port" in x["ProxySettings"]["Manual"]["HTTPProxy"] ? true : false);
              A.store.Int32(
                ptr + 388 + 4 + 0 + 4,
                x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"] === undefined
                  ? 0
                  : (x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"] as number)
              );
            }

            if (typeof x["ProxySettings"]["Manual"]["SecureHTTPProxy"] === "undefined") {
              A.store.Bool(ptr + 388 + 4 + 12 + 9, false);
              A.store.Ref(ptr + 388 + 4 + 12 + 0, undefined);
              A.store.Bool(ptr + 388 + 4 + 12 + 8, false);
              A.store.Int32(ptr + 388 + 4 + 12 + 4, 0);
            } else {
              A.store.Bool(ptr + 388 + 4 + 12 + 9, true);
              A.store.Ref(ptr + 388 + 4 + 12 + 0, x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Host"]);
              A.store.Bool(
                ptr + 388 + 4 + 12 + 8,
                "Port" in x["ProxySettings"]["Manual"]["SecureHTTPProxy"] ? true : false
              );
              A.store.Int32(
                ptr + 388 + 4 + 12 + 4,
                x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"] === undefined
                  ? 0
                  : (x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"] as number)
              );
            }

            if (typeof x["ProxySettings"]["Manual"]["FTPProxy"] === "undefined") {
              A.store.Bool(ptr + 388 + 4 + 24 + 9, false);
              A.store.Ref(ptr + 388 + 4 + 24 + 0, undefined);
              A.store.Bool(ptr + 388 + 4 + 24 + 8, false);
              A.store.Int32(ptr + 388 + 4 + 24 + 4, 0);
            } else {
              A.store.Bool(ptr + 388 + 4 + 24 + 9, true);
              A.store.Ref(ptr + 388 + 4 + 24 + 0, x["ProxySettings"]["Manual"]["FTPProxy"]["Host"]);
              A.store.Bool(ptr + 388 + 4 + 24 + 8, "Port" in x["ProxySettings"]["Manual"]["FTPProxy"] ? true : false);
              A.store.Int32(
                ptr + 388 + 4 + 24 + 4,
                x["ProxySettings"]["Manual"]["FTPProxy"]["Port"] === undefined
                  ? 0
                  : (x["ProxySettings"]["Manual"]["FTPProxy"]["Port"] as number)
              );
            }

            if (typeof x["ProxySettings"]["Manual"]["SOCKS"] === "undefined") {
              A.store.Bool(ptr + 388 + 4 + 36 + 9, false);
              A.store.Ref(ptr + 388 + 4 + 36 + 0, undefined);
              A.store.Bool(ptr + 388 + 4 + 36 + 8, false);
              A.store.Int32(ptr + 388 + 4 + 36 + 4, 0);
            } else {
              A.store.Bool(ptr + 388 + 4 + 36 + 9, true);
              A.store.Ref(ptr + 388 + 4 + 36 + 0, x["ProxySettings"]["Manual"]["SOCKS"]["Host"]);
              A.store.Bool(ptr + 388 + 4 + 36 + 8, "Port" in x["ProxySettings"]["Manual"]["SOCKS"] ? true : false);
              A.store.Int32(
                ptr + 388 + 4 + 36 + 4,
                x["ProxySettings"]["Manual"]["SOCKS"]["Port"] === undefined
                  ? 0
                  : (x["ProxySettings"]["Manual"]["SOCKS"]["Port"] as number)
              );
            }
          }
          A.store.Ref(ptr + 388 + 52, x["ProxySettings"]["ExcludeDomains"]);
          A.store.Ref(ptr + 388 + 56, x["ProxySettings"]["PAC"]);
        }
        A.store.Bool(ptr + 1233, "RestrictedConnectivity" in x ? true : false);
        A.store.Bool(ptr + 449, x["RestrictedConnectivity"] ? true : false);

        if (typeof x["StaticIPConfig"] === "undefined") {
          A.store.Bool(ptr + 452 + 37, false);
          A.store.Ref(ptr + 452 + 0, undefined);
          A.store.Ref(ptr + 452 + 4, undefined);
          A.store.Ref(ptr + 452 + 8, undefined);
          A.store.Ref(ptr + 452 + 12, undefined);
          A.store.Ref(ptr + 452 + 16, undefined);
          A.store.Ref(ptr + 452 + 20, undefined);
          A.store.Bool(ptr + 452 + 36, false);
          A.store.Int32(ptr + 452 + 24, 0);
          A.store.Ref(ptr + 452 + 28, undefined);
          A.store.Ref(ptr + 452 + 32, undefined);
        } else {
          A.store.Bool(ptr + 452 + 37, true);
          A.store.Ref(ptr + 452 + 0, x["StaticIPConfig"]["Gateway"]);
          A.store.Ref(ptr + 452 + 4, x["StaticIPConfig"]["IPAddress"]);
          A.store.Ref(ptr + 452 + 8, x["StaticIPConfig"]["ExcludedRoutes"]);
          A.store.Ref(ptr + 452 + 12, x["StaticIPConfig"]["IncludedRoutes"]);
          A.store.Ref(ptr + 452 + 16, x["StaticIPConfig"]["NameServers"]);
          A.store.Ref(ptr + 452 + 20, x["StaticIPConfig"]["SearchDomains"]);
          A.store.Bool(ptr + 452 + 36, "RoutingPrefix" in x["StaticIPConfig"] ? true : false);
          A.store.Int32(
            ptr + 452 + 24,
            x["StaticIPConfig"]["RoutingPrefix"] === undefined ? 0 : (x["StaticIPConfig"]["RoutingPrefix"] as number)
          );
          A.store.Ref(ptr + 452 + 28, x["StaticIPConfig"]["Type"]);
          A.store.Ref(ptr + 452 + 32, x["StaticIPConfig"]["WebProxyAutoDiscoveryUrl"]);
        }

        if (typeof x["SavedIPConfig"] === "undefined") {
          A.store.Bool(ptr + 492 + 37, false);
          A.store.Ref(ptr + 492 + 0, undefined);
          A.store.Ref(ptr + 492 + 4, undefined);
          A.store.Ref(ptr + 492 + 8, undefined);
          A.store.Ref(ptr + 492 + 12, undefined);
          A.store.Ref(ptr + 492 + 16, undefined);
          A.store.Ref(ptr + 492 + 20, undefined);
          A.store.Bool(ptr + 492 + 36, false);
          A.store.Int32(ptr + 492 + 24, 0);
          A.store.Ref(ptr + 492 + 28, undefined);
          A.store.Ref(ptr + 492 + 32, undefined);
        } else {
          A.store.Bool(ptr + 492 + 37, true);
          A.store.Ref(ptr + 492 + 0, x["SavedIPConfig"]["Gateway"]);
          A.store.Ref(ptr + 492 + 4, x["SavedIPConfig"]["IPAddress"]);
          A.store.Ref(ptr + 492 + 8, x["SavedIPConfig"]["ExcludedRoutes"]);
          A.store.Ref(ptr + 492 + 12, x["SavedIPConfig"]["IncludedRoutes"]);
          A.store.Ref(ptr + 492 + 16, x["SavedIPConfig"]["NameServers"]);
          A.store.Ref(ptr + 492 + 20, x["SavedIPConfig"]["SearchDomains"]);
          A.store.Bool(ptr + 492 + 36, "RoutingPrefix" in x["SavedIPConfig"] ? true : false);
          A.store.Int32(
            ptr + 492 + 24,
            x["SavedIPConfig"]["RoutingPrefix"] === undefined ? 0 : (x["SavedIPConfig"]["RoutingPrefix"] as number)
          );
          A.store.Ref(ptr + 492 + 28, x["SavedIPConfig"]["Type"]);
          A.store.Ref(ptr + 492 + 32, x["SavedIPConfig"]["WebProxyAutoDiscoveryUrl"]);
        }
        A.store.Ref(ptr + 532, x["Source"]);

        if (typeof x["Tether"] === "undefined") {
          A.store.Bool(ptr + 536 + 19, false);
          A.store.Bool(ptr + 536 + 16, false);
          A.store.Int32(ptr + 536 + 0, 0);
          A.store.Ref(ptr + 536 + 4, undefined);
          A.store.Bool(ptr + 536 + 17, false);
          A.store.Bool(ptr + 536 + 8, false);
          A.store.Bool(ptr + 536 + 18, false);
          A.store.Int32(ptr + 536 + 12, 0);
        } else {
          A.store.Bool(ptr + 536 + 19, true);
          A.store.Bool(ptr + 536 + 16, "BatteryPercentage" in x["Tether"] ? true : false);
          A.store.Int32(
            ptr + 536 + 0,
            x["Tether"]["BatteryPercentage"] === undefined ? 0 : (x["Tether"]["BatteryPercentage"] as number)
          );
          A.store.Ref(ptr + 536 + 4, x["Tether"]["Carrier"]);
          A.store.Bool(ptr + 536 + 17, "HasConnectedToHost" in x["Tether"] ? true : false);
          A.store.Bool(ptr + 536 + 8, x["Tether"]["HasConnectedToHost"] ? true : false);
          A.store.Bool(ptr + 536 + 18, "SignalStrength" in x["Tether"] ? true : false);
          A.store.Int32(
            ptr + 536 + 12,
            x["Tether"]["SignalStrength"] === undefined ? 0 : (x["Tether"]["SignalStrength"] as number)
          );
        }
        A.store.Enum(
          ptr + 556,
          ["All", "Cellular", "Ethernet", "Tether", "VPN", "Wireless", "WiFi"].indexOf(x["Type"] as string)
        );

        if (typeof x["VPN"] === "undefined") {
          A.store.Bool(ptr + 560 + 505, false);
          A.store.Bool(ptr + 560 + 504, false);
          A.store.Bool(ptr + 560 + 0, false);
          A.store.Ref(ptr + 560 + 4, undefined);

          A.store.Bool(ptr + 560 + 8 + 236, false);
          A.store.Ref(ptr + 560 + 8 + 0, undefined);

          A.store.Bool(ptr + 560 + 8 + 4 + 49, false);
          A.store.Ref(ptr + 560 + 8 + 4 + 0, undefined);

          A.store.Bool(ptr + 560 + 8 + 4 + 4 + 16, false);
          A.store.Ref(ptr + 560 + 8 + 4 + 4 + 0, undefined);
          A.store.Ref(ptr + 560 + 8 + 4 + 4 + 4, undefined);
          A.store.Ref(ptr + 560 + 8 + 4 + 4 + 8, undefined);
          A.store.Ref(ptr + 560 + 8 + 4 + 4 + 12, undefined);
          A.store.Ref(ptr + 560 + 8 + 4 + 24, undefined);
          A.store.Ref(ptr + 560 + 8 + 4 + 28, undefined);

          A.store.Bool(ptr + 560 + 8 + 4 + 32 + 16, false);
          A.store.Ref(ptr + 560 + 8 + 4 + 32 + 0, undefined);
          A.store.Ref(ptr + 560 + 8 + 4 + 32 + 4, undefined);
          A.store.Ref(ptr + 560 + 8 + 4 + 32 + 8, undefined);
          A.store.Ref(ptr + 560 + 8 + 4 + 32 + 12, undefined);
          A.store.Ref(ptr + 560 + 8 + 56, undefined);
          A.store.Ref(ptr + 560 + 8 + 60, undefined);
          A.store.Ref(ptr + 560 + 8 + 64, undefined);
          A.store.Ref(ptr + 560 + 8 + 68, undefined);

          A.store.Bool(ptr + 560 + 8 + 72 + 113, false);
          A.store.Ref(ptr + 560 + 8 + 72 + 0, undefined);

          A.store.Bool(ptr + 560 + 8 + 72 + 4 + 49, false);
          A.store.Ref(ptr + 560 + 8 + 72 + 4 + 0, undefined);

          A.store.Bool(ptr + 560 + 8 + 72 + 4 + 4 + 16, false);
          A.store.Ref(ptr + 560 + 8 + 72 + 4 + 4 + 0, undefined);
          A.store.Ref(ptr + 560 + 8 + 72 + 4 + 4 + 4, undefined);
          A.store.Ref(ptr + 560 + 8 + 72 + 4 + 4 + 8, undefined);
          A.store.Ref(ptr + 560 + 8 + 72 + 4 + 4 + 12, undefined);
          A.store.Ref(ptr + 560 + 8 + 72 + 4 + 24, undefined);
          A.store.Ref(ptr + 560 + 8 + 72 + 4 + 28, undefined);

          A.store.Bool(ptr + 560 + 8 + 72 + 4 + 32 + 16, false);
          A.store.Ref(ptr + 560 + 8 + 72 + 4 + 32 + 0, undefined);
          A.store.Ref(ptr + 560 + 8 + 72 + 4 + 32 + 4, undefined);
          A.store.Ref(ptr + 560 + 8 + 72 + 4 + 32 + 8, undefined);
          A.store.Ref(ptr + 560 + 8 + 72 + 4 + 32 + 12, undefined);
          A.store.Ref(ptr + 560 + 8 + 72 + 56, undefined);
          A.store.Ref(ptr + 560 + 8 + 72 + 60, undefined);
          A.store.Ref(ptr + 560 + 8 + 72 + 64, undefined);
          A.store.Ref(ptr + 560 + 8 + 72 + 68, undefined);
          A.store.Ref(ptr + 560 + 8 + 72 + 72, undefined);
          A.store.Ref(ptr + 560 + 8 + 72 + 76, undefined);
          A.store.Ref(ptr + 560 + 8 + 72 + 80, undefined);
          A.store.Ref(ptr + 560 + 8 + 72 + 84, undefined);
          A.store.Bool(ptr + 560 + 8 + 72 + 110, false);
          A.store.Bool(ptr + 560 + 8 + 72 + 88, false);
          A.store.Ref(ptr + 560 + 8 + 72 + 92, undefined);
          A.store.Ref(ptr + 560 + 8 + 72 + 96, undefined);
          A.store.Ref(ptr + 560 + 8 + 72 + 100, undefined);
          A.store.Ref(ptr + 560 + 8 + 72 + 104, undefined);
          A.store.Bool(ptr + 560 + 8 + 72 + 111, false);
          A.store.Bool(ptr + 560 + 8 + 72 + 108, false);
          A.store.Bool(ptr + 560 + 8 + 72 + 112, false);
          A.store.Bool(ptr + 560 + 8 + 72 + 109, false);
          A.store.Ref(ptr + 560 + 8 + 188, undefined);
          A.store.Bool(ptr + 560 + 8 + 234, false);
          A.store.Int32(ptr + 560 + 8 + 192, 0);
          A.store.Ref(ptr + 560 + 8 + 196, undefined);
          A.store.Ref(ptr + 560 + 8 + 200, undefined);
          A.store.Ref(ptr + 560 + 8 + 204, undefined);
          A.store.Bool(ptr + 560 + 8 + 235, false);
          A.store.Bool(ptr + 560 + 8 + 208, false);
          A.store.Ref(ptr + 560 + 8 + 212, undefined);
          A.store.Ref(ptr + 560 + 8 + 216, undefined);

          A.store.Bool(ptr + 560 + 8 + 220 + 13, false);
          A.store.Ref(ptr + 560 + 8 + 220 + 0, undefined);
          A.store.Bool(ptr + 560 + 8 + 220 + 12, false);
          A.store.Bool(ptr + 560 + 8 + 220 + 4, false);
          A.store.Ref(ptr + 560 + 8 + 220 + 8, undefined);

          A.store.Bool(ptr + 560 + 248 + 18, false);
          A.store.Bool(ptr + 560 + 248 + 16, false);
          A.store.Bool(ptr + 560 + 248 + 0, false);
          A.store.Ref(ptr + 560 + 248 + 4, undefined);
          A.store.Bool(ptr + 560 + 248 + 17, false);
          A.store.Bool(ptr + 560 + 248 + 8, false);
          A.store.Ref(ptr + 560 + 248 + 12, undefined);

          A.store.Bool(ptr + 560 + 268 + 218, false);
          A.store.Ref(ptr + 560 + 268 + 0, undefined);
          A.store.Ref(ptr + 560 + 268 + 4, undefined);
          A.store.Bool(ptr + 560 + 268 + 209, false);
          A.store.Bool(ptr + 560 + 268 + 8, false);
          A.store.Ref(ptr + 560 + 268 + 12, undefined);
          A.store.Ref(ptr + 560 + 268 + 16, undefined);

          A.store.Bool(ptr + 560 + 268 + 20 + 49, false);
          A.store.Ref(ptr + 560 + 268 + 20 + 0, undefined);

          A.store.Bool(ptr + 560 + 268 + 20 + 4 + 16, false);
          A.store.Ref(ptr + 560 + 268 + 20 + 4 + 0, undefined);
          A.store.Ref(ptr + 560 + 268 + 20 + 4 + 4, undefined);
          A.store.Ref(ptr + 560 + 268 + 20 + 4 + 8, undefined);
          A.store.Ref(ptr + 560 + 268 + 20 + 4 + 12, undefined);
          A.store.Ref(ptr + 560 + 268 + 20 + 24, undefined);
          A.store.Ref(ptr + 560 + 268 + 20 + 28, undefined);

          A.store.Bool(ptr + 560 + 268 + 20 + 32 + 16, false);
          A.store.Ref(ptr + 560 + 268 + 20 + 32 + 0, undefined);
          A.store.Ref(ptr + 560 + 268 + 20 + 32 + 4, undefined);
          A.store.Ref(ptr + 560 + 268 + 20 + 32 + 8, undefined);
          A.store.Ref(ptr + 560 + 268 + 20 + 32 + 12, undefined);
          A.store.Ref(ptr + 560 + 268 + 72, undefined);
          A.store.Ref(ptr + 560 + 268 + 76, undefined);
          A.store.Ref(ptr + 560 + 268 + 80, undefined);
          A.store.Ref(ptr + 560 + 268 + 84, undefined);
          A.store.Bool(ptr + 560 + 268 + 210, false);
          A.store.Bool(ptr + 560 + 268 + 88, false);
          A.store.Ref(ptr + 560 + 268 + 92, undefined);
          A.store.Bool(ptr + 560 + 268 + 211, false);
          A.store.Bool(ptr + 560 + 268 + 96, false);
          A.store.Ref(ptr + 560 + 268 + 100, undefined);
          A.store.Ref(ptr + 560 + 268 + 104, undefined);
          A.store.Ref(ptr + 560 + 268 + 108, undefined);
          A.store.Ref(ptr + 560 + 268 + 112, undefined);
          A.store.Bool(ptr + 560 + 268 + 212, false);
          A.store.Int32(ptr + 560 + 268 + 116, 0);
          A.store.Ref(ptr + 560 + 268 + 120, undefined);
          A.store.Bool(ptr + 560 + 268 + 213, false);
          A.store.Bool(ptr + 560 + 268 + 124, false);
          A.store.Ref(ptr + 560 + 268 + 128, undefined);
          A.store.Ref(ptr + 560 + 268 + 132, undefined);
          A.store.Ref(ptr + 560 + 268 + 136, undefined);
          A.store.Bool(ptr + 560 + 268 + 214, false);
          A.store.Int32(ptr + 560 + 268 + 140, 0);
          A.store.Bool(ptr + 560 + 268 + 215, false);
          A.store.Bool(ptr + 560 + 268 + 144, false);
          A.store.Ref(ptr + 560 + 268 + 148, undefined);
          A.store.Ref(ptr + 560 + 268 + 152, undefined);
          A.store.Ref(ptr + 560 + 268 + 156, undefined);
          A.store.Bool(ptr + 560 + 268 + 216, false);
          A.store.Int32(ptr + 560 + 268 + 160, 0);
          A.store.Bool(ptr + 560 + 268 + 217, false);
          A.store.Int32(ptr + 560 + 268 + 164, 0);
          A.store.Ref(ptr + 560 + 268 + 168, undefined);
          A.store.Ref(ptr + 560 + 268 + 172, undefined);
          A.store.Ref(ptr + 560 + 268 + 176, undefined);
          A.store.Ref(ptr + 560 + 268 + 180, undefined);
          A.store.Ref(ptr + 560 + 268 + 184, undefined);
          A.store.Ref(ptr + 560 + 268 + 188, undefined);
          A.store.Ref(ptr + 560 + 268 + 192, undefined);
          A.store.Ref(ptr + 560 + 268 + 196, undefined);

          A.store.Bool(ptr + 560 + 268 + 200 + 8, false);
          A.store.Ref(ptr + 560 + 268 + 200 + 0, undefined);
          A.store.Ref(ptr + 560 + 268 + 200 + 4, undefined);

          A.store.Bool(ptr + 560 + 488 + 8, false);
          A.store.Ref(ptr + 560 + 488 + 0, undefined);
          A.store.Ref(ptr + 560 + 488 + 4, undefined);
          A.store.Ref(ptr + 560 + 500, undefined);
        } else {
          A.store.Bool(ptr + 560 + 505, true);
          A.store.Bool(ptr + 560 + 504, "AutoConnect" in x["VPN"] ? true : false);
          A.store.Bool(ptr + 560 + 0, x["VPN"]["AutoConnect"] ? true : false);
          A.store.Ref(ptr + 560 + 4, x["VPN"]["Host"]);

          if (typeof x["VPN"]["IPsec"] === "undefined") {
            A.store.Bool(ptr + 560 + 8 + 236, false);
            A.store.Ref(ptr + 560 + 8 + 0, undefined);

            A.store.Bool(ptr + 560 + 8 + 4 + 49, false);
            A.store.Ref(ptr + 560 + 8 + 4 + 0, undefined);

            A.store.Bool(ptr + 560 + 8 + 4 + 4 + 16, false);
            A.store.Ref(ptr + 560 + 8 + 4 + 4 + 0, undefined);
            A.store.Ref(ptr + 560 + 8 + 4 + 4 + 4, undefined);
            A.store.Ref(ptr + 560 + 8 + 4 + 4 + 8, undefined);
            A.store.Ref(ptr + 560 + 8 + 4 + 4 + 12, undefined);
            A.store.Ref(ptr + 560 + 8 + 4 + 24, undefined);
            A.store.Ref(ptr + 560 + 8 + 4 + 28, undefined);

            A.store.Bool(ptr + 560 + 8 + 4 + 32 + 16, false);
            A.store.Ref(ptr + 560 + 8 + 4 + 32 + 0, undefined);
            A.store.Ref(ptr + 560 + 8 + 4 + 32 + 4, undefined);
            A.store.Ref(ptr + 560 + 8 + 4 + 32 + 8, undefined);
            A.store.Ref(ptr + 560 + 8 + 4 + 32 + 12, undefined);
            A.store.Ref(ptr + 560 + 8 + 56, undefined);
            A.store.Ref(ptr + 560 + 8 + 60, undefined);
            A.store.Ref(ptr + 560 + 8 + 64, undefined);
            A.store.Ref(ptr + 560 + 8 + 68, undefined);

            A.store.Bool(ptr + 560 + 8 + 72 + 113, false);
            A.store.Ref(ptr + 560 + 8 + 72 + 0, undefined);

            A.store.Bool(ptr + 560 + 8 + 72 + 4 + 49, false);
            A.store.Ref(ptr + 560 + 8 + 72 + 4 + 0, undefined);

            A.store.Bool(ptr + 560 + 8 + 72 + 4 + 4 + 16, false);
            A.store.Ref(ptr + 560 + 8 + 72 + 4 + 4 + 0, undefined);
            A.store.Ref(ptr + 560 + 8 + 72 + 4 + 4 + 4, undefined);
            A.store.Ref(ptr + 560 + 8 + 72 + 4 + 4 + 8, undefined);
            A.store.Ref(ptr + 560 + 8 + 72 + 4 + 4 + 12, undefined);
            A.store.Ref(ptr + 560 + 8 + 72 + 4 + 24, undefined);
            A.store.Ref(ptr + 560 + 8 + 72 + 4 + 28, undefined);

            A.store.Bool(ptr + 560 + 8 + 72 + 4 + 32 + 16, false);
            A.store.Ref(ptr + 560 + 8 + 72 + 4 + 32 + 0, undefined);
            A.store.Ref(ptr + 560 + 8 + 72 + 4 + 32 + 4, undefined);
            A.store.Ref(ptr + 560 + 8 + 72 + 4 + 32 + 8, undefined);
            A.store.Ref(ptr + 560 + 8 + 72 + 4 + 32 + 12, undefined);
            A.store.Ref(ptr + 560 + 8 + 72 + 56, undefined);
            A.store.Ref(ptr + 560 + 8 + 72 + 60, undefined);
            A.store.Ref(ptr + 560 + 8 + 72 + 64, undefined);
            A.store.Ref(ptr + 560 + 8 + 72 + 68, undefined);
            A.store.Ref(ptr + 560 + 8 + 72 + 72, undefined);
            A.store.Ref(ptr + 560 + 8 + 72 + 76, undefined);
            A.store.Ref(ptr + 560 + 8 + 72 + 80, undefined);
            A.store.Ref(ptr + 560 + 8 + 72 + 84, undefined);
            A.store.Bool(ptr + 560 + 8 + 72 + 110, false);
            A.store.Bool(ptr + 560 + 8 + 72 + 88, false);
            A.store.Ref(ptr + 560 + 8 + 72 + 92, undefined);
            A.store.Ref(ptr + 560 + 8 + 72 + 96, undefined);
            A.store.Ref(ptr + 560 + 8 + 72 + 100, undefined);
            A.store.Ref(ptr + 560 + 8 + 72 + 104, undefined);
            A.store.Bool(ptr + 560 + 8 + 72 + 111, false);
            A.store.Bool(ptr + 560 + 8 + 72 + 108, false);
            A.store.Bool(ptr + 560 + 8 + 72 + 112, false);
            A.store.Bool(ptr + 560 + 8 + 72 + 109, false);
            A.store.Ref(ptr + 560 + 8 + 188, undefined);
            A.store.Bool(ptr + 560 + 8 + 234, false);
            A.store.Int32(ptr + 560 + 8 + 192, 0);
            A.store.Ref(ptr + 560 + 8 + 196, undefined);
            A.store.Ref(ptr + 560 + 8 + 200, undefined);
            A.store.Ref(ptr + 560 + 8 + 204, undefined);
            A.store.Bool(ptr + 560 + 8 + 235, false);
            A.store.Bool(ptr + 560 + 8 + 208, false);
            A.store.Ref(ptr + 560 + 8 + 212, undefined);
            A.store.Ref(ptr + 560 + 8 + 216, undefined);

            A.store.Bool(ptr + 560 + 8 + 220 + 13, false);
            A.store.Ref(ptr + 560 + 8 + 220 + 0, undefined);
            A.store.Bool(ptr + 560 + 8 + 220 + 12, false);
            A.store.Bool(ptr + 560 + 8 + 220 + 4, false);
            A.store.Ref(ptr + 560 + 8 + 220 + 8, undefined);
          } else {
            A.store.Bool(ptr + 560 + 8 + 236, true);
            A.store.Ref(ptr + 560 + 8 + 0, x["VPN"]["IPsec"]["AuthenticationType"]);

            if (typeof x["VPN"]["IPsec"]["ClientCertPattern"] === "undefined") {
              A.store.Bool(ptr + 560 + 8 + 4 + 49, false);
              A.store.Ref(ptr + 560 + 8 + 4 + 0, undefined);

              A.store.Bool(ptr + 560 + 8 + 4 + 4 + 16, false);
              A.store.Ref(ptr + 560 + 8 + 4 + 4 + 0, undefined);
              A.store.Ref(ptr + 560 + 8 + 4 + 4 + 4, undefined);
              A.store.Ref(ptr + 560 + 8 + 4 + 4 + 8, undefined);
              A.store.Ref(ptr + 560 + 8 + 4 + 4 + 12, undefined);
              A.store.Ref(ptr + 560 + 8 + 4 + 24, undefined);
              A.store.Ref(ptr + 560 + 8 + 4 + 28, undefined);

              A.store.Bool(ptr + 560 + 8 + 4 + 32 + 16, false);
              A.store.Ref(ptr + 560 + 8 + 4 + 32 + 0, undefined);
              A.store.Ref(ptr + 560 + 8 + 4 + 32 + 4, undefined);
              A.store.Ref(ptr + 560 + 8 + 4 + 32 + 8, undefined);
              A.store.Ref(ptr + 560 + 8 + 4 + 32 + 12, undefined);
            } else {
              A.store.Bool(ptr + 560 + 8 + 4 + 49, true);
              A.store.Ref(ptr + 560 + 8 + 4 + 0, x["VPN"]["IPsec"]["ClientCertPattern"]["EnrollmentURI"]);

              if (typeof x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"] === "undefined") {
                A.store.Bool(ptr + 560 + 8 + 4 + 4 + 16, false);
                A.store.Ref(ptr + 560 + 8 + 4 + 4 + 0, undefined);
                A.store.Ref(ptr + 560 + 8 + 4 + 4 + 4, undefined);
                A.store.Ref(ptr + 560 + 8 + 4 + 4 + 8, undefined);
                A.store.Ref(ptr + 560 + 8 + 4 + 4 + 12, undefined);
              } else {
                A.store.Bool(ptr + 560 + 8 + 4 + 4 + 16, true);
                A.store.Ref(ptr + 560 + 8 + 4 + 4 + 0, x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]);
                A.store.Ref(ptr + 560 + 8 + 4 + 4 + 4, x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]);
                A.store.Ref(
                  ptr + 560 + 8 + 4 + 4 + 8,
                  x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]
                );
                A.store.Ref(
                  ptr + 560 + 8 + 4 + 4 + 12,
                  x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]
                );
              }
              A.store.Ref(ptr + 560 + 8 + 4 + 24, x["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCAPEMs"]);
              A.store.Ref(ptr + 560 + 8 + 4 + 28, x["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCARef"]);

              if (typeof x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"] === "undefined") {
                A.store.Bool(ptr + 560 + 8 + 4 + 32 + 16, false);
                A.store.Ref(ptr + 560 + 8 + 4 + 32 + 0, undefined);
                A.store.Ref(ptr + 560 + 8 + 4 + 32 + 4, undefined);
                A.store.Ref(ptr + 560 + 8 + 4 + 32 + 8, undefined);
                A.store.Ref(ptr + 560 + 8 + 4 + 32 + 12, undefined);
              } else {
                A.store.Bool(ptr + 560 + 8 + 4 + 32 + 16, true);
                A.store.Ref(
                  ptr + 560 + 8 + 4 + 32 + 0,
                  x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]
                );
                A.store.Ref(ptr + 560 + 8 + 4 + 32 + 4, x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]);
                A.store.Ref(
                  ptr + 560 + 8 + 4 + 32 + 8,
                  x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]
                );
                A.store.Ref(
                  ptr + 560 + 8 + 4 + 32 + 12,
                  x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]
                );
              }
            }
            A.store.Ref(ptr + 560 + 8 + 56, x["VPN"]["IPsec"]["ClientCertPKCS11Id"]);
            A.store.Ref(ptr + 560 + 8 + 60, x["VPN"]["IPsec"]["ClientCertProvisioningProfileId"]);
            A.store.Ref(ptr + 560 + 8 + 64, x["VPN"]["IPsec"]["ClientCertRef"]);
            A.store.Ref(ptr + 560 + 8 + 68, x["VPN"]["IPsec"]["ClientCertType"]);

            if (typeof x["VPN"]["IPsec"]["EAP"] === "undefined") {
              A.store.Bool(ptr + 560 + 8 + 72 + 113, false);
              A.store.Ref(ptr + 560 + 8 + 72 + 0, undefined);

              A.store.Bool(ptr + 560 + 8 + 72 + 4 + 49, false);
              A.store.Ref(ptr + 560 + 8 + 72 + 4 + 0, undefined);

              A.store.Bool(ptr + 560 + 8 + 72 + 4 + 4 + 16, false);
              A.store.Ref(ptr + 560 + 8 + 72 + 4 + 4 + 0, undefined);
              A.store.Ref(ptr + 560 + 8 + 72 + 4 + 4 + 4, undefined);
              A.store.Ref(ptr + 560 + 8 + 72 + 4 + 4 + 8, undefined);
              A.store.Ref(ptr + 560 + 8 + 72 + 4 + 4 + 12, undefined);
              A.store.Ref(ptr + 560 + 8 + 72 + 4 + 24, undefined);
              A.store.Ref(ptr + 560 + 8 + 72 + 4 + 28, undefined);

              A.store.Bool(ptr + 560 + 8 + 72 + 4 + 32 + 16, false);
              A.store.Ref(ptr + 560 + 8 + 72 + 4 + 32 + 0, undefined);
              A.store.Ref(ptr + 560 + 8 + 72 + 4 + 32 + 4, undefined);
              A.store.Ref(ptr + 560 + 8 + 72 + 4 + 32 + 8, undefined);
              A.store.Ref(ptr + 560 + 8 + 72 + 4 + 32 + 12, undefined);
              A.store.Ref(ptr + 560 + 8 + 72 + 56, undefined);
              A.store.Ref(ptr + 560 + 8 + 72 + 60, undefined);
              A.store.Ref(ptr + 560 + 8 + 72 + 64, undefined);
              A.store.Ref(ptr + 560 + 8 + 72 + 68, undefined);
              A.store.Ref(ptr + 560 + 8 + 72 + 72, undefined);
              A.store.Ref(ptr + 560 + 8 + 72 + 76, undefined);
              A.store.Ref(ptr + 560 + 8 + 72 + 80, undefined);
              A.store.Ref(ptr + 560 + 8 + 72 + 84, undefined);
              A.store.Bool(ptr + 560 + 8 + 72 + 110, false);
              A.store.Bool(ptr + 560 + 8 + 72 + 88, false);
              A.store.Ref(ptr + 560 + 8 + 72 + 92, undefined);
              A.store.Ref(ptr + 560 + 8 + 72 + 96, undefined);
              A.store.Ref(ptr + 560 + 8 + 72 + 100, undefined);
              A.store.Ref(ptr + 560 + 8 + 72 + 104, undefined);
              A.store.Bool(ptr + 560 + 8 + 72 + 111, false);
              A.store.Bool(ptr + 560 + 8 + 72 + 108, false);
              A.store.Bool(ptr + 560 + 8 + 72 + 112, false);
              A.store.Bool(ptr + 560 + 8 + 72 + 109, false);
            } else {
              A.store.Bool(ptr + 560 + 8 + 72 + 113, true);
              A.store.Ref(ptr + 560 + 8 + 72 + 0, x["VPN"]["IPsec"]["EAP"]["AnonymousIdentity"]);

              if (typeof x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"] === "undefined") {
                A.store.Bool(ptr + 560 + 8 + 72 + 4 + 49, false);
                A.store.Ref(ptr + 560 + 8 + 72 + 4 + 0, undefined);

                A.store.Bool(ptr + 560 + 8 + 72 + 4 + 4 + 16, false);
                A.store.Ref(ptr + 560 + 8 + 72 + 4 + 4 + 0, undefined);
                A.store.Ref(ptr + 560 + 8 + 72 + 4 + 4 + 4, undefined);
                A.store.Ref(ptr + 560 + 8 + 72 + 4 + 4 + 8, undefined);
                A.store.Ref(ptr + 560 + 8 + 72 + 4 + 4 + 12, undefined);
                A.store.Ref(ptr + 560 + 8 + 72 + 4 + 24, undefined);
                A.store.Ref(ptr + 560 + 8 + 72 + 4 + 28, undefined);

                A.store.Bool(ptr + 560 + 8 + 72 + 4 + 32 + 16, false);
                A.store.Ref(ptr + 560 + 8 + 72 + 4 + 32 + 0, undefined);
                A.store.Ref(ptr + 560 + 8 + 72 + 4 + 32 + 4, undefined);
                A.store.Ref(ptr + 560 + 8 + 72 + 4 + 32 + 8, undefined);
                A.store.Ref(ptr + 560 + 8 + 72 + 4 + 32 + 12, undefined);
              } else {
                A.store.Bool(ptr + 560 + 8 + 72 + 4 + 49, true);
                A.store.Ref(ptr + 560 + 8 + 72 + 4 + 0, x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]);

                if (typeof x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"] === "undefined") {
                  A.store.Bool(ptr + 560 + 8 + 72 + 4 + 4 + 16, false);
                  A.store.Ref(ptr + 560 + 8 + 72 + 4 + 4 + 0, undefined);
                  A.store.Ref(ptr + 560 + 8 + 72 + 4 + 4 + 4, undefined);
                  A.store.Ref(ptr + 560 + 8 + 72 + 4 + 4 + 8, undefined);
                  A.store.Ref(ptr + 560 + 8 + 72 + 4 + 4 + 12, undefined);
                } else {
                  A.store.Bool(ptr + 560 + 8 + 72 + 4 + 4 + 16, true);
                  A.store.Ref(
                    ptr + 560 + 8 + 72 + 4 + 4 + 0,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]
                  );
                  A.store.Ref(
                    ptr + 560 + 8 + 72 + 4 + 4 + 4,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]
                  );
                  A.store.Ref(
                    ptr + 560 + 8 + 72 + 4 + 4 + 8,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]
                  );
                  A.store.Ref(
                    ptr + 560 + 8 + 72 + 4 + 4 + 12,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]
                  );
                }
                A.store.Ref(ptr + 560 + 8 + 72 + 4 + 24, x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCAPEMs"]);
                A.store.Ref(ptr + 560 + 8 + 72 + 4 + 28, x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]);

                if (typeof x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"] === "undefined") {
                  A.store.Bool(ptr + 560 + 8 + 72 + 4 + 32 + 16, false);
                  A.store.Ref(ptr + 560 + 8 + 72 + 4 + 32 + 0, undefined);
                  A.store.Ref(ptr + 560 + 8 + 72 + 4 + 32 + 4, undefined);
                  A.store.Ref(ptr + 560 + 8 + 72 + 4 + 32 + 8, undefined);
                  A.store.Ref(ptr + 560 + 8 + 72 + 4 + 32 + 12, undefined);
                } else {
                  A.store.Bool(ptr + 560 + 8 + 72 + 4 + 32 + 16, true);
                  A.store.Ref(
                    ptr + 560 + 8 + 72 + 4 + 32 + 0,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]
                  );
                  A.store.Ref(
                    ptr + 560 + 8 + 72 + 4 + 32 + 4,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]
                  );
                  A.store.Ref(
                    ptr + 560 + 8 + 72 + 4 + 32 + 8,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]
                  );
                  A.store.Ref(
                    ptr + 560 + 8 + 72 + 4 + 32 + 12,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]
                  );
                }
              }
              A.store.Ref(ptr + 560 + 8 + 72 + 56, x["VPN"]["IPsec"]["EAP"]["ClientCertPKCS11Id"]);
              A.store.Ref(ptr + 560 + 8 + 72 + 60, x["VPN"]["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]);
              A.store.Ref(ptr + 560 + 8 + 72 + 64, x["VPN"]["IPsec"]["EAP"]["ClientCertRef"]);
              A.store.Ref(ptr + 560 + 8 + 72 + 68, x["VPN"]["IPsec"]["EAP"]["ClientCertType"]);
              A.store.Ref(ptr + 560 + 8 + 72 + 72, x["VPN"]["IPsec"]["EAP"]["Identity"]);
              A.store.Ref(ptr + 560 + 8 + 72 + 76, x["VPN"]["IPsec"]["EAP"]["Inner"]);
              A.store.Ref(ptr + 560 + 8 + 72 + 80, x["VPN"]["IPsec"]["EAP"]["Outer"]);
              A.store.Ref(ptr + 560 + 8 + 72 + 84, x["VPN"]["IPsec"]["EAP"]["Password"]);
              A.store.Bool(ptr + 560 + 8 + 72 + 110, "SaveCredentials" in x["VPN"]["IPsec"]["EAP"] ? true : false);
              A.store.Bool(ptr + 560 + 8 + 72 + 88, x["VPN"]["IPsec"]["EAP"]["SaveCredentials"] ? true : false);
              A.store.Ref(ptr + 560 + 8 + 72 + 92, x["VPN"]["IPsec"]["EAP"]["ServerCAPEMs"]);
              A.store.Ref(ptr + 560 + 8 + 72 + 96, x["VPN"]["IPsec"]["EAP"]["ServerCARefs"]);
              A.store.Ref(ptr + 560 + 8 + 72 + 100, x["VPN"]["IPsec"]["EAP"]["SubjectMatch"]);
              A.store.Ref(ptr + 560 + 8 + 72 + 104, x["VPN"]["IPsec"]["EAP"]["TLSVersionMax"]);
              A.store.Bool(
                ptr + 560 + 8 + 72 + 111,
                "UseProactiveKeyCaching" in x["VPN"]["IPsec"]["EAP"] ? true : false
              );
              A.store.Bool(ptr + 560 + 8 + 72 + 108, x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"] ? true : false);
              A.store.Bool(ptr + 560 + 8 + 72 + 112, "UseSystemCAs" in x["VPN"]["IPsec"]["EAP"] ? true : false);
              A.store.Bool(ptr + 560 + 8 + 72 + 109, x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"] ? true : false);
            }
            A.store.Ref(ptr + 560 + 8 + 188, x["VPN"]["IPsec"]["Group"]);
            A.store.Bool(ptr + 560 + 8 + 234, "IKEVersion" in x["VPN"]["IPsec"] ? true : false);
            A.store.Int32(
              ptr + 560 + 8 + 192,
              x["VPN"]["IPsec"]["IKEVersion"] === undefined ? 0 : (x["VPN"]["IPsec"]["IKEVersion"] as number)
            );
            A.store.Ref(ptr + 560 + 8 + 196, x["VPN"]["IPsec"]["LocalIdentity"]);
            A.store.Ref(ptr + 560 + 8 + 200, x["VPN"]["IPsec"]["PSK"]);
            A.store.Ref(ptr + 560 + 8 + 204, x["VPN"]["IPsec"]["RemoteIdentity"]);
            A.store.Bool(ptr + 560 + 8 + 235, "SaveCredentials" in x["VPN"]["IPsec"] ? true : false);
            A.store.Bool(ptr + 560 + 8 + 208, x["VPN"]["IPsec"]["SaveCredentials"] ? true : false);
            A.store.Ref(ptr + 560 + 8 + 212, x["VPN"]["IPsec"]["ServerCAPEMs"]);
            A.store.Ref(ptr + 560 + 8 + 216, x["VPN"]["IPsec"]["ServerCARefs"]);

            if (typeof x["VPN"]["IPsec"]["XAUTH"] === "undefined") {
              A.store.Bool(ptr + 560 + 8 + 220 + 13, false);
              A.store.Ref(ptr + 560 + 8 + 220 + 0, undefined);
              A.store.Bool(ptr + 560 + 8 + 220 + 12, false);
              A.store.Bool(ptr + 560 + 8 + 220 + 4, false);
              A.store.Ref(ptr + 560 + 8 + 220 + 8, undefined);
            } else {
              A.store.Bool(ptr + 560 + 8 + 220 + 13, true);
              A.store.Ref(ptr + 560 + 8 + 220 + 0, x["VPN"]["IPsec"]["XAUTH"]["Password"]);
              A.store.Bool(ptr + 560 + 8 + 220 + 12, "SaveCredentials" in x["VPN"]["IPsec"]["XAUTH"] ? true : false);
              A.store.Bool(ptr + 560 + 8 + 220 + 4, x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"] ? true : false);
              A.store.Ref(ptr + 560 + 8 + 220 + 8, x["VPN"]["IPsec"]["XAUTH"]["Username"]);
            }
          }

          if (typeof x["VPN"]["L2TP"] === "undefined") {
            A.store.Bool(ptr + 560 + 248 + 18, false);
            A.store.Bool(ptr + 560 + 248 + 16, false);
            A.store.Bool(ptr + 560 + 248 + 0, false);
            A.store.Ref(ptr + 560 + 248 + 4, undefined);
            A.store.Bool(ptr + 560 + 248 + 17, false);
            A.store.Bool(ptr + 560 + 248 + 8, false);
            A.store.Ref(ptr + 560 + 248 + 12, undefined);
          } else {
            A.store.Bool(ptr + 560 + 248 + 18, true);
            A.store.Bool(ptr + 560 + 248 + 16, "LcpEchoDisabled" in x["VPN"]["L2TP"] ? true : false);
            A.store.Bool(ptr + 560 + 248 + 0, x["VPN"]["L2TP"]["LcpEchoDisabled"] ? true : false);
            A.store.Ref(ptr + 560 + 248 + 4, x["VPN"]["L2TP"]["Password"]);
            A.store.Bool(ptr + 560 + 248 + 17, "SaveCredentials" in x["VPN"]["L2TP"] ? true : false);
            A.store.Bool(ptr + 560 + 248 + 8, x["VPN"]["L2TP"]["SaveCredentials"] ? true : false);
            A.store.Ref(ptr + 560 + 248 + 12, x["VPN"]["L2TP"]["Username"]);
          }

          if (typeof x["VPN"]["OpenVPN"] === "undefined") {
            A.store.Bool(ptr + 560 + 268 + 218, false);
            A.store.Ref(ptr + 560 + 268 + 0, undefined);
            A.store.Ref(ptr + 560 + 268 + 4, undefined);
            A.store.Bool(ptr + 560 + 268 + 209, false);
            A.store.Bool(ptr + 560 + 268 + 8, false);
            A.store.Ref(ptr + 560 + 268 + 12, undefined);
            A.store.Ref(ptr + 560 + 268 + 16, undefined);

            A.store.Bool(ptr + 560 + 268 + 20 + 49, false);
            A.store.Ref(ptr + 560 + 268 + 20 + 0, undefined);

            A.store.Bool(ptr + 560 + 268 + 20 + 4 + 16, false);
            A.store.Ref(ptr + 560 + 268 + 20 + 4 + 0, undefined);
            A.store.Ref(ptr + 560 + 268 + 20 + 4 + 4, undefined);
            A.store.Ref(ptr + 560 + 268 + 20 + 4 + 8, undefined);
            A.store.Ref(ptr + 560 + 268 + 20 + 4 + 12, undefined);
            A.store.Ref(ptr + 560 + 268 + 20 + 24, undefined);
            A.store.Ref(ptr + 560 + 268 + 20 + 28, undefined);

            A.store.Bool(ptr + 560 + 268 + 20 + 32 + 16, false);
            A.store.Ref(ptr + 560 + 268 + 20 + 32 + 0, undefined);
            A.store.Ref(ptr + 560 + 268 + 20 + 32 + 4, undefined);
            A.store.Ref(ptr + 560 + 268 + 20 + 32 + 8, undefined);
            A.store.Ref(ptr + 560 + 268 + 20 + 32 + 12, undefined);
            A.store.Ref(ptr + 560 + 268 + 72, undefined);
            A.store.Ref(ptr + 560 + 268 + 76, undefined);
            A.store.Ref(ptr + 560 + 268 + 80, undefined);
            A.store.Ref(ptr + 560 + 268 + 84, undefined);
            A.store.Bool(ptr + 560 + 268 + 210, false);
            A.store.Bool(ptr + 560 + 268 + 88, false);
            A.store.Ref(ptr + 560 + 268 + 92, undefined);
            A.store.Bool(ptr + 560 + 268 + 211, false);
            A.store.Bool(ptr + 560 + 268 + 96, false);
            A.store.Ref(ptr + 560 + 268 + 100, undefined);
            A.store.Ref(ptr + 560 + 268 + 104, undefined);
            A.store.Ref(ptr + 560 + 268 + 108, undefined);
            A.store.Ref(ptr + 560 + 268 + 112, undefined);
            A.store.Bool(ptr + 560 + 268 + 212, false);
            A.store.Int32(ptr + 560 + 268 + 116, 0);
            A.store.Ref(ptr + 560 + 268 + 120, undefined);
            A.store.Bool(ptr + 560 + 268 + 213, false);
            A.store.Bool(ptr + 560 + 268 + 124, false);
            A.store.Ref(ptr + 560 + 268 + 128, undefined);
            A.store.Ref(ptr + 560 + 268 + 132, undefined);
            A.store.Ref(ptr + 560 + 268 + 136, undefined);
            A.store.Bool(ptr + 560 + 268 + 214, false);
            A.store.Int32(ptr + 560 + 268 + 140, 0);
            A.store.Bool(ptr + 560 + 268 + 215, false);
            A.store.Bool(ptr + 560 + 268 + 144, false);
            A.store.Ref(ptr + 560 + 268 + 148, undefined);
            A.store.Ref(ptr + 560 + 268 + 152, undefined);
            A.store.Ref(ptr + 560 + 268 + 156, undefined);
            A.store.Bool(ptr + 560 + 268 + 216, false);
            A.store.Int32(ptr + 560 + 268 + 160, 0);
            A.store.Bool(ptr + 560 + 268 + 217, false);
            A.store.Int32(ptr + 560 + 268 + 164, 0);
            A.store.Ref(ptr + 560 + 268 + 168, undefined);
            A.store.Ref(ptr + 560 + 268 + 172, undefined);
            A.store.Ref(ptr + 560 + 268 + 176, undefined);
            A.store.Ref(ptr + 560 + 268 + 180, undefined);
            A.store.Ref(ptr + 560 + 268 + 184, undefined);
            A.store.Ref(ptr + 560 + 268 + 188, undefined);
            A.store.Ref(ptr + 560 + 268 + 192, undefined);
            A.store.Ref(ptr + 560 + 268 + 196, undefined);

            A.store.Bool(ptr + 560 + 268 + 200 + 8, false);
            A.store.Ref(ptr + 560 + 268 + 200 + 0, undefined);
            A.store.Ref(ptr + 560 + 268 + 200 + 4, undefined);
          } else {
            A.store.Bool(ptr + 560 + 268 + 218, true);
            A.store.Ref(ptr + 560 + 268 + 0, x["VPN"]["OpenVPN"]["Auth"]);
            A.store.Ref(ptr + 560 + 268 + 4, x["VPN"]["OpenVPN"]["AuthRetry"]);
            A.store.Bool(ptr + 560 + 268 + 209, "AuthNoCache" in x["VPN"]["OpenVPN"] ? true : false);
            A.store.Bool(ptr + 560 + 268 + 8, x["VPN"]["OpenVPN"]["AuthNoCache"] ? true : false);
            A.store.Ref(ptr + 560 + 268 + 12, x["VPN"]["OpenVPN"]["Cipher"]);
            A.store.Ref(ptr + 560 + 268 + 16, x["VPN"]["OpenVPN"]["ClientCertPKCS11Id"]);

            if (typeof x["VPN"]["OpenVPN"]["ClientCertPattern"] === "undefined") {
              A.store.Bool(ptr + 560 + 268 + 20 + 49, false);
              A.store.Ref(ptr + 560 + 268 + 20 + 0, undefined);

              A.store.Bool(ptr + 560 + 268 + 20 + 4 + 16, false);
              A.store.Ref(ptr + 560 + 268 + 20 + 4 + 0, undefined);
              A.store.Ref(ptr + 560 + 268 + 20 + 4 + 4, undefined);
              A.store.Ref(ptr + 560 + 268 + 20 + 4 + 8, undefined);
              A.store.Ref(ptr + 560 + 268 + 20 + 4 + 12, undefined);
              A.store.Ref(ptr + 560 + 268 + 20 + 24, undefined);
              A.store.Ref(ptr + 560 + 268 + 20 + 28, undefined);

              A.store.Bool(ptr + 560 + 268 + 20 + 32 + 16, false);
              A.store.Ref(ptr + 560 + 268 + 20 + 32 + 0, undefined);
              A.store.Ref(ptr + 560 + 268 + 20 + 32 + 4, undefined);
              A.store.Ref(ptr + 560 + 268 + 20 + 32 + 8, undefined);
              A.store.Ref(ptr + 560 + 268 + 20 + 32 + 12, undefined);
            } else {
              A.store.Bool(ptr + 560 + 268 + 20 + 49, true);
              A.store.Ref(ptr + 560 + 268 + 20 + 0, x["VPN"]["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]);

              if (typeof x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"] === "undefined") {
                A.store.Bool(ptr + 560 + 268 + 20 + 4 + 16, false);
                A.store.Ref(ptr + 560 + 268 + 20 + 4 + 0, undefined);
                A.store.Ref(ptr + 560 + 268 + 20 + 4 + 4, undefined);
                A.store.Ref(ptr + 560 + 268 + 20 + 4 + 8, undefined);
                A.store.Ref(ptr + 560 + 268 + 20 + 4 + 12, undefined);
              } else {
                A.store.Bool(ptr + 560 + 268 + 20 + 4 + 16, true);
                A.store.Ref(
                  ptr + 560 + 268 + 20 + 4 + 0,
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]
                );
                A.store.Ref(
                  ptr + 560 + 268 + 20 + 4 + 4,
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]
                );
                A.store.Ref(
                  ptr + 560 + 268 + 20 + 4 + 8,
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]
                );
                A.store.Ref(
                  ptr + 560 + 268 + 20 + 4 + 12,
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]
                );
              }
              A.store.Ref(ptr + 560 + 268 + 20 + 24, x["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCAPEMs"]);
              A.store.Ref(ptr + 560 + 268 + 20 + 28, x["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]);

              if (typeof x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"] === "undefined") {
                A.store.Bool(ptr + 560 + 268 + 20 + 32 + 16, false);
                A.store.Ref(ptr + 560 + 268 + 20 + 32 + 0, undefined);
                A.store.Ref(ptr + 560 + 268 + 20 + 32 + 4, undefined);
                A.store.Ref(ptr + 560 + 268 + 20 + 32 + 8, undefined);
                A.store.Ref(ptr + 560 + 268 + 20 + 32 + 12, undefined);
              } else {
                A.store.Bool(ptr + 560 + 268 + 20 + 32 + 16, true);
                A.store.Ref(
                  ptr + 560 + 268 + 20 + 32 + 0,
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]
                );
                A.store.Ref(
                  ptr + 560 + 268 + 20 + 32 + 4,
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]
                );
                A.store.Ref(
                  ptr + 560 + 268 + 20 + 32 + 8,
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]
                );
                A.store.Ref(
                  ptr + 560 + 268 + 20 + 32 + 12,
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]
                );
              }
            }
            A.store.Ref(ptr + 560 + 268 + 72, x["VPN"]["OpenVPN"]["ClientCertProvisioningProfileId"]);
            A.store.Ref(ptr + 560 + 268 + 76, x["VPN"]["OpenVPN"]["ClientCertRef"]);
            A.store.Ref(ptr + 560 + 268 + 80, x["VPN"]["OpenVPN"]["ClientCertType"]);
            A.store.Ref(ptr + 560 + 268 + 84, x["VPN"]["OpenVPN"]["CompLZO"]);
            A.store.Bool(ptr + 560 + 268 + 210, "CompNoAdapt" in x["VPN"]["OpenVPN"] ? true : false);
            A.store.Bool(ptr + 560 + 268 + 88, x["VPN"]["OpenVPN"]["CompNoAdapt"] ? true : false);
            A.store.Ref(ptr + 560 + 268 + 92, x["VPN"]["OpenVPN"]["ExtraHosts"]);
            A.store.Bool(ptr + 560 + 268 + 211, "IgnoreDefaultRoute" in x["VPN"]["OpenVPN"] ? true : false);
            A.store.Bool(ptr + 560 + 268 + 96, x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"] ? true : false);
            A.store.Ref(ptr + 560 + 268 + 100, x["VPN"]["OpenVPN"]["KeyDirection"]);
            A.store.Ref(ptr + 560 + 268 + 104, x["VPN"]["OpenVPN"]["NsCertType"]);
            A.store.Ref(ptr + 560 + 268 + 108, x["VPN"]["OpenVPN"]["OTP"]);
            A.store.Ref(ptr + 560 + 268 + 112, x["VPN"]["OpenVPN"]["Password"]);
            A.store.Bool(ptr + 560 + 268 + 212, "Port" in x["VPN"]["OpenVPN"] ? true : false);
            A.store.Int32(
              ptr + 560 + 268 + 116,
              x["VPN"]["OpenVPN"]["Port"] === undefined ? 0 : (x["VPN"]["OpenVPN"]["Port"] as number)
            );
            A.store.Ref(ptr + 560 + 268 + 120, x["VPN"]["OpenVPN"]["Proto"]);
            A.store.Bool(ptr + 560 + 268 + 213, "PushPeerInfo" in x["VPN"]["OpenVPN"] ? true : false);
            A.store.Bool(ptr + 560 + 268 + 124, x["VPN"]["OpenVPN"]["PushPeerInfo"] ? true : false);
            A.store.Ref(ptr + 560 + 268 + 128, x["VPN"]["OpenVPN"]["RemoteCertEKU"]);
            A.store.Ref(ptr + 560 + 268 + 132, x["VPN"]["OpenVPN"]["RemoteCertKU"]);
            A.store.Ref(ptr + 560 + 268 + 136, x["VPN"]["OpenVPN"]["RemoteCertTLS"]);
            A.store.Bool(ptr + 560 + 268 + 214, "RenegSec" in x["VPN"]["OpenVPN"] ? true : false);
            A.store.Int32(
              ptr + 560 + 268 + 140,
              x["VPN"]["OpenVPN"]["RenegSec"] === undefined ? 0 : (x["VPN"]["OpenVPN"]["RenegSec"] as number)
            );
            A.store.Bool(ptr + 560 + 268 + 215, "SaveCredentials" in x["VPN"]["OpenVPN"] ? true : false);
            A.store.Bool(ptr + 560 + 268 + 144, x["VPN"]["OpenVPN"]["SaveCredentials"] ? true : false);
            A.store.Ref(ptr + 560 + 268 + 148, x["VPN"]["OpenVPN"]["ServerCAPEMs"]);
            A.store.Ref(ptr + 560 + 268 + 152, x["VPN"]["OpenVPN"]["ServerCARefs"]);
            A.store.Ref(ptr + 560 + 268 + 156, x["VPN"]["OpenVPN"]["ServerCertRef"]);
            A.store.Bool(ptr + 560 + 268 + 216, "ServerPollTimeout" in x["VPN"]["OpenVPN"] ? true : false);
            A.store.Int32(
              ptr + 560 + 268 + 160,
              x["VPN"]["OpenVPN"]["ServerPollTimeout"] === undefined
                ? 0
                : (x["VPN"]["OpenVPN"]["ServerPollTimeout"] as number)
            );
            A.store.Bool(ptr + 560 + 268 + 217, "Shaper" in x["VPN"]["OpenVPN"] ? true : false);
            A.store.Int32(
              ptr + 560 + 268 + 164,
              x["VPN"]["OpenVPN"]["Shaper"] === undefined ? 0 : (x["VPN"]["OpenVPN"]["Shaper"] as number)
            );
            A.store.Ref(ptr + 560 + 268 + 168, x["VPN"]["OpenVPN"]["StaticChallenge"]);
            A.store.Ref(ptr + 560 + 268 + 172, x["VPN"]["OpenVPN"]["TLSAuthContents"]);
            A.store.Ref(ptr + 560 + 268 + 176, x["VPN"]["OpenVPN"]["TLSRemote"]);
            A.store.Ref(ptr + 560 + 268 + 180, x["VPN"]["OpenVPN"]["TLSVersionMin"]);
            A.store.Ref(ptr + 560 + 268 + 184, x["VPN"]["OpenVPN"]["UserAuthenticationType"]);
            A.store.Ref(ptr + 560 + 268 + 188, x["VPN"]["OpenVPN"]["Username"]);
            A.store.Ref(ptr + 560 + 268 + 192, x["VPN"]["OpenVPN"]["Verb"]);
            A.store.Ref(ptr + 560 + 268 + 196, x["VPN"]["OpenVPN"]["VerifyHash"]);

            if (typeof x["VPN"]["OpenVPN"]["VerifyX509"] === "undefined") {
              A.store.Bool(ptr + 560 + 268 + 200 + 8, false);
              A.store.Ref(ptr + 560 + 268 + 200 + 0, undefined);
              A.store.Ref(ptr + 560 + 268 + 200 + 4, undefined);
            } else {
              A.store.Bool(ptr + 560 + 268 + 200 + 8, true);
              A.store.Ref(ptr + 560 + 268 + 200 + 0, x["VPN"]["OpenVPN"]["VerifyX509"]["Name"]);
              A.store.Ref(ptr + 560 + 268 + 200 + 4, x["VPN"]["OpenVPN"]["VerifyX509"]["Type"]);
            }
          }

          if (typeof x["VPN"]["ThirdPartyVPN"] === "undefined") {
            A.store.Bool(ptr + 560 + 488 + 8, false);
            A.store.Ref(ptr + 560 + 488 + 0, undefined);
            A.store.Ref(ptr + 560 + 488 + 4, undefined);
          } else {
            A.store.Bool(ptr + 560 + 488 + 8, true);
            A.store.Ref(ptr + 560 + 488 + 0, x["VPN"]["ThirdPartyVPN"]["ExtensionID"]);
            A.store.Ref(ptr + 560 + 488 + 4, x["VPN"]["ThirdPartyVPN"]["ProviderName"]);
          }
          A.store.Ref(ptr + 560 + 500, x["VPN"]["Type"]);
        }

        if (typeof x["WiFi"] === "undefined") {
          A.store.Bool(ptr + 1068 + 161, false);
          A.store.Bool(ptr + 1068 + 156, false);
          A.store.Bool(ptr + 1068 + 0, false);
          A.store.Bool(ptr + 1068 + 157, false);
          A.store.Bool(ptr + 1068 + 1, false);
          A.store.Ref(ptr + 1068 + 4, undefined);

          A.store.Bool(ptr + 1068 + 8 + 113, false);
          A.store.Ref(ptr + 1068 + 8 + 0, undefined);

          A.store.Bool(ptr + 1068 + 8 + 4 + 49, false);
          A.store.Ref(ptr + 1068 + 8 + 4 + 0, undefined);

          A.store.Bool(ptr + 1068 + 8 + 4 + 4 + 16, false);
          A.store.Ref(ptr + 1068 + 8 + 4 + 4 + 0, undefined);
          A.store.Ref(ptr + 1068 + 8 + 4 + 4 + 4, undefined);
          A.store.Ref(ptr + 1068 + 8 + 4 + 4 + 8, undefined);
          A.store.Ref(ptr + 1068 + 8 + 4 + 4 + 12, undefined);
          A.store.Ref(ptr + 1068 + 8 + 4 + 24, undefined);
          A.store.Ref(ptr + 1068 + 8 + 4 + 28, undefined);

          A.store.Bool(ptr + 1068 + 8 + 4 + 32 + 16, false);
          A.store.Ref(ptr + 1068 + 8 + 4 + 32 + 0, undefined);
          A.store.Ref(ptr + 1068 + 8 + 4 + 32 + 4, undefined);
          A.store.Ref(ptr + 1068 + 8 + 4 + 32 + 8, undefined);
          A.store.Ref(ptr + 1068 + 8 + 4 + 32 + 12, undefined);
          A.store.Ref(ptr + 1068 + 8 + 56, undefined);
          A.store.Ref(ptr + 1068 + 8 + 60, undefined);
          A.store.Ref(ptr + 1068 + 8 + 64, undefined);
          A.store.Ref(ptr + 1068 + 8 + 68, undefined);
          A.store.Ref(ptr + 1068 + 8 + 72, undefined);
          A.store.Ref(ptr + 1068 + 8 + 76, undefined);
          A.store.Ref(ptr + 1068 + 8 + 80, undefined);
          A.store.Ref(ptr + 1068 + 8 + 84, undefined);
          A.store.Bool(ptr + 1068 + 8 + 110, false);
          A.store.Bool(ptr + 1068 + 8 + 88, false);
          A.store.Ref(ptr + 1068 + 8 + 92, undefined);
          A.store.Ref(ptr + 1068 + 8 + 96, undefined);
          A.store.Ref(ptr + 1068 + 8 + 100, undefined);
          A.store.Ref(ptr + 1068 + 8 + 104, undefined);
          A.store.Bool(ptr + 1068 + 8 + 111, false);
          A.store.Bool(ptr + 1068 + 8 + 108, false);
          A.store.Bool(ptr + 1068 + 8 + 112, false);
          A.store.Bool(ptr + 1068 + 8 + 109, false);
          A.store.Bool(ptr + 1068 + 158, false);
          A.store.Int32(ptr + 1068 + 124, 0);
          A.store.Ref(ptr + 1068 + 128, undefined);
          A.store.Ref(ptr + 1068 + 132, undefined);
          A.store.Bool(ptr + 1068 + 159, false);
          A.store.Bool(ptr + 1068 + 136, false);
          A.store.Ref(ptr + 1068 + 140, undefined);
          A.store.Ref(ptr + 1068 + 144, undefined);
          A.store.Ref(ptr + 1068 + 148, undefined);
          A.store.Bool(ptr + 1068 + 160, false);
          A.store.Int32(ptr + 1068 + 152, 0);
        } else {
          A.store.Bool(ptr + 1068 + 161, true);
          A.store.Bool(ptr + 1068 + 156, "AllowGatewayARPPolling" in x["WiFi"] ? true : false);
          A.store.Bool(ptr + 1068 + 0, x["WiFi"]["AllowGatewayARPPolling"] ? true : false);
          A.store.Bool(ptr + 1068 + 157, "AutoConnect" in x["WiFi"] ? true : false);
          A.store.Bool(ptr + 1068 + 1, x["WiFi"]["AutoConnect"] ? true : false);
          A.store.Ref(ptr + 1068 + 4, x["WiFi"]["BSSID"]);

          if (typeof x["WiFi"]["EAP"] === "undefined") {
            A.store.Bool(ptr + 1068 + 8 + 113, false);
            A.store.Ref(ptr + 1068 + 8 + 0, undefined);

            A.store.Bool(ptr + 1068 + 8 + 4 + 49, false);
            A.store.Ref(ptr + 1068 + 8 + 4 + 0, undefined);

            A.store.Bool(ptr + 1068 + 8 + 4 + 4 + 16, false);
            A.store.Ref(ptr + 1068 + 8 + 4 + 4 + 0, undefined);
            A.store.Ref(ptr + 1068 + 8 + 4 + 4 + 4, undefined);
            A.store.Ref(ptr + 1068 + 8 + 4 + 4 + 8, undefined);
            A.store.Ref(ptr + 1068 + 8 + 4 + 4 + 12, undefined);
            A.store.Ref(ptr + 1068 + 8 + 4 + 24, undefined);
            A.store.Ref(ptr + 1068 + 8 + 4 + 28, undefined);

            A.store.Bool(ptr + 1068 + 8 + 4 + 32 + 16, false);
            A.store.Ref(ptr + 1068 + 8 + 4 + 32 + 0, undefined);
            A.store.Ref(ptr + 1068 + 8 + 4 + 32 + 4, undefined);
            A.store.Ref(ptr + 1068 + 8 + 4 + 32 + 8, undefined);
            A.store.Ref(ptr + 1068 + 8 + 4 + 32 + 12, undefined);
            A.store.Ref(ptr + 1068 + 8 + 56, undefined);
            A.store.Ref(ptr + 1068 + 8 + 60, undefined);
            A.store.Ref(ptr + 1068 + 8 + 64, undefined);
            A.store.Ref(ptr + 1068 + 8 + 68, undefined);
            A.store.Ref(ptr + 1068 + 8 + 72, undefined);
            A.store.Ref(ptr + 1068 + 8 + 76, undefined);
            A.store.Ref(ptr + 1068 + 8 + 80, undefined);
            A.store.Ref(ptr + 1068 + 8 + 84, undefined);
            A.store.Bool(ptr + 1068 + 8 + 110, false);
            A.store.Bool(ptr + 1068 + 8 + 88, false);
            A.store.Ref(ptr + 1068 + 8 + 92, undefined);
            A.store.Ref(ptr + 1068 + 8 + 96, undefined);
            A.store.Ref(ptr + 1068 + 8 + 100, undefined);
            A.store.Ref(ptr + 1068 + 8 + 104, undefined);
            A.store.Bool(ptr + 1068 + 8 + 111, false);
            A.store.Bool(ptr + 1068 + 8 + 108, false);
            A.store.Bool(ptr + 1068 + 8 + 112, false);
            A.store.Bool(ptr + 1068 + 8 + 109, false);
          } else {
            A.store.Bool(ptr + 1068 + 8 + 113, true);
            A.store.Ref(ptr + 1068 + 8 + 0, x["WiFi"]["EAP"]["AnonymousIdentity"]);

            if (typeof x["WiFi"]["EAP"]["ClientCertPattern"] === "undefined") {
              A.store.Bool(ptr + 1068 + 8 + 4 + 49, false);
              A.store.Ref(ptr + 1068 + 8 + 4 + 0, undefined);

              A.store.Bool(ptr + 1068 + 8 + 4 + 4 + 16, false);
              A.store.Ref(ptr + 1068 + 8 + 4 + 4 + 0, undefined);
              A.store.Ref(ptr + 1068 + 8 + 4 + 4 + 4, undefined);
              A.store.Ref(ptr + 1068 + 8 + 4 + 4 + 8, undefined);
              A.store.Ref(ptr + 1068 + 8 + 4 + 4 + 12, undefined);
              A.store.Ref(ptr + 1068 + 8 + 4 + 24, undefined);
              A.store.Ref(ptr + 1068 + 8 + 4 + 28, undefined);

              A.store.Bool(ptr + 1068 + 8 + 4 + 32 + 16, false);
              A.store.Ref(ptr + 1068 + 8 + 4 + 32 + 0, undefined);
              A.store.Ref(ptr + 1068 + 8 + 4 + 32 + 4, undefined);
              A.store.Ref(ptr + 1068 + 8 + 4 + 32 + 8, undefined);
              A.store.Ref(ptr + 1068 + 8 + 4 + 32 + 12, undefined);
            } else {
              A.store.Bool(ptr + 1068 + 8 + 4 + 49, true);
              A.store.Ref(ptr + 1068 + 8 + 4 + 0, x["WiFi"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]);

              if (typeof x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"] === "undefined") {
                A.store.Bool(ptr + 1068 + 8 + 4 + 4 + 16, false);
                A.store.Ref(ptr + 1068 + 8 + 4 + 4 + 0, undefined);
                A.store.Ref(ptr + 1068 + 8 + 4 + 4 + 4, undefined);
                A.store.Ref(ptr + 1068 + 8 + 4 + 4 + 8, undefined);
                A.store.Ref(ptr + 1068 + 8 + 4 + 4 + 12, undefined);
              } else {
                A.store.Bool(ptr + 1068 + 8 + 4 + 4 + 16, true);
                A.store.Ref(ptr + 1068 + 8 + 4 + 4 + 0, x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]);
                A.store.Ref(ptr + 1068 + 8 + 4 + 4 + 4, x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]);
                A.store.Ref(
                  ptr + 1068 + 8 + 4 + 4 + 8,
                  x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]
                );
                A.store.Ref(
                  ptr + 1068 + 8 + 4 + 4 + 12,
                  x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]
                );
              }
              A.store.Ref(ptr + 1068 + 8 + 4 + 24, x["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCAPEMs"]);
              A.store.Ref(ptr + 1068 + 8 + 4 + 28, x["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCARef"]);

              if (typeof x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"] === "undefined") {
                A.store.Bool(ptr + 1068 + 8 + 4 + 32 + 16, false);
                A.store.Ref(ptr + 1068 + 8 + 4 + 32 + 0, undefined);
                A.store.Ref(ptr + 1068 + 8 + 4 + 32 + 4, undefined);
                A.store.Ref(ptr + 1068 + 8 + 4 + 32 + 8, undefined);
                A.store.Ref(ptr + 1068 + 8 + 4 + 32 + 12, undefined);
              } else {
                A.store.Bool(ptr + 1068 + 8 + 4 + 32 + 16, true);
                A.store.Ref(
                  ptr + 1068 + 8 + 4 + 32 + 0,
                  x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]
                );
                A.store.Ref(ptr + 1068 + 8 + 4 + 32 + 4, x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]);
                A.store.Ref(
                  ptr + 1068 + 8 + 4 + 32 + 8,
                  x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]
                );
                A.store.Ref(
                  ptr + 1068 + 8 + 4 + 32 + 12,
                  x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]
                );
              }
            }
            A.store.Ref(ptr + 1068 + 8 + 56, x["WiFi"]["EAP"]["ClientCertPKCS11Id"]);
            A.store.Ref(ptr + 1068 + 8 + 60, x["WiFi"]["EAP"]["ClientCertProvisioningProfileId"]);
            A.store.Ref(ptr + 1068 + 8 + 64, x["WiFi"]["EAP"]["ClientCertRef"]);
            A.store.Ref(ptr + 1068 + 8 + 68, x["WiFi"]["EAP"]["ClientCertType"]);
            A.store.Ref(ptr + 1068 + 8 + 72, x["WiFi"]["EAP"]["Identity"]);
            A.store.Ref(ptr + 1068 + 8 + 76, x["WiFi"]["EAP"]["Inner"]);
            A.store.Ref(ptr + 1068 + 8 + 80, x["WiFi"]["EAP"]["Outer"]);
            A.store.Ref(ptr + 1068 + 8 + 84, x["WiFi"]["EAP"]["Password"]);
            A.store.Bool(ptr + 1068 + 8 + 110, "SaveCredentials" in x["WiFi"]["EAP"] ? true : false);
            A.store.Bool(ptr + 1068 + 8 + 88, x["WiFi"]["EAP"]["SaveCredentials"] ? true : false);
            A.store.Ref(ptr + 1068 + 8 + 92, x["WiFi"]["EAP"]["ServerCAPEMs"]);
            A.store.Ref(ptr + 1068 + 8 + 96, x["WiFi"]["EAP"]["ServerCARefs"]);
            A.store.Ref(ptr + 1068 + 8 + 100, x["WiFi"]["EAP"]["SubjectMatch"]);
            A.store.Ref(ptr + 1068 + 8 + 104, x["WiFi"]["EAP"]["TLSVersionMax"]);
            A.store.Bool(ptr + 1068 + 8 + 111, "UseProactiveKeyCaching" in x["WiFi"]["EAP"] ? true : false);
            A.store.Bool(ptr + 1068 + 8 + 108, x["WiFi"]["EAP"]["UseProactiveKeyCaching"] ? true : false);
            A.store.Bool(ptr + 1068 + 8 + 112, "UseSystemCAs" in x["WiFi"]["EAP"] ? true : false);
            A.store.Bool(ptr + 1068 + 8 + 109, x["WiFi"]["EAP"]["UseSystemCAs"] ? true : false);
          }
          A.store.Bool(ptr + 1068 + 158, "Frequency" in x["WiFi"] ? true : false);
          A.store.Int32(
            ptr + 1068 + 124,
            x["WiFi"]["Frequency"] === undefined ? 0 : (x["WiFi"]["Frequency"] as number)
          );
          A.store.Ref(ptr + 1068 + 128, x["WiFi"]["FrequencyList"]);
          A.store.Ref(ptr + 1068 + 132, x["WiFi"]["HexSSID"]);
          A.store.Bool(ptr + 1068 + 159, "HiddenSSID" in x["WiFi"] ? true : false);
          A.store.Bool(ptr + 1068 + 136, x["WiFi"]["HiddenSSID"] ? true : false);
          A.store.Ref(ptr + 1068 + 140, x["WiFi"]["Passphrase"]);
          A.store.Ref(ptr + 1068 + 144, x["WiFi"]["SSID"]);
          A.store.Ref(ptr + 1068 + 148, x["WiFi"]["Security"]);
          A.store.Bool(ptr + 1068 + 160, "SignalStrength" in x["WiFi"] ? true : false);
          A.store.Int32(
            ptr + 1068 + 152,
            x["WiFi"]["SignalStrength"] === undefined ? 0 : (x["WiFi"]["SignalStrength"] as number)
          );
        }
      }
    },
    "load_NetworkProperties": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      if (A.load.Bool(ptr + 0 + 219)) {
        x["Cellular"] = {};
        if (A.load.Bool(ptr + 0 + 213)) {
          x["Cellular"]["AutoConnect"] = A.load.Bool(ptr + 0 + 0);
        } else {
          delete x["Cellular"]["AutoConnect"];
        }
        if (A.load.Bool(ptr + 0 + 4 + 28)) {
          x["Cellular"]["APN"] = {};
          x["Cellular"]["APN"]["AccessPointName"] = A.load.Ref(ptr + 0 + 4 + 0, undefined);
          x["Cellular"]["APN"]["Authentication"] = A.load.Ref(ptr + 0 + 4 + 4, undefined);
          x["Cellular"]["APN"]["Language"] = A.load.Ref(ptr + 0 + 4 + 8, undefined);
          x["Cellular"]["APN"]["LocalizedName"] = A.load.Ref(ptr + 0 + 4 + 12, undefined);
          x["Cellular"]["APN"]["Name"] = A.load.Ref(ptr + 0 + 4 + 16, undefined);
          x["Cellular"]["APN"]["Password"] = A.load.Ref(ptr + 0 + 4 + 20, undefined);
          x["Cellular"]["APN"]["Username"] = A.load.Ref(ptr + 0 + 4 + 24, undefined);
        } else {
          delete x["Cellular"]["APN"];
        }
        x["Cellular"]["APNList"] = A.load.Ref(ptr + 0 + 36, undefined);
        x["Cellular"]["ActivationType"] = A.load.Ref(ptr + 0 + 40, undefined);
        x["Cellular"]["ActivationState"] = A.load.Enum(ptr + 0 + 44, [
          "Activated",
          "Activating",
          "NotActivated",
          "PartiallyActivated",
        ]);
        if (A.load.Bool(ptr + 0 + 214)) {
          x["Cellular"]["AllowRoaming"] = A.load.Bool(ptr + 0 + 48);
        } else {
          delete x["Cellular"]["AllowRoaming"];
        }
        x["Cellular"]["ESN"] = A.load.Ref(ptr + 0 + 52, undefined);
        x["Cellular"]["Family"] = A.load.Ref(ptr + 0 + 56, undefined);
        x["Cellular"]["FirmwareRevision"] = A.load.Ref(ptr + 0 + 60, undefined);
        x["Cellular"]["FoundNetworks"] = A.load.Ref(ptr + 0 + 64, undefined);
        x["Cellular"]["HardwareRevision"] = A.load.Ref(ptr + 0 + 68, undefined);
        if (A.load.Bool(ptr + 0 + 72 + 12)) {
          x["Cellular"]["HomeProvider"] = {};
          x["Cellular"]["HomeProvider"]["Name"] = A.load.Ref(ptr + 0 + 72 + 0, undefined);
          x["Cellular"]["HomeProvider"]["Code"] = A.load.Ref(ptr + 0 + 72 + 4, undefined);
          x["Cellular"]["HomeProvider"]["Country"] = A.load.Ref(ptr + 0 + 72 + 8, undefined);
        } else {
          delete x["Cellular"]["HomeProvider"];
        }
        x["Cellular"]["ICCID"] = A.load.Ref(ptr + 0 + 88, undefined);
        x["Cellular"]["IMEI"] = A.load.Ref(ptr + 0 + 92, undefined);
        if (A.load.Bool(ptr + 0 + 96 + 28)) {
          x["Cellular"]["LastGoodAPN"] = {};
          x["Cellular"]["LastGoodAPN"]["AccessPointName"] = A.load.Ref(ptr + 0 + 96 + 0, undefined);
          x["Cellular"]["LastGoodAPN"]["Authentication"] = A.load.Ref(ptr + 0 + 96 + 4, undefined);
          x["Cellular"]["LastGoodAPN"]["Language"] = A.load.Ref(ptr + 0 + 96 + 8, undefined);
          x["Cellular"]["LastGoodAPN"]["LocalizedName"] = A.load.Ref(ptr + 0 + 96 + 12, undefined);
          x["Cellular"]["LastGoodAPN"]["Name"] = A.load.Ref(ptr + 0 + 96 + 16, undefined);
          x["Cellular"]["LastGoodAPN"]["Password"] = A.load.Ref(ptr + 0 + 96 + 20, undefined);
          x["Cellular"]["LastGoodAPN"]["Username"] = A.load.Ref(ptr + 0 + 96 + 24, undefined);
        } else {
          delete x["Cellular"]["LastGoodAPN"];
        }
        x["Cellular"]["Manufacturer"] = A.load.Ref(ptr + 0 + 128, undefined);
        x["Cellular"]["MDN"] = A.load.Ref(ptr + 0 + 132, undefined);
        x["Cellular"]["MEID"] = A.load.Ref(ptr + 0 + 136, undefined);
        x["Cellular"]["MIN"] = A.load.Ref(ptr + 0 + 140, undefined);
        x["Cellular"]["ModelID"] = A.load.Ref(ptr + 0 + 144, undefined);
        x["Cellular"]["NetworkTechnology"] = A.load.Ref(ptr + 0 + 148, undefined);
        if (A.load.Bool(ptr + 0 + 152 + 12)) {
          x["Cellular"]["PaymentPortal"] = {};
          x["Cellular"]["PaymentPortal"]["Method"] = A.load.Ref(ptr + 0 + 152 + 0, undefined);
          x["Cellular"]["PaymentPortal"]["PostData"] = A.load.Ref(ptr + 0 + 152 + 4, undefined);
          x["Cellular"]["PaymentPortal"]["Url"] = A.load.Ref(ptr + 0 + 152 + 8, undefined);
        } else {
          delete x["Cellular"]["PaymentPortal"];
        }
        x["Cellular"]["RoamingState"] = A.load.Ref(ptr + 0 + 168, undefined);
        if (A.load.Bool(ptr + 0 + 215)) {
          x["Cellular"]["Scanning"] = A.load.Bool(ptr + 0 + 172);
        } else {
          delete x["Cellular"]["Scanning"];
        }
        if (A.load.Bool(ptr + 0 + 176 + 12)) {
          x["Cellular"]["ServingOperator"] = {};
          x["Cellular"]["ServingOperator"]["Name"] = A.load.Ref(ptr + 0 + 176 + 0, undefined);
          x["Cellular"]["ServingOperator"]["Code"] = A.load.Ref(ptr + 0 + 176 + 4, undefined);
          x["Cellular"]["ServingOperator"]["Country"] = A.load.Ref(ptr + 0 + 176 + 8, undefined);
        } else {
          delete x["Cellular"]["ServingOperator"];
        }
        if (A.load.Bool(ptr + 0 + 192 + 14)) {
          x["Cellular"]["SIMLockStatus"] = {};
          x["Cellular"]["SIMLockStatus"]["LockType"] = A.load.Ref(ptr + 0 + 192 + 0, undefined);
          if (A.load.Bool(ptr + 0 + 192 + 12)) {
            x["Cellular"]["SIMLockStatus"]["LockEnabled"] = A.load.Bool(ptr + 0 + 192 + 4);
          } else {
            delete x["Cellular"]["SIMLockStatus"]["LockEnabled"];
          }
          if (A.load.Bool(ptr + 0 + 192 + 13)) {
            x["Cellular"]["SIMLockStatus"]["RetriesLeft"] = A.load.Int32(ptr + 0 + 192 + 8);
          } else {
            delete x["Cellular"]["SIMLockStatus"]["RetriesLeft"];
          }
        } else {
          delete x["Cellular"]["SIMLockStatus"];
        }
        if (A.load.Bool(ptr + 0 + 216)) {
          x["Cellular"]["SIMPresent"] = A.load.Bool(ptr + 0 + 207);
        } else {
          delete x["Cellular"]["SIMPresent"];
        }
        if (A.load.Bool(ptr + 0 + 217)) {
          x["Cellular"]["SignalStrength"] = A.load.Int32(ptr + 0 + 208);
        } else {
          delete x["Cellular"]["SignalStrength"];
        }
        if (A.load.Bool(ptr + 0 + 218)) {
          x["Cellular"]["SupportNetworkScan"] = A.load.Bool(ptr + 0 + 212);
        } else {
          delete x["Cellular"]["SupportNetworkScan"];
        }
      } else {
        delete x["Cellular"];
      }
      if (A.load.Bool(ptr + 1230)) {
        x["Connectable"] = A.load.Bool(ptr + 220);
      } else {
        delete x["Connectable"];
      }
      x["ConnectionState"] = A.load.Enum(ptr + 224, ["Connected", "Connecting", "NotConnected"]);
      x["ErrorState"] = A.load.Ref(ptr + 228, undefined);
      if (A.load.Bool(ptr + 232 + 123)) {
        x["Ethernet"] = {};
        if (A.load.Bool(ptr + 232 + 122)) {
          x["Ethernet"]["AutoConnect"] = A.load.Bool(ptr + 232 + 0);
        } else {
          delete x["Ethernet"]["AutoConnect"];
        }
        x["Ethernet"]["Authentication"] = A.load.Ref(ptr + 232 + 4, undefined);
        if (A.load.Bool(ptr + 232 + 8 + 113)) {
          x["Ethernet"]["EAP"] = {};
          x["Ethernet"]["EAP"]["AnonymousIdentity"] = A.load.Ref(ptr + 232 + 8 + 0, undefined);
          if (A.load.Bool(ptr + 232 + 8 + 4 + 49)) {
            x["Ethernet"]["EAP"]["ClientCertPattern"] = {};
            x["Ethernet"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(ptr + 232 + 8 + 4 + 0, undefined);
            if (A.load.Bool(ptr + 232 + 8 + 4 + 4 + 16)) {
              x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"] = {};
              x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(
                ptr + 232 + 8 + 4 + 4 + 0,
                undefined
              );
              x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(
                ptr + 232 + 8 + 4 + 4 + 4,
                undefined
              );
              x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(
                ptr + 232 + 8 + 4 + 4 + 8,
                undefined
              );
              x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(
                ptr + 232 + 8 + 4 + 4 + 12,
                undefined
              );
            } else {
              delete x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"];
            }
            x["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(ptr + 232 + 8 + 4 + 24, undefined);
            x["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(ptr + 232 + 8 + 4 + 28, undefined);
            if (A.load.Bool(ptr + 232 + 8 + 4 + 32 + 16)) {
              x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"] = {};
              x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(
                ptr + 232 + 8 + 4 + 32 + 0,
                undefined
              );
              x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(
                ptr + 232 + 8 + 4 + 32 + 4,
                undefined
              );
              x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(
                ptr + 232 + 8 + 4 + 32 + 8,
                undefined
              );
              x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(
                ptr + 232 + 8 + 4 + 32 + 12,
                undefined
              );
            } else {
              delete x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"];
            }
          } else {
            delete x["Ethernet"]["EAP"]["ClientCertPattern"];
          }
          x["Ethernet"]["EAP"]["ClientCertPKCS11Id"] = A.load.Ref(ptr + 232 + 8 + 56, undefined);
          x["Ethernet"]["EAP"]["ClientCertProvisioningProfileId"] = A.load.Ref(ptr + 232 + 8 + 60, undefined);
          x["Ethernet"]["EAP"]["ClientCertRef"] = A.load.Ref(ptr + 232 + 8 + 64, undefined);
          x["Ethernet"]["EAP"]["ClientCertType"] = A.load.Ref(ptr + 232 + 8 + 68, undefined);
          x["Ethernet"]["EAP"]["Identity"] = A.load.Ref(ptr + 232 + 8 + 72, undefined);
          x["Ethernet"]["EAP"]["Inner"] = A.load.Ref(ptr + 232 + 8 + 76, undefined);
          x["Ethernet"]["EAP"]["Outer"] = A.load.Ref(ptr + 232 + 8 + 80, undefined);
          x["Ethernet"]["EAP"]["Password"] = A.load.Ref(ptr + 232 + 8 + 84, undefined);
          if (A.load.Bool(ptr + 232 + 8 + 110)) {
            x["Ethernet"]["EAP"]["SaveCredentials"] = A.load.Bool(ptr + 232 + 8 + 88);
          } else {
            delete x["Ethernet"]["EAP"]["SaveCredentials"];
          }
          x["Ethernet"]["EAP"]["ServerCAPEMs"] = A.load.Ref(ptr + 232 + 8 + 92, undefined);
          x["Ethernet"]["EAP"]["ServerCARefs"] = A.load.Ref(ptr + 232 + 8 + 96, undefined);
          x["Ethernet"]["EAP"]["SubjectMatch"] = A.load.Ref(ptr + 232 + 8 + 100, undefined);
          x["Ethernet"]["EAP"]["TLSVersionMax"] = A.load.Ref(ptr + 232 + 8 + 104, undefined);
          if (A.load.Bool(ptr + 232 + 8 + 111)) {
            x["Ethernet"]["EAP"]["UseProactiveKeyCaching"] = A.load.Bool(ptr + 232 + 8 + 108);
          } else {
            delete x["Ethernet"]["EAP"]["UseProactiveKeyCaching"];
          }
          if (A.load.Bool(ptr + 232 + 8 + 112)) {
            x["Ethernet"]["EAP"]["UseSystemCAs"] = A.load.Bool(ptr + 232 + 8 + 109);
          } else {
            delete x["Ethernet"]["EAP"]["UseSystemCAs"];
          }
        } else {
          delete x["Ethernet"]["EAP"];
        }
      } else {
        delete x["Ethernet"];
      }
      x["GUID"] = A.load.Ref(ptr + 356, undefined);
      x["IPAddressConfigType"] = A.load.Enum(ptr + 360, ["DHCP", "Static"]);
      x["IPConfigs"] = A.load.Ref(ptr + 364, undefined);
      x["MacAddress"] = A.load.Ref(ptr + 368, undefined);
      if (A.load.Bool(ptr + 1231)) {
        x["Metered"] = A.load.Bool(ptr + 372);
      } else {
        delete x["Metered"];
      }
      x["Name"] = A.load.Ref(ptr + 376, undefined);
      x["NameServersConfigType"] = A.load.Enum(ptr + 380, ["DHCP", "Static"]);
      if (A.load.Bool(ptr + 1232)) {
        x["Priority"] = A.load.Int32(ptr + 384);
      } else {
        delete x["Priority"];
      }
      if (A.load.Bool(ptr + 388 + 60)) {
        x["ProxySettings"] = {};
        x["ProxySettings"]["Type"] = A.load.Enum(ptr + 388 + 0, ["Direct", "Manual", "PAC", "WPAD"]);
        if (A.load.Bool(ptr + 388 + 4 + 46)) {
          x["ProxySettings"]["Manual"] = {};
          if (A.load.Bool(ptr + 388 + 4 + 0 + 9)) {
            x["ProxySettings"]["Manual"]["HTTPProxy"] = {};
            x["ProxySettings"]["Manual"]["HTTPProxy"]["Host"] = A.load.Ref(ptr + 388 + 4 + 0 + 0, undefined);
            if (A.load.Bool(ptr + 388 + 4 + 0 + 8)) {
              x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"] = A.load.Int32(ptr + 388 + 4 + 0 + 4);
            } else {
              delete x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"];
            }
          } else {
            delete x["ProxySettings"]["Manual"]["HTTPProxy"];
          }
          if (A.load.Bool(ptr + 388 + 4 + 12 + 9)) {
            x["ProxySettings"]["Manual"]["SecureHTTPProxy"] = {};
            x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Host"] = A.load.Ref(ptr + 388 + 4 + 12 + 0, undefined);
            if (A.load.Bool(ptr + 388 + 4 + 12 + 8)) {
              x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"] = A.load.Int32(ptr + 388 + 4 + 12 + 4);
            } else {
              delete x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"];
            }
          } else {
            delete x["ProxySettings"]["Manual"]["SecureHTTPProxy"];
          }
          if (A.load.Bool(ptr + 388 + 4 + 24 + 9)) {
            x["ProxySettings"]["Manual"]["FTPProxy"] = {};
            x["ProxySettings"]["Manual"]["FTPProxy"]["Host"] = A.load.Ref(ptr + 388 + 4 + 24 + 0, undefined);
            if (A.load.Bool(ptr + 388 + 4 + 24 + 8)) {
              x["ProxySettings"]["Manual"]["FTPProxy"]["Port"] = A.load.Int32(ptr + 388 + 4 + 24 + 4);
            } else {
              delete x["ProxySettings"]["Manual"]["FTPProxy"]["Port"];
            }
          } else {
            delete x["ProxySettings"]["Manual"]["FTPProxy"];
          }
          if (A.load.Bool(ptr + 388 + 4 + 36 + 9)) {
            x["ProxySettings"]["Manual"]["SOCKS"] = {};
            x["ProxySettings"]["Manual"]["SOCKS"]["Host"] = A.load.Ref(ptr + 388 + 4 + 36 + 0, undefined);
            if (A.load.Bool(ptr + 388 + 4 + 36 + 8)) {
              x["ProxySettings"]["Manual"]["SOCKS"]["Port"] = A.load.Int32(ptr + 388 + 4 + 36 + 4);
            } else {
              delete x["ProxySettings"]["Manual"]["SOCKS"]["Port"];
            }
          } else {
            delete x["ProxySettings"]["Manual"]["SOCKS"];
          }
        } else {
          delete x["ProxySettings"]["Manual"];
        }
        x["ProxySettings"]["ExcludeDomains"] = A.load.Ref(ptr + 388 + 52, undefined);
        x["ProxySettings"]["PAC"] = A.load.Ref(ptr + 388 + 56, undefined);
      } else {
        delete x["ProxySettings"];
      }
      if (A.load.Bool(ptr + 1233)) {
        x["RestrictedConnectivity"] = A.load.Bool(ptr + 449);
      } else {
        delete x["RestrictedConnectivity"];
      }
      if (A.load.Bool(ptr + 452 + 37)) {
        x["StaticIPConfig"] = {};
        x["StaticIPConfig"]["Gateway"] = A.load.Ref(ptr + 452 + 0, undefined);
        x["StaticIPConfig"]["IPAddress"] = A.load.Ref(ptr + 452 + 4, undefined);
        x["StaticIPConfig"]["ExcludedRoutes"] = A.load.Ref(ptr + 452 + 8, undefined);
        x["StaticIPConfig"]["IncludedRoutes"] = A.load.Ref(ptr + 452 + 12, undefined);
        x["StaticIPConfig"]["NameServers"] = A.load.Ref(ptr + 452 + 16, undefined);
        x["StaticIPConfig"]["SearchDomains"] = A.load.Ref(ptr + 452 + 20, undefined);
        if (A.load.Bool(ptr + 452 + 36)) {
          x["StaticIPConfig"]["RoutingPrefix"] = A.load.Int32(ptr + 452 + 24);
        } else {
          delete x["StaticIPConfig"]["RoutingPrefix"];
        }
        x["StaticIPConfig"]["Type"] = A.load.Ref(ptr + 452 + 28, undefined);
        x["StaticIPConfig"]["WebProxyAutoDiscoveryUrl"] = A.load.Ref(ptr + 452 + 32, undefined);
      } else {
        delete x["StaticIPConfig"];
      }
      if (A.load.Bool(ptr + 492 + 37)) {
        x["SavedIPConfig"] = {};
        x["SavedIPConfig"]["Gateway"] = A.load.Ref(ptr + 492 + 0, undefined);
        x["SavedIPConfig"]["IPAddress"] = A.load.Ref(ptr + 492 + 4, undefined);
        x["SavedIPConfig"]["ExcludedRoutes"] = A.load.Ref(ptr + 492 + 8, undefined);
        x["SavedIPConfig"]["IncludedRoutes"] = A.load.Ref(ptr + 492 + 12, undefined);
        x["SavedIPConfig"]["NameServers"] = A.load.Ref(ptr + 492 + 16, undefined);
        x["SavedIPConfig"]["SearchDomains"] = A.load.Ref(ptr + 492 + 20, undefined);
        if (A.load.Bool(ptr + 492 + 36)) {
          x["SavedIPConfig"]["RoutingPrefix"] = A.load.Int32(ptr + 492 + 24);
        } else {
          delete x["SavedIPConfig"]["RoutingPrefix"];
        }
        x["SavedIPConfig"]["Type"] = A.load.Ref(ptr + 492 + 28, undefined);
        x["SavedIPConfig"]["WebProxyAutoDiscoveryUrl"] = A.load.Ref(ptr + 492 + 32, undefined);
      } else {
        delete x["SavedIPConfig"];
      }
      x["Source"] = A.load.Ref(ptr + 532, undefined);
      if (A.load.Bool(ptr + 536 + 19)) {
        x["Tether"] = {};
        if (A.load.Bool(ptr + 536 + 16)) {
          x["Tether"]["BatteryPercentage"] = A.load.Int32(ptr + 536 + 0);
        } else {
          delete x["Tether"]["BatteryPercentage"];
        }
        x["Tether"]["Carrier"] = A.load.Ref(ptr + 536 + 4, undefined);
        if (A.load.Bool(ptr + 536 + 17)) {
          x["Tether"]["HasConnectedToHost"] = A.load.Bool(ptr + 536 + 8);
        } else {
          delete x["Tether"]["HasConnectedToHost"];
        }
        if (A.load.Bool(ptr + 536 + 18)) {
          x["Tether"]["SignalStrength"] = A.load.Int32(ptr + 536 + 12);
        } else {
          delete x["Tether"]["SignalStrength"];
        }
      } else {
        delete x["Tether"];
      }
      x["Type"] = A.load.Enum(ptr + 556, ["All", "Cellular", "Ethernet", "Tether", "VPN", "Wireless", "WiFi"]);
      if (A.load.Bool(ptr + 560 + 505)) {
        x["VPN"] = {};
        if (A.load.Bool(ptr + 560 + 504)) {
          x["VPN"]["AutoConnect"] = A.load.Bool(ptr + 560 + 0);
        } else {
          delete x["VPN"]["AutoConnect"];
        }
        x["VPN"]["Host"] = A.load.Ref(ptr + 560 + 4, undefined);
        if (A.load.Bool(ptr + 560 + 8 + 236)) {
          x["VPN"]["IPsec"] = {};
          x["VPN"]["IPsec"]["AuthenticationType"] = A.load.Ref(ptr + 560 + 8 + 0, undefined);
          if (A.load.Bool(ptr + 560 + 8 + 4 + 49)) {
            x["VPN"]["IPsec"]["ClientCertPattern"] = {};
            x["VPN"]["IPsec"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(ptr + 560 + 8 + 4 + 0, undefined);
            if (A.load.Bool(ptr + 560 + 8 + 4 + 4 + 16)) {
              x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"] = {};
              x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(
                ptr + 560 + 8 + 4 + 4 + 0,
                undefined
              );
              x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(
                ptr + 560 + 8 + 4 + 4 + 4,
                undefined
              );
              x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(
                ptr + 560 + 8 + 4 + 4 + 8,
                undefined
              );
              x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(
                ptr + 560 + 8 + 4 + 4 + 12,
                undefined
              );
            } else {
              delete x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"];
            }
            x["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(ptr + 560 + 8 + 4 + 24, undefined);
            x["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(ptr + 560 + 8 + 4 + 28, undefined);
            if (A.load.Bool(ptr + 560 + 8 + 4 + 32 + 16)) {
              x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"] = {};
              x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(
                ptr + 560 + 8 + 4 + 32 + 0,
                undefined
              );
              x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(
                ptr + 560 + 8 + 4 + 32 + 4,
                undefined
              );
              x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(
                ptr + 560 + 8 + 4 + 32 + 8,
                undefined
              );
              x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(
                ptr + 560 + 8 + 4 + 32 + 12,
                undefined
              );
            } else {
              delete x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"];
            }
          } else {
            delete x["VPN"]["IPsec"]["ClientCertPattern"];
          }
          x["VPN"]["IPsec"]["ClientCertPKCS11Id"] = A.load.Ref(ptr + 560 + 8 + 56, undefined);
          x["VPN"]["IPsec"]["ClientCertProvisioningProfileId"] = A.load.Ref(ptr + 560 + 8 + 60, undefined);
          x["VPN"]["IPsec"]["ClientCertRef"] = A.load.Ref(ptr + 560 + 8 + 64, undefined);
          x["VPN"]["IPsec"]["ClientCertType"] = A.load.Ref(ptr + 560 + 8 + 68, undefined);
          if (A.load.Bool(ptr + 560 + 8 + 72 + 113)) {
            x["VPN"]["IPsec"]["EAP"] = {};
            x["VPN"]["IPsec"]["EAP"]["AnonymousIdentity"] = A.load.Ref(ptr + 560 + 8 + 72 + 0, undefined);
            if (A.load.Bool(ptr + 560 + 8 + 72 + 4 + 49)) {
              x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"] = {};
              x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(
                ptr + 560 + 8 + 72 + 4 + 0,
                undefined
              );
              if (A.load.Bool(ptr + 560 + 8 + 72 + 4 + 4 + 16)) {
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"] = {};
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(
                  ptr + 560 + 8 + 72 + 4 + 4 + 0,
                  undefined
                );
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(
                  ptr + 560 + 8 + 72 + 4 + 4 + 4,
                  undefined
                );
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(
                  ptr + 560 + 8 + 72 + 4 + 4 + 8,
                  undefined
                );
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(
                  ptr + 560 + 8 + 72 + 4 + 4 + 12,
                  undefined
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"];
              }
              x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(
                ptr + 560 + 8 + 72 + 4 + 24,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(
                ptr + 560 + 8 + 72 + 4 + 28,
                undefined
              );
              if (A.load.Bool(ptr + 560 + 8 + 72 + 4 + 32 + 16)) {
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"] = {};
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(
                  ptr + 560 + 8 + 72 + 4 + 32 + 0,
                  undefined
                );
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(
                  ptr + 560 + 8 + 72 + 4 + 32 + 4,
                  undefined
                );
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(
                  ptr + 560 + 8 + 72 + 4 + 32 + 8,
                  undefined
                );
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(
                  ptr + 560 + 8 + 72 + 4 + 32 + 12,
                  undefined
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"];
              }
            } else {
              delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"];
            }
            x["VPN"]["IPsec"]["EAP"]["ClientCertPKCS11Id"] = A.load.Ref(ptr + 560 + 8 + 72 + 56, undefined);
            x["VPN"]["IPsec"]["EAP"]["ClientCertProvisioningProfileId"] = A.load.Ref(
              ptr + 560 + 8 + 72 + 60,
              undefined
            );
            x["VPN"]["IPsec"]["EAP"]["ClientCertRef"] = A.load.Ref(ptr + 560 + 8 + 72 + 64, undefined);
            x["VPN"]["IPsec"]["EAP"]["ClientCertType"] = A.load.Ref(ptr + 560 + 8 + 72 + 68, undefined);
            x["VPN"]["IPsec"]["EAP"]["Identity"] = A.load.Ref(ptr + 560 + 8 + 72 + 72, undefined);
            x["VPN"]["IPsec"]["EAP"]["Inner"] = A.load.Ref(ptr + 560 + 8 + 72 + 76, undefined);
            x["VPN"]["IPsec"]["EAP"]["Outer"] = A.load.Ref(ptr + 560 + 8 + 72 + 80, undefined);
            x["VPN"]["IPsec"]["EAP"]["Password"] = A.load.Ref(ptr + 560 + 8 + 72 + 84, undefined);
            if (A.load.Bool(ptr + 560 + 8 + 72 + 110)) {
              x["VPN"]["IPsec"]["EAP"]["SaveCredentials"] = A.load.Bool(ptr + 560 + 8 + 72 + 88);
            } else {
              delete x["VPN"]["IPsec"]["EAP"]["SaveCredentials"];
            }
            x["VPN"]["IPsec"]["EAP"]["ServerCAPEMs"] = A.load.Ref(ptr + 560 + 8 + 72 + 92, undefined);
            x["VPN"]["IPsec"]["EAP"]["ServerCARefs"] = A.load.Ref(ptr + 560 + 8 + 72 + 96, undefined);
            x["VPN"]["IPsec"]["EAP"]["SubjectMatch"] = A.load.Ref(ptr + 560 + 8 + 72 + 100, undefined);
            x["VPN"]["IPsec"]["EAP"]["TLSVersionMax"] = A.load.Ref(ptr + 560 + 8 + 72 + 104, undefined);
            if (A.load.Bool(ptr + 560 + 8 + 72 + 111)) {
              x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"] = A.load.Bool(ptr + 560 + 8 + 72 + 108);
            } else {
              delete x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"];
            }
            if (A.load.Bool(ptr + 560 + 8 + 72 + 112)) {
              x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"] = A.load.Bool(ptr + 560 + 8 + 72 + 109);
            } else {
              delete x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"];
            }
          } else {
            delete x["VPN"]["IPsec"]["EAP"];
          }
          x["VPN"]["IPsec"]["Group"] = A.load.Ref(ptr + 560 + 8 + 188, undefined);
          if (A.load.Bool(ptr + 560 + 8 + 234)) {
            x["VPN"]["IPsec"]["IKEVersion"] = A.load.Int32(ptr + 560 + 8 + 192);
          } else {
            delete x["VPN"]["IPsec"]["IKEVersion"];
          }
          x["VPN"]["IPsec"]["LocalIdentity"] = A.load.Ref(ptr + 560 + 8 + 196, undefined);
          x["VPN"]["IPsec"]["PSK"] = A.load.Ref(ptr + 560 + 8 + 200, undefined);
          x["VPN"]["IPsec"]["RemoteIdentity"] = A.load.Ref(ptr + 560 + 8 + 204, undefined);
          if (A.load.Bool(ptr + 560 + 8 + 235)) {
            x["VPN"]["IPsec"]["SaveCredentials"] = A.load.Bool(ptr + 560 + 8 + 208);
          } else {
            delete x["VPN"]["IPsec"]["SaveCredentials"];
          }
          x["VPN"]["IPsec"]["ServerCAPEMs"] = A.load.Ref(ptr + 560 + 8 + 212, undefined);
          x["VPN"]["IPsec"]["ServerCARefs"] = A.load.Ref(ptr + 560 + 8 + 216, undefined);
          if (A.load.Bool(ptr + 560 + 8 + 220 + 13)) {
            x["VPN"]["IPsec"]["XAUTH"] = {};
            x["VPN"]["IPsec"]["XAUTH"]["Password"] = A.load.Ref(ptr + 560 + 8 + 220 + 0, undefined);
            if (A.load.Bool(ptr + 560 + 8 + 220 + 12)) {
              x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"] = A.load.Bool(ptr + 560 + 8 + 220 + 4);
            } else {
              delete x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"];
            }
            x["VPN"]["IPsec"]["XAUTH"]["Username"] = A.load.Ref(ptr + 560 + 8 + 220 + 8, undefined);
          } else {
            delete x["VPN"]["IPsec"]["XAUTH"];
          }
        } else {
          delete x["VPN"]["IPsec"];
        }
        if (A.load.Bool(ptr + 560 + 248 + 18)) {
          x["VPN"]["L2TP"] = {};
          if (A.load.Bool(ptr + 560 + 248 + 16)) {
            x["VPN"]["L2TP"]["LcpEchoDisabled"] = A.load.Bool(ptr + 560 + 248 + 0);
          } else {
            delete x["VPN"]["L2TP"]["LcpEchoDisabled"];
          }
          x["VPN"]["L2TP"]["Password"] = A.load.Ref(ptr + 560 + 248 + 4, undefined);
          if (A.load.Bool(ptr + 560 + 248 + 17)) {
            x["VPN"]["L2TP"]["SaveCredentials"] = A.load.Bool(ptr + 560 + 248 + 8);
          } else {
            delete x["VPN"]["L2TP"]["SaveCredentials"];
          }
          x["VPN"]["L2TP"]["Username"] = A.load.Ref(ptr + 560 + 248 + 12, undefined);
        } else {
          delete x["VPN"]["L2TP"];
        }
        if (A.load.Bool(ptr + 560 + 268 + 218)) {
          x["VPN"]["OpenVPN"] = {};
          x["VPN"]["OpenVPN"]["Auth"] = A.load.Ref(ptr + 560 + 268 + 0, undefined);
          x["VPN"]["OpenVPN"]["AuthRetry"] = A.load.Ref(ptr + 560 + 268 + 4, undefined);
          if (A.load.Bool(ptr + 560 + 268 + 209)) {
            x["VPN"]["OpenVPN"]["AuthNoCache"] = A.load.Bool(ptr + 560 + 268 + 8);
          } else {
            delete x["VPN"]["OpenVPN"]["AuthNoCache"];
          }
          x["VPN"]["OpenVPN"]["Cipher"] = A.load.Ref(ptr + 560 + 268 + 12, undefined);
          x["VPN"]["OpenVPN"]["ClientCertPKCS11Id"] = A.load.Ref(ptr + 560 + 268 + 16, undefined);
          if (A.load.Bool(ptr + 560 + 268 + 20 + 49)) {
            x["VPN"]["OpenVPN"]["ClientCertPattern"] = {};
            x["VPN"]["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(ptr + 560 + 268 + 20 + 0, undefined);
            if (A.load.Bool(ptr + 560 + 268 + 20 + 4 + 16)) {
              x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"] = {};
              x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(
                ptr + 560 + 268 + 20 + 4 + 0,
                undefined
              );
              x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(
                ptr + 560 + 268 + 20 + 4 + 4,
                undefined
              );
              x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(
                ptr + 560 + 268 + 20 + 4 + 8,
                undefined
              );
              x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(
                ptr + 560 + 268 + 20 + 4 + 12,
                undefined
              );
            } else {
              delete x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"];
            }
            x["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(ptr + 560 + 268 + 20 + 24, undefined);
            x["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(ptr + 560 + 268 + 20 + 28, undefined);
            if (A.load.Bool(ptr + 560 + 268 + 20 + 32 + 16)) {
              x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"] = {};
              x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(
                ptr + 560 + 268 + 20 + 32 + 0,
                undefined
              );
              x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(
                ptr + 560 + 268 + 20 + 32 + 4,
                undefined
              );
              x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(
                ptr + 560 + 268 + 20 + 32 + 8,
                undefined
              );
              x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(
                ptr + 560 + 268 + 20 + 32 + 12,
                undefined
              );
            } else {
              delete x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["ClientCertPattern"];
          }
          x["VPN"]["OpenVPN"]["ClientCertProvisioningProfileId"] = A.load.Ref(ptr + 560 + 268 + 72, undefined);
          x["VPN"]["OpenVPN"]["ClientCertRef"] = A.load.Ref(ptr + 560 + 268 + 76, undefined);
          x["VPN"]["OpenVPN"]["ClientCertType"] = A.load.Ref(ptr + 560 + 268 + 80, undefined);
          x["VPN"]["OpenVPN"]["CompLZO"] = A.load.Ref(ptr + 560 + 268 + 84, undefined);
          if (A.load.Bool(ptr + 560 + 268 + 210)) {
            x["VPN"]["OpenVPN"]["CompNoAdapt"] = A.load.Bool(ptr + 560 + 268 + 88);
          } else {
            delete x["VPN"]["OpenVPN"]["CompNoAdapt"];
          }
          x["VPN"]["OpenVPN"]["ExtraHosts"] = A.load.Ref(ptr + 560 + 268 + 92, undefined);
          if (A.load.Bool(ptr + 560 + 268 + 211)) {
            x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"] = A.load.Bool(ptr + 560 + 268 + 96);
          } else {
            delete x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"];
          }
          x["VPN"]["OpenVPN"]["KeyDirection"] = A.load.Ref(ptr + 560 + 268 + 100, undefined);
          x["VPN"]["OpenVPN"]["NsCertType"] = A.load.Ref(ptr + 560 + 268 + 104, undefined);
          x["VPN"]["OpenVPN"]["OTP"] = A.load.Ref(ptr + 560 + 268 + 108, undefined);
          x["VPN"]["OpenVPN"]["Password"] = A.load.Ref(ptr + 560 + 268 + 112, undefined);
          if (A.load.Bool(ptr + 560 + 268 + 212)) {
            x["VPN"]["OpenVPN"]["Port"] = A.load.Int32(ptr + 560 + 268 + 116);
          } else {
            delete x["VPN"]["OpenVPN"]["Port"];
          }
          x["VPN"]["OpenVPN"]["Proto"] = A.load.Ref(ptr + 560 + 268 + 120, undefined);
          if (A.load.Bool(ptr + 560 + 268 + 213)) {
            x["VPN"]["OpenVPN"]["PushPeerInfo"] = A.load.Bool(ptr + 560 + 268 + 124);
          } else {
            delete x["VPN"]["OpenVPN"]["PushPeerInfo"];
          }
          x["VPN"]["OpenVPN"]["RemoteCertEKU"] = A.load.Ref(ptr + 560 + 268 + 128, undefined);
          x["VPN"]["OpenVPN"]["RemoteCertKU"] = A.load.Ref(ptr + 560 + 268 + 132, undefined);
          x["VPN"]["OpenVPN"]["RemoteCertTLS"] = A.load.Ref(ptr + 560 + 268 + 136, undefined);
          if (A.load.Bool(ptr + 560 + 268 + 214)) {
            x["VPN"]["OpenVPN"]["RenegSec"] = A.load.Int32(ptr + 560 + 268 + 140);
          } else {
            delete x["VPN"]["OpenVPN"]["RenegSec"];
          }
          if (A.load.Bool(ptr + 560 + 268 + 215)) {
            x["VPN"]["OpenVPN"]["SaveCredentials"] = A.load.Bool(ptr + 560 + 268 + 144);
          } else {
            delete x["VPN"]["OpenVPN"]["SaveCredentials"];
          }
          x["VPN"]["OpenVPN"]["ServerCAPEMs"] = A.load.Ref(ptr + 560 + 268 + 148, undefined);
          x["VPN"]["OpenVPN"]["ServerCARefs"] = A.load.Ref(ptr + 560 + 268 + 152, undefined);
          x["VPN"]["OpenVPN"]["ServerCertRef"] = A.load.Ref(ptr + 560 + 268 + 156, undefined);
          if (A.load.Bool(ptr + 560 + 268 + 216)) {
            x["VPN"]["OpenVPN"]["ServerPollTimeout"] = A.load.Int32(ptr + 560 + 268 + 160);
          } else {
            delete x["VPN"]["OpenVPN"]["ServerPollTimeout"];
          }
          if (A.load.Bool(ptr + 560 + 268 + 217)) {
            x["VPN"]["OpenVPN"]["Shaper"] = A.load.Int32(ptr + 560 + 268 + 164);
          } else {
            delete x["VPN"]["OpenVPN"]["Shaper"];
          }
          x["VPN"]["OpenVPN"]["StaticChallenge"] = A.load.Ref(ptr + 560 + 268 + 168, undefined);
          x["VPN"]["OpenVPN"]["TLSAuthContents"] = A.load.Ref(ptr + 560 + 268 + 172, undefined);
          x["VPN"]["OpenVPN"]["TLSRemote"] = A.load.Ref(ptr + 560 + 268 + 176, undefined);
          x["VPN"]["OpenVPN"]["TLSVersionMin"] = A.load.Ref(ptr + 560 + 268 + 180, undefined);
          x["VPN"]["OpenVPN"]["UserAuthenticationType"] = A.load.Ref(ptr + 560 + 268 + 184, undefined);
          x["VPN"]["OpenVPN"]["Username"] = A.load.Ref(ptr + 560 + 268 + 188, undefined);
          x["VPN"]["OpenVPN"]["Verb"] = A.load.Ref(ptr + 560 + 268 + 192, undefined);
          x["VPN"]["OpenVPN"]["VerifyHash"] = A.load.Ref(ptr + 560 + 268 + 196, undefined);
          if (A.load.Bool(ptr + 560 + 268 + 200 + 8)) {
            x["VPN"]["OpenVPN"]["VerifyX509"] = {};
            x["VPN"]["OpenVPN"]["VerifyX509"]["Name"] = A.load.Ref(ptr + 560 + 268 + 200 + 0, undefined);
            x["VPN"]["OpenVPN"]["VerifyX509"]["Type"] = A.load.Ref(ptr + 560 + 268 + 200 + 4, undefined);
          } else {
            delete x["VPN"]["OpenVPN"]["VerifyX509"];
          }
        } else {
          delete x["VPN"]["OpenVPN"];
        }
        if (A.load.Bool(ptr + 560 + 488 + 8)) {
          x["VPN"]["ThirdPartyVPN"] = {};
          x["VPN"]["ThirdPartyVPN"]["ExtensionID"] = A.load.Ref(ptr + 560 + 488 + 0, undefined);
          x["VPN"]["ThirdPartyVPN"]["ProviderName"] = A.load.Ref(ptr + 560 + 488 + 4, undefined);
        } else {
          delete x["VPN"]["ThirdPartyVPN"];
        }
        x["VPN"]["Type"] = A.load.Ref(ptr + 560 + 500, undefined);
      } else {
        delete x["VPN"];
      }
      if (A.load.Bool(ptr + 1068 + 161)) {
        x["WiFi"] = {};
        if (A.load.Bool(ptr + 1068 + 156)) {
          x["WiFi"]["AllowGatewayARPPolling"] = A.load.Bool(ptr + 1068 + 0);
        } else {
          delete x["WiFi"]["AllowGatewayARPPolling"];
        }
        if (A.load.Bool(ptr + 1068 + 157)) {
          x["WiFi"]["AutoConnect"] = A.load.Bool(ptr + 1068 + 1);
        } else {
          delete x["WiFi"]["AutoConnect"];
        }
        x["WiFi"]["BSSID"] = A.load.Ref(ptr + 1068 + 4, undefined);
        if (A.load.Bool(ptr + 1068 + 8 + 113)) {
          x["WiFi"]["EAP"] = {};
          x["WiFi"]["EAP"]["AnonymousIdentity"] = A.load.Ref(ptr + 1068 + 8 + 0, undefined);
          if (A.load.Bool(ptr + 1068 + 8 + 4 + 49)) {
            x["WiFi"]["EAP"]["ClientCertPattern"] = {};
            x["WiFi"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(ptr + 1068 + 8 + 4 + 0, undefined);
            if (A.load.Bool(ptr + 1068 + 8 + 4 + 4 + 16)) {
              x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"] = {};
              x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(
                ptr + 1068 + 8 + 4 + 4 + 0,
                undefined
              );
              x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(
                ptr + 1068 + 8 + 4 + 4 + 4,
                undefined
              );
              x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(
                ptr + 1068 + 8 + 4 + 4 + 8,
                undefined
              );
              x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(
                ptr + 1068 + 8 + 4 + 4 + 12,
                undefined
              );
            } else {
              delete x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"];
            }
            x["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(ptr + 1068 + 8 + 4 + 24, undefined);
            x["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(ptr + 1068 + 8 + 4 + 28, undefined);
            if (A.load.Bool(ptr + 1068 + 8 + 4 + 32 + 16)) {
              x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"] = {};
              x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(
                ptr + 1068 + 8 + 4 + 32 + 0,
                undefined
              );
              x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(
                ptr + 1068 + 8 + 4 + 32 + 4,
                undefined
              );
              x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(
                ptr + 1068 + 8 + 4 + 32 + 8,
                undefined
              );
              x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(
                ptr + 1068 + 8 + 4 + 32 + 12,
                undefined
              );
            } else {
              delete x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"];
            }
          } else {
            delete x["WiFi"]["EAP"]["ClientCertPattern"];
          }
          x["WiFi"]["EAP"]["ClientCertPKCS11Id"] = A.load.Ref(ptr + 1068 + 8 + 56, undefined);
          x["WiFi"]["EAP"]["ClientCertProvisioningProfileId"] = A.load.Ref(ptr + 1068 + 8 + 60, undefined);
          x["WiFi"]["EAP"]["ClientCertRef"] = A.load.Ref(ptr + 1068 + 8 + 64, undefined);
          x["WiFi"]["EAP"]["ClientCertType"] = A.load.Ref(ptr + 1068 + 8 + 68, undefined);
          x["WiFi"]["EAP"]["Identity"] = A.load.Ref(ptr + 1068 + 8 + 72, undefined);
          x["WiFi"]["EAP"]["Inner"] = A.load.Ref(ptr + 1068 + 8 + 76, undefined);
          x["WiFi"]["EAP"]["Outer"] = A.load.Ref(ptr + 1068 + 8 + 80, undefined);
          x["WiFi"]["EAP"]["Password"] = A.load.Ref(ptr + 1068 + 8 + 84, undefined);
          if (A.load.Bool(ptr + 1068 + 8 + 110)) {
            x["WiFi"]["EAP"]["SaveCredentials"] = A.load.Bool(ptr + 1068 + 8 + 88);
          } else {
            delete x["WiFi"]["EAP"]["SaveCredentials"];
          }
          x["WiFi"]["EAP"]["ServerCAPEMs"] = A.load.Ref(ptr + 1068 + 8 + 92, undefined);
          x["WiFi"]["EAP"]["ServerCARefs"] = A.load.Ref(ptr + 1068 + 8 + 96, undefined);
          x["WiFi"]["EAP"]["SubjectMatch"] = A.load.Ref(ptr + 1068 + 8 + 100, undefined);
          x["WiFi"]["EAP"]["TLSVersionMax"] = A.load.Ref(ptr + 1068 + 8 + 104, undefined);
          if (A.load.Bool(ptr + 1068 + 8 + 111)) {
            x["WiFi"]["EAP"]["UseProactiveKeyCaching"] = A.load.Bool(ptr + 1068 + 8 + 108);
          } else {
            delete x["WiFi"]["EAP"]["UseProactiveKeyCaching"];
          }
          if (A.load.Bool(ptr + 1068 + 8 + 112)) {
            x["WiFi"]["EAP"]["UseSystemCAs"] = A.load.Bool(ptr + 1068 + 8 + 109);
          } else {
            delete x["WiFi"]["EAP"]["UseSystemCAs"];
          }
        } else {
          delete x["WiFi"]["EAP"];
        }
        if (A.load.Bool(ptr + 1068 + 158)) {
          x["WiFi"]["Frequency"] = A.load.Int32(ptr + 1068 + 124);
        } else {
          delete x["WiFi"]["Frequency"];
        }
        x["WiFi"]["FrequencyList"] = A.load.Ref(ptr + 1068 + 128, undefined);
        x["WiFi"]["HexSSID"] = A.load.Ref(ptr + 1068 + 132, undefined);
        if (A.load.Bool(ptr + 1068 + 159)) {
          x["WiFi"]["HiddenSSID"] = A.load.Bool(ptr + 1068 + 136);
        } else {
          delete x["WiFi"]["HiddenSSID"];
        }
        x["WiFi"]["Passphrase"] = A.load.Ref(ptr + 1068 + 140, undefined);
        x["WiFi"]["SSID"] = A.load.Ref(ptr + 1068 + 144, undefined);
        x["WiFi"]["Security"] = A.load.Ref(ptr + 1068 + 148, undefined);
        if (A.load.Bool(ptr + 1068 + 160)) {
          x["WiFi"]["SignalStrength"] = A.load.Int32(ptr + 1068 + 152);
        } else {
          delete x["WiFi"]["SignalStrength"];
        }
      } else {
        delete x["WiFi"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_NetworkConfigProperties": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 1143, false);

        A.store.Bool(ptr + 0 + 219, false);
        A.store.Bool(ptr + 0 + 213, false);
        A.store.Bool(ptr + 0 + 0, false);

        A.store.Bool(ptr + 0 + 4 + 28, false);
        A.store.Ref(ptr + 0 + 4 + 0, undefined);
        A.store.Ref(ptr + 0 + 4 + 4, undefined);
        A.store.Ref(ptr + 0 + 4 + 8, undefined);
        A.store.Ref(ptr + 0 + 4 + 12, undefined);
        A.store.Ref(ptr + 0 + 4 + 16, undefined);
        A.store.Ref(ptr + 0 + 4 + 20, undefined);
        A.store.Ref(ptr + 0 + 4 + 24, undefined);
        A.store.Ref(ptr + 0 + 36, undefined);
        A.store.Ref(ptr + 0 + 40, undefined);
        A.store.Enum(ptr + 0 + 44, -1);
        A.store.Bool(ptr + 0 + 214, false);
        A.store.Bool(ptr + 0 + 48, false);
        A.store.Ref(ptr + 0 + 52, undefined);
        A.store.Ref(ptr + 0 + 56, undefined);
        A.store.Ref(ptr + 0 + 60, undefined);
        A.store.Ref(ptr + 0 + 64, undefined);
        A.store.Ref(ptr + 0 + 68, undefined);

        A.store.Bool(ptr + 0 + 72 + 12, false);
        A.store.Ref(ptr + 0 + 72 + 0, undefined);
        A.store.Ref(ptr + 0 + 72 + 4, undefined);
        A.store.Ref(ptr + 0 + 72 + 8, undefined);
        A.store.Ref(ptr + 0 + 88, undefined);
        A.store.Ref(ptr + 0 + 92, undefined);

        A.store.Bool(ptr + 0 + 96 + 28, false);
        A.store.Ref(ptr + 0 + 96 + 0, undefined);
        A.store.Ref(ptr + 0 + 96 + 4, undefined);
        A.store.Ref(ptr + 0 + 96 + 8, undefined);
        A.store.Ref(ptr + 0 + 96 + 12, undefined);
        A.store.Ref(ptr + 0 + 96 + 16, undefined);
        A.store.Ref(ptr + 0 + 96 + 20, undefined);
        A.store.Ref(ptr + 0 + 96 + 24, undefined);
        A.store.Ref(ptr + 0 + 128, undefined);
        A.store.Ref(ptr + 0 + 132, undefined);
        A.store.Ref(ptr + 0 + 136, undefined);
        A.store.Ref(ptr + 0 + 140, undefined);
        A.store.Ref(ptr + 0 + 144, undefined);
        A.store.Ref(ptr + 0 + 148, undefined);

        A.store.Bool(ptr + 0 + 152 + 12, false);
        A.store.Ref(ptr + 0 + 152 + 0, undefined);
        A.store.Ref(ptr + 0 + 152 + 4, undefined);
        A.store.Ref(ptr + 0 + 152 + 8, undefined);
        A.store.Ref(ptr + 0 + 168, undefined);
        A.store.Bool(ptr + 0 + 215, false);
        A.store.Bool(ptr + 0 + 172, false);

        A.store.Bool(ptr + 0 + 176 + 12, false);
        A.store.Ref(ptr + 0 + 176 + 0, undefined);
        A.store.Ref(ptr + 0 + 176 + 4, undefined);
        A.store.Ref(ptr + 0 + 176 + 8, undefined);

        A.store.Bool(ptr + 0 + 192 + 14, false);
        A.store.Ref(ptr + 0 + 192 + 0, undefined);
        A.store.Bool(ptr + 0 + 192 + 12, false);
        A.store.Bool(ptr + 0 + 192 + 4, false);
        A.store.Bool(ptr + 0 + 192 + 13, false);
        A.store.Int32(ptr + 0 + 192 + 8, 0);
        A.store.Bool(ptr + 0 + 216, false);
        A.store.Bool(ptr + 0 + 207, false);
        A.store.Bool(ptr + 0 + 217, false);
        A.store.Int32(ptr + 0 + 208, 0);
        A.store.Bool(ptr + 0 + 218, false);
        A.store.Bool(ptr + 0 + 212, false);

        A.store.Bool(ptr + 220 + 123, false);
        A.store.Bool(ptr + 220 + 122, false);
        A.store.Bool(ptr + 220 + 0, false);
        A.store.Ref(ptr + 220 + 4, undefined);

        A.store.Bool(ptr + 220 + 8 + 113, false);
        A.store.Ref(ptr + 220 + 8 + 0, undefined);

        A.store.Bool(ptr + 220 + 8 + 4 + 49, false);
        A.store.Ref(ptr + 220 + 8 + 4 + 0, undefined);

        A.store.Bool(ptr + 220 + 8 + 4 + 4 + 16, false);
        A.store.Ref(ptr + 220 + 8 + 4 + 4 + 0, undefined);
        A.store.Ref(ptr + 220 + 8 + 4 + 4 + 4, undefined);
        A.store.Ref(ptr + 220 + 8 + 4 + 4 + 8, undefined);
        A.store.Ref(ptr + 220 + 8 + 4 + 4 + 12, undefined);
        A.store.Ref(ptr + 220 + 8 + 4 + 24, undefined);
        A.store.Ref(ptr + 220 + 8 + 4 + 28, undefined);

        A.store.Bool(ptr + 220 + 8 + 4 + 32 + 16, false);
        A.store.Ref(ptr + 220 + 8 + 4 + 32 + 0, undefined);
        A.store.Ref(ptr + 220 + 8 + 4 + 32 + 4, undefined);
        A.store.Ref(ptr + 220 + 8 + 4 + 32 + 8, undefined);
        A.store.Ref(ptr + 220 + 8 + 4 + 32 + 12, undefined);
        A.store.Ref(ptr + 220 + 8 + 56, undefined);
        A.store.Ref(ptr + 220 + 8 + 60, undefined);
        A.store.Ref(ptr + 220 + 8 + 64, undefined);
        A.store.Ref(ptr + 220 + 8 + 68, undefined);
        A.store.Ref(ptr + 220 + 8 + 72, undefined);
        A.store.Ref(ptr + 220 + 8 + 76, undefined);
        A.store.Ref(ptr + 220 + 8 + 80, undefined);
        A.store.Ref(ptr + 220 + 8 + 84, undefined);
        A.store.Bool(ptr + 220 + 8 + 110, false);
        A.store.Bool(ptr + 220 + 8 + 88, false);
        A.store.Ref(ptr + 220 + 8 + 92, undefined);
        A.store.Ref(ptr + 220 + 8 + 96, undefined);
        A.store.Ref(ptr + 220 + 8 + 100, undefined);
        A.store.Ref(ptr + 220 + 8 + 104, undefined);
        A.store.Bool(ptr + 220 + 8 + 111, false);
        A.store.Bool(ptr + 220 + 8 + 108, false);
        A.store.Bool(ptr + 220 + 8 + 112, false);
        A.store.Bool(ptr + 220 + 8 + 109, false);
        A.store.Ref(ptr + 344, undefined);
        A.store.Enum(ptr + 348, -1);
        A.store.Ref(ptr + 352, undefined);
        A.store.Enum(ptr + 356, -1);
        A.store.Bool(ptr + 1142, false);
        A.store.Int32(ptr + 360, 0);

        A.store.Bool(ptr + 364 + 60, false);
        A.store.Enum(ptr + 364 + 0, -1);

        A.store.Bool(ptr + 364 + 4 + 46, false);

        A.store.Bool(ptr + 364 + 4 + 0 + 9, false);
        A.store.Ref(ptr + 364 + 4 + 0 + 0, undefined);
        A.store.Bool(ptr + 364 + 4 + 0 + 8, false);
        A.store.Int32(ptr + 364 + 4 + 0 + 4, 0);

        A.store.Bool(ptr + 364 + 4 + 12 + 9, false);
        A.store.Ref(ptr + 364 + 4 + 12 + 0, undefined);
        A.store.Bool(ptr + 364 + 4 + 12 + 8, false);
        A.store.Int32(ptr + 364 + 4 + 12 + 4, 0);

        A.store.Bool(ptr + 364 + 4 + 24 + 9, false);
        A.store.Ref(ptr + 364 + 4 + 24 + 0, undefined);
        A.store.Bool(ptr + 364 + 4 + 24 + 8, false);
        A.store.Int32(ptr + 364 + 4 + 24 + 4, 0);

        A.store.Bool(ptr + 364 + 4 + 36 + 9, false);
        A.store.Ref(ptr + 364 + 4 + 36 + 0, undefined);
        A.store.Bool(ptr + 364 + 4 + 36 + 8, false);
        A.store.Int32(ptr + 364 + 4 + 36 + 4, 0);
        A.store.Ref(ptr + 364 + 52, undefined);
        A.store.Ref(ptr + 364 + 56, undefined);

        A.store.Bool(ptr + 428 + 37, false);
        A.store.Ref(ptr + 428 + 0, undefined);
        A.store.Ref(ptr + 428 + 4, undefined);
        A.store.Ref(ptr + 428 + 8, undefined);
        A.store.Ref(ptr + 428 + 12, undefined);
        A.store.Ref(ptr + 428 + 16, undefined);
        A.store.Ref(ptr + 428 + 20, undefined);
        A.store.Bool(ptr + 428 + 36, false);
        A.store.Int32(ptr + 428 + 24, 0);
        A.store.Ref(ptr + 428 + 28, undefined);
        A.store.Ref(ptr + 428 + 32, undefined);
        A.store.Enum(ptr + 468, -1);

        A.store.Bool(ptr + 472 + 505, false);
        A.store.Bool(ptr + 472 + 504, false);
        A.store.Bool(ptr + 472 + 0, false);
        A.store.Ref(ptr + 472 + 4, undefined);

        A.store.Bool(ptr + 472 + 8 + 236, false);
        A.store.Ref(ptr + 472 + 8 + 0, undefined);

        A.store.Bool(ptr + 472 + 8 + 4 + 49, false);
        A.store.Ref(ptr + 472 + 8 + 4 + 0, undefined);

        A.store.Bool(ptr + 472 + 8 + 4 + 4 + 16, false);
        A.store.Ref(ptr + 472 + 8 + 4 + 4 + 0, undefined);
        A.store.Ref(ptr + 472 + 8 + 4 + 4 + 4, undefined);
        A.store.Ref(ptr + 472 + 8 + 4 + 4 + 8, undefined);
        A.store.Ref(ptr + 472 + 8 + 4 + 4 + 12, undefined);
        A.store.Ref(ptr + 472 + 8 + 4 + 24, undefined);
        A.store.Ref(ptr + 472 + 8 + 4 + 28, undefined);

        A.store.Bool(ptr + 472 + 8 + 4 + 32 + 16, false);
        A.store.Ref(ptr + 472 + 8 + 4 + 32 + 0, undefined);
        A.store.Ref(ptr + 472 + 8 + 4 + 32 + 4, undefined);
        A.store.Ref(ptr + 472 + 8 + 4 + 32 + 8, undefined);
        A.store.Ref(ptr + 472 + 8 + 4 + 32 + 12, undefined);
        A.store.Ref(ptr + 472 + 8 + 56, undefined);
        A.store.Ref(ptr + 472 + 8 + 60, undefined);
        A.store.Ref(ptr + 472 + 8 + 64, undefined);
        A.store.Ref(ptr + 472 + 8 + 68, undefined);

        A.store.Bool(ptr + 472 + 8 + 72 + 113, false);
        A.store.Ref(ptr + 472 + 8 + 72 + 0, undefined);

        A.store.Bool(ptr + 472 + 8 + 72 + 4 + 49, false);
        A.store.Ref(ptr + 472 + 8 + 72 + 4 + 0, undefined);

        A.store.Bool(ptr + 472 + 8 + 72 + 4 + 4 + 16, false);
        A.store.Ref(ptr + 472 + 8 + 72 + 4 + 4 + 0, undefined);
        A.store.Ref(ptr + 472 + 8 + 72 + 4 + 4 + 4, undefined);
        A.store.Ref(ptr + 472 + 8 + 72 + 4 + 4 + 8, undefined);
        A.store.Ref(ptr + 472 + 8 + 72 + 4 + 4 + 12, undefined);
        A.store.Ref(ptr + 472 + 8 + 72 + 4 + 24, undefined);
        A.store.Ref(ptr + 472 + 8 + 72 + 4 + 28, undefined);

        A.store.Bool(ptr + 472 + 8 + 72 + 4 + 32 + 16, false);
        A.store.Ref(ptr + 472 + 8 + 72 + 4 + 32 + 0, undefined);
        A.store.Ref(ptr + 472 + 8 + 72 + 4 + 32 + 4, undefined);
        A.store.Ref(ptr + 472 + 8 + 72 + 4 + 32 + 8, undefined);
        A.store.Ref(ptr + 472 + 8 + 72 + 4 + 32 + 12, undefined);
        A.store.Ref(ptr + 472 + 8 + 72 + 56, undefined);
        A.store.Ref(ptr + 472 + 8 + 72 + 60, undefined);
        A.store.Ref(ptr + 472 + 8 + 72 + 64, undefined);
        A.store.Ref(ptr + 472 + 8 + 72 + 68, undefined);
        A.store.Ref(ptr + 472 + 8 + 72 + 72, undefined);
        A.store.Ref(ptr + 472 + 8 + 72 + 76, undefined);
        A.store.Ref(ptr + 472 + 8 + 72 + 80, undefined);
        A.store.Ref(ptr + 472 + 8 + 72 + 84, undefined);
        A.store.Bool(ptr + 472 + 8 + 72 + 110, false);
        A.store.Bool(ptr + 472 + 8 + 72 + 88, false);
        A.store.Ref(ptr + 472 + 8 + 72 + 92, undefined);
        A.store.Ref(ptr + 472 + 8 + 72 + 96, undefined);
        A.store.Ref(ptr + 472 + 8 + 72 + 100, undefined);
        A.store.Ref(ptr + 472 + 8 + 72 + 104, undefined);
        A.store.Bool(ptr + 472 + 8 + 72 + 111, false);
        A.store.Bool(ptr + 472 + 8 + 72 + 108, false);
        A.store.Bool(ptr + 472 + 8 + 72 + 112, false);
        A.store.Bool(ptr + 472 + 8 + 72 + 109, false);
        A.store.Ref(ptr + 472 + 8 + 188, undefined);
        A.store.Bool(ptr + 472 + 8 + 234, false);
        A.store.Int32(ptr + 472 + 8 + 192, 0);
        A.store.Ref(ptr + 472 + 8 + 196, undefined);
        A.store.Ref(ptr + 472 + 8 + 200, undefined);
        A.store.Ref(ptr + 472 + 8 + 204, undefined);
        A.store.Bool(ptr + 472 + 8 + 235, false);
        A.store.Bool(ptr + 472 + 8 + 208, false);
        A.store.Ref(ptr + 472 + 8 + 212, undefined);
        A.store.Ref(ptr + 472 + 8 + 216, undefined);

        A.store.Bool(ptr + 472 + 8 + 220 + 13, false);
        A.store.Ref(ptr + 472 + 8 + 220 + 0, undefined);
        A.store.Bool(ptr + 472 + 8 + 220 + 12, false);
        A.store.Bool(ptr + 472 + 8 + 220 + 4, false);
        A.store.Ref(ptr + 472 + 8 + 220 + 8, undefined);

        A.store.Bool(ptr + 472 + 248 + 18, false);
        A.store.Bool(ptr + 472 + 248 + 16, false);
        A.store.Bool(ptr + 472 + 248 + 0, false);
        A.store.Ref(ptr + 472 + 248 + 4, undefined);
        A.store.Bool(ptr + 472 + 248 + 17, false);
        A.store.Bool(ptr + 472 + 248 + 8, false);
        A.store.Ref(ptr + 472 + 248 + 12, undefined);

        A.store.Bool(ptr + 472 + 268 + 218, false);
        A.store.Ref(ptr + 472 + 268 + 0, undefined);
        A.store.Ref(ptr + 472 + 268 + 4, undefined);
        A.store.Bool(ptr + 472 + 268 + 209, false);
        A.store.Bool(ptr + 472 + 268 + 8, false);
        A.store.Ref(ptr + 472 + 268 + 12, undefined);
        A.store.Ref(ptr + 472 + 268 + 16, undefined);

        A.store.Bool(ptr + 472 + 268 + 20 + 49, false);
        A.store.Ref(ptr + 472 + 268 + 20 + 0, undefined);

        A.store.Bool(ptr + 472 + 268 + 20 + 4 + 16, false);
        A.store.Ref(ptr + 472 + 268 + 20 + 4 + 0, undefined);
        A.store.Ref(ptr + 472 + 268 + 20 + 4 + 4, undefined);
        A.store.Ref(ptr + 472 + 268 + 20 + 4 + 8, undefined);
        A.store.Ref(ptr + 472 + 268 + 20 + 4 + 12, undefined);
        A.store.Ref(ptr + 472 + 268 + 20 + 24, undefined);
        A.store.Ref(ptr + 472 + 268 + 20 + 28, undefined);

        A.store.Bool(ptr + 472 + 268 + 20 + 32 + 16, false);
        A.store.Ref(ptr + 472 + 268 + 20 + 32 + 0, undefined);
        A.store.Ref(ptr + 472 + 268 + 20 + 32 + 4, undefined);
        A.store.Ref(ptr + 472 + 268 + 20 + 32 + 8, undefined);
        A.store.Ref(ptr + 472 + 268 + 20 + 32 + 12, undefined);
        A.store.Ref(ptr + 472 + 268 + 72, undefined);
        A.store.Ref(ptr + 472 + 268 + 76, undefined);
        A.store.Ref(ptr + 472 + 268 + 80, undefined);
        A.store.Ref(ptr + 472 + 268 + 84, undefined);
        A.store.Bool(ptr + 472 + 268 + 210, false);
        A.store.Bool(ptr + 472 + 268 + 88, false);
        A.store.Ref(ptr + 472 + 268 + 92, undefined);
        A.store.Bool(ptr + 472 + 268 + 211, false);
        A.store.Bool(ptr + 472 + 268 + 96, false);
        A.store.Ref(ptr + 472 + 268 + 100, undefined);
        A.store.Ref(ptr + 472 + 268 + 104, undefined);
        A.store.Ref(ptr + 472 + 268 + 108, undefined);
        A.store.Ref(ptr + 472 + 268 + 112, undefined);
        A.store.Bool(ptr + 472 + 268 + 212, false);
        A.store.Int32(ptr + 472 + 268 + 116, 0);
        A.store.Ref(ptr + 472 + 268 + 120, undefined);
        A.store.Bool(ptr + 472 + 268 + 213, false);
        A.store.Bool(ptr + 472 + 268 + 124, false);
        A.store.Ref(ptr + 472 + 268 + 128, undefined);
        A.store.Ref(ptr + 472 + 268 + 132, undefined);
        A.store.Ref(ptr + 472 + 268 + 136, undefined);
        A.store.Bool(ptr + 472 + 268 + 214, false);
        A.store.Int32(ptr + 472 + 268 + 140, 0);
        A.store.Bool(ptr + 472 + 268 + 215, false);
        A.store.Bool(ptr + 472 + 268 + 144, false);
        A.store.Ref(ptr + 472 + 268 + 148, undefined);
        A.store.Ref(ptr + 472 + 268 + 152, undefined);
        A.store.Ref(ptr + 472 + 268 + 156, undefined);
        A.store.Bool(ptr + 472 + 268 + 216, false);
        A.store.Int32(ptr + 472 + 268 + 160, 0);
        A.store.Bool(ptr + 472 + 268 + 217, false);
        A.store.Int32(ptr + 472 + 268 + 164, 0);
        A.store.Ref(ptr + 472 + 268 + 168, undefined);
        A.store.Ref(ptr + 472 + 268 + 172, undefined);
        A.store.Ref(ptr + 472 + 268 + 176, undefined);
        A.store.Ref(ptr + 472 + 268 + 180, undefined);
        A.store.Ref(ptr + 472 + 268 + 184, undefined);
        A.store.Ref(ptr + 472 + 268 + 188, undefined);
        A.store.Ref(ptr + 472 + 268 + 192, undefined);
        A.store.Ref(ptr + 472 + 268 + 196, undefined);

        A.store.Bool(ptr + 472 + 268 + 200 + 8, false);
        A.store.Ref(ptr + 472 + 268 + 200 + 0, undefined);
        A.store.Ref(ptr + 472 + 268 + 200 + 4, undefined);

        A.store.Bool(ptr + 472 + 488 + 8, false);
        A.store.Ref(ptr + 472 + 488 + 0, undefined);
        A.store.Ref(ptr + 472 + 488 + 4, undefined);
        A.store.Ref(ptr + 472 + 500, undefined);

        A.store.Bool(ptr + 980 + 161, false);
        A.store.Bool(ptr + 980 + 156, false);
        A.store.Bool(ptr + 980 + 0, false);
        A.store.Bool(ptr + 980 + 157, false);
        A.store.Bool(ptr + 980 + 1, false);
        A.store.Ref(ptr + 980 + 4, undefined);

        A.store.Bool(ptr + 980 + 8 + 113, false);
        A.store.Ref(ptr + 980 + 8 + 0, undefined);

        A.store.Bool(ptr + 980 + 8 + 4 + 49, false);
        A.store.Ref(ptr + 980 + 8 + 4 + 0, undefined);

        A.store.Bool(ptr + 980 + 8 + 4 + 4 + 16, false);
        A.store.Ref(ptr + 980 + 8 + 4 + 4 + 0, undefined);
        A.store.Ref(ptr + 980 + 8 + 4 + 4 + 4, undefined);
        A.store.Ref(ptr + 980 + 8 + 4 + 4 + 8, undefined);
        A.store.Ref(ptr + 980 + 8 + 4 + 4 + 12, undefined);
        A.store.Ref(ptr + 980 + 8 + 4 + 24, undefined);
        A.store.Ref(ptr + 980 + 8 + 4 + 28, undefined);

        A.store.Bool(ptr + 980 + 8 + 4 + 32 + 16, false);
        A.store.Ref(ptr + 980 + 8 + 4 + 32 + 0, undefined);
        A.store.Ref(ptr + 980 + 8 + 4 + 32 + 4, undefined);
        A.store.Ref(ptr + 980 + 8 + 4 + 32 + 8, undefined);
        A.store.Ref(ptr + 980 + 8 + 4 + 32 + 12, undefined);
        A.store.Ref(ptr + 980 + 8 + 56, undefined);
        A.store.Ref(ptr + 980 + 8 + 60, undefined);
        A.store.Ref(ptr + 980 + 8 + 64, undefined);
        A.store.Ref(ptr + 980 + 8 + 68, undefined);
        A.store.Ref(ptr + 980 + 8 + 72, undefined);
        A.store.Ref(ptr + 980 + 8 + 76, undefined);
        A.store.Ref(ptr + 980 + 8 + 80, undefined);
        A.store.Ref(ptr + 980 + 8 + 84, undefined);
        A.store.Bool(ptr + 980 + 8 + 110, false);
        A.store.Bool(ptr + 980 + 8 + 88, false);
        A.store.Ref(ptr + 980 + 8 + 92, undefined);
        A.store.Ref(ptr + 980 + 8 + 96, undefined);
        A.store.Ref(ptr + 980 + 8 + 100, undefined);
        A.store.Ref(ptr + 980 + 8 + 104, undefined);
        A.store.Bool(ptr + 980 + 8 + 111, false);
        A.store.Bool(ptr + 980 + 8 + 108, false);
        A.store.Bool(ptr + 980 + 8 + 112, false);
        A.store.Bool(ptr + 980 + 8 + 109, false);
        A.store.Bool(ptr + 980 + 158, false);
        A.store.Int32(ptr + 980 + 124, 0);
        A.store.Ref(ptr + 980 + 128, undefined);
        A.store.Ref(ptr + 980 + 132, undefined);
        A.store.Bool(ptr + 980 + 159, false);
        A.store.Bool(ptr + 980 + 136, false);
        A.store.Ref(ptr + 980 + 140, undefined);
        A.store.Ref(ptr + 980 + 144, undefined);
        A.store.Ref(ptr + 980 + 148, undefined);
        A.store.Bool(ptr + 980 + 160, false);
        A.store.Int32(ptr + 980 + 152, 0);
      } else {
        A.store.Bool(ptr + 1143, true);

        if (typeof x["Cellular"] === "undefined") {
          A.store.Bool(ptr + 0 + 219, false);
          A.store.Bool(ptr + 0 + 213, false);
          A.store.Bool(ptr + 0 + 0, false);

          A.store.Bool(ptr + 0 + 4 + 28, false);
          A.store.Ref(ptr + 0 + 4 + 0, undefined);
          A.store.Ref(ptr + 0 + 4 + 4, undefined);
          A.store.Ref(ptr + 0 + 4 + 8, undefined);
          A.store.Ref(ptr + 0 + 4 + 12, undefined);
          A.store.Ref(ptr + 0 + 4 + 16, undefined);
          A.store.Ref(ptr + 0 + 4 + 20, undefined);
          A.store.Ref(ptr + 0 + 4 + 24, undefined);
          A.store.Ref(ptr + 0 + 36, undefined);
          A.store.Ref(ptr + 0 + 40, undefined);
          A.store.Enum(ptr + 0 + 44, -1);
          A.store.Bool(ptr + 0 + 214, false);
          A.store.Bool(ptr + 0 + 48, false);
          A.store.Ref(ptr + 0 + 52, undefined);
          A.store.Ref(ptr + 0 + 56, undefined);
          A.store.Ref(ptr + 0 + 60, undefined);
          A.store.Ref(ptr + 0 + 64, undefined);
          A.store.Ref(ptr + 0 + 68, undefined);

          A.store.Bool(ptr + 0 + 72 + 12, false);
          A.store.Ref(ptr + 0 + 72 + 0, undefined);
          A.store.Ref(ptr + 0 + 72 + 4, undefined);
          A.store.Ref(ptr + 0 + 72 + 8, undefined);
          A.store.Ref(ptr + 0 + 88, undefined);
          A.store.Ref(ptr + 0 + 92, undefined);

          A.store.Bool(ptr + 0 + 96 + 28, false);
          A.store.Ref(ptr + 0 + 96 + 0, undefined);
          A.store.Ref(ptr + 0 + 96 + 4, undefined);
          A.store.Ref(ptr + 0 + 96 + 8, undefined);
          A.store.Ref(ptr + 0 + 96 + 12, undefined);
          A.store.Ref(ptr + 0 + 96 + 16, undefined);
          A.store.Ref(ptr + 0 + 96 + 20, undefined);
          A.store.Ref(ptr + 0 + 96 + 24, undefined);
          A.store.Ref(ptr + 0 + 128, undefined);
          A.store.Ref(ptr + 0 + 132, undefined);
          A.store.Ref(ptr + 0 + 136, undefined);
          A.store.Ref(ptr + 0 + 140, undefined);
          A.store.Ref(ptr + 0 + 144, undefined);
          A.store.Ref(ptr + 0 + 148, undefined);

          A.store.Bool(ptr + 0 + 152 + 12, false);
          A.store.Ref(ptr + 0 + 152 + 0, undefined);
          A.store.Ref(ptr + 0 + 152 + 4, undefined);
          A.store.Ref(ptr + 0 + 152 + 8, undefined);
          A.store.Ref(ptr + 0 + 168, undefined);
          A.store.Bool(ptr + 0 + 215, false);
          A.store.Bool(ptr + 0 + 172, false);

          A.store.Bool(ptr + 0 + 176 + 12, false);
          A.store.Ref(ptr + 0 + 176 + 0, undefined);
          A.store.Ref(ptr + 0 + 176 + 4, undefined);
          A.store.Ref(ptr + 0 + 176 + 8, undefined);

          A.store.Bool(ptr + 0 + 192 + 14, false);
          A.store.Ref(ptr + 0 + 192 + 0, undefined);
          A.store.Bool(ptr + 0 + 192 + 12, false);
          A.store.Bool(ptr + 0 + 192 + 4, false);
          A.store.Bool(ptr + 0 + 192 + 13, false);
          A.store.Int32(ptr + 0 + 192 + 8, 0);
          A.store.Bool(ptr + 0 + 216, false);
          A.store.Bool(ptr + 0 + 207, false);
          A.store.Bool(ptr + 0 + 217, false);
          A.store.Int32(ptr + 0 + 208, 0);
          A.store.Bool(ptr + 0 + 218, false);
          A.store.Bool(ptr + 0 + 212, false);
        } else {
          A.store.Bool(ptr + 0 + 219, true);
          A.store.Bool(ptr + 0 + 213, "AutoConnect" in x["Cellular"] ? true : false);
          A.store.Bool(ptr + 0 + 0, x["Cellular"]["AutoConnect"] ? true : false);

          if (typeof x["Cellular"]["APN"] === "undefined") {
            A.store.Bool(ptr + 0 + 4 + 28, false);
            A.store.Ref(ptr + 0 + 4 + 0, undefined);
            A.store.Ref(ptr + 0 + 4 + 4, undefined);
            A.store.Ref(ptr + 0 + 4 + 8, undefined);
            A.store.Ref(ptr + 0 + 4 + 12, undefined);
            A.store.Ref(ptr + 0 + 4 + 16, undefined);
            A.store.Ref(ptr + 0 + 4 + 20, undefined);
            A.store.Ref(ptr + 0 + 4 + 24, undefined);
          } else {
            A.store.Bool(ptr + 0 + 4 + 28, true);
            A.store.Ref(ptr + 0 + 4 + 0, x["Cellular"]["APN"]["AccessPointName"]);
            A.store.Ref(ptr + 0 + 4 + 4, x["Cellular"]["APN"]["Authentication"]);
            A.store.Ref(ptr + 0 + 4 + 8, x["Cellular"]["APN"]["Language"]);
            A.store.Ref(ptr + 0 + 4 + 12, x["Cellular"]["APN"]["LocalizedName"]);
            A.store.Ref(ptr + 0 + 4 + 16, x["Cellular"]["APN"]["Name"]);
            A.store.Ref(ptr + 0 + 4 + 20, x["Cellular"]["APN"]["Password"]);
            A.store.Ref(ptr + 0 + 4 + 24, x["Cellular"]["APN"]["Username"]);
          }
          A.store.Ref(ptr + 0 + 36, x["Cellular"]["APNList"]);
          A.store.Ref(ptr + 0 + 40, x["Cellular"]["ActivationType"]);
          A.store.Enum(
            ptr + 0 + 44,
            ["Activated", "Activating", "NotActivated", "PartiallyActivated"].indexOf(
              x["Cellular"]["ActivationState"] as string
            )
          );
          A.store.Bool(ptr + 0 + 214, "AllowRoaming" in x["Cellular"] ? true : false);
          A.store.Bool(ptr + 0 + 48, x["Cellular"]["AllowRoaming"] ? true : false);
          A.store.Ref(ptr + 0 + 52, x["Cellular"]["ESN"]);
          A.store.Ref(ptr + 0 + 56, x["Cellular"]["Family"]);
          A.store.Ref(ptr + 0 + 60, x["Cellular"]["FirmwareRevision"]);
          A.store.Ref(ptr + 0 + 64, x["Cellular"]["FoundNetworks"]);
          A.store.Ref(ptr + 0 + 68, x["Cellular"]["HardwareRevision"]);

          if (typeof x["Cellular"]["HomeProvider"] === "undefined") {
            A.store.Bool(ptr + 0 + 72 + 12, false);
            A.store.Ref(ptr + 0 + 72 + 0, undefined);
            A.store.Ref(ptr + 0 + 72 + 4, undefined);
            A.store.Ref(ptr + 0 + 72 + 8, undefined);
          } else {
            A.store.Bool(ptr + 0 + 72 + 12, true);
            A.store.Ref(ptr + 0 + 72 + 0, x["Cellular"]["HomeProvider"]["Name"]);
            A.store.Ref(ptr + 0 + 72 + 4, x["Cellular"]["HomeProvider"]["Code"]);
            A.store.Ref(ptr + 0 + 72 + 8, x["Cellular"]["HomeProvider"]["Country"]);
          }
          A.store.Ref(ptr + 0 + 88, x["Cellular"]["ICCID"]);
          A.store.Ref(ptr + 0 + 92, x["Cellular"]["IMEI"]);

          if (typeof x["Cellular"]["LastGoodAPN"] === "undefined") {
            A.store.Bool(ptr + 0 + 96 + 28, false);
            A.store.Ref(ptr + 0 + 96 + 0, undefined);
            A.store.Ref(ptr + 0 + 96 + 4, undefined);
            A.store.Ref(ptr + 0 + 96 + 8, undefined);
            A.store.Ref(ptr + 0 + 96 + 12, undefined);
            A.store.Ref(ptr + 0 + 96 + 16, undefined);
            A.store.Ref(ptr + 0 + 96 + 20, undefined);
            A.store.Ref(ptr + 0 + 96 + 24, undefined);
          } else {
            A.store.Bool(ptr + 0 + 96 + 28, true);
            A.store.Ref(ptr + 0 + 96 + 0, x["Cellular"]["LastGoodAPN"]["AccessPointName"]);
            A.store.Ref(ptr + 0 + 96 + 4, x["Cellular"]["LastGoodAPN"]["Authentication"]);
            A.store.Ref(ptr + 0 + 96 + 8, x["Cellular"]["LastGoodAPN"]["Language"]);
            A.store.Ref(ptr + 0 + 96 + 12, x["Cellular"]["LastGoodAPN"]["LocalizedName"]);
            A.store.Ref(ptr + 0 + 96 + 16, x["Cellular"]["LastGoodAPN"]["Name"]);
            A.store.Ref(ptr + 0 + 96 + 20, x["Cellular"]["LastGoodAPN"]["Password"]);
            A.store.Ref(ptr + 0 + 96 + 24, x["Cellular"]["LastGoodAPN"]["Username"]);
          }
          A.store.Ref(ptr + 0 + 128, x["Cellular"]["Manufacturer"]);
          A.store.Ref(ptr + 0 + 132, x["Cellular"]["MDN"]);
          A.store.Ref(ptr + 0 + 136, x["Cellular"]["MEID"]);
          A.store.Ref(ptr + 0 + 140, x["Cellular"]["MIN"]);
          A.store.Ref(ptr + 0 + 144, x["Cellular"]["ModelID"]);
          A.store.Ref(ptr + 0 + 148, x["Cellular"]["NetworkTechnology"]);

          if (typeof x["Cellular"]["PaymentPortal"] === "undefined") {
            A.store.Bool(ptr + 0 + 152 + 12, false);
            A.store.Ref(ptr + 0 + 152 + 0, undefined);
            A.store.Ref(ptr + 0 + 152 + 4, undefined);
            A.store.Ref(ptr + 0 + 152 + 8, undefined);
          } else {
            A.store.Bool(ptr + 0 + 152 + 12, true);
            A.store.Ref(ptr + 0 + 152 + 0, x["Cellular"]["PaymentPortal"]["Method"]);
            A.store.Ref(ptr + 0 + 152 + 4, x["Cellular"]["PaymentPortal"]["PostData"]);
            A.store.Ref(ptr + 0 + 152 + 8, x["Cellular"]["PaymentPortal"]["Url"]);
          }
          A.store.Ref(ptr + 0 + 168, x["Cellular"]["RoamingState"]);
          A.store.Bool(ptr + 0 + 215, "Scanning" in x["Cellular"] ? true : false);
          A.store.Bool(ptr + 0 + 172, x["Cellular"]["Scanning"] ? true : false);

          if (typeof x["Cellular"]["ServingOperator"] === "undefined") {
            A.store.Bool(ptr + 0 + 176 + 12, false);
            A.store.Ref(ptr + 0 + 176 + 0, undefined);
            A.store.Ref(ptr + 0 + 176 + 4, undefined);
            A.store.Ref(ptr + 0 + 176 + 8, undefined);
          } else {
            A.store.Bool(ptr + 0 + 176 + 12, true);
            A.store.Ref(ptr + 0 + 176 + 0, x["Cellular"]["ServingOperator"]["Name"]);
            A.store.Ref(ptr + 0 + 176 + 4, x["Cellular"]["ServingOperator"]["Code"]);
            A.store.Ref(ptr + 0 + 176 + 8, x["Cellular"]["ServingOperator"]["Country"]);
          }

          if (typeof x["Cellular"]["SIMLockStatus"] === "undefined") {
            A.store.Bool(ptr + 0 + 192 + 14, false);
            A.store.Ref(ptr + 0 + 192 + 0, undefined);
            A.store.Bool(ptr + 0 + 192 + 12, false);
            A.store.Bool(ptr + 0 + 192 + 4, false);
            A.store.Bool(ptr + 0 + 192 + 13, false);
            A.store.Int32(ptr + 0 + 192 + 8, 0);
          } else {
            A.store.Bool(ptr + 0 + 192 + 14, true);
            A.store.Ref(ptr + 0 + 192 + 0, x["Cellular"]["SIMLockStatus"]["LockType"]);
            A.store.Bool(ptr + 0 + 192 + 12, "LockEnabled" in x["Cellular"]["SIMLockStatus"] ? true : false);
            A.store.Bool(ptr + 0 + 192 + 4, x["Cellular"]["SIMLockStatus"]["LockEnabled"] ? true : false);
            A.store.Bool(ptr + 0 + 192 + 13, "RetriesLeft" in x["Cellular"]["SIMLockStatus"] ? true : false);
            A.store.Int32(
              ptr + 0 + 192 + 8,
              x["Cellular"]["SIMLockStatus"]["RetriesLeft"] === undefined
                ? 0
                : (x["Cellular"]["SIMLockStatus"]["RetriesLeft"] as number)
            );
          }
          A.store.Bool(ptr + 0 + 216, "SIMPresent" in x["Cellular"] ? true : false);
          A.store.Bool(ptr + 0 + 207, x["Cellular"]["SIMPresent"] ? true : false);
          A.store.Bool(ptr + 0 + 217, "SignalStrength" in x["Cellular"] ? true : false);
          A.store.Int32(
            ptr + 0 + 208,
            x["Cellular"]["SignalStrength"] === undefined ? 0 : (x["Cellular"]["SignalStrength"] as number)
          );
          A.store.Bool(ptr + 0 + 218, "SupportNetworkScan" in x["Cellular"] ? true : false);
          A.store.Bool(ptr + 0 + 212, x["Cellular"]["SupportNetworkScan"] ? true : false);
        }

        if (typeof x["Ethernet"] === "undefined") {
          A.store.Bool(ptr + 220 + 123, false);
          A.store.Bool(ptr + 220 + 122, false);
          A.store.Bool(ptr + 220 + 0, false);
          A.store.Ref(ptr + 220 + 4, undefined);

          A.store.Bool(ptr + 220 + 8 + 113, false);
          A.store.Ref(ptr + 220 + 8 + 0, undefined);

          A.store.Bool(ptr + 220 + 8 + 4 + 49, false);
          A.store.Ref(ptr + 220 + 8 + 4 + 0, undefined);

          A.store.Bool(ptr + 220 + 8 + 4 + 4 + 16, false);
          A.store.Ref(ptr + 220 + 8 + 4 + 4 + 0, undefined);
          A.store.Ref(ptr + 220 + 8 + 4 + 4 + 4, undefined);
          A.store.Ref(ptr + 220 + 8 + 4 + 4 + 8, undefined);
          A.store.Ref(ptr + 220 + 8 + 4 + 4 + 12, undefined);
          A.store.Ref(ptr + 220 + 8 + 4 + 24, undefined);
          A.store.Ref(ptr + 220 + 8 + 4 + 28, undefined);

          A.store.Bool(ptr + 220 + 8 + 4 + 32 + 16, false);
          A.store.Ref(ptr + 220 + 8 + 4 + 32 + 0, undefined);
          A.store.Ref(ptr + 220 + 8 + 4 + 32 + 4, undefined);
          A.store.Ref(ptr + 220 + 8 + 4 + 32 + 8, undefined);
          A.store.Ref(ptr + 220 + 8 + 4 + 32 + 12, undefined);
          A.store.Ref(ptr + 220 + 8 + 56, undefined);
          A.store.Ref(ptr + 220 + 8 + 60, undefined);
          A.store.Ref(ptr + 220 + 8 + 64, undefined);
          A.store.Ref(ptr + 220 + 8 + 68, undefined);
          A.store.Ref(ptr + 220 + 8 + 72, undefined);
          A.store.Ref(ptr + 220 + 8 + 76, undefined);
          A.store.Ref(ptr + 220 + 8 + 80, undefined);
          A.store.Ref(ptr + 220 + 8 + 84, undefined);
          A.store.Bool(ptr + 220 + 8 + 110, false);
          A.store.Bool(ptr + 220 + 8 + 88, false);
          A.store.Ref(ptr + 220 + 8 + 92, undefined);
          A.store.Ref(ptr + 220 + 8 + 96, undefined);
          A.store.Ref(ptr + 220 + 8 + 100, undefined);
          A.store.Ref(ptr + 220 + 8 + 104, undefined);
          A.store.Bool(ptr + 220 + 8 + 111, false);
          A.store.Bool(ptr + 220 + 8 + 108, false);
          A.store.Bool(ptr + 220 + 8 + 112, false);
          A.store.Bool(ptr + 220 + 8 + 109, false);
        } else {
          A.store.Bool(ptr + 220 + 123, true);
          A.store.Bool(ptr + 220 + 122, "AutoConnect" in x["Ethernet"] ? true : false);
          A.store.Bool(ptr + 220 + 0, x["Ethernet"]["AutoConnect"] ? true : false);
          A.store.Ref(ptr + 220 + 4, x["Ethernet"]["Authentication"]);

          if (typeof x["Ethernet"]["EAP"] === "undefined") {
            A.store.Bool(ptr + 220 + 8 + 113, false);
            A.store.Ref(ptr + 220 + 8 + 0, undefined);

            A.store.Bool(ptr + 220 + 8 + 4 + 49, false);
            A.store.Ref(ptr + 220 + 8 + 4 + 0, undefined);

            A.store.Bool(ptr + 220 + 8 + 4 + 4 + 16, false);
            A.store.Ref(ptr + 220 + 8 + 4 + 4 + 0, undefined);
            A.store.Ref(ptr + 220 + 8 + 4 + 4 + 4, undefined);
            A.store.Ref(ptr + 220 + 8 + 4 + 4 + 8, undefined);
            A.store.Ref(ptr + 220 + 8 + 4 + 4 + 12, undefined);
            A.store.Ref(ptr + 220 + 8 + 4 + 24, undefined);
            A.store.Ref(ptr + 220 + 8 + 4 + 28, undefined);

            A.store.Bool(ptr + 220 + 8 + 4 + 32 + 16, false);
            A.store.Ref(ptr + 220 + 8 + 4 + 32 + 0, undefined);
            A.store.Ref(ptr + 220 + 8 + 4 + 32 + 4, undefined);
            A.store.Ref(ptr + 220 + 8 + 4 + 32 + 8, undefined);
            A.store.Ref(ptr + 220 + 8 + 4 + 32 + 12, undefined);
            A.store.Ref(ptr + 220 + 8 + 56, undefined);
            A.store.Ref(ptr + 220 + 8 + 60, undefined);
            A.store.Ref(ptr + 220 + 8 + 64, undefined);
            A.store.Ref(ptr + 220 + 8 + 68, undefined);
            A.store.Ref(ptr + 220 + 8 + 72, undefined);
            A.store.Ref(ptr + 220 + 8 + 76, undefined);
            A.store.Ref(ptr + 220 + 8 + 80, undefined);
            A.store.Ref(ptr + 220 + 8 + 84, undefined);
            A.store.Bool(ptr + 220 + 8 + 110, false);
            A.store.Bool(ptr + 220 + 8 + 88, false);
            A.store.Ref(ptr + 220 + 8 + 92, undefined);
            A.store.Ref(ptr + 220 + 8 + 96, undefined);
            A.store.Ref(ptr + 220 + 8 + 100, undefined);
            A.store.Ref(ptr + 220 + 8 + 104, undefined);
            A.store.Bool(ptr + 220 + 8 + 111, false);
            A.store.Bool(ptr + 220 + 8 + 108, false);
            A.store.Bool(ptr + 220 + 8 + 112, false);
            A.store.Bool(ptr + 220 + 8 + 109, false);
          } else {
            A.store.Bool(ptr + 220 + 8 + 113, true);
            A.store.Ref(ptr + 220 + 8 + 0, x["Ethernet"]["EAP"]["AnonymousIdentity"]);

            if (typeof x["Ethernet"]["EAP"]["ClientCertPattern"] === "undefined") {
              A.store.Bool(ptr + 220 + 8 + 4 + 49, false);
              A.store.Ref(ptr + 220 + 8 + 4 + 0, undefined);

              A.store.Bool(ptr + 220 + 8 + 4 + 4 + 16, false);
              A.store.Ref(ptr + 220 + 8 + 4 + 4 + 0, undefined);
              A.store.Ref(ptr + 220 + 8 + 4 + 4 + 4, undefined);
              A.store.Ref(ptr + 220 + 8 + 4 + 4 + 8, undefined);
              A.store.Ref(ptr + 220 + 8 + 4 + 4 + 12, undefined);
              A.store.Ref(ptr + 220 + 8 + 4 + 24, undefined);
              A.store.Ref(ptr + 220 + 8 + 4 + 28, undefined);

              A.store.Bool(ptr + 220 + 8 + 4 + 32 + 16, false);
              A.store.Ref(ptr + 220 + 8 + 4 + 32 + 0, undefined);
              A.store.Ref(ptr + 220 + 8 + 4 + 32 + 4, undefined);
              A.store.Ref(ptr + 220 + 8 + 4 + 32 + 8, undefined);
              A.store.Ref(ptr + 220 + 8 + 4 + 32 + 12, undefined);
            } else {
              A.store.Bool(ptr + 220 + 8 + 4 + 49, true);
              A.store.Ref(ptr + 220 + 8 + 4 + 0, x["Ethernet"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]);

              if (typeof x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"] === "undefined") {
                A.store.Bool(ptr + 220 + 8 + 4 + 4 + 16, false);
                A.store.Ref(ptr + 220 + 8 + 4 + 4 + 0, undefined);
                A.store.Ref(ptr + 220 + 8 + 4 + 4 + 4, undefined);
                A.store.Ref(ptr + 220 + 8 + 4 + 4 + 8, undefined);
                A.store.Ref(ptr + 220 + 8 + 4 + 4 + 12, undefined);
              } else {
                A.store.Bool(ptr + 220 + 8 + 4 + 4 + 16, true);
                A.store.Ref(
                  ptr + 220 + 8 + 4 + 4 + 0,
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]
                );
                A.store.Ref(ptr + 220 + 8 + 4 + 4 + 4, x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]);
                A.store.Ref(
                  ptr + 220 + 8 + 4 + 4 + 8,
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]
                );
                A.store.Ref(
                  ptr + 220 + 8 + 4 + 4 + 12,
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]
                );
              }
              A.store.Ref(ptr + 220 + 8 + 4 + 24, x["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCAPEMs"]);
              A.store.Ref(ptr + 220 + 8 + 4 + 28, x["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCARef"]);

              if (typeof x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"] === "undefined") {
                A.store.Bool(ptr + 220 + 8 + 4 + 32 + 16, false);
                A.store.Ref(ptr + 220 + 8 + 4 + 32 + 0, undefined);
                A.store.Ref(ptr + 220 + 8 + 4 + 32 + 4, undefined);
                A.store.Ref(ptr + 220 + 8 + 4 + 32 + 8, undefined);
                A.store.Ref(ptr + 220 + 8 + 4 + 32 + 12, undefined);
              } else {
                A.store.Bool(ptr + 220 + 8 + 4 + 32 + 16, true);
                A.store.Ref(
                  ptr + 220 + 8 + 4 + 32 + 0,
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]
                );
                A.store.Ref(
                  ptr + 220 + 8 + 4 + 32 + 4,
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]
                );
                A.store.Ref(
                  ptr + 220 + 8 + 4 + 32 + 8,
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]
                );
                A.store.Ref(
                  ptr + 220 + 8 + 4 + 32 + 12,
                  x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]
                );
              }
            }
            A.store.Ref(ptr + 220 + 8 + 56, x["Ethernet"]["EAP"]["ClientCertPKCS11Id"]);
            A.store.Ref(ptr + 220 + 8 + 60, x["Ethernet"]["EAP"]["ClientCertProvisioningProfileId"]);
            A.store.Ref(ptr + 220 + 8 + 64, x["Ethernet"]["EAP"]["ClientCertRef"]);
            A.store.Ref(ptr + 220 + 8 + 68, x["Ethernet"]["EAP"]["ClientCertType"]);
            A.store.Ref(ptr + 220 + 8 + 72, x["Ethernet"]["EAP"]["Identity"]);
            A.store.Ref(ptr + 220 + 8 + 76, x["Ethernet"]["EAP"]["Inner"]);
            A.store.Ref(ptr + 220 + 8 + 80, x["Ethernet"]["EAP"]["Outer"]);
            A.store.Ref(ptr + 220 + 8 + 84, x["Ethernet"]["EAP"]["Password"]);
            A.store.Bool(ptr + 220 + 8 + 110, "SaveCredentials" in x["Ethernet"]["EAP"] ? true : false);
            A.store.Bool(ptr + 220 + 8 + 88, x["Ethernet"]["EAP"]["SaveCredentials"] ? true : false);
            A.store.Ref(ptr + 220 + 8 + 92, x["Ethernet"]["EAP"]["ServerCAPEMs"]);
            A.store.Ref(ptr + 220 + 8 + 96, x["Ethernet"]["EAP"]["ServerCARefs"]);
            A.store.Ref(ptr + 220 + 8 + 100, x["Ethernet"]["EAP"]["SubjectMatch"]);
            A.store.Ref(ptr + 220 + 8 + 104, x["Ethernet"]["EAP"]["TLSVersionMax"]);
            A.store.Bool(ptr + 220 + 8 + 111, "UseProactiveKeyCaching" in x["Ethernet"]["EAP"] ? true : false);
            A.store.Bool(ptr + 220 + 8 + 108, x["Ethernet"]["EAP"]["UseProactiveKeyCaching"] ? true : false);
            A.store.Bool(ptr + 220 + 8 + 112, "UseSystemCAs" in x["Ethernet"]["EAP"] ? true : false);
            A.store.Bool(ptr + 220 + 8 + 109, x["Ethernet"]["EAP"]["UseSystemCAs"] ? true : false);
          }
        }
        A.store.Ref(ptr + 344, x["GUID"]);
        A.store.Enum(ptr + 348, ["DHCP", "Static"].indexOf(x["IPAddressConfigType"] as string));
        A.store.Ref(ptr + 352, x["Name"]);
        A.store.Enum(ptr + 356, ["DHCP", "Static"].indexOf(x["NameServersConfigType"] as string));
        A.store.Bool(ptr + 1142, "Priority" in x ? true : false);
        A.store.Int32(ptr + 360, x["Priority"] === undefined ? 0 : (x["Priority"] as number));

        if (typeof x["ProxySettings"] === "undefined") {
          A.store.Bool(ptr + 364 + 60, false);
          A.store.Enum(ptr + 364 + 0, -1);

          A.store.Bool(ptr + 364 + 4 + 46, false);

          A.store.Bool(ptr + 364 + 4 + 0 + 9, false);
          A.store.Ref(ptr + 364 + 4 + 0 + 0, undefined);
          A.store.Bool(ptr + 364 + 4 + 0 + 8, false);
          A.store.Int32(ptr + 364 + 4 + 0 + 4, 0);

          A.store.Bool(ptr + 364 + 4 + 12 + 9, false);
          A.store.Ref(ptr + 364 + 4 + 12 + 0, undefined);
          A.store.Bool(ptr + 364 + 4 + 12 + 8, false);
          A.store.Int32(ptr + 364 + 4 + 12 + 4, 0);

          A.store.Bool(ptr + 364 + 4 + 24 + 9, false);
          A.store.Ref(ptr + 364 + 4 + 24 + 0, undefined);
          A.store.Bool(ptr + 364 + 4 + 24 + 8, false);
          A.store.Int32(ptr + 364 + 4 + 24 + 4, 0);

          A.store.Bool(ptr + 364 + 4 + 36 + 9, false);
          A.store.Ref(ptr + 364 + 4 + 36 + 0, undefined);
          A.store.Bool(ptr + 364 + 4 + 36 + 8, false);
          A.store.Int32(ptr + 364 + 4 + 36 + 4, 0);
          A.store.Ref(ptr + 364 + 52, undefined);
          A.store.Ref(ptr + 364 + 56, undefined);
        } else {
          A.store.Bool(ptr + 364 + 60, true);
          A.store.Enum(
            ptr + 364 + 0,
            ["Direct", "Manual", "PAC", "WPAD"].indexOf(x["ProxySettings"]["Type"] as string)
          );

          if (typeof x["ProxySettings"]["Manual"] === "undefined") {
            A.store.Bool(ptr + 364 + 4 + 46, false);

            A.store.Bool(ptr + 364 + 4 + 0 + 9, false);
            A.store.Ref(ptr + 364 + 4 + 0 + 0, undefined);
            A.store.Bool(ptr + 364 + 4 + 0 + 8, false);
            A.store.Int32(ptr + 364 + 4 + 0 + 4, 0);

            A.store.Bool(ptr + 364 + 4 + 12 + 9, false);
            A.store.Ref(ptr + 364 + 4 + 12 + 0, undefined);
            A.store.Bool(ptr + 364 + 4 + 12 + 8, false);
            A.store.Int32(ptr + 364 + 4 + 12 + 4, 0);

            A.store.Bool(ptr + 364 + 4 + 24 + 9, false);
            A.store.Ref(ptr + 364 + 4 + 24 + 0, undefined);
            A.store.Bool(ptr + 364 + 4 + 24 + 8, false);
            A.store.Int32(ptr + 364 + 4 + 24 + 4, 0);

            A.store.Bool(ptr + 364 + 4 + 36 + 9, false);
            A.store.Ref(ptr + 364 + 4 + 36 + 0, undefined);
            A.store.Bool(ptr + 364 + 4 + 36 + 8, false);
            A.store.Int32(ptr + 364 + 4 + 36 + 4, 0);
          } else {
            A.store.Bool(ptr + 364 + 4 + 46, true);

            if (typeof x["ProxySettings"]["Manual"]["HTTPProxy"] === "undefined") {
              A.store.Bool(ptr + 364 + 4 + 0 + 9, false);
              A.store.Ref(ptr + 364 + 4 + 0 + 0, undefined);
              A.store.Bool(ptr + 364 + 4 + 0 + 8, false);
              A.store.Int32(ptr + 364 + 4 + 0 + 4, 0);
            } else {
              A.store.Bool(ptr + 364 + 4 + 0 + 9, true);
              A.store.Ref(ptr + 364 + 4 + 0 + 0, x["ProxySettings"]["Manual"]["HTTPProxy"]["Host"]);
              A.store.Bool(ptr + 364 + 4 + 0 + 8, "Port" in x["ProxySettings"]["Manual"]["HTTPProxy"] ? true : false);
              A.store.Int32(
                ptr + 364 + 4 + 0 + 4,
                x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"] === undefined
                  ? 0
                  : (x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"] as number)
              );
            }

            if (typeof x["ProxySettings"]["Manual"]["SecureHTTPProxy"] === "undefined") {
              A.store.Bool(ptr + 364 + 4 + 12 + 9, false);
              A.store.Ref(ptr + 364 + 4 + 12 + 0, undefined);
              A.store.Bool(ptr + 364 + 4 + 12 + 8, false);
              A.store.Int32(ptr + 364 + 4 + 12 + 4, 0);
            } else {
              A.store.Bool(ptr + 364 + 4 + 12 + 9, true);
              A.store.Ref(ptr + 364 + 4 + 12 + 0, x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Host"]);
              A.store.Bool(
                ptr + 364 + 4 + 12 + 8,
                "Port" in x["ProxySettings"]["Manual"]["SecureHTTPProxy"] ? true : false
              );
              A.store.Int32(
                ptr + 364 + 4 + 12 + 4,
                x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"] === undefined
                  ? 0
                  : (x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"] as number)
              );
            }

            if (typeof x["ProxySettings"]["Manual"]["FTPProxy"] === "undefined") {
              A.store.Bool(ptr + 364 + 4 + 24 + 9, false);
              A.store.Ref(ptr + 364 + 4 + 24 + 0, undefined);
              A.store.Bool(ptr + 364 + 4 + 24 + 8, false);
              A.store.Int32(ptr + 364 + 4 + 24 + 4, 0);
            } else {
              A.store.Bool(ptr + 364 + 4 + 24 + 9, true);
              A.store.Ref(ptr + 364 + 4 + 24 + 0, x["ProxySettings"]["Manual"]["FTPProxy"]["Host"]);
              A.store.Bool(ptr + 364 + 4 + 24 + 8, "Port" in x["ProxySettings"]["Manual"]["FTPProxy"] ? true : false);
              A.store.Int32(
                ptr + 364 + 4 + 24 + 4,
                x["ProxySettings"]["Manual"]["FTPProxy"]["Port"] === undefined
                  ? 0
                  : (x["ProxySettings"]["Manual"]["FTPProxy"]["Port"] as number)
              );
            }

            if (typeof x["ProxySettings"]["Manual"]["SOCKS"] === "undefined") {
              A.store.Bool(ptr + 364 + 4 + 36 + 9, false);
              A.store.Ref(ptr + 364 + 4 + 36 + 0, undefined);
              A.store.Bool(ptr + 364 + 4 + 36 + 8, false);
              A.store.Int32(ptr + 364 + 4 + 36 + 4, 0);
            } else {
              A.store.Bool(ptr + 364 + 4 + 36 + 9, true);
              A.store.Ref(ptr + 364 + 4 + 36 + 0, x["ProxySettings"]["Manual"]["SOCKS"]["Host"]);
              A.store.Bool(ptr + 364 + 4 + 36 + 8, "Port" in x["ProxySettings"]["Manual"]["SOCKS"] ? true : false);
              A.store.Int32(
                ptr + 364 + 4 + 36 + 4,
                x["ProxySettings"]["Manual"]["SOCKS"]["Port"] === undefined
                  ? 0
                  : (x["ProxySettings"]["Manual"]["SOCKS"]["Port"] as number)
              );
            }
          }
          A.store.Ref(ptr + 364 + 52, x["ProxySettings"]["ExcludeDomains"]);
          A.store.Ref(ptr + 364 + 56, x["ProxySettings"]["PAC"]);
        }

        if (typeof x["StaticIPConfig"] === "undefined") {
          A.store.Bool(ptr + 428 + 37, false);
          A.store.Ref(ptr + 428 + 0, undefined);
          A.store.Ref(ptr + 428 + 4, undefined);
          A.store.Ref(ptr + 428 + 8, undefined);
          A.store.Ref(ptr + 428 + 12, undefined);
          A.store.Ref(ptr + 428 + 16, undefined);
          A.store.Ref(ptr + 428 + 20, undefined);
          A.store.Bool(ptr + 428 + 36, false);
          A.store.Int32(ptr + 428 + 24, 0);
          A.store.Ref(ptr + 428 + 28, undefined);
          A.store.Ref(ptr + 428 + 32, undefined);
        } else {
          A.store.Bool(ptr + 428 + 37, true);
          A.store.Ref(ptr + 428 + 0, x["StaticIPConfig"]["Gateway"]);
          A.store.Ref(ptr + 428 + 4, x["StaticIPConfig"]["IPAddress"]);
          A.store.Ref(ptr + 428 + 8, x["StaticIPConfig"]["ExcludedRoutes"]);
          A.store.Ref(ptr + 428 + 12, x["StaticIPConfig"]["IncludedRoutes"]);
          A.store.Ref(ptr + 428 + 16, x["StaticIPConfig"]["NameServers"]);
          A.store.Ref(ptr + 428 + 20, x["StaticIPConfig"]["SearchDomains"]);
          A.store.Bool(ptr + 428 + 36, "RoutingPrefix" in x["StaticIPConfig"] ? true : false);
          A.store.Int32(
            ptr + 428 + 24,
            x["StaticIPConfig"]["RoutingPrefix"] === undefined ? 0 : (x["StaticIPConfig"]["RoutingPrefix"] as number)
          );
          A.store.Ref(ptr + 428 + 28, x["StaticIPConfig"]["Type"]);
          A.store.Ref(ptr + 428 + 32, x["StaticIPConfig"]["WebProxyAutoDiscoveryUrl"]);
        }
        A.store.Enum(
          ptr + 468,
          ["All", "Cellular", "Ethernet", "Tether", "VPN", "Wireless", "WiFi"].indexOf(x["Type"] as string)
        );

        if (typeof x["VPN"] === "undefined") {
          A.store.Bool(ptr + 472 + 505, false);
          A.store.Bool(ptr + 472 + 504, false);
          A.store.Bool(ptr + 472 + 0, false);
          A.store.Ref(ptr + 472 + 4, undefined);

          A.store.Bool(ptr + 472 + 8 + 236, false);
          A.store.Ref(ptr + 472 + 8 + 0, undefined);

          A.store.Bool(ptr + 472 + 8 + 4 + 49, false);
          A.store.Ref(ptr + 472 + 8 + 4 + 0, undefined);

          A.store.Bool(ptr + 472 + 8 + 4 + 4 + 16, false);
          A.store.Ref(ptr + 472 + 8 + 4 + 4 + 0, undefined);
          A.store.Ref(ptr + 472 + 8 + 4 + 4 + 4, undefined);
          A.store.Ref(ptr + 472 + 8 + 4 + 4 + 8, undefined);
          A.store.Ref(ptr + 472 + 8 + 4 + 4 + 12, undefined);
          A.store.Ref(ptr + 472 + 8 + 4 + 24, undefined);
          A.store.Ref(ptr + 472 + 8 + 4 + 28, undefined);

          A.store.Bool(ptr + 472 + 8 + 4 + 32 + 16, false);
          A.store.Ref(ptr + 472 + 8 + 4 + 32 + 0, undefined);
          A.store.Ref(ptr + 472 + 8 + 4 + 32 + 4, undefined);
          A.store.Ref(ptr + 472 + 8 + 4 + 32 + 8, undefined);
          A.store.Ref(ptr + 472 + 8 + 4 + 32 + 12, undefined);
          A.store.Ref(ptr + 472 + 8 + 56, undefined);
          A.store.Ref(ptr + 472 + 8 + 60, undefined);
          A.store.Ref(ptr + 472 + 8 + 64, undefined);
          A.store.Ref(ptr + 472 + 8 + 68, undefined);

          A.store.Bool(ptr + 472 + 8 + 72 + 113, false);
          A.store.Ref(ptr + 472 + 8 + 72 + 0, undefined);

          A.store.Bool(ptr + 472 + 8 + 72 + 4 + 49, false);
          A.store.Ref(ptr + 472 + 8 + 72 + 4 + 0, undefined);

          A.store.Bool(ptr + 472 + 8 + 72 + 4 + 4 + 16, false);
          A.store.Ref(ptr + 472 + 8 + 72 + 4 + 4 + 0, undefined);
          A.store.Ref(ptr + 472 + 8 + 72 + 4 + 4 + 4, undefined);
          A.store.Ref(ptr + 472 + 8 + 72 + 4 + 4 + 8, undefined);
          A.store.Ref(ptr + 472 + 8 + 72 + 4 + 4 + 12, undefined);
          A.store.Ref(ptr + 472 + 8 + 72 + 4 + 24, undefined);
          A.store.Ref(ptr + 472 + 8 + 72 + 4 + 28, undefined);

          A.store.Bool(ptr + 472 + 8 + 72 + 4 + 32 + 16, false);
          A.store.Ref(ptr + 472 + 8 + 72 + 4 + 32 + 0, undefined);
          A.store.Ref(ptr + 472 + 8 + 72 + 4 + 32 + 4, undefined);
          A.store.Ref(ptr + 472 + 8 + 72 + 4 + 32 + 8, undefined);
          A.store.Ref(ptr + 472 + 8 + 72 + 4 + 32 + 12, undefined);
          A.store.Ref(ptr + 472 + 8 + 72 + 56, undefined);
          A.store.Ref(ptr + 472 + 8 + 72 + 60, undefined);
          A.store.Ref(ptr + 472 + 8 + 72 + 64, undefined);
          A.store.Ref(ptr + 472 + 8 + 72 + 68, undefined);
          A.store.Ref(ptr + 472 + 8 + 72 + 72, undefined);
          A.store.Ref(ptr + 472 + 8 + 72 + 76, undefined);
          A.store.Ref(ptr + 472 + 8 + 72 + 80, undefined);
          A.store.Ref(ptr + 472 + 8 + 72 + 84, undefined);
          A.store.Bool(ptr + 472 + 8 + 72 + 110, false);
          A.store.Bool(ptr + 472 + 8 + 72 + 88, false);
          A.store.Ref(ptr + 472 + 8 + 72 + 92, undefined);
          A.store.Ref(ptr + 472 + 8 + 72 + 96, undefined);
          A.store.Ref(ptr + 472 + 8 + 72 + 100, undefined);
          A.store.Ref(ptr + 472 + 8 + 72 + 104, undefined);
          A.store.Bool(ptr + 472 + 8 + 72 + 111, false);
          A.store.Bool(ptr + 472 + 8 + 72 + 108, false);
          A.store.Bool(ptr + 472 + 8 + 72 + 112, false);
          A.store.Bool(ptr + 472 + 8 + 72 + 109, false);
          A.store.Ref(ptr + 472 + 8 + 188, undefined);
          A.store.Bool(ptr + 472 + 8 + 234, false);
          A.store.Int32(ptr + 472 + 8 + 192, 0);
          A.store.Ref(ptr + 472 + 8 + 196, undefined);
          A.store.Ref(ptr + 472 + 8 + 200, undefined);
          A.store.Ref(ptr + 472 + 8 + 204, undefined);
          A.store.Bool(ptr + 472 + 8 + 235, false);
          A.store.Bool(ptr + 472 + 8 + 208, false);
          A.store.Ref(ptr + 472 + 8 + 212, undefined);
          A.store.Ref(ptr + 472 + 8 + 216, undefined);

          A.store.Bool(ptr + 472 + 8 + 220 + 13, false);
          A.store.Ref(ptr + 472 + 8 + 220 + 0, undefined);
          A.store.Bool(ptr + 472 + 8 + 220 + 12, false);
          A.store.Bool(ptr + 472 + 8 + 220 + 4, false);
          A.store.Ref(ptr + 472 + 8 + 220 + 8, undefined);

          A.store.Bool(ptr + 472 + 248 + 18, false);
          A.store.Bool(ptr + 472 + 248 + 16, false);
          A.store.Bool(ptr + 472 + 248 + 0, false);
          A.store.Ref(ptr + 472 + 248 + 4, undefined);
          A.store.Bool(ptr + 472 + 248 + 17, false);
          A.store.Bool(ptr + 472 + 248 + 8, false);
          A.store.Ref(ptr + 472 + 248 + 12, undefined);

          A.store.Bool(ptr + 472 + 268 + 218, false);
          A.store.Ref(ptr + 472 + 268 + 0, undefined);
          A.store.Ref(ptr + 472 + 268 + 4, undefined);
          A.store.Bool(ptr + 472 + 268 + 209, false);
          A.store.Bool(ptr + 472 + 268 + 8, false);
          A.store.Ref(ptr + 472 + 268 + 12, undefined);
          A.store.Ref(ptr + 472 + 268 + 16, undefined);

          A.store.Bool(ptr + 472 + 268 + 20 + 49, false);
          A.store.Ref(ptr + 472 + 268 + 20 + 0, undefined);

          A.store.Bool(ptr + 472 + 268 + 20 + 4 + 16, false);
          A.store.Ref(ptr + 472 + 268 + 20 + 4 + 0, undefined);
          A.store.Ref(ptr + 472 + 268 + 20 + 4 + 4, undefined);
          A.store.Ref(ptr + 472 + 268 + 20 + 4 + 8, undefined);
          A.store.Ref(ptr + 472 + 268 + 20 + 4 + 12, undefined);
          A.store.Ref(ptr + 472 + 268 + 20 + 24, undefined);
          A.store.Ref(ptr + 472 + 268 + 20 + 28, undefined);

          A.store.Bool(ptr + 472 + 268 + 20 + 32 + 16, false);
          A.store.Ref(ptr + 472 + 268 + 20 + 32 + 0, undefined);
          A.store.Ref(ptr + 472 + 268 + 20 + 32 + 4, undefined);
          A.store.Ref(ptr + 472 + 268 + 20 + 32 + 8, undefined);
          A.store.Ref(ptr + 472 + 268 + 20 + 32 + 12, undefined);
          A.store.Ref(ptr + 472 + 268 + 72, undefined);
          A.store.Ref(ptr + 472 + 268 + 76, undefined);
          A.store.Ref(ptr + 472 + 268 + 80, undefined);
          A.store.Ref(ptr + 472 + 268 + 84, undefined);
          A.store.Bool(ptr + 472 + 268 + 210, false);
          A.store.Bool(ptr + 472 + 268 + 88, false);
          A.store.Ref(ptr + 472 + 268 + 92, undefined);
          A.store.Bool(ptr + 472 + 268 + 211, false);
          A.store.Bool(ptr + 472 + 268 + 96, false);
          A.store.Ref(ptr + 472 + 268 + 100, undefined);
          A.store.Ref(ptr + 472 + 268 + 104, undefined);
          A.store.Ref(ptr + 472 + 268 + 108, undefined);
          A.store.Ref(ptr + 472 + 268 + 112, undefined);
          A.store.Bool(ptr + 472 + 268 + 212, false);
          A.store.Int32(ptr + 472 + 268 + 116, 0);
          A.store.Ref(ptr + 472 + 268 + 120, undefined);
          A.store.Bool(ptr + 472 + 268 + 213, false);
          A.store.Bool(ptr + 472 + 268 + 124, false);
          A.store.Ref(ptr + 472 + 268 + 128, undefined);
          A.store.Ref(ptr + 472 + 268 + 132, undefined);
          A.store.Ref(ptr + 472 + 268 + 136, undefined);
          A.store.Bool(ptr + 472 + 268 + 214, false);
          A.store.Int32(ptr + 472 + 268 + 140, 0);
          A.store.Bool(ptr + 472 + 268 + 215, false);
          A.store.Bool(ptr + 472 + 268 + 144, false);
          A.store.Ref(ptr + 472 + 268 + 148, undefined);
          A.store.Ref(ptr + 472 + 268 + 152, undefined);
          A.store.Ref(ptr + 472 + 268 + 156, undefined);
          A.store.Bool(ptr + 472 + 268 + 216, false);
          A.store.Int32(ptr + 472 + 268 + 160, 0);
          A.store.Bool(ptr + 472 + 268 + 217, false);
          A.store.Int32(ptr + 472 + 268 + 164, 0);
          A.store.Ref(ptr + 472 + 268 + 168, undefined);
          A.store.Ref(ptr + 472 + 268 + 172, undefined);
          A.store.Ref(ptr + 472 + 268 + 176, undefined);
          A.store.Ref(ptr + 472 + 268 + 180, undefined);
          A.store.Ref(ptr + 472 + 268 + 184, undefined);
          A.store.Ref(ptr + 472 + 268 + 188, undefined);
          A.store.Ref(ptr + 472 + 268 + 192, undefined);
          A.store.Ref(ptr + 472 + 268 + 196, undefined);

          A.store.Bool(ptr + 472 + 268 + 200 + 8, false);
          A.store.Ref(ptr + 472 + 268 + 200 + 0, undefined);
          A.store.Ref(ptr + 472 + 268 + 200 + 4, undefined);

          A.store.Bool(ptr + 472 + 488 + 8, false);
          A.store.Ref(ptr + 472 + 488 + 0, undefined);
          A.store.Ref(ptr + 472 + 488 + 4, undefined);
          A.store.Ref(ptr + 472 + 500, undefined);
        } else {
          A.store.Bool(ptr + 472 + 505, true);
          A.store.Bool(ptr + 472 + 504, "AutoConnect" in x["VPN"] ? true : false);
          A.store.Bool(ptr + 472 + 0, x["VPN"]["AutoConnect"] ? true : false);
          A.store.Ref(ptr + 472 + 4, x["VPN"]["Host"]);

          if (typeof x["VPN"]["IPsec"] === "undefined") {
            A.store.Bool(ptr + 472 + 8 + 236, false);
            A.store.Ref(ptr + 472 + 8 + 0, undefined);

            A.store.Bool(ptr + 472 + 8 + 4 + 49, false);
            A.store.Ref(ptr + 472 + 8 + 4 + 0, undefined);

            A.store.Bool(ptr + 472 + 8 + 4 + 4 + 16, false);
            A.store.Ref(ptr + 472 + 8 + 4 + 4 + 0, undefined);
            A.store.Ref(ptr + 472 + 8 + 4 + 4 + 4, undefined);
            A.store.Ref(ptr + 472 + 8 + 4 + 4 + 8, undefined);
            A.store.Ref(ptr + 472 + 8 + 4 + 4 + 12, undefined);
            A.store.Ref(ptr + 472 + 8 + 4 + 24, undefined);
            A.store.Ref(ptr + 472 + 8 + 4 + 28, undefined);

            A.store.Bool(ptr + 472 + 8 + 4 + 32 + 16, false);
            A.store.Ref(ptr + 472 + 8 + 4 + 32 + 0, undefined);
            A.store.Ref(ptr + 472 + 8 + 4 + 32 + 4, undefined);
            A.store.Ref(ptr + 472 + 8 + 4 + 32 + 8, undefined);
            A.store.Ref(ptr + 472 + 8 + 4 + 32 + 12, undefined);
            A.store.Ref(ptr + 472 + 8 + 56, undefined);
            A.store.Ref(ptr + 472 + 8 + 60, undefined);
            A.store.Ref(ptr + 472 + 8 + 64, undefined);
            A.store.Ref(ptr + 472 + 8 + 68, undefined);

            A.store.Bool(ptr + 472 + 8 + 72 + 113, false);
            A.store.Ref(ptr + 472 + 8 + 72 + 0, undefined);

            A.store.Bool(ptr + 472 + 8 + 72 + 4 + 49, false);
            A.store.Ref(ptr + 472 + 8 + 72 + 4 + 0, undefined);

            A.store.Bool(ptr + 472 + 8 + 72 + 4 + 4 + 16, false);
            A.store.Ref(ptr + 472 + 8 + 72 + 4 + 4 + 0, undefined);
            A.store.Ref(ptr + 472 + 8 + 72 + 4 + 4 + 4, undefined);
            A.store.Ref(ptr + 472 + 8 + 72 + 4 + 4 + 8, undefined);
            A.store.Ref(ptr + 472 + 8 + 72 + 4 + 4 + 12, undefined);
            A.store.Ref(ptr + 472 + 8 + 72 + 4 + 24, undefined);
            A.store.Ref(ptr + 472 + 8 + 72 + 4 + 28, undefined);

            A.store.Bool(ptr + 472 + 8 + 72 + 4 + 32 + 16, false);
            A.store.Ref(ptr + 472 + 8 + 72 + 4 + 32 + 0, undefined);
            A.store.Ref(ptr + 472 + 8 + 72 + 4 + 32 + 4, undefined);
            A.store.Ref(ptr + 472 + 8 + 72 + 4 + 32 + 8, undefined);
            A.store.Ref(ptr + 472 + 8 + 72 + 4 + 32 + 12, undefined);
            A.store.Ref(ptr + 472 + 8 + 72 + 56, undefined);
            A.store.Ref(ptr + 472 + 8 + 72 + 60, undefined);
            A.store.Ref(ptr + 472 + 8 + 72 + 64, undefined);
            A.store.Ref(ptr + 472 + 8 + 72 + 68, undefined);
            A.store.Ref(ptr + 472 + 8 + 72 + 72, undefined);
            A.store.Ref(ptr + 472 + 8 + 72 + 76, undefined);
            A.store.Ref(ptr + 472 + 8 + 72 + 80, undefined);
            A.store.Ref(ptr + 472 + 8 + 72 + 84, undefined);
            A.store.Bool(ptr + 472 + 8 + 72 + 110, false);
            A.store.Bool(ptr + 472 + 8 + 72 + 88, false);
            A.store.Ref(ptr + 472 + 8 + 72 + 92, undefined);
            A.store.Ref(ptr + 472 + 8 + 72 + 96, undefined);
            A.store.Ref(ptr + 472 + 8 + 72 + 100, undefined);
            A.store.Ref(ptr + 472 + 8 + 72 + 104, undefined);
            A.store.Bool(ptr + 472 + 8 + 72 + 111, false);
            A.store.Bool(ptr + 472 + 8 + 72 + 108, false);
            A.store.Bool(ptr + 472 + 8 + 72 + 112, false);
            A.store.Bool(ptr + 472 + 8 + 72 + 109, false);
            A.store.Ref(ptr + 472 + 8 + 188, undefined);
            A.store.Bool(ptr + 472 + 8 + 234, false);
            A.store.Int32(ptr + 472 + 8 + 192, 0);
            A.store.Ref(ptr + 472 + 8 + 196, undefined);
            A.store.Ref(ptr + 472 + 8 + 200, undefined);
            A.store.Ref(ptr + 472 + 8 + 204, undefined);
            A.store.Bool(ptr + 472 + 8 + 235, false);
            A.store.Bool(ptr + 472 + 8 + 208, false);
            A.store.Ref(ptr + 472 + 8 + 212, undefined);
            A.store.Ref(ptr + 472 + 8 + 216, undefined);

            A.store.Bool(ptr + 472 + 8 + 220 + 13, false);
            A.store.Ref(ptr + 472 + 8 + 220 + 0, undefined);
            A.store.Bool(ptr + 472 + 8 + 220 + 12, false);
            A.store.Bool(ptr + 472 + 8 + 220 + 4, false);
            A.store.Ref(ptr + 472 + 8 + 220 + 8, undefined);
          } else {
            A.store.Bool(ptr + 472 + 8 + 236, true);
            A.store.Ref(ptr + 472 + 8 + 0, x["VPN"]["IPsec"]["AuthenticationType"]);

            if (typeof x["VPN"]["IPsec"]["ClientCertPattern"] === "undefined") {
              A.store.Bool(ptr + 472 + 8 + 4 + 49, false);
              A.store.Ref(ptr + 472 + 8 + 4 + 0, undefined);

              A.store.Bool(ptr + 472 + 8 + 4 + 4 + 16, false);
              A.store.Ref(ptr + 472 + 8 + 4 + 4 + 0, undefined);
              A.store.Ref(ptr + 472 + 8 + 4 + 4 + 4, undefined);
              A.store.Ref(ptr + 472 + 8 + 4 + 4 + 8, undefined);
              A.store.Ref(ptr + 472 + 8 + 4 + 4 + 12, undefined);
              A.store.Ref(ptr + 472 + 8 + 4 + 24, undefined);
              A.store.Ref(ptr + 472 + 8 + 4 + 28, undefined);

              A.store.Bool(ptr + 472 + 8 + 4 + 32 + 16, false);
              A.store.Ref(ptr + 472 + 8 + 4 + 32 + 0, undefined);
              A.store.Ref(ptr + 472 + 8 + 4 + 32 + 4, undefined);
              A.store.Ref(ptr + 472 + 8 + 4 + 32 + 8, undefined);
              A.store.Ref(ptr + 472 + 8 + 4 + 32 + 12, undefined);
            } else {
              A.store.Bool(ptr + 472 + 8 + 4 + 49, true);
              A.store.Ref(ptr + 472 + 8 + 4 + 0, x["VPN"]["IPsec"]["ClientCertPattern"]["EnrollmentURI"]);

              if (typeof x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"] === "undefined") {
                A.store.Bool(ptr + 472 + 8 + 4 + 4 + 16, false);
                A.store.Ref(ptr + 472 + 8 + 4 + 4 + 0, undefined);
                A.store.Ref(ptr + 472 + 8 + 4 + 4 + 4, undefined);
                A.store.Ref(ptr + 472 + 8 + 4 + 4 + 8, undefined);
                A.store.Ref(ptr + 472 + 8 + 4 + 4 + 12, undefined);
              } else {
                A.store.Bool(ptr + 472 + 8 + 4 + 4 + 16, true);
                A.store.Ref(ptr + 472 + 8 + 4 + 4 + 0, x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"]);
                A.store.Ref(ptr + 472 + 8 + 4 + 4 + 4, x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"]);
                A.store.Ref(
                  ptr + 472 + 8 + 4 + 4 + 8,
                  x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"]
                );
                A.store.Ref(
                  ptr + 472 + 8 + 4 + 4 + 12,
                  x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]
                );
              }
              A.store.Ref(ptr + 472 + 8 + 4 + 24, x["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCAPEMs"]);
              A.store.Ref(ptr + 472 + 8 + 4 + 28, x["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCARef"]);

              if (typeof x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"] === "undefined") {
                A.store.Bool(ptr + 472 + 8 + 4 + 32 + 16, false);
                A.store.Ref(ptr + 472 + 8 + 4 + 32 + 0, undefined);
                A.store.Ref(ptr + 472 + 8 + 4 + 32 + 4, undefined);
                A.store.Ref(ptr + 472 + 8 + 4 + 32 + 8, undefined);
                A.store.Ref(ptr + 472 + 8 + 4 + 32 + 12, undefined);
              } else {
                A.store.Bool(ptr + 472 + 8 + 4 + 32 + 16, true);
                A.store.Ref(
                  ptr + 472 + 8 + 4 + 32 + 0,
                  x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"]
                );
                A.store.Ref(ptr + 472 + 8 + 4 + 32 + 4, x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Locality"]);
                A.store.Ref(
                  ptr + 472 + 8 + 4 + 32 + 8,
                  x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Organization"]
                );
                A.store.Ref(
                  ptr + 472 + 8 + 4 + 32 + 12,
                  x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]
                );
              }
            }
            A.store.Ref(ptr + 472 + 8 + 56, x["VPN"]["IPsec"]["ClientCertPKCS11Id"]);
            A.store.Ref(ptr + 472 + 8 + 60, x["VPN"]["IPsec"]["ClientCertProvisioningProfileId"]);
            A.store.Ref(ptr + 472 + 8 + 64, x["VPN"]["IPsec"]["ClientCertRef"]);
            A.store.Ref(ptr + 472 + 8 + 68, x["VPN"]["IPsec"]["ClientCertType"]);

            if (typeof x["VPN"]["IPsec"]["EAP"] === "undefined") {
              A.store.Bool(ptr + 472 + 8 + 72 + 113, false);
              A.store.Ref(ptr + 472 + 8 + 72 + 0, undefined);

              A.store.Bool(ptr + 472 + 8 + 72 + 4 + 49, false);
              A.store.Ref(ptr + 472 + 8 + 72 + 4 + 0, undefined);

              A.store.Bool(ptr + 472 + 8 + 72 + 4 + 4 + 16, false);
              A.store.Ref(ptr + 472 + 8 + 72 + 4 + 4 + 0, undefined);
              A.store.Ref(ptr + 472 + 8 + 72 + 4 + 4 + 4, undefined);
              A.store.Ref(ptr + 472 + 8 + 72 + 4 + 4 + 8, undefined);
              A.store.Ref(ptr + 472 + 8 + 72 + 4 + 4 + 12, undefined);
              A.store.Ref(ptr + 472 + 8 + 72 + 4 + 24, undefined);
              A.store.Ref(ptr + 472 + 8 + 72 + 4 + 28, undefined);

              A.store.Bool(ptr + 472 + 8 + 72 + 4 + 32 + 16, false);
              A.store.Ref(ptr + 472 + 8 + 72 + 4 + 32 + 0, undefined);
              A.store.Ref(ptr + 472 + 8 + 72 + 4 + 32 + 4, undefined);
              A.store.Ref(ptr + 472 + 8 + 72 + 4 + 32 + 8, undefined);
              A.store.Ref(ptr + 472 + 8 + 72 + 4 + 32 + 12, undefined);
              A.store.Ref(ptr + 472 + 8 + 72 + 56, undefined);
              A.store.Ref(ptr + 472 + 8 + 72 + 60, undefined);
              A.store.Ref(ptr + 472 + 8 + 72 + 64, undefined);
              A.store.Ref(ptr + 472 + 8 + 72 + 68, undefined);
              A.store.Ref(ptr + 472 + 8 + 72 + 72, undefined);
              A.store.Ref(ptr + 472 + 8 + 72 + 76, undefined);
              A.store.Ref(ptr + 472 + 8 + 72 + 80, undefined);
              A.store.Ref(ptr + 472 + 8 + 72 + 84, undefined);
              A.store.Bool(ptr + 472 + 8 + 72 + 110, false);
              A.store.Bool(ptr + 472 + 8 + 72 + 88, false);
              A.store.Ref(ptr + 472 + 8 + 72 + 92, undefined);
              A.store.Ref(ptr + 472 + 8 + 72 + 96, undefined);
              A.store.Ref(ptr + 472 + 8 + 72 + 100, undefined);
              A.store.Ref(ptr + 472 + 8 + 72 + 104, undefined);
              A.store.Bool(ptr + 472 + 8 + 72 + 111, false);
              A.store.Bool(ptr + 472 + 8 + 72 + 108, false);
              A.store.Bool(ptr + 472 + 8 + 72 + 112, false);
              A.store.Bool(ptr + 472 + 8 + 72 + 109, false);
            } else {
              A.store.Bool(ptr + 472 + 8 + 72 + 113, true);
              A.store.Ref(ptr + 472 + 8 + 72 + 0, x["VPN"]["IPsec"]["EAP"]["AnonymousIdentity"]);

              if (typeof x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"] === "undefined") {
                A.store.Bool(ptr + 472 + 8 + 72 + 4 + 49, false);
                A.store.Ref(ptr + 472 + 8 + 72 + 4 + 0, undefined);

                A.store.Bool(ptr + 472 + 8 + 72 + 4 + 4 + 16, false);
                A.store.Ref(ptr + 472 + 8 + 72 + 4 + 4 + 0, undefined);
                A.store.Ref(ptr + 472 + 8 + 72 + 4 + 4 + 4, undefined);
                A.store.Ref(ptr + 472 + 8 + 72 + 4 + 4 + 8, undefined);
                A.store.Ref(ptr + 472 + 8 + 72 + 4 + 4 + 12, undefined);
                A.store.Ref(ptr + 472 + 8 + 72 + 4 + 24, undefined);
                A.store.Ref(ptr + 472 + 8 + 72 + 4 + 28, undefined);

                A.store.Bool(ptr + 472 + 8 + 72 + 4 + 32 + 16, false);
                A.store.Ref(ptr + 472 + 8 + 72 + 4 + 32 + 0, undefined);
                A.store.Ref(ptr + 472 + 8 + 72 + 4 + 32 + 4, undefined);
                A.store.Ref(ptr + 472 + 8 + 72 + 4 + 32 + 8, undefined);
                A.store.Ref(ptr + 472 + 8 + 72 + 4 + 32 + 12, undefined);
              } else {
                A.store.Bool(ptr + 472 + 8 + 72 + 4 + 49, true);
                A.store.Ref(ptr + 472 + 8 + 72 + 4 + 0, x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]);

                if (typeof x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"] === "undefined") {
                  A.store.Bool(ptr + 472 + 8 + 72 + 4 + 4 + 16, false);
                  A.store.Ref(ptr + 472 + 8 + 72 + 4 + 4 + 0, undefined);
                  A.store.Ref(ptr + 472 + 8 + 72 + 4 + 4 + 4, undefined);
                  A.store.Ref(ptr + 472 + 8 + 72 + 4 + 4 + 8, undefined);
                  A.store.Ref(ptr + 472 + 8 + 72 + 4 + 4 + 12, undefined);
                } else {
                  A.store.Bool(ptr + 472 + 8 + 72 + 4 + 4 + 16, true);
                  A.store.Ref(
                    ptr + 472 + 8 + 72 + 4 + 4 + 0,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]
                  );
                  A.store.Ref(
                    ptr + 472 + 8 + 72 + 4 + 4 + 4,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]
                  );
                  A.store.Ref(
                    ptr + 472 + 8 + 72 + 4 + 4 + 8,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]
                  );
                  A.store.Ref(
                    ptr + 472 + 8 + 72 + 4 + 4 + 12,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]
                  );
                }
                A.store.Ref(ptr + 472 + 8 + 72 + 4 + 24, x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCAPEMs"]);
                A.store.Ref(ptr + 472 + 8 + 72 + 4 + 28, x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"]);

                if (typeof x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"] === "undefined") {
                  A.store.Bool(ptr + 472 + 8 + 72 + 4 + 32 + 16, false);
                  A.store.Ref(ptr + 472 + 8 + 72 + 4 + 32 + 0, undefined);
                  A.store.Ref(ptr + 472 + 8 + 72 + 4 + 32 + 4, undefined);
                  A.store.Ref(ptr + 472 + 8 + 72 + 4 + 32 + 8, undefined);
                  A.store.Ref(ptr + 472 + 8 + 72 + 4 + 32 + 12, undefined);
                } else {
                  A.store.Bool(ptr + 472 + 8 + 72 + 4 + 32 + 16, true);
                  A.store.Ref(
                    ptr + 472 + 8 + 72 + 4 + 32 + 0,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]
                  );
                  A.store.Ref(
                    ptr + 472 + 8 + 72 + 4 + 32 + 4,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]
                  );
                  A.store.Ref(
                    ptr + 472 + 8 + 72 + 4 + 32 + 8,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]
                  );
                  A.store.Ref(
                    ptr + 472 + 8 + 72 + 4 + 32 + 12,
                    x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]
                  );
                }
              }
              A.store.Ref(ptr + 472 + 8 + 72 + 56, x["VPN"]["IPsec"]["EAP"]["ClientCertPKCS11Id"]);
              A.store.Ref(ptr + 472 + 8 + 72 + 60, x["VPN"]["IPsec"]["EAP"]["ClientCertProvisioningProfileId"]);
              A.store.Ref(ptr + 472 + 8 + 72 + 64, x["VPN"]["IPsec"]["EAP"]["ClientCertRef"]);
              A.store.Ref(ptr + 472 + 8 + 72 + 68, x["VPN"]["IPsec"]["EAP"]["ClientCertType"]);
              A.store.Ref(ptr + 472 + 8 + 72 + 72, x["VPN"]["IPsec"]["EAP"]["Identity"]);
              A.store.Ref(ptr + 472 + 8 + 72 + 76, x["VPN"]["IPsec"]["EAP"]["Inner"]);
              A.store.Ref(ptr + 472 + 8 + 72 + 80, x["VPN"]["IPsec"]["EAP"]["Outer"]);
              A.store.Ref(ptr + 472 + 8 + 72 + 84, x["VPN"]["IPsec"]["EAP"]["Password"]);
              A.store.Bool(ptr + 472 + 8 + 72 + 110, "SaveCredentials" in x["VPN"]["IPsec"]["EAP"] ? true : false);
              A.store.Bool(ptr + 472 + 8 + 72 + 88, x["VPN"]["IPsec"]["EAP"]["SaveCredentials"] ? true : false);
              A.store.Ref(ptr + 472 + 8 + 72 + 92, x["VPN"]["IPsec"]["EAP"]["ServerCAPEMs"]);
              A.store.Ref(ptr + 472 + 8 + 72 + 96, x["VPN"]["IPsec"]["EAP"]["ServerCARefs"]);
              A.store.Ref(ptr + 472 + 8 + 72 + 100, x["VPN"]["IPsec"]["EAP"]["SubjectMatch"]);
              A.store.Ref(ptr + 472 + 8 + 72 + 104, x["VPN"]["IPsec"]["EAP"]["TLSVersionMax"]);
              A.store.Bool(
                ptr + 472 + 8 + 72 + 111,
                "UseProactiveKeyCaching" in x["VPN"]["IPsec"]["EAP"] ? true : false
              );
              A.store.Bool(ptr + 472 + 8 + 72 + 108, x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"] ? true : false);
              A.store.Bool(ptr + 472 + 8 + 72 + 112, "UseSystemCAs" in x["VPN"]["IPsec"]["EAP"] ? true : false);
              A.store.Bool(ptr + 472 + 8 + 72 + 109, x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"] ? true : false);
            }
            A.store.Ref(ptr + 472 + 8 + 188, x["VPN"]["IPsec"]["Group"]);
            A.store.Bool(ptr + 472 + 8 + 234, "IKEVersion" in x["VPN"]["IPsec"] ? true : false);
            A.store.Int32(
              ptr + 472 + 8 + 192,
              x["VPN"]["IPsec"]["IKEVersion"] === undefined ? 0 : (x["VPN"]["IPsec"]["IKEVersion"] as number)
            );
            A.store.Ref(ptr + 472 + 8 + 196, x["VPN"]["IPsec"]["LocalIdentity"]);
            A.store.Ref(ptr + 472 + 8 + 200, x["VPN"]["IPsec"]["PSK"]);
            A.store.Ref(ptr + 472 + 8 + 204, x["VPN"]["IPsec"]["RemoteIdentity"]);
            A.store.Bool(ptr + 472 + 8 + 235, "SaveCredentials" in x["VPN"]["IPsec"] ? true : false);
            A.store.Bool(ptr + 472 + 8 + 208, x["VPN"]["IPsec"]["SaveCredentials"] ? true : false);
            A.store.Ref(ptr + 472 + 8 + 212, x["VPN"]["IPsec"]["ServerCAPEMs"]);
            A.store.Ref(ptr + 472 + 8 + 216, x["VPN"]["IPsec"]["ServerCARefs"]);

            if (typeof x["VPN"]["IPsec"]["XAUTH"] === "undefined") {
              A.store.Bool(ptr + 472 + 8 + 220 + 13, false);
              A.store.Ref(ptr + 472 + 8 + 220 + 0, undefined);
              A.store.Bool(ptr + 472 + 8 + 220 + 12, false);
              A.store.Bool(ptr + 472 + 8 + 220 + 4, false);
              A.store.Ref(ptr + 472 + 8 + 220 + 8, undefined);
            } else {
              A.store.Bool(ptr + 472 + 8 + 220 + 13, true);
              A.store.Ref(ptr + 472 + 8 + 220 + 0, x["VPN"]["IPsec"]["XAUTH"]["Password"]);
              A.store.Bool(ptr + 472 + 8 + 220 + 12, "SaveCredentials" in x["VPN"]["IPsec"]["XAUTH"] ? true : false);
              A.store.Bool(ptr + 472 + 8 + 220 + 4, x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"] ? true : false);
              A.store.Ref(ptr + 472 + 8 + 220 + 8, x["VPN"]["IPsec"]["XAUTH"]["Username"]);
            }
          }

          if (typeof x["VPN"]["L2TP"] === "undefined") {
            A.store.Bool(ptr + 472 + 248 + 18, false);
            A.store.Bool(ptr + 472 + 248 + 16, false);
            A.store.Bool(ptr + 472 + 248 + 0, false);
            A.store.Ref(ptr + 472 + 248 + 4, undefined);
            A.store.Bool(ptr + 472 + 248 + 17, false);
            A.store.Bool(ptr + 472 + 248 + 8, false);
            A.store.Ref(ptr + 472 + 248 + 12, undefined);
          } else {
            A.store.Bool(ptr + 472 + 248 + 18, true);
            A.store.Bool(ptr + 472 + 248 + 16, "LcpEchoDisabled" in x["VPN"]["L2TP"] ? true : false);
            A.store.Bool(ptr + 472 + 248 + 0, x["VPN"]["L2TP"]["LcpEchoDisabled"] ? true : false);
            A.store.Ref(ptr + 472 + 248 + 4, x["VPN"]["L2TP"]["Password"]);
            A.store.Bool(ptr + 472 + 248 + 17, "SaveCredentials" in x["VPN"]["L2TP"] ? true : false);
            A.store.Bool(ptr + 472 + 248 + 8, x["VPN"]["L2TP"]["SaveCredentials"] ? true : false);
            A.store.Ref(ptr + 472 + 248 + 12, x["VPN"]["L2TP"]["Username"]);
          }

          if (typeof x["VPN"]["OpenVPN"] === "undefined") {
            A.store.Bool(ptr + 472 + 268 + 218, false);
            A.store.Ref(ptr + 472 + 268 + 0, undefined);
            A.store.Ref(ptr + 472 + 268 + 4, undefined);
            A.store.Bool(ptr + 472 + 268 + 209, false);
            A.store.Bool(ptr + 472 + 268 + 8, false);
            A.store.Ref(ptr + 472 + 268 + 12, undefined);
            A.store.Ref(ptr + 472 + 268 + 16, undefined);

            A.store.Bool(ptr + 472 + 268 + 20 + 49, false);
            A.store.Ref(ptr + 472 + 268 + 20 + 0, undefined);

            A.store.Bool(ptr + 472 + 268 + 20 + 4 + 16, false);
            A.store.Ref(ptr + 472 + 268 + 20 + 4 + 0, undefined);
            A.store.Ref(ptr + 472 + 268 + 20 + 4 + 4, undefined);
            A.store.Ref(ptr + 472 + 268 + 20 + 4 + 8, undefined);
            A.store.Ref(ptr + 472 + 268 + 20 + 4 + 12, undefined);
            A.store.Ref(ptr + 472 + 268 + 20 + 24, undefined);
            A.store.Ref(ptr + 472 + 268 + 20 + 28, undefined);

            A.store.Bool(ptr + 472 + 268 + 20 + 32 + 16, false);
            A.store.Ref(ptr + 472 + 268 + 20 + 32 + 0, undefined);
            A.store.Ref(ptr + 472 + 268 + 20 + 32 + 4, undefined);
            A.store.Ref(ptr + 472 + 268 + 20 + 32 + 8, undefined);
            A.store.Ref(ptr + 472 + 268 + 20 + 32 + 12, undefined);
            A.store.Ref(ptr + 472 + 268 + 72, undefined);
            A.store.Ref(ptr + 472 + 268 + 76, undefined);
            A.store.Ref(ptr + 472 + 268 + 80, undefined);
            A.store.Ref(ptr + 472 + 268 + 84, undefined);
            A.store.Bool(ptr + 472 + 268 + 210, false);
            A.store.Bool(ptr + 472 + 268 + 88, false);
            A.store.Ref(ptr + 472 + 268 + 92, undefined);
            A.store.Bool(ptr + 472 + 268 + 211, false);
            A.store.Bool(ptr + 472 + 268 + 96, false);
            A.store.Ref(ptr + 472 + 268 + 100, undefined);
            A.store.Ref(ptr + 472 + 268 + 104, undefined);
            A.store.Ref(ptr + 472 + 268 + 108, undefined);
            A.store.Ref(ptr + 472 + 268 + 112, undefined);
            A.store.Bool(ptr + 472 + 268 + 212, false);
            A.store.Int32(ptr + 472 + 268 + 116, 0);
            A.store.Ref(ptr + 472 + 268 + 120, undefined);
            A.store.Bool(ptr + 472 + 268 + 213, false);
            A.store.Bool(ptr + 472 + 268 + 124, false);
            A.store.Ref(ptr + 472 + 268 + 128, undefined);
            A.store.Ref(ptr + 472 + 268 + 132, undefined);
            A.store.Ref(ptr + 472 + 268 + 136, undefined);
            A.store.Bool(ptr + 472 + 268 + 214, false);
            A.store.Int32(ptr + 472 + 268 + 140, 0);
            A.store.Bool(ptr + 472 + 268 + 215, false);
            A.store.Bool(ptr + 472 + 268 + 144, false);
            A.store.Ref(ptr + 472 + 268 + 148, undefined);
            A.store.Ref(ptr + 472 + 268 + 152, undefined);
            A.store.Ref(ptr + 472 + 268 + 156, undefined);
            A.store.Bool(ptr + 472 + 268 + 216, false);
            A.store.Int32(ptr + 472 + 268 + 160, 0);
            A.store.Bool(ptr + 472 + 268 + 217, false);
            A.store.Int32(ptr + 472 + 268 + 164, 0);
            A.store.Ref(ptr + 472 + 268 + 168, undefined);
            A.store.Ref(ptr + 472 + 268 + 172, undefined);
            A.store.Ref(ptr + 472 + 268 + 176, undefined);
            A.store.Ref(ptr + 472 + 268 + 180, undefined);
            A.store.Ref(ptr + 472 + 268 + 184, undefined);
            A.store.Ref(ptr + 472 + 268 + 188, undefined);
            A.store.Ref(ptr + 472 + 268 + 192, undefined);
            A.store.Ref(ptr + 472 + 268 + 196, undefined);

            A.store.Bool(ptr + 472 + 268 + 200 + 8, false);
            A.store.Ref(ptr + 472 + 268 + 200 + 0, undefined);
            A.store.Ref(ptr + 472 + 268 + 200 + 4, undefined);
          } else {
            A.store.Bool(ptr + 472 + 268 + 218, true);
            A.store.Ref(ptr + 472 + 268 + 0, x["VPN"]["OpenVPN"]["Auth"]);
            A.store.Ref(ptr + 472 + 268 + 4, x["VPN"]["OpenVPN"]["AuthRetry"]);
            A.store.Bool(ptr + 472 + 268 + 209, "AuthNoCache" in x["VPN"]["OpenVPN"] ? true : false);
            A.store.Bool(ptr + 472 + 268 + 8, x["VPN"]["OpenVPN"]["AuthNoCache"] ? true : false);
            A.store.Ref(ptr + 472 + 268 + 12, x["VPN"]["OpenVPN"]["Cipher"]);
            A.store.Ref(ptr + 472 + 268 + 16, x["VPN"]["OpenVPN"]["ClientCertPKCS11Id"]);

            if (typeof x["VPN"]["OpenVPN"]["ClientCertPattern"] === "undefined") {
              A.store.Bool(ptr + 472 + 268 + 20 + 49, false);
              A.store.Ref(ptr + 472 + 268 + 20 + 0, undefined);

              A.store.Bool(ptr + 472 + 268 + 20 + 4 + 16, false);
              A.store.Ref(ptr + 472 + 268 + 20 + 4 + 0, undefined);
              A.store.Ref(ptr + 472 + 268 + 20 + 4 + 4, undefined);
              A.store.Ref(ptr + 472 + 268 + 20 + 4 + 8, undefined);
              A.store.Ref(ptr + 472 + 268 + 20 + 4 + 12, undefined);
              A.store.Ref(ptr + 472 + 268 + 20 + 24, undefined);
              A.store.Ref(ptr + 472 + 268 + 20 + 28, undefined);

              A.store.Bool(ptr + 472 + 268 + 20 + 32 + 16, false);
              A.store.Ref(ptr + 472 + 268 + 20 + 32 + 0, undefined);
              A.store.Ref(ptr + 472 + 268 + 20 + 32 + 4, undefined);
              A.store.Ref(ptr + 472 + 268 + 20 + 32 + 8, undefined);
              A.store.Ref(ptr + 472 + 268 + 20 + 32 + 12, undefined);
            } else {
              A.store.Bool(ptr + 472 + 268 + 20 + 49, true);
              A.store.Ref(ptr + 472 + 268 + 20 + 0, x["VPN"]["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"]);

              if (typeof x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"] === "undefined") {
                A.store.Bool(ptr + 472 + 268 + 20 + 4 + 16, false);
                A.store.Ref(ptr + 472 + 268 + 20 + 4 + 0, undefined);
                A.store.Ref(ptr + 472 + 268 + 20 + 4 + 4, undefined);
                A.store.Ref(ptr + 472 + 268 + 20 + 4 + 8, undefined);
                A.store.Ref(ptr + 472 + 268 + 20 + 4 + 12, undefined);
              } else {
                A.store.Bool(ptr + 472 + 268 + 20 + 4 + 16, true);
                A.store.Ref(
                  ptr + 472 + 268 + 20 + 4 + 0,
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"]
                );
                A.store.Ref(
                  ptr + 472 + 268 + 20 + 4 + 4,
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"]
                );
                A.store.Ref(
                  ptr + 472 + 268 + 20 + 4 + 8,
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"]
                );
                A.store.Ref(
                  ptr + 472 + 268 + 20 + 4 + 12,
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]
                );
              }
              A.store.Ref(ptr + 472 + 268 + 20 + 24, x["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCAPEMs"]);
              A.store.Ref(ptr + 472 + 268 + 20 + 28, x["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCARef"]);

              if (typeof x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"] === "undefined") {
                A.store.Bool(ptr + 472 + 268 + 20 + 32 + 16, false);
                A.store.Ref(ptr + 472 + 268 + 20 + 32 + 0, undefined);
                A.store.Ref(ptr + 472 + 268 + 20 + 32 + 4, undefined);
                A.store.Ref(ptr + 472 + 268 + 20 + 32 + 8, undefined);
                A.store.Ref(ptr + 472 + 268 + 20 + 32 + 12, undefined);
              } else {
                A.store.Bool(ptr + 472 + 268 + 20 + 32 + 16, true);
                A.store.Ref(
                  ptr + 472 + 268 + 20 + 32 + 0,
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"]
                );
                A.store.Ref(
                  ptr + 472 + 268 + 20 + 32 + 4,
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"]
                );
                A.store.Ref(
                  ptr + 472 + 268 + 20 + 32 + 8,
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"]
                );
                A.store.Ref(
                  ptr + 472 + 268 + 20 + 32 + 12,
                  x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]
                );
              }
            }
            A.store.Ref(ptr + 472 + 268 + 72, x["VPN"]["OpenVPN"]["ClientCertProvisioningProfileId"]);
            A.store.Ref(ptr + 472 + 268 + 76, x["VPN"]["OpenVPN"]["ClientCertRef"]);
            A.store.Ref(ptr + 472 + 268 + 80, x["VPN"]["OpenVPN"]["ClientCertType"]);
            A.store.Ref(ptr + 472 + 268 + 84, x["VPN"]["OpenVPN"]["CompLZO"]);
            A.store.Bool(ptr + 472 + 268 + 210, "CompNoAdapt" in x["VPN"]["OpenVPN"] ? true : false);
            A.store.Bool(ptr + 472 + 268 + 88, x["VPN"]["OpenVPN"]["CompNoAdapt"] ? true : false);
            A.store.Ref(ptr + 472 + 268 + 92, x["VPN"]["OpenVPN"]["ExtraHosts"]);
            A.store.Bool(ptr + 472 + 268 + 211, "IgnoreDefaultRoute" in x["VPN"]["OpenVPN"] ? true : false);
            A.store.Bool(ptr + 472 + 268 + 96, x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"] ? true : false);
            A.store.Ref(ptr + 472 + 268 + 100, x["VPN"]["OpenVPN"]["KeyDirection"]);
            A.store.Ref(ptr + 472 + 268 + 104, x["VPN"]["OpenVPN"]["NsCertType"]);
            A.store.Ref(ptr + 472 + 268 + 108, x["VPN"]["OpenVPN"]["OTP"]);
            A.store.Ref(ptr + 472 + 268 + 112, x["VPN"]["OpenVPN"]["Password"]);
            A.store.Bool(ptr + 472 + 268 + 212, "Port" in x["VPN"]["OpenVPN"] ? true : false);
            A.store.Int32(
              ptr + 472 + 268 + 116,
              x["VPN"]["OpenVPN"]["Port"] === undefined ? 0 : (x["VPN"]["OpenVPN"]["Port"] as number)
            );
            A.store.Ref(ptr + 472 + 268 + 120, x["VPN"]["OpenVPN"]["Proto"]);
            A.store.Bool(ptr + 472 + 268 + 213, "PushPeerInfo" in x["VPN"]["OpenVPN"] ? true : false);
            A.store.Bool(ptr + 472 + 268 + 124, x["VPN"]["OpenVPN"]["PushPeerInfo"] ? true : false);
            A.store.Ref(ptr + 472 + 268 + 128, x["VPN"]["OpenVPN"]["RemoteCertEKU"]);
            A.store.Ref(ptr + 472 + 268 + 132, x["VPN"]["OpenVPN"]["RemoteCertKU"]);
            A.store.Ref(ptr + 472 + 268 + 136, x["VPN"]["OpenVPN"]["RemoteCertTLS"]);
            A.store.Bool(ptr + 472 + 268 + 214, "RenegSec" in x["VPN"]["OpenVPN"] ? true : false);
            A.store.Int32(
              ptr + 472 + 268 + 140,
              x["VPN"]["OpenVPN"]["RenegSec"] === undefined ? 0 : (x["VPN"]["OpenVPN"]["RenegSec"] as number)
            );
            A.store.Bool(ptr + 472 + 268 + 215, "SaveCredentials" in x["VPN"]["OpenVPN"] ? true : false);
            A.store.Bool(ptr + 472 + 268 + 144, x["VPN"]["OpenVPN"]["SaveCredentials"] ? true : false);
            A.store.Ref(ptr + 472 + 268 + 148, x["VPN"]["OpenVPN"]["ServerCAPEMs"]);
            A.store.Ref(ptr + 472 + 268 + 152, x["VPN"]["OpenVPN"]["ServerCARefs"]);
            A.store.Ref(ptr + 472 + 268 + 156, x["VPN"]["OpenVPN"]["ServerCertRef"]);
            A.store.Bool(ptr + 472 + 268 + 216, "ServerPollTimeout" in x["VPN"]["OpenVPN"] ? true : false);
            A.store.Int32(
              ptr + 472 + 268 + 160,
              x["VPN"]["OpenVPN"]["ServerPollTimeout"] === undefined
                ? 0
                : (x["VPN"]["OpenVPN"]["ServerPollTimeout"] as number)
            );
            A.store.Bool(ptr + 472 + 268 + 217, "Shaper" in x["VPN"]["OpenVPN"] ? true : false);
            A.store.Int32(
              ptr + 472 + 268 + 164,
              x["VPN"]["OpenVPN"]["Shaper"] === undefined ? 0 : (x["VPN"]["OpenVPN"]["Shaper"] as number)
            );
            A.store.Ref(ptr + 472 + 268 + 168, x["VPN"]["OpenVPN"]["StaticChallenge"]);
            A.store.Ref(ptr + 472 + 268 + 172, x["VPN"]["OpenVPN"]["TLSAuthContents"]);
            A.store.Ref(ptr + 472 + 268 + 176, x["VPN"]["OpenVPN"]["TLSRemote"]);
            A.store.Ref(ptr + 472 + 268 + 180, x["VPN"]["OpenVPN"]["TLSVersionMin"]);
            A.store.Ref(ptr + 472 + 268 + 184, x["VPN"]["OpenVPN"]["UserAuthenticationType"]);
            A.store.Ref(ptr + 472 + 268 + 188, x["VPN"]["OpenVPN"]["Username"]);
            A.store.Ref(ptr + 472 + 268 + 192, x["VPN"]["OpenVPN"]["Verb"]);
            A.store.Ref(ptr + 472 + 268 + 196, x["VPN"]["OpenVPN"]["VerifyHash"]);

            if (typeof x["VPN"]["OpenVPN"]["VerifyX509"] === "undefined") {
              A.store.Bool(ptr + 472 + 268 + 200 + 8, false);
              A.store.Ref(ptr + 472 + 268 + 200 + 0, undefined);
              A.store.Ref(ptr + 472 + 268 + 200 + 4, undefined);
            } else {
              A.store.Bool(ptr + 472 + 268 + 200 + 8, true);
              A.store.Ref(ptr + 472 + 268 + 200 + 0, x["VPN"]["OpenVPN"]["VerifyX509"]["Name"]);
              A.store.Ref(ptr + 472 + 268 + 200 + 4, x["VPN"]["OpenVPN"]["VerifyX509"]["Type"]);
            }
          }

          if (typeof x["VPN"]["ThirdPartyVPN"] === "undefined") {
            A.store.Bool(ptr + 472 + 488 + 8, false);
            A.store.Ref(ptr + 472 + 488 + 0, undefined);
            A.store.Ref(ptr + 472 + 488 + 4, undefined);
          } else {
            A.store.Bool(ptr + 472 + 488 + 8, true);
            A.store.Ref(ptr + 472 + 488 + 0, x["VPN"]["ThirdPartyVPN"]["ExtensionID"]);
            A.store.Ref(ptr + 472 + 488 + 4, x["VPN"]["ThirdPartyVPN"]["ProviderName"]);
          }
          A.store.Ref(ptr + 472 + 500, x["VPN"]["Type"]);
        }

        if (typeof x["WiFi"] === "undefined") {
          A.store.Bool(ptr + 980 + 161, false);
          A.store.Bool(ptr + 980 + 156, false);
          A.store.Bool(ptr + 980 + 0, false);
          A.store.Bool(ptr + 980 + 157, false);
          A.store.Bool(ptr + 980 + 1, false);
          A.store.Ref(ptr + 980 + 4, undefined);

          A.store.Bool(ptr + 980 + 8 + 113, false);
          A.store.Ref(ptr + 980 + 8 + 0, undefined);

          A.store.Bool(ptr + 980 + 8 + 4 + 49, false);
          A.store.Ref(ptr + 980 + 8 + 4 + 0, undefined);

          A.store.Bool(ptr + 980 + 8 + 4 + 4 + 16, false);
          A.store.Ref(ptr + 980 + 8 + 4 + 4 + 0, undefined);
          A.store.Ref(ptr + 980 + 8 + 4 + 4 + 4, undefined);
          A.store.Ref(ptr + 980 + 8 + 4 + 4 + 8, undefined);
          A.store.Ref(ptr + 980 + 8 + 4 + 4 + 12, undefined);
          A.store.Ref(ptr + 980 + 8 + 4 + 24, undefined);
          A.store.Ref(ptr + 980 + 8 + 4 + 28, undefined);

          A.store.Bool(ptr + 980 + 8 + 4 + 32 + 16, false);
          A.store.Ref(ptr + 980 + 8 + 4 + 32 + 0, undefined);
          A.store.Ref(ptr + 980 + 8 + 4 + 32 + 4, undefined);
          A.store.Ref(ptr + 980 + 8 + 4 + 32 + 8, undefined);
          A.store.Ref(ptr + 980 + 8 + 4 + 32 + 12, undefined);
          A.store.Ref(ptr + 980 + 8 + 56, undefined);
          A.store.Ref(ptr + 980 + 8 + 60, undefined);
          A.store.Ref(ptr + 980 + 8 + 64, undefined);
          A.store.Ref(ptr + 980 + 8 + 68, undefined);
          A.store.Ref(ptr + 980 + 8 + 72, undefined);
          A.store.Ref(ptr + 980 + 8 + 76, undefined);
          A.store.Ref(ptr + 980 + 8 + 80, undefined);
          A.store.Ref(ptr + 980 + 8 + 84, undefined);
          A.store.Bool(ptr + 980 + 8 + 110, false);
          A.store.Bool(ptr + 980 + 8 + 88, false);
          A.store.Ref(ptr + 980 + 8 + 92, undefined);
          A.store.Ref(ptr + 980 + 8 + 96, undefined);
          A.store.Ref(ptr + 980 + 8 + 100, undefined);
          A.store.Ref(ptr + 980 + 8 + 104, undefined);
          A.store.Bool(ptr + 980 + 8 + 111, false);
          A.store.Bool(ptr + 980 + 8 + 108, false);
          A.store.Bool(ptr + 980 + 8 + 112, false);
          A.store.Bool(ptr + 980 + 8 + 109, false);
          A.store.Bool(ptr + 980 + 158, false);
          A.store.Int32(ptr + 980 + 124, 0);
          A.store.Ref(ptr + 980 + 128, undefined);
          A.store.Ref(ptr + 980 + 132, undefined);
          A.store.Bool(ptr + 980 + 159, false);
          A.store.Bool(ptr + 980 + 136, false);
          A.store.Ref(ptr + 980 + 140, undefined);
          A.store.Ref(ptr + 980 + 144, undefined);
          A.store.Ref(ptr + 980 + 148, undefined);
          A.store.Bool(ptr + 980 + 160, false);
          A.store.Int32(ptr + 980 + 152, 0);
        } else {
          A.store.Bool(ptr + 980 + 161, true);
          A.store.Bool(ptr + 980 + 156, "AllowGatewayARPPolling" in x["WiFi"] ? true : false);
          A.store.Bool(ptr + 980 + 0, x["WiFi"]["AllowGatewayARPPolling"] ? true : false);
          A.store.Bool(ptr + 980 + 157, "AutoConnect" in x["WiFi"] ? true : false);
          A.store.Bool(ptr + 980 + 1, x["WiFi"]["AutoConnect"] ? true : false);
          A.store.Ref(ptr + 980 + 4, x["WiFi"]["BSSID"]);

          if (typeof x["WiFi"]["EAP"] === "undefined") {
            A.store.Bool(ptr + 980 + 8 + 113, false);
            A.store.Ref(ptr + 980 + 8 + 0, undefined);

            A.store.Bool(ptr + 980 + 8 + 4 + 49, false);
            A.store.Ref(ptr + 980 + 8 + 4 + 0, undefined);

            A.store.Bool(ptr + 980 + 8 + 4 + 4 + 16, false);
            A.store.Ref(ptr + 980 + 8 + 4 + 4 + 0, undefined);
            A.store.Ref(ptr + 980 + 8 + 4 + 4 + 4, undefined);
            A.store.Ref(ptr + 980 + 8 + 4 + 4 + 8, undefined);
            A.store.Ref(ptr + 980 + 8 + 4 + 4 + 12, undefined);
            A.store.Ref(ptr + 980 + 8 + 4 + 24, undefined);
            A.store.Ref(ptr + 980 + 8 + 4 + 28, undefined);

            A.store.Bool(ptr + 980 + 8 + 4 + 32 + 16, false);
            A.store.Ref(ptr + 980 + 8 + 4 + 32 + 0, undefined);
            A.store.Ref(ptr + 980 + 8 + 4 + 32 + 4, undefined);
            A.store.Ref(ptr + 980 + 8 + 4 + 32 + 8, undefined);
            A.store.Ref(ptr + 980 + 8 + 4 + 32 + 12, undefined);
            A.store.Ref(ptr + 980 + 8 + 56, undefined);
            A.store.Ref(ptr + 980 + 8 + 60, undefined);
            A.store.Ref(ptr + 980 + 8 + 64, undefined);
            A.store.Ref(ptr + 980 + 8 + 68, undefined);
            A.store.Ref(ptr + 980 + 8 + 72, undefined);
            A.store.Ref(ptr + 980 + 8 + 76, undefined);
            A.store.Ref(ptr + 980 + 8 + 80, undefined);
            A.store.Ref(ptr + 980 + 8 + 84, undefined);
            A.store.Bool(ptr + 980 + 8 + 110, false);
            A.store.Bool(ptr + 980 + 8 + 88, false);
            A.store.Ref(ptr + 980 + 8 + 92, undefined);
            A.store.Ref(ptr + 980 + 8 + 96, undefined);
            A.store.Ref(ptr + 980 + 8 + 100, undefined);
            A.store.Ref(ptr + 980 + 8 + 104, undefined);
            A.store.Bool(ptr + 980 + 8 + 111, false);
            A.store.Bool(ptr + 980 + 8 + 108, false);
            A.store.Bool(ptr + 980 + 8 + 112, false);
            A.store.Bool(ptr + 980 + 8 + 109, false);
          } else {
            A.store.Bool(ptr + 980 + 8 + 113, true);
            A.store.Ref(ptr + 980 + 8 + 0, x["WiFi"]["EAP"]["AnonymousIdentity"]);

            if (typeof x["WiFi"]["EAP"]["ClientCertPattern"] === "undefined") {
              A.store.Bool(ptr + 980 + 8 + 4 + 49, false);
              A.store.Ref(ptr + 980 + 8 + 4 + 0, undefined);

              A.store.Bool(ptr + 980 + 8 + 4 + 4 + 16, false);
              A.store.Ref(ptr + 980 + 8 + 4 + 4 + 0, undefined);
              A.store.Ref(ptr + 980 + 8 + 4 + 4 + 4, undefined);
              A.store.Ref(ptr + 980 + 8 + 4 + 4 + 8, undefined);
              A.store.Ref(ptr + 980 + 8 + 4 + 4 + 12, undefined);
              A.store.Ref(ptr + 980 + 8 + 4 + 24, undefined);
              A.store.Ref(ptr + 980 + 8 + 4 + 28, undefined);

              A.store.Bool(ptr + 980 + 8 + 4 + 32 + 16, false);
              A.store.Ref(ptr + 980 + 8 + 4 + 32 + 0, undefined);
              A.store.Ref(ptr + 980 + 8 + 4 + 32 + 4, undefined);
              A.store.Ref(ptr + 980 + 8 + 4 + 32 + 8, undefined);
              A.store.Ref(ptr + 980 + 8 + 4 + 32 + 12, undefined);
            } else {
              A.store.Bool(ptr + 980 + 8 + 4 + 49, true);
              A.store.Ref(ptr + 980 + 8 + 4 + 0, x["WiFi"]["EAP"]["ClientCertPattern"]["EnrollmentURI"]);

              if (typeof x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"] === "undefined") {
                A.store.Bool(ptr + 980 + 8 + 4 + 4 + 16, false);
                A.store.Ref(ptr + 980 + 8 + 4 + 4 + 0, undefined);
                A.store.Ref(ptr + 980 + 8 + 4 + 4 + 4, undefined);
                A.store.Ref(ptr + 980 + 8 + 4 + 4 + 8, undefined);
                A.store.Ref(ptr + 980 + 8 + 4 + 4 + 12, undefined);
              } else {
                A.store.Bool(ptr + 980 + 8 + 4 + 4 + 16, true);
                A.store.Ref(ptr + 980 + 8 + 4 + 4 + 0, x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"]);
                A.store.Ref(ptr + 980 + 8 + 4 + 4 + 4, x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"]);
                A.store.Ref(ptr + 980 + 8 + 4 + 4 + 8, x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"]);
                A.store.Ref(
                  ptr + 980 + 8 + 4 + 4 + 12,
                  x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"]
                );
              }
              A.store.Ref(ptr + 980 + 8 + 4 + 24, x["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCAPEMs"]);
              A.store.Ref(ptr + 980 + 8 + 4 + 28, x["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCARef"]);

              if (typeof x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"] === "undefined") {
                A.store.Bool(ptr + 980 + 8 + 4 + 32 + 16, false);
                A.store.Ref(ptr + 980 + 8 + 4 + 32 + 0, undefined);
                A.store.Ref(ptr + 980 + 8 + 4 + 32 + 4, undefined);
                A.store.Ref(ptr + 980 + 8 + 4 + 32 + 8, undefined);
                A.store.Ref(ptr + 980 + 8 + 4 + 32 + 12, undefined);
              } else {
                A.store.Bool(ptr + 980 + 8 + 4 + 32 + 16, true);
                A.store.Ref(ptr + 980 + 8 + 4 + 32 + 0, x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"]);
                A.store.Ref(ptr + 980 + 8 + 4 + 32 + 4, x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"]);
                A.store.Ref(
                  ptr + 980 + 8 + 4 + 32 + 8,
                  x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"]
                );
                A.store.Ref(
                  ptr + 980 + 8 + 4 + 32 + 12,
                  x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"]
                );
              }
            }
            A.store.Ref(ptr + 980 + 8 + 56, x["WiFi"]["EAP"]["ClientCertPKCS11Id"]);
            A.store.Ref(ptr + 980 + 8 + 60, x["WiFi"]["EAP"]["ClientCertProvisioningProfileId"]);
            A.store.Ref(ptr + 980 + 8 + 64, x["WiFi"]["EAP"]["ClientCertRef"]);
            A.store.Ref(ptr + 980 + 8 + 68, x["WiFi"]["EAP"]["ClientCertType"]);
            A.store.Ref(ptr + 980 + 8 + 72, x["WiFi"]["EAP"]["Identity"]);
            A.store.Ref(ptr + 980 + 8 + 76, x["WiFi"]["EAP"]["Inner"]);
            A.store.Ref(ptr + 980 + 8 + 80, x["WiFi"]["EAP"]["Outer"]);
            A.store.Ref(ptr + 980 + 8 + 84, x["WiFi"]["EAP"]["Password"]);
            A.store.Bool(ptr + 980 + 8 + 110, "SaveCredentials" in x["WiFi"]["EAP"] ? true : false);
            A.store.Bool(ptr + 980 + 8 + 88, x["WiFi"]["EAP"]["SaveCredentials"] ? true : false);
            A.store.Ref(ptr + 980 + 8 + 92, x["WiFi"]["EAP"]["ServerCAPEMs"]);
            A.store.Ref(ptr + 980 + 8 + 96, x["WiFi"]["EAP"]["ServerCARefs"]);
            A.store.Ref(ptr + 980 + 8 + 100, x["WiFi"]["EAP"]["SubjectMatch"]);
            A.store.Ref(ptr + 980 + 8 + 104, x["WiFi"]["EAP"]["TLSVersionMax"]);
            A.store.Bool(ptr + 980 + 8 + 111, "UseProactiveKeyCaching" in x["WiFi"]["EAP"] ? true : false);
            A.store.Bool(ptr + 980 + 8 + 108, x["WiFi"]["EAP"]["UseProactiveKeyCaching"] ? true : false);
            A.store.Bool(ptr + 980 + 8 + 112, "UseSystemCAs" in x["WiFi"]["EAP"] ? true : false);
            A.store.Bool(ptr + 980 + 8 + 109, x["WiFi"]["EAP"]["UseSystemCAs"] ? true : false);
          }
          A.store.Bool(ptr + 980 + 158, "Frequency" in x["WiFi"] ? true : false);
          A.store.Int32(ptr + 980 + 124, x["WiFi"]["Frequency"] === undefined ? 0 : (x["WiFi"]["Frequency"] as number));
          A.store.Ref(ptr + 980 + 128, x["WiFi"]["FrequencyList"]);
          A.store.Ref(ptr + 980 + 132, x["WiFi"]["HexSSID"]);
          A.store.Bool(ptr + 980 + 159, "HiddenSSID" in x["WiFi"] ? true : false);
          A.store.Bool(ptr + 980 + 136, x["WiFi"]["HiddenSSID"] ? true : false);
          A.store.Ref(ptr + 980 + 140, x["WiFi"]["Passphrase"]);
          A.store.Ref(ptr + 980 + 144, x["WiFi"]["SSID"]);
          A.store.Ref(ptr + 980 + 148, x["WiFi"]["Security"]);
          A.store.Bool(ptr + 980 + 160, "SignalStrength" in x["WiFi"] ? true : false);
          A.store.Int32(
            ptr + 980 + 152,
            x["WiFi"]["SignalStrength"] === undefined ? 0 : (x["WiFi"]["SignalStrength"] as number)
          );
        }
      }
    },
    "load_NetworkConfigProperties": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      if (A.load.Bool(ptr + 0 + 219)) {
        x["Cellular"] = {};
        if (A.load.Bool(ptr + 0 + 213)) {
          x["Cellular"]["AutoConnect"] = A.load.Bool(ptr + 0 + 0);
        } else {
          delete x["Cellular"]["AutoConnect"];
        }
        if (A.load.Bool(ptr + 0 + 4 + 28)) {
          x["Cellular"]["APN"] = {};
          x["Cellular"]["APN"]["AccessPointName"] = A.load.Ref(ptr + 0 + 4 + 0, undefined);
          x["Cellular"]["APN"]["Authentication"] = A.load.Ref(ptr + 0 + 4 + 4, undefined);
          x["Cellular"]["APN"]["Language"] = A.load.Ref(ptr + 0 + 4 + 8, undefined);
          x["Cellular"]["APN"]["LocalizedName"] = A.load.Ref(ptr + 0 + 4 + 12, undefined);
          x["Cellular"]["APN"]["Name"] = A.load.Ref(ptr + 0 + 4 + 16, undefined);
          x["Cellular"]["APN"]["Password"] = A.load.Ref(ptr + 0 + 4 + 20, undefined);
          x["Cellular"]["APN"]["Username"] = A.load.Ref(ptr + 0 + 4 + 24, undefined);
        } else {
          delete x["Cellular"]["APN"];
        }
        x["Cellular"]["APNList"] = A.load.Ref(ptr + 0 + 36, undefined);
        x["Cellular"]["ActivationType"] = A.load.Ref(ptr + 0 + 40, undefined);
        x["Cellular"]["ActivationState"] = A.load.Enum(ptr + 0 + 44, [
          "Activated",
          "Activating",
          "NotActivated",
          "PartiallyActivated",
        ]);
        if (A.load.Bool(ptr + 0 + 214)) {
          x["Cellular"]["AllowRoaming"] = A.load.Bool(ptr + 0 + 48);
        } else {
          delete x["Cellular"]["AllowRoaming"];
        }
        x["Cellular"]["ESN"] = A.load.Ref(ptr + 0 + 52, undefined);
        x["Cellular"]["Family"] = A.load.Ref(ptr + 0 + 56, undefined);
        x["Cellular"]["FirmwareRevision"] = A.load.Ref(ptr + 0 + 60, undefined);
        x["Cellular"]["FoundNetworks"] = A.load.Ref(ptr + 0 + 64, undefined);
        x["Cellular"]["HardwareRevision"] = A.load.Ref(ptr + 0 + 68, undefined);
        if (A.load.Bool(ptr + 0 + 72 + 12)) {
          x["Cellular"]["HomeProvider"] = {};
          x["Cellular"]["HomeProvider"]["Name"] = A.load.Ref(ptr + 0 + 72 + 0, undefined);
          x["Cellular"]["HomeProvider"]["Code"] = A.load.Ref(ptr + 0 + 72 + 4, undefined);
          x["Cellular"]["HomeProvider"]["Country"] = A.load.Ref(ptr + 0 + 72 + 8, undefined);
        } else {
          delete x["Cellular"]["HomeProvider"];
        }
        x["Cellular"]["ICCID"] = A.load.Ref(ptr + 0 + 88, undefined);
        x["Cellular"]["IMEI"] = A.load.Ref(ptr + 0 + 92, undefined);
        if (A.load.Bool(ptr + 0 + 96 + 28)) {
          x["Cellular"]["LastGoodAPN"] = {};
          x["Cellular"]["LastGoodAPN"]["AccessPointName"] = A.load.Ref(ptr + 0 + 96 + 0, undefined);
          x["Cellular"]["LastGoodAPN"]["Authentication"] = A.load.Ref(ptr + 0 + 96 + 4, undefined);
          x["Cellular"]["LastGoodAPN"]["Language"] = A.load.Ref(ptr + 0 + 96 + 8, undefined);
          x["Cellular"]["LastGoodAPN"]["LocalizedName"] = A.load.Ref(ptr + 0 + 96 + 12, undefined);
          x["Cellular"]["LastGoodAPN"]["Name"] = A.load.Ref(ptr + 0 + 96 + 16, undefined);
          x["Cellular"]["LastGoodAPN"]["Password"] = A.load.Ref(ptr + 0 + 96 + 20, undefined);
          x["Cellular"]["LastGoodAPN"]["Username"] = A.load.Ref(ptr + 0 + 96 + 24, undefined);
        } else {
          delete x["Cellular"]["LastGoodAPN"];
        }
        x["Cellular"]["Manufacturer"] = A.load.Ref(ptr + 0 + 128, undefined);
        x["Cellular"]["MDN"] = A.load.Ref(ptr + 0 + 132, undefined);
        x["Cellular"]["MEID"] = A.load.Ref(ptr + 0 + 136, undefined);
        x["Cellular"]["MIN"] = A.load.Ref(ptr + 0 + 140, undefined);
        x["Cellular"]["ModelID"] = A.load.Ref(ptr + 0 + 144, undefined);
        x["Cellular"]["NetworkTechnology"] = A.load.Ref(ptr + 0 + 148, undefined);
        if (A.load.Bool(ptr + 0 + 152 + 12)) {
          x["Cellular"]["PaymentPortal"] = {};
          x["Cellular"]["PaymentPortal"]["Method"] = A.load.Ref(ptr + 0 + 152 + 0, undefined);
          x["Cellular"]["PaymentPortal"]["PostData"] = A.load.Ref(ptr + 0 + 152 + 4, undefined);
          x["Cellular"]["PaymentPortal"]["Url"] = A.load.Ref(ptr + 0 + 152 + 8, undefined);
        } else {
          delete x["Cellular"]["PaymentPortal"];
        }
        x["Cellular"]["RoamingState"] = A.load.Ref(ptr + 0 + 168, undefined);
        if (A.load.Bool(ptr + 0 + 215)) {
          x["Cellular"]["Scanning"] = A.load.Bool(ptr + 0 + 172);
        } else {
          delete x["Cellular"]["Scanning"];
        }
        if (A.load.Bool(ptr + 0 + 176 + 12)) {
          x["Cellular"]["ServingOperator"] = {};
          x["Cellular"]["ServingOperator"]["Name"] = A.load.Ref(ptr + 0 + 176 + 0, undefined);
          x["Cellular"]["ServingOperator"]["Code"] = A.load.Ref(ptr + 0 + 176 + 4, undefined);
          x["Cellular"]["ServingOperator"]["Country"] = A.load.Ref(ptr + 0 + 176 + 8, undefined);
        } else {
          delete x["Cellular"]["ServingOperator"];
        }
        if (A.load.Bool(ptr + 0 + 192 + 14)) {
          x["Cellular"]["SIMLockStatus"] = {};
          x["Cellular"]["SIMLockStatus"]["LockType"] = A.load.Ref(ptr + 0 + 192 + 0, undefined);
          if (A.load.Bool(ptr + 0 + 192 + 12)) {
            x["Cellular"]["SIMLockStatus"]["LockEnabled"] = A.load.Bool(ptr + 0 + 192 + 4);
          } else {
            delete x["Cellular"]["SIMLockStatus"]["LockEnabled"];
          }
          if (A.load.Bool(ptr + 0 + 192 + 13)) {
            x["Cellular"]["SIMLockStatus"]["RetriesLeft"] = A.load.Int32(ptr + 0 + 192 + 8);
          } else {
            delete x["Cellular"]["SIMLockStatus"]["RetriesLeft"];
          }
        } else {
          delete x["Cellular"]["SIMLockStatus"];
        }
        if (A.load.Bool(ptr + 0 + 216)) {
          x["Cellular"]["SIMPresent"] = A.load.Bool(ptr + 0 + 207);
        } else {
          delete x["Cellular"]["SIMPresent"];
        }
        if (A.load.Bool(ptr + 0 + 217)) {
          x["Cellular"]["SignalStrength"] = A.load.Int32(ptr + 0 + 208);
        } else {
          delete x["Cellular"]["SignalStrength"];
        }
        if (A.load.Bool(ptr + 0 + 218)) {
          x["Cellular"]["SupportNetworkScan"] = A.load.Bool(ptr + 0 + 212);
        } else {
          delete x["Cellular"]["SupportNetworkScan"];
        }
      } else {
        delete x["Cellular"];
      }
      if (A.load.Bool(ptr + 220 + 123)) {
        x["Ethernet"] = {};
        if (A.load.Bool(ptr + 220 + 122)) {
          x["Ethernet"]["AutoConnect"] = A.load.Bool(ptr + 220 + 0);
        } else {
          delete x["Ethernet"]["AutoConnect"];
        }
        x["Ethernet"]["Authentication"] = A.load.Ref(ptr + 220 + 4, undefined);
        if (A.load.Bool(ptr + 220 + 8 + 113)) {
          x["Ethernet"]["EAP"] = {};
          x["Ethernet"]["EAP"]["AnonymousIdentity"] = A.load.Ref(ptr + 220 + 8 + 0, undefined);
          if (A.load.Bool(ptr + 220 + 8 + 4 + 49)) {
            x["Ethernet"]["EAP"]["ClientCertPattern"] = {};
            x["Ethernet"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(ptr + 220 + 8 + 4 + 0, undefined);
            if (A.load.Bool(ptr + 220 + 8 + 4 + 4 + 16)) {
              x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"] = {};
              x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(
                ptr + 220 + 8 + 4 + 4 + 0,
                undefined
              );
              x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(
                ptr + 220 + 8 + 4 + 4 + 4,
                undefined
              );
              x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(
                ptr + 220 + 8 + 4 + 4 + 8,
                undefined
              );
              x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(
                ptr + 220 + 8 + 4 + 4 + 12,
                undefined
              );
            } else {
              delete x["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"];
            }
            x["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(ptr + 220 + 8 + 4 + 24, undefined);
            x["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(ptr + 220 + 8 + 4 + 28, undefined);
            if (A.load.Bool(ptr + 220 + 8 + 4 + 32 + 16)) {
              x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"] = {};
              x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(
                ptr + 220 + 8 + 4 + 32 + 0,
                undefined
              );
              x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(
                ptr + 220 + 8 + 4 + 32 + 4,
                undefined
              );
              x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(
                ptr + 220 + 8 + 4 + 32 + 8,
                undefined
              );
              x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(
                ptr + 220 + 8 + 4 + 32 + 12,
                undefined
              );
            } else {
              delete x["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"];
            }
          } else {
            delete x["Ethernet"]["EAP"]["ClientCertPattern"];
          }
          x["Ethernet"]["EAP"]["ClientCertPKCS11Id"] = A.load.Ref(ptr + 220 + 8 + 56, undefined);
          x["Ethernet"]["EAP"]["ClientCertProvisioningProfileId"] = A.load.Ref(ptr + 220 + 8 + 60, undefined);
          x["Ethernet"]["EAP"]["ClientCertRef"] = A.load.Ref(ptr + 220 + 8 + 64, undefined);
          x["Ethernet"]["EAP"]["ClientCertType"] = A.load.Ref(ptr + 220 + 8 + 68, undefined);
          x["Ethernet"]["EAP"]["Identity"] = A.load.Ref(ptr + 220 + 8 + 72, undefined);
          x["Ethernet"]["EAP"]["Inner"] = A.load.Ref(ptr + 220 + 8 + 76, undefined);
          x["Ethernet"]["EAP"]["Outer"] = A.load.Ref(ptr + 220 + 8 + 80, undefined);
          x["Ethernet"]["EAP"]["Password"] = A.load.Ref(ptr + 220 + 8 + 84, undefined);
          if (A.load.Bool(ptr + 220 + 8 + 110)) {
            x["Ethernet"]["EAP"]["SaveCredentials"] = A.load.Bool(ptr + 220 + 8 + 88);
          } else {
            delete x["Ethernet"]["EAP"]["SaveCredentials"];
          }
          x["Ethernet"]["EAP"]["ServerCAPEMs"] = A.load.Ref(ptr + 220 + 8 + 92, undefined);
          x["Ethernet"]["EAP"]["ServerCARefs"] = A.load.Ref(ptr + 220 + 8 + 96, undefined);
          x["Ethernet"]["EAP"]["SubjectMatch"] = A.load.Ref(ptr + 220 + 8 + 100, undefined);
          x["Ethernet"]["EAP"]["TLSVersionMax"] = A.load.Ref(ptr + 220 + 8 + 104, undefined);
          if (A.load.Bool(ptr + 220 + 8 + 111)) {
            x["Ethernet"]["EAP"]["UseProactiveKeyCaching"] = A.load.Bool(ptr + 220 + 8 + 108);
          } else {
            delete x["Ethernet"]["EAP"]["UseProactiveKeyCaching"];
          }
          if (A.load.Bool(ptr + 220 + 8 + 112)) {
            x["Ethernet"]["EAP"]["UseSystemCAs"] = A.load.Bool(ptr + 220 + 8 + 109);
          } else {
            delete x["Ethernet"]["EAP"]["UseSystemCAs"];
          }
        } else {
          delete x["Ethernet"]["EAP"];
        }
      } else {
        delete x["Ethernet"];
      }
      x["GUID"] = A.load.Ref(ptr + 344, undefined);
      x["IPAddressConfigType"] = A.load.Enum(ptr + 348, ["DHCP", "Static"]);
      x["Name"] = A.load.Ref(ptr + 352, undefined);
      x["NameServersConfigType"] = A.load.Enum(ptr + 356, ["DHCP", "Static"]);
      if (A.load.Bool(ptr + 1142)) {
        x["Priority"] = A.load.Int32(ptr + 360);
      } else {
        delete x["Priority"];
      }
      if (A.load.Bool(ptr + 364 + 60)) {
        x["ProxySettings"] = {};
        x["ProxySettings"]["Type"] = A.load.Enum(ptr + 364 + 0, ["Direct", "Manual", "PAC", "WPAD"]);
        if (A.load.Bool(ptr + 364 + 4 + 46)) {
          x["ProxySettings"]["Manual"] = {};
          if (A.load.Bool(ptr + 364 + 4 + 0 + 9)) {
            x["ProxySettings"]["Manual"]["HTTPProxy"] = {};
            x["ProxySettings"]["Manual"]["HTTPProxy"]["Host"] = A.load.Ref(ptr + 364 + 4 + 0 + 0, undefined);
            if (A.load.Bool(ptr + 364 + 4 + 0 + 8)) {
              x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"] = A.load.Int32(ptr + 364 + 4 + 0 + 4);
            } else {
              delete x["ProxySettings"]["Manual"]["HTTPProxy"]["Port"];
            }
          } else {
            delete x["ProxySettings"]["Manual"]["HTTPProxy"];
          }
          if (A.load.Bool(ptr + 364 + 4 + 12 + 9)) {
            x["ProxySettings"]["Manual"]["SecureHTTPProxy"] = {};
            x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Host"] = A.load.Ref(ptr + 364 + 4 + 12 + 0, undefined);
            if (A.load.Bool(ptr + 364 + 4 + 12 + 8)) {
              x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"] = A.load.Int32(ptr + 364 + 4 + 12 + 4);
            } else {
              delete x["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"];
            }
          } else {
            delete x["ProxySettings"]["Manual"]["SecureHTTPProxy"];
          }
          if (A.load.Bool(ptr + 364 + 4 + 24 + 9)) {
            x["ProxySettings"]["Manual"]["FTPProxy"] = {};
            x["ProxySettings"]["Manual"]["FTPProxy"]["Host"] = A.load.Ref(ptr + 364 + 4 + 24 + 0, undefined);
            if (A.load.Bool(ptr + 364 + 4 + 24 + 8)) {
              x["ProxySettings"]["Manual"]["FTPProxy"]["Port"] = A.load.Int32(ptr + 364 + 4 + 24 + 4);
            } else {
              delete x["ProxySettings"]["Manual"]["FTPProxy"]["Port"];
            }
          } else {
            delete x["ProxySettings"]["Manual"]["FTPProxy"];
          }
          if (A.load.Bool(ptr + 364 + 4 + 36 + 9)) {
            x["ProxySettings"]["Manual"]["SOCKS"] = {};
            x["ProxySettings"]["Manual"]["SOCKS"]["Host"] = A.load.Ref(ptr + 364 + 4 + 36 + 0, undefined);
            if (A.load.Bool(ptr + 364 + 4 + 36 + 8)) {
              x["ProxySettings"]["Manual"]["SOCKS"]["Port"] = A.load.Int32(ptr + 364 + 4 + 36 + 4);
            } else {
              delete x["ProxySettings"]["Manual"]["SOCKS"]["Port"];
            }
          } else {
            delete x["ProxySettings"]["Manual"]["SOCKS"];
          }
        } else {
          delete x["ProxySettings"]["Manual"];
        }
        x["ProxySettings"]["ExcludeDomains"] = A.load.Ref(ptr + 364 + 52, undefined);
        x["ProxySettings"]["PAC"] = A.load.Ref(ptr + 364 + 56, undefined);
      } else {
        delete x["ProxySettings"];
      }
      if (A.load.Bool(ptr + 428 + 37)) {
        x["StaticIPConfig"] = {};
        x["StaticIPConfig"]["Gateway"] = A.load.Ref(ptr + 428 + 0, undefined);
        x["StaticIPConfig"]["IPAddress"] = A.load.Ref(ptr + 428 + 4, undefined);
        x["StaticIPConfig"]["ExcludedRoutes"] = A.load.Ref(ptr + 428 + 8, undefined);
        x["StaticIPConfig"]["IncludedRoutes"] = A.load.Ref(ptr + 428 + 12, undefined);
        x["StaticIPConfig"]["NameServers"] = A.load.Ref(ptr + 428 + 16, undefined);
        x["StaticIPConfig"]["SearchDomains"] = A.load.Ref(ptr + 428 + 20, undefined);
        if (A.load.Bool(ptr + 428 + 36)) {
          x["StaticIPConfig"]["RoutingPrefix"] = A.load.Int32(ptr + 428 + 24);
        } else {
          delete x["StaticIPConfig"]["RoutingPrefix"];
        }
        x["StaticIPConfig"]["Type"] = A.load.Ref(ptr + 428 + 28, undefined);
        x["StaticIPConfig"]["WebProxyAutoDiscoveryUrl"] = A.load.Ref(ptr + 428 + 32, undefined);
      } else {
        delete x["StaticIPConfig"];
      }
      x["Type"] = A.load.Enum(ptr + 468, ["All", "Cellular", "Ethernet", "Tether", "VPN", "Wireless", "WiFi"]);
      if (A.load.Bool(ptr + 472 + 505)) {
        x["VPN"] = {};
        if (A.load.Bool(ptr + 472 + 504)) {
          x["VPN"]["AutoConnect"] = A.load.Bool(ptr + 472 + 0);
        } else {
          delete x["VPN"]["AutoConnect"];
        }
        x["VPN"]["Host"] = A.load.Ref(ptr + 472 + 4, undefined);
        if (A.load.Bool(ptr + 472 + 8 + 236)) {
          x["VPN"]["IPsec"] = {};
          x["VPN"]["IPsec"]["AuthenticationType"] = A.load.Ref(ptr + 472 + 8 + 0, undefined);
          if (A.load.Bool(ptr + 472 + 8 + 4 + 49)) {
            x["VPN"]["IPsec"]["ClientCertPattern"] = {};
            x["VPN"]["IPsec"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(ptr + 472 + 8 + 4 + 0, undefined);
            if (A.load.Bool(ptr + 472 + 8 + 4 + 4 + 16)) {
              x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"] = {};
              x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(
                ptr + 472 + 8 + 4 + 4 + 0,
                undefined
              );
              x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(
                ptr + 472 + 8 + 4 + 4 + 4,
                undefined
              );
              x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(
                ptr + 472 + 8 + 4 + 4 + 8,
                undefined
              );
              x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(
                ptr + 472 + 8 + 4 + 4 + 12,
                undefined
              );
            } else {
              delete x["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"];
            }
            x["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(ptr + 472 + 8 + 4 + 24, undefined);
            x["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(ptr + 472 + 8 + 4 + 28, undefined);
            if (A.load.Bool(ptr + 472 + 8 + 4 + 32 + 16)) {
              x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"] = {};
              x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(
                ptr + 472 + 8 + 4 + 32 + 0,
                undefined
              );
              x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(
                ptr + 472 + 8 + 4 + 32 + 4,
                undefined
              );
              x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(
                ptr + 472 + 8 + 4 + 32 + 8,
                undefined
              );
              x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(
                ptr + 472 + 8 + 4 + 32 + 12,
                undefined
              );
            } else {
              delete x["VPN"]["IPsec"]["ClientCertPattern"]["Subject"];
            }
          } else {
            delete x["VPN"]["IPsec"]["ClientCertPattern"];
          }
          x["VPN"]["IPsec"]["ClientCertPKCS11Id"] = A.load.Ref(ptr + 472 + 8 + 56, undefined);
          x["VPN"]["IPsec"]["ClientCertProvisioningProfileId"] = A.load.Ref(ptr + 472 + 8 + 60, undefined);
          x["VPN"]["IPsec"]["ClientCertRef"] = A.load.Ref(ptr + 472 + 8 + 64, undefined);
          x["VPN"]["IPsec"]["ClientCertType"] = A.load.Ref(ptr + 472 + 8 + 68, undefined);
          if (A.load.Bool(ptr + 472 + 8 + 72 + 113)) {
            x["VPN"]["IPsec"]["EAP"] = {};
            x["VPN"]["IPsec"]["EAP"]["AnonymousIdentity"] = A.load.Ref(ptr + 472 + 8 + 72 + 0, undefined);
            if (A.load.Bool(ptr + 472 + 8 + 72 + 4 + 49)) {
              x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"] = {};
              x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(
                ptr + 472 + 8 + 72 + 4 + 0,
                undefined
              );
              if (A.load.Bool(ptr + 472 + 8 + 72 + 4 + 4 + 16)) {
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"] = {};
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(
                  ptr + 472 + 8 + 72 + 4 + 4 + 0,
                  undefined
                );
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(
                  ptr + 472 + 8 + 72 + 4 + 4 + 4,
                  undefined
                );
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(
                  ptr + 472 + 8 + 72 + 4 + 4 + 8,
                  undefined
                );
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(
                  ptr + 472 + 8 + 72 + 4 + 4 + 12,
                  undefined
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"];
              }
              x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(
                ptr + 472 + 8 + 72 + 4 + 24,
                undefined
              );
              x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(
                ptr + 472 + 8 + 72 + 4 + 28,
                undefined
              );
              if (A.load.Bool(ptr + 472 + 8 + 72 + 4 + 32 + 16)) {
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"] = {};
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(
                  ptr + 472 + 8 + 72 + 4 + 32 + 0,
                  undefined
                );
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(
                  ptr + 472 + 8 + 72 + 4 + 32 + 4,
                  undefined
                );
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(
                  ptr + 472 + 8 + 72 + 4 + 32 + 8,
                  undefined
                );
                x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(
                  ptr + 472 + 8 + 72 + 4 + 32 + 12,
                  undefined
                );
              } else {
                delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"];
              }
            } else {
              delete x["VPN"]["IPsec"]["EAP"]["ClientCertPattern"];
            }
            x["VPN"]["IPsec"]["EAP"]["ClientCertPKCS11Id"] = A.load.Ref(ptr + 472 + 8 + 72 + 56, undefined);
            x["VPN"]["IPsec"]["EAP"]["ClientCertProvisioningProfileId"] = A.load.Ref(
              ptr + 472 + 8 + 72 + 60,
              undefined
            );
            x["VPN"]["IPsec"]["EAP"]["ClientCertRef"] = A.load.Ref(ptr + 472 + 8 + 72 + 64, undefined);
            x["VPN"]["IPsec"]["EAP"]["ClientCertType"] = A.load.Ref(ptr + 472 + 8 + 72 + 68, undefined);
            x["VPN"]["IPsec"]["EAP"]["Identity"] = A.load.Ref(ptr + 472 + 8 + 72 + 72, undefined);
            x["VPN"]["IPsec"]["EAP"]["Inner"] = A.load.Ref(ptr + 472 + 8 + 72 + 76, undefined);
            x["VPN"]["IPsec"]["EAP"]["Outer"] = A.load.Ref(ptr + 472 + 8 + 72 + 80, undefined);
            x["VPN"]["IPsec"]["EAP"]["Password"] = A.load.Ref(ptr + 472 + 8 + 72 + 84, undefined);
            if (A.load.Bool(ptr + 472 + 8 + 72 + 110)) {
              x["VPN"]["IPsec"]["EAP"]["SaveCredentials"] = A.load.Bool(ptr + 472 + 8 + 72 + 88);
            } else {
              delete x["VPN"]["IPsec"]["EAP"]["SaveCredentials"];
            }
            x["VPN"]["IPsec"]["EAP"]["ServerCAPEMs"] = A.load.Ref(ptr + 472 + 8 + 72 + 92, undefined);
            x["VPN"]["IPsec"]["EAP"]["ServerCARefs"] = A.load.Ref(ptr + 472 + 8 + 72 + 96, undefined);
            x["VPN"]["IPsec"]["EAP"]["SubjectMatch"] = A.load.Ref(ptr + 472 + 8 + 72 + 100, undefined);
            x["VPN"]["IPsec"]["EAP"]["TLSVersionMax"] = A.load.Ref(ptr + 472 + 8 + 72 + 104, undefined);
            if (A.load.Bool(ptr + 472 + 8 + 72 + 111)) {
              x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"] = A.load.Bool(ptr + 472 + 8 + 72 + 108);
            } else {
              delete x["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"];
            }
            if (A.load.Bool(ptr + 472 + 8 + 72 + 112)) {
              x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"] = A.load.Bool(ptr + 472 + 8 + 72 + 109);
            } else {
              delete x["VPN"]["IPsec"]["EAP"]["UseSystemCAs"];
            }
          } else {
            delete x["VPN"]["IPsec"]["EAP"];
          }
          x["VPN"]["IPsec"]["Group"] = A.load.Ref(ptr + 472 + 8 + 188, undefined);
          if (A.load.Bool(ptr + 472 + 8 + 234)) {
            x["VPN"]["IPsec"]["IKEVersion"] = A.load.Int32(ptr + 472 + 8 + 192);
          } else {
            delete x["VPN"]["IPsec"]["IKEVersion"];
          }
          x["VPN"]["IPsec"]["LocalIdentity"] = A.load.Ref(ptr + 472 + 8 + 196, undefined);
          x["VPN"]["IPsec"]["PSK"] = A.load.Ref(ptr + 472 + 8 + 200, undefined);
          x["VPN"]["IPsec"]["RemoteIdentity"] = A.load.Ref(ptr + 472 + 8 + 204, undefined);
          if (A.load.Bool(ptr + 472 + 8 + 235)) {
            x["VPN"]["IPsec"]["SaveCredentials"] = A.load.Bool(ptr + 472 + 8 + 208);
          } else {
            delete x["VPN"]["IPsec"]["SaveCredentials"];
          }
          x["VPN"]["IPsec"]["ServerCAPEMs"] = A.load.Ref(ptr + 472 + 8 + 212, undefined);
          x["VPN"]["IPsec"]["ServerCARefs"] = A.load.Ref(ptr + 472 + 8 + 216, undefined);
          if (A.load.Bool(ptr + 472 + 8 + 220 + 13)) {
            x["VPN"]["IPsec"]["XAUTH"] = {};
            x["VPN"]["IPsec"]["XAUTH"]["Password"] = A.load.Ref(ptr + 472 + 8 + 220 + 0, undefined);
            if (A.load.Bool(ptr + 472 + 8 + 220 + 12)) {
              x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"] = A.load.Bool(ptr + 472 + 8 + 220 + 4);
            } else {
              delete x["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"];
            }
            x["VPN"]["IPsec"]["XAUTH"]["Username"] = A.load.Ref(ptr + 472 + 8 + 220 + 8, undefined);
          } else {
            delete x["VPN"]["IPsec"]["XAUTH"];
          }
        } else {
          delete x["VPN"]["IPsec"];
        }
        if (A.load.Bool(ptr + 472 + 248 + 18)) {
          x["VPN"]["L2TP"] = {};
          if (A.load.Bool(ptr + 472 + 248 + 16)) {
            x["VPN"]["L2TP"]["LcpEchoDisabled"] = A.load.Bool(ptr + 472 + 248 + 0);
          } else {
            delete x["VPN"]["L2TP"]["LcpEchoDisabled"];
          }
          x["VPN"]["L2TP"]["Password"] = A.load.Ref(ptr + 472 + 248 + 4, undefined);
          if (A.load.Bool(ptr + 472 + 248 + 17)) {
            x["VPN"]["L2TP"]["SaveCredentials"] = A.load.Bool(ptr + 472 + 248 + 8);
          } else {
            delete x["VPN"]["L2TP"]["SaveCredentials"];
          }
          x["VPN"]["L2TP"]["Username"] = A.load.Ref(ptr + 472 + 248 + 12, undefined);
        } else {
          delete x["VPN"]["L2TP"];
        }
        if (A.load.Bool(ptr + 472 + 268 + 218)) {
          x["VPN"]["OpenVPN"] = {};
          x["VPN"]["OpenVPN"]["Auth"] = A.load.Ref(ptr + 472 + 268 + 0, undefined);
          x["VPN"]["OpenVPN"]["AuthRetry"] = A.load.Ref(ptr + 472 + 268 + 4, undefined);
          if (A.load.Bool(ptr + 472 + 268 + 209)) {
            x["VPN"]["OpenVPN"]["AuthNoCache"] = A.load.Bool(ptr + 472 + 268 + 8);
          } else {
            delete x["VPN"]["OpenVPN"]["AuthNoCache"];
          }
          x["VPN"]["OpenVPN"]["Cipher"] = A.load.Ref(ptr + 472 + 268 + 12, undefined);
          x["VPN"]["OpenVPN"]["ClientCertPKCS11Id"] = A.load.Ref(ptr + 472 + 268 + 16, undefined);
          if (A.load.Bool(ptr + 472 + 268 + 20 + 49)) {
            x["VPN"]["OpenVPN"]["ClientCertPattern"] = {};
            x["VPN"]["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(ptr + 472 + 268 + 20 + 0, undefined);
            if (A.load.Bool(ptr + 472 + 268 + 20 + 4 + 16)) {
              x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"] = {};
              x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(
                ptr + 472 + 268 + 20 + 4 + 0,
                undefined
              );
              x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(
                ptr + 472 + 268 + 20 + 4 + 4,
                undefined
              );
              x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(
                ptr + 472 + 268 + 20 + 4 + 8,
                undefined
              );
              x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(
                ptr + 472 + 268 + 20 + 4 + 12,
                undefined
              );
            } else {
              delete x["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"];
            }
            x["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(ptr + 472 + 268 + 20 + 24, undefined);
            x["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(ptr + 472 + 268 + 20 + 28, undefined);
            if (A.load.Bool(ptr + 472 + 268 + 20 + 32 + 16)) {
              x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"] = {};
              x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(
                ptr + 472 + 268 + 20 + 32 + 0,
                undefined
              );
              x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(
                ptr + 472 + 268 + 20 + 32 + 4,
                undefined
              );
              x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(
                ptr + 472 + 268 + 20 + 32 + 8,
                undefined
              );
              x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(
                ptr + 472 + 268 + 20 + 32 + 12,
                undefined
              );
            } else {
              delete x["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"];
            }
          } else {
            delete x["VPN"]["OpenVPN"]["ClientCertPattern"];
          }
          x["VPN"]["OpenVPN"]["ClientCertProvisioningProfileId"] = A.load.Ref(ptr + 472 + 268 + 72, undefined);
          x["VPN"]["OpenVPN"]["ClientCertRef"] = A.load.Ref(ptr + 472 + 268 + 76, undefined);
          x["VPN"]["OpenVPN"]["ClientCertType"] = A.load.Ref(ptr + 472 + 268 + 80, undefined);
          x["VPN"]["OpenVPN"]["CompLZO"] = A.load.Ref(ptr + 472 + 268 + 84, undefined);
          if (A.load.Bool(ptr + 472 + 268 + 210)) {
            x["VPN"]["OpenVPN"]["CompNoAdapt"] = A.load.Bool(ptr + 472 + 268 + 88);
          } else {
            delete x["VPN"]["OpenVPN"]["CompNoAdapt"];
          }
          x["VPN"]["OpenVPN"]["ExtraHosts"] = A.load.Ref(ptr + 472 + 268 + 92, undefined);
          if (A.load.Bool(ptr + 472 + 268 + 211)) {
            x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"] = A.load.Bool(ptr + 472 + 268 + 96);
          } else {
            delete x["VPN"]["OpenVPN"]["IgnoreDefaultRoute"];
          }
          x["VPN"]["OpenVPN"]["KeyDirection"] = A.load.Ref(ptr + 472 + 268 + 100, undefined);
          x["VPN"]["OpenVPN"]["NsCertType"] = A.load.Ref(ptr + 472 + 268 + 104, undefined);
          x["VPN"]["OpenVPN"]["OTP"] = A.load.Ref(ptr + 472 + 268 + 108, undefined);
          x["VPN"]["OpenVPN"]["Password"] = A.load.Ref(ptr + 472 + 268 + 112, undefined);
          if (A.load.Bool(ptr + 472 + 268 + 212)) {
            x["VPN"]["OpenVPN"]["Port"] = A.load.Int32(ptr + 472 + 268 + 116);
          } else {
            delete x["VPN"]["OpenVPN"]["Port"];
          }
          x["VPN"]["OpenVPN"]["Proto"] = A.load.Ref(ptr + 472 + 268 + 120, undefined);
          if (A.load.Bool(ptr + 472 + 268 + 213)) {
            x["VPN"]["OpenVPN"]["PushPeerInfo"] = A.load.Bool(ptr + 472 + 268 + 124);
          } else {
            delete x["VPN"]["OpenVPN"]["PushPeerInfo"];
          }
          x["VPN"]["OpenVPN"]["RemoteCertEKU"] = A.load.Ref(ptr + 472 + 268 + 128, undefined);
          x["VPN"]["OpenVPN"]["RemoteCertKU"] = A.load.Ref(ptr + 472 + 268 + 132, undefined);
          x["VPN"]["OpenVPN"]["RemoteCertTLS"] = A.load.Ref(ptr + 472 + 268 + 136, undefined);
          if (A.load.Bool(ptr + 472 + 268 + 214)) {
            x["VPN"]["OpenVPN"]["RenegSec"] = A.load.Int32(ptr + 472 + 268 + 140);
          } else {
            delete x["VPN"]["OpenVPN"]["RenegSec"];
          }
          if (A.load.Bool(ptr + 472 + 268 + 215)) {
            x["VPN"]["OpenVPN"]["SaveCredentials"] = A.load.Bool(ptr + 472 + 268 + 144);
          } else {
            delete x["VPN"]["OpenVPN"]["SaveCredentials"];
          }
          x["VPN"]["OpenVPN"]["ServerCAPEMs"] = A.load.Ref(ptr + 472 + 268 + 148, undefined);
          x["VPN"]["OpenVPN"]["ServerCARefs"] = A.load.Ref(ptr + 472 + 268 + 152, undefined);
          x["VPN"]["OpenVPN"]["ServerCertRef"] = A.load.Ref(ptr + 472 + 268 + 156, undefined);
          if (A.load.Bool(ptr + 472 + 268 + 216)) {
            x["VPN"]["OpenVPN"]["ServerPollTimeout"] = A.load.Int32(ptr + 472 + 268 + 160);
          } else {
            delete x["VPN"]["OpenVPN"]["ServerPollTimeout"];
          }
          if (A.load.Bool(ptr + 472 + 268 + 217)) {
            x["VPN"]["OpenVPN"]["Shaper"] = A.load.Int32(ptr + 472 + 268 + 164);
          } else {
            delete x["VPN"]["OpenVPN"]["Shaper"];
          }
          x["VPN"]["OpenVPN"]["StaticChallenge"] = A.load.Ref(ptr + 472 + 268 + 168, undefined);
          x["VPN"]["OpenVPN"]["TLSAuthContents"] = A.load.Ref(ptr + 472 + 268 + 172, undefined);
          x["VPN"]["OpenVPN"]["TLSRemote"] = A.load.Ref(ptr + 472 + 268 + 176, undefined);
          x["VPN"]["OpenVPN"]["TLSVersionMin"] = A.load.Ref(ptr + 472 + 268 + 180, undefined);
          x["VPN"]["OpenVPN"]["UserAuthenticationType"] = A.load.Ref(ptr + 472 + 268 + 184, undefined);
          x["VPN"]["OpenVPN"]["Username"] = A.load.Ref(ptr + 472 + 268 + 188, undefined);
          x["VPN"]["OpenVPN"]["Verb"] = A.load.Ref(ptr + 472 + 268 + 192, undefined);
          x["VPN"]["OpenVPN"]["VerifyHash"] = A.load.Ref(ptr + 472 + 268 + 196, undefined);
          if (A.load.Bool(ptr + 472 + 268 + 200 + 8)) {
            x["VPN"]["OpenVPN"]["VerifyX509"] = {};
            x["VPN"]["OpenVPN"]["VerifyX509"]["Name"] = A.load.Ref(ptr + 472 + 268 + 200 + 0, undefined);
            x["VPN"]["OpenVPN"]["VerifyX509"]["Type"] = A.load.Ref(ptr + 472 + 268 + 200 + 4, undefined);
          } else {
            delete x["VPN"]["OpenVPN"]["VerifyX509"];
          }
        } else {
          delete x["VPN"]["OpenVPN"];
        }
        if (A.load.Bool(ptr + 472 + 488 + 8)) {
          x["VPN"]["ThirdPartyVPN"] = {};
          x["VPN"]["ThirdPartyVPN"]["ExtensionID"] = A.load.Ref(ptr + 472 + 488 + 0, undefined);
          x["VPN"]["ThirdPartyVPN"]["ProviderName"] = A.load.Ref(ptr + 472 + 488 + 4, undefined);
        } else {
          delete x["VPN"]["ThirdPartyVPN"];
        }
        x["VPN"]["Type"] = A.load.Ref(ptr + 472 + 500, undefined);
      } else {
        delete x["VPN"];
      }
      if (A.load.Bool(ptr + 980 + 161)) {
        x["WiFi"] = {};
        if (A.load.Bool(ptr + 980 + 156)) {
          x["WiFi"]["AllowGatewayARPPolling"] = A.load.Bool(ptr + 980 + 0);
        } else {
          delete x["WiFi"]["AllowGatewayARPPolling"];
        }
        if (A.load.Bool(ptr + 980 + 157)) {
          x["WiFi"]["AutoConnect"] = A.load.Bool(ptr + 980 + 1);
        } else {
          delete x["WiFi"]["AutoConnect"];
        }
        x["WiFi"]["BSSID"] = A.load.Ref(ptr + 980 + 4, undefined);
        if (A.load.Bool(ptr + 980 + 8 + 113)) {
          x["WiFi"]["EAP"] = {};
          x["WiFi"]["EAP"]["AnonymousIdentity"] = A.load.Ref(ptr + 980 + 8 + 0, undefined);
          if (A.load.Bool(ptr + 980 + 8 + 4 + 49)) {
            x["WiFi"]["EAP"]["ClientCertPattern"] = {};
            x["WiFi"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(ptr + 980 + 8 + 4 + 0, undefined);
            if (A.load.Bool(ptr + 980 + 8 + 4 + 4 + 16)) {
              x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"] = {};
              x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(
                ptr + 980 + 8 + 4 + 4 + 0,
                undefined
              );
              x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(
                ptr + 980 + 8 + 4 + 4 + 4,
                undefined
              );
              x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(
                ptr + 980 + 8 + 4 + 4 + 8,
                undefined
              );
              x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(
                ptr + 980 + 8 + 4 + 4 + 12,
                undefined
              );
            } else {
              delete x["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"];
            }
            x["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(ptr + 980 + 8 + 4 + 24, undefined);
            x["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(ptr + 980 + 8 + 4 + 28, undefined);
            if (A.load.Bool(ptr + 980 + 8 + 4 + 32 + 16)) {
              x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"] = {};
              x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(
                ptr + 980 + 8 + 4 + 32 + 0,
                undefined
              );
              x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(
                ptr + 980 + 8 + 4 + 32 + 4,
                undefined
              );
              x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(
                ptr + 980 + 8 + 4 + 32 + 8,
                undefined
              );
              x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(
                ptr + 980 + 8 + 4 + 32 + 12,
                undefined
              );
            } else {
              delete x["WiFi"]["EAP"]["ClientCertPattern"]["Subject"];
            }
          } else {
            delete x["WiFi"]["EAP"]["ClientCertPattern"];
          }
          x["WiFi"]["EAP"]["ClientCertPKCS11Id"] = A.load.Ref(ptr + 980 + 8 + 56, undefined);
          x["WiFi"]["EAP"]["ClientCertProvisioningProfileId"] = A.load.Ref(ptr + 980 + 8 + 60, undefined);
          x["WiFi"]["EAP"]["ClientCertRef"] = A.load.Ref(ptr + 980 + 8 + 64, undefined);
          x["WiFi"]["EAP"]["ClientCertType"] = A.load.Ref(ptr + 980 + 8 + 68, undefined);
          x["WiFi"]["EAP"]["Identity"] = A.load.Ref(ptr + 980 + 8 + 72, undefined);
          x["WiFi"]["EAP"]["Inner"] = A.load.Ref(ptr + 980 + 8 + 76, undefined);
          x["WiFi"]["EAP"]["Outer"] = A.load.Ref(ptr + 980 + 8 + 80, undefined);
          x["WiFi"]["EAP"]["Password"] = A.load.Ref(ptr + 980 + 8 + 84, undefined);
          if (A.load.Bool(ptr + 980 + 8 + 110)) {
            x["WiFi"]["EAP"]["SaveCredentials"] = A.load.Bool(ptr + 980 + 8 + 88);
          } else {
            delete x["WiFi"]["EAP"]["SaveCredentials"];
          }
          x["WiFi"]["EAP"]["ServerCAPEMs"] = A.load.Ref(ptr + 980 + 8 + 92, undefined);
          x["WiFi"]["EAP"]["ServerCARefs"] = A.load.Ref(ptr + 980 + 8 + 96, undefined);
          x["WiFi"]["EAP"]["SubjectMatch"] = A.load.Ref(ptr + 980 + 8 + 100, undefined);
          x["WiFi"]["EAP"]["TLSVersionMax"] = A.load.Ref(ptr + 980 + 8 + 104, undefined);
          if (A.load.Bool(ptr + 980 + 8 + 111)) {
            x["WiFi"]["EAP"]["UseProactiveKeyCaching"] = A.load.Bool(ptr + 980 + 8 + 108);
          } else {
            delete x["WiFi"]["EAP"]["UseProactiveKeyCaching"];
          }
          if (A.load.Bool(ptr + 980 + 8 + 112)) {
            x["WiFi"]["EAP"]["UseSystemCAs"] = A.load.Bool(ptr + 980 + 8 + 109);
          } else {
            delete x["WiFi"]["EAP"]["UseSystemCAs"];
          }
        } else {
          delete x["WiFi"]["EAP"];
        }
        if (A.load.Bool(ptr + 980 + 158)) {
          x["WiFi"]["Frequency"] = A.load.Int32(ptr + 980 + 124);
        } else {
          delete x["WiFi"]["Frequency"];
        }
        x["WiFi"]["FrequencyList"] = A.load.Ref(ptr + 980 + 128, undefined);
        x["WiFi"]["HexSSID"] = A.load.Ref(ptr + 980 + 132, undefined);
        if (A.load.Bool(ptr + 980 + 159)) {
          x["WiFi"]["HiddenSSID"] = A.load.Bool(ptr + 980 + 136);
        } else {
          delete x["WiFi"]["HiddenSSID"];
        }
        x["WiFi"]["Passphrase"] = A.load.Ref(ptr + 980 + 140, undefined);
        x["WiFi"]["SSID"] = A.load.Ref(ptr + 980 + 144, undefined);
        x["WiFi"]["Security"] = A.load.Ref(ptr + 980 + 148, undefined);
        if (A.load.Bool(ptr + 980 + 160)) {
          x["WiFi"]["SignalStrength"] = A.load.Int32(ptr + 980 + 152);
        } else {
          delete x["WiFi"]["SignalStrength"];
        }
      } else {
        delete x["WiFi"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },

    "store_NetworkFilter": (ptr: Pointer, ref: heap.Ref<any>) => {
      const x = A.H.get<any>(ref);

      if (typeof x === "undefined") {
        A.store.Bool(ptr + 15, false);
        A.store.Enum(ptr + 0, -1);
        A.store.Bool(ptr + 12, false);
        A.store.Bool(ptr + 4, false);
        A.store.Bool(ptr + 13, false);
        A.store.Bool(ptr + 5, false);
        A.store.Bool(ptr + 14, false);
        A.store.Int32(ptr + 8, 0);
      } else {
        A.store.Bool(ptr + 15, true);
        A.store.Enum(
          ptr + 0,
          ["All", "Cellular", "Ethernet", "Tether", "VPN", "Wireless", "WiFi"].indexOf(x["networkType"] as string)
        );
        A.store.Bool(ptr + 12, "visible" in x ? true : false);
        A.store.Bool(ptr + 4, x["visible"] ? true : false);
        A.store.Bool(ptr + 13, "configured" in x ? true : false);
        A.store.Bool(ptr + 5, x["configured"] ? true : false);
        A.store.Bool(ptr + 14, "limit" in x ? true : false);
        A.store.Int32(ptr + 8, x["limit"] === undefined ? 0 : (x["limit"] as number));
      }
    },
    "load_NetworkFilter": (ptr: Pointer, create: heap.Ref<boolean>, ref: heap.Ref<any>): heap.Ref<any> => {
      const x = create === A.H.TRUE ? {} : A.H.get<any>(ref);

      x["networkType"] = A.load.Enum(ptr + 0, ["All", "Cellular", "Ethernet", "Tether", "VPN", "Wireless", "WiFi"]);
      if (A.load.Bool(ptr + 12)) {
        x["visible"] = A.load.Bool(ptr + 4);
      } else {
        delete x["visible"];
      }
      if (A.load.Bool(ptr + 13)) {
        x["configured"] = A.load.Bool(ptr + 5);
      } else {
        delete x["configured"];
      }
      if (A.load.Bool(ptr + 14)) {
        x["limit"] = A.load.Int32(ptr + 8);
      } else {
        delete x["limit"];
      }
      return create === A.H.TRUE ? A.H.push(x) : ref;
    },
    "has_CreateNetwork": (): heap.Ref<boolean> => {
      if (WEBEXT?.networkingPrivate && "createNetwork" in WEBEXT?.networkingPrivate) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_CreateNetwork": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.createNetwork);
    },
    "call_CreateNetwork": (retPtr: Pointer, shared: heap.Ref<boolean>, properties: Pointer): void => {
      const properties_ffi = {};

      if (A.load.Bool(properties + 0 + 219)) {
        properties_ffi["Cellular"] = {};
        if (A.load.Bool(properties + 0 + 213)) {
          properties_ffi["Cellular"]["AutoConnect"] = A.load.Bool(properties + 0 + 0);
        }
        if (A.load.Bool(properties + 0 + 4 + 28)) {
          properties_ffi["Cellular"]["APN"] = {};
          properties_ffi["Cellular"]["APN"]["AccessPointName"] = A.load.Ref(properties + 0 + 4 + 0, undefined);
          properties_ffi["Cellular"]["APN"]["Authentication"] = A.load.Ref(properties + 0 + 4 + 4, undefined);
          properties_ffi["Cellular"]["APN"]["Language"] = A.load.Ref(properties + 0 + 4 + 8, undefined);
          properties_ffi["Cellular"]["APN"]["LocalizedName"] = A.load.Ref(properties + 0 + 4 + 12, undefined);
          properties_ffi["Cellular"]["APN"]["Name"] = A.load.Ref(properties + 0 + 4 + 16, undefined);
          properties_ffi["Cellular"]["APN"]["Password"] = A.load.Ref(properties + 0 + 4 + 20, undefined);
          properties_ffi["Cellular"]["APN"]["Username"] = A.load.Ref(properties + 0 + 4 + 24, undefined);
        }
        properties_ffi["Cellular"]["APNList"] = A.load.Ref(properties + 0 + 36, undefined);
        properties_ffi["Cellular"]["ActivationType"] = A.load.Ref(properties + 0 + 40, undefined);
        properties_ffi["Cellular"]["ActivationState"] = A.load.Enum(properties + 0 + 44, [
          "Activated",
          "Activating",
          "NotActivated",
          "PartiallyActivated",
        ]);
        if (A.load.Bool(properties + 0 + 214)) {
          properties_ffi["Cellular"]["AllowRoaming"] = A.load.Bool(properties + 0 + 48);
        }
        properties_ffi["Cellular"]["ESN"] = A.load.Ref(properties + 0 + 52, undefined);
        properties_ffi["Cellular"]["Family"] = A.load.Ref(properties + 0 + 56, undefined);
        properties_ffi["Cellular"]["FirmwareRevision"] = A.load.Ref(properties + 0 + 60, undefined);
        properties_ffi["Cellular"]["FoundNetworks"] = A.load.Ref(properties + 0 + 64, undefined);
        properties_ffi["Cellular"]["HardwareRevision"] = A.load.Ref(properties + 0 + 68, undefined);
        if (A.load.Bool(properties + 0 + 72 + 12)) {
          properties_ffi["Cellular"]["HomeProvider"] = {};
          properties_ffi["Cellular"]["HomeProvider"]["Name"] = A.load.Ref(properties + 0 + 72 + 0, undefined);
          properties_ffi["Cellular"]["HomeProvider"]["Code"] = A.load.Ref(properties + 0 + 72 + 4, undefined);
          properties_ffi["Cellular"]["HomeProvider"]["Country"] = A.load.Ref(properties + 0 + 72 + 8, undefined);
        }
        properties_ffi["Cellular"]["ICCID"] = A.load.Ref(properties + 0 + 88, undefined);
        properties_ffi["Cellular"]["IMEI"] = A.load.Ref(properties + 0 + 92, undefined);
        if (A.load.Bool(properties + 0 + 96 + 28)) {
          properties_ffi["Cellular"]["LastGoodAPN"] = {};
          properties_ffi["Cellular"]["LastGoodAPN"]["AccessPointName"] = A.load.Ref(properties + 0 + 96 + 0, undefined);
          properties_ffi["Cellular"]["LastGoodAPN"]["Authentication"] = A.load.Ref(properties + 0 + 96 + 4, undefined);
          properties_ffi["Cellular"]["LastGoodAPN"]["Language"] = A.load.Ref(properties + 0 + 96 + 8, undefined);
          properties_ffi["Cellular"]["LastGoodAPN"]["LocalizedName"] = A.load.Ref(properties + 0 + 96 + 12, undefined);
          properties_ffi["Cellular"]["LastGoodAPN"]["Name"] = A.load.Ref(properties + 0 + 96 + 16, undefined);
          properties_ffi["Cellular"]["LastGoodAPN"]["Password"] = A.load.Ref(properties + 0 + 96 + 20, undefined);
          properties_ffi["Cellular"]["LastGoodAPN"]["Username"] = A.load.Ref(properties + 0 + 96 + 24, undefined);
        }
        properties_ffi["Cellular"]["Manufacturer"] = A.load.Ref(properties + 0 + 128, undefined);
        properties_ffi["Cellular"]["MDN"] = A.load.Ref(properties + 0 + 132, undefined);
        properties_ffi["Cellular"]["MEID"] = A.load.Ref(properties + 0 + 136, undefined);
        properties_ffi["Cellular"]["MIN"] = A.load.Ref(properties + 0 + 140, undefined);
        properties_ffi["Cellular"]["ModelID"] = A.load.Ref(properties + 0 + 144, undefined);
        properties_ffi["Cellular"]["NetworkTechnology"] = A.load.Ref(properties + 0 + 148, undefined);
        if (A.load.Bool(properties + 0 + 152 + 12)) {
          properties_ffi["Cellular"]["PaymentPortal"] = {};
          properties_ffi["Cellular"]["PaymentPortal"]["Method"] = A.load.Ref(properties + 0 + 152 + 0, undefined);
          properties_ffi["Cellular"]["PaymentPortal"]["PostData"] = A.load.Ref(properties + 0 + 152 + 4, undefined);
          properties_ffi["Cellular"]["PaymentPortal"]["Url"] = A.load.Ref(properties + 0 + 152 + 8, undefined);
        }
        properties_ffi["Cellular"]["RoamingState"] = A.load.Ref(properties + 0 + 168, undefined);
        if (A.load.Bool(properties + 0 + 215)) {
          properties_ffi["Cellular"]["Scanning"] = A.load.Bool(properties + 0 + 172);
        }
        if (A.load.Bool(properties + 0 + 176 + 12)) {
          properties_ffi["Cellular"]["ServingOperator"] = {};
          properties_ffi["Cellular"]["ServingOperator"]["Name"] = A.load.Ref(properties + 0 + 176 + 0, undefined);
          properties_ffi["Cellular"]["ServingOperator"]["Code"] = A.load.Ref(properties + 0 + 176 + 4, undefined);
          properties_ffi["Cellular"]["ServingOperator"]["Country"] = A.load.Ref(properties + 0 + 176 + 8, undefined);
        }
        if (A.load.Bool(properties + 0 + 192 + 14)) {
          properties_ffi["Cellular"]["SIMLockStatus"] = {};
          properties_ffi["Cellular"]["SIMLockStatus"]["LockType"] = A.load.Ref(properties + 0 + 192 + 0, undefined);
          if (A.load.Bool(properties + 0 + 192 + 12)) {
            properties_ffi["Cellular"]["SIMLockStatus"]["LockEnabled"] = A.load.Bool(properties + 0 + 192 + 4);
          }
          if (A.load.Bool(properties + 0 + 192 + 13)) {
            properties_ffi["Cellular"]["SIMLockStatus"]["RetriesLeft"] = A.load.Int32(properties + 0 + 192 + 8);
          }
        }
        if (A.load.Bool(properties + 0 + 216)) {
          properties_ffi["Cellular"]["SIMPresent"] = A.load.Bool(properties + 0 + 207);
        }
        if (A.load.Bool(properties + 0 + 217)) {
          properties_ffi["Cellular"]["SignalStrength"] = A.load.Int32(properties + 0 + 208);
        }
        if (A.load.Bool(properties + 0 + 218)) {
          properties_ffi["Cellular"]["SupportNetworkScan"] = A.load.Bool(properties + 0 + 212);
        }
      }
      if (A.load.Bool(properties + 220 + 123)) {
        properties_ffi["Ethernet"] = {};
        if (A.load.Bool(properties + 220 + 122)) {
          properties_ffi["Ethernet"]["AutoConnect"] = A.load.Bool(properties + 220 + 0);
        }
        properties_ffi["Ethernet"]["Authentication"] = A.load.Ref(properties + 220 + 4, undefined);
        if (A.load.Bool(properties + 220 + 8 + 113)) {
          properties_ffi["Ethernet"]["EAP"] = {};
          properties_ffi["Ethernet"]["EAP"]["AnonymousIdentity"] = A.load.Ref(properties + 220 + 8 + 0, undefined);
          if (A.load.Bool(properties + 220 + 8 + 4 + 49)) {
            properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"] = {};
            properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(
              properties + 220 + 8 + 4 + 0,
              undefined
            );
            if (A.load.Bool(properties + 220 + 8 + 4 + 4 + 16)) {
              properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"] = {};
              properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(
                properties + 220 + 8 + 4 + 4 + 0,
                undefined
              );
              properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(
                properties + 220 + 8 + 4 + 4 + 4,
                undefined
              );
              properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(
                properties + 220 + 8 + 4 + 4 + 8,
                undefined
              );
              properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(
                properties + 220 + 8 + 4 + 4 + 12,
                undefined
              );
            }
            properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(
              properties + 220 + 8 + 4 + 24,
              undefined
            );
            properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(
              properties + 220 + 8 + 4 + 28,
              undefined
            );
            if (A.load.Bool(properties + 220 + 8 + 4 + 32 + 16)) {
              properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"] = {};
              properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(
                properties + 220 + 8 + 4 + 32 + 0,
                undefined
              );
              properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(
                properties + 220 + 8 + 4 + 32 + 4,
                undefined
              );
              properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(
                properties + 220 + 8 + 4 + 32 + 8,
                undefined
              );
              properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(
                properties + 220 + 8 + 4 + 32 + 12,
                undefined
              );
            }
          }
          properties_ffi["Ethernet"]["EAP"]["ClientCertPKCS11Id"] = A.load.Ref(properties + 220 + 8 + 56, undefined);
          properties_ffi["Ethernet"]["EAP"]["ClientCertProvisioningProfileId"] = A.load.Ref(
            properties + 220 + 8 + 60,
            undefined
          );
          properties_ffi["Ethernet"]["EAP"]["ClientCertRef"] = A.load.Ref(properties + 220 + 8 + 64, undefined);
          properties_ffi["Ethernet"]["EAP"]["ClientCertType"] = A.load.Ref(properties + 220 + 8 + 68, undefined);
          properties_ffi["Ethernet"]["EAP"]["Identity"] = A.load.Ref(properties + 220 + 8 + 72, undefined);
          properties_ffi["Ethernet"]["EAP"]["Inner"] = A.load.Ref(properties + 220 + 8 + 76, undefined);
          properties_ffi["Ethernet"]["EAP"]["Outer"] = A.load.Ref(properties + 220 + 8 + 80, undefined);
          properties_ffi["Ethernet"]["EAP"]["Password"] = A.load.Ref(properties + 220 + 8 + 84, undefined);
          if (A.load.Bool(properties + 220 + 8 + 110)) {
            properties_ffi["Ethernet"]["EAP"]["SaveCredentials"] = A.load.Bool(properties + 220 + 8 + 88);
          }
          properties_ffi["Ethernet"]["EAP"]["ServerCAPEMs"] = A.load.Ref(properties + 220 + 8 + 92, undefined);
          properties_ffi["Ethernet"]["EAP"]["ServerCARefs"] = A.load.Ref(properties + 220 + 8 + 96, undefined);
          properties_ffi["Ethernet"]["EAP"]["SubjectMatch"] = A.load.Ref(properties + 220 + 8 + 100, undefined);
          properties_ffi["Ethernet"]["EAP"]["TLSVersionMax"] = A.load.Ref(properties + 220 + 8 + 104, undefined);
          if (A.load.Bool(properties + 220 + 8 + 111)) {
            properties_ffi["Ethernet"]["EAP"]["UseProactiveKeyCaching"] = A.load.Bool(properties + 220 + 8 + 108);
          }
          if (A.load.Bool(properties + 220 + 8 + 112)) {
            properties_ffi["Ethernet"]["EAP"]["UseSystemCAs"] = A.load.Bool(properties + 220 + 8 + 109);
          }
        }
      }
      properties_ffi["GUID"] = A.load.Ref(properties + 344, undefined);
      properties_ffi["IPAddressConfigType"] = A.load.Enum(properties + 348, ["DHCP", "Static"]);
      properties_ffi["Name"] = A.load.Ref(properties + 352, undefined);
      properties_ffi["NameServersConfigType"] = A.load.Enum(properties + 356, ["DHCP", "Static"]);
      if (A.load.Bool(properties + 1142)) {
        properties_ffi["Priority"] = A.load.Int32(properties + 360);
      }
      if (A.load.Bool(properties + 364 + 60)) {
        properties_ffi["ProxySettings"] = {};
        properties_ffi["ProxySettings"]["Type"] = A.load.Enum(properties + 364 + 0, [
          "Direct",
          "Manual",
          "PAC",
          "WPAD",
        ]);
        if (A.load.Bool(properties + 364 + 4 + 46)) {
          properties_ffi["ProxySettings"]["Manual"] = {};
          if (A.load.Bool(properties + 364 + 4 + 0 + 9)) {
            properties_ffi["ProxySettings"]["Manual"]["HTTPProxy"] = {};
            properties_ffi["ProxySettings"]["Manual"]["HTTPProxy"]["Host"] = A.load.Ref(
              properties + 364 + 4 + 0 + 0,
              undefined
            );
            if (A.load.Bool(properties + 364 + 4 + 0 + 8)) {
              properties_ffi["ProxySettings"]["Manual"]["HTTPProxy"]["Port"] = A.load.Int32(
                properties + 364 + 4 + 0 + 4
              );
            }
          }
          if (A.load.Bool(properties + 364 + 4 + 12 + 9)) {
            properties_ffi["ProxySettings"]["Manual"]["SecureHTTPProxy"] = {};
            properties_ffi["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Host"] = A.load.Ref(
              properties + 364 + 4 + 12 + 0,
              undefined
            );
            if (A.load.Bool(properties + 364 + 4 + 12 + 8)) {
              properties_ffi["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"] = A.load.Int32(
                properties + 364 + 4 + 12 + 4
              );
            }
          }
          if (A.load.Bool(properties + 364 + 4 + 24 + 9)) {
            properties_ffi["ProxySettings"]["Manual"]["FTPProxy"] = {};
            properties_ffi["ProxySettings"]["Manual"]["FTPProxy"]["Host"] = A.load.Ref(
              properties + 364 + 4 + 24 + 0,
              undefined
            );
            if (A.load.Bool(properties + 364 + 4 + 24 + 8)) {
              properties_ffi["ProxySettings"]["Manual"]["FTPProxy"]["Port"] = A.load.Int32(
                properties + 364 + 4 + 24 + 4
              );
            }
          }
          if (A.load.Bool(properties + 364 + 4 + 36 + 9)) {
            properties_ffi["ProxySettings"]["Manual"]["SOCKS"] = {};
            properties_ffi["ProxySettings"]["Manual"]["SOCKS"]["Host"] = A.load.Ref(
              properties + 364 + 4 + 36 + 0,
              undefined
            );
            if (A.load.Bool(properties + 364 + 4 + 36 + 8)) {
              properties_ffi["ProxySettings"]["Manual"]["SOCKS"]["Port"] = A.load.Int32(properties + 364 + 4 + 36 + 4);
            }
          }
        }
        properties_ffi["ProxySettings"]["ExcludeDomains"] = A.load.Ref(properties + 364 + 52, undefined);
        properties_ffi["ProxySettings"]["PAC"] = A.load.Ref(properties + 364 + 56, undefined);
      }
      if (A.load.Bool(properties + 428 + 37)) {
        properties_ffi["StaticIPConfig"] = {};
        properties_ffi["StaticIPConfig"]["Gateway"] = A.load.Ref(properties + 428 + 0, undefined);
        properties_ffi["StaticIPConfig"]["IPAddress"] = A.load.Ref(properties + 428 + 4, undefined);
        properties_ffi["StaticIPConfig"]["ExcludedRoutes"] = A.load.Ref(properties + 428 + 8, undefined);
        properties_ffi["StaticIPConfig"]["IncludedRoutes"] = A.load.Ref(properties + 428 + 12, undefined);
        properties_ffi["StaticIPConfig"]["NameServers"] = A.load.Ref(properties + 428 + 16, undefined);
        properties_ffi["StaticIPConfig"]["SearchDomains"] = A.load.Ref(properties + 428 + 20, undefined);
        if (A.load.Bool(properties + 428 + 36)) {
          properties_ffi["StaticIPConfig"]["RoutingPrefix"] = A.load.Int32(properties + 428 + 24);
        }
        properties_ffi["StaticIPConfig"]["Type"] = A.load.Ref(properties + 428 + 28, undefined);
        properties_ffi["StaticIPConfig"]["WebProxyAutoDiscoveryUrl"] = A.load.Ref(properties + 428 + 32, undefined);
      }
      properties_ffi["Type"] = A.load.Enum(properties + 468, [
        "All",
        "Cellular",
        "Ethernet",
        "Tether",
        "VPN",
        "Wireless",
        "WiFi",
      ]);
      if (A.load.Bool(properties + 472 + 505)) {
        properties_ffi["VPN"] = {};
        if (A.load.Bool(properties + 472 + 504)) {
          properties_ffi["VPN"]["AutoConnect"] = A.load.Bool(properties + 472 + 0);
        }
        properties_ffi["VPN"]["Host"] = A.load.Ref(properties + 472 + 4, undefined);
        if (A.load.Bool(properties + 472 + 8 + 236)) {
          properties_ffi["VPN"]["IPsec"] = {};
          properties_ffi["VPN"]["IPsec"]["AuthenticationType"] = A.load.Ref(properties + 472 + 8 + 0, undefined);
          if (A.load.Bool(properties + 472 + 8 + 4 + 49)) {
            properties_ffi["VPN"]["IPsec"]["ClientCertPattern"] = {};
            properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(
              properties + 472 + 8 + 4 + 0,
              undefined
            );
            if (A.load.Bool(properties + 472 + 8 + 4 + 4 + 16)) {
              properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"] = {};
              properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(
                properties + 472 + 8 + 4 + 4 + 0,
                undefined
              );
              properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(
                properties + 472 + 8 + 4 + 4 + 4,
                undefined
              );
              properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(
                properties + 472 + 8 + 4 + 4 + 8,
                undefined
              );
              properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(
                properties + 472 + 8 + 4 + 4 + 12,
                undefined
              );
            }
            properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(
              properties + 472 + 8 + 4 + 24,
              undefined
            );
            properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(
              properties + 472 + 8 + 4 + 28,
              undefined
            );
            if (A.load.Bool(properties + 472 + 8 + 4 + 32 + 16)) {
              properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Subject"] = {};
              properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(
                properties + 472 + 8 + 4 + 32 + 0,
                undefined
              );
              properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(
                properties + 472 + 8 + 4 + 32 + 4,
                undefined
              );
              properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(
                properties + 472 + 8 + 4 + 32 + 8,
                undefined
              );
              properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(
                properties + 472 + 8 + 4 + 32 + 12,
                undefined
              );
            }
          }
          properties_ffi["VPN"]["IPsec"]["ClientCertPKCS11Id"] = A.load.Ref(properties + 472 + 8 + 56, undefined);
          properties_ffi["VPN"]["IPsec"]["ClientCertProvisioningProfileId"] = A.load.Ref(
            properties + 472 + 8 + 60,
            undefined
          );
          properties_ffi["VPN"]["IPsec"]["ClientCertRef"] = A.load.Ref(properties + 472 + 8 + 64, undefined);
          properties_ffi["VPN"]["IPsec"]["ClientCertType"] = A.load.Ref(properties + 472 + 8 + 68, undefined);
          if (A.load.Bool(properties + 472 + 8 + 72 + 113)) {
            properties_ffi["VPN"]["IPsec"]["EAP"] = {};
            properties_ffi["VPN"]["IPsec"]["EAP"]["AnonymousIdentity"] = A.load.Ref(
              properties + 472 + 8 + 72 + 0,
              undefined
            );
            if (A.load.Bool(properties + 472 + 8 + 72 + 4 + 49)) {
              properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"] = {};
              properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(
                properties + 472 + 8 + 72 + 4 + 0,
                undefined
              );
              if (A.load.Bool(properties + 472 + 8 + 72 + 4 + 4 + 16)) {
                properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"] = {};
                properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(
                  properties + 472 + 8 + 72 + 4 + 4 + 0,
                  undefined
                );
                properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(
                  properties + 472 + 8 + 72 + 4 + 4 + 4,
                  undefined
                );
                properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(
                  properties + 472 + 8 + 72 + 4 + 4 + 8,
                  undefined
                );
                properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(
                  properties + 472 + 8 + 72 + 4 + 4 + 12,
                  undefined
                );
              }
              properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(
                properties + 472 + 8 + 72 + 4 + 24,
                undefined
              );
              properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(
                properties + 472 + 8 + 72 + 4 + 28,
                undefined
              );
              if (A.load.Bool(properties + 472 + 8 + 72 + 4 + 32 + 16)) {
                properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"] = {};
                properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(
                  properties + 472 + 8 + 72 + 4 + 32 + 0,
                  undefined
                );
                properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(
                  properties + 472 + 8 + 72 + 4 + 32 + 4,
                  undefined
                );
                properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(
                  properties + 472 + 8 + 72 + 4 + 32 + 8,
                  undefined
                );
                properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] =
                  A.load.Ref(properties + 472 + 8 + 72 + 4 + 32 + 12, undefined);
              }
            }
            properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPKCS11Id"] = A.load.Ref(
              properties + 472 + 8 + 72 + 56,
              undefined
            );
            properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertProvisioningProfileId"] = A.load.Ref(
              properties + 472 + 8 + 72 + 60,
              undefined
            );
            properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertRef"] = A.load.Ref(
              properties + 472 + 8 + 72 + 64,
              undefined
            );
            properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertType"] = A.load.Ref(
              properties + 472 + 8 + 72 + 68,
              undefined
            );
            properties_ffi["VPN"]["IPsec"]["EAP"]["Identity"] = A.load.Ref(properties + 472 + 8 + 72 + 72, undefined);
            properties_ffi["VPN"]["IPsec"]["EAP"]["Inner"] = A.load.Ref(properties + 472 + 8 + 72 + 76, undefined);
            properties_ffi["VPN"]["IPsec"]["EAP"]["Outer"] = A.load.Ref(properties + 472 + 8 + 72 + 80, undefined);
            properties_ffi["VPN"]["IPsec"]["EAP"]["Password"] = A.load.Ref(properties + 472 + 8 + 72 + 84, undefined);
            if (A.load.Bool(properties + 472 + 8 + 72 + 110)) {
              properties_ffi["VPN"]["IPsec"]["EAP"]["SaveCredentials"] = A.load.Bool(properties + 472 + 8 + 72 + 88);
            }
            properties_ffi["VPN"]["IPsec"]["EAP"]["ServerCAPEMs"] = A.load.Ref(
              properties + 472 + 8 + 72 + 92,
              undefined
            );
            properties_ffi["VPN"]["IPsec"]["EAP"]["ServerCARefs"] = A.load.Ref(
              properties + 472 + 8 + 72 + 96,
              undefined
            );
            properties_ffi["VPN"]["IPsec"]["EAP"]["SubjectMatch"] = A.load.Ref(
              properties + 472 + 8 + 72 + 100,
              undefined
            );
            properties_ffi["VPN"]["IPsec"]["EAP"]["TLSVersionMax"] = A.load.Ref(
              properties + 472 + 8 + 72 + 104,
              undefined
            );
            if (A.load.Bool(properties + 472 + 8 + 72 + 111)) {
              properties_ffi["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"] = A.load.Bool(
                properties + 472 + 8 + 72 + 108
              );
            }
            if (A.load.Bool(properties + 472 + 8 + 72 + 112)) {
              properties_ffi["VPN"]["IPsec"]["EAP"]["UseSystemCAs"] = A.load.Bool(properties + 472 + 8 + 72 + 109);
            }
          }
          properties_ffi["VPN"]["IPsec"]["Group"] = A.load.Ref(properties + 472 + 8 + 188, undefined);
          if (A.load.Bool(properties + 472 + 8 + 234)) {
            properties_ffi["VPN"]["IPsec"]["IKEVersion"] = A.load.Int32(properties + 472 + 8 + 192);
          }
          properties_ffi["VPN"]["IPsec"]["LocalIdentity"] = A.load.Ref(properties + 472 + 8 + 196, undefined);
          properties_ffi["VPN"]["IPsec"]["PSK"] = A.load.Ref(properties + 472 + 8 + 200, undefined);
          properties_ffi["VPN"]["IPsec"]["RemoteIdentity"] = A.load.Ref(properties + 472 + 8 + 204, undefined);
          if (A.load.Bool(properties + 472 + 8 + 235)) {
            properties_ffi["VPN"]["IPsec"]["SaveCredentials"] = A.load.Bool(properties + 472 + 8 + 208);
          }
          properties_ffi["VPN"]["IPsec"]["ServerCAPEMs"] = A.load.Ref(properties + 472 + 8 + 212, undefined);
          properties_ffi["VPN"]["IPsec"]["ServerCARefs"] = A.load.Ref(properties + 472 + 8 + 216, undefined);
          if (A.load.Bool(properties + 472 + 8 + 220 + 13)) {
            properties_ffi["VPN"]["IPsec"]["XAUTH"] = {};
            properties_ffi["VPN"]["IPsec"]["XAUTH"]["Password"] = A.load.Ref(properties + 472 + 8 + 220 + 0, undefined);
            if (A.load.Bool(properties + 472 + 8 + 220 + 12)) {
              properties_ffi["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"] = A.load.Bool(properties + 472 + 8 + 220 + 4);
            }
            properties_ffi["VPN"]["IPsec"]["XAUTH"]["Username"] = A.load.Ref(properties + 472 + 8 + 220 + 8, undefined);
          }
        }
        if (A.load.Bool(properties + 472 + 248 + 18)) {
          properties_ffi["VPN"]["L2TP"] = {};
          if (A.load.Bool(properties + 472 + 248 + 16)) {
            properties_ffi["VPN"]["L2TP"]["LcpEchoDisabled"] = A.load.Bool(properties + 472 + 248 + 0);
          }
          properties_ffi["VPN"]["L2TP"]["Password"] = A.load.Ref(properties + 472 + 248 + 4, undefined);
          if (A.load.Bool(properties + 472 + 248 + 17)) {
            properties_ffi["VPN"]["L2TP"]["SaveCredentials"] = A.load.Bool(properties + 472 + 248 + 8);
          }
          properties_ffi["VPN"]["L2TP"]["Username"] = A.load.Ref(properties + 472 + 248 + 12, undefined);
        }
        if (A.load.Bool(properties + 472 + 268 + 218)) {
          properties_ffi["VPN"]["OpenVPN"] = {};
          properties_ffi["VPN"]["OpenVPN"]["Auth"] = A.load.Ref(properties + 472 + 268 + 0, undefined);
          properties_ffi["VPN"]["OpenVPN"]["AuthRetry"] = A.load.Ref(properties + 472 + 268 + 4, undefined);
          if (A.load.Bool(properties + 472 + 268 + 209)) {
            properties_ffi["VPN"]["OpenVPN"]["AuthNoCache"] = A.load.Bool(properties + 472 + 268 + 8);
          }
          properties_ffi["VPN"]["OpenVPN"]["Cipher"] = A.load.Ref(properties + 472 + 268 + 12, undefined);
          properties_ffi["VPN"]["OpenVPN"]["ClientCertPKCS11Id"] = A.load.Ref(properties + 472 + 268 + 16, undefined);
          if (A.load.Bool(properties + 472 + 268 + 20 + 49)) {
            properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"] = {};
            properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(
              properties + 472 + 268 + 20 + 0,
              undefined
            );
            if (A.load.Bool(properties + 472 + 268 + 20 + 4 + 16)) {
              properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"] = {};
              properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(
                properties + 472 + 268 + 20 + 4 + 0,
                undefined
              );
              properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(
                properties + 472 + 268 + 20 + 4 + 4,
                undefined
              );
              properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(
                properties + 472 + 268 + 20 + 4 + 8,
                undefined
              );
              properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(
                properties + 472 + 268 + 20 + 4 + 12,
                undefined
              );
            }
            properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(
              properties + 472 + 268 + 20 + 24,
              undefined
            );
            properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(
              properties + 472 + 268 + 20 + 28,
              undefined
            );
            if (A.load.Bool(properties + 472 + 268 + 20 + 32 + 16)) {
              properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"] = {};
              properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(
                properties + 472 + 268 + 20 + 32 + 0,
                undefined
              );
              properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(
                properties + 472 + 268 + 20 + 32 + 4,
                undefined
              );
              properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(
                properties + 472 + 268 + 20 + 32 + 8,
                undefined
              );
              properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(
                properties + 472 + 268 + 20 + 32 + 12,
                undefined
              );
            }
          }
          properties_ffi["VPN"]["OpenVPN"]["ClientCertProvisioningProfileId"] = A.load.Ref(
            properties + 472 + 268 + 72,
            undefined
          );
          properties_ffi["VPN"]["OpenVPN"]["ClientCertRef"] = A.load.Ref(properties + 472 + 268 + 76, undefined);
          properties_ffi["VPN"]["OpenVPN"]["ClientCertType"] = A.load.Ref(properties + 472 + 268 + 80, undefined);
          properties_ffi["VPN"]["OpenVPN"]["CompLZO"] = A.load.Ref(properties + 472 + 268 + 84, undefined);
          if (A.load.Bool(properties + 472 + 268 + 210)) {
            properties_ffi["VPN"]["OpenVPN"]["CompNoAdapt"] = A.load.Bool(properties + 472 + 268 + 88);
          }
          properties_ffi["VPN"]["OpenVPN"]["ExtraHosts"] = A.load.Ref(properties + 472 + 268 + 92, undefined);
          if (A.load.Bool(properties + 472 + 268 + 211)) {
            properties_ffi["VPN"]["OpenVPN"]["IgnoreDefaultRoute"] = A.load.Bool(properties + 472 + 268 + 96);
          }
          properties_ffi["VPN"]["OpenVPN"]["KeyDirection"] = A.load.Ref(properties + 472 + 268 + 100, undefined);
          properties_ffi["VPN"]["OpenVPN"]["NsCertType"] = A.load.Ref(properties + 472 + 268 + 104, undefined);
          properties_ffi["VPN"]["OpenVPN"]["OTP"] = A.load.Ref(properties + 472 + 268 + 108, undefined);
          properties_ffi["VPN"]["OpenVPN"]["Password"] = A.load.Ref(properties + 472 + 268 + 112, undefined);
          if (A.load.Bool(properties + 472 + 268 + 212)) {
            properties_ffi["VPN"]["OpenVPN"]["Port"] = A.load.Int32(properties + 472 + 268 + 116);
          }
          properties_ffi["VPN"]["OpenVPN"]["Proto"] = A.load.Ref(properties + 472 + 268 + 120, undefined);
          if (A.load.Bool(properties + 472 + 268 + 213)) {
            properties_ffi["VPN"]["OpenVPN"]["PushPeerInfo"] = A.load.Bool(properties + 472 + 268 + 124);
          }
          properties_ffi["VPN"]["OpenVPN"]["RemoteCertEKU"] = A.load.Ref(properties + 472 + 268 + 128, undefined);
          properties_ffi["VPN"]["OpenVPN"]["RemoteCertKU"] = A.load.Ref(properties + 472 + 268 + 132, undefined);
          properties_ffi["VPN"]["OpenVPN"]["RemoteCertTLS"] = A.load.Ref(properties + 472 + 268 + 136, undefined);
          if (A.load.Bool(properties + 472 + 268 + 214)) {
            properties_ffi["VPN"]["OpenVPN"]["RenegSec"] = A.load.Int32(properties + 472 + 268 + 140);
          }
          if (A.load.Bool(properties + 472 + 268 + 215)) {
            properties_ffi["VPN"]["OpenVPN"]["SaveCredentials"] = A.load.Bool(properties + 472 + 268 + 144);
          }
          properties_ffi["VPN"]["OpenVPN"]["ServerCAPEMs"] = A.load.Ref(properties + 472 + 268 + 148, undefined);
          properties_ffi["VPN"]["OpenVPN"]["ServerCARefs"] = A.load.Ref(properties + 472 + 268 + 152, undefined);
          properties_ffi["VPN"]["OpenVPN"]["ServerCertRef"] = A.load.Ref(properties + 472 + 268 + 156, undefined);
          if (A.load.Bool(properties + 472 + 268 + 216)) {
            properties_ffi["VPN"]["OpenVPN"]["ServerPollTimeout"] = A.load.Int32(properties + 472 + 268 + 160);
          }
          if (A.load.Bool(properties + 472 + 268 + 217)) {
            properties_ffi["VPN"]["OpenVPN"]["Shaper"] = A.load.Int32(properties + 472 + 268 + 164);
          }
          properties_ffi["VPN"]["OpenVPN"]["StaticChallenge"] = A.load.Ref(properties + 472 + 268 + 168, undefined);
          properties_ffi["VPN"]["OpenVPN"]["TLSAuthContents"] = A.load.Ref(properties + 472 + 268 + 172, undefined);
          properties_ffi["VPN"]["OpenVPN"]["TLSRemote"] = A.load.Ref(properties + 472 + 268 + 176, undefined);
          properties_ffi["VPN"]["OpenVPN"]["TLSVersionMin"] = A.load.Ref(properties + 472 + 268 + 180, undefined);
          properties_ffi["VPN"]["OpenVPN"]["UserAuthenticationType"] = A.load.Ref(
            properties + 472 + 268 + 184,
            undefined
          );
          properties_ffi["VPN"]["OpenVPN"]["Username"] = A.load.Ref(properties + 472 + 268 + 188, undefined);
          properties_ffi["VPN"]["OpenVPN"]["Verb"] = A.load.Ref(properties + 472 + 268 + 192, undefined);
          properties_ffi["VPN"]["OpenVPN"]["VerifyHash"] = A.load.Ref(properties + 472 + 268 + 196, undefined);
          if (A.load.Bool(properties + 472 + 268 + 200 + 8)) {
            properties_ffi["VPN"]["OpenVPN"]["VerifyX509"] = {};
            properties_ffi["VPN"]["OpenVPN"]["VerifyX509"]["Name"] = A.load.Ref(
              properties + 472 + 268 + 200 + 0,
              undefined
            );
            properties_ffi["VPN"]["OpenVPN"]["VerifyX509"]["Type"] = A.load.Ref(
              properties + 472 + 268 + 200 + 4,
              undefined
            );
          }
        }
        if (A.load.Bool(properties + 472 + 488 + 8)) {
          properties_ffi["VPN"]["ThirdPartyVPN"] = {};
          properties_ffi["VPN"]["ThirdPartyVPN"]["ExtensionID"] = A.load.Ref(properties + 472 + 488 + 0, undefined);
          properties_ffi["VPN"]["ThirdPartyVPN"]["ProviderName"] = A.load.Ref(properties + 472 + 488 + 4, undefined);
        }
        properties_ffi["VPN"]["Type"] = A.load.Ref(properties + 472 + 500, undefined);
      }
      if (A.load.Bool(properties + 980 + 161)) {
        properties_ffi["WiFi"] = {};
        if (A.load.Bool(properties + 980 + 156)) {
          properties_ffi["WiFi"]["AllowGatewayARPPolling"] = A.load.Bool(properties + 980 + 0);
        }
        if (A.load.Bool(properties + 980 + 157)) {
          properties_ffi["WiFi"]["AutoConnect"] = A.load.Bool(properties + 980 + 1);
        }
        properties_ffi["WiFi"]["BSSID"] = A.load.Ref(properties + 980 + 4, undefined);
        if (A.load.Bool(properties + 980 + 8 + 113)) {
          properties_ffi["WiFi"]["EAP"] = {};
          properties_ffi["WiFi"]["EAP"]["AnonymousIdentity"] = A.load.Ref(properties + 980 + 8 + 0, undefined);
          if (A.load.Bool(properties + 980 + 8 + 4 + 49)) {
            properties_ffi["WiFi"]["EAP"]["ClientCertPattern"] = {};
            properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(
              properties + 980 + 8 + 4 + 0,
              undefined
            );
            if (A.load.Bool(properties + 980 + 8 + 4 + 4 + 16)) {
              properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"] = {};
              properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(
                properties + 980 + 8 + 4 + 4 + 0,
                undefined
              );
              properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(
                properties + 980 + 8 + 4 + 4 + 4,
                undefined
              );
              properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(
                properties + 980 + 8 + 4 + 4 + 8,
                undefined
              );
              properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(
                properties + 980 + 8 + 4 + 4 + 12,
                undefined
              );
            }
            properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(
              properties + 980 + 8 + 4 + 24,
              undefined
            );
            properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(
              properties + 980 + 8 + 4 + 28,
              undefined
            );
            if (A.load.Bool(properties + 980 + 8 + 4 + 32 + 16)) {
              properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Subject"] = {};
              properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(
                properties + 980 + 8 + 4 + 32 + 0,
                undefined
              );
              properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(
                properties + 980 + 8 + 4 + 32 + 4,
                undefined
              );
              properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(
                properties + 980 + 8 + 4 + 32 + 8,
                undefined
              );
              properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(
                properties + 980 + 8 + 4 + 32 + 12,
                undefined
              );
            }
          }
          properties_ffi["WiFi"]["EAP"]["ClientCertPKCS11Id"] = A.load.Ref(properties + 980 + 8 + 56, undefined);
          properties_ffi["WiFi"]["EAP"]["ClientCertProvisioningProfileId"] = A.load.Ref(
            properties + 980 + 8 + 60,
            undefined
          );
          properties_ffi["WiFi"]["EAP"]["ClientCertRef"] = A.load.Ref(properties + 980 + 8 + 64, undefined);
          properties_ffi["WiFi"]["EAP"]["ClientCertType"] = A.load.Ref(properties + 980 + 8 + 68, undefined);
          properties_ffi["WiFi"]["EAP"]["Identity"] = A.load.Ref(properties + 980 + 8 + 72, undefined);
          properties_ffi["WiFi"]["EAP"]["Inner"] = A.load.Ref(properties + 980 + 8 + 76, undefined);
          properties_ffi["WiFi"]["EAP"]["Outer"] = A.load.Ref(properties + 980 + 8 + 80, undefined);
          properties_ffi["WiFi"]["EAP"]["Password"] = A.load.Ref(properties + 980 + 8 + 84, undefined);
          if (A.load.Bool(properties + 980 + 8 + 110)) {
            properties_ffi["WiFi"]["EAP"]["SaveCredentials"] = A.load.Bool(properties + 980 + 8 + 88);
          }
          properties_ffi["WiFi"]["EAP"]["ServerCAPEMs"] = A.load.Ref(properties + 980 + 8 + 92, undefined);
          properties_ffi["WiFi"]["EAP"]["ServerCARefs"] = A.load.Ref(properties + 980 + 8 + 96, undefined);
          properties_ffi["WiFi"]["EAP"]["SubjectMatch"] = A.load.Ref(properties + 980 + 8 + 100, undefined);
          properties_ffi["WiFi"]["EAP"]["TLSVersionMax"] = A.load.Ref(properties + 980 + 8 + 104, undefined);
          if (A.load.Bool(properties + 980 + 8 + 111)) {
            properties_ffi["WiFi"]["EAP"]["UseProactiveKeyCaching"] = A.load.Bool(properties + 980 + 8 + 108);
          }
          if (A.load.Bool(properties + 980 + 8 + 112)) {
            properties_ffi["WiFi"]["EAP"]["UseSystemCAs"] = A.load.Bool(properties + 980 + 8 + 109);
          }
        }
        if (A.load.Bool(properties + 980 + 158)) {
          properties_ffi["WiFi"]["Frequency"] = A.load.Int32(properties + 980 + 124);
        }
        properties_ffi["WiFi"]["FrequencyList"] = A.load.Ref(properties + 980 + 128, undefined);
        properties_ffi["WiFi"]["HexSSID"] = A.load.Ref(properties + 980 + 132, undefined);
        if (A.load.Bool(properties + 980 + 159)) {
          properties_ffi["WiFi"]["HiddenSSID"] = A.load.Bool(properties + 980 + 136);
        }
        properties_ffi["WiFi"]["Passphrase"] = A.load.Ref(properties + 980 + 140, undefined);
        properties_ffi["WiFi"]["SSID"] = A.load.Ref(properties + 980 + 144, undefined);
        properties_ffi["WiFi"]["Security"] = A.load.Ref(properties + 980 + 148, undefined);
        if (A.load.Bool(properties + 980 + 160)) {
          properties_ffi["WiFi"]["SignalStrength"] = A.load.Int32(properties + 980 + 152);
        }
      }

      const _ret = WEBEXT.networkingPrivate.createNetwork(shared === A.H.TRUE, properties_ffi);
      A.store.Ref(retPtr, _ret);
    },
    "try_CreateNetwork": (
      retPtr: Pointer,
      errPtr: Pointer,
      shared: heap.Ref<boolean>,
      properties: Pointer
    ): heap.Ref<boolean> => {
      try {
        const properties_ffi = {};

        if (A.load.Bool(properties + 0 + 219)) {
          properties_ffi["Cellular"] = {};
          if (A.load.Bool(properties + 0 + 213)) {
            properties_ffi["Cellular"]["AutoConnect"] = A.load.Bool(properties + 0 + 0);
          }
          if (A.load.Bool(properties + 0 + 4 + 28)) {
            properties_ffi["Cellular"]["APN"] = {};
            properties_ffi["Cellular"]["APN"]["AccessPointName"] = A.load.Ref(properties + 0 + 4 + 0, undefined);
            properties_ffi["Cellular"]["APN"]["Authentication"] = A.load.Ref(properties + 0 + 4 + 4, undefined);
            properties_ffi["Cellular"]["APN"]["Language"] = A.load.Ref(properties + 0 + 4 + 8, undefined);
            properties_ffi["Cellular"]["APN"]["LocalizedName"] = A.load.Ref(properties + 0 + 4 + 12, undefined);
            properties_ffi["Cellular"]["APN"]["Name"] = A.load.Ref(properties + 0 + 4 + 16, undefined);
            properties_ffi["Cellular"]["APN"]["Password"] = A.load.Ref(properties + 0 + 4 + 20, undefined);
            properties_ffi["Cellular"]["APN"]["Username"] = A.load.Ref(properties + 0 + 4 + 24, undefined);
          }
          properties_ffi["Cellular"]["APNList"] = A.load.Ref(properties + 0 + 36, undefined);
          properties_ffi["Cellular"]["ActivationType"] = A.load.Ref(properties + 0 + 40, undefined);
          properties_ffi["Cellular"]["ActivationState"] = A.load.Enum(properties + 0 + 44, [
            "Activated",
            "Activating",
            "NotActivated",
            "PartiallyActivated",
          ]);
          if (A.load.Bool(properties + 0 + 214)) {
            properties_ffi["Cellular"]["AllowRoaming"] = A.load.Bool(properties + 0 + 48);
          }
          properties_ffi["Cellular"]["ESN"] = A.load.Ref(properties + 0 + 52, undefined);
          properties_ffi["Cellular"]["Family"] = A.load.Ref(properties + 0 + 56, undefined);
          properties_ffi["Cellular"]["FirmwareRevision"] = A.load.Ref(properties + 0 + 60, undefined);
          properties_ffi["Cellular"]["FoundNetworks"] = A.load.Ref(properties + 0 + 64, undefined);
          properties_ffi["Cellular"]["HardwareRevision"] = A.load.Ref(properties + 0 + 68, undefined);
          if (A.load.Bool(properties + 0 + 72 + 12)) {
            properties_ffi["Cellular"]["HomeProvider"] = {};
            properties_ffi["Cellular"]["HomeProvider"]["Name"] = A.load.Ref(properties + 0 + 72 + 0, undefined);
            properties_ffi["Cellular"]["HomeProvider"]["Code"] = A.load.Ref(properties + 0 + 72 + 4, undefined);
            properties_ffi["Cellular"]["HomeProvider"]["Country"] = A.load.Ref(properties + 0 + 72 + 8, undefined);
          }
          properties_ffi["Cellular"]["ICCID"] = A.load.Ref(properties + 0 + 88, undefined);
          properties_ffi["Cellular"]["IMEI"] = A.load.Ref(properties + 0 + 92, undefined);
          if (A.load.Bool(properties + 0 + 96 + 28)) {
            properties_ffi["Cellular"]["LastGoodAPN"] = {};
            properties_ffi["Cellular"]["LastGoodAPN"]["AccessPointName"] = A.load.Ref(
              properties + 0 + 96 + 0,
              undefined
            );
            properties_ffi["Cellular"]["LastGoodAPN"]["Authentication"] = A.load.Ref(
              properties + 0 + 96 + 4,
              undefined
            );
            properties_ffi["Cellular"]["LastGoodAPN"]["Language"] = A.load.Ref(properties + 0 + 96 + 8, undefined);
            properties_ffi["Cellular"]["LastGoodAPN"]["LocalizedName"] = A.load.Ref(
              properties + 0 + 96 + 12,
              undefined
            );
            properties_ffi["Cellular"]["LastGoodAPN"]["Name"] = A.load.Ref(properties + 0 + 96 + 16, undefined);
            properties_ffi["Cellular"]["LastGoodAPN"]["Password"] = A.load.Ref(properties + 0 + 96 + 20, undefined);
            properties_ffi["Cellular"]["LastGoodAPN"]["Username"] = A.load.Ref(properties + 0 + 96 + 24, undefined);
          }
          properties_ffi["Cellular"]["Manufacturer"] = A.load.Ref(properties + 0 + 128, undefined);
          properties_ffi["Cellular"]["MDN"] = A.load.Ref(properties + 0 + 132, undefined);
          properties_ffi["Cellular"]["MEID"] = A.load.Ref(properties + 0 + 136, undefined);
          properties_ffi["Cellular"]["MIN"] = A.load.Ref(properties + 0 + 140, undefined);
          properties_ffi["Cellular"]["ModelID"] = A.load.Ref(properties + 0 + 144, undefined);
          properties_ffi["Cellular"]["NetworkTechnology"] = A.load.Ref(properties + 0 + 148, undefined);
          if (A.load.Bool(properties + 0 + 152 + 12)) {
            properties_ffi["Cellular"]["PaymentPortal"] = {};
            properties_ffi["Cellular"]["PaymentPortal"]["Method"] = A.load.Ref(properties + 0 + 152 + 0, undefined);
            properties_ffi["Cellular"]["PaymentPortal"]["PostData"] = A.load.Ref(properties + 0 + 152 + 4, undefined);
            properties_ffi["Cellular"]["PaymentPortal"]["Url"] = A.load.Ref(properties + 0 + 152 + 8, undefined);
          }
          properties_ffi["Cellular"]["RoamingState"] = A.load.Ref(properties + 0 + 168, undefined);
          if (A.load.Bool(properties + 0 + 215)) {
            properties_ffi["Cellular"]["Scanning"] = A.load.Bool(properties + 0 + 172);
          }
          if (A.load.Bool(properties + 0 + 176 + 12)) {
            properties_ffi["Cellular"]["ServingOperator"] = {};
            properties_ffi["Cellular"]["ServingOperator"]["Name"] = A.load.Ref(properties + 0 + 176 + 0, undefined);
            properties_ffi["Cellular"]["ServingOperator"]["Code"] = A.load.Ref(properties + 0 + 176 + 4, undefined);
            properties_ffi["Cellular"]["ServingOperator"]["Country"] = A.load.Ref(properties + 0 + 176 + 8, undefined);
          }
          if (A.load.Bool(properties + 0 + 192 + 14)) {
            properties_ffi["Cellular"]["SIMLockStatus"] = {};
            properties_ffi["Cellular"]["SIMLockStatus"]["LockType"] = A.load.Ref(properties + 0 + 192 + 0, undefined);
            if (A.load.Bool(properties + 0 + 192 + 12)) {
              properties_ffi["Cellular"]["SIMLockStatus"]["LockEnabled"] = A.load.Bool(properties + 0 + 192 + 4);
            }
            if (A.load.Bool(properties + 0 + 192 + 13)) {
              properties_ffi["Cellular"]["SIMLockStatus"]["RetriesLeft"] = A.load.Int32(properties + 0 + 192 + 8);
            }
          }
          if (A.load.Bool(properties + 0 + 216)) {
            properties_ffi["Cellular"]["SIMPresent"] = A.load.Bool(properties + 0 + 207);
          }
          if (A.load.Bool(properties + 0 + 217)) {
            properties_ffi["Cellular"]["SignalStrength"] = A.load.Int32(properties + 0 + 208);
          }
          if (A.load.Bool(properties + 0 + 218)) {
            properties_ffi["Cellular"]["SupportNetworkScan"] = A.load.Bool(properties + 0 + 212);
          }
        }
        if (A.load.Bool(properties + 220 + 123)) {
          properties_ffi["Ethernet"] = {};
          if (A.load.Bool(properties + 220 + 122)) {
            properties_ffi["Ethernet"]["AutoConnect"] = A.load.Bool(properties + 220 + 0);
          }
          properties_ffi["Ethernet"]["Authentication"] = A.load.Ref(properties + 220 + 4, undefined);
          if (A.load.Bool(properties + 220 + 8 + 113)) {
            properties_ffi["Ethernet"]["EAP"] = {};
            properties_ffi["Ethernet"]["EAP"]["AnonymousIdentity"] = A.load.Ref(properties + 220 + 8 + 0, undefined);
            if (A.load.Bool(properties + 220 + 8 + 4 + 49)) {
              properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"] = {};
              properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(
                properties + 220 + 8 + 4 + 0,
                undefined
              );
              if (A.load.Bool(properties + 220 + 8 + 4 + 4 + 16)) {
                properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"] = {};
                properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(
                  properties + 220 + 8 + 4 + 4 + 0,
                  undefined
                );
                properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(
                  properties + 220 + 8 + 4 + 4 + 4,
                  undefined
                );
                properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(
                  properties + 220 + 8 + 4 + 4 + 8,
                  undefined
                );
                properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(
                  properties + 220 + 8 + 4 + 4 + 12,
                  undefined
                );
              }
              properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(
                properties + 220 + 8 + 4 + 24,
                undefined
              );
              properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(
                properties + 220 + 8 + 4 + 28,
                undefined
              );
              if (A.load.Bool(properties + 220 + 8 + 4 + 32 + 16)) {
                properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"] = {};
                properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(
                  properties + 220 + 8 + 4 + 32 + 0,
                  undefined
                );
                properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(
                  properties + 220 + 8 + 4 + 32 + 4,
                  undefined
                );
                properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(
                  properties + 220 + 8 + 4 + 32 + 8,
                  undefined
                );
                properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(
                  properties + 220 + 8 + 4 + 32 + 12,
                  undefined
                );
              }
            }
            properties_ffi["Ethernet"]["EAP"]["ClientCertPKCS11Id"] = A.load.Ref(properties + 220 + 8 + 56, undefined);
            properties_ffi["Ethernet"]["EAP"]["ClientCertProvisioningProfileId"] = A.load.Ref(
              properties + 220 + 8 + 60,
              undefined
            );
            properties_ffi["Ethernet"]["EAP"]["ClientCertRef"] = A.load.Ref(properties + 220 + 8 + 64, undefined);
            properties_ffi["Ethernet"]["EAP"]["ClientCertType"] = A.load.Ref(properties + 220 + 8 + 68, undefined);
            properties_ffi["Ethernet"]["EAP"]["Identity"] = A.load.Ref(properties + 220 + 8 + 72, undefined);
            properties_ffi["Ethernet"]["EAP"]["Inner"] = A.load.Ref(properties + 220 + 8 + 76, undefined);
            properties_ffi["Ethernet"]["EAP"]["Outer"] = A.load.Ref(properties + 220 + 8 + 80, undefined);
            properties_ffi["Ethernet"]["EAP"]["Password"] = A.load.Ref(properties + 220 + 8 + 84, undefined);
            if (A.load.Bool(properties + 220 + 8 + 110)) {
              properties_ffi["Ethernet"]["EAP"]["SaveCredentials"] = A.load.Bool(properties + 220 + 8 + 88);
            }
            properties_ffi["Ethernet"]["EAP"]["ServerCAPEMs"] = A.load.Ref(properties + 220 + 8 + 92, undefined);
            properties_ffi["Ethernet"]["EAP"]["ServerCARefs"] = A.load.Ref(properties + 220 + 8 + 96, undefined);
            properties_ffi["Ethernet"]["EAP"]["SubjectMatch"] = A.load.Ref(properties + 220 + 8 + 100, undefined);
            properties_ffi["Ethernet"]["EAP"]["TLSVersionMax"] = A.load.Ref(properties + 220 + 8 + 104, undefined);
            if (A.load.Bool(properties + 220 + 8 + 111)) {
              properties_ffi["Ethernet"]["EAP"]["UseProactiveKeyCaching"] = A.load.Bool(properties + 220 + 8 + 108);
            }
            if (A.load.Bool(properties + 220 + 8 + 112)) {
              properties_ffi["Ethernet"]["EAP"]["UseSystemCAs"] = A.load.Bool(properties + 220 + 8 + 109);
            }
          }
        }
        properties_ffi["GUID"] = A.load.Ref(properties + 344, undefined);
        properties_ffi["IPAddressConfigType"] = A.load.Enum(properties + 348, ["DHCP", "Static"]);
        properties_ffi["Name"] = A.load.Ref(properties + 352, undefined);
        properties_ffi["NameServersConfigType"] = A.load.Enum(properties + 356, ["DHCP", "Static"]);
        if (A.load.Bool(properties + 1142)) {
          properties_ffi["Priority"] = A.load.Int32(properties + 360);
        }
        if (A.load.Bool(properties + 364 + 60)) {
          properties_ffi["ProxySettings"] = {};
          properties_ffi["ProxySettings"]["Type"] = A.load.Enum(properties + 364 + 0, [
            "Direct",
            "Manual",
            "PAC",
            "WPAD",
          ]);
          if (A.load.Bool(properties + 364 + 4 + 46)) {
            properties_ffi["ProxySettings"]["Manual"] = {};
            if (A.load.Bool(properties + 364 + 4 + 0 + 9)) {
              properties_ffi["ProxySettings"]["Manual"]["HTTPProxy"] = {};
              properties_ffi["ProxySettings"]["Manual"]["HTTPProxy"]["Host"] = A.load.Ref(
                properties + 364 + 4 + 0 + 0,
                undefined
              );
              if (A.load.Bool(properties + 364 + 4 + 0 + 8)) {
                properties_ffi["ProxySettings"]["Manual"]["HTTPProxy"]["Port"] = A.load.Int32(
                  properties + 364 + 4 + 0 + 4
                );
              }
            }
            if (A.load.Bool(properties + 364 + 4 + 12 + 9)) {
              properties_ffi["ProxySettings"]["Manual"]["SecureHTTPProxy"] = {};
              properties_ffi["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Host"] = A.load.Ref(
                properties + 364 + 4 + 12 + 0,
                undefined
              );
              if (A.load.Bool(properties + 364 + 4 + 12 + 8)) {
                properties_ffi["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"] = A.load.Int32(
                  properties + 364 + 4 + 12 + 4
                );
              }
            }
            if (A.load.Bool(properties + 364 + 4 + 24 + 9)) {
              properties_ffi["ProxySettings"]["Manual"]["FTPProxy"] = {};
              properties_ffi["ProxySettings"]["Manual"]["FTPProxy"]["Host"] = A.load.Ref(
                properties + 364 + 4 + 24 + 0,
                undefined
              );
              if (A.load.Bool(properties + 364 + 4 + 24 + 8)) {
                properties_ffi["ProxySettings"]["Manual"]["FTPProxy"]["Port"] = A.load.Int32(
                  properties + 364 + 4 + 24 + 4
                );
              }
            }
            if (A.load.Bool(properties + 364 + 4 + 36 + 9)) {
              properties_ffi["ProxySettings"]["Manual"]["SOCKS"] = {};
              properties_ffi["ProxySettings"]["Manual"]["SOCKS"]["Host"] = A.load.Ref(
                properties + 364 + 4 + 36 + 0,
                undefined
              );
              if (A.load.Bool(properties + 364 + 4 + 36 + 8)) {
                properties_ffi["ProxySettings"]["Manual"]["SOCKS"]["Port"] = A.load.Int32(
                  properties + 364 + 4 + 36 + 4
                );
              }
            }
          }
          properties_ffi["ProxySettings"]["ExcludeDomains"] = A.load.Ref(properties + 364 + 52, undefined);
          properties_ffi["ProxySettings"]["PAC"] = A.load.Ref(properties + 364 + 56, undefined);
        }
        if (A.load.Bool(properties + 428 + 37)) {
          properties_ffi["StaticIPConfig"] = {};
          properties_ffi["StaticIPConfig"]["Gateway"] = A.load.Ref(properties + 428 + 0, undefined);
          properties_ffi["StaticIPConfig"]["IPAddress"] = A.load.Ref(properties + 428 + 4, undefined);
          properties_ffi["StaticIPConfig"]["ExcludedRoutes"] = A.load.Ref(properties + 428 + 8, undefined);
          properties_ffi["StaticIPConfig"]["IncludedRoutes"] = A.load.Ref(properties + 428 + 12, undefined);
          properties_ffi["StaticIPConfig"]["NameServers"] = A.load.Ref(properties + 428 + 16, undefined);
          properties_ffi["StaticIPConfig"]["SearchDomains"] = A.load.Ref(properties + 428 + 20, undefined);
          if (A.load.Bool(properties + 428 + 36)) {
            properties_ffi["StaticIPConfig"]["RoutingPrefix"] = A.load.Int32(properties + 428 + 24);
          }
          properties_ffi["StaticIPConfig"]["Type"] = A.load.Ref(properties + 428 + 28, undefined);
          properties_ffi["StaticIPConfig"]["WebProxyAutoDiscoveryUrl"] = A.load.Ref(properties + 428 + 32, undefined);
        }
        properties_ffi["Type"] = A.load.Enum(properties + 468, [
          "All",
          "Cellular",
          "Ethernet",
          "Tether",
          "VPN",
          "Wireless",
          "WiFi",
        ]);
        if (A.load.Bool(properties + 472 + 505)) {
          properties_ffi["VPN"] = {};
          if (A.load.Bool(properties + 472 + 504)) {
            properties_ffi["VPN"]["AutoConnect"] = A.load.Bool(properties + 472 + 0);
          }
          properties_ffi["VPN"]["Host"] = A.load.Ref(properties + 472 + 4, undefined);
          if (A.load.Bool(properties + 472 + 8 + 236)) {
            properties_ffi["VPN"]["IPsec"] = {};
            properties_ffi["VPN"]["IPsec"]["AuthenticationType"] = A.load.Ref(properties + 472 + 8 + 0, undefined);
            if (A.load.Bool(properties + 472 + 8 + 4 + 49)) {
              properties_ffi["VPN"]["IPsec"]["ClientCertPattern"] = {};
              properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(
                properties + 472 + 8 + 4 + 0,
                undefined
              );
              if (A.load.Bool(properties + 472 + 8 + 4 + 4 + 16)) {
                properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"] = {};
                properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(
                  properties + 472 + 8 + 4 + 4 + 0,
                  undefined
                );
                properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(
                  properties + 472 + 8 + 4 + 4 + 4,
                  undefined
                );
                properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(
                  properties + 472 + 8 + 4 + 4 + 8,
                  undefined
                );
                properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(
                  properties + 472 + 8 + 4 + 4 + 12,
                  undefined
                );
              }
              properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(
                properties + 472 + 8 + 4 + 24,
                undefined
              );
              properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(
                properties + 472 + 8 + 4 + 28,
                undefined
              );
              if (A.load.Bool(properties + 472 + 8 + 4 + 32 + 16)) {
                properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Subject"] = {};
                properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(
                  properties + 472 + 8 + 4 + 32 + 0,
                  undefined
                );
                properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(
                  properties + 472 + 8 + 4 + 32 + 4,
                  undefined
                );
                properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(
                  properties + 472 + 8 + 4 + 32 + 8,
                  undefined
                );
                properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(
                  properties + 472 + 8 + 4 + 32 + 12,
                  undefined
                );
              }
            }
            properties_ffi["VPN"]["IPsec"]["ClientCertPKCS11Id"] = A.load.Ref(properties + 472 + 8 + 56, undefined);
            properties_ffi["VPN"]["IPsec"]["ClientCertProvisioningProfileId"] = A.load.Ref(
              properties + 472 + 8 + 60,
              undefined
            );
            properties_ffi["VPN"]["IPsec"]["ClientCertRef"] = A.load.Ref(properties + 472 + 8 + 64, undefined);
            properties_ffi["VPN"]["IPsec"]["ClientCertType"] = A.load.Ref(properties + 472 + 8 + 68, undefined);
            if (A.load.Bool(properties + 472 + 8 + 72 + 113)) {
              properties_ffi["VPN"]["IPsec"]["EAP"] = {};
              properties_ffi["VPN"]["IPsec"]["EAP"]["AnonymousIdentity"] = A.load.Ref(
                properties + 472 + 8 + 72 + 0,
                undefined
              );
              if (A.load.Bool(properties + 472 + 8 + 72 + 4 + 49)) {
                properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"] = {};
                properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(
                  properties + 472 + 8 + 72 + 4 + 0,
                  undefined
                );
                if (A.load.Bool(properties + 472 + 8 + 72 + 4 + 4 + 16)) {
                  properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"] = {};
                  properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(
                    properties + 472 + 8 + 72 + 4 + 4 + 0,
                    undefined
                  );
                  properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(
                    properties + 472 + 8 + 72 + 4 + 4 + 4,
                    undefined
                  );
                  properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(
                    properties + 472 + 8 + 72 + 4 + 4 + 8,
                    undefined
                  );
                  properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] =
                    A.load.Ref(properties + 472 + 8 + 72 + 4 + 4 + 12, undefined);
                }
                properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(
                  properties + 472 + 8 + 72 + 4 + 24,
                  undefined
                );
                properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(
                  properties + 472 + 8 + 72 + 4 + 28,
                  undefined
                );
                if (A.load.Bool(properties + 472 + 8 + 72 + 4 + 32 + 16)) {
                  properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"] = {};
                  properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(
                    properties + 472 + 8 + 72 + 4 + 32 + 0,
                    undefined
                  );
                  properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(
                    properties + 472 + 8 + 72 + 4 + 32 + 4,
                    undefined
                  );
                  properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(
                    properties + 472 + 8 + 72 + 4 + 32 + 8,
                    undefined
                  );
                  properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] =
                    A.load.Ref(properties + 472 + 8 + 72 + 4 + 32 + 12, undefined);
                }
              }
              properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPKCS11Id"] = A.load.Ref(
                properties + 472 + 8 + 72 + 56,
                undefined
              );
              properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertProvisioningProfileId"] = A.load.Ref(
                properties + 472 + 8 + 72 + 60,
                undefined
              );
              properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertRef"] = A.load.Ref(
                properties + 472 + 8 + 72 + 64,
                undefined
              );
              properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertType"] = A.load.Ref(
                properties + 472 + 8 + 72 + 68,
                undefined
              );
              properties_ffi["VPN"]["IPsec"]["EAP"]["Identity"] = A.load.Ref(properties + 472 + 8 + 72 + 72, undefined);
              properties_ffi["VPN"]["IPsec"]["EAP"]["Inner"] = A.load.Ref(properties + 472 + 8 + 72 + 76, undefined);
              properties_ffi["VPN"]["IPsec"]["EAP"]["Outer"] = A.load.Ref(properties + 472 + 8 + 72 + 80, undefined);
              properties_ffi["VPN"]["IPsec"]["EAP"]["Password"] = A.load.Ref(properties + 472 + 8 + 72 + 84, undefined);
              if (A.load.Bool(properties + 472 + 8 + 72 + 110)) {
                properties_ffi["VPN"]["IPsec"]["EAP"]["SaveCredentials"] = A.load.Bool(properties + 472 + 8 + 72 + 88);
              }
              properties_ffi["VPN"]["IPsec"]["EAP"]["ServerCAPEMs"] = A.load.Ref(
                properties + 472 + 8 + 72 + 92,
                undefined
              );
              properties_ffi["VPN"]["IPsec"]["EAP"]["ServerCARefs"] = A.load.Ref(
                properties + 472 + 8 + 72 + 96,
                undefined
              );
              properties_ffi["VPN"]["IPsec"]["EAP"]["SubjectMatch"] = A.load.Ref(
                properties + 472 + 8 + 72 + 100,
                undefined
              );
              properties_ffi["VPN"]["IPsec"]["EAP"]["TLSVersionMax"] = A.load.Ref(
                properties + 472 + 8 + 72 + 104,
                undefined
              );
              if (A.load.Bool(properties + 472 + 8 + 72 + 111)) {
                properties_ffi["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"] = A.load.Bool(
                  properties + 472 + 8 + 72 + 108
                );
              }
              if (A.load.Bool(properties + 472 + 8 + 72 + 112)) {
                properties_ffi["VPN"]["IPsec"]["EAP"]["UseSystemCAs"] = A.load.Bool(properties + 472 + 8 + 72 + 109);
              }
            }
            properties_ffi["VPN"]["IPsec"]["Group"] = A.load.Ref(properties + 472 + 8 + 188, undefined);
            if (A.load.Bool(properties + 472 + 8 + 234)) {
              properties_ffi["VPN"]["IPsec"]["IKEVersion"] = A.load.Int32(properties + 472 + 8 + 192);
            }
            properties_ffi["VPN"]["IPsec"]["LocalIdentity"] = A.load.Ref(properties + 472 + 8 + 196, undefined);
            properties_ffi["VPN"]["IPsec"]["PSK"] = A.load.Ref(properties + 472 + 8 + 200, undefined);
            properties_ffi["VPN"]["IPsec"]["RemoteIdentity"] = A.load.Ref(properties + 472 + 8 + 204, undefined);
            if (A.load.Bool(properties + 472 + 8 + 235)) {
              properties_ffi["VPN"]["IPsec"]["SaveCredentials"] = A.load.Bool(properties + 472 + 8 + 208);
            }
            properties_ffi["VPN"]["IPsec"]["ServerCAPEMs"] = A.load.Ref(properties + 472 + 8 + 212, undefined);
            properties_ffi["VPN"]["IPsec"]["ServerCARefs"] = A.load.Ref(properties + 472 + 8 + 216, undefined);
            if (A.load.Bool(properties + 472 + 8 + 220 + 13)) {
              properties_ffi["VPN"]["IPsec"]["XAUTH"] = {};
              properties_ffi["VPN"]["IPsec"]["XAUTH"]["Password"] = A.load.Ref(
                properties + 472 + 8 + 220 + 0,
                undefined
              );
              if (A.load.Bool(properties + 472 + 8 + 220 + 12)) {
                properties_ffi["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"] = A.load.Bool(
                  properties + 472 + 8 + 220 + 4
                );
              }
              properties_ffi["VPN"]["IPsec"]["XAUTH"]["Username"] = A.load.Ref(
                properties + 472 + 8 + 220 + 8,
                undefined
              );
            }
          }
          if (A.load.Bool(properties + 472 + 248 + 18)) {
            properties_ffi["VPN"]["L2TP"] = {};
            if (A.load.Bool(properties + 472 + 248 + 16)) {
              properties_ffi["VPN"]["L2TP"]["LcpEchoDisabled"] = A.load.Bool(properties + 472 + 248 + 0);
            }
            properties_ffi["VPN"]["L2TP"]["Password"] = A.load.Ref(properties + 472 + 248 + 4, undefined);
            if (A.load.Bool(properties + 472 + 248 + 17)) {
              properties_ffi["VPN"]["L2TP"]["SaveCredentials"] = A.load.Bool(properties + 472 + 248 + 8);
            }
            properties_ffi["VPN"]["L2TP"]["Username"] = A.load.Ref(properties + 472 + 248 + 12, undefined);
          }
          if (A.load.Bool(properties + 472 + 268 + 218)) {
            properties_ffi["VPN"]["OpenVPN"] = {};
            properties_ffi["VPN"]["OpenVPN"]["Auth"] = A.load.Ref(properties + 472 + 268 + 0, undefined);
            properties_ffi["VPN"]["OpenVPN"]["AuthRetry"] = A.load.Ref(properties + 472 + 268 + 4, undefined);
            if (A.load.Bool(properties + 472 + 268 + 209)) {
              properties_ffi["VPN"]["OpenVPN"]["AuthNoCache"] = A.load.Bool(properties + 472 + 268 + 8);
            }
            properties_ffi["VPN"]["OpenVPN"]["Cipher"] = A.load.Ref(properties + 472 + 268 + 12, undefined);
            properties_ffi["VPN"]["OpenVPN"]["ClientCertPKCS11Id"] = A.load.Ref(properties + 472 + 268 + 16, undefined);
            if (A.load.Bool(properties + 472 + 268 + 20 + 49)) {
              properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"] = {};
              properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(
                properties + 472 + 268 + 20 + 0,
                undefined
              );
              if (A.load.Bool(properties + 472 + 268 + 20 + 4 + 16)) {
                properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"] = {};
                properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(
                  properties + 472 + 268 + 20 + 4 + 0,
                  undefined
                );
                properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(
                  properties + 472 + 268 + 20 + 4 + 4,
                  undefined
                );
                properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(
                  properties + 472 + 268 + 20 + 4 + 8,
                  undefined
                );
                properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(
                  properties + 472 + 268 + 20 + 4 + 12,
                  undefined
                );
              }
              properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(
                properties + 472 + 268 + 20 + 24,
                undefined
              );
              properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(
                properties + 472 + 268 + 20 + 28,
                undefined
              );
              if (A.load.Bool(properties + 472 + 268 + 20 + 32 + 16)) {
                properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"] = {};
                properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(
                  properties + 472 + 268 + 20 + 32 + 0,
                  undefined
                );
                properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(
                  properties + 472 + 268 + 20 + 32 + 4,
                  undefined
                );
                properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(
                  properties + 472 + 268 + 20 + 32 + 8,
                  undefined
                );
                properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(
                  properties + 472 + 268 + 20 + 32 + 12,
                  undefined
                );
              }
            }
            properties_ffi["VPN"]["OpenVPN"]["ClientCertProvisioningProfileId"] = A.load.Ref(
              properties + 472 + 268 + 72,
              undefined
            );
            properties_ffi["VPN"]["OpenVPN"]["ClientCertRef"] = A.load.Ref(properties + 472 + 268 + 76, undefined);
            properties_ffi["VPN"]["OpenVPN"]["ClientCertType"] = A.load.Ref(properties + 472 + 268 + 80, undefined);
            properties_ffi["VPN"]["OpenVPN"]["CompLZO"] = A.load.Ref(properties + 472 + 268 + 84, undefined);
            if (A.load.Bool(properties + 472 + 268 + 210)) {
              properties_ffi["VPN"]["OpenVPN"]["CompNoAdapt"] = A.load.Bool(properties + 472 + 268 + 88);
            }
            properties_ffi["VPN"]["OpenVPN"]["ExtraHosts"] = A.load.Ref(properties + 472 + 268 + 92, undefined);
            if (A.load.Bool(properties + 472 + 268 + 211)) {
              properties_ffi["VPN"]["OpenVPN"]["IgnoreDefaultRoute"] = A.load.Bool(properties + 472 + 268 + 96);
            }
            properties_ffi["VPN"]["OpenVPN"]["KeyDirection"] = A.load.Ref(properties + 472 + 268 + 100, undefined);
            properties_ffi["VPN"]["OpenVPN"]["NsCertType"] = A.load.Ref(properties + 472 + 268 + 104, undefined);
            properties_ffi["VPN"]["OpenVPN"]["OTP"] = A.load.Ref(properties + 472 + 268 + 108, undefined);
            properties_ffi["VPN"]["OpenVPN"]["Password"] = A.load.Ref(properties + 472 + 268 + 112, undefined);
            if (A.load.Bool(properties + 472 + 268 + 212)) {
              properties_ffi["VPN"]["OpenVPN"]["Port"] = A.load.Int32(properties + 472 + 268 + 116);
            }
            properties_ffi["VPN"]["OpenVPN"]["Proto"] = A.load.Ref(properties + 472 + 268 + 120, undefined);
            if (A.load.Bool(properties + 472 + 268 + 213)) {
              properties_ffi["VPN"]["OpenVPN"]["PushPeerInfo"] = A.load.Bool(properties + 472 + 268 + 124);
            }
            properties_ffi["VPN"]["OpenVPN"]["RemoteCertEKU"] = A.load.Ref(properties + 472 + 268 + 128, undefined);
            properties_ffi["VPN"]["OpenVPN"]["RemoteCertKU"] = A.load.Ref(properties + 472 + 268 + 132, undefined);
            properties_ffi["VPN"]["OpenVPN"]["RemoteCertTLS"] = A.load.Ref(properties + 472 + 268 + 136, undefined);
            if (A.load.Bool(properties + 472 + 268 + 214)) {
              properties_ffi["VPN"]["OpenVPN"]["RenegSec"] = A.load.Int32(properties + 472 + 268 + 140);
            }
            if (A.load.Bool(properties + 472 + 268 + 215)) {
              properties_ffi["VPN"]["OpenVPN"]["SaveCredentials"] = A.load.Bool(properties + 472 + 268 + 144);
            }
            properties_ffi["VPN"]["OpenVPN"]["ServerCAPEMs"] = A.load.Ref(properties + 472 + 268 + 148, undefined);
            properties_ffi["VPN"]["OpenVPN"]["ServerCARefs"] = A.load.Ref(properties + 472 + 268 + 152, undefined);
            properties_ffi["VPN"]["OpenVPN"]["ServerCertRef"] = A.load.Ref(properties + 472 + 268 + 156, undefined);
            if (A.load.Bool(properties + 472 + 268 + 216)) {
              properties_ffi["VPN"]["OpenVPN"]["ServerPollTimeout"] = A.load.Int32(properties + 472 + 268 + 160);
            }
            if (A.load.Bool(properties + 472 + 268 + 217)) {
              properties_ffi["VPN"]["OpenVPN"]["Shaper"] = A.load.Int32(properties + 472 + 268 + 164);
            }
            properties_ffi["VPN"]["OpenVPN"]["StaticChallenge"] = A.load.Ref(properties + 472 + 268 + 168, undefined);
            properties_ffi["VPN"]["OpenVPN"]["TLSAuthContents"] = A.load.Ref(properties + 472 + 268 + 172, undefined);
            properties_ffi["VPN"]["OpenVPN"]["TLSRemote"] = A.load.Ref(properties + 472 + 268 + 176, undefined);
            properties_ffi["VPN"]["OpenVPN"]["TLSVersionMin"] = A.load.Ref(properties + 472 + 268 + 180, undefined);
            properties_ffi["VPN"]["OpenVPN"]["UserAuthenticationType"] = A.load.Ref(
              properties + 472 + 268 + 184,
              undefined
            );
            properties_ffi["VPN"]["OpenVPN"]["Username"] = A.load.Ref(properties + 472 + 268 + 188, undefined);
            properties_ffi["VPN"]["OpenVPN"]["Verb"] = A.load.Ref(properties + 472 + 268 + 192, undefined);
            properties_ffi["VPN"]["OpenVPN"]["VerifyHash"] = A.load.Ref(properties + 472 + 268 + 196, undefined);
            if (A.load.Bool(properties + 472 + 268 + 200 + 8)) {
              properties_ffi["VPN"]["OpenVPN"]["VerifyX509"] = {};
              properties_ffi["VPN"]["OpenVPN"]["VerifyX509"]["Name"] = A.load.Ref(
                properties + 472 + 268 + 200 + 0,
                undefined
              );
              properties_ffi["VPN"]["OpenVPN"]["VerifyX509"]["Type"] = A.load.Ref(
                properties + 472 + 268 + 200 + 4,
                undefined
              );
            }
          }
          if (A.load.Bool(properties + 472 + 488 + 8)) {
            properties_ffi["VPN"]["ThirdPartyVPN"] = {};
            properties_ffi["VPN"]["ThirdPartyVPN"]["ExtensionID"] = A.load.Ref(properties + 472 + 488 + 0, undefined);
            properties_ffi["VPN"]["ThirdPartyVPN"]["ProviderName"] = A.load.Ref(properties + 472 + 488 + 4, undefined);
          }
          properties_ffi["VPN"]["Type"] = A.load.Ref(properties + 472 + 500, undefined);
        }
        if (A.load.Bool(properties + 980 + 161)) {
          properties_ffi["WiFi"] = {};
          if (A.load.Bool(properties + 980 + 156)) {
            properties_ffi["WiFi"]["AllowGatewayARPPolling"] = A.load.Bool(properties + 980 + 0);
          }
          if (A.load.Bool(properties + 980 + 157)) {
            properties_ffi["WiFi"]["AutoConnect"] = A.load.Bool(properties + 980 + 1);
          }
          properties_ffi["WiFi"]["BSSID"] = A.load.Ref(properties + 980 + 4, undefined);
          if (A.load.Bool(properties + 980 + 8 + 113)) {
            properties_ffi["WiFi"]["EAP"] = {};
            properties_ffi["WiFi"]["EAP"]["AnonymousIdentity"] = A.load.Ref(properties + 980 + 8 + 0, undefined);
            if (A.load.Bool(properties + 980 + 8 + 4 + 49)) {
              properties_ffi["WiFi"]["EAP"]["ClientCertPattern"] = {};
              properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(
                properties + 980 + 8 + 4 + 0,
                undefined
              );
              if (A.load.Bool(properties + 980 + 8 + 4 + 4 + 16)) {
                properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"] = {};
                properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(
                  properties + 980 + 8 + 4 + 4 + 0,
                  undefined
                );
                properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(
                  properties + 980 + 8 + 4 + 4 + 4,
                  undefined
                );
                properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(
                  properties + 980 + 8 + 4 + 4 + 8,
                  undefined
                );
                properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(
                  properties + 980 + 8 + 4 + 4 + 12,
                  undefined
                );
              }
              properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(
                properties + 980 + 8 + 4 + 24,
                undefined
              );
              properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(
                properties + 980 + 8 + 4 + 28,
                undefined
              );
              if (A.load.Bool(properties + 980 + 8 + 4 + 32 + 16)) {
                properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Subject"] = {};
                properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(
                  properties + 980 + 8 + 4 + 32 + 0,
                  undefined
                );
                properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(
                  properties + 980 + 8 + 4 + 32 + 4,
                  undefined
                );
                properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(
                  properties + 980 + 8 + 4 + 32 + 8,
                  undefined
                );
                properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(
                  properties + 980 + 8 + 4 + 32 + 12,
                  undefined
                );
              }
            }
            properties_ffi["WiFi"]["EAP"]["ClientCertPKCS11Id"] = A.load.Ref(properties + 980 + 8 + 56, undefined);
            properties_ffi["WiFi"]["EAP"]["ClientCertProvisioningProfileId"] = A.load.Ref(
              properties + 980 + 8 + 60,
              undefined
            );
            properties_ffi["WiFi"]["EAP"]["ClientCertRef"] = A.load.Ref(properties + 980 + 8 + 64, undefined);
            properties_ffi["WiFi"]["EAP"]["ClientCertType"] = A.load.Ref(properties + 980 + 8 + 68, undefined);
            properties_ffi["WiFi"]["EAP"]["Identity"] = A.load.Ref(properties + 980 + 8 + 72, undefined);
            properties_ffi["WiFi"]["EAP"]["Inner"] = A.load.Ref(properties + 980 + 8 + 76, undefined);
            properties_ffi["WiFi"]["EAP"]["Outer"] = A.load.Ref(properties + 980 + 8 + 80, undefined);
            properties_ffi["WiFi"]["EAP"]["Password"] = A.load.Ref(properties + 980 + 8 + 84, undefined);
            if (A.load.Bool(properties + 980 + 8 + 110)) {
              properties_ffi["WiFi"]["EAP"]["SaveCredentials"] = A.load.Bool(properties + 980 + 8 + 88);
            }
            properties_ffi["WiFi"]["EAP"]["ServerCAPEMs"] = A.load.Ref(properties + 980 + 8 + 92, undefined);
            properties_ffi["WiFi"]["EAP"]["ServerCARefs"] = A.load.Ref(properties + 980 + 8 + 96, undefined);
            properties_ffi["WiFi"]["EAP"]["SubjectMatch"] = A.load.Ref(properties + 980 + 8 + 100, undefined);
            properties_ffi["WiFi"]["EAP"]["TLSVersionMax"] = A.load.Ref(properties + 980 + 8 + 104, undefined);
            if (A.load.Bool(properties + 980 + 8 + 111)) {
              properties_ffi["WiFi"]["EAP"]["UseProactiveKeyCaching"] = A.load.Bool(properties + 980 + 8 + 108);
            }
            if (A.load.Bool(properties + 980 + 8 + 112)) {
              properties_ffi["WiFi"]["EAP"]["UseSystemCAs"] = A.load.Bool(properties + 980 + 8 + 109);
            }
          }
          if (A.load.Bool(properties + 980 + 158)) {
            properties_ffi["WiFi"]["Frequency"] = A.load.Int32(properties + 980 + 124);
          }
          properties_ffi["WiFi"]["FrequencyList"] = A.load.Ref(properties + 980 + 128, undefined);
          properties_ffi["WiFi"]["HexSSID"] = A.load.Ref(properties + 980 + 132, undefined);
          if (A.load.Bool(properties + 980 + 159)) {
            properties_ffi["WiFi"]["HiddenSSID"] = A.load.Bool(properties + 980 + 136);
          }
          properties_ffi["WiFi"]["Passphrase"] = A.load.Ref(properties + 980 + 140, undefined);
          properties_ffi["WiFi"]["SSID"] = A.load.Ref(properties + 980 + 144, undefined);
          properties_ffi["WiFi"]["Security"] = A.load.Ref(properties + 980 + 148, undefined);
          if (A.load.Bool(properties + 980 + 160)) {
            properties_ffi["WiFi"]["SignalStrength"] = A.load.Int32(properties + 980 + 152);
          }
        }

        const _ret = WEBEXT.networkingPrivate.createNetwork(shared === A.H.TRUE, properties_ffi);
        A.store.Ref(retPtr, _ret);
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
    "has_DisableNetworkType": (): heap.Ref<boolean> => {
      if (WEBEXT?.networkingPrivate && "disableNetworkType" in WEBEXT?.networkingPrivate) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_DisableNetworkType": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.disableNetworkType);
    },
    "call_DisableNetworkType": (retPtr: Pointer, networkType: number): void => {
      const _ret = WEBEXT.networkingPrivate.disableNetworkType(
        networkType > 0 && networkType <= 7
          ? ["All", "Cellular", "Ethernet", "Tether", "VPN", "Wireless", "WiFi"][networkType - 1]
          : undefined
      );
    },
    "try_DisableNetworkType": (retPtr: Pointer, errPtr: Pointer, networkType: number): heap.Ref<boolean> => {
      try {
        const _ret = WEBEXT.networkingPrivate.disableNetworkType(
          networkType > 0 && networkType <= 7
            ? ["All", "Cellular", "Ethernet", "Tether", "VPN", "Wireless", "WiFi"][networkType - 1]
            : undefined
        );
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
    "has_EnableNetworkType": (): heap.Ref<boolean> => {
      if (WEBEXT?.networkingPrivate && "enableNetworkType" in WEBEXT?.networkingPrivate) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_EnableNetworkType": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.enableNetworkType);
    },
    "call_EnableNetworkType": (retPtr: Pointer, networkType: number): void => {
      const _ret = WEBEXT.networkingPrivate.enableNetworkType(
        networkType > 0 && networkType <= 7
          ? ["All", "Cellular", "Ethernet", "Tether", "VPN", "Wireless", "WiFi"][networkType - 1]
          : undefined
      );
    },
    "try_EnableNetworkType": (retPtr: Pointer, errPtr: Pointer, networkType: number): heap.Ref<boolean> => {
      try {
        const _ret = WEBEXT.networkingPrivate.enableNetworkType(
          networkType > 0 && networkType <= 7
            ? ["All", "Cellular", "Ethernet", "Tether", "VPN", "Wireless", "WiFi"][networkType - 1]
            : undefined
        );
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
    "has_ForgetNetwork": (): heap.Ref<boolean> => {
      if (WEBEXT?.networkingPrivate && "forgetNetwork" in WEBEXT?.networkingPrivate) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_ForgetNetwork": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.forgetNetwork);
    },
    "call_ForgetNetwork": (retPtr: Pointer, networkGuid: heap.Ref<object>): void => {
      const _ret = WEBEXT.networkingPrivate.forgetNetwork(A.H.get<object>(networkGuid));
      A.store.Ref(retPtr, _ret);
    },
    "try_ForgetNetwork": (retPtr: Pointer, errPtr: Pointer, networkGuid: heap.Ref<object>): heap.Ref<boolean> => {
      try {
        const _ret = WEBEXT.networkingPrivate.forgetNetwork(A.H.get<object>(networkGuid));
        A.store.Ref(retPtr, _ret);
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
    "has_GetCaptivePortalStatus": (): heap.Ref<boolean> => {
      if (WEBEXT?.networkingPrivate && "getCaptivePortalStatus" in WEBEXT?.networkingPrivate) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_GetCaptivePortalStatus": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.getCaptivePortalStatus);
    },
    "call_GetCaptivePortalStatus": (retPtr: Pointer, networkGuid: heap.Ref<object>): void => {
      const _ret = WEBEXT.networkingPrivate.getCaptivePortalStatus(A.H.get<object>(networkGuid));
      A.store.Ref(retPtr, _ret);
    },
    "try_GetCaptivePortalStatus": (
      retPtr: Pointer,
      errPtr: Pointer,
      networkGuid: heap.Ref<object>
    ): heap.Ref<boolean> => {
      try {
        const _ret = WEBEXT.networkingPrivate.getCaptivePortalStatus(A.H.get<object>(networkGuid));
        A.store.Ref(retPtr, _ret);
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
    "has_GetCertificateLists": (): heap.Ref<boolean> => {
      if (WEBEXT?.networkingPrivate && "getCertificateLists" in WEBEXT?.networkingPrivate) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_GetCertificateLists": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.getCertificateLists);
    },
    "call_GetCertificateLists": (retPtr: Pointer): void => {
      const _ret = WEBEXT.networkingPrivate.getCertificateLists();
      A.store.Ref(retPtr, _ret);
    },
    "try_GetCertificateLists": (retPtr: Pointer, errPtr: Pointer): heap.Ref<boolean> => {
      try {
        const _ret = WEBEXT.networkingPrivate.getCertificateLists();
        A.store.Ref(retPtr, _ret);
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
    "has_GetDeviceStates": (): heap.Ref<boolean> => {
      if (WEBEXT?.networkingPrivate && "getDeviceStates" in WEBEXT?.networkingPrivate) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_GetDeviceStates": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.getDeviceStates);
    },
    "call_GetDeviceStates": (retPtr: Pointer): void => {
      const _ret = WEBEXT.networkingPrivate.getDeviceStates();
      A.store.Ref(retPtr, _ret);
    },
    "try_GetDeviceStates": (retPtr: Pointer, errPtr: Pointer): heap.Ref<boolean> => {
      try {
        const _ret = WEBEXT.networkingPrivate.getDeviceStates();
        A.store.Ref(retPtr, _ret);
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
    "has_GetEnabledNetworkTypes": (): heap.Ref<boolean> => {
      if (WEBEXT?.networkingPrivate && "getEnabledNetworkTypes" in WEBEXT?.networkingPrivate) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_GetEnabledNetworkTypes": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.getEnabledNetworkTypes);
    },
    "call_GetEnabledNetworkTypes": (retPtr: Pointer, callback: heap.Ref<object>): void => {
      const _ret = WEBEXT.networkingPrivate.getEnabledNetworkTypes(A.H.get<object>(callback));
    },
    "try_GetEnabledNetworkTypes": (retPtr: Pointer, errPtr: Pointer, callback: heap.Ref<object>): heap.Ref<boolean> => {
      try {
        const _ret = WEBEXT.networkingPrivate.getEnabledNetworkTypes(A.H.get<object>(callback));
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
    "has_GetGlobalPolicy": (): heap.Ref<boolean> => {
      if (WEBEXT?.networkingPrivate && "getGlobalPolicy" in WEBEXT?.networkingPrivate) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_GetGlobalPolicy": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.getGlobalPolicy);
    },
    "call_GetGlobalPolicy": (retPtr: Pointer): void => {
      const _ret = WEBEXT.networkingPrivate.getGlobalPolicy();
      A.store.Ref(retPtr, _ret);
    },
    "try_GetGlobalPolicy": (retPtr: Pointer, errPtr: Pointer): heap.Ref<boolean> => {
      try {
        const _ret = WEBEXT.networkingPrivate.getGlobalPolicy();
        A.store.Ref(retPtr, _ret);
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
    "has_GetManagedProperties": (): heap.Ref<boolean> => {
      if (WEBEXT?.networkingPrivate && "getManagedProperties" in WEBEXT?.networkingPrivate) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_GetManagedProperties": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.getManagedProperties);
    },
    "call_GetManagedProperties": (retPtr: Pointer, networkGuid: heap.Ref<object>): void => {
      const _ret = WEBEXT.networkingPrivate.getManagedProperties(A.H.get<object>(networkGuid));
      A.store.Ref(retPtr, _ret);
    },
    "try_GetManagedProperties": (
      retPtr: Pointer,
      errPtr: Pointer,
      networkGuid: heap.Ref<object>
    ): heap.Ref<boolean> => {
      try {
        const _ret = WEBEXT.networkingPrivate.getManagedProperties(A.H.get<object>(networkGuid));
        A.store.Ref(retPtr, _ret);
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
    "has_GetNetworks": (): heap.Ref<boolean> => {
      if (WEBEXT?.networkingPrivate && "getNetworks" in WEBEXT?.networkingPrivate) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_GetNetworks": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.getNetworks);
    },
    "call_GetNetworks": (retPtr: Pointer, filter: Pointer): void => {
      const filter_ffi = {};

      filter_ffi["networkType"] = A.load.Enum(filter + 0, [
        "All",
        "Cellular",
        "Ethernet",
        "Tether",
        "VPN",
        "Wireless",
        "WiFi",
      ]);
      if (A.load.Bool(filter + 12)) {
        filter_ffi["visible"] = A.load.Bool(filter + 4);
      }
      if (A.load.Bool(filter + 13)) {
        filter_ffi["configured"] = A.load.Bool(filter + 5);
      }
      if (A.load.Bool(filter + 14)) {
        filter_ffi["limit"] = A.load.Int32(filter + 8);
      }

      const _ret = WEBEXT.networkingPrivate.getNetworks(filter_ffi);
      A.store.Ref(retPtr, _ret);
    },
    "try_GetNetworks": (retPtr: Pointer, errPtr: Pointer, filter: Pointer): heap.Ref<boolean> => {
      try {
        const filter_ffi = {};

        filter_ffi["networkType"] = A.load.Enum(filter + 0, [
          "All",
          "Cellular",
          "Ethernet",
          "Tether",
          "VPN",
          "Wireless",
          "WiFi",
        ]);
        if (A.load.Bool(filter + 12)) {
          filter_ffi["visible"] = A.load.Bool(filter + 4);
        }
        if (A.load.Bool(filter + 13)) {
          filter_ffi["configured"] = A.load.Bool(filter + 5);
        }
        if (A.load.Bool(filter + 14)) {
          filter_ffi["limit"] = A.load.Int32(filter + 8);
        }

        const _ret = WEBEXT.networkingPrivate.getNetworks(filter_ffi);
        A.store.Ref(retPtr, _ret);
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
    "has_GetProperties": (): heap.Ref<boolean> => {
      if (WEBEXT?.networkingPrivate && "getProperties" in WEBEXT?.networkingPrivate) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_GetProperties": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.getProperties);
    },
    "call_GetProperties": (retPtr: Pointer, networkGuid: heap.Ref<object>): void => {
      const _ret = WEBEXT.networkingPrivate.getProperties(A.H.get<object>(networkGuid));
      A.store.Ref(retPtr, _ret);
    },
    "try_GetProperties": (retPtr: Pointer, errPtr: Pointer, networkGuid: heap.Ref<object>): heap.Ref<boolean> => {
      try {
        const _ret = WEBEXT.networkingPrivate.getProperties(A.H.get<object>(networkGuid));
        A.store.Ref(retPtr, _ret);
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
    "has_GetState": (): heap.Ref<boolean> => {
      if (WEBEXT?.networkingPrivate && "getState" in WEBEXT?.networkingPrivate) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_GetState": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.getState);
    },
    "call_GetState": (retPtr: Pointer, networkGuid: heap.Ref<object>): void => {
      const _ret = WEBEXT.networkingPrivate.getState(A.H.get<object>(networkGuid));
      A.store.Ref(retPtr, _ret);
    },
    "try_GetState": (retPtr: Pointer, errPtr: Pointer, networkGuid: heap.Ref<object>): heap.Ref<boolean> => {
      try {
        const _ret = WEBEXT.networkingPrivate.getState(A.H.get<object>(networkGuid));
        A.store.Ref(retPtr, _ret);
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
    "has_GetVisibleNetworks": (): heap.Ref<boolean> => {
      if (WEBEXT?.networkingPrivate && "getVisibleNetworks" in WEBEXT?.networkingPrivate) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_GetVisibleNetworks": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.getVisibleNetworks);
    },
    "call_GetVisibleNetworks": (retPtr: Pointer, networkType: number, callback: heap.Ref<object>): void => {
      const _ret = WEBEXT.networkingPrivate.getVisibleNetworks(
        networkType > 0 && networkType <= 7
          ? ["All", "Cellular", "Ethernet", "Tether", "VPN", "Wireless", "WiFi"][networkType - 1]
          : undefined,
        A.H.get<object>(callback)
      );
    },
    "try_GetVisibleNetworks": (
      retPtr: Pointer,
      errPtr: Pointer,
      networkType: number,
      callback: heap.Ref<object>
    ): heap.Ref<boolean> => {
      try {
        const _ret = WEBEXT.networkingPrivate.getVisibleNetworks(
          networkType > 0 && networkType <= 7
            ? ["All", "Cellular", "Ethernet", "Tether", "VPN", "Wireless", "WiFi"][networkType - 1]
            : undefined,
          A.H.get<object>(callback)
        );
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
    "has_OnCertificateListsChanged": (): heap.Ref<boolean> => {
      if (
        WEBEXT?.networkingPrivate?.onCertificateListsChanged &&
        "addListener" in WEBEXT?.networkingPrivate?.onCertificateListsChanged
      ) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_OnCertificateListsChanged": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.onCertificateListsChanged.addListener);
    },
    "call_OnCertificateListsChanged": (retPtr: Pointer, callback: heap.Ref<object>): void => {
      const _ret = WEBEXT.networkingPrivate.onCertificateListsChanged.addListener(A.H.get<object>(callback));
    },
    "try_OnCertificateListsChanged": (
      retPtr: Pointer,
      errPtr: Pointer,
      callback: heap.Ref<object>
    ): heap.Ref<boolean> => {
      try {
        const _ret = WEBEXT.networkingPrivate.onCertificateListsChanged.addListener(A.H.get<object>(callback));
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
    "has_OffCertificateListsChanged": (): heap.Ref<boolean> => {
      if (
        WEBEXT?.networkingPrivate?.onCertificateListsChanged &&
        "removeListener" in WEBEXT?.networkingPrivate?.onCertificateListsChanged
      ) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_OffCertificateListsChanged": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.onCertificateListsChanged.removeListener);
    },
    "call_OffCertificateListsChanged": (retPtr: Pointer, callback: heap.Ref<object>): void => {
      const _ret = WEBEXT.networkingPrivate.onCertificateListsChanged.removeListener(A.H.get<object>(callback));
    },
    "try_OffCertificateListsChanged": (
      retPtr: Pointer,
      errPtr: Pointer,
      callback: heap.Ref<object>
    ): heap.Ref<boolean> => {
      try {
        const _ret = WEBEXT.networkingPrivate.onCertificateListsChanged.removeListener(A.H.get<object>(callback));
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
    "has_HasOnCertificateListsChanged": (): heap.Ref<boolean> => {
      if (
        WEBEXT?.networkingPrivate?.onCertificateListsChanged &&
        "hasListener" in WEBEXT?.networkingPrivate?.onCertificateListsChanged
      ) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_HasOnCertificateListsChanged": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.onCertificateListsChanged.hasListener);
    },
    "call_HasOnCertificateListsChanged": (retPtr: Pointer, callback: heap.Ref<object>): void => {
      const _ret = WEBEXT.networkingPrivate.onCertificateListsChanged.hasListener(A.H.get<object>(callback));
      A.store.Bool(retPtr, _ret);
    },
    "try_HasOnCertificateListsChanged": (
      retPtr: Pointer,
      errPtr: Pointer,
      callback: heap.Ref<object>
    ): heap.Ref<boolean> => {
      try {
        const _ret = WEBEXT.networkingPrivate.onCertificateListsChanged.hasListener(A.H.get<object>(callback));
        A.store.Bool(retPtr, _ret);
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
    "has_OnDeviceStateListChanged": (): heap.Ref<boolean> => {
      if (
        WEBEXT?.networkingPrivate?.onDeviceStateListChanged &&
        "addListener" in WEBEXT?.networkingPrivate?.onDeviceStateListChanged
      ) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_OnDeviceStateListChanged": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.onDeviceStateListChanged.addListener);
    },
    "call_OnDeviceStateListChanged": (retPtr: Pointer, callback: heap.Ref<object>): void => {
      const _ret = WEBEXT.networkingPrivate.onDeviceStateListChanged.addListener(A.H.get<object>(callback));
    },
    "try_OnDeviceStateListChanged": (
      retPtr: Pointer,
      errPtr: Pointer,
      callback: heap.Ref<object>
    ): heap.Ref<boolean> => {
      try {
        const _ret = WEBEXT.networkingPrivate.onDeviceStateListChanged.addListener(A.H.get<object>(callback));
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
    "has_OffDeviceStateListChanged": (): heap.Ref<boolean> => {
      if (
        WEBEXT?.networkingPrivate?.onDeviceStateListChanged &&
        "removeListener" in WEBEXT?.networkingPrivate?.onDeviceStateListChanged
      ) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_OffDeviceStateListChanged": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.onDeviceStateListChanged.removeListener);
    },
    "call_OffDeviceStateListChanged": (retPtr: Pointer, callback: heap.Ref<object>): void => {
      const _ret = WEBEXT.networkingPrivate.onDeviceStateListChanged.removeListener(A.H.get<object>(callback));
    },
    "try_OffDeviceStateListChanged": (
      retPtr: Pointer,
      errPtr: Pointer,
      callback: heap.Ref<object>
    ): heap.Ref<boolean> => {
      try {
        const _ret = WEBEXT.networkingPrivate.onDeviceStateListChanged.removeListener(A.H.get<object>(callback));
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
    "has_HasOnDeviceStateListChanged": (): heap.Ref<boolean> => {
      if (
        WEBEXT?.networkingPrivate?.onDeviceStateListChanged &&
        "hasListener" in WEBEXT?.networkingPrivate?.onDeviceStateListChanged
      ) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_HasOnDeviceStateListChanged": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.onDeviceStateListChanged.hasListener);
    },
    "call_HasOnDeviceStateListChanged": (retPtr: Pointer, callback: heap.Ref<object>): void => {
      const _ret = WEBEXT.networkingPrivate.onDeviceStateListChanged.hasListener(A.H.get<object>(callback));
      A.store.Bool(retPtr, _ret);
    },
    "try_HasOnDeviceStateListChanged": (
      retPtr: Pointer,
      errPtr: Pointer,
      callback: heap.Ref<object>
    ): heap.Ref<boolean> => {
      try {
        const _ret = WEBEXT.networkingPrivate.onDeviceStateListChanged.hasListener(A.H.get<object>(callback));
        A.store.Bool(retPtr, _ret);
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
    "has_OnNetworkListChanged": (): heap.Ref<boolean> => {
      if (
        WEBEXT?.networkingPrivate?.onNetworkListChanged &&
        "addListener" in WEBEXT?.networkingPrivate?.onNetworkListChanged
      ) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_OnNetworkListChanged": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.onNetworkListChanged.addListener);
    },
    "call_OnNetworkListChanged": (retPtr: Pointer, callback: heap.Ref<object>): void => {
      const _ret = WEBEXT.networkingPrivate.onNetworkListChanged.addListener(A.H.get<object>(callback));
    },
    "try_OnNetworkListChanged": (retPtr: Pointer, errPtr: Pointer, callback: heap.Ref<object>): heap.Ref<boolean> => {
      try {
        const _ret = WEBEXT.networkingPrivate.onNetworkListChanged.addListener(A.H.get<object>(callback));
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
    "has_OffNetworkListChanged": (): heap.Ref<boolean> => {
      if (
        WEBEXT?.networkingPrivate?.onNetworkListChanged &&
        "removeListener" in WEBEXT?.networkingPrivate?.onNetworkListChanged
      ) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_OffNetworkListChanged": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.onNetworkListChanged.removeListener);
    },
    "call_OffNetworkListChanged": (retPtr: Pointer, callback: heap.Ref<object>): void => {
      const _ret = WEBEXT.networkingPrivate.onNetworkListChanged.removeListener(A.H.get<object>(callback));
    },
    "try_OffNetworkListChanged": (retPtr: Pointer, errPtr: Pointer, callback: heap.Ref<object>): heap.Ref<boolean> => {
      try {
        const _ret = WEBEXT.networkingPrivate.onNetworkListChanged.removeListener(A.H.get<object>(callback));
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
    "has_HasOnNetworkListChanged": (): heap.Ref<boolean> => {
      if (
        WEBEXT?.networkingPrivate?.onNetworkListChanged &&
        "hasListener" in WEBEXT?.networkingPrivate?.onNetworkListChanged
      ) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_HasOnNetworkListChanged": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.onNetworkListChanged.hasListener);
    },
    "call_HasOnNetworkListChanged": (retPtr: Pointer, callback: heap.Ref<object>): void => {
      const _ret = WEBEXT.networkingPrivate.onNetworkListChanged.hasListener(A.H.get<object>(callback));
      A.store.Bool(retPtr, _ret);
    },
    "try_HasOnNetworkListChanged": (
      retPtr: Pointer,
      errPtr: Pointer,
      callback: heap.Ref<object>
    ): heap.Ref<boolean> => {
      try {
        const _ret = WEBEXT.networkingPrivate.onNetworkListChanged.hasListener(A.H.get<object>(callback));
        A.store.Bool(retPtr, _ret);
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
    "has_OnNetworksChanged": (): heap.Ref<boolean> => {
      if (
        WEBEXT?.networkingPrivate?.onNetworksChanged &&
        "addListener" in WEBEXT?.networkingPrivate?.onNetworksChanged
      ) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_OnNetworksChanged": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.onNetworksChanged.addListener);
    },
    "call_OnNetworksChanged": (retPtr: Pointer, callback: heap.Ref<object>): void => {
      const _ret = WEBEXT.networkingPrivate.onNetworksChanged.addListener(A.H.get<object>(callback));
    },
    "try_OnNetworksChanged": (retPtr: Pointer, errPtr: Pointer, callback: heap.Ref<object>): heap.Ref<boolean> => {
      try {
        const _ret = WEBEXT.networkingPrivate.onNetworksChanged.addListener(A.H.get<object>(callback));
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
    "has_OffNetworksChanged": (): heap.Ref<boolean> => {
      if (
        WEBEXT?.networkingPrivate?.onNetworksChanged &&
        "removeListener" in WEBEXT?.networkingPrivate?.onNetworksChanged
      ) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_OffNetworksChanged": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.onNetworksChanged.removeListener);
    },
    "call_OffNetworksChanged": (retPtr: Pointer, callback: heap.Ref<object>): void => {
      const _ret = WEBEXT.networkingPrivate.onNetworksChanged.removeListener(A.H.get<object>(callback));
    },
    "try_OffNetworksChanged": (retPtr: Pointer, errPtr: Pointer, callback: heap.Ref<object>): heap.Ref<boolean> => {
      try {
        const _ret = WEBEXT.networkingPrivate.onNetworksChanged.removeListener(A.H.get<object>(callback));
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
    "has_HasOnNetworksChanged": (): heap.Ref<boolean> => {
      if (
        WEBEXT?.networkingPrivate?.onNetworksChanged &&
        "hasListener" in WEBEXT?.networkingPrivate?.onNetworksChanged
      ) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_HasOnNetworksChanged": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.onNetworksChanged.hasListener);
    },
    "call_HasOnNetworksChanged": (retPtr: Pointer, callback: heap.Ref<object>): void => {
      const _ret = WEBEXT.networkingPrivate.onNetworksChanged.hasListener(A.H.get<object>(callback));
      A.store.Bool(retPtr, _ret);
    },
    "try_HasOnNetworksChanged": (retPtr: Pointer, errPtr: Pointer, callback: heap.Ref<object>): heap.Ref<boolean> => {
      try {
        const _ret = WEBEXT.networkingPrivate.onNetworksChanged.hasListener(A.H.get<object>(callback));
        A.store.Bool(retPtr, _ret);
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
    "has_OnPortalDetectionCompleted": (): heap.Ref<boolean> => {
      if (
        WEBEXT?.networkingPrivate?.onPortalDetectionCompleted &&
        "addListener" in WEBEXT?.networkingPrivate?.onPortalDetectionCompleted
      ) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_OnPortalDetectionCompleted": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.onPortalDetectionCompleted.addListener);
    },
    "call_OnPortalDetectionCompleted": (retPtr: Pointer, callback: heap.Ref<object>): void => {
      const _ret = WEBEXT.networkingPrivate.onPortalDetectionCompleted.addListener(A.H.get<object>(callback));
    },
    "try_OnPortalDetectionCompleted": (
      retPtr: Pointer,
      errPtr: Pointer,
      callback: heap.Ref<object>
    ): heap.Ref<boolean> => {
      try {
        const _ret = WEBEXT.networkingPrivate.onPortalDetectionCompleted.addListener(A.H.get<object>(callback));
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
    "has_OffPortalDetectionCompleted": (): heap.Ref<boolean> => {
      if (
        WEBEXT?.networkingPrivate?.onPortalDetectionCompleted &&
        "removeListener" in WEBEXT?.networkingPrivate?.onPortalDetectionCompleted
      ) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_OffPortalDetectionCompleted": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.onPortalDetectionCompleted.removeListener);
    },
    "call_OffPortalDetectionCompleted": (retPtr: Pointer, callback: heap.Ref<object>): void => {
      const _ret = WEBEXT.networkingPrivate.onPortalDetectionCompleted.removeListener(A.H.get<object>(callback));
    },
    "try_OffPortalDetectionCompleted": (
      retPtr: Pointer,
      errPtr: Pointer,
      callback: heap.Ref<object>
    ): heap.Ref<boolean> => {
      try {
        const _ret = WEBEXT.networkingPrivate.onPortalDetectionCompleted.removeListener(A.H.get<object>(callback));
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
    "has_HasOnPortalDetectionCompleted": (): heap.Ref<boolean> => {
      if (
        WEBEXT?.networkingPrivate?.onPortalDetectionCompleted &&
        "hasListener" in WEBEXT?.networkingPrivate?.onPortalDetectionCompleted
      ) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_HasOnPortalDetectionCompleted": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.onPortalDetectionCompleted.hasListener);
    },
    "call_HasOnPortalDetectionCompleted": (retPtr: Pointer, callback: heap.Ref<object>): void => {
      const _ret = WEBEXT.networkingPrivate.onPortalDetectionCompleted.hasListener(A.H.get<object>(callback));
      A.store.Bool(retPtr, _ret);
    },
    "try_HasOnPortalDetectionCompleted": (
      retPtr: Pointer,
      errPtr: Pointer,
      callback: heap.Ref<object>
    ): heap.Ref<boolean> => {
      try {
        const _ret = WEBEXT.networkingPrivate.onPortalDetectionCompleted.hasListener(A.H.get<object>(callback));
        A.store.Bool(retPtr, _ret);
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
    "has_RequestNetworkScan": (): heap.Ref<boolean> => {
      if (WEBEXT?.networkingPrivate && "requestNetworkScan" in WEBEXT?.networkingPrivate) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_RequestNetworkScan": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.requestNetworkScan);
    },
    "call_RequestNetworkScan": (retPtr: Pointer, networkType: number): void => {
      const _ret = WEBEXT.networkingPrivate.requestNetworkScan(
        networkType > 0 && networkType <= 7
          ? ["All", "Cellular", "Ethernet", "Tether", "VPN", "Wireless", "WiFi"][networkType - 1]
          : undefined
      );
    },
    "try_RequestNetworkScan": (retPtr: Pointer, errPtr: Pointer, networkType: number): heap.Ref<boolean> => {
      try {
        const _ret = WEBEXT.networkingPrivate.requestNetworkScan(
          networkType > 0 && networkType <= 7
            ? ["All", "Cellular", "Ethernet", "Tether", "VPN", "Wireless", "WiFi"][networkType - 1]
            : undefined
        );
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
    "has_SelectCellularMobileNetwork": (): heap.Ref<boolean> => {
      if (WEBEXT?.networkingPrivate && "selectCellularMobileNetwork" in WEBEXT?.networkingPrivate) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_SelectCellularMobileNetwork": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.selectCellularMobileNetwork);
    },
    "call_SelectCellularMobileNetwork": (
      retPtr: Pointer,
      networkGuid: heap.Ref<object>,
      networkId: heap.Ref<object>
    ): void => {
      const _ret = WEBEXT.networkingPrivate.selectCellularMobileNetwork(
        A.H.get<object>(networkGuid),
        A.H.get<object>(networkId)
      );
      A.store.Ref(retPtr, _ret);
    },
    "try_SelectCellularMobileNetwork": (
      retPtr: Pointer,
      errPtr: Pointer,
      networkGuid: heap.Ref<object>,
      networkId: heap.Ref<object>
    ): heap.Ref<boolean> => {
      try {
        const _ret = WEBEXT.networkingPrivate.selectCellularMobileNetwork(
          A.H.get<object>(networkGuid),
          A.H.get<object>(networkId)
        );
        A.store.Ref(retPtr, _ret);
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
    "has_SetCellularSimState": (): heap.Ref<boolean> => {
      if (WEBEXT?.networkingPrivate && "setCellularSimState" in WEBEXT?.networkingPrivate) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_SetCellularSimState": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.setCellularSimState);
    },
    "call_SetCellularSimState": (retPtr: Pointer, networkGuid: heap.Ref<object>, simState: Pointer): void => {
      const simState_ffi = {};

      if (A.load.Bool(simState + 12)) {
        simState_ffi["requirePin"] = A.load.Bool(simState + 0);
      }
      simState_ffi["currentPin"] = A.load.Ref(simState + 4, undefined);
      simState_ffi["newPin"] = A.load.Ref(simState + 8, undefined);

      const _ret = WEBEXT.networkingPrivate.setCellularSimState(A.H.get<object>(networkGuid), simState_ffi);
      A.store.Ref(retPtr, _ret);
    },
    "try_SetCellularSimState": (
      retPtr: Pointer,
      errPtr: Pointer,
      networkGuid: heap.Ref<object>,
      simState: Pointer
    ): heap.Ref<boolean> => {
      try {
        const simState_ffi = {};

        if (A.load.Bool(simState + 12)) {
          simState_ffi["requirePin"] = A.load.Bool(simState + 0);
        }
        simState_ffi["currentPin"] = A.load.Ref(simState + 4, undefined);
        simState_ffi["newPin"] = A.load.Ref(simState + 8, undefined);

        const _ret = WEBEXT.networkingPrivate.setCellularSimState(A.H.get<object>(networkGuid), simState_ffi);
        A.store.Ref(retPtr, _ret);
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
    "has_SetProperties": (): heap.Ref<boolean> => {
      if (WEBEXT?.networkingPrivate && "setProperties" in WEBEXT?.networkingPrivate) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_SetProperties": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.setProperties);
    },
    "call_SetProperties": (retPtr: Pointer, networkGuid: heap.Ref<object>, properties: Pointer): void => {
      const properties_ffi = {};

      if (A.load.Bool(properties + 0 + 219)) {
        properties_ffi["Cellular"] = {};
        if (A.load.Bool(properties + 0 + 213)) {
          properties_ffi["Cellular"]["AutoConnect"] = A.load.Bool(properties + 0 + 0);
        }
        if (A.load.Bool(properties + 0 + 4 + 28)) {
          properties_ffi["Cellular"]["APN"] = {};
          properties_ffi["Cellular"]["APN"]["AccessPointName"] = A.load.Ref(properties + 0 + 4 + 0, undefined);
          properties_ffi["Cellular"]["APN"]["Authentication"] = A.load.Ref(properties + 0 + 4 + 4, undefined);
          properties_ffi["Cellular"]["APN"]["Language"] = A.load.Ref(properties + 0 + 4 + 8, undefined);
          properties_ffi["Cellular"]["APN"]["LocalizedName"] = A.load.Ref(properties + 0 + 4 + 12, undefined);
          properties_ffi["Cellular"]["APN"]["Name"] = A.load.Ref(properties + 0 + 4 + 16, undefined);
          properties_ffi["Cellular"]["APN"]["Password"] = A.load.Ref(properties + 0 + 4 + 20, undefined);
          properties_ffi["Cellular"]["APN"]["Username"] = A.load.Ref(properties + 0 + 4 + 24, undefined);
        }
        properties_ffi["Cellular"]["APNList"] = A.load.Ref(properties + 0 + 36, undefined);
        properties_ffi["Cellular"]["ActivationType"] = A.load.Ref(properties + 0 + 40, undefined);
        properties_ffi["Cellular"]["ActivationState"] = A.load.Enum(properties + 0 + 44, [
          "Activated",
          "Activating",
          "NotActivated",
          "PartiallyActivated",
        ]);
        if (A.load.Bool(properties + 0 + 214)) {
          properties_ffi["Cellular"]["AllowRoaming"] = A.load.Bool(properties + 0 + 48);
        }
        properties_ffi["Cellular"]["ESN"] = A.load.Ref(properties + 0 + 52, undefined);
        properties_ffi["Cellular"]["Family"] = A.load.Ref(properties + 0 + 56, undefined);
        properties_ffi["Cellular"]["FirmwareRevision"] = A.load.Ref(properties + 0 + 60, undefined);
        properties_ffi["Cellular"]["FoundNetworks"] = A.load.Ref(properties + 0 + 64, undefined);
        properties_ffi["Cellular"]["HardwareRevision"] = A.load.Ref(properties + 0 + 68, undefined);
        if (A.load.Bool(properties + 0 + 72 + 12)) {
          properties_ffi["Cellular"]["HomeProvider"] = {};
          properties_ffi["Cellular"]["HomeProvider"]["Name"] = A.load.Ref(properties + 0 + 72 + 0, undefined);
          properties_ffi["Cellular"]["HomeProvider"]["Code"] = A.load.Ref(properties + 0 + 72 + 4, undefined);
          properties_ffi["Cellular"]["HomeProvider"]["Country"] = A.load.Ref(properties + 0 + 72 + 8, undefined);
        }
        properties_ffi["Cellular"]["ICCID"] = A.load.Ref(properties + 0 + 88, undefined);
        properties_ffi["Cellular"]["IMEI"] = A.load.Ref(properties + 0 + 92, undefined);
        if (A.load.Bool(properties + 0 + 96 + 28)) {
          properties_ffi["Cellular"]["LastGoodAPN"] = {};
          properties_ffi["Cellular"]["LastGoodAPN"]["AccessPointName"] = A.load.Ref(properties + 0 + 96 + 0, undefined);
          properties_ffi["Cellular"]["LastGoodAPN"]["Authentication"] = A.load.Ref(properties + 0 + 96 + 4, undefined);
          properties_ffi["Cellular"]["LastGoodAPN"]["Language"] = A.load.Ref(properties + 0 + 96 + 8, undefined);
          properties_ffi["Cellular"]["LastGoodAPN"]["LocalizedName"] = A.load.Ref(properties + 0 + 96 + 12, undefined);
          properties_ffi["Cellular"]["LastGoodAPN"]["Name"] = A.load.Ref(properties + 0 + 96 + 16, undefined);
          properties_ffi["Cellular"]["LastGoodAPN"]["Password"] = A.load.Ref(properties + 0 + 96 + 20, undefined);
          properties_ffi["Cellular"]["LastGoodAPN"]["Username"] = A.load.Ref(properties + 0 + 96 + 24, undefined);
        }
        properties_ffi["Cellular"]["Manufacturer"] = A.load.Ref(properties + 0 + 128, undefined);
        properties_ffi["Cellular"]["MDN"] = A.load.Ref(properties + 0 + 132, undefined);
        properties_ffi["Cellular"]["MEID"] = A.load.Ref(properties + 0 + 136, undefined);
        properties_ffi["Cellular"]["MIN"] = A.load.Ref(properties + 0 + 140, undefined);
        properties_ffi["Cellular"]["ModelID"] = A.load.Ref(properties + 0 + 144, undefined);
        properties_ffi["Cellular"]["NetworkTechnology"] = A.load.Ref(properties + 0 + 148, undefined);
        if (A.load.Bool(properties + 0 + 152 + 12)) {
          properties_ffi["Cellular"]["PaymentPortal"] = {};
          properties_ffi["Cellular"]["PaymentPortal"]["Method"] = A.load.Ref(properties + 0 + 152 + 0, undefined);
          properties_ffi["Cellular"]["PaymentPortal"]["PostData"] = A.load.Ref(properties + 0 + 152 + 4, undefined);
          properties_ffi["Cellular"]["PaymentPortal"]["Url"] = A.load.Ref(properties + 0 + 152 + 8, undefined);
        }
        properties_ffi["Cellular"]["RoamingState"] = A.load.Ref(properties + 0 + 168, undefined);
        if (A.load.Bool(properties + 0 + 215)) {
          properties_ffi["Cellular"]["Scanning"] = A.load.Bool(properties + 0 + 172);
        }
        if (A.load.Bool(properties + 0 + 176 + 12)) {
          properties_ffi["Cellular"]["ServingOperator"] = {};
          properties_ffi["Cellular"]["ServingOperator"]["Name"] = A.load.Ref(properties + 0 + 176 + 0, undefined);
          properties_ffi["Cellular"]["ServingOperator"]["Code"] = A.load.Ref(properties + 0 + 176 + 4, undefined);
          properties_ffi["Cellular"]["ServingOperator"]["Country"] = A.load.Ref(properties + 0 + 176 + 8, undefined);
        }
        if (A.load.Bool(properties + 0 + 192 + 14)) {
          properties_ffi["Cellular"]["SIMLockStatus"] = {};
          properties_ffi["Cellular"]["SIMLockStatus"]["LockType"] = A.load.Ref(properties + 0 + 192 + 0, undefined);
          if (A.load.Bool(properties + 0 + 192 + 12)) {
            properties_ffi["Cellular"]["SIMLockStatus"]["LockEnabled"] = A.load.Bool(properties + 0 + 192 + 4);
          }
          if (A.load.Bool(properties + 0 + 192 + 13)) {
            properties_ffi["Cellular"]["SIMLockStatus"]["RetriesLeft"] = A.load.Int32(properties + 0 + 192 + 8);
          }
        }
        if (A.load.Bool(properties + 0 + 216)) {
          properties_ffi["Cellular"]["SIMPresent"] = A.load.Bool(properties + 0 + 207);
        }
        if (A.load.Bool(properties + 0 + 217)) {
          properties_ffi["Cellular"]["SignalStrength"] = A.load.Int32(properties + 0 + 208);
        }
        if (A.load.Bool(properties + 0 + 218)) {
          properties_ffi["Cellular"]["SupportNetworkScan"] = A.load.Bool(properties + 0 + 212);
        }
      }
      if (A.load.Bool(properties + 220 + 123)) {
        properties_ffi["Ethernet"] = {};
        if (A.load.Bool(properties + 220 + 122)) {
          properties_ffi["Ethernet"]["AutoConnect"] = A.load.Bool(properties + 220 + 0);
        }
        properties_ffi["Ethernet"]["Authentication"] = A.load.Ref(properties + 220 + 4, undefined);
        if (A.load.Bool(properties + 220 + 8 + 113)) {
          properties_ffi["Ethernet"]["EAP"] = {};
          properties_ffi["Ethernet"]["EAP"]["AnonymousIdentity"] = A.load.Ref(properties + 220 + 8 + 0, undefined);
          if (A.load.Bool(properties + 220 + 8 + 4 + 49)) {
            properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"] = {};
            properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(
              properties + 220 + 8 + 4 + 0,
              undefined
            );
            if (A.load.Bool(properties + 220 + 8 + 4 + 4 + 16)) {
              properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"] = {};
              properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(
                properties + 220 + 8 + 4 + 4 + 0,
                undefined
              );
              properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(
                properties + 220 + 8 + 4 + 4 + 4,
                undefined
              );
              properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(
                properties + 220 + 8 + 4 + 4 + 8,
                undefined
              );
              properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(
                properties + 220 + 8 + 4 + 4 + 12,
                undefined
              );
            }
            properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(
              properties + 220 + 8 + 4 + 24,
              undefined
            );
            properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(
              properties + 220 + 8 + 4 + 28,
              undefined
            );
            if (A.load.Bool(properties + 220 + 8 + 4 + 32 + 16)) {
              properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"] = {};
              properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(
                properties + 220 + 8 + 4 + 32 + 0,
                undefined
              );
              properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(
                properties + 220 + 8 + 4 + 32 + 4,
                undefined
              );
              properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(
                properties + 220 + 8 + 4 + 32 + 8,
                undefined
              );
              properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(
                properties + 220 + 8 + 4 + 32 + 12,
                undefined
              );
            }
          }
          properties_ffi["Ethernet"]["EAP"]["ClientCertPKCS11Id"] = A.load.Ref(properties + 220 + 8 + 56, undefined);
          properties_ffi["Ethernet"]["EAP"]["ClientCertProvisioningProfileId"] = A.load.Ref(
            properties + 220 + 8 + 60,
            undefined
          );
          properties_ffi["Ethernet"]["EAP"]["ClientCertRef"] = A.load.Ref(properties + 220 + 8 + 64, undefined);
          properties_ffi["Ethernet"]["EAP"]["ClientCertType"] = A.load.Ref(properties + 220 + 8 + 68, undefined);
          properties_ffi["Ethernet"]["EAP"]["Identity"] = A.load.Ref(properties + 220 + 8 + 72, undefined);
          properties_ffi["Ethernet"]["EAP"]["Inner"] = A.load.Ref(properties + 220 + 8 + 76, undefined);
          properties_ffi["Ethernet"]["EAP"]["Outer"] = A.load.Ref(properties + 220 + 8 + 80, undefined);
          properties_ffi["Ethernet"]["EAP"]["Password"] = A.load.Ref(properties + 220 + 8 + 84, undefined);
          if (A.load.Bool(properties + 220 + 8 + 110)) {
            properties_ffi["Ethernet"]["EAP"]["SaveCredentials"] = A.load.Bool(properties + 220 + 8 + 88);
          }
          properties_ffi["Ethernet"]["EAP"]["ServerCAPEMs"] = A.load.Ref(properties + 220 + 8 + 92, undefined);
          properties_ffi["Ethernet"]["EAP"]["ServerCARefs"] = A.load.Ref(properties + 220 + 8 + 96, undefined);
          properties_ffi["Ethernet"]["EAP"]["SubjectMatch"] = A.load.Ref(properties + 220 + 8 + 100, undefined);
          properties_ffi["Ethernet"]["EAP"]["TLSVersionMax"] = A.load.Ref(properties + 220 + 8 + 104, undefined);
          if (A.load.Bool(properties + 220 + 8 + 111)) {
            properties_ffi["Ethernet"]["EAP"]["UseProactiveKeyCaching"] = A.load.Bool(properties + 220 + 8 + 108);
          }
          if (A.load.Bool(properties + 220 + 8 + 112)) {
            properties_ffi["Ethernet"]["EAP"]["UseSystemCAs"] = A.load.Bool(properties + 220 + 8 + 109);
          }
        }
      }
      properties_ffi["GUID"] = A.load.Ref(properties + 344, undefined);
      properties_ffi["IPAddressConfigType"] = A.load.Enum(properties + 348, ["DHCP", "Static"]);
      properties_ffi["Name"] = A.load.Ref(properties + 352, undefined);
      properties_ffi["NameServersConfigType"] = A.load.Enum(properties + 356, ["DHCP", "Static"]);
      if (A.load.Bool(properties + 1142)) {
        properties_ffi["Priority"] = A.load.Int32(properties + 360);
      }
      if (A.load.Bool(properties + 364 + 60)) {
        properties_ffi["ProxySettings"] = {};
        properties_ffi["ProxySettings"]["Type"] = A.load.Enum(properties + 364 + 0, [
          "Direct",
          "Manual",
          "PAC",
          "WPAD",
        ]);
        if (A.load.Bool(properties + 364 + 4 + 46)) {
          properties_ffi["ProxySettings"]["Manual"] = {};
          if (A.load.Bool(properties + 364 + 4 + 0 + 9)) {
            properties_ffi["ProxySettings"]["Manual"]["HTTPProxy"] = {};
            properties_ffi["ProxySettings"]["Manual"]["HTTPProxy"]["Host"] = A.load.Ref(
              properties + 364 + 4 + 0 + 0,
              undefined
            );
            if (A.load.Bool(properties + 364 + 4 + 0 + 8)) {
              properties_ffi["ProxySettings"]["Manual"]["HTTPProxy"]["Port"] = A.load.Int32(
                properties + 364 + 4 + 0 + 4
              );
            }
          }
          if (A.load.Bool(properties + 364 + 4 + 12 + 9)) {
            properties_ffi["ProxySettings"]["Manual"]["SecureHTTPProxy"] = {};
            properties_ffi["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Host"] = A.load.Ref(
              properties + 364 + 4 + 12 + 0,
              undefined
            );
            if (A.load.Bool(properties + 364 + 4 + 12 + 8)) {
              properties_ffi["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"] = A.load.Int32(
                properties + 364 + 4 + 12 + 4
              );
            }
          }
          if (A.load.Bool(properties + 364 + 4 + 24 + 9)) {
            properties_ffi["ProxySettings"]["Manual"]["FTPProxy"] = {};
            properties_ffi["ProxySettings"]["Manual"]["FTPProxy"]["Host"] = A.load.Ref(
              properties + 364 + 4 + 24 + 0,
              undefined
            );
            if (A.load.Bool(properties + 364 + 4 + 24 + 8)) {
              properties_ffi["ProxySettings"]["Manual"]["FTPProxy"]["Port"] = A.load.Int32(
                properties + 364 + 4 + 24 + 4
              );
            }
          }
          if (A.load.Bool(properties + 364 + 4 + 36 + 9)) {
            properties_ffi["ProxySettings"]["Manual"]["SOCKS"] = {};
            properties_ffi["ProxySettings"]["Manual"]["SOCKS"]["Host"] = A.load.Ref(
              properties + 364 + 4 + 36 + 0,
              undefined
            );
            if (A.load.Bool(properties + 364 + 4 + 36 + 8)) {
              properties_ffi["ProxySettings"]["Manual"]["SOCKS"]["Port"] = A.load.Int32(properties + 364 + 4 + 36 + 4);
            }
          }
        }
        properties_ffi["ProxySettings"]["ExcludeDomains"] = A.load.Ref(properties + 364 + 52, undefined);
        properties_ffi["ProxySettings"]["PAC"] = A.load.Ref(properties + 364 + 56, undefined);
      }
      if (A.load.Bool(properties + 428 + 37)) {
        properties_ffi["StaticIPConfig"] = {};
        properties_ffi["StaticIPConfig"]["Gateway"] = A.load.Ref(properties + 428 + 0, undefined);
        properties_ffi["StaticIPConfig"]["IPAddress"] = A.load.Ref(properties + 428 + 4, undefined);
        properties_ffi["StaticIPConfig"]["ExcludedRoutes"] = A.load.Ref(properties + 428 + 8, undefined);
        properties_ffi["StaticIPConfig"]["IncludedRoutes"] = A.load.Ref(properties + 428 + 12, undefined);
        properties_ffi["StaticIPConfig"]["NameServers"] = A.load.Ref(properties + 428 + 16, undefined);
        properties_ffi["StaticIPConfig"]["SearchDomains"] = A.load.Ref(properties + 428 + 20, undefined);
        if (A.load.Bool(properties + 428 + 36)) {
          properties_ffi["StaticIPConfig"]["RoutingPrefix"] = A.load.Int32(properties + 428 + 24);
        }
        properties_ffi["StaticIPConfig"]["Type"] = A.load.Ref(properties + 428 + 28, undefined);
        properties_ffi["StaticIPConfig"]["WebProxyAutoDiscoveryUrl"] = A.load.Ref(properties + 428 + 32, undefined);
      }
      properties_ffi["Type"] = A.load.Enum(properties + 468, [
        "All",
        "Cellular",
        "Ethernet",
        "Tether",
        "VPN",
        "Wireless",
        "WiFi",
      ]);
      if (A.load.Bool(properties + 472 + 505)) {
        properties_ffi["VPN"] = {};
        if (A.load.Bool(properties + 472 + 504)) {
          properties_ffi["VPN"]["AutoConnect"] = A.load.Bool(properties + 472 + 0);
        }
        properties_ffi["VPN"]["Host"] = A.load.Ref(properties + 472 + 4, undefined);
        if (A.load.Bool(properties + 472 + 8 + 236)) {
          properties_ffi["VPN"]["IPsec"] = {};
          properties_ffi["VPN"]["IPsec"]["AuthenticationType"] = A.load.Ref(properties + 472 + 8 + 0, undefined);
          if (A.load.Bool(properties + 472 + 8 + 4 + 49)) {
            properties_ffi["VPN"]["IPsec"]["ClientCertPattern"] = {};
            properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(
              properties + 472 + 8 + 4 + 0,
              undefined
            );
            if (A.load.Bool(properties + 472 + 8 + 4 + 4 + 16)) {
              properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"] = {};
              properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(
                properties + 472 + 8 + 4 + 4 + 0,
                undefined
              );
              properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(
                properties + 472 + 8 + 4 + 4 + 4,
                undefined
              );
              properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(
                properties + 472 + 8 + 4 + 4 + 8,
                undefined
              );
              properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(
                properties + 472 + 8 + 4 + 4 + 12,
                undefined
              );
            }
            properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(
              properties + 472 + 8 + 4 + 24,
              undefined
            );
            properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(
              properties + 472 + 8 + 4 + 28,
              undefined
            );
            if (A.load.Bool(properties + 472 + 8 + 4 + 32 + 16)) {
              properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Subject"] = {};
              properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(
                properties + 472 + 8 + 4 + 32 + 0,
                undefined
              );
              properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(
                properties + 472 + 8 + 4 + 32 + 4,
                undefined
              );
              properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(
                properties + 472 + 8 + 4 + 32 + 8,
                undefined
              );
              properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(
                properties + 472 + 8 + 4 + 32 + 12,
                undefined
              );
            }
          }
          properties_ffi["VPN"]["IPsec"]["ClientCertPKCS11Id"] = A.load.Ref(properties + 472 + 8 + 56, undefined);
          properties_ffi["VPN"]["IPsec"]["ClientCertProvisioningProfileId"] = A.load.Ref(
            properties + 472 + 8 + 60,
            undefined
          );
          properties_ffi["VPN"]["IPsec"]["ClientCertRef"] = A.load.Ref(properties + 472 + 8 + 64, undefined);
          properties_ffi["VPN"]["IPsec"]["ClientCertType"] = A.load.Ref(properties + 472 + 8 + 68, undefined);
          if (A.load.Bool(properties + 472 + 8 + 72 + 113)) {
            properties_ffi["VPN"]["IPsec"]["EAP"] = {};
            properties_ffi["VPN"]["IPsec"]["EAP"]["AnonymousIdentity"] = A.load.Ref(
              properties + 472 + 8 + 72 + 0,
              undefined
            );
            if (A.load.Bool(properties + 472 + 8 + 72 + 4 + 49)) {
              properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"] = {};
              properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(
                properties + 472 + 8 + 72 + 4 + 0,
                undefined
              );
              if (A.load.Bool(properties + 472 + 8 + 72 + 4 + 4 + 16)) {
                properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"] = {};
                properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(
                  properties + 472 + 8 + 72 + 4 + 4 + 0,
                  undefined
                );
                properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(
                  properties + 472 + 8 + 72 + 4 + 4 + 4,
                  undefined
                );
                properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(
                  properties + 472 + 8 + 72 + 4 + 4 + 8,
                  undefined
                );
                properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(
                  properties + 472 + 8 + 72 + 4 + 4 + 12,
                  undefined
                );
              }
              properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(
                properties + 472 + 8 + 72 + 4 + 24,
                undefined
              );
              properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(
                properties + 472 + 8 + 72 + 4 + 28,
                undefined
              );
              if (A.load.Bool(properties + 472 + 8 + 72 + 4 + 32 + 16)) {
                properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"] = {};
                properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(
                  properties + 472 + 8 + 72 + 4 + 32 + 0,
                  undefined
                );
                properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(
                  properties + 472 + 8 + 72 + 4 + 32 + 4,
                  undefined
                );
                properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(
                  properties + 472 + 8 + 72 + 4 + 32 + 8,
                  undefined
                );
                properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] =
                  A.load.Ref(properties + 472 + 8 + 72 + 4 + 32 + 12, undefined);
              }
            }
            properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPKCS11Id"] = A.load.Ref(
              properties + 472 + 8 + 72 + 56,
              undefined
            );
            properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertProvisioningProfileId"] = A.load.Ref(
              properties + 472 + 8 + 72 + 60,
              undefined
            );
            properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertRef"] = A.load.Ref(
              properties + 472 + 8 + 72 + 64,
              undefined
            );
            properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertType"] = A.load.Ref(
              properties + 472 + 8 + 72 + 68,
              undefined
            );
            properties_ffi["VPN"]["IPsec"]["EAP"]["Identity"] = A.load.Ref(properties + 472 + 8 + 72 + 72, undefined);
            properties_ffi["VPN"]["IPsec"]["EAP"]["Inner"] = A.load.Ref(properties + 472 + 8 + 72 + 76, undefined);
            properties_ffi["VPN"]["IPsec"]["EAP"]["Outer"] = A.load.Ref(properties + 472 + 8 + 72 + 80, undefined);
            properties_ffi["VPN"]["IPsec"]["EAP"]["Password"] = A.load.Ref(properties + 472 + 8 + 72 + 84, undefined);
            if (A.load.Bool(properties + 472 + 8 + 72 + 110)) {
              properties_ffi["VPN"]["IPsec"]["EAP"]["SaveCredentials"] = A.load.Bool(properties + 472 + 8 + 72 + 88);
            }
            properties_ffi["VPN"]["IPsec"]["EAP"]["ServerCAPEMs"] = A.load.Ref(
              properties + 472 + 8 + 72 + 92,
              undefined
            );
            properties_ffi["VPN"]["IPsec"]["EAP"]["ServerCARefs"] = A.load.Ref(
              properties + 472 + 8 + 72 + 96,
              undefined
            );
            properties_ffi["VPN"]["IPsec"]["EAP"]["SubjectMatch"] = A.load.Ref(
              properties + 472 + 8 + 72 + 100,
              undefined
            );
            properties_ffi["VPN"]["IPsec"]["EAP"]["TLSVersionMax"] = A.load.Ref(
              properties + 472 + 8 + 72 + 104,
              undefined
            );
            if (A.load.Bool(properties + 472 + 8 + 72 + 111)) {
              properties_ffi["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"] = A.load.Bool(
                properties + 472 + 8 + 72 + 108
              );
            }
            if (A.load.Bool(properties + 472 + 8 + 72 + 112)) {
              properties_ffi["VPN"]["IPsec"]["EAP"]["UseSystemCAs"] = A.load.Bool(properties + 472 + 8 + 72 + 109);
            }
          }
          properties_ffi["VPN"]["IPsec"]["Group"] = A.load.Ref(properties + 472 + 8 + 188, undefined);
          if (A.load.Bool(properties + 472 + 8 + 234)) {
            properties_ffi["VPN"]["IPsec"]["IKEVersion"] = A.load.Int32(properties + 472 + 8 + 192);
          }
          properties_ffi["VPN"]["IPsec"]["LocalIdentity"] = A.load.Ref(properties + 472 + 8 + 196, undefined);
          properties_ffi["VPN"]["IPsec"]["PSK"] = A.load.Ref(properties + 472 + 8 + 200, undefined);
          properties_ffi["VPN"]["IPsec"]["RemoteIdentity"] = A.load.Ref(properties + 472 + 8 + 204, undefined);
          if (A.load.Bool(properties + 472 + 8 + 235)) {
            properties_ffi["VPN"]["IPsec"]["SaveCredentials"] = A.load.Bool(properties + 472 + 8 + 208);
          }
          properties_ffi["VPN"]["IPsec"]["ServerCAPEMs"] = A.load.Ref(properties + 472 + 8 + 212, undefined);
          properties_ffi["VPN"]["IPsec"]["ServerCARefs"] = A.load.Ref(properties + 472 + 8 + 216, undefined);
          if (A.load.Bool(properties + 472 + 8 + 220 + 13)) {
            properties_ffi["VPN"]["IPsec"]["XAUTH"] = {};
            properties_ffi["VPN"]["IPsec"]["XAUTH"]["Password"] = A.load.Ref(properties + 472 + 8 + 220 + 0, undefined);
            if (A.load.Bool(properties + 472 + 8 + 220 + 12)) {
              properties_ffi["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"] = A.load.Bool(properties + 472 + 8 + 220 + 4);
            }
            properties_ffi["VPN"]["IPsec"]["XAUTH"]["Username"] = A.load.Ref(properties + 472 + 8 + 220 + 8, undefined);
          }
        }
        if (A.load.Bool(properties + 472 + 248 + 18)) {
          properties_ffi["VPN"]["L2TP"] = {};
          if (A.load.Bool(properties + 472 + 248 + 16)) {
            properties_ffi["VPN"]["L2TP"]["LcpEchoDisabled"] = A.load.Bool(properties + 472 + 248 + 0);
          }
          properties_ffi["VPN"]["L2TP"]["Password"] = A.load.Ref(properties + 472 + 248 + 4, undefined);
          if (A.load.Bool(properties + 472 + 248 + 17)) {
            properties_ffi["VPN"]["L2TP"]["SaveCredentials"] = A.load.Bool(properties + 472 + 248 + 8);
          }
          properties_ffi["VPN"]["L2TP"]["Username"] = A.load.Ref(properties + 472 + 248 + 12, undefined);
        }
        if (A.load.Bool(properties + 472 + 268 + 218)) {
          properties_ffi["VPN"]["OpenVPN"] = {};
          properties_ffi["VPN"]["OpenVPN"]["Auth"] = A.load.Ref(properties + 472 + 268 + 0, undefined);
          properties_ffi["VPN"]["OpenVPN"]["AuthRetry"] = A.load.Ref(properties + 472 + 268 + 4, undefined);
          if (A.load.Bool(properties + 472 + 268 + 209)) {
            properties_ffi["VPN"]["OpenVPN"]["AuthNoCache"] = A.load.Bool(properties + 472 + 268 + 8);
          }
          properties_ffi["VPN"]["OpenVPN"]["Cipher"] = A.load.Ref(properties + 472 + 268 + 12, undefined);
          properties_ffi["VPN"]["OpenVPN"]["ClientCertPKCS11Id"] = A.load.Ref(properties + 472 + 268 + 16, undefined);
          if (A.load.Bool(properties + 472 + 268 + 20 + 49)) {
            properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"] = {};
            properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(
              properties + 472 + 268 + 20 + 0,
              undefined
            );
            if (A.load.Bool(properties + 472 + 268 + 20 + 4 + 16)) {
              properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"] = {};
              properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(
                properties + 472 + 268 + 20 + 4 + 0,
                undefined
              );
              properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(
                properties + 472 + 268 + 20 + 4 + 4,
                undefined
              );
              properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(
                properties + 472 + 268 + 20 + 4 + 8,
                undefined
              );
              properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(
                properties + 472 + 268 + 20 + 4 + 12,
                undefined
              );
            }
            properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(
              properties + 472 + 268 + 20 + 24,
              undefined
            );
            properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(
              properties + 472 + 268 + 20 + 28,
              undefined
            );
            if (A.load.Bool(properties + 472 + 268 + 20 + 32 + 16)) {
              properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"] = {};
              properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(
                properties + 472 + 268 + 20 + 32 + 0,
                undefined
              );
              properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(
                properties + 472 + 268 + 20 + 32 + 4,
                undefined
              );
              properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(
                properties + 472 + 268 + 20 + 32 + 8,
                undefined
              );
              properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(
                properties + 472 + 268 + 20 + 32 + 12,
                undefined
              );
            }
          }
          properties_ffi["VPN"]["OpenVPN"]["ClientCertProvisioningProfileId"] = A.load.Ref(
            properties + 472 + 268 + 72,
            undefined
          );
          properties_ffi["VPN"]["OpenVPN"]["ClientCertRef"] = A.load.Ref(properties + 472 + 268 + 76, undefined);
          properties_ffi["VPN"]["OpenVPN"]["ClientCertType"] = A.load.Ref(properties + 472 + 268 + 80, undefined);
          properties_ffi["VPN"]["OpenVPN"]["CompLZO"] = A.load.Ref(properties + 472 + 268 + 84, undefined);
          if (A.load.Bool(properties + 472 + 268 + 210)) {
            properties_ffi["VPN"]["OpenVPN"]["CompNoAdapt"] = A.load.Bool(properties + 472 + 268 + 88);
          }
          properties_ffi["VPN"]["OpenVPN"]["ExtraHosts"] = A.load.Ref(properties + 472 + 268 + 92, undefined);
          if (A.load.Bool(properties + 472 + 268 + 211)) {
            properties_ffi["VPN"]["OpenVPN"]["IgnoreDefaultRoute"] = A.load.Bool(properties + 472 + 268 + 96);
          }
          properties_ffi["VPN"]["OpenVPN"]["KeyDirection"] = A.load.Ref(properties + 472 + 268 + 100, undefined);
          properties_ffi["VPN"]["OpenVPN"]["NsCertType"] = A.load.Ref(properties + 472 + 268 + 104, undefined);
          properties_ffi["VPN"]["OpenVPN"]["OTP"] = A.load.Ref(properties + 472 + 268 + 108, undefined);
          properties_ffi["VPN"]["OpenVPN"]["Password"] = A.load.Ref(properties + 472 + 268 + 112, undefined);
          if (A.load.Bool(properties + 472 + 268 + 212)) {
            properties_ffi["VPN"]["OpenVPN"]["Port"] = A.load.Int32(properties + 472 + 268 + 116);
          }
          properties_ffi["VPN"]["OpenVPN"]["Proto"] = A.load.Ref(properties + 472 + 268 + 120, undefined);
          if (A.load.Bool(properties + 472 + 268 + 213)) {
            properties_ffi["VPN"]["OpenVPN"]["PushPeerInfo"] = A.load.Bool(properties + 472 + 268 + 124);
          }
          properties_ffi["VPN"]["OpenVPN"]["RemoteCertEKU"] = A.load.Ref(properties + 472 + 268 + 128, undefined);
          properties_ffi["VPN"]["OpenVPN"]["RemoteCertKU"] = A.load.Ref(properties + 472 + 268 + 132, undefined);
          properties_ffi["VPN"]["OpenVPN"]["RemoteCertTLS"] = A.load.Ref(properties + 472 + 268 + 136, undefined);
          if (A.load.Bool(properties + 472 + 268 + 214)) {
            properties_ffi["VPN"]["OpenVPN"]["RenegSec"] = A.load.Int32(properties + 472 + 268 + 140);
          }
          if (A.load.Bool(properties + 472 + 268 + 215)) {
            properties_ffi["VPN"]["OpenVPN"]["SaveCredentials"] = A.load.Bool(properties + 472 + 268 + 144);
          }
          properties_ffi["VPN"]["OpenVPN"]["ServerCAPEMs"] = A.load.Ref(properties + 472 + 268 + 148, undefined);
          properties_ffi["VPN"]["OpenVPN"]["ServerCARefs"] = A.load.Ref(properties + 472 + 268 + 152, undefined);
          properties_ffi["VPN"]["OpenVPN"]["ServerCertRef"] = A.load.Ref(properties + 472 + 268 + 156, undefined);
          if (A.load.Bool(properties + 472 + 268 + 216)) {
            properties_ffi["VPN"]["OpenVPN"]["ServerPollTimeout"] = A.load.Int32(properties + 472 + 268 + 160);
          }
          if (A.load.Bool(properties + 472 + 268 + 217)) {
            properties_ffi["VPN"]["OpenVPN"]["Shaper"] = A.load.Int32(properties + 472 + 268 + 164);
          }
          properties_ffi["VPN"]["OpenVPN"]["StaticChallenge"] = A.load.Ref(properties + 472 + 268 + 168, undefined);
          properties_ffi["VPN"]["OpenVPN"]["TLSAuthContents"] = A.load.Ref(properties + 472 + 268 + 172, undefined);
          properties_ffi["VPN"]["OpenVPN"]["TLSRemote"] = A.load.Ref(properties + 472 + 268 + 176, undefined);
          properties_ffi["VPN"]["OpenVPN"]["TLSVersionMin"] = A.load.Ref(properties + 472 + 268 + 180, undefined);
          properties_ffi["VPN"]["OpenVPN"]["UserAuthenticationType"] = A.load.Ref(
            properties + 472 + 268 + 184,
            undefined
          );
          properties_ffi["VPN"]["OpenVPN"]["Username"] = A.load.Ref(properties + 472 + 268 + 188, undefined);
          properties_ffi["VPN"]["OpenVPN"]["Verb"] = A.load.Ref(properties + 472 + 268 + 192, undefined);
          properties_ffi["VPN"]["OpenVPN"]["VerifyHash"] = A.load.Ref(properties + 472 + 268 + 196, undefined);
          if (A.load.Bool(properties + 472 + 268 + 200 + 8)) {
            properties_ffi["VPN"]["OpenVPN"]["VerifyX509"] = {};
            properties_ffi["VPN"]["OpenVPN"]["VerifyX509"]["Name"] = A.load.Ref(
              properties + 472 + 268 + 200 + 0,
              undefined
            );
            properties_ffi["VPN"]["OpenVPN"]["VerifyX509"]["Type"] = A.load.Ref(
              properties + 472 + 268 + 200 + 4,
              undefined
            );
          }
        }
        if (A.load.Bool(properties + 472 + 488 + 8)) {
          properties_ffi["VPN"]["ThirdPartyVPN"] = {};
          properties_ffi["VPN"]["ThirdPartyVPN"]["ExtensionID"] = A.load.Ref(properties + 472 + 488 + 0, undefined);
          properties_ffi["VPN"]["ThirdPartyVPN"]["ProviderName"] = A.load.Ref(properties + 472 + 488 + 4, undefined);
        }
        properties_ffi["VPN"]["Type"] = A.load.Ref(properties + 472 + 500, undefined);
      }
      if (A.load.Bool(properties + 980 + 161)) {
        properties_ffi["WiFi"] = {};
        if (A.load.Bool(properties + 980 + 156)) {
          properties_ffi["WiFi"]["AllowGatewayARPPolling"] = A.load.Bool(properties + 980 + 0);
        }
        if (A.load.Bool(properties + 980 + 157)) {
          properties_ffi["WiFi"]["AutoConnect"] = A.load.Bool(properties + 980 + 1);
        }
        properties_ffi["WiFi"]["BSSID"] = A.load.Ref(properties + 980 + 4, undefined);
        if (A.load.Bool(properties + 980 + 8 + 113)) {
          properties_ffi["WiFi"]["EAP"] = {};
          properties_ffi["WiFi"]["EAP"]["AnonymousIdentity"] = A.load.Ref(properties + 980 + 8 + 0, undefined);
          if (A.load.Bool(properties + 980 + 8 + 4 + 49)) {
            properties_ffi["WiFi"]["EAP"]["ClientCertPattern"] = {};
            properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(
              properties + 980 + 8 + 4 + 0,
              undefined
            );
            if (A.load.Bool(properties + 980 + 8 + 4 + 4 + 16)) {
              properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"] = {};
              properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(
                properties + 980 + 8 + 4 + 4 + 0,
                undefined
              );
              properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(
                properties + 980 + 8 + 4 + 4 + 4,
                undefined
              );
              properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(
                properties + 980 + 8 + 4 + 4 + 8,
                undefined
              );
              properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(
                properties + 980 + 8 + 4 + 4 + 12,
                undefined
              );
            }
            properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(
              properties + 980 + 8 + 4 + 24,
              undefined
            );
            properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(
              properties + 980 + 8 + 4 + 28,
              undefined
            );
            if (A.load.Bool(properties + 980 + 8 + 4 + 32 + 16)) {
              properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Subject"] = {};
              properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(
                properties + 980 + 8 + 4 + 32 + 0,
                undefined
              );
              properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(
                properties + 980 + 8 + 4 + 32 + 4,
                undefined
              );
              properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(
                properties + 980 + 8 + 4 + 32 + 8,
                undefined
              );
              properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(
                properties + 980 + 8 + 4 + 32 + 12,
                undefined
              );
            }
          }
          properties_ffi["WiFi"]["EAP"]["ClientCertPKCS11Id"] = A.load.Ref(properties + 980 + 8 + 56, undefined);
          properties_ffi["WiFi"]["EAP"]["ClientCertProvisioningProfileId"] = A.load.Ref(
            properties + 980 + 8 + 60,
            undefined
          );
          properties_ffi["WiFi"]["EAP"]["ClientCertRef"] = A.load.Ref(properties + 980 + 8 + 64, undefined);
          properties_ffi["WiFi"]["EAP"]["ClientCertType"] = A.load.Ref(properties + 980 + 8 + 68, undefined);
          properties_ffi["WiFi"]["EAP"]["Identity"] = A.load.Ref(properties + 980 + 8 + 72, undefined);
          properties_ffi["WiFi"]["EAP"]["Inner"] = A.load.Ref(properties + 980 + 8 + 76, undefined);
          properties_ffi["WiFi"]["EAP"]["Outer"] = A.load.Ref(properties + 980 + 8 + 80, undefined);
          properties_ffi["WiFi"]["EAP"]["Password"] = A.load.Ref(properties + 980 + 8 + 84, undefined);
          if (A.load.Bool(properties + 980 + 8 + 110)) {
            properties_ffi["WiFi"]["EAP"]["SaveCredentials"] = A.load.Bool(properties + 980 + 8 + 88);
          }
          properties_ffi["WiFi"]["EAP"]["ServerCAPEMs"] = A.load.Ref(properties + 980 + 8 + 92, undefined);
          properties_ffi["WiFi"]["EAP"]["ServerCARefs"] = A.load.Ref(properties + 980 + 8 + 96, undefined);
          properties_ffi["WiFi"]["EAP"]["SubjectMatch"] = A.load.Ref(properties + 980 + 8 + 100, undefined);
          properties_ffi["WiFi"]["EAP"]["TLSVersionMax"] = A.load.Ref(properties + 980 + 8 + 104, undefined);
          if (A.load.Bool(properties + 980 + 8 + 111)) {
            properties_ffi["WiFi"]["EAP"]["UseProactiveKeyCaching"] = A.load.Bool(properties + 980 + 8 + 108);
          }
          if (A.load.Bool(properties + 980 + 8 + 112)) {
            properties_ffi["WiFi"]["EAP"]["UseSystemCAs"] = A.load.Bool(properties + 980 + 8 + 109);
          }
        }
        if (A.load.Bool(properties + 980 + 158)) {
          properties_ffi["WiFi"]["Frequency"] = A.load.Int32(properties + 980 + 124);
        }
        properties_ffi["WiFi"]["FrequencyList"] = A.load.Ref(properties + 980 + 128, undefined);
        properties_ffi["WiFi"]["HexSSID"] = A.load.Ref(properties + 980 + 132, undefined);
        if (A.load.Bool(properties + 980 + 159)) {
          properties_ffi["WiFi"]["HiddenSSID"] = A.load.Bool(properties + 980 + 136);
        }
        properties_ffi["WiFi"]["Passphrase"] = A.load.Ref(properties + 980 + 140, undefined);
        properties_ffi["WiFi"]["SSID"] = A.load.Ref(properties + 980 + 144, undefined);
        properties_ffi["WiFi"]["Security"] = A.load.Ref(properties + 980 + 148, undefined);
        if (A.load.Bool(properties + 980 + 160)) {
          properties_ffi["WiFi"]["SignalStrength"] = A.load.Int32(properties + 980 + 152);
        }
      }

      const _ret = WEBEXT.networkingPrivate.setProperties(A.H.get<object>(networkGuid), properties_ffi);
      A.store.Ref(retPtr, _ret);
    },
    "try_SetProperties": (
      retPtr: Pointer,
      errPtr: Pointer,
      networkGuid: heap.Ref<object>,
      properties: Pointer
    ): heap.Ref<boolean> => {
      try {
        const properties_ffi = {};

        if (A.load.Bool(properties + 0 + 219)) {
          properties_ffi["Cellular"] = {};
          if (A.load.Bool(properties + 0 + 213)) {
            properties_ffi["Cellular"]["AutoConnect"] = A.load.Bool(properties + 0 + 0);
          }
          if (A.load.Bool(properties + 0 + 4 + 28)) {
            properties_ffi["Cellular"]["APN"] = {};
            properties_ffi["Cellular"]["APN"]["AccessPointName"] = A.load.Ref(properties + 0 + 4 + 0, undefined);
            properties_ffi["Cellular"]["APN"]["Authentication"] = A.load.Ref(properties + 0 + 4 + 4, undefined);
            properties_ffi["Cellular"]["APN"]["Language"] = A.load.Ref(properties + 0 + 4 + 8, undefined);
            properties_ffi["Cellular"]["APN"]["LocalizedName"] = A.load.Ref(properties + 0 + 4 + 12, undefined);
            properties_ffi["Cellular"]["APN"]["Name"] = A.load.Ref(properties + 0 + 4 + 16, undefined);
            properties_ffi["Cellular"]["APN"]["Password"] = A.load.Ref(properties + 0 + 4 + 20, undefined);
            properties_ffi["Cellular"]["APN"]["Username"] = A.load.Ref(properties + 0 + 4 + 24, undefined);
          }
          properties_ffi["Cellular"]["APNList"] = A.load.Ref(properties + 0 + 36, undefined);
          properties_ffi["Cellular"]["ActivationType"] = A.load.Ref(properties + 0 + 40, undefined);
          properties_ffi["Cellular"]["ActivationState"] = A.load.Enum(properties + 0 + 44, [
            "Activated",
            "Activating",
            "NotActivated",
            "PartiallyActivated",
          ]);
          if (A.load.Bool(properties + 0 + 214)) {
            properties_ffi["Cellular"]["AllowRoaming"] = A.load.Bool(properties + 0 + 48);
          }
          properties_ffi["Cellular"]["ESN"] = A.load.Ref(properties + 0 + 52, undefined);
          properties_ffi["Cellular"]["Family"] = A.load.Ref(properties + 0 + 56, undefined);
          properties_ffi["Cellular"]["FirmwareRevision"] = A.load.Ref(properties + 0 + 60, undefined);
          properties_ffi["Cellular"]["FoundNetworks"] = A.load.Ref(properties + 0 + 64, undefined);
          properties_ffi["Cellular"]["HardwareRevision"] = A.load.Ref(properties + 0 + 68, undefined);
          if (A.load.Bool(properties + 0 + 72 + 12)) {
            properties_ffi["Cellular"]["HomeProvider"] = {};
            properties_ffi["Cellular"]["HomeProvider"]["Name"] = A.load.Ref(properties + 0 + 72 + 0, undefined);
            properties_ffi["Cellular"]["HomeProvider"]["Code"] = A.load.Ref(properties + 0 + 72 + 4, undefined);
            properties_ffi["Cellular"]["HomeProvider"]["Country"] = A.load.Ref(properties + 0 + 72 + 8, undefined);
          }
          properties_ffi["Cellular"]["ICCID"] = A.load.Ref(properties + 0 + 88, undefined);
          properties_ffi["Cellular"]["IMEI"] = A.load.Ref(properties + 0 + 92, undefined);
          if (A.load.Bool(properties + 0 + 96 + 28)) {
            properties_ffi["Cellular"]["LastGoodAPN"] = {};
            properties_ffi["Cellular"]["LastGoodAPN"]["AccessPointName"] = A.load.Ref(
              properties + 0 + 96 + 0,
              undefined
            );
            properties_ffi["Cellular"]["LastGoodAPN"]["Authentication"] = A.load.Ref(
              properties + 0 + 96 + 4,
              undefined
            );
            properties_ffi["Cellular"]["LastGoodAPN"]["Language"] = A.load.Ref(properties + 0 + 96 + 8, undefined);
            properties_ffi["Cellular"]["LastGoodAPN"]["LocalizedName"] = A.load.Ref(
              properties + 0 + 96 + 12,
              undefined
            );
            properties_ffi["Cellular"]["LastGoodAPN"]["Name"] = A.load.Ref(properties + 0 + 96 + 16, undefined);
            properties_ffi["Cellular"]["LastGoodAPN"]["Password"] = A.load.Ref(properties + 0 + 96 + 20, undefined);
            properties_ffi["Cellular"]["LastGoodAPN"]["Username"] = A.load.Ref(properties + 0 + 96 + 24, undefined);
          }
          properties_ffi["Cellular"]["Manufacturer"] = A.load.Ref(properties + 0 + 128, undefined);
          properties_ffi["Cellular"]["MDN"] = A.load.Ref(properties + 0 + 132, undefined);
          properties_ffi["Cellular"]["MEID"] = A.load.Ref(properties + 0 + 136, undefined);
          properties_ffi["Cellular"]["MIN"] = A.load.Ref(properties + 0 + 140, undefined);
          properties_ffi["Cellular"]["ModelID"] = A.load.Ref(properties + 0 + 144, undefined);
          properties_ffi["Cellular"]["NetworkTechnology"] = A.load.Ref(properties + 0 + 148, undefined);
          if (A.load.Bool(properties + 0 + 152 + 12)) {
            properties_ffi["Cellular"]["PaymentPortal"] = {};
            properties_ffi["Cellular"]["PaymentPortal"]["Method"] = A.load.Ref(properties + 0 + 152 + 0, undefined);
            properties_ffi["Cellular"]["PaymentPortal"]["PostData"] = A.load.Ref(properties + 0 + 152 + 4, undefined);
            properties_ffi["Cellular"]["PaymentPortal"]["Url"] = A.load.Ref(properties + 0 + 152 + 8, undefined);
          }
          properties_ffi["Cellular"]["RoamingState"] = A.load.Ref(properties + 0 + 168, undefined);
          if (A.load.Bool(properties + 0 + 215)) {
            properties_ffi["Cellular"]["Scanning"] = A.load.Bool(properties + 0 + 172);
          }
          if (A.load.Bool(properties + 0 + 176 + 12)) {
            properties_ffi["Cellular"]["ServingOperator"] = {};
            properties_ffi["Cellular"]["ServingOperator"]["Name"] = A.load.Ref(properties + 0 + 176 + 0, undefined);
            properties_ffi["Cellular"]["ServingOperator"]["Code"] = A.load.Ref(properties + 0 + 176 + 4, undefined);
            properties_ffi["Cellular"]["ServingOperator"]["Country"] = A.load.Ref(properties + 0 + 176 + 8, undefined);
          }
          if (A.load.Bool(properties + 0 + 192 + 14)) {
            properties_ffi["Cellular"]["SIMLockStatus"] = {};
            properties_ffi["Cellular"]["SIMLockStatus"]["LockType"] = A.load.Ref(properties + 0 + 192 + 0, undefined);
            if (A.load.Bool(properties + 0 + 192 + 12)) {
              properties_ffi["Cellular"]["SIMLockStatus"]["LockEnabled"] = A.load.Bool(properties + 0 + 192 + 4);
            }
            if (A.load.Bool(properties + 0 + 192 + 13)) {
              properties_ffi["Cellular"]["SIMLockStatus"]["RetriesLeft"] = A.load.Int32(properties + 0 + 192 + 8);
            }
          }
          if (A.load.Bool(properties + 0 + 216)) {
            properties_ffi["Cellular"]["SIMPresent"] = A.load.Bool(properties + 0 + 207);
          }
          if (A.load.Bool(properties + 0 + 217)) {
            properties_ffi["Cellular"]["SignalStrength"] = A.load.Int32(properties + 0 + 208);
          }
          if (A.load.Bool(properties + 0 + 218)) {
            properties_ffi["Cellular"]["SupportNetworkScan"] = A.load.Bool(properties + 0 + 212);
          }
        }
        if (A.load.Bool(properties + 220 + 123)) {
          properties_ffi["Ethernet"] = {};
          if (A.load.Bool(properties + 220 + 122)) {
            properties_ffi["Ethernet"]["AutoConnect"] = A.load.Bool(properties + 220 + 0);
          }
          properties_ffi["Ethernet"]["Authentication"] = A.load.Ref(properties + 220 + 4, undefined);
          if (A.load.Bool(properties + 220 + 8 + 113)) {
            properties_ffi["Ethernet"]["EAP"] = {};
            properties_ffi["Ethernet"]["EAP"]["AnonymousIdentity"] = A.load.Ref(properties + 220 + 8 + 0, undefined);
            if (A.load.Bool(properties + 220 + 8 + 4 + 49)) {
              properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"] = {};
              properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(
                properties + 220 + 8 + 4 + 0,
                undefined
              );
              if (A.load.Bool(properties + 220 + 8 + 4 + 4 + 16)) {
                properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"] = {};
                properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(
                  properties + 220 + 8 + 4 + 4 + 0,
                  undefined
                );
                properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(
                  properties + 220 + 8 + 4 + 4 + 4,
                  undefined
                );
                properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(
                  properties + 220 + 8 + 4 + 4 + 8,
                  undefined
                );
                properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(
                  properties + 220 + 8 + 4 + 4 + 12,
                  undefined
                );
              }
              properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(
                properties + 220 + 8 + 4 + 24,
                undefined
              );
              properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(
                properties + 220 + 8 + 4 + 28,
                undefined
              );
              if (A.load.Bool(properties + 220 + 8 + 4 + 32 + 16)) {
                properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"] = {};
                properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(
                  properties + 220 + 8 + 4 + 32 + 0,
                  undefined
                );
                properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(
                  properties + 220 + 8 + 4 + 32 + 4,
                  undefined
                );
                properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(
                  properties + 220 + 8 + 4 + 32 + 8,
                  undefined
                );
                properties_ffi["Ethernet"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(
                  properties + 220 + 8 + 4 + 32 + 12,
                  undefined
                );
              }
            }
            properties_ffi["Ethernet"]["EAP"]["ClientCertPKCS11Id"] = A.load.Ref(properties + 220 + 8 + 56, undefined);
            properties_ffi["Ethernet"]["EAP"]["ClientCertProvisioningProfileId"] = A.load.Ref(
              properties + 220 + 8 + 60,
              undefined
            );
            properties_ffi["Ethernet"]["EAP"]["ClientCertRef"] = A.load.Ref(properties + 220 + 8 + 64, undefined);
            properties_ffi["Ethernet"]["EAP"]["ClientCertType"] = A.load.Ref(properties + 220 + 8 + 68, undefined);
            properties_ffi["Ethernet"]["EAP"]["Identity"] = A.load.Ref(properties + 220 + 8 + 72, undefined);
            properties_ffi["Ethernet"]["EAP"]["Inner"] = A.load.Ref(properties + 220 + 8 + 76, undefined);
            properties_ffi["Ethernet"]["EAP"]["Outer"] = A.load.Ref(properties + 220 + 8 + 80, undefined);
            properties_ffi["Ethernet"]["EAP"]["Password"] = A.load.Ref(properties + 220 + 8 + 84, undefined);
            if (A.load.Bool(properties + 220 + 8 + 110)) {
              properties_ffi["Ethernet"]["EAP"]["SaveCredentials"] = A.load.Bool(properties + 220 + 8 + 88);
            }
            properties_ffi["Ethernet"]["EAP"]["ServerCAPEMs"] = A.load.Ref(properties + 220 + 8 + 92, undefined);
            properties_ffi["Ethernet"]["EAP"]["ServerCARefs"] = A.load.Ref(properties + 220 + 8 + 96, undefined);
            properties_ffi["Ethernet"]["EAP"]["SubjectMatch"] = A.load.Ref(properties + 220 + 8 + 100, undefined);
            properties_ffi["Ethernet"]["EAP"]["TLSVersionMax"] = A.load.Ref(properties + 220 + 8 + 104, undefined);
            if (A.load.Bool(properties + 220 + 8 + 111)) {
              properties_ffi["Ethernet"]["EAP"]["UseProactiveKeyCaching"] = A.load.Bool(properties + 220 + 8 + 108);
            }
            if (A.load.Bool(properties + 220 + 8 + 112)) {
              properties_ffi["Ethernet"]["EAP"]["UseSystemCAs"] = A.load.Bool(properties + 220 + 8 + 109);
            }
          }
        }
        properties_ffi["GUID"] = A.load.Ref(properties + 344, undefined);
        properties_ffi["IPAddressConfigType"] = A.load.Enum(properties + 348, ["DHCP", "Static"]);
        properties_ffi["Name"] = A.load.Ref(properties + 352, undefined);
        properties_ffi["NameServersConfigType"] = A.load.Enum(properties + 356, ["DHCP", "Static"]);
        if (A.load.Bool(properties + 1142)) {
          properties_ffi["Priority"] = A.load.Int32(properties + 360);
        }
        if (A.load.Bool(properties + 364 + 60)) {
          properties_ffi["ProxySettings"] = {};
          properties_ffi["ProxySettings"]["Type"] = A.load.Enum(properties + 364 + 0, [
            "Direct",
            "Manual",
            "PAC",
            "WPAD",
          ]);
          if (A.load.Bool(properties + 364 + 4 + 46)) {
            properties_ffi["ProxySettings"]["Manual"] = {};
            if (A.load.Bool(properties + 364 + 4 + 0 + 9)) {
              properties_ffi["ProxySettings"]["Manual"]["HTTPProxy"] = {};
              properties_ffi["ProxySettings"]["Manual"]["HTTPProxy"]["Host"] = A.load.Ref(
                properties + 364 + 4 + 0 + 0,
                undefined
              );
              if (A.load.Bool(properties + 364 + 4 + 0 + 8)) {
                properties_ffi["ProxySettings"]["Manual"]["HTTPProxy"]["Port"] = A.load.Int32(
                  properties + 364 + 4 + 0 + 4
                );
              }
            }
            if (A.load.Bool(properties + 364 + 4 + 12 + 9)) {
              properties_ffi["ProxySettings"]["Manual"]["SecureHTTPProxy"] = {};
              properties_ffi["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Host"] = A.load.Ref(
                properties + 364 + 4 + 12 + 0,
                undefined
              );
              if (A.load.Bool(properties + 364 + 4 + 12 + 8)) {
                properties_ffi["ProxySettings"]["Manual"]["SecureHTTPProxy"]["Port"] = A.load.Int32(
                  properties + 364 + 4 + 12 + 4
                );
              }
            }
            if (A.load.Bool(properties + 364 + 4 + 24 + 9)) {
              properties_ffi["ProxySettings"]["Manual"]["FTPProxy"] = {};
              properties_ffi["ProxySettings"]["Manual"]["FTPProxy"]["Host"] = A.load.Ref(
                properties + 364 + 4 + 24 + 0,
                undefined
              );
              if (A.load.Bool(properties + 364 + 4 + 24 + 8)) {
                properties_ffi["ProxySettings"]["Manual"]["FTPProxy"]["Port"] = A.load.Int32(
                  properties + 364 + 4 + 24 + 4
                );
              }
            }
            if (A.load.Bool(properties + 364 + 4 + 36 + 9)) {
              properties_ffi["ProxySettings"]["Manual"]["SOCKS"] = {};
              properties_ffi["ProxySettings"]["Manual"]["SOCKS"]["Host"] = A.load.Ref(
                properties + 364 + 4 + 36 + 0,
                undefined
              );
              if (A.load.Bool(properties + 364 + 4 + 36 + 8)) {
                properties_ffi["ProxySettings"]["Manual"]["SOCKS"]["Port"] = A.load.Int32(
                  properties + 364 + 4 + 36 + 4
                );
              }
            }
          }
          properties_ffi["ProxySettings"]["ExcludeDomains"] = A.load.Ref(properties + 364 + 52, undefined);
          properties_ffi["ProxySettings"]["PAC"] = A.load.Ref(properties + 364 + 56, undefined);
        }
        if (A.load.Bool(properties + 428 + 37)) {
          properties_ffi["StaticIPConfig"] = {};
          properties_ffi["StaticIPConfig"]["Gateway"] = A.load.Ref(properties + 428 + 0, undefined);
          properties_ffi["StaticIPConfig"]["IPAddress"] = A.load.Ref(properties + 428 + 4, undefined);
          properties_ffi["StaticIPConfig"]["ExcludedRoutes"] = A.load.Ref(properties + 428 + 8, undefined);
          properties_ffi["StaticIPConfig"]["IncludedRoutes"] = A.load.Ref(properties + 428 + 12, undefined);
          properties_ffi["StaticIPConfig"]["NameServers"] = A.load.Ref(properties + 428 + 16, undefined);
          properties_ffi["StaticIPConfig"]["SearchDomains"] = A.load.Ref(properties + 428 + 20, undefined);
          if (A.load.Bool(properties + 428 + 36)) {
            properties_ffi["StaticIPConfig"]["RoutingPrefix"] = A.load.Int32(properties + 428 + 24);
          }
          properties_ffi["StaticIPConfig"]["Type"] = A.load.Ref(properties + 428 + 28, undefined);
          properties_ffi["StaticIPConfig"]["WebProxyAutoDiscoveryUrl"] = A.load.Ref(properties + 428 + 32, undefined);
        }
        properties_ffi["Type"] = A.load.Enum(properties + 468, [
          "All",
          "Cellular",
          "Ethernet",
          "Tether",
          "VPN",
          "Wireless",
          "WiFi",
        ]);
        if (A.load.Bool(properties + 472 + 505)) {
          properties_ffi["VPN"] = {};
          if (A.load.Bool(properties + 472 + 504)) {
            properties_ffi["VPN"]["AutoConnect"] = A.load.Bool(properties + 472 + 0);
          }
          properties_ffi["VPN"]["Host"] = A.load.Ref(properties + 472 + 4, undefined);
          if (A.load.Bool(properties + 472 + 8 + 236)) {
            properties_ffi["VPN"]["IPsec"] = {};
            properties_ffi["VPN"]["IPsec"]["AuthenticationType"] = A.load.Ref(properties + 472 + 8 + 0, undefined);
            if (A.load.Bool(properties + 472 + 8 + 4 + 49)) {
              properties_ffi["VPN"]["IPsec"]["ClientCertPattern"] = {};
              properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(
                properties + 472 + 8 + 4 + 0,
                undefined
              );
              if (A.load.Bool(properties + 472 + 8 + 4 + 4 + 16)) {
                properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"] = {};
                properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(
                  properties + 472 + 8 + 4 + 4 + 0,
                  undefined
                );
                properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(
                  properties + 472 + 8 + 4 + 4 + 4,
                  undefined
                );
                properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(
                  properties + 472 + 8 + 4 + 4 + 8,
                  undefined
                );
                properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(
                  properties + 472 + 8 + 4 + 4 + 12,
                  undefined
                );
              }
              properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(
                properties + 472 + 8 + 4 + 24,
                undefined
              );
              properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(
                properties + 472 + 8 + 4 + 28,
                undefined
              );
              if (A.load.Bool(properties + 472 + 8 + 4 + 32 + 16)) {
                properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Subject"] = {};
                properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(
                  properties + 472 + 8 + 4 + 32 + 0,
                  undefined
                );
                properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(
                  properties + 472 + 8 + 4 + 32 + 4,
                  undefined
                );
                properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(
                  properties + 472 + 8 + 4 + 32 + 8,
                  undefined
                );
                properties_ffi["VPN"]["IPsec"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(
                  properties + 472 + 8 + 4 + 32 + 12,
                  undefined
                );
              }
            }
            properties_ffi["VPN"]["IPsec"]["ClientCertPKCS11Id"] = A.load.Ref(properties + 472 + 8 + 56, undefined);
            properties_ffi["VPN"]["IPsec"]["ClientCertProvisioningProfileId"] = A.load.Ref(
              properties + 472 + 8 + 60,
              undefined
            );
            properties_ffi["VPN"]["IPsec"]["ClientCertRef"] = A.load.Ref(properties + 472 + 8 + 64, undefined);
            properties_ffi["VPN"]["IPsec"]["ClientCertType"] = A.load.Ref(properties + 472 + 8 + 68, undefined);
            if (A.load.Bool(properties + 472 + 8 + 72 + 113)) {
              properties_ffi["VPN"]["IPsec"]["EAP"] = {};
              properties_ffi["VPN"]["IPsec"]["EAP"]["AnonymousIdentity"] = A.load.Ref(
                properties + 472 + 8 + 72 + 0,
                undefined
              );
              if (A.load.Bool(properties + 472 + 8 + 72 + 4 + 49)) {
                properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"] = {};
                properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(
                  properties + 472 + 8 + 72 + 4 + 0,
                  undefined
                );
                if (A.load.Bool(properties + 472 + 8 + 72 + 4 + 4 + 16)) {
                  properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"] = {};
                  properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(
                    properties + 472 + 8 + 72 + 4 + 4 + 0,
                    undefined
                  );
                  properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(
                    properties + 472 + 8 + 72 + 4 + 4 + 4,
                    undefined
                  );
                  properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(
                    properties + 472 + 8 + 72 + 4 + 4 + 8,
                    undefined
                  );
                  properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] =
                    A.load.Ref(properties + 472 + 8 + 72 + 4 + 4 + 12, undefined);
                }
                properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(
                  properties + 472 + 8 + 72 + 4 + 24,
                  undefined
                );
                properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(
                  properties + 472 + 8 + 72 + 4 + 28,
                  undefined
                );
                if (A.load.Bool(properties + 472 + 8 + 72 + 4 + 32 + 16)) {
                  properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"] = {};
                  properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(
                    properties + 472 + 8 + 72 + 4 + 32 + 0,
                    undefined
                  );
                  properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(
                    properties + 472 + 8 + 72 + 4 + 32 + 4,
                    undefined
                  );
                  properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(
                    properties + 472 + 8 + 72 + 4 + 32 + 8,
                    undefined
                  );
                  properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] =
                    A.load.Ref(properties + 472 + 8 + 72 + 4 + 32 + 12, undefined);
                }
              }
              properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertPKCS11Id"] = A.load.Ref(
                properties + 472 + 8 + 72 + 56,
                undefined
              );
              properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertProvisioningProfileId"] = A.load.Ref(
                properties + 472 + 8 + 72 + 60,
                undefined
              );
              properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertRef"] = A.load.Ref(
                properties + 472 + 8 + 72 + 64,
                undefined
              );
              properties_ffi["VPN"]["IPsec"]["EAP"]["ClientCertType"] = A.load.Ref(
                properties + 472 + 8 + 72 + 68,
                undefined
              );
              properties_ffi["VPN"]["IPsec"]["EAP"]["Identity"] = A.load.Ref(properties + 472 + 8 + 72 + 72, undefined);
              properties_ffi["VPN"]["IPsec"]["EAP"]["Inner"] = A.load.Ref(properties + 472 + 8 + 72 + 76, undefined);
              properties_ffi["VPN"]["IPsec"]["EAP"]["Outer"] = A.load.Ref(properties + 472 + 8 + 72 + 80, undefined);
              properties_ffi["VPN"]["IPsec"]["EAP"]["Password"] = A.load.Ref(properties + 472 + 8 + 72 + 84, undefined);
              if (A.load.Bool(properties + 472 + 8 + 72 + 110)) {
                properties_ffi["VPN"]["IPsec"]["EAP"]["SaveCredentials"] = A.load.Bool(properties + 472 + 8 + 72 + 88);
              }
              properties_ffi["VPN"]["IPsec"]["EAP"]["ServerCAPEMs"] = A.load.Ref(
                properties + 472 + 8 + 72 + 92,
                undefined
              );
              properties_ffi["VPN"]["IPsec"]["EAP"]["ServerCARefs"] = A.load.Ref(
                properties + 472 + 8 + 72 + 96,
                undefined
              );
              properties_ffi["VPN"]["IPsec"]["EAP"]["SubjectMatch"] = A.load.Ref(
                properties + 472 + 8 + 72 + 100,
                undefined
              );
              properties_ffi["VPN"]["IPsec"]["EAP"]["TLSVersionMax"] = A.load.Ref(
                properties + 472 + 8 + 72 + 104,
                undefined
              );
              if (A.load.Bool(properties + 472 + 8 + 72 + 111)) {
                properties_ffi["VPN"]["IPsec"]["EAP"]["UseProactiveKeyCaching"] = A.load.Bool(
                  properties + 472 + 8 + 72 + 108
                );
              }
              if (A.load.Bool(properties + 472 + 8 + 72 + 112)) {
                properties_ffi["VPN"]["IPsec"]["EAP"]["UseSystemCAs"] = A.load.Bool(properties + 472 + 8 + 72 + 109);
              }
            }
            properties_ffi["VPN"]["IPsec"]["Group"] = A.load.Ref(properties + 472 + 8 + 188, undefined);
            if (A.load.Bool(properties + 472 + 8 + 234)) {
              properties_ffi["VPN"]["IPsec"]["IKEVersion"] = A.load.Int32(properties + 472 + 8 + 192);
            }
            properties_ffi["VPN"]["IPsec"]["LocalIdentity"] = A.load.Ref(properties + 472 + 8 + 196, undefined);
            properties_ffi["VPN"]["IPsec"]["PSK"] = A.load.Ref(properties + 472 + 8 + 200, undefined);
            properties_ffi["VPN"]["IPsec"]["RemoteIdentity"] = A.load.Ref(properties + 472 + 8 + 204, undefined);
            if (A.load.Bool(properties + 472 + 8 + 235)) {
              properties_ffi["VPN"]["IPsec"]["SaveCredentials"] = A.load.Bool(properties + 472 + 8 + 208);
            }
            properties_ffi["VPN"]["IPsec"]["ServerCAPEMs"] = A.load.Ref(properties + 472 + 8 + 212, undefined);
            properties_ffi["VPN"]["IPsec"]["ServerCARefs"] = A.load.Ref(properties + 472 + 8 + 216, undefined);
            if (A.load.Bool(properties + 472 + 8 + 220 + 13)) {
              properties_ffi["VPN"]["IPsec"]["XAUTH"] = {};
              properties_ffi["VPN"]["IPsec"]["XAUTH"]["Password"] = A.load.Ref(
                properties + 472 + 8 + 220 + 0,
                undefined
              );
              if (A.load.Bool(properties + 472 + 8 + 220 + 12)) {
                properties_ffi["VPN"]["IPsec"]["XAUTH"]["SaveCredentials"] = A.load.Bool(
                  properties + 472 + 8 + 220 + 4
                );
              }
              properties_ffi["VPN"]["IPsec"]["XAUTH"]["Username"] = A.load.Ref(
                properties + 472 + 8 + 220 + 8,
                undefined
              );
            }
          }
          if (A.load.Bool(properties + 472 + 248 + 18)) {
            properties_ffi["VPN"]["L2TP"] = {};
            if (A.load.Bool(properties + 472 + 248 + 16)) {
              properties_ffi["VPN"]["L2TP"]["LcpEchoDisabled"] = A.load.Bool(properties + 472 + 248 + 0);
            }
            properties_ffi["VPN"]["L2TP"]["Password"] = A.load.Ref(properties + 472 + 248 + 4, undefined);
            if (A.load.Bool(properties + 472 + 248 + 17)) {
              properties_ffi["VPN"]["L2TP"]["SaveCredentials"] = A.load.Bool(properties + 472 + 248 + 8);
            }
            properties_ffi["VPN"]["L2TP"]["Username"] = A.load.Ref(properties + 472 + 248 + 12, undefined);
          }
          if (A.load.Bool(properties + 472 + 268 + 218)) {
            properties_ffi["VPN"]["OpenVPN"] = {};
            properties_ffi["VPN"]["OpenVPN"]["Auth"] = A.load.Ref(properties + 472 + 268 + 0, undefined);
            properties_ffi["VPN"]["OpenVPN"]["AuthRetry"] = A.load.Ref(properties + 472 + 268 + 4, undefined);
            if (A.load.Bool(properties + 472 + 268 + 209)) {
              properties_ffi["VPN"]["OpenVPN"]["AuthNoCache"] = A.load.Bool(properties + 472 + 268 + 8);
            }
            properties_ffi["VPN"]["OpenVPN"]["Cipher"] = A.load.Ref(properties + 472 + 268 + 12, undefined);
            properties_ffi["VPN"]["OpenVPN"]["ClientCertPKCS11Id"] = A.load.Ref(properties + 472 + 268 + 16, undefined);
            if (A.load.Bool(properties + 472 + 268 + 20 + 49)) {
              properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"] = {};
              properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(
                properties + 472 + 268 + 20 + 0,
                undefined
              );
              if (A.load.Bool(properties + 472 + 268 + 20 + 4 + 16)) {
                properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"] = {};
                properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(
                  properties + 472 + 268 + 20 + 4 + 0,
                  undefined
                );
                properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(
                  properties + 472 + 268 + 20 + 4 + 4,
                  undefined
                );
                properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(
                  properties + 472 + 268 + 20 + 4 + 8,
                  undefined
                );
                properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(
                  properties + 472 + 268 + 20 + 4 + 12,
                  undefined
                );
              }
              properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(
                properties + 472 + 268 + 20 + 24,
                undefined
              );
              properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(
                properties + 472 + 268 + 20 + 28,
                undefined
              );
              if (A.load.Bool(properties + 472 + 268 + 20 + 32 + 16)) {
                properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"] = {};
                properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(
                  properties + 472 + 268 + 20 + 32 + 0,
                  undefined
                );
                properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(
                  properties + 472 + 268 + 20 + 32 + 4,
                  undefined
                );
                properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(
                  properties + 472 + 268 + 20 + 32 + 8,
                  undefined
                );
                properties_ffi["VPN"]["OpenVPN"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(
                  properties + 472 + 268 + 20 + 32 + 12,
                  undefined
                );
              }
            }
            properties_ffi["VPN"]["OpenVPN"]["ClientCertProvisioningProfileId"] = A.load.Ref(
              properties + 472 + 268 + 72,
              undefined
            );
            properties_ffi["VPN"]["OpenVPN"]["ClientCertRef"] = A.load.Ref(properties + 472 + 268 + 76, undefined);
            properties_ffi["VPN"]["OpenVPN"]["ClientCertType"] = A.load.Ref(properties + 472 + 268 + 80, undefined);
            properties_ffi["VPN"]["OpenVPN"]["CompLZO"] = A.load.Ref(properties + 472 + 268 + 84, undefined);
            if (A.load.Bool(properties + 472 + 268 + 210)) {
              properties_ffi["VPN"]["OpenVPN"]["CompNoAdapt"] = A.load.Bool(properties + 472 + 268 + 88);
            }
            properties_ffi["VPN"]["OpenVPN"]["ExtraHosts"] = A.load.Ref(properties + 472 + 268 + 92, undefined);
            if (A.load.Bool(properties + 472 + 268 + 211)) {
              properties_ffi["VPN"]["OpenVPN"]["IgnoreDefaultRoute"] = A.load.Bool(properties + 472 + 268 + 96);
            }
            properties_ffi["VPN"]["OpenVPN"]["KeyDirection"] = A.load.Ref(properties + 472 + 268 + 100, undefined);
            properties_ffi["VPN"]["OpenVPN"]["NsCertType"] = A.load.Ref(properties + 472 + 268 + 104, undefined);
            properties_ffi["VPN"]["OpenVPN"]["OTP"] = A.load.Ref(properties + 472 + 268 + 108, undefined);
            properties_ffi["VPN"]["OpenVPN"]["Password"] = A.load.Ref(properties + 472 + 268 + 112, undefined);
            if (A.load.Bool(properties + 472 + 268 + 212)) {
              properties_ffi["VPN"]["OpenVPN"]["Port"] = A.load.Int32(properties + 472 + 268 + 116);
            }
            properties_ffi["VPN"]["OpenVPN"]["Proto"] = A.load.Ref(properties + 472 + 268 + 120, undefined);
            if (A.load.Bool(properties + 472 + 268 + 213)) {
              properties_ffi["VPN"]["OpenVPN"]["PushPeerInfo"] = A.load.Bool(properties + 472 + 268 + 124);
            }
            properties_ffi["VPN"]["OpenVPN"]["RemoteCertEKU"] = A.load.Ref(properties + 472 + 268 + 128, undefined);
            properties_ffi["VPN"]["OpenVPN"]["RemoteCertKU"] = A.load.Ref(properties + 472 + 268 + 132, undefined);
            properties_ffi["VPN"]["OpenVPN"]["RemoteCertTLS"] = A.load.Ref(properties + 472 + 268 + 136, undefined);
            if (A.load.Bool(properties + 472 + 268 + 214)) {
              properties_ffi["VPN"]["OpenVPN"]["RenegSec"] = A.load.Int32(properties + 472 + 268 + 140);
            }
            if (A.load.Bool(properties + 472 + 268 + 215)) {
              properties_ffi["VPN"]["OpenVPN"]["SaveCredentials"] = A.load.Bool(properties + 472 + 268 + 144);
            }
            properties_ffi["VPN"]["OpenVPN"]["ServerCAPEMs"] = A.load.Ref(properties + 472 + 268 + 148, undefined);
            properties_ffi["VPN"]["OpenVPN"]["ServerCARefs"] = A.load.Ref(properties + 472 + 268 + 152, undefined);
            properties_ffi["VPN"]["OpenVPN"]["ServerCertRef"] = A.load.Ref(properties + 472 + 268 + 156, undefined);
            if (A.load.Bool(properties + 472 + 268 + 216)) {
              properties_ffi["VPN"]["OpenVPN"]["ServerPollTimeout"] = A.load.Int32(properties + 472 + 268 + 160);
            }
            if (A.load.Bool(properties + 472 + 268 + 217)) {
              properties_ffi["VPN"]["OpenVPN"]["Shaper"] = A.load.Int32(properties + 472 + 268 + 164);
            }
            properties_ffi["VPN"]["OpenVPN"]["StaticChallenge"] = A.load.Ref(properties + 472 + 268 + 168, undefined);
            properties_ffi["VPN"]["OpenVPN"]["TLSAuthContents"] = A.load.Ref(properties + 472 + 268 + 172, undefined);
            properties_ffi["VPN"]["OpenVPN"]["TLSRemote"] = A.load.Ref(properties + 472 + 268 + 176, undefined);
            properties_ffi["VPN"]["OpenVPN"]["TLSVersionMin"] = A.load.Ref(properties + 472 + 268 + 180, undefined);
            properties_ffi["VPN"]["OpenVPN"]["UserAuthenticationType"] = A.load.Ref(
              properties + 472 + 268 + 184,
              undefined
            );
            properties_ffi["VPN"]["OpenVPN"]["Username"] = A.load.Ref(properties + 472 + 268 + 188, undefined);
            properties_ffi["VPN"]["OpenVPN"]["Verb"] = A.load.Ref(properties + 472 + 268 + 192, undefined);
            properties_ffi["VPN"]["OpenVPN"]["VerifyHash"] = A.load.Ref(properties + 472 + 268 + 196, undefined);
            if (A.load.Bool(properties + 472 + 268 + 200 + 8)) {
              properties_ffi["VPN"]["OpenVPN"]["VerifyX509"] = {};
              properties_ffi["VPN"]["OpenVPN"]["VerifyX509"]["Name"] = A.load.Ref(
                properties + 472 + 268 + 200 + 0,
                undefined
              );
              properties_ffi["VPN"]["OpenVPN"]["VerifyX509"]["Type"] = A.load.Ref(
                properties + 472 + 268 + 200 + 4,
                undefined
              );
            }
          }
          if (A.load.Bool(properties + 472 + 488 + 8)) {
            properties_ffi["VPN"]["ThirdPartyVPN"] = {};
            properties_ffi["VPN"]["ThirdPartyVPN"]["ExtensionID"] = A.load.Ref(properties + 472 + 488 + 0, undefined);
            properties_ffi["VPN"]["ThirdPartyVPN"]["ProviderName"] = A.load.Ref(properties + 472 + 488 + 4, undefined);
          }
          properties_ffi["VPN"]["Type"] = A.load.Ref(properties + 472 + 500, undefined);
        }
        if (A.load.Bool(properties + 980 + 161)) {
          properties_ffi["WiFi"] = {};
          if (A.load.Bool(properties + 980 + 156)) {
            properties_ffi["WiFi"]["AllowGatewayARPPolling"] = A.load.Bool(properties + 980 + 0);
          }
          if (A.load.Bool(properties + 980 + 157)) {
            properties_ffi["WiFi"]["AutoConnect"] = A.load.Bool(properties + 980 + 1);
          }
          properties_ffi["WiFi"]["BSSID"] = A.load.Ref(properties + 980 + 4, undefined);
          if (A.load.Bool(properties + 980 + 8 + 113)) {
            properties_ffi["WiFi"]["EAP"] = {};
            properties_ffi["WiFi"]["EAP"]["AnonymousIdentity"] = A.load.Ref(properties + 980 + 8 + 0, undefined);
            if (A.load.Bool(properties + 980 + 8 + 4 + 49)) {
              properties_ffi["WiFi"]["EAP"]["ClientCertPattern"] = {};
              properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["EnrollmentURI"] = A.load.Ref(
                properties + 980 + 8 + 4 + 0,
                undefined
              );
              if (A.load.Bool(properties + 980 + 8 + 4 + 4 + 16)) {
                properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"] = {};
                properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["CommonName"] = A.load.Ref(
                  properties + 980 + 8 + 4 + 4 + 0,
                  undefined
                );
                properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Locality"] = A.load.Ref(
                  properties + 980 + 8 + 4 + 4 + 4,
                  undefined
                );
                properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["Organization"] = A.load.Ref(
                  properties + 980 + 8 + 4 + 4 + 8,
                  undefined
                );
                properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Issuer"]["OrganizationalUnit"] = A.load.Ref(
                  properties + 980 + 8 + 4 + 4 + 12,
                  undefined
                );
              }
              properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCAPEMs"] = A.load.Ref(
                properties + 980 + 8 + 4 + 24,
                undefined
              );
              properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["IssuerCARef"] = A.load.Ref(
                properties + 980 + 8 + 4 + 28,
                undefined
              );
              if (A.load.Bool(properties + 980 + 8 + 4 + 32 + 16)) {
                properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Subject"] = {};
                properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["CommonName"] = A.load.Ref(
                  properties + 980 + 8 + 4 + 32 + 0,
                  undefined
                );
                properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Locality"] = A.load.Ref(
                  properties + 980 + 8 + 4 + 32 + 4,
                  undefined
                );
                properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["Organization"] = A.load.Ref(
                  properties + 980 + 8 + 4 + 32 + 8,
                  undefined
                );
                properties_ffi["WiFi"]["EAP"]["ClientCertPattern"]["Subject"]["OrganizationalUnit"] = A.load.Ref(
                  properties + 980 + 8 + 4 + 32 + 12,
                  undefined
                );
              }
            }
            properties_ffi["WiFi"]["EAP"]["ClientCertPKCS11Id"] = A.load.Ref(properties + 980 + 8 + 56, undefined);
            properties_ffi["WiFi"]["EAP"]["ClientCertProvisioningProfileId"] = A.load.Ref(
              properties + 980 + 8 + 60,
              undefined
            );
            properties_ffi["WiFi"]["EAP"]["ClientCertRef"] = A.load.Ref(properties + 980 + 8 + 64, undefined);
            properties_ffi["WiFi"]["EAP"]["ClientCertType"] = A.load.Ref(properties + 980 + 8 + 68, undefined);
            properties_ffi["WiFi"]["EAP"]["Identity"] = A.load.Ref(properties + 980 + 8 + 72, undefined);
            properties_ffi["WiFi"]["EAP"]["Inner"] = A.load.Ref(properties + 980 + 8 + 76, undefined);
            properties_ffi["WiFi"]["EAP"]["Outer"] = A.load.Ref(properties + 980 + 8 + 80, undefined);
            properties_ffi["WiFi"]["EAP"]["Password"] = A.load.Ref(properties + 980 + 8 + 84, undefined);
            if (A.load.Bool(properties + 980 + 8 + 110)) {
              properties_ffi["WiFi"]["EAP"]["SaveCredentials"] = A.load.Bool(properties + 980 + 8 + 88);
            }
            properties_ffi["WiFi"]["EAP"]["ServerCAPEMs"] = A.load.Ref(properties + 980 + 8 + 92, undefined);
            properties_ffi["WiFi"]["EAP"]["ServerCARefs"] = A.load.Ref(properties + 980 + 8 + 96, undefined);
            properties_ffi["WiFi"]["EAP"]["SubjectMatch"] = A.load.Ref(properties + 980 + 8 + 100, undefined);
            properties_ffi["WiFi"]["EAP"]["TLSVersionMax"] = A.load.Ref(properties + 980 + 8 + 104, undefined);
            if (A.load.Bool(properties + 980 + 8 + 111)) {
              properties_ffi["WiFi"]["EAP"]["UseProactiveKeyCaching"] = A.load.Bool(properties + 980 + 8 + 108);
            }
            if (A.load.Bool(properties + 980 + 8 + 112)) {
              properties_ffi["WiFi"]["EAP"]["UseSystemCAs"] = A.load.Bool(properties + 980 + 8 + 109);
            }
          }
          if (A.load.Bool(properties + 980 + 158)) {
            properties_ffi["WiFi"]["Frequency"] = A.load.Int32(properties + 980 + 124);
          }
          properties_ffi["WiFi"]["FrequencyList"] = A.load.Ref(properties + 980 + 128, undefined);
          properties_ffi["WiFi"]["HexSSID"] = A.load.Ref(properties + 980 + 132, undefined);
          if (A.load.Bool(properties + 980 + 159)) {
            properties_ffi["WiFi"]["HiddenSSID"] = A.load.Bool(properties + 980 + 136);
          }
          properties_ffi["WiFi"]["Passphrase"] = A.load.Ref(properties + 980 + 140, undefined);
          properties_ffi["WiFi"]["SSID"] = A.load.Ref(properties + 980 + 144, undefined);
          properties_ffi["WiFi"]["Security"] = A.load.Ref(properties + 980 + 148, undefined);
          if (A.load.Bool(properties + 980 + 160)) {
            properties_ffi["WiFi"]["SignalStrength"] = A.load.Int32(properties + 980 + 152);
          }
        }

        const _ret = WEBEXT.networkingPrivate.setProperties(A.H.get<object>(networkGuid), properties_ffi);
        A.store.Ref(retPtr, _ret);
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
    "has_StartActivate": (): heap.Ref<boolean> => {
      if (WEBEXT?.networkingPrivate && "startActivate" in WEBEXT?.networkingPrivate) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_StartActivate": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.startActivate);
    },
    "call_StartActivate": (retPtr: Pointer, networkGuid: heap.Ref<object>, carrier: heap.Ref<object>): void => {
      const _ret = WEBEXT.networkingPrivate.startActivate(A.H.get<object>(networkGuid), A.H.get<object>(carrier));
      A.store.Ref(retPtr, _ret);
    },
    "try_StartActivate": (
      retPtr: Pointer,
      errPtr: Pointer,
      networkGuid: heap.Ref<object>,
      carrier: heap.Ref<object>
    ): heap.Ref<boolean> => {
      try {
        const _ret = WEBEXT.networkingPrivate.startActivate(A.H.get<object>(networkGuid), A.H.get<object>(carrier));
        A.store.Ref(retPtr, _ret);
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
    "has_StartConnect": (): heap.Ref<boolean> => {
      if (WEBEXT?.networkingPrivate && "startConnect" in WEBEXT?.networkingPrivate) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_StartConnect": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.startConnect);
    },
    "call_StartConnect": (retPtr: Pointer, networkGuid: heap.Ref<object>): void => {
      const _ret = WEBEXT.networkingPrivate.startConnect(A.H.get<object>(networkGuid));
      A.store.Ref(retPtr, _ret);
    },
    "try_StartConnect": (retPtr: Pointer, errPtr: Pointer, networkGuid: heap.Ref<object>): heap.Ref<boolean> => {
      try {
        const _ret = WEBEXT.networkingPrivate.startConnect(A.H.get<object>(networkGuid));
        A.store.Ref(retPtr, _ret);
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
    "has_StartDisconnect": (): heap.Ref<boolean> => {
      if (WEBEXT?.networkingPrivate && "startDisconnect" in WEBEXT?.networkingPrivate) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_StartDisconnect": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.startDisconnect);
    },
    "call_StartDisconnect": (retPtr: Pointer, networkGuid: heap.Ref<object>): void => {
      const _ret = WEBEXT.networkingPrivate.startDisconnect(A.H.get<object>(networkGuid));
      A.store.Ref(retPtr, _ret);
    },
    "try_StartDisconnect": (retPtr: Pointer, errPtr: Pointer, networkGuid: heap.Ref<object>): heap.Ref<boolean> => {
      try {
        const _ret = WEBEXT.networkingPrivate.startDisconnect(A.H.get<object>(networkGuid));
        A.store.Ref(retPtr, _ret);
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
    "has_UnlockCellularSim": (): heap.Ref<boolean> => {
      if (WEBEXT?.networkingPrivate && "unlockCellularSim" in WEBEXT?.networkingPrivate) {
        return A.H.TRUE;
      }
      return A.H.FALSE;
    },
    "func_UnlockCellularSim": (fn: Pointer): void => {
      A.store.Ref(fn, WEBEXT.networkingPrivate.unlockCellularSim);
    },
    "call_UnlockCellularSim": (
      retPtr: Pointer,
      networkGuid: heap.Ref<object>,
      pin: heap.Ref<object>,
      puk: heap.Ref<object>
    ): void => {
      const _ret = WEBEXT.networkingPrivate.unlockCellularSim(
        A.H.get<object>(networkGuid),
        A.H.get<object>(pin),
        A.H.get<object>(puk)
      );
      A.store.Ref(retPtr, _ret);
    },
    "try_UnlockCellularSim": (
      retPtr: Pointer,
      errPtr: Pointer,
      networkGuid: heap.Ref<object>,
      pin: heap.Ref<object>,
      puk: heap.Ref<object>
    ): heap.Ref<boolean> => {
      try {
        const _ret = WEBEXT.networkingPrivate.unlockCellularSim(
          A.H.get<object>(networkGuid),
          A.H.get<object>(pin),
          A.H.get<object>(puk)
        );
        A.store.Ref(retPtr, _ret);
        return A.H.TRUE;
      } catch (err: any) {
        A.store.Ref(errPtr, err);
        return A.H.FALSE;
      }
    },
  };
});
