// Copyright 2021 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Use the <code>chrome.os.diagnostics</code> API to run diagnostic routines.
//
// Many types defined here map with Mojo structs defined in
// chromeos/ash/services/cros_healthd/public/mojom/cros_healthd_diagnostics.mojom.

// Note: Please update documentation as well when this interface is changed.
// The documentation lives here: //docs/telemetry_extension/api_overview.md.
// LINT.IfChange

// ----------------- DIAGNOSTICS API V1 -----------------
[Namespace=(chrome, os, diagnostics)]
enum RoutineType {
  "ac_power",
  "battery_capacity",
  "battery_charge",
  "battery_discharge",
  "battery_health",
  "cpu_cache",
  "cpu_floating_point_accuracy",
  "cpu_prime_search",
  "cpu_stress",
  "disk_read",
  "dns_resolution",
  "memory",
  "nvme_wear_level",
  "smartctl_check",
  "lan_connectivity",
  "signal_strength",
  "dns_resolver_present",
  "gateway_can_be_pinged",
  "sensitive_sensor",
  "nvme_self_test",
  "fingerprint_alive",
  "smartctl_check_with_percentage_used",
  "emmc_lifetime",
  "bluetooth_power",
  "ufs_lifetime",
  "power_button",
  "audio_driver",
  "bluetooth_discovery",
  "bluetooth_scanning",
  "bluetooth_pairing",
};

[Namespace=(chrome, os, diagnostics)]
enum RoutineStatus {
  "unknown",
  "ready",
  "running",
  "waiting_user_action",
  "passed",
  "failed",
  "error",
  "cancelled",
  "failed_to_start",
  "removed",
  "cancelling",
  "unsupported",
  "not_run",
};

[Namespace=(chrome, os, diagnostics)]
enum RoutineCommandType {
  "cancel",
  "remove",
  "resume",
  "status",
};

[Namespace=(chrome, os, diagnostics)]
enum UserMessageType {
  "unknown",
  "unplug_ac_power",
  "plug_in_ac_power",
  "press_power_button",
};

[Namespace=(chrome, os, diagnostics)]
enum DiskReadRoutineType {
  "linear",
  "random",
};

[Namespace=(chrome, os, diagnostics)]
enum AcPowerStatus {
  "connected",
  "disconnected",
};

[Namespace=(chrome, os, diagnostics)]
dictionary GetAvailableRoutinesResponse {
  sequence<RoutineType> routines;
};

[Namespace=(chrome, os, diagnostics)]
dictionary GetRoutineUpdateRequest {
  long id;
  RoutineCommandType command;
};

[Namespace=(chrome, os, diagnostics)]
dictionary GetRoutineUpdateResponse {
  long progress_percent;
  DOMString? output;
  RoutineStatus status;
  DOMString status_message;
  // Returned for routines that require user action (e.g. unplug power cable).
  UserMessageType? user_message;
};

[Namespace=(chrome, os, diagnostics)]
dictionary RunAcPowerRoutineRequest {
  AcPowerStatus expected_status;
  // If specified, this must match the type of power
  // supply for the routine to succeed.
  DOMString? expected_power_type;
};

[Namespace=(chrome, os, diagnostics)]
dictionary RunBatteryChargeRoutineRequest {
  long length_seconds;

  long minimum_charge_percent_required;
};

[Namespace=(chrome, os, diagnostics)]
dictionary RunBatteryDischargeRoutineRequest {
  long length_seconds;

  long maximum_discharge_percent_allowed;
};

[Namespace=(chrome, os, diagnostics)]
dictionary RunBluetoothPairingRoutineRequest {
  DOMString peripheral_id;
};

[Namespace=(chrome, os, diagnostics)]
dictionary RunBluetoothScanningRoutineRequest {
  long length_seconds;
};

[Namespace=(chrome, os, diagnostics)]
dictionary RunCpuRoutineRequest {
  long length_seconds;
};

[Namespace=(chrome, os, diagnostics)]
dictionary RunDiskReadRequest {
  DiskReadRoutineType type;
  long length_seconds;
  long file_size_mb;
};

[Namespace=(chrome, os, diagnostics)]
enum NvmeSelfTestType {
  "short_test",
  "long_test",
};

[Namespace=(chrome, os, diagnostics)]
dictionary RunNvmeSelfTestRequest {
  NvmeSelfTestType test_type;
};

[Namespace=(chrome, os, diagnostics)]
dictionary RunNvmeWearLevelRequest {
  long wear_level_threshold;
};

[Namespace=(chrome, os, diagnostics)]
dictionary RunSmartctlCheckRequest {
  long? percentage_used_threshold;
};

[Namespace=(chrome, os, diagnostics)]
dictionary RunPowerButtonRequest {
  long timeout_seconds;
};

[Namespace=(chrome, os, diagnostics)]
dictionary RunRoutineResponse {
  long id;

  RoutineStatus status;
};

[Namespace=(chrome, os, diagnostics)]
callback GetAvailableRoutinesCallback = void (GetAvailableRoutinesResponse response);

[Namespace=(chrome, os, diagnostics)]
callback GetRoutineUpdateCallback = void (GetRoutineUpdateResponse response);

[Namespace=(chrome, os, diagnostics)]
callback RunRoutineCallback = void (RunRoutineResponse response);

// ----------------- DIAGNOSTICS API V2 -----------------

[Namespace=(chrome, os, diagnostics)]
dictionary RoutineInitializedInfo {
  DOMString? uuid;
};

[Namespace=(chrome, os, diagnostics)]
dictionary RoutineRunningInfo {
  DOMString? uuid;
  long? percentage;
};

[Namespace=(chrome, os, diagnostics)]
enum RoutineWaitingReason {
  "waiting_to_be_scheduled",
  "waiting_user_input",
};

[Namespace=(chrome, os, diagnostics)]
dictionary RoutineWaitingInfo {
  DOMString? uuid;
  long? percentage;
  // Reason why the routine waits.
  RoutineWaitingReason? reason;
  // Additional information, may be used to pass instruction or explanation.
  DOMString? message;
};

[Namespace=(chrome, os, diagnostics)]
enum ExceptionReason {
  "unknown",
  // Any other exceptions that we don't expect to happen. Clients should
  // simply report the error.
  "unexpected",
  // Raises this if clients try to run an unsupported feature. Note that
  // clients should use methods which return `SupportStatus` for
  // support status check.
  "unsupported",
  // The corresponding App UI was closed and thus stopped the routine
  // execution.
  "app_ui_closed",
};

[Namespace=(chrome, os, diagnostics)]
dictionary ExceptionInfo {
  DOMString? uuid;
  ExceptionReason reason;
  // A human readable message for debugging. Don't rely on the content because
  // it could change anytime.
  DOMString? debugMessage;
};

[Namespace=(chrome, os, diagnostics)]
enum MemtesterTestItemEnum {
  // The memtester test is not recognized.
  "unknown",

  // Test that all memory addresses to be tested can be set to itself and its
  // complement.
  "stuck_address",

  // These tests test different operation of a random int64 with buffer
  // initialized as 0xFFFFFFFF, repeating over 64 bit blocks.
  // Perform AND operation.
  "compare_and",
  // Perform DIV operation.
  "compare_div",
  // Perform MUL operation.
  "compare_mul",
  // Perform OR operation.
  "compare_or",
  // Perform SUB operation.
  "compare_sub",
  // Perform XOR operation.
  "compare_xor",
  // Perform ADD operation.
  "sequential_increment",

  // These tests test setting memory regions in a certain pattern, repeating
  // over each 64 bit blocks.
  // Test Pattern: |0*10*| and |1*01*|.
  "bit_flip",
  // Test Pattern:|0*1010*| and |1*0101*|.
  "bit_spread",
  // Test Pattern: all 256 possible combinations of a 8 bit block, repeated 8
  // times.
  "block_sequential",
  // Test Pattern: Alternating 0 and 1.
  "checkerboard",
  // Test Pattern: Random 64 bits.
  "random_value",
  // Test Pattern: all 0s and all 1s.
  "solid_bits",
  // Test Pattern: |0*10*|.
  "walking_ones",
  // Test Pattern: |1*01*|.
  "walking_zeroes",

  // These tests test writing random n bit words across the memory regions.
  // Test Pattern: 8 bit random words.
  "eight_bit_writes",
  // Test Pattern: 16 bit random words.
  "sixteen_bit_writes",
};

[Namespace=(chrome, os, diagnostics)]
dictionary MemtesterResult {
  sequence<MemtesterTestItemEnum> passed_items;
  sequence<MemtesterTestItemEnum> failed_items;
};

[Namespace=(chrome, os, diagnostics)]
dictionary MemoryRoutineFinishedInfo {
  DOMString? uuid;
  boolean? has_passed;
  // Number of bytes tested in the memory routine.
  double? bytesTested;
  // Contains the memtester test results.
  MemtesterResult? result;
};

[Namespace=(chrome, os, diagnostics)]
dictionary RunMemoryRoutineArguments {
  // An optional field to indicate how much memory should be tested. If the
  // value is null, memory test will run with as much memory as possible.
  long? maxTestingMemKib;
};

[Namespace=(chrome, os, diagnostics)]
dictionary CreateMemoryRoutineResponse {
  DOMString? uuid;
};

[Namespace=(chrome, os, diagnostics)]
callback CreateMemoryRoutineCallback = void (CreateMemoryRoutineResponse response);

[Namespace=(chrome, os, diagnostics)]
enum RoutineSupportStatus {
  "supported",
  "unsupported",
};

[Namespace=(chrome, os, diagnostics)]
dictionary RoutineSupportStatusInfo {
  RoutineSupportStatus? status;
};

[Namespace=(chrome, os, diagnostics)]
callback RoutineSupportStatusInfoCallback = void (RoutineSupportStatusInfo info);

[Namespace=(chrome, os, diagnostics)]
dictionary StartRoutineRequest {
  DOMString uuid;
};

[Namespace=(chrome, os, diagnostics)]
callback StartRoutineCallback = void ();

[Namespace=(chrome, os, diagnostics)]
dictionary CancelRoutineRequest {
  DOMString uuid;
};

[Namespace=(chrome, os, diagnostics)]
callback CancelRoutineCallback = void ();

[Namespace=(chrome, os, diagnostics)]
interface Functions {
  [supportsPromises] static void getAvailableRoutines(GetAvailableRoutinesCallback callback);

  [supportsPromises] static void getRoutineUpdate(GetRoutineUpdateRequest request,
                                                  GetRoutineUpdateCallback callback);

  [supportsPromises] static void runAcPowerRoutine(RunAcPowerRoutineRequest request,
                                                   RunRoutineCallback callback);

  [supportsPromises] static void runBatteryCapacityRoutine(RunRoutineCallback callback);

  [supportsPromises] static void runBatteryChargeRoutine(RunBatteryChargeRoutineRequest request,
                                                         RunRoutineCallback callback);

  [supportsPromises] static void runBatteryDischargeRoutine(RunBatteryDischargeRoutineRequest request,
                                                            RunRoutineCallback callback);

  [supportsPromises] static void runBatteryHealthRoutine(RunRoutineCallback callback);

  [supportsPromises] static void runBluetoothDiscoveryRoutine(RunRoutineCallback callback);

  [supportsPromises] static void runBluetoothPairingRoutine(RunBluetoothPairingRoutineRequest request,
                                                            RunRoutineCallback callback);

  [supportsPromises] static void runBluetoothPowerRoutine(RunRoutineCallback callback);

  [supportsPromises] static void runBluetoothScanningRoutine(RunBluetoothScanningRoutineRequest request,
                                                             RunRoutineCallback callback);

  [supportsPromises] static void runCpuCacheRoutine(RunCpuRoutineRequest request,
                                                    RunRoutineCallback callback);

  [supportsPromises] static void runCpuFloatingPointAccuracyRoutine(RunCpuRoutineRequest request,
                                                                    RunRoutineCallback callback);

  [supportsPromises] static void runCpuPrimeSearchRoutine(RunCpuRoutineRequest request,
                                                          RunRoutineCallback callback);

  [supportsPromises] static void runCpuStressRoutine(RunCpuRoutineRequest request,
                                                     RunRoutineCallback callback);

  [supportsPromises] static void runDiskReadRoutine(RunDiskReadRequest request,
                                                    RunRoutineCallback callback);

  [supportsPromises] static void runDnsResolutionRoutine(RunRoutineCallback callback);

  [supportsPromises] static void runDnsResolverPresentRoutine(RunRoutineCallback callback);

  [supportsPromises] static void runEmmcLifetimeRoutine(RunRoutineCallback callback);

  [supportsPromises] static void runFingerprintAliveRoutine(RunRoutineCallback callback);

  [supportsPromises] static void runGatewayCanBePingedRoutine(RunRoutineCallback callback);

  [supportsPromises] static void runLanConnectivityRoutine(RunRoutineCallback callback);

  [supportsPromises] static void runMemoryRoutine(RunRoutineCallback callback);

  [supportsPromises] static void runNvmeSelfTestRoutine(RunNvmeSelfTestRequest request, RunRoutineCallback callback);

  [supportsPromises] static void runNvmeWearLevelRoutine(RunNvmeWearLevelRequest request,
                                                         RunRoutineCallback callback);

  [supportsPromises] static void runSensitiveSensorRoutine(RunRoutineCallback callback);

  [supportsPromises] static void runSignalStrengthRoutine(RunRoutineCallback callback);

  [supportsPromises] static void runSmartctlCheckRoutine(optional RunSmartctlCheckRequest request, RunRoutineCallback callback);

  [supportsPromises] static void runUfsLifetimeRoutine(RunRoutineCallback callback);

  [supportsPromises] static void runPowerButtonRoutine(RunPowerButtonRequest request, RunRoutineCallback callback);

  [supportsPromises] static void runAudioDriverRoutine(RunRoutineCallback callback);

  // ----------------- DIAGNOSTICS API V2 -----------------

  // Starts execution of a routine. This can only be expected to work after
  // `onRoutineInitialized` was emitted for the routine with `UUID`.
  [supportsPromises] static void startRoutine(StartRoutineRequest request, StartRoutineCallback callback);

  // Stops executing the routine identified by `UUID` and removes all related resources from the system.
  [supportsPromises] static void cancelRoutine(CancelRoutineRequest request, CancelRoutineCallback callback);

  [supportsPromises] static void createMemoryRoutine(RunMemoryRoutineArguments args,
                                                        CreateMemoryRoutineCallback callback);

  // Checks whether a certain `RunMemoryRoutineArguments` is supported on the platform.
  [supportsPromises] static void isMemoryRoutineArgumentSupported(RunMemoryRoutineArguments args,
                                                        RoutineSupportStatusInfoCallback callback);
};

[Namespace=(chrome, os, diagnostics)]
interface Events {
  // Informs the extension that a routine was intitialized.
  static void onRoutineInitialized(RoutineInitializedInfo initializedInfo);

  // Informs the extension that a routine started running. This can happen in
  // two situations:
  // 1. `startRoutine` was called and the routine successfully started
  //    execution.
  // 2. The routine exited the "waiting" state and returned to running.
  static void onRoutineRunning(RoutineRunningInfo runningInfo);

  // Informs the extension that a routine stopped execution and waits for an
  // event, e.g. user interaction. `RoutineWaitingInfo` contains information
  // about what the routine is waiting for (see prototype above).
  static void onRoutineWaiting(RoutineWaitingInfo waitingInfo);

  // Informs the extension that a memory routine finished.
  static void onMemoryRoutineFinished(MemoryRoutineFinishedInfo finishedInfo);

  // Informs the extension that an exception occured. The error passed in
  // `ExceptionInfo` is non-recoverable.
  static void onRoutineException(ExceptionInfo exceptionInfo);
};

// LINT.ThenChange(//docs/telemetry_extension/api_overview.md)
// The following is an empty definition, since the IDL compiler only accepts
// comments over valid definitions.
[Namespace=(chrome, os, diagnostics)]
callback EOF = void();
