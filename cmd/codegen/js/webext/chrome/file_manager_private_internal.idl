// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Internal, used by fileManagerPrivate's custom bindings.

// Entry information that renderers need to create an Entry instance.
[Namespace=(chrome, fileManagerPrivateInternal), platforms=("chromeos")]
dictionary EntryDescription {
  DOMString fileSystemName;
  DOMString fileSystemRoot;
  DOMString fileFullPath;
  boolean fileIsDirectory;
};
[Namespace=(chrome, fileManagerPrivateInternal), platforms=("chromeos")]
dictionary IOTaskParams {
  DOMString? destinationFolderUrl;
  DOMString? password;
  boolean? showNotification;
};
[Namespace=(chrome, fileManagerPrivateInternal), platforms=("chromeos")]
dictionary ParsedTrashInfoFile {
  EntryDescription restoreEntry;
  DOMString trashInfoFileName;
  double deletionDate;
};
[Namespace=(chrome, fileManagerPrivateInternal), platforms=("chromeos")]
dictionary SearchFilesParams {
  DOMString? rootUrl;
  DOMString query;
  [Namespace=(chrome, fileManagerPrivate)] SearchType types;
  long maxResults;
  double modifiedTimestamp;
  [Namespace=(chrome, fileManagerPrivate)] FileCategory category;
};

[Namespace=(chrome, fileManagerPrivateInternal), platforms=("chromeos")]
callback SimpleCallback = void();
[Namespace=(chrome, fileManagerPrivateInternal), platforms=("chromeos")]
callback ResolveIsolatedEntriesCallback = void(sequence<EntryDescription> entries);
[Namespace=(chrome, fileManagerPrivateInternal), platforms=("chromeos")]
callback GetEntryPropertiesCallback = void(
    [Namespace=(chrome, fileManagerPrivate)] sequence<EntryProperties> entryProperties);
[Namespace=(chrome, fileManagerPrivateInternal), platforms=("chromeos")]
callback AddFileWatchCallback = void(optional boolean success);
[Namespace=(chrome, fileManagerPrivateInternal), platforms=("chromeos")]
callback RemoveFileWatchCallback = void(optional boolean success);
[Namespace=(chrome, fileManagerPrivateInternal), platforms=("chromeos")]
callback GetCustomActionsCallback = void([Namespace=(chrome, fileSystemProvider)] sequence<Action> actions);
[Namespace=(chrome, fileManagerPrivateInternal), platforms=("chromeos")]
callback ComputeChecksumCallback = void(DOMString checksum);
[Namespace=(chrome, fileManagerPrivateInternal), platforms=("chromeos")]
callback GetMimeTypeCallback = void(DOMString result);
[Namespace=(chrome, fileManagerPrivateInternal), platforms=("chromeos")]
callback GetContentMimeTypeCallback = void(DOMString result);
[Namespace=(chrome, fileManagerPrivateInternal), platforms=("chromeos")]
callback GetContentMetadataCallback = void(
    [Namespace=(chrome, fileManagerPrivate)] MediaMetadata result);
[Namespace=(chrome, fileManagerPrivateInternal), platforms=("chromeos")]
callback ExecuteTaskCallback = void([Namespace=(chrome, fileManagerPrivate)] TaskResult result);
[Namespace=(chrome, fileManagerPrivateInternal), platforms=("chromeos")]
callback GetFileTasksCallback = void([Namespace=(chrome, fileManagerPrivate)] ResultingTasks resultingTasks);
[Namespace=(chrome, fileManagerPrivateInternal), platforms=("chromeos")]
callback GetDisallowedTransfersCallback =
    void(sequence<EntryDescription> entries);
[Namespace=(chrome, fileManagerPrivateInternal), platforms=("chromeos")]
callback GetDlpMetadataCallback =
    void([Namespace=(chrome, fileManagerPrivate)] sequence<DlpMetadata> entries);
[Namespace=(chrome, fileManagerPrivateInternal), platforms=("chromeos")]
callback GetDriveQuotaMetadataCallback =
    void(optional [Namespace=(chrome, fileManagerPrivate)] DriveQuotaMetadata driveQuotaMetadata);
[Namespace=(chrome, fileManagerPrivateInternal), platforms=("chromeos")]
callback IOTaskIdCallback = void(long taskId);
[Namespace=(chrome, fileManagerPrivateInternal), platforms=("chromeos")]
callback ValidatePathNameLengthCallback = void(boolean result);
[Namespace=(chrome, fileManagerPrivateInternal), platforms=("chromeos")]
callback GetDirectorySizeCallback = void(double size);
[Namespace=(chrome, fileManagerPrivateInternal), platforms=("chromeos")]
callback GetRecentFilesCallback = void(sequence<EntryDescription> entries);
[Namespace=(chrome, fileManagerPrivateInternal), platforms=("chromeos")]
callback GetCrostiniSharedPathsCallback =
    void(sequence<EntryDescription> entries, boolean firstForSession);
[Namespace=(chrome, fileManagerPrivateInternal), platforms=("chromeos")]
callback GetLinuxPackageInfoCallback =
    void([Namespace=(chrome, fileManagerPrivate)] LinuxPackageInfo linux_package_info);
[Namespace=(chrome, fileManagerPrivateInternal), platforms=("chromeos")]
callback InstallLinuxPackageCallback =
    void([Namespace=(chrome, fileManagerPrivate)] InstallLinuxPackageResponse response);
[Namespace=(chrome, fileManagerPrivateInternal), platforms=("chromeos")]
callback GetThumbnailCallback = void(DOMString ThumbnailDataUrl);
[Namespace=(chrome, fileManagerPrivateInternal), platforms=("chromeos")]
callback BooleanCallback = void(boolean result);
[Namespace=(chrome, fileManagerPrivateInternal), platforms=("chromeos")]
callback GetVolumeRootCallback = void(EntryDescription rootDir);
[Namespace=(chrome, fileManagerPrivateInternal), platforms=("chromeos")]
callback ParseTrashInfoFilesCallback = void(sequence<ParsedTrashInfoFile> files);
[Namespace=(chrome, fileManagerPrivateInternal), platforms=("chromeos")]
callback SearchFilesCallback = void(sequence<EntryDescription> entries);

[Namespace=(chrome, fileManagerPrivateInternal), platforms=("chromeos")]
interface Functions {
  [supportsPromises] static void resolveIsolatedEntries(
      sequence<DOMString> urls,
      ResolveIsolatedEntriesCallback callback);
  [supportsPromises] static void getEntryProperties(
      sequence<DOMString> urls,
      [Namespace=(chrome, fileManagerPrivate)] sequence<EntryPropertyName> names,
      GetEntryPropertiesCallback callback);
  [supportsPromises] static void addFileWatch(
      DOMString url,
      AddFileWatchCallback callback);
  [supportsPromises] static void removeFileWatch(
      DOMString url,
      RemoveFileWatchCallback callback);
  [supportsPromises] static void getCustomActions(
      sequence<DOMString> urls,
      GetCustomActionsCallback callback);
  [supportsPromises] static void executeCustomAction(
      sequence<DOMString> urls,
      DOMString actionId,
      SimpleCallback callback);
  [supportsPromises] static void computeChecksum(
      DOMString url,
      ComputeChecksumCallback callback);
  [supportsPromises] static void getMimeType(
      DOMString url,
      GetMimeTypeCallback callback);
  [supportsPromises] static void getContentMimeType(
      DOMString blobUUID,
      GetContentMimeTypeCallback callback);
  [supportsPromises] static void getContentMetadata(
      DOMString blobUUID,
      DOMString mimeType,
      boolean includeImages,
      GetContentMetadataCallback callback);
  [supportsPromises] static void pinDriveFile(
      DOMString url,
      boolean pin,
      SimpleCallback callback);
  [supportsPromises] static void executeTask(
      [Namespace=(chrome, fileManagerPrivate)] FileTaskDescriptor descriptor,
      sequence<DOMString> urls,
      ExecuteTaskCallback callback);
  [supportsPromises] static void searchFiles(
      SearchFilesParams searchParams, SearchFilesCallback callback);
  [supportsPromises] static void setDefaultTask(
      [Namespace=(chrome, fileManagerPrivate)] FileTaskDescriptor descriptor,
      sequence<DOMString> urls,
      sequence<DOMString> mimeTypes,
      SimpleCallback callback);
  [supportsPromises] static void getFileTasks(
      sequence<DOMString> urls,
      sequence<DOMString> dlpSourceUrls,
      GetFileTasksCallback callback);
  [supportsPromises] static void getDisallowedTransfers(
      sequence<DOMString> entries,
      DOMString destinationEntry,
      boolean isMove,
      GetDisallowedTransfersCallback callback);
  [supportsPromises] static void getDlpMetadata(
      sequence<DOMString> entries,
      GetDlpMetadataCallback callback);
  [supportsPromises] static void getDriveQuotaMetadata(
      DOMString url,
      GetDriveQuotaMetadataCallback callback);
  [supportsPromises] static void validatePathNameLength(
      DOMString parentUrl,
      DOMString name,
      ValidatePathNameLengthCallback callback);
  [supportsPromises] static void getDirectorySize(
      DOMString url,
      GetDirectorySizeCallback callback);
  [supportsPromises] static void getVolumeRoot(
      [Namespace=(chrome, fileManagerPrivate)] GetVolumeRootOptions options,
      GetVolumeRootCallback callback);
  [supportsPromises] static void getRecentFiles(
      [Namespace=(chrome, fileManagerPrivate)] SourceRestriction restriction,
      [Namespace=(chrome, fileManagerPrivate)] FileCategory file_category,
      boolean invalidate_cache,
      GetRecentFilesCallback callback);
  [supportsPromises] static void sharePathsWithCrostini(
      DOMString vmName, sequence<DOMString> urls,
      boolean persist,
      SimpleCallback callback);
  [supportsPromises] static void unsharePathWithCrostini(
      DOMString vmName, DOMString url,
      SimpleCallback callback);
  static void getCrostiniSharedPaths(
      boolean observeFirstForSession,
      DOMString vmName,
      GetCrostiniSharedPathsCallback callback);
  [supportsPromises] static void getLinuxPackageInfo(
      DOMString url,
      GetLinuxPackageInfoCallback callback);
  static void installLinuxPackage(
      DOMString url,
      InstallLinuxPackageCallback callback);
  static void importCrostiniImage(DOMString url);
  [supportsPromises] static void sharesheetHasTargets(
      sequence<DOMString> urls,
      BooleanCallback callback);
  [supportsPromises] static void invokeSharesheet(
      sequence<DOMString> urls,
      [Namespace=(chrome, fileManagerPrivate)] SharesheetLaunchSource launchSource,
      sequence<DOMString> dlpSourceUrls,
      SimpleCallback callback);
  [supportsPromises] static void toggleAddedToHoldingSpace(
      sequence<DOMString> urls, boolean add,
                                        optional SimpleCallback callback);
  [supportsPromises] static void startIOTask(
      [Namespace=(chrome, fileManagerPrivate)] IOTaskType type,
      sequence<DOMString> urls,
      IOTaskParams params,
      optional IOTaskIdCallback callback);
  [supportsPromises] static void parseTrashInfoFiles(
      sequence<DOMString> urls,
      ParseTrashInfoFilesCallback callback);
};
