// Copyright 2015 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Use the <code>chrome.usersPrivate</code> API to manage users.

[Namespace=(chrome, usersPrivate), platforms=("chromeos")]
dictionary User {
  // Email for the user.
  DOMString email;

  // Display email for the user.
  DOMString displayEmail;

  // Display name for the user.
  DOMString name;

  // Whether this user is the device owner.
  boolean isOwner;

  // Whether this user is Child.
  boolean isChild;
};

[Namespace=(chrome, usersPrivate), platforms=("chromeos")]
dictionary LoginStatusDict {
  // True if a user is logged in (including guest, public session, etc).
  boolean isLoggedIn;

  // True if the screen is locked.
  boolean isScreenLocked;
};

[Namespace=(chrome, usersPrivate), platforms=("chromeos")]
callback UsersCallback = void (sequence<User> users);
[Namespace=(chrome, usersPrivate), platforms=("chromeos")]
callback UserAddedCallback = void (boolean success);
[Namespace=(chrome, usersPrivate), platforms=("chromeos")]
callback UserRemovedCallback = void (boolean success);
[Namespace=(chrome, usersPrivate), platforms=("chromeos")]
callback ManagedCallback = void (boolean managed);
[Namespace=(chrome, usersPrivate), platforms=("chromeos")]
callback UserCallback = void (User user);
[Namespace=(chrome, usersPrivate), platforms=("chromeos")]
callback LoginStatusCallback = void (LoginStatusDict status);
[Namespace=(chrome, usersPrivate), platforms=("chromeos")]
callback IsUserInListCallback = void (boolean found);

[Namespace=(chrome, usersPrivate), platforms=("chromeos")]
interface Functions {
  // Gets a list of known users.
  [supportsPromises] static void getUsers(UsersCallback callback);

  // Checks to see if the user is already present in the user list.
  [supportsPromises] static void isUserInList(DOMString email,
                                              IsUserInListCallback callback);

  // Adds a new user with the given email to the user list.
  // The callback is called with true if the user was added succesfully, or
  // with false if not (e.g. because the user was already present, or the
  // current user isn't the owner).
  [supportsPromises] static void addUser(DOMString email,
                                         UserAddedCallback callback);

  // Removes the user with the given email from the user list.
  // The callback is called with true if the user was removed succesfully, or
  // with false if not (e.g. because the user was not already present, or
  // the current user isn't the owner).
  [supportsPromises] static void removeUser(DOMString email,
                                            UserRemovedCallback callback);

  // Whether the user list is managed by enterprise.
  [supportsPromises] static void isUserListManaged(ManagedCallback callback);

  // Returns the current user.
  [supportsPromises] static void getCurrentUser(UserCallback callback);

  // Get login status.
  [supportsPromises] static void getLoginStatus(LoginStatusCallback callback);
};
